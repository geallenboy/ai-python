{
  "url": "https://n8n.io/workflows/2903-youtube-outlier-detector-find-trending-content-based-on-your-competitors/",
  "title": "Youtube Outlier Detector (Find trending content based on your competitors)",
  "author": "Leonardo Grigorio",
  "publish_date": "Last update 3 months ago",
  "publish_date_absolute": "2025-02-26",
  "categories": [
    {
      "name": "Other"
    }
  ],
  "workflow_json": "{\"id\":\"Zrd98BnbmN1Px9an\",\"meta\":{\"instanceId\":\"edc0464b1050024ebda3e16fceea795e4fdf67b1f61187c4f2f3a72397278df0\",\"templateCredsSetupCompleted\":true},\"name\":\"Youtube Searcher\",\"tags\":[],\"nodes\":[{\"id\":\"5cb8757a-d8f0-49fa-803d-7f04b514f9f8\",\"name\":\"Loop Over Items\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[80,220],\"parameters\":{\"options\":{}},\"typeVersion\":3},{\"id\":\"28964bd5-dc53-4dfa-bbb1-4eb80b952063\",\"name\":\"find_video_data1\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1440,320],\"parameters\":{\"url\":\"https://www.googleapis.com/youtube/v3/videos?\",\"options\":{},\"sendQuery\":true,\"queryParameters\":{\"parameters\":[{\"name\":\"key\",\"value\":\"={{ $env[\\\"GOOGLE_API_KEY\\\"] }}\"},{\"name\":\"id\",\"value\":\"={{ $json.id.videoId }}\"},{\"name\":\"part\",\"value\":\"contentDetails, statistics\"}]}},\"typeVersion\":4.2},{\"id\":\"5e8b9441-4b91-4460-a9ac-4a0a02aa57ad\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"disabled\":true,\"position\":[-180,220],\"parameters\":{},\"typeVersion\":1},{\"id\":\"793ef651-ea56-41bc-a0a9-feeaddf999c0\",\"name\":\"Execute Workflow Trigger\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[-160,-180],\"parameters\":{},\"typeVersion\":1},{\"id\":\"64e331ff-2cda-4ba0-94f9-03fa6c3d6590\",\"name\":\"fetch_last_registered\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[360,360],\"parameters\":{\"query\":\"SELECT MAX(publish_time) AS latest_publish_time\\nFROM video_statistics\\nWHERE channel_id = '{{ $json.id }}';\",\"options\":{},\"operation\":\"executeQuery\"},\"credentials\":{\"postgres\":{\"id\":\"KQiQIZTArTBSNJH7\",\"name\":\"Postgres account\"}},\"typeVersion\":2.5},{\"id\":\"fb0a8208-c920-4344-8816-ef6509f07abc\",\"name\":\"get_videos\",\"type\":\"n8n-nodes-base.youTube\",\"onError\":\"continueRegularOutput\",\"position\":[640,360],\"parameters\":{\"limit\":50,\"filters\":{\"channelId\":\"={{ $('Loop Over Items').item.json.id }}\",\"regionCode\":\"US\",\"publishedAfter\":\"={{ $json.latest_publish_time ? new Date(new Date($json.latest_publish_time).getTime() + 60 * 60 * 1000).toISOString() : new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000).toISOString() }}\"},\"options\":{\"order\":\"relevance\",\"safeSearch\":\"moderate\"},\"resource\":\"video\"},\"credentials\":{\"youTubeOAuth2Api\":{\"id\":\"o3VUdoHEk6VhB1lq\",\"name\":\"YouTube account\"}},\"typeVersion\":1,\"alwaysOutputData\":true},{\"id\":\"ea358d3c-9a83-49c9-a02e-745cf5b29097\",\"name\":\"if_is_empty\",\"type\":\"n8n-nodes-base.if\",\"onError\":\"continueRegularOutput\",\"position\":[940,540],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"or\",\"conditions\":[{\"id\":\"7591deae-4626-4b2e-af26-d02042573a13\",\"operator\":{\"type\":\"object\",\"operation\":\"notEmpty\",\"singleValue\":true},\"leftValue\":\"={{ $input.item.json }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"142e5c5e-f488-4667-a759-ef4494f2a194\",\"name\":\"Postgres\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[80,-180],\"parameters\":{\"query\":\"WITH RankedVideos AS (\\n    SELECT \\n        channel_id,\\n        id,\\n        view_count,\\n        like_count,\\n        comment_count,\\n        publish_time,\\n        ROW_NUMBER() OVER (PARTITION BY channel_id ORDER BY view_count DESC) AS rank_desc,\\n        ROW_NUMBER() OVER (PARTITION BY channel_id ORDER BY view_count ASC) AS rank_asc\\n    FROM video_statistics\\n),\\nFilteredVideos AS (\\n    SELECT \\n        channel_id,\\n        id,\\n        view_count,\\n        like_count,\\n        comment_count,\\n        publish_time\\n    FROM RankedVideos\\n    WHERE NOT (\\n        rank_desc <= 2 OR rank_asc <= 2  -- Exclude top 2 and bottom 2 videos\\n    )\\n    OR (\\n        (SELECT COUNT(*) FROM video_statistics WHERE video_statistics.channel_id = RankedVideos.channel_id) <= 10  -- Include all videos if 10 or fewer exist\\n    )\\n),\\nChannelStats AS (\\n    SELECT \\n        channel_id,\\n        ROUND(AVG(view_count)::NUMERIC, 0) AS average_views -- Round to 0 decimal places\\n    FROM FilteredVideos\\n    GROUP BY channel_id\\n)\\nSELECT \\n    v.channel_id,\\n    c.average_views,\\n    JSON_AGG(\\n        JSON_BUILD_OBJECT(\\n            'id', v.id,\\n            'view_count', v.view_count,\\n            'like_count', v.like_count,\\n            'comment_count', v.comment_count,\\n            'publish_time', v.publish_time\\n        )\\n    ) AS channel_videos\\nFROM video_statistics v\\nLEFT JOIN ChannelStats c\\nON v.channel_id = c.channel_id\\nGROUP BY v.channel_id, c.average_views;\\n\",\"options\":{},\"operation\":\"executeQuery\"},\"credentials\":{\"postgres\":{\"id\":\"KQiQIZTArTBSNJH7\",\"name\":\"Postgres account\"}},\"typeVersion\":2.5},{\"id\":\"a542b55e-bab4-476d-8333-692f5b3a5dcb\",\"name\":\"insert_items\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[2980,320],\"parameters\":{\"query\":\"{{$json.query}}\",\"options\":{\"queryReplacement\":\"={{$json.parameters}}\"},\"operation\":\"executeQuery\"},\"credentials\":{\"postgres\":{\"id\":\"KQiQIZTArTBSNJH7\",\"name\":\"Postgres account\"}},\"typeVersion\":2.5},{\"id\":\"6680728a-805e-4a45-8720-56726ad9e582\",\"name\":\"create_table\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[620,-180],\"parameters\":{\"query\":\"CREATE TABLE video_statistics (\\n    id VARCHAR(255) PRIMARY KEY, -- Unique identifier for the video\\n    view_count INT NOT NULL, -- Number of views\\n    like_count INT NOT NULL, -- Number of likes\\n    comment_count INT NOT NULL, -- Number of comments\\n    publish_time TIMESTAMP NOT NULL, -- Timestamp of publishing\\n    channel_id VARCHAR(255) NOT NULL -- Channel ID\\n);\\n\",\"options\":{},\"operation\":\"executeQuery\"},\"credentials\":{\"postgres\":{\"id\":\"KQiQIZTArTBSNJH7\",\"name\":\"Postgres account\"}},\"typeVersion\":2.5},{\"id\":\"4e345df5-bdd6-4a93-9096-367bd911dbd4\",\"name\":\"remove_shorts\",\"type\":\"n8n-nodes-base.code\",\"position\":[1720,320],\"parameters\":{\"jsCode\":\"const input = $input.all();\\n\\nconst iso8601ToSeconds = iso8601 => {\\n  const match = iso8601 ? iso8601.match(/PT(?:(\\\\d+)H)?(?:(\\\\d+)M)?(?:(\\\\d+)S)?/) : null;\\n  if (!match) {\\n    console.warn(`Invalid ISO8601 duration: ${iso8601}`);\\n    return 0; \\n  }\\n  const hours = parseInt(match[1] || 0, 10);\\n  const minutes = parseInt(match[2] || 0, 10);\\n  const seconds = parseInt(match[3] || 0, 10);\\n  return hours * 3600 + minutes * 60 + seconds;\\n};\\n\\nconst filteredResponses = input.filter(response => {\\n  if (response.json && response.json.items) {\\n    const validItems = response.json.items.filter(item => {\\n      const duration = item.contentDetails?.duration;\\n      if (!duration) {\\n        console.warn(`Missing duration for item: ${JSON.stringify(item)}`);\\n        return false; \\n      }\\n      const durationInSeconds = iso8601ToSeconds(duration);\\n\\n      return durationInSeconds > 210;\\n    });\\n\\n    response.json.items = validItems;\\n\\n    return validItems.length > 0; \\n  }\\n\\n  return false;\\n});\\n\\nreturn filteredResponses;\\n\"},\"typeVersion\":2,\"alwaysOutputData\":true},{\"id\":\"aadac7e3-8114-4c43-b0bf-d1a7de7c3e0c\",\"name\":\"create_query\",\"type\":\"n8n-nodes-base.code\",\"position\":[2780,320],\"parameters\":{\"jsCode\":\"const input = $input.all();\\n\\nlet tableName = \\\"video_statistics\\\"; \\n\\nconst rows = input;\\n\\nconst formattedRows = rows.map(elements => {\\n  const row = elements.json;\\n  const formattedRow = {\\n    id: row.id,\\n    view_count: parseInt(row.viewCount, 10) || 0, \\n    like_count: parseInt(row.likeCount, 10) || 0,\\n    comment_count: parseInt(row.commentCount, 10) || 0,\\n    publish_time: row.publishTime ? new Date(row.publishTime).toISOString() : null,\\n    channel_id: $('Loop Over Items').first().json.id || \\\"unknown\\\"\\n  };\\n  return formattedRow;\\n});\\n\\nconst columns = [\\\"id\\\", \\\"view_count\\\", \\\"like_count\\\", \\\"comment_count\\\", \\\"publish_time\\\", \\\"channel_id\\\"];\\n\\nconst valuePlaceholders = formattedRows.map((_, rowIndex) =>\\n  `(${columns.map((_, colIndex) => `$${rowIndex * columns.length + colIndex + 1}`).join(\\\", \\\")})`\\n).join(\\\", \\\");\\n\\nconst insertQuery = `INSERT INTO ${tableName} (${columns.map(col => `\\\\\\\"${col}\\\\\\\"`).join(\\\", \\\")}) VALUES ${valuePlaceholders};`;\\n\\nconst parameters = formattedRows.flatMap(row => \\n  columns.map(col => row[col])\\n);\\n\\nreturn [\\n  {\\n    query: insertQuery,\\n    parameters: parameters\\n  }\\n];\\n\"},\"typeVersion\":2},{\"id\":\"46376f7c-1ce1-4f8a-8392-7281aacfd1c5\",\"name\":\"structure_data\",\"type\":\"n8n-nodes-base.code\",\"position\":[2560,320],\"parameters\":{\"jsCode\":\"const input = $input.all(); \\n\\nconst filteredInput = input.filter(item => item.json.viewCount !== null);\\n\\nconst updatedInput = filteredInput.map(item => {\\n    return {\\n        ...item,\\n        json: {\\n            ...item.json,\\n            likeCount: item.json.likeCount === null ? \\\"0\\\" : item.json.likeCount,\\n            commentCount: item.json.commentCount === null ? \\\"0\\\" : item.json.commentCount\\n        }\\n    };\\n});\\n\\nreturn updatedInput;\\n\"},\"typeVersion\":2},{\"id\":\"f66597ef-1324-45e0-b3e8-bc8a588315e4\",\"name\":\"if_empty\",\"type\":\"n8n-nodes-base.if\",\"position\":[2020,500],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"dacc5370-f54c-4b90-a2aa-65efff196d3b\",\"operator\":{\"type\":\"object\",\"operation\":\"notEmpty\",\"singleValue\":true},\"leftValue\":\"={{ $json }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"1176b08f-79bb-4f8f-8c83-25a7c2cee9e7\",\"name\":\"already_populated\",\"type\":\"n8n-nodes-base.set\",\"position\":[1200,600],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"7579fbc3-d702-4c36-b539-11b7db6c07fa\",\"name\":\"report\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.url }} already populated. Latest was: {{ $('fetch_last_registered').item.json.latest_publish_time }}\"}]}},\"typeVersion\":3.4},{\"id\":\"265b3062-ee60-4de0-8ee0-3973e653aa7d\",\"name\":\"map_data\",\"type\":\"n8n-nodes-base.set\",\"position\":[2340,320],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"1a76e4e8-cd56-4d55-bcbf-ed24708e1464\",\"name\":\"id\",\"type\":\"string\",\"value\":\"={{ $json.items[0].id }}\"},{\"id\":\"0b6d93ba-89fb-4781-809f-6c7bd887f9e2\",\"name\":\"viewCount\",\"type\":\"string\",\"value\":\"={{ $json.items[0].statistics.viewCount }}\"},{\"id\":\"9526b059-661a-49a2-81d3-3623d677ddd1\",\"name\":\"likeCount\",\"type\":\"string\",\"value\":\"={{ $json.items[0].statistics.likeCount }}\"},{\"id\":\"ca4adf8b-d74f-4dda-a96e-0a2ca3e864e3\",\"name\":\"commentCount\",\"type\":\"string\",\"value\":\"={{ $json.items[0].statistics.commentCount }}\"},{\"id\":\"8129ff1c-87c6-489b-83f8-88bdbf426b0f\",\"name\":\"=publishTime\",\"type\":\"string\",\"value\":\"={{ $('get_videos').item.json.snippet.publishedAt }}\"},{\"id\":\"16fc88dc-4772-4380-873d-2aa9642b31ac\",\"name\":\"channelId\",\"type\":\"string\",\"value\":\"={{ $('if_is_empty').item.json.snippet.channelId }}\"}]}},\"typeVersion\":3.4},{\"id\":\"173ac548-89be-4e94-a0e3-e90c45489a0c\",\"name\":\"sanitize_data\",\"type\":\"n8n-nodes-base.code\",\"position\":[300,-180],\"parameters\":{\"jsCode\":\"const now = new Date();\\nconst twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);\\n\\nconst bestPerformingVideos = [];\\n\\n$input.all().forEach(channel => {\\n  \\n  const averageViews = parseInt(channel.json.average_views, 10);\\n  \\n  channel.json.channel_videos.forEach(video => {\\n    const publishDate = new Date(video.publish_time);\\n    const isWithinTwoWeeks = publishDate >= twoWeeksAgo && publishDate <= now;\\n    const isAboveThreshold = video.view_count >= 2 * averageViews;\\n\\n  \\n    if (isWithinTwoWeeks && isAboveThreshold) {\\n      const score = (video.like_count / video.view_count) * 100;\\n      bestPerformingVideos.push({\\n        id: video.id,\\n        videoUrl: `https://www.youtube.com/watch?v=${video.id}`,\\n        viewCount: video.view_count,\\n        likeCount: video.like_count,\\n        score: parseFloat(score.toFixed(2)),\\n        commentCount: video.comment_count,\\n        channelId: `https://www.youtube.com/channel/${channel.json.channel_id}` \\n      });\\n    }\\n  });\\n});\\n\\nreturn bestPerformingVideos;\\n\"},\"typeVersion\":2,\"alwaysOutputData\":true},{\"id\":\"48e729ac-985c-47f5-8895-d2e52581e849\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-260,140],\"parameters\":{\"color\":7,\"width\":3440,\"height\":720,\"content\":\"### Save Videos To Database\"},\"typeVersion\":1},{\"id\":\"11c51123-27f7-4de7-9215-49d89679c2f6\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-260,-260],\"parameters\":{\"color\":6,\"width\":780,\"height\":280,\"content\":\"### Fetch best performing videos from last 2 weeks\"},\"typeVersion\":1},{\"id\":\"7ef37f94-9283-4b51-a127-98c94542429a\",\"name\":\"see table\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[920,-180],\"parameters\":{\"query\":\"SELECT * FROM video_statistics;\",\"options\":{},\"operation\":\"executeQuery\"},\"credentials\":{\"postgres\":{\"id\":\"KQiQIZTArTBSNJH7\",\"name\":\"Postgres account\"}},\"typeVersion\":2.5},{\"id\":\"e66af542-ea16-4c3c-9f6e-b5401bbd41da\",\"name\":\"drop table\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[1200,-180],\"parameters\":{\"query\":\"DROP TABLE video_statistics;\",\"options\":{},\"operation\":\"executeQuery\"},\"credentials\":{\"postgres\":{\"id\":\"KQiQIZTArTBSNJH7\",\"name\":\"Postgres account\"}},\"typeVersion\":2.5}],\"active\":false,\"pinData\":{\"When clicking ‘Test workflow’\":[{\"json\":{\"id\":\"UCMwVTLZIRRUyyVrkjDpn4pA\",\"url\":\"https://www.youtube.com/@ColeMedin\"}},{\"json\":{\"id\":\"UC2ojq-nuP8ceeHqiroeKhBA\",\"url\":\"www.youtube.com/@nateherk\"}}]},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"8ee4a252-a795-4931-951f-024d1f0d801a\",\"connections\":{\"Postgres\":{\"main\":[[{\"node\":\"sanitize_data\",\"type\":\"main\",\"index\":0}]]},\"if_empty\":{\"main\":[[{\"node\":\"map_data\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]},\"map_data\":{\"main\":[[{\"node\":\"structure_data\",\"type\":\"main\",\"index\":0}]]},\"get_videos\":{\"main\":[[{\"node\":\"if_is_empty\",\"type\":\"main\",\"index\":0}]]},\"if_is_empty\":{\"main\":[[{\"node\":\"find_video_data1\",\"type\":\"main\",\"index\":0}],[{\"node\":\"already_populated\",\"type\":\"main\",\"index\":0}]]},\"create_query\":{\"main\":[[{\"node\":\"insert_items\",\"type\":\"main\",\"index\":0}]]},\"insert_items\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]},\"remove_shorts\":{\"main\":[[{\"node\":\"if_empty\",\"type\":\"main\",\"index\":0}]]},\"structure_data\":{\"main\":[[{\"node\":\"create_query\",\"type\":\"main\",\"index\":0}]]},\"Loop Over Items\":{\"main\":[[],[{\"node\":\"fetch_last_registered\",\"type\":\"main\",\"index\":0}]]},\"find_video_data1\":{\"main\":[[{\"node\":\"remove_shorts\",\"type\":\"main\",\"index\":0}]]},\"already_populated\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]},\"fetch_last_registered\":{\"main\":[[{\"node\":\"get_videos\",\"type\":\"main\",\"index\":0}]]},\"Execute Workflow Trigger\":{\"main\":[[{\"node\":\"Postgres\",\"type\":\"main\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "[Video explanation](https://www.youtube.com/watch?v=pIfT9e-zPO0)\n\nThis n8n workflow helps you identify trending videos within your niche by detecting outlier videos that significantly outperform a channel's average views. It automates the process of monitoring competitor channels, saving time and streamlining content research.\n\n## Included in the Workflow\n\n  * Automated Competitor Video Tracking  \nMonitors videos from specified competitor channels, fetching data directly from the YouTube API.\n\n  * Outlier Detection Based on Channel Averages  \nCompares each video’s performance against the channel’s historical average to identify significant spikes in viewership.\n\n  * Historical Video Data Management  \nStores video statistics in a PostgreSQL database, allowing the workflow to only fetch new videos and optimize API usage.\n\n  * Short Video Filtering  \nAutomatically removes short videos based on duration thresholds.\n\n  * Flexible Video Retrieval  \nFetches up to 3 months of historical data on the first run and only new videos on subsequent runs.\n\n  * PostgreSQL Database Integration  \nIncludes SQL queries for database setup, video insertion, and performance analysis.\n\n  * Configurable Outlier Threshold  \nFocuses on videos published within the last two weeks with view counts at least twice the channel's average.\n\n  * Data Output for Analysis  \nOutputs best-performing videos along with their engagement metrics, making it easier to identify trending topics.\n\n\n\n\n## Requirements\n\n  * n8n installed on your machine or server\n\n  * A valid YouTube Data API key\n\n  * Access to a PostgreSQL database\n\n\n\n\nThis workflow is intended for educational and research purposes, helping content creators gain insights into what topics resonate with audiences without manual daily monitoring.\n",
  "crawled_at": "2025-05-26T02:20:30.226322",
  "readme_zh": "[视频讲解](https://www.youtube.com/watch?v=pIfT9e-zPO0)\n\n该n8n工作流通过识别播放量显著高于频道平均水平的异常值视频，帮助您锁定细分领域的趋势内容。它自动化了竞品频道监测流程，既节省时间又优化内容调研效率。\n\n## 工作流功能\n\n  * 竞品视频自动追踪  \n通过YouTube API直接获取指定竞品频道的最新视频数据\n\n  * 基于频道基准的异常值检测  \n将每个视频表现与频道历史均值对比，识别播放量激增内容\n\n  * 历史视频数据管理  \n采用PostgreSQL数据库存储视频数据，后续运行仅抓取新视频以优化API调用\n\n  * 短视频过滤机制  \n根据时长阈值自动过滤短视频内容\n\n  * 弹性数据获取模式  \n首次运行可获取三个月历史数据，后续仅同步新发布视频\n\n  * PostgreSQL数据库集成  \n包含数据库建表、视频数据插入及表现分析的完整SQL查询语句\n\n  * 可配置异常阈值  \n专注检测近两周发布且播放量达频道均值两倍以上的视频\n\n  * 结构化数据输出  \n输出优质视频及其互动指标，快速识别潜力话题趋势",
  "title_zh": "YouTube异常值检测器（基于竞争对手发现热门内容）",
  "publish_date_zh": "最后更新于2个月前",
  "workflow_json_zh": "{\n  \"id\": \"Zrd98BnbmN1Px9an\",\n  \"meta\": {\n    \"instanceId\": \"edc0464b1050024ebda3e16fceea795e4fdf67b1f61187c4f2f3a72397278df0\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"Youtube Searcher\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"5cb8757a-d8f0-49fa-803d-7f04b514f9f8\",\n      \"name\": \"Loop Over Items\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        80,\n        220\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"28964bd5-dc53-4dfa-bbb1-4eb80b952063\",\n      \"name\": \"find_video_data1\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1440,\n        320\n      ],\n      \"parameters\": {\n        \"url\": \"https://www.googleapis.com/youtube/v3/videos?\",\n        \"options\": {},\n        \"sendQuery\": true,\n        \"queryParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"key\",\n              \"value\": \"={{ $env[\\\"GOOGLE_API_KEY\\\"] }}\"\n            },\n            {\n              \"name\": \"id\",\n              \"value\": \"={{ $json.id.videoId }}\"\n            },\n            {\n              \"name\": \"part\",\n              \"value\": \"contentDetails, statistics\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"5e8b9441-4b91-4460-a9ac-4a0a02aa57ad\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"disabled\": true,\n      \"position\": [\n        -180,\n        220\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"793ef651-ea56-41bc-a0a9-feeaddf999c0\",\n      \"name\": \"Execute Workflow Trigger\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        -160,\n        -180\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"64e331ff-2cda-4ba0-94f9-03fa6c3d6590\",\n      \"name\": \"fetch_last_registered\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"position\": [\n        360,\n        360\n      ],\n      \"parameters\": {\n        \"query\": \"SELECT MAX(publish_time) AS latest_publish_time\\nFROM video_statistics\\nWHERE channel_id = '{{ $json.id }}';\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"KQiQIZTArTBSNJH7\",\n          \"name\": \"Postgres account\"\n        }\n      },\n      \"typeVersion\": 2.5\n    },\n    {\n      \"id\": \"fb0a8208-c920-4344-8816-ef6509f07abc\",\n      \"name\": \"get_videos\",\n      \"type\": \"n8n-nodes-base.youTube\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        640,\n        360\n      ],\n      \"parameters\": {\n        \"limit\": 50,\n        \"filters\": {\n          \"channelId\": \"={{ $('Loop Over Items').item.json.id }}\",\n          \"regionCode\": \"US\",\n          \"publishedAfter\": \"={{ $json.latest_publish_time ? new Date(new Date($json.latest_publish_time).getTime() + 60 * 60 * 1000).toISOString() : new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000).toISOString() }}\"\n        },\n        \"options\": {\n          \"order\": \"relevance\",\n          \"safeSearch\": \"moderate\"\n        },\n        \"resource\": \"video\"\n      },\n      \"credentials\": {\n        \"youTubeOAuth2Api\": {\n          \"id\": \"o3VUdoHEk6VhB1lq\",\n          \"name\": \"YouTube account\"\n        }\n      },\n      \"typeVersion\": 1,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"ea358d3c-9a83-49c9-a02e-745cf5b29097\",\n      \"name\": \"if_is_empty\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        940,\n        540\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"or\",\n          \"conditions\": [\n            {\n              \"id\": \"7591deae-4626-4b2e-af26-d02042573a13\",\n              \"operator\": {\n                \"type\": \"object\",\n                \"operation\": \"notEmpty\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $input.item.json }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"142e5c5e-f488-4667-a759-ef4494f2a194\",\n      \"name\": \"Postgres\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"position\": [\n        80,\n        -180\n      ],\n      \"parameters\": {\n        \"query\": \"WITH RankedVideos AS (\\n    SELECT \\n        channel_id,\\n        id,\\n        view_count,\\n        like_count,\\n        comment_count,\\n        publish_time,\\n        ROW_NUMBER() OVER (PARTITION BY channel_id ORDER BY view_count DESC) AS rank_desc,\\n        ROW_NUMBER() OVER (PARTITION BY channel_id ORDER BY view_count ASC) AS rank_asc\\n    FROM video_statistics\\n),\\nFilteredVideos AS (\\n    SELECT \\n        channel_id,\\n        id,\\n        view_count,\\n        like_count,\\n        comment_count,\\n        publish_time\\n    FROM RankedVideos\\n    WHERE NOT (\\n        rank_desc <= 2 OR rank_asc <= 2  -- Exclude top 2 and bottom 2 videos\\n    )\\n    OR (\\n        (SELECT COUNT(*) FROM video_statistics WHERE video_statistics.channel_id = RankedVideos.channel_id) <= 10  -- Include all videos if 10 or fewer exist\\n    )\\n),\\nChannelStats AS (\\n    SELECT \\n        channel_id,\\n        ROUND(AVG(view_count)::NUMERIC, 0) AS average_views -- Round to 0 decimal places\\n    FROM FilteredVideos\\n    GROUP BY channel_id\\n)\\nSELECT \\n    v.channel_id,\\n    c.average_views,\\n    JSON_AGG(\\n        JSON_BUILD_OBJECT(\\n            'id', v.id,\\n            'view_count', v.view_count,\\n            'like_count', v.like_count,\\n            'comment_count', v.comment_count,\\n            'publish_time', v.publish_time\\n        )\\n    ) AS channel_videos\\nFROM video_statistics v\\nLEFT JOIN ChannelStats c\\nON v.channel_id = c.channel_id\\nGROUP BY v.channel_id, c.average_views;\\n\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"KQiQIZTArTBSNJH7\",\n          \"name\": \"Postgres account\"\n        }\n      },\n      \"typeVersion\": 2.5\n    },\n    {\n      \"id\": \"a542b55e-bab4-476d-8333-692f5b3a5dcb\",\n      \"name\": \"insert_items\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"position\": [\n        2980,\n        320\n      ],\n      \"parameters\": {\n        \"query\": \"{{$json.query}}\",\n        \"options\": {\n          \"queryReplacement\": \"={{$json.parameters}}\"\n        },\n        \"operation\": \"executeQuery\"\n      },\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"KQiQIZTArTBSNJH7\",\n          \"name\": \"Postgres account\"\n        }\n      },\n      \"typeVersion\": 2.5\n    },\n    {\n      \"id\": \"6680728a-805e-4a45-8720-56726ad9e582\",\n      \"name\": \"create_table\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"position\": [\n        620,\n        -180\n      ],\n      \"parameters\": {\n        \"query\": \"CREATE TABLE video_statistics (\\n    id VARCHAR(255) PRIMARY KEY, -- Unique identifier for the video\\n    view_count INT NOT NULL, -- Number of views\\n    like_count INT NOT NULL, -- Number of likes\\n    comment_count INT NOT NULL, -- Number of comments\\n    publish_time TIMESTAMP NOT NULL, -- Timestamp of publishing\\n    channel_id VARCHAR(255) NOT NULL -- Channel ID\\n);\\n\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"KQiQIZTArTBSNJH7\",\n          \"name\": \"Postgres account\"\n        }\n      },\n      \"typeVersion\": 2.5\n    },\n    {\n      \"id\": \"4e345df5-bdd6-4a93-9096-367bd911dbd4\",\n      \"name\": \"remove_shorts\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1720,\n        320\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const input = $input.all();\\n\\nconst iso8601ToSeconds = iso8601 => {\\n  const match = iso8601 ? iso8601.match(/PT(?:(\\\\d+)H)?(?:(\\\\d+)M)?(?:(\\\\d+)S)?/) : null;\\n  if (!match) {\\n    console.warn(`Invalid ISO8601 duration: ${iso8601}`);\\n    return 0; \\n  }\\n  const hours = parseInt(match[1] || 0, 10);\\n  const minutes = parseInt(match[2] || 0, 10);\\n  const seconds = parseInt(match[3] || 0, 10);\\n  return hours * 3600 + minutes * 60 + seconds;\\n};\\n\\nconst filteredResponses = input.filter(response => {\\n  if (response.json && response.json.items) {\\n    const validItems = response.json.items.filter(item => {\\n      const duration = item.contentDetails?.duration;\\n      if (!duration) {\\n        console.warn(`Missing duration for item: ${JSON.stringify(item)}`);\\n        return false; \\n      }\\n      const durationInSeconds = iso8601ToSeconds(duration);\\n\\n      return durationInSeconds > 210;\\n    });\\n\\n    response.json.items = validItems;\\n\\n    return validItems.length > 0; \\n  }\\n\\n  return false;\\n});\\n\\nreturn filteredResponses;\\n\"\n      },\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"aadac7e3-8114-4c43-b0bf-d1a7de7c3e0c\",\n      \"name\": \"create_query\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2780,\n        320\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const input = $input.all();\\n\\nlet tableName = \\\"video_statistics\\\"; \\n\\nconst rows = input;\\n\\nconst formattedRows = rows.map(elements => {\\n  const row = elements.json;\\n  const formattedRow = {\\n    id: row.id,\\n    view_count: parseInt(row.viewCount, 10) || 0, \\n    like_count: parseInt(row.likeCount, 10) || 0,\\n    comment_count: parseInt(row.commentCount, 10) || 0,\\n    publish_time: row.publishTime ? new Date(row.publishTime).toISOString() : null,\\n    channel_id: $('Loop Over Items').first().json.id || \\\"unknown\\\"\\n  };\\n  return formattedRow;\\n});\\n\\nconst columns = [\\\"id\\\", \\\"view_count\\\", \\\"like_count\\\", \\\"comment_count\\\", \\\"publish_time\\\", \\\"channel_id\\\"];\\n\\nconst valuePlaceholders = formattedRows.map((_, rowIndex) =>\\n  `(${columns.map((_, colIndex) => `$${rowIndex * columns.length + colIndex + 1}`).join(\\\", \\\")})`\\n).join(\\\", \\\");\\n\\nconst insertQuery = `INSERT INTO ${tableName} (${columns.map(col => `\\\\\\\"${col}\\\\\\\"`).join(\\\", \\\")}) VALUES ${valuePlaceholders};`;\\n\\nconst parameters = formattedRows.flatMap(row => \\n  columns.map(col => row[col])\\n);\\n\\nreturn [\\n  {\\n    query: insertQuery,\\n    parameters: parameters\\n  }\\n];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"46376f7c-1ce1-4f8a-8392-7281aacfd1c5\",\n      \"name\": \"structure_data\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2560,\n        320\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const input = $input.all(); \\n\\nconst filteredInput = input.filter(item => item.json.viewCount !== null);\\n\\nconst updatedInput = filteredInput.map(item => {\\n    return {\\n        ...item,\\n        json: {\\n            ...item.json,\\n            likeCount: item.json.likeCount === null ? \\\"0\\\" : item.json.likeCount,\\n            commentCount: item.json.commentCount === null ? \\\"0\\\" : item.json.commentCount\\n        }\\n    };\\n});\\n\\nreturn updatedInput;\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"f66597ef-1324-45e0-b3e8-bc8a588315e4\",\n      \"name\": \"if_empty\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        2020,\n        500\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"dacc5370-f54c-4b90-a2aa-65efff196d3b\",\n              \"operator\": {\n                \"type\": \"object\",\n                \"operation\": \"notEmpty\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"1176b08f-79bb-4f8f-8c83-25a7c2cee9e7\",\n      \"name\": \"already_populated\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1200,\n        600\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"7579fbc3-d702-4c36-b539-11b7db6c07fa\",\n              \"name\": \"report\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.url }} already populated. Latest was: {{ $('fetch_last_registered').item.json.latest_publish_time }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"265b3062-ee60-4de0-8ee0-3973e653aa7d\",\n      \"name\": \"map_data\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        2340,\n        320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"1a76e4e8-cd56-4d55-bcbf-ed24708e1464\",\n              \"name\": \"id\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.items[0].id }}\"\n            },\n            {\n              \"id\": \"0b6d93ba-89fb-4781-809f-6c7bd887f9e2\",\n              \"name\": \"viewCount\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.items[0].statistics.viewCount }}\"\n            },\n            {\n              \"id\": \"9526b059-661a-49a2-81d3-3623d677ddd1\",\n              \"name\": \"likeCount\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.items[0].statistics.likeCount }}\"\n            },\n            {\n              \"id\": \"ca4adf8b-d74f-4dda-a96e-0a2ca3e864e3\",\n              \"name\": \"commentCount\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.items[0].statistics.commentCount }}\"\n            },\n            {\n              \"id\": \"8129ff1c-87c6-489b-83f8-88bdbf426b0f\",\n              \"name\": \"=publishTime\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('get_videos').item.json.snippet.publishedAt }}\"\n            },\n            {\n              \"id\": \"16fc88dc-4772-4380-873d-2aa9642b31ac\",\n              \"name\": \"channelId\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('if_is_empty').item.json.snippet.channelId }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"173ac548-89be-4e94-a0e3-e90c45489a0c\",\n      \"name\": \"sanitize_data\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        300,\n        -180\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const now = new Date();\\nconst twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);\\n\\nconst bestPerformingVideos = [];\\n\\n$input.all().forEach(channel => {\\n  \\n  const averageViews = parseInt(channel.json.average_views, 10);\\n  \\n  channel.json.channel_videos.forEach(video => {\\n    const publishDate = new Date(video.publish_time);\\n    const isWithinTwoWeeks = publishDate >= twoWeeksAgo && publishDate <= now;\\n    const isAboveThreshold = video.view_count >= 2 * averageViews;\\n\\n  \\n    if (isWithinTwoWeeks && isAboveThreshold) {\\n      const score = (video.like_count / video.view_count) * 100;\\n      bestPerformingVideos.push({\\n        id: video.id,\\n        videoUrl: `https://www.youtube.com/watch?v=${video.id}`,\\n        viewCount: video.view_count,\\n        likeCount: video.like_count,\\n        score: parseFloat(score.toFixed(2)),\\n        commentCount: video.comment_count,\\n        channelId: `https://www.youtube.com/channel/${channel.json.channel_id}` \\n      });\\n    }\\n  });\\n});\\n\\nreturn bestPerformingVideos;\\n\"\n      },\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"48e729ac-985c-47f5-8895-d2e52581e849\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -260,\n        140\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 3440,\n        \"height\": 720,\n        \"content\": \"### 将视频保存至数据库\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"11c51123-27f7-4de7-9215-49d89679c2f6\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -260,\n        -260\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 780,\n        \"height\": 280,\n        \"content\": \"获取过去两周表现最佳的视频\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7ef37f94-9283-4b51-a127-98c94542429a\",\n      \"name\": \"see table\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"position\": [\n        920,\n        -180\n      ],\n      \"parameters\": {\n        \"query\": \"SELECT * FROM video_statistics;\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"KQiQIZTArTBSNJH7\",\n          \"name\": \"Postgres account\"\n        }\n      },\n      \"typeVersion\": 2.5\n    },\n    {\n      \"id\": \"e66af542-ea16-4c3c-9f6e-b5401bbd41da\",\n      \"name\": \"drop table\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"position\": [\n        1200,\n        -180\n      ],\n      \"parameters\": {\n        \"query\": \"DROP TABLE video_statistics;\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"KQiQIZTArTBSNJH7\",\n          \"name\": \"Postgres account\"\n        }\n      },\n      \"typeVersion\": 2.5\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {\n    \"When clicking ‘Test workflow’\": [\n      {\n        \"json\": {\n          \"id\": \"UCMwVTLZIRRUyyVrkjDpn4pA\",\n          \"url\": \"https://www.youtube.com/@ColeMedin\"\n        }\n      },\n      {\n        \"json\": {\n          \"id\": \"UC2ojq-nuP8ceeHqiroeKhBA\",\n          \"url\": \"www.youtube.com/@nateherk\"\n        }\n      }\n    ]\n  },\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"8ee4a252-a795-4931-951f-024d1f0d801a\",\n  \"connections\": {\n    \"Postgres\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"sanitize_data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"if_empty\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"map_data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"map_data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"structure_data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"get_videos\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"if_is_empty\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"if_is_empty\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"find_video_data1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"already_populated\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"create_query\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"insert_items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"insert_items\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"remove_shorts\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"if_empty\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"structure_data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"create_query\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop Over Items\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"fetch_last_registered\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"find_video_data1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"remove_shorts\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"already_populated\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"fetch_last_registered\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"get_videos\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Execute Workflow Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Postgres\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}