{
  "url": "https://n8n.io/workflows/2985-ai-powered-chatbot-workflow-with-mysql-database-integration/",
  "title": "AI-Powered Chatbot Workflow with MySQL Database Integration",
  "author": "Gegenfeld",
  "publish_date": "Last update 3 months ago",
  "publish_date_absolute": "2025-02-26",
  "categories": [
    {
      "name": "Engineering"
    },
    {
      "name": "DevOps"
    },
    {
      "name": "Product"
    },
    {
      "name": "AI"
    },
    {
      "name": "IT Ops"
    }
  ],
  "workflow_json": "",
  "readme": "# AI-Powered Chatbot Workflow with MySQL Integration\n\nThis guide shows you how to deploy a chatbot that lets you query your database using natural language. You will build a system that accepts chat messages, retains conversation history, constructs dynamic SQL queries, and returns responses generated by an AI model. By following these instructions, you will have a working solution that integrates n8n’s AI Agent capabilities with MySQL.\n\n* * *\n\n## Prerequisites\n\nBefore you begin, ensure that you have the following:\n\n  1. An active n8n instance (self-hosted or cloud) running version 1.50.0 or later.\n  2. Valid MySQL credentials configured in n8n.\n  3. API credentials for the Groq Chat Model (or your preferred AI language model).\n  4. Basic familiarity with SQL and n8n node concepts such as chat triggers and memory buffers.\n  5. Access to the [n8n Docs on AI Agents](https://docs.n8n.io/advanced-ai/) for further reference.\n\n\n\n* * *\n\n## Workflow Setup\n\n### 1\\. Chat Interface & Trigger\n\n  * **When Chat Message Received**  \nThis node listens for incoming chat messages via a webhook. When a message arrives, it triggers the workflow immediately.\n\n\n\n### 2\\. Conversation Memory\n\n  * **Chat History**  \nThis memory buffer node stores the last 10 interactions. It supplies conversation context to the AI Agent, ensuring that responses consider previous messages.\n\n\n\n### 3\\. AI Agent Core\n\n  * **AI Agent (Tools Agent)**  \nThe AI Agent node orchestrates the conversation by receiving the chat input and conversation history. It dynamically generates SQL queries based on your requests and coordinates calls to external tools (such as MySQL nodes).\n\n\n\n### 4\\. Database Interactions\n\n  * **MySQL Node**  \nThis node executes the SQL query generated by the AI Agent. You reference the query using an expression (e.g., `{{$node[\"AI Agent\"].json.sql_query}}`), allowing the agent’s output to control data retrieval.\n\n  * **MySQL Schema Node**  \nThis node retrieves a list of base tables from your MySQL database (excluding system schemas). The agent uses this information to understand the available tables.\n\n  * **MySQL Definition Node**  \nThis node fetches detailed metadata (such as column names, data types, and relationships) for a specific table. The table and schema names are supplied dynamically by the AI Agent.\n\n\n\n\n### 5\\. Language Model Processing\n\n  * **Groq Chat Model**  \nThis node connects to the Groq Chat API to generate text completions. It processes the combined input (chat message, context, and data fetched from MySQL) and produces the final response.\n\n\n\n### 6\\. Guidance & Customization\n\n  * **Sticky Notes**  \nThese nodes provide guidance on: \n    * Switching the chat model if you wish to use another provider (e.g., OpenAI or Anthropic).\n    * Adjusting the maximum token count per interaction.\n    * Customizing the SQL queries and the context window size.\n\n\n\nThey help you modify the workflow to suit your environment and requirements.\n\n### Workflow Connections\n\n  * The **Chat Trigger** passes the incoming message to the **AI Agent**.\n  * The **Chat History** node supplies conversation context to the AI Agent.\n  * The **AI Agent** calls the MySQL nodes as external tools, generating and sending dynamic SQL queries.\n  * The **Groq Chat Model** processes the consolidated input from the agent and outputs the natural language response delivered to the user.\n\n\n\n### Testing the Workflow\n\n  1. Send a chat message using the chat interface.\n  2. Observe how the AI Agent processes the input and generates a corresponding SQL query.\n  3. Verify that the MySQL nodes execute the query and return data.\n  4. Confirm that the Groq Chat Model produces a coherent natural language response.\n  5. Refer to the sticky notes for guidance if you need to fine-tune any node settings.\n\n\n\n* * *\n\n## Next Steps and References\n\n  * **Customize Your AI Model**  \nReplace the Groq Chat Model with another language model (such as the OpenAI Chat Model) by updating the node credentials and configuration.\n\n  * **Enhance Memory Settings**  \nAdjust the Chat History node’s context window to retain more or fewer messages based on your needs.\n\n  * **Modify SQL Queries**  \nUpdate the SQL queries in the MySQL nodes to match your specific database schema and desired data.\n\n  * **Further Reading**  \nConsult the [n8n Docs on AI Agents](https://docs.n8n.io/advanced-ai/) for additional details and examples to expand your workflow’s capabilities.\n\n  * **Set Up a Website Chatbot**  \nCopy & Paste and replace the placeholders in the following code to embed the chatbot into your personal or company's website: [View in CodePen 🡥](https://codepen.io/olemai/pen/RNwPdVp)\n\n\n\n\n* * *\n\nBy following these steps, you will deploy a robust AI chatbot workflow that integrates with your MySQL database, allowing you to query data using natural language.\n",
  "crawled_at": "2025-05-26T03:07:15.472665",
  "readme_zh": "# 基于AI的MySQL集成聊天机器人工作流\n\n本指南将展示如何部署一个允许使用自然语言查询数据库的聊天机器人。您将构建一个能够接收聊天消息、保留对话历史、构建动态SQL查询并返回AI模型生成响应的系统。按照以下说明操作，您将获得一个整合n8n AI智能体功能与MySQL的完整解决方案。\n\n* * *\n\n## 前提条件\n\n开始前请确保具备：\n1. 运行1.50.0或更高版本的n8n实例（自托管或云端）\n2. 在n8n中配置有效的MySQL凭证\n3. Groq聊天模型（或您偏好的AI语言模型）的API凭证\n4. 基本掌握SQL和n8n节点概念（如聊天触发器和记忆缓冲区）\n5. 可访问[AI智能体n8n文档](https://docs.n8n.io/advanced-ai/)作为参考\n\n* * *\n\n## 工作流配置\n\n### 1. 聊天界面与触发器\n- **当收到聊天消息时**  \n该节点通过webhook监听传入消息，立即触发工作流\n\n### 2. 对话记忆\n- **聊天历史**  \n这个记忆缓冲区节点存储最近10次交互，为AI智能体提供对话上下文，确保响应考虑先前消息\n\n### 3. AI智能体核心\n- **AI智能体（工具型）**  \n该节点通过接收聊天输入和历史记录协调对话，根据请求动态生成SQL查询，并协调外部工具（如MySQL节点）调用\n\n### 4. 数据库交互\n- **MySQL节点**  \n执行AI智能体生成的SQL查询（通过表达式引用如`{{$node[\"AI Agent\"].json.sql_query}}`）\n- **MySQL架构节点**  \n获取MySQL数据库中的基础表列表（排除系统架构）\n- **MySQL定义节点**  \n获取特定表的详细元数据（列名/数据类型/关系等），表名和架构名由AI智能体动态提供\n\n### 5. 语言模型处理\n- **Groq聊天模型**  \n连接Groq Chat API生成文本补全，处理综合输入（聊天消息/上下文/MySQL数据）并生成最终响应\n\n### 6. 指导与定制\n- **便利贴节点**  \n提供以下指导：\n  - 切换聊天模型（如改用OpenAI或Anthropic）\n  - 调整单次交互的最大token数\n  - 自定义SQL查询和上下文窗口大小\n帮助根据环境和需求修改工作流\n\n### 工作流连接\n- **聊天触发器**将消息传递给**AI智能体**\n- **聊天历史**节点提供对话上下文\n- **AI智能体**调用MySQL节点作为外部工具生成动态SQL\n- **Groq聊天模型**整合智能体输入后生成自然语言响应\n\n### 测试工作流\n1. 通过聊天界面发送消息\n2. 观察AI智能体如何处理输入并生成SQL查询\n3. 验证MySQL节点是否执行查询并返回数据\n4. 确认Groq模型是否生成连贯的自然语言响应\n5. 需要微调时可参考便利贴指引\n\n* * *\n\n## 后续步骤与参考\n- **定制AI模型**：通过更新节点凭证替换Groq模型（如改用OpenAI）\n- **增强记忆设置**：调整聊天历史节点的上下文窗口大小\n- **修改SQL查询**：更新MySQL节点查询以匹配您的数据库架构\n- **延伸阅读**：参阅[AI智能体n8n文档](https://docs.n8n.io/advanced-ai/)获取更多示例\n- **部署网站聊天机器人**：复制以下代码替换占位符即可嵌入网站：[CodePen示例 🡥](https://codepen.io/olemai/pen/RNwPdVp)\n\n* * *\n\n完成上述步骤后，您将部署一个强大的AI聊天机器人工作流，实现用自然语言查询MySQL数据库。",
  "title_zh": "集成MySQL数据库的AI驱动聊天机器人工作流程",
  "publish_date_zh": "最后更新于2个月前",
  "workflow_json_zh": "{\"meta\":{\"instanceId\":\"f0daacbbece4d36ce73ed214e506ba3899410c0e00a1b6cd1d93e012465d1082\"},\"nodes\":[{\"id\":\"e1055031-f1f1-44dd-8e3b-18b9f543aac2\",\"name\":\"When chat message received\",\"type\":\"@n8n/n8n-nodes-langchain.chatTrigger\",\"position\":[-60,-80],\"webhookId\":\"cf1de04f-3e38-426c-89f0-3bdb110a5dcf\",\"parameters\":{},\"typeVersion\":1.1},{\"id\":\"88eaaf60-aed6-4e9d-9667-d2838a8e7f78\",\"name\":\"Chat History\",\"type\":\"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\"position\":[280,120],\"parameters\":{},\"typeVersion\":1.3},{\"id\":\"a5b49dee-d5e4-4324-a7f8-1638e4e41abd\",\"name\":\"MySQL\",\"type\":\"n8n-nodes-base.mySqlTool\",\"position\":[460,120],\"parameters\":{},\"typeVersion\":2.4},{\"id\":\"7abfcdc7-dfc5-4627-a479-82dd38404c88\",\"name\":\"MySQL Schema\",\"type\":\"n8n-nodes-base.mySqlTool\",\"position\":[640,120],\"parameters\":{},\"typeVersion\":2.4},{\"id\":\"bc9dfb90-0696-4801-a5c2-741c2fd27855\",\"name\":\"MySQL Definition\",\"type\":\"n8n-nodes-base.mySqlTool\",\"position\":[820,120],\"parameters\":{},\"typeVersion\":2.4},{\"id\":\"fd8344a4-ee89-4365-ae36-cc39f26c47df\",\"name\":\"AI Agent\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[360,-80],\"parameters\":{},\"typeVersion\":1.7},{\"id\":\"4849ec08-2ab9-46f2-bc8c-f9dad3196246\",\"name\":\"Groq Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGroq\",\"position\":[100,120],\"parameters\":{},\"typeVersion\":1},{\"id\":\"400a5f98-60af-4acb-950a-085402f3502d\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[60,300],\"parameters\":{\"content\":\"\"},\"typeVersion\":1},{\"id\":\"5859cd82-9d6c-4783-8ef9-44cd4d800148\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[240,300],\"parameters\":{\"content\":\"\"},\"typeVersion\":1},{\"id\":\"599c02ac-7246-4cab-8bdd-1f6565ece04d\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[420,300],\"parameters\":{\"content\":\"\"},\"typeVersion\":1},{\"id\":\"33cbfb73-10e5-428b-ba71-539be16e7bc7\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-60,-300],\"parameters\":{\"content\":\"\"},\"typeVersion\":1}],\"pinData\":{},\"connections\":{\"MySQL\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Chat History\":{\"ai_memory\":[[{\"node\":\"AI Agent\",\"type\":\"ai_memory\",\"index\":0}]]},\"MySQL Schema\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Groq Chat Model\":{\"ai_languageModel\":[[{\"node\":\"AI Agent\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"MySQL Definition\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"When chat message received\":{\"main\":[[{\"node\":\"AI Agent\",\"type\":\"main\",\"index\":0}]]}}}"
}