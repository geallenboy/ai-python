{
  "url": "https://n8n.io/workflows/3545-automate-purchase-order-form-submissions-from-outlook-excel-attachments-with-ai/",
  "title": "Automate Purchase Order Form Submissions from Outlook Excel Attachments with AI",
  "author": "Jimleuk",
  "publish_date": "Last update a month ago",
  "publish_date_absolute": "",
  "categories": [
    {
      "name": "AI"
    }
  ],
  "workflow_json": "{\"meta\":{\"instanceId\":\"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\",\"templateCredsSetupCompleted\":true},\"nodes\":[{\"id\":\"b87cc222-82ec-4b46-9573-68f41d096969\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[640,620],\"parameters\":{\"color\":7,\"width\":740,\"height\":680,\"content\":\"## 2. Manually Convert XLSX to Markdown\\n[Learn more about the Extract From File node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile/)\\n\\nToday's LLMs cannot parse Excel files directly so the best we can do is to convert the spreadsheet into a format that they can, namely markdown. This conversion is also a good solution for excels which aren't really datasheets - the cells are used like layout elements - which is still common for invoices and purchase orders.\\n\\nTo perform the conversion, we can use the 'Extract from File' node to get the each row from the xlsx and then iterate and concatenate to form our markdown table using the code node.\"},\"typeVersion\":1},{\"id\":\"c4c55042-02c8-4364-ae7e-d1ec5a75437a\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1400,620],\"parameters\":{\"color\":7,\"width\":640,\"height\":680,\"content\":\"## 3. Extract Purchase Order Details using AI\\n[Learn more about the Information Extractor](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor)\\n\\nData entry is probably the number one reason as to why we need AI/LLMs. This time consuming and menial task can be completed in seconds and with a high degree of accuracy. Here, we ask the AI to extract each event with the term dates to a list of events using structured output.\"},\"typeVersion\":1},{\"id\":\"b9530f93-464b-4116-add7-da218fe8eb12\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-700,-80],\"parameters\":{\"width\":460,\"height\":1400,\"content\":\"## Try it out!\\n### This n8n template imports purchase order submissions from Outlook and converts attached purchase order form in XLSX format into structured output.\\n\\nData entry jobs with user-submitted XLSX forms is a time consuming, incredibly mundane but necessary tasks which in likelihood are inherited and critical to business operation.\\n\\nWhile we could dream of system overhauls and modernisation, the fact is that change is hard. There is another way however -  using n8n and AI!\\n\\n### How it works\\n* An Outlook trigger is used to watch for incoming purchase order forms submitted via a shared inbox.\\n* The email attachment for the submission is a form in xlsx format - like this one https://1drv.ms/x/c/8f1f7dda12b7a145/ETWH8dKwgZ1OiVz7ISUWYf8BwiyihBjXPXEbCYkVi8XDyw?e=WWU2eR - which is imported into the workflow.\\n* The 'Extract from File' node is used with the 'code' node to convert the xlsx file to markdown. This is so our LLM can understand it.\\n* The Information Extractor node is used to read and extract the relevant purchase order details and line items from the form.\\n* A simple validation step is used to check for common errors such as missing PO number or the amounts not matching up. A notification is automated to reply to the buyer if so.\\n* Once validation passes, a confirmation is sent to the buyer and the purchase order structured output can be sent along to internal systems.\\n\\n### How to use\\n* This template only works if you're expecting and receiving forms in XLSX format. These can be invoices, request forms as well as purchase order forms.\\n* Update the Outlook nodes with your email or other emails as required.\\n* What's next? I've omitted the last steps to send to an ERP or accounting system as this is dependent on your org.\\n\\n### Requirements\\n* Outlook for Emails\\n  * Check out how to setup credentials here: https://docs.n8n.io/integrations/builtin/credentials/microsoft/\\n* OpenAI for LLM document understanding and extraction.\\n\\n### Customising the workflow\\n* This template should work for other Excel files. Some will be more complicated than others so experiment with different parsers and extraction tools and strategies.\\n* Customise the Information Extractor Schema to pull out the specific data you need. For example, capture any notes or comments given by the buyer.\\n\\n### Need Help?\\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\\n\\nHappy Hacking!\"},\"typeVersion\":1},{\"id\":\"f5a2d1e7-f73b-4bfa-8e02-f30db275bbcc\",\"name\":\"Extract Purchase Order Details\",\"type\":\"@n8n/n8n-nodes-langchain.informationExtractor\",\"position\":[1500,920],\"parameters\":{\"text\":\"={{ $json.table }}\",\"options\":{\"systemPromptTemplate\":\"Capture the values as seen. Do not convert dates.\"},\"schemaType\":\"manual\",\"inputSchema\":\"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"purchase_order_number\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"purchase_order_date\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"purchase_order_total\\\": { \\\"type\\\": \\\"number\\\" },\\n    \\\"vendor_name\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"vendor_address\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"vendor_contact\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"delivery_contact\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"delivery_address\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"delivery_method\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"items\\\": {\\n      \\\"type\\\": \\\"array\\\",\\n      \\\"items\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"properties\\\": {\\n          \\\"description\\\": { \\\"type\\\": \\\"string\\\" },\\n          \\\"part_number\\\": { \\\"type\\\": \\\"string\\\" },\\n          \\\"quantity\\\": { \\\"type\\\": \\\"number\\\" },\\n          \\\"unit\\\": { \\\"type\\\": \\\"number\\\" },\\n          \\\"unit_price\\\": { \\\"type\\\": \\\"number\\\" }\\n        }\\n      }\\n    }\\n  }\\n}\"},\"typeVersion\":1},{\"id\":\"0ce545f0-8147-4ad2-bb9e-14ef0b0c26ef\",\"name\":\"Is Excel Document?\",\"type\":\"n8n-nodes-base.if\",\"position\":[760,1020],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"f723ab0a-8f2d-4501-8273-fd6455c57cdd\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $binary.data.mimeType }}\",\"rightValue\":\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"}]}},\"typeVersion\":2.2},{\"id\":\"ccbd9531-66be-4e07-8b73-faf996622f9f\",\"name\":\"Sticky Note7\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-220,460],\"parameters\":{\"color\":5,\"width\":340,\"height\":140,\"content\":\"### PURCHASE ORDER EXAMPLE\\nThis is the purchase order XLSX which is used an example for this template.\\nhttps://1drv.ms/x/c/8f1f7dda12b7a145/ETWH8dKwgZ1OiVz7ISUWYf8BwiyihBjXPXEbCYkVi8XDyw?e=WWU2eR\"},\"typeVersion\":1},{\"id\":\"ef8b00eb-dba6-47dd-a825-1aa5c85ee215\",\"name\":\"Run Checks\",\"type\":\"n8n-nodes-base.set\",\"position\":[2160,940],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"049c7aca-7663-4eed-93b4-9eec3760c058\",\"name\":\"has_po_number\",\"type\":\"boolean\",\"value\":\"={{ Boolean($json.output.purchase_order_number) }}\"},{\"id\":\"94d2224a-cf81-4a42-acd0-de5276a5e493\",\"name\":\"has_valid_po_date\",\"type\":\"boolean\",\"value\":\"={{ $json.output.purchase_order_date.toDateTime() < $now.plus({ 'day': 1 }) }}\"},{\"id\":\"a8f69605-dad6-4ec2-a22f-d13ff99e27cd\",\"name\":\"has_items\",\"type\":\"boolean\",\"value\":\"={{ $json.output.items.length > 0 }}\"},{\"id\":\"c11db99e-9cc2-40b7-b3a5-f3c65f88dc13\",\"name\":\"is_math_correct\",\"type\":\"boolean\",\"value\":\"={{\\n$json.output.items.map(item => item.unit_price * item.quantity).sum().round(2) === $json.output.purchase_order_total.round(2) }}\"}]}},\"typeVersion\":3.4},{\"id\":\"801848cc-558c-4a30-aab5-eb403564b68f\",\"name\":\"Is Valid Purchase Order?\",\"type\":\"n8n-nodes-base.if\",\"position\":[2360,940],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"11fa8087-7809-4bc9-9fbe-32bfd35821a6\",\"operator\":{\"type\":\"boolean\",\"operation\":\"true\",\"singleValue\":true},\"leftValue\":\"={{ $json.has_po_number }}\",\"rightValue\":\"\"},{\"id\":\"c45ae85a-e060-4416-aa2c-daf58db8ba0e\",\"operator\":{\"type\":\"boolean\",\"operation\":\"true\",\"singleValue\":true},\"leftValue\":\"={{ $json.has_valid_po_date }}\",\"rightValue\":\"\"},{\"id\":\"d0ae9518-2f4b-43fb-87b1-7108a6a75424\",\"operator\":{\"type\":\"boolean\",\"operation\":\"true\",\"singleValue\":true},\"leftValue\":\"={{ $json.has_items }}\",\"rightValue\":\"\"},{\"id\":\"eed09f78-ce1a-4e09-8940-febcf7e41078\",\"operator\":{\"type\":\"boolean\",\"operation\":\"true\",\"singleValue\":true},\"leftValue\":\"={{ $json.is_math_correct }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"7c7dd7a0-45fe-4549-8341-3b3fd18e1725\",\"name\":\"Extract from File\",\"type\":\"n8n-nodes-base.extractFromFile\",\"position\":[980,920],\"parameters\":{\"options\":{\"rawData\":true,\"headerRow\":false,\"includeEmptyCells\":true},\"operation\":\"xlsx\"},\"typeVersion\":1},{\"id\":\"dfb6b00f-fe50-42d6-8597-8fdcb562714b\",\"name\":\"XLSX to Markdown Table\",\"type\":\"n8n-nodes-base.code\",\"position\":[1180,920],\"parameters\":{\"jsCode\":\"const rows = $input.all().map(item => item.json.row);\\nconst maxLength = Math.max(...rows.map(row => row.length));\\n\\nconst table = [\\n  '|' + rows[0].join('|') + '|',\\n  '|' + Array(maxLength).fill(0).map(_ => '-').join('|') + '|',\\n  rows.slice(1, rows.length)\\n    .filter(row => row.some(Boolean))\\n    .map(row =>\\n      '|' + row.join('|') + '|'\\n    ).join('\\\\n')\\n].join('\\\\n')\\n\\nreturn { table }\"},\"typeVersion\":2},{\"id\":\"1a3de516-1d21-4664-b2e3-8c8d6ec90ef2\",\"name\":\"OpenAI Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[1600,1080],\"parameters\":{\"model\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gpt-4o-mini\"},\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"8gccIjcuf3gvaoEr\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.2},{\"id\":\"1a29236f-5eaa-4a38-a0a1-6e19abd77d2c\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2060,620],\"parameters\":{\"color\":7,\"width\":940,\"height\":680,\"content\":\"## 4. Use Simple Validation to Save Time and Effort\\n[Learn more about the Edit Fields node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set)\\n\\nWith our extracted output, we can run simple validation checks to save on admin time. Common errors such as missing purchase order numbers or miscalculated cost amounts are easy to detect and a quick response can be given. Once validation passes, it's up to you how you use the extracted output next.\"},\"typeVersion\":1},{\"id\":\"79a39a03-5f71-4021-bcfd-06edbc285e8a\",\"name\":\"Reply Invalid Format\",\"type\":\"n8n-nodes-base.microsoftOutlook\",\"position\":[980,1120],\"webhookId\":\"9464583e-9505-49ec-865e-58aa1ab3c2ed\",\"parameters\":{\"message\":\"PO rejected due to invalid file format. Please try again with XLSX.\",\"options\":{},\"messageId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $('Outlook Trigger').first().json.id }}\"},\"operation\":\"reply\",\"additionalFields\":{},\"replyToSenderOnly\":true},\"credentials\":{\"microsoftOutlookOAuth2Api\":{\"id\":\"EWg6sbhPKcM5y3Mr\",\"name\":\"Microsoft Outlook account\"}},\"typeVersion\":2},{\"id\":\"ec973438-4d6c-4d2e-8702-1d195f514528\",\"name\":\"Outlook Trigger\",\"type\":\"n8n-nodes-base.microsoftOutlookTrigger\",\"position\":[-120,920],\"parameters\":{\"fields\":[\"body\",\"categories\",\"conversationId\",\"from\",\"hasAttachments\",\"internetMessageId\",\"sender\",\"subject\",\"toRecipients\",\"receivedDateTime\",\"webLink\"],\"output\":\"fields\",\"filters\":{\"hasAttachments\":true,\"foldersToInclude\":[]},\"options\":{\"downloadAttachments\":true},\"pollTimes\":{\"item\":[{\"mode\":\"everyHour\"}]}},\"credentials\":{\"microsoftOutlookOAuth2Api\":{\"id\":\"EWg6sbhPKcM5y3Mr\",\"name\":\"Microsoft Outlook account\"}},\"typeVersion\":1},{\"id\":\"fcb173ce-7dad-497a-9376-9650c2a24a84\",\"name\":\"Reply Rejection\",\"type\":\"n8n-nodes-base.microsoftOutlook\",\"position\":[2580,1040],\"webhookId\":\"9464583e-9505-49ec-865e-58aa1ab3c2ed\",\"parameters\":{\"message\":\"=PO Rejected due to the following errors:\\n{{\\n[\\n  !$json.has_po_number ? '* PO number was not provided' : '',\\n  !$json.has_valid_po_date ? '* PO date was missing or invalid' : '',\\n  !$json.has_items ? '* No line items detected' : '',\\n  !$json.is_math_correct ? '* Line items prices do not match up to PO total' : ''\\n]\\n  .compact()\\n  .join('\\\\n')\\n}}\",\"options\":{},\"messageId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $('Outlook Trigger').first().json.id }}\"},\"operation\":\"reply\",\"additionalFields\":{},\"replyToSenderOnly\":true},\"credentials\":{\"microsoftOutlookOAuth2Api\":{\"id\":\"EWg6sbhPKcM5y3Mr\",\"name\":\"Microsoft Outlook account\"}},\"typeVersion\":2},{\"id\":\"64ced193-6b12-4ee9-b1e2-735040648051\",\"name\":\"Reply Accepted\",\"type\":\"n8n-nodes-base.microsoftOutlook\",\"position\":[2580,820],\"webhookId\":\"9464583e-9505-49ec-865e-58aa1ab3c2ed\",\"parameters\":{\"message\":\"=Thank you for the purchase order.\\nThis is an automated reply.\",\"options\":{},\"messageId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $('Outlook Trigger').first().json.id }}\"},\"operation\":\"reply\",\"additionalFields\":{},\"replyToSenderOnly\":true},\"credentials\":{\"microsoftOutlookOAuth2Api\":{\"id\":\"EWg6sbhPKcM5y3Mr\",\"name\":\"Microsoft Outlook account\"}},\"typeVersion\":2},{\"id\":\"7bfe0e44-cd5d-4290-ba2e-0064c95bc4e2\",\"name\":\"Do Something with Purchase Order\",\"type\":\"n8n-nodes-base.noOp\",\"position\":[2800,940],\"parameters\":{},\"typeVersion\":1},{\"id\":\"6f517f2f-6072-46a2-8a9d-cca4e958d601\",\"name\":\"Fix Excel Dates\",\"type\":\"n8n-nodes-base.set\",\"position\":[1840,920],\"parameters\":{\"mode\":\"raw\",\"options\":{},\"jsonOutput\":\"={{\\n{\\n  output: {\\n    ...$json.output,\\n    purchase_order_date: $json.output.purchase_order_date\\n      ? new Date((new Date(1900, 0, 1)).getTime() + (Number($json.output.purchase_order_date) - 2) * (24 * 60 * 60 * 1000))\\n      : $json.output.purchase_order_date\\n  }\\n}\\n}}\"},\"typeVersion\":3.4},{\"id\":\"f3a31b63-ebcb-4d93-8c5a-f626897b7d68\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-220,620],\"parameters\":{\"color\":7,\"width\":840,\"height\":680,\"content\":\"## 1. Wait For Incoming Purchase Orders\\n[Read more about the Outlook trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.microsoftoutlooktrigger)\\n\\nOur template starts by watching for new emails to a shared inbox (eg. \\\"purchase-orders@example.com\\\") using the Outlook Trigger node. Our goal is to identify and capture buyer purchase orders so that we can automating validate and use AI to reduce the data entry time and cost at scale.\\n\\nWe can also use the Text Classifier node to validate intent. This ensures we catch valid submissions are not just queries about purchase-orders or replies.\"},\"typeVersion\":1},{\"id\":\"bb395dfc-2831-4e57-90c9-62f13f84302e\",\"name\":\"Is Submitting a Purchase Order?\",\"type\":\"@n8n/n8n-nodes-langchain.textClassifier\",\"position\":[80,920],\"parameters\":{\"options\":{\"fallback\":\"other\"},\"inputText\":\"=from: {{ $json.from.emailAddress.name }} <{{ $json.from.emailAddress.address }}>\\nsubject: {{ $json.subject }}\\nmessage:\\n{{ $json.body.content }}\",\"categories\":{\"categories\":[{\"category\":\"is_purchase_order\",\"description\":\"The message's intent is to submit a purchase order\"}]}},\"typeVersion\":1},{\"id\":\"e52ec2e2-8be5-40ab-b1f8-8d7c0b161e1a\",\"name\":\"Do Nothing\",\"type\":\"n8n-nodes-base.noOp\",\"position\":[420,1040],\"parameters\":{},\"typeVersion\":1},{\"id\":\"5ca6be4e-bc33-42d7-91bc-d30f7ccfdd25\",\"name\":\"OpenAI Chat Model1\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[180,1080],\"parameters\":{\"model\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gpt-4o-mini\",\"cachedResultName\":\"gpt-4o-mini\"},\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"8gccIjcuf3gvaoEr\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.2}],\"pinData\":{},\"connections\":{\"Run Checks\":{\"main\":[[{\"node\":\"Is Valid Purchase Order?\",\"type\":\"main\",\"index\":0}]]},\"Reply Accepted\":{\"main\":[[{\"node\":\"Do Something with Purchase Order\",\"type\":\"main\",\"index\":0}]]},\"Fix Excel Dates\":{\"main\":[[{\"node\":\"Run Checks\",\"type\":\"main\",\"index\":0}]]},\"Outlook Trigger\":{\"main\":[[{\"node\":\"Is Submitting a Purchase Order?\",\"type\":\"main\",\"index\":0}]]},\"Extract from File\":{\"main\":[[{\"node\":\"XLSX to Markdown Table\",\"type\":\"main\",\"index\":0}]]},\"OpenAI Chat Model\":{\"ai_languageModel\":[[{\"node\":\"Extract Purchase Order Details\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Is Excel Document?\":{\"main\":[[{\"node\":\"Extract from File\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Reply Invalid Format\",\"type\":\"main\",\"index\":0}]]},\"OpenAI Chat Model1\":{\"ai_languageModel\":[[{\"node\":\"Is Submitting a Purchase Order?\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"XLSX to Markdown Table\":{\"main\":[[{\"node\":\"Extract Purchase Order Details\",\"type\":\"main\",\"index\":0}]]},\"Is Valid Purchase Order?\":{\"main\":[[{\"node\":\"Reply Accepted\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Reply Rejection\",\"type\":\"main\",\"index\":0}]]},\"Extract Purchase Order Details\":{\"main\":[[{\"node\":\"Fix Excel Dates\",\"type\":\"main\",\"index\":0}]]},\"Is Submitting a Purchase Order?\":{\"main\":[[{\"node\":\"Is Excel Document?\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Do Nothing\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "### This n8n template imports purchase order submissions from Outlook and converts attached purchase order forms in XLSX format into structured output.\n\nData entry jobs with user-submitted XLSX forms are time consuming, incredibly mundane but necessary tasks which in likelihood are inherited and critical to business operation.\n\nWhile we could dream of system overhauls and modernisation, the fact is that change is hard. There is another way however - using n8n and AI! N8N offers an end-to-end solution to parse XLSX form attachments using LLM-powered OCR and send the extracted output to your ERP or otherwise.\n\n### How it works\n\n  * An Outlook trigger is used to watch for incoming purchase order forms submitted via a shared inbox.\n  * The email attachment for the submission is a form in xlsx format - like this one [Purchase Order Example](https://1drv.ms/x/c/8f1f7dda12b7a145/ETWH8dKwgZ1OiVz7ISUWYf8BwiyihBjXPXEbCYkVi8XDyw?e=WWU2eR) \\- which is imported into the workflow.\n  * The 'Extract from File' node is used with the 'code' node to convert the xlsx file to markdown. This is so our LLM can understand it.\n  * The Information Extractor node is used to read and extract the relevant purchase order details and line items from the form.\n  * A simple validation step is used to check for common errors such as missing PO number or the amounts not matching up. A notification is automated to reply to the buyer if so.\n  * Once validation passes, a confirmation is sent to the buyer and the purchase order structured output can be sent along to internal systems.\n\n\n\n### How to use\n\n  * This template only works if you're expecting and receiving forms in XLSX format. These can be invoices, request forms as well as purchase order forms.\n  * Update the Outlook nodes with your email or other emails as required.\n  * What's next? I've omitted the last steps to send to an ERP or accounting system as this is dependent on your org.\n\n\n\n### Requirements\n\n  * Outlook for Emails \n    * Check out how to setup credentials here: [https://docs.n8n.io/integrations/builtin/credentials/microsoft](https://docs.n8n.io/integrations/builtin/credentials/microsoft/)\n  * OpenAI for LLM document understanding and extraction.\n\n\n\n### Customising the workflow\n\n  * This template should work for other Excel files. Some will be more complicated than others so experiment with different parsers and extraction tools and strategies.\n  * Customise the Information Extractor Schema to pull out the specific data you need. For example, capture any notes or comments given by the buyer.\n\n\n",
  "crawled_at": "2025-05-26T04:49:28.631652",
  "readme_zh": "### 该n8n模板可自动从Outlook导入采购订单提交文件，并将XLSX格式的采购订单附件转换为结构化数据\n\n处理用户提交的XLSX表格数据录入工作既耗时又枯燥，但这类继承性任务往往对业务运营至关重要。虽然我们渴望系统革新，但变革实属不易。不过还有另一种解决方案——利用n8n和AI技术！通过结合LLM光学字符识别技术，n8n提供端到端解决方案来解析XLSX附件，并将提取的数据发送至ERP等系统。\n\n### 运作原理\n• 通过Outlook触发器监控共享收件箱的采购订单提交邮件  \n• 提取邮件中的XLSX格式表单附件（示例文件可见[采购订单模板](https://1drv.ms/x/c/8f1f7dda12b7a145/ETWH8dKwgZ1OiVz7ISUWYf8BwiyihBjXPXEbCYkVi8XDyw?e=WWU2eR)）  \n• 使用\"文件提取\"节点配合\"代码\"节点将XLSX转为Markdown格式以供LLM解析  \n• 通过信息提取节点读取采购订单明细及行项目数据  \n• 基础验证步骤会检查常见错误（如缺失采购单号或金额不符），发现问题将自动回复通知采购方  \n• 验证通过后向采购方发送确认函，结构化采购订单数据即可传输至内部系统  \n\n### 使用说明\n• 本模板仅适用于XLSX格式文件（包括发票、申请单等）处理  \n• 根据需求修改Outlook节点配置的邮箱地址  \n• 最后一步未设置ERP/财务系统对接功能，需根据组织架构自行配置  \n\n### 系统要求\n• Outlook邮件账户  \n  凭证设置指南：[微软凭证配置文档](https://docs.n8n.io/integrations/builtin/credentials/microsoft/)  \n• OpenAI服务（用于LLM文档解析与数据提取）  \n\n### 工作流定制\n• 模板兼容其他Excel文件（复杂文件需测试不同解析策略）  \n• 可自定义信息提取架构以捕获特定数据（如采购方备注信息）",
  "title_zh": "利用AI自动化从Outlook Excel附件提交采购订单表单",
  "publish_date_zh": "上次更新于13天前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"b87cc222-82ec-4b46-9573-68f41d096969\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        640,\n        620\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 740,\n        \"height\": 680,\n        \"content\": \"## 2. 手动将XLSX转换为Markdown  \\n[详细了解Extract From File节点](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile/)  \\n\\n当前的大型语言模型无法直接解析Excel文件，因此最佳方案是将电子表格转换为它们能识别的格式——即markdown。这种转换对于非标准数据表的Excel文件（例如单元格被用作布局元素的发票或采购订单）同样适用。  \\n\\n具体操作时，可通过\\\"Extract from File\\\"节点提取xlsx文件的每行数据，然后使用代码节点进行迭代和拼接，最终生成markdown表格。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c4c55042-02c8-4364-ae7e-d1ec5a75437a\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1400,\n        620\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 640,\n        \"height\": 680,\n        \"content\": \"## 3. 利用AI提取采购订单详情\\n[了解更多关于信息提取器的信息](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor)\\n\\n数据录入或许是AI/大语言模型（LLMs）最重要的应用场景之一。这项耗时且繁琐的任务可在数秒内以极高准确度完成。在本案例中，我们要求AI通过结构化输出，将包含学期日期的每个事项提取为事项列表。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b9530f93-464b-4116-add7-da218fe8eb12\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -700,\n        -80\n      ],\n      \"parameters\": {\n        \"width\": 460,\n        \"height\": 1400,\n        \"content\": \"## 立即试用！\\n### 该n8n模板可自动从Outlook获取采购订单提交邮件，并将附件中的XLSX格式采购单转换为结构化数据\\n\\n处理用户提交的XLSX表单数据录入工作既耗时又枯燥，但这类传统业务流程往往难以替代。虽然我们都期待系统革新，但现实中的变革阻力重重。现在，借助n8n和AI技术，您有了全新选择！\\n\\n### 运作原理\\n* 通过Outlook触发器监控共享邮箱收到的采购订单邮件\\n* 提取邮件中的XLSX格式表单附件（示例文件：https://1drv.ms/x/c/8f1f7dda12b7a145/ETWH8dKwgZ1OiVz7ISUWYf8BwiyihBjXPXEbCYkVi8XDyw?e=WWU2eR）\\n* 使用\\\"文件解析\\\"节点配合\\\"代码\\\"节点将XLSX转为Markdown格式，便于大语言模型识别\\n* 通过信息提取节点读取采购单明细数据\\n* 内置基础校验逻辑（如检查缺失的采购单号或金额不符等情况），发现问题将自动回复通知采购方\\n* 验证通过后，系统将向采购方发送确认通知，结构化采购单数据可推送至内部系统\\n\\n### 使用说明\\n* 本模板适用于任何XLSX格式表单处理（包括发票、申请单等）\\n* 根据实际需求修改Outlook节点配置\\n* 最终推送至ERP/财务系统的步骤需根据您所在机构的具体情况实现\\n\\n### 环境要求\\n* Outlook邮件账户\\n  * 凭证配置指南：https://docs.n8n.io/integrations/builtin/credentials/microsoft/\\n* OpenAI服务（用于文档理解与数据提取）\\n\\n### 自定义工作流\\n* 本模板可适配其他Excel文件（复杂文件可能需要调整解析策略）\\n* 修改信息提取架构以捕获特定字段（例如采购方的备注信息）\\n\\n### 获取支持\\n欢迎加入[Discord社区](https://discord.com/invite/XPKeKXeB7d)或访问[官方论坛](https://community.n8n.io/) \\n\\n祝您自动化之旅顺利！\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f5a2d1e7-f73b-4bfa-8e02-f30db275bbcc\",\n      \"name\": \"Extract Purchase Order Details\",\n      \"type\": \"@n8n/n8n-nodes-langchain.informationExtractor\",\n      \"position\": [\n        1500,\n        920\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.table }}\",\n        \"options\": {\n          \"systemPromptTemplate\": \"Capture the values as seen. Do not convert dates.\"\n        },\n        \"schemaType\": \"manual\",\n        \"inputSchema\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"purchase_order_number\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"purchase_order_date\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"purchase_order_total\\\": { \\\"type\\\": \\\"number\\\" },\\n    \\\"vendor_name\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"vendor_address\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"vendor_contact\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"delivery_contact\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"delivery_address\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"delivery_method\\\": { \\\"type\\\": \\\"string\\\" },\\n    \\\"items\\\": {\\n      \\\"type\\\": \\\"array\\\",\\n      \\\"items\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"properties\\\": {\\n          \\\"description\\\": { \\\"type\\\": \\\"string\\\" },\\n          \\\"part_number\\\": { \\\"type\\\": \\\"string\\\" },\\n          \\\"quantity\\\": { \\\"type\\\": \\\"number\\\" },\\n          \\\"unit\\\": { \\\"type\\\": \\\"number\\\" },\\n          \\\"unit_price\\\": { \\\"type\\\": \\\"number\\\" }\\n        }\\n      }\\n    }\\n  }\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0ce545f0-8147-4ad2-bb9e-14ef0b0c26ef\",\n      \"name\": \"Is Excel Document?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        760,\n        1020\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"f723ab0a-8f2d-4501-8273-fd6455c57cdd\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $binary.data.mimeType }}\",\n              \"rightValue\": \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"ccbd9531-66be-4e07-8b73-faf996622f9f\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -220,\n        460\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 340,\n        \"height\": 140,\n        \"content\": \"### 采购订单示例  \\n此为采购订单XLSX文件，用作本模板的示例。  \\nhttps://1drv.ms/x/c/8f1f7dda12b7a145/ETWH8dKwgZ1OiVz7ISUWYf8BwiyihBjXPXEbCYkVi8XDyw?e=WWU2eR\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ef8b00eb-dba6-47dd-a825-1aa5c85ee215\",\n      \"name\": \"Run Checks\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        2160,\n        940\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"049c7aca-7663-4eed-93b4-9eec3760c058\",\n              \"name\": \"has_po_number\",\n              \"type\": \"boolean\",\n              \"value\": \"={{ Boolean($json.output.purchase_order_number) }}\"\n            },\n            {\n              \"id\": \"94d2224a-cf81-4a42-acd0-de5276a5e493\",\n              \"name\": \"has_valid_po_date\",\n              \"type\": \"boolean\",\n              \"value\": \"={{ $json.output.purchase_order_date.toDateTime() < $now.plus({ 'day': 1 }) }}\"\n            },\n            {\n              \"id\": \"a8f69605-dad6-4ec2-a22f-d13ff99e27cd\",\n              \"name\": \"has_items\",\n              \"type\": \"boolean\",\n              \"value\": \"={{ $json.output.items.length > 0 }}\"\n            },\n            {\n              \"id\": \"c11db99e-9cc2-40b7-b3a5-f3c65f88dc13\",\n              \"name\": \"is_math_correct\",\n              \"type\": \"boolean\",\n              \"value\": \"={{\\n$json.output.items.map(item => item.unit_price * item.quantity).sum().round(2) === $json.output.purchase_order_total.round(2) }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"801848cc-558c-4a30-aab5-eb403564b68f\",\n      \"name\": \"Is Valid Purchase Order?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        2360,\n        940\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"11fa8087-7809-4bc9-9fbe-32bfd35821a6\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.has_po_number }}\",\n              \"rightValue\": \"\"\n            },\n            {\n              \"id\": \"c45ae85a-e060-4416-aa2c-daf58db8ba0e\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.has_valid_po_date }}\",\n              \"rightValue\": \"\"\n            },\n            {\n              \"id\": \"d0ae9518-2f4b-43fb-87b1-7108a6a75424\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.has_items }}\",\n              \"rightValue\": \"\"\n            },\n            {\n              \"id\": \"eed09f78-ce1a-4e09-8940-febcf7e41078\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.is_math_correct }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"7c7dd7a0-45fe-4549-8341-3b3fd18e1725\",\n      \"name\": \"Extract from File\",\n      \"type\": \"n8n-nodes-base.extractFromFile\",\n      \"position\": [\n        980,\n        920\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"rawData\": true,\n          \"headerRow\": false,\n          \"includeEmptyCells\": true\n        },\n        \"operation\": \"xlsx\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"dfb6b00f-fe50-42d6-8597-8fdcb562714b\",\n      \"name\": \"XLSX to Markdown Table\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1180,\n        920\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const rows = $input.all().map(item => item.json.row);\\nconst maxLength = Math.max(...rows.map(row => row.length));\\n\\nconst table = [\\n  '|' + rows[0].join('|') + '|',\\n  '|' + Array(maxLength).fill(0).map(_ => '-').join('|') + '|',\\n  rows.slice(1, rows.length)\\n    .filter(row => row.some(Boolean))\\n    .map(row =>\\n      '|' + row.join('|') + '|'\\n    ).join('\\\\n')\\n].join('\\\\n')\\n\\nreturn { table }\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"1a3de516-1d21-4664-b2e3-8c8d6ec90ef2\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        1600,\n        1080\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"8gccIjcuf3gvaoEr\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"1a29236f-5eaa-4a38-a0a1-6e19abd77d2c\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2060,\n        620\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 940,\n        \"height\": 680,\n        \"content\": \"## 4. 利用简易验证节省时间与精力\\n[了解更多编辑字段节点功能](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set)\\n\\n通过提取的输出数据，我们可以运行简易验证检查来减少管理耗时。诸如采购订单号缺失或成本金额计算错误等常见问题能够轻松识别，并可迅速作出反馈。验证通过后，如何进一步使用这些提取数据就完全取决于您了。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"79a39a03-5f71-4021-bcfd-06edbc285e8a\",\n      \"name\": \"Reply Invalid Format\",\n      \"type\": \"n8n-nodes-base.microsoftOutlook\",\n      \"position\": [\n        980,\n        1120\n      ],\n      \"webhookId\": \"9464583e-9505-49ec-865e-58aa1ab3c2ed\",\n      \"parameters\": {\n        \"message\": \"PO rejected due to invalid file format. Please try again with XLSX.\",\n        \"options\": {},\n        \"messageId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $('Outlook Trigger').first().json.id }}\"\n        },\n        \"operation\": \"reply\",\n        \"additionalFields\": {},\n        \"replyToSenderOnly\": true\n      },\n      \"credentials\": {\n        \"microsoftOutlookOAuth2Api\": {\n          \"id\": \"EWg6sbhPKcM5y3Mr\",\n          \"name\": \"Microsoft Outlook account\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"ec973438-4d6c-4d2e-8702-1d195f514528\",\n      \"name\": \"Outlook Trigger\",\n      \"type\": \"n8n-nodes-base.microsoftOutlookTrigger\",\n      \"position\": [\n        -120,\n        920\n      ],\n      \"parameters\": {\n        \"fields\": [\n          \"body\",\n          \"categories\",\n          \"conversationId\",\n          \"from\",\n          \"hasAttachments\",\n          \"internetMessageId\",\n          \"sender\",\n          \"subject\",\n          \"toRecipients\",\n          \"receivedDateTime\",\n          \"webLink\"\n        ],\n        \"output\": \"fields\",\n        \"filters\": {\n          \"hasAttachments\": true,\n          \"foldersToInclude\": []\n        },\n        \"options\": {\n          \"downloadAttachments\": true\n        },\n        \"pollTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"everyHour\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"microsoftOutlookOAuth2Api\": {\n          \"id\": \"EWg6sbhPKcM5y3Mr\",\n          \"name\": \"Microsoft Outlook account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fcb173ce-7dad-497a-9376-9650c2a24a84\",\n      \"name\": \"Reply Rejection\",\n      \"type\": \"n8n-nodes-base.microsoftOutlook\",\n      \"position\": [\n        2580,\n        1040\n      ],\n      \"webhookId\": \"9464583e-9505-49ec-865e-58aa1ab3c2ed\",\n      \"parameters\": {\n        \"message\": \"=PO Rejected due to the following errors:\\n{{\\n[\\n  !$json.has_po_number ? '* PO number was not provided' : '',\\n  !$json.has_valid_po_date ? '* PO date was missing or invalid' : '',\\n  !$json.has_items ? '* No line items detected' : '',\\n  !$json.is_math_correct ? '* Line items prices do not match up to PO total' : ''\\n]\\n  .compact()\\n  .join('\\\\n')\\n}}\",\n        \"options\": {},\n        \"messageId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $('Outlook Trigger').first().json.id }}\"\n        },\n        \"operation\": \"reply\",\n        \"additionalFields\": {},\n        \"replyToSenderOnly\": true\n      },\n      \"credentials\": {\n        \"microsoftOutlookOAuth2Api\": {\n          \"id\": \"EWg6sbhPKcM5y3Mr\",\n          \"name\": \"Microsoft Outlook account\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"64ced193-6b12-4ee9-b1e2-735040648051\",\n      \"name\": \"Reply Accepted\",\n      \"type\": \"n8n-nodes-base.microsoftOutlook\",\n      \"position\": [\n        2580,\n        820\n      ],\n      \"webhookId\": \"9464583e-9505-49ec-865e-58aa1ab3c2ed\",\n      \"parameters\": {\n        \"message\": \"=Thank you for the purchase order.\\nThis is an automated reply.\",\n        \"options\": {},\n        \"messageId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $('Outlook Trigger').first().json.id }}\"\n        },\n        \"operation\": \"reply\",\n        \"additionalFields\": {},\n        \"replyToSenderOnly\": true\n      },\n      \"credentials\": {\n        \"microsoftOutlookOAuth2Api\": {\n          \"id\": \"EWg6sbhPKcM5y3Mr\",\n          \"name\": \"Microsoft Outlook account\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"7bfe0e44-cd5d-4290-ba2e-0064c95bc4e2\",\n      \"name\": \"Do Something with Purchase Order\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        2800,\n        940\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6f517f2f-6072-46a2-8a9d-cca4e958d601\",\n      \"name\": \"Fix Excel Dates\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1840,\n        920\n      ],\n      \"parameters\": {\n        \"mode\": \"raw\",\n        \"options\": {},\n        \"jsonOutput\": \"={{\\n{\\n  output: {\\n    ...$json.output,\\n    purchase_order_date: $json.output.purchase_order_date\\n      ? new Date((new Date(1900, 0, 1)).getTime() + (Number($json.output.purchase_order_date) - 2) * (24 * 60 * 60 * 1000))\\n      : $json.output.purchase_order_date\\n  }\\n}\\n}}\"\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"f3a31b63-ebcb-4d93-8c5a-f626897b7d68\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -220,\n        620\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 840,\n        \"height\": 680,\n        \"content\": \"## 1. 等待接收采购订单\\n[详细了解Outlook触发器](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.microsoftoutlooktrigger)\\n\\n本模板首先通过Outlook触发器节点监控共享收件箱（如\\\"purchase-orders@example.com\\\"）的新邮件。我们的目标是识别并捕获买家采购订单，从而实现自动化验证，并利用AI技术大规模减少数据录入时间和成本。\\n\\n我们还可以使用文本分类器节点来验证邮件意图，确保捕获的是有效订单提交，而非仅是关于采购订单的查询或回复。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"bb395dfc-2831-4e57-90c9-62f13f84302e\",\n      \"name\": \"Is Submitting a Purchase Order?\",\n      \"type\": \"@n8n/n8n-nodes-langchain.textClassifier\",\n      \"position\": [\n        80,\n        920\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"fallback\": \"other\"\n        },\n        \"inputText\": \"=from: {{ $json.from.emailAddress.name }} <{{ $json.from.emailAddress.address }}>\\nsubject: {{ $json.subject }}\\nmessage:\\n{{ $json.body.content }}\",\n        \"categories\": {\n          \"categories\": [\n            {\n              \"category\": \"is_purchase_order\",\n              \"description\": \"The message's intent is to submit a purchase order\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e52ec2e2-8be5-40ab-b1f8-8d7c0b161e1a\",\n      \"name\": \"Do Nothing\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        420,\n        1040\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5ca6be4e-bc33-42d7-91bc-d30f7ccfdd25\",\n      \"name\": \"OpenAI Chat Model1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        180,\n        1080\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\",\n          \"cachedResultName\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"8gccIjcuf3gvaoEr\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Run Checks\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Is Valid Purchase Order?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Reply Accepted\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Do Something with Purchase Order\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Fix Excel Dates\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Run Checks\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Outlook Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Is Submitting a Purchase Order?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract from File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"XLSX to Markdown Table\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Extract Purchase Order Details\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Is Excel Document?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract from File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Reply Invalid Format\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model1\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Is Submitting a Purchase Order?\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"XLSX to Markdown Table\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract Purchase Order Details\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Is Valid Purchase Order?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Reply Accepted\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Reply Rejection\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract Purchase Order Details\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Fix Excel Dates\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Is Submitting a Purchase Order?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Is Excel Document?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Do Nothing\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}