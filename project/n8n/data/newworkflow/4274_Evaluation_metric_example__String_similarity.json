{
  "url": "https://n8n.io/workflows/4274-evaluation-metric-example-string-similarity/",
  "title": "Evaluation metric example: String similarity",
  "author": "David Roberts",
  "publish_date": "Last update 4 days ago",
  "publish_date_absolute": "2025-05-22",
  "categories": [
    {
      "name": "Engineering"
    },
    {
      "name": "AI"
    }
  ],
  "workflow_json": "{\"meta\":{\"instanceId\":\"bf40384a063e00f3b983f4f9bada22b57a8231a04c0fb48d363e26d7b0f2b7e7\",\"templateCredsSetupCompleted\":true},\"nodes\":[{\"id\":\"b2a1a367-119f-4e2d-a982-ff675debf658\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[220,-40],\"parameters\":{\"color\":7,\"width\":180,\"height\":260,\"content\":\"Check how far apart the actual code is from the expected code (a score of 1 is a perfect match)\"},\"typeVersion\":1},{\"id\":\"f5413855-20de-4b77-ba90-18610a9d9b4d\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1300,40],\"parameters\":{\"width\":300,\"height\":500,\"content\":\"## How it works\\nThis template shows how to calculate a workflow evaluation metric: **text similarity, measured character-by-character**.\\n\\nThe workflow takes images of hand-written codes, extracts the code and compares it with the expected answer from the dataset.\\n\\nThe images look like this:\\n![image](https://storage.googleapis.com/n8n_template_data/handwriting_scans/doc20250302_08223946_001.jpg)\\n\\nYou can find more information on workflow evaluation [here](https://docs.n8n.io/advanced-ai/evaluations/overview), and other metric examples [here](https://docs.n8n.io/advanced-ai/evaluations/metric-based-evaluations/#2-calculate-metrics).\"},\"typeVersion\":1},{\"id\":\"8921a4c4-cee1-44e7-8dce-55219db519d7\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-960,280],\"parameters\":{\"color\":7,\"width\":220,\"height\":220,\"content\":\"Read in [this test dataset](https://docs.google.com/spreadsheets/d/1uuPS5cHtSNZ6HNLOi75A2m8nVWZrdBZ_Ivf58osDAS8/edit?gid=1786963566#gid=1786963566) of images\"},\"typeVersion\":1},{\"id\":\"fbf8337b-eb46-443a-8507-58a14b817be0\",\"name\":\"Match webhook format\",\"type\":\"n8n-nodes-base.set\",\"position\":[-680,340],\"parameters\":{\"mode\":\"raw\",\"options\":{},\"jsonOutput\":\"=  {\\n    \\\"headers\\\": {\\n    },\\n    \\\"params\\\": {},\\n    \\\"query\\\": {\\n      \\\"url\\\": {{ $json.file_url.toJsonString() }}\\n    },\\n    \\\"body\\\": {},\\n    \\\"executionMode\\\": \\\"test\\\"\\n  }\"},\"typeVersion\":3.4},{\"id\":\"a03c9b79-d45d-4842-9325-df1af37697eb\",\"name\":\"Webhook\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[-900,40],\"webhookId\":\"7ceb775c-b961-44f0-acfe-682a67612332\",\"parameters\":{\"path\":\"7ceb775c-b961-44f0-acfe-682a67612332\",\"options\":{}},\"typeVersion\":2},{\"id\":\"85bd63e2-3039-4f0e-8721-bc2b843461c9\",\"name\":\"When fetching a dataset row\",\"type\":\"n8n-nodes-base.evaluationTrigger\",\"position\":[-900,340],\"parameters\":{\"sheetName\":{\"__rl\":true,\"mode\":\"url\",\"value\":\"https://docs.google.com/spreadsheets/d/1uuPS5cHtSNZ6HNLOi75A2m8nVWZrdBZ_Ivf58osDAS8/edit?gid=1786963566#gid=1786963566\"},\"documentId\":{\"__rl\":true,\"mode\":\"url\",\"value\":\"https://docs.google.com/spreadsheets/d/1uuPS5cHtSNZ6HNLOi75A2m8nVWZrdBZ_Ivf58osDAS8/edit?gid=1786963566#gid=1786963566\"}},\"credentials\":{\"googleSheetsOAuth2Api\":{\"id\":\"bpr2LoSELMlxpwnN\",\"name\":\"Google Sheets account David\"}},\"typeVersion\":4.6},{\"id\":\"4ed0b460-70af-4f1d-a7f3-97293f9b4ce0\",\"name\":\"Respond to Webhook\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"position\":[260,320],\"parameters\":{\"options\":{}},\"typeVersion\":1.3},{\"id\":\"f1642aa1-94c5-4002-a7aa-533566dd20eb\",\"name\":\"Evaluating?\",\"type\":\"n8n-nodes-base.evaluation\",\"position\":[-20,200],\"parameters\":{\"operation\":\"checkIfEvaluating\"},\"typeVersion\":4.6},{\"id\":\"15115588-b9ca-4e24-b7d8-f0aa0974b5dd\",\"name\":\"Set metrics\",\"type\":\"n8n-nodes-base.evaluation\",\"position\":[480,80],\"parameters\":{\"metrics\":{\"assignments\":[{\"id\":\"0e507b06-e6d5-4ace-aa22-f06c6db5b883\",\"name\":\"score\",\"type\":\"number\",\"value\":\"={{ $json.score }}\"}]},\"operation\":\"setMetrics\"},\"typeVersion\":4.6},{\"id\":\"af028132-c866-487d-be85-e3af049bc793\",\"name\":\"Extract code from image\",\"type\":\"@n8n/n8n-nodes-langchain.openAi\",\"position\":[-240,200],\"parameters\":{\"text\":\"=Extract ONLY the handwritten code in the top-right corner of this image.\\n\\nThe code MUST follow this EXACT format:\\nBT/ED/[1-3 capital letters]/[1-3 capital letters]/[1-3 capital letters]/[1-3 capital letters or empty]/[single letter + number (2-4 chars total)]\\n\\nExamples of correct format:\\nBT/ED/ABC/DE/F/G/H1\\nBT/ED/A/BC/DEF/GH/I23\\nBT/ED/AB/CD/EF/GH/I234\\n\\nDO NOT include any explanations, notes, or other text.\\nDO NOT return anything if the code doesn't match the required format.\\nVERIFY the extracted code matches the format before returning it.\\nReturn ONLY the extracted code - nothing else.\",\"modelId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gpt-4o\",\"cachedResultName\":\"GPT-4O\"},\"options\":{},\"resource\":\"image\",\"inputType\":\"base64\",\"operation\":\"analyze\"},\"credentials\":{\"openAiApi\":{\"id\":\"Ag9qPAsY7lpIGkvC\",\"name\":\"JPs n8n openAI key\"}},\"typeVersion\":1.8},{\"id\":\"50a26635-078f-40a7-8944-2e43ed8cd482\",\"name\":\"Calc string distance\",\"type\":\"n8n-nodes-base.code\",\"position\":[260,80],\"parameters\":{\"mode\":\"runOnceForEachItem\",\"jsCode\":\"const expected_code = $('When fetching a dataset row').item.json.expected_output\\nconst actual_code = $json.content\\n\\nfunction levenshteinDistance(str1, str2) {\\n  const m = str1.length;\\n  const n = str2.length;\\n  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));\\n\\n  for (let i = 0; i <= m; i++) {\\n    dp[i][0] = i;\\n  }\\n  \\n  for (let j = 0; j <= n; j++) {\\n    dp[0][j] = j;\\n  }\\n\\n  for (let i = 1; i <= m; i++) {\\n    for (let j = 1; j <= n; j++) {\\n      if (str1[i - 1] === str2[j - 1]) {\\n        dp[i][j] = dp[i - 1][j - 1];\\n      } else {\\n        dp[i][j] = 1 + Math.min(\\n          dp[i - 1][j],     // deletion\\n          dp[i][j - 1],     // insertion\\n          dp[i - 1][j - 1]  // substitution\\n        );\\n      }\\n    }\\n  }\\n\\n  return dp[m][n];\\n}\\n\\nconst dist = levenshteinDistance(\\n  expected_code, \\n  actual_code\\n)\\n\\nconst max_dist = Math.max(\\n  expected_code.length,\\n  actual_code.length\\n)\\n\\nconsole.log('truth', expected_code)\\nconsole.log('effort', actual_code)\\nconsole.log('dist', dist)\\nconsole.log('max_dist', max_dist)\\n\\n$input.item.json.score = 1 - (dist / max_dist)\\n\\nreturn $input.item;\"},\"typeVersion\":2},{\"id\":\"383db4b0-9665-4608-bbf9-3dca88508bff\",\"name\":\"Download image\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-460,200],\"parameters\":{\"url\":\"={{ $json.query.url }}\",\"options\":{}},\"typeVersion\":4.2}],\"pinData\":{},\"connections\":{\"Webhook\":{\"main\":[[{\"node\":\"Download image\",\"type\":\"main\",\"index\":0}]]},\"Evaluating?\":{\"main\":[[{\"node\":\"Calc string distance\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Respond to Webhook\",\"type\":\"main\",\"index\":0}]]},\"Download image\":{\"main\":[[{\"node\":\"Extract code from image\",\"type\":\"main\",\"index\":0}]]},\"Calc string distance\":{\"main\":[[{\"node\":\"Set metrics\",\"type\":\"main\",\"index\":0}]]},\"Match webhook format\":{\"main\":[[{\"node\":\"Download image\",\"type\":\"main\",\"index\":0}]]},\"Extract code from image\":{\"main\":[[{\"node\":\"Evaluating?\",\"type\":\"main\",\"index\":0}]]},\"When fetching a dataset row\":{\"main\":[[{\"node\":\"Match webhook format\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "## AI evaluation in n8n\n\nThis is a template for n8n's [evaluation feature](https://docs.n8n.io/advanced-ai/evaluations/overview).\n\nEvaluation is a technique for getting confidence that your AI workflow performs reliably, by running a test dataset containing different inputs through the workflow.\n\nBy calculating a metric (score) for each input, you can see where the workflow is performing well and where it isn't.\n\n## How it works\n\nThis template shows how to calculate a workflow evaluation metric: **text similarity, measured character-by-character**.\n\nThe workflow takes images of hand-written codes, extracts the code and compares it with the expected answer from the dataset.\n\nThe images look like this:\n\n![image](https://storage.googleapis.com/n8n_template_data/handwriting_scans/doc20250302_08223946_001.jpg)\n\nThe workflow works as follows:\n\n  * We use an evaluation trigger to read in our dataset\n  * It is wired up in parallel with the regular trigger so that the workflow can be started from either one. [More info](https://docs.n8n.io/advanced-ai/evaluations/tips-and-common-issues/#combining-multiple-triggers)\n  * We download the image and use AI to extract the code\n  * If we’re evaluating (i.e. the execution started from the evaluation trigger), we calculate the string distance metric\n  * We pass this information back to n8n as a metric\n\n\n",
  "crawled_at": "2025-05-26T07:32:48.546725",
  "readme_zh": "## n8n中的AI评估功能\n\n这是一个针对n8n[评估功能](https://docs.n8n.io/advanced-ai/evaluations/overview)的模板。\n\n评估技术通过使用包含不同输入项的测试数据集运行工作流，来验证您的AI工作流是否可靠执行。\n\n通过为每个输入项计算指标（得分），您可以直观了解工作流在哪些环节表现良好，哪些环节存在不足。\n\n## 运作原理\n\n本模板展示了如何计算工作流评估指标：**基于逐字符比对的文本相似度**。\n\n该工作流会处理手写代码的图像，提取代码内容并与数据集中的预期答案进行比对。\n\n图像示例如下：\n\n![图片](https://storage.googleapis.com/n8n_template_data/handwriting_scans/doc20250302_08223946_001.jpg)\n\n工作流执行流程：\n\n* 使用评估触发器读取数据集\n* 与常规触发器并行连接，支持从任一触发器启动工作流。[更多信息](https://docs.n8n.io/advanced-ai/evaluations/tips-and-common-issues/#combining-multiple-triggers)\n* 下载图像并通过AI提取代码\n* 若处于评估模式（即由评估触发器启动执行），则计算字符串距离指标\n* 将该指标信息作为评估结果回传至n8n系统",
  "title_zh": "评估指标示例：字符串相似度",
  "publish_date_zh": "最后更新于4天前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"bf40384a063e00f3b983f4f9bada22b57a8231a04c0fb48d363e26d7b0f2b7e7\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"b2a1a367-119f-4e2d-a982-ff675debf658\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        220,\n        -40\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 180,\n        \"height\": 260,\n        \"content\": \"检查实际代码与预期代码的差距（得分为1表示完全匹配）\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f5413855-20de-4b77-ba90-18610a9d9b4d\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1300,\n        40\n      ],\n      \"parameters\": {\n        \"width\": 300,\n        \"height\": 500,\n        \"content\": \"## 工作原理  \\n该模板展示了如何计算工作流评估指标：**逐字符比对的文本相似度**。  \\n\\n工作流程通过拍摄手写代码的图像，提取代码内容并与数据集中的预期答案进行比对。  \\n\\n图像示例如下：  \\n![image](https://storage.googleapis.com/n8n_template_data/handwriting_scans/doc20250302_08223946_001.jpg)  \\n\\n更多关于工作流评估的信息可[在此查阅](https://docs.n8n.io/advanced-ai/evaluations/overview)，其他指标示例详见[此链接](https://docs.n8n.io/advanced-ai/evaluations/metric-based-evaluations/#2-calculate-metrics)。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8921a4c4-cee1-44e7-8dce-55219db519d7\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -960,\n        280\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 220,\n        \"height\": 220,\n        \"content\": \"阅读[此测试数据集](https://docs.google.com/spreadsheets/d/1uuPS5cHtSNZ6HNLOi75A2m8nVWZrdBZ_Ivf58osDAS8/edit?gid=1786963566#gid=1786963566)中的图像\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fbf8337b-eb46-443a-8507-58a14b817be0\",\n      \"name\": \"Match webhook format\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -680,\n        340\n      ],\n      \"parameters\": {\n        \"mode\": \"raw\",\n        \"options\": {},\n        \"jsonOutput\": \"=  {\\n    \\\"headers\\\": {\\n    },\\n    \\\"params\\\": {},\\n    \\\"query\\\": {\\n      \\\"url\\\": {{ $json.file_url.toJsonString() }}\\n    },\\n    \\\"body\\\": {},\\n    \\\"executionMode\\\": \\\"test\\\"\\n  }\"\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"a03c9b79-d45d-4842-9325-df1af37697eb\",\n      \"name\": \"Webhook\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -900,\n        40\n      ],\n      \"webhookId\": \"7ceb775c-b961-44f0-acfe-682a67612332\",\n      \"parameters\": {\n        \"path\": \"7ceb775c-b961-44f0-acfe-682a67612332\",\n        \"options\": {}\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"85bd63e2-3039-4f0e-8721-bc2b843461c9\",\n      \"name\": \"When fetching a dataset row\",\n      \"type\": \"n8n-nodes-base.evaluationTrigger\",\n      \"position\": [\n        -900,\n        340\n      ],\n      \"parameters\": {\n        \"sheetName\": {\n          \"__rl\": true,\n          \"mode\": \"url\",\n          \"value\": \"https://docs.google.com/spreadsheets/d/1uuPS5cHtSNZ6HNLOi75A2m8nVWZrdBZ_Ivf58osDAS8/edit?gid=1786963566#gid=1786963566\"\n        },\n        \"documentId\": {\n          \"__rl\": true,\n          \"mode\": \"url\",\n          \"value\": \"https://docs.google.com/spreadsheets/d/1uuPS5cHtSNZ6HNLOi75A2m8nVWZrdBZ_Ivf58osDAS8/edit?gid=1786963566#gid=1786963566\"\n        }\n      },\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"bpr2LoSELMlxpwnN\",\n          \"name\": \"Google Sheets account David\"\n        }\n      },\n      \"typeVersion\": 4.6\n    },\n    {\n      \"id\": \"4ed0b460-70af-4f1d-a7f3-97293f9b4ce0\",\n      \"name\": \"Respond to Webhook\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        260,\n        320\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1.3\n    },\n    {\n      \"id\": \"f1642aa1-94c5-4002-a7aa-533566dd20eb\",\n      \"name\": \"Evaluating?\",\n      \"type\": \"n8n-nodes-base.evaluation\",\n      \"position\": [\n        -20,\n        200\n      ],\n      \"parameters\": {\n        \"operation\": \"checkIfEvaluating\"\n      },\n      \"typeVersion\": 4.6\n    },\n    {\n      \"id\": \"15115588-b9ca-4e24-b7d8-f0aa0974b5dd\",\n      \"name\": \"Set metrics\",\n      \"type\": \"n8n-nodes-base.evaluation\",\n      \"position\": [\n        480,\n        80\n      ],\n      \"parameters\": {\n        \"metrics\": {\n          \"assignments\": [\n            {\n              \"id\": \"0e507b06-e6d5-4ace-aa22-f06c6db5b883\",\n              \"name\": \"score\",\n              \"type\": \"number\",\n              \"value\": \"={{ $json.score }}\"\n            }\n          ]\n        },\n        \"operation\": \"setMetrics\"\n      },\n      \"typeVersion\": 4.6\n    },\n    {\n      \"id\": \"af028132-c866-487d-be85-e3af049bc793\",\n      \"name\": \"Extract code from image\",\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"position\": [\n        -240,\n        200\n      ],\n      \"parameters\": {\n        \"text\": \"=Extract ONLY the handwritten code in the top-right corner of this image.\\n\\nThe code MUST follow this EXACT format:\\nBT/ED/[1-3 capital letters]/[1-3 capital letters]/[1-3 capital letters]/[1-3 capital letters or empty]/[single letter + number (2-4 chars total)]\\n\\nExamples of correct format:\\nBT/ED/ABC/DE/F/G/H1\\nBT/ED/A/BC/DEF/GH/I23\\nBT/ED/AB/CD/EF/GH/I234\\n\\nDO NOT include any explanations, notes, or other text.\\nDO NOT return anything if the code doesn't match the required format.\\nVERIFY the extracted code matches the format before returning it.\\nReturn ONLY the extracted code - nothing else.\",\n        \"modelId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o\",\n          \"cachedResultName\": \"GPT-4O\"\n        },\n        \"options\": {},\n        \"resource\": \"image\",\n        \"inputType\": \"base64\",\n        \"operation\": \"analyze\"\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"Ag9qPAsY7lpIGkvC\",\n          \"name\": \"JPs n8n openAI key\"\n        }\n      },\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"50a26635-078f-40a7-8944-2e43ed8cd482\",\n      \"name\": \"Calc string distance\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        260,\n        80\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"const expected_code = $('When fetching a dataset row').item.json.expected_output\\nconst actual_code = $json.content\\n\\nfunction levenshteinDistance(str1, str2) {\\n  const m = str1.length;\\n  const n = str2.length;\\n  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));\\n\\n  for (let i = 0; i <= m; i++) {\\n    dp[i][0] = i;\\n  }\\n  \\n  for (let j = 0; j <= n; j++) {\\n    dp[0][j] = j;\\n  }\\n\\n  for (let i = 1; i <= m; i++) {\\n    for (let j = 1; j <= n; j++) {\\n      if (str1[i - 1] === str2[j - 1]) {\\n        dp[i][j] = dp[i - 1][j - 1];\\n      } else {\\n        dp[i][j] = 1 + Math.min(\\n          dp[i - 1][j],     // deletion\\n          dp[i][j - 1],     // insertion\\n          dp[i - 1][j - 1]  // substitution\\n        );\\n      }\\n    }\\n  }\\n\\n  return dp[m][n];\\n}\\n\\nconst dist = levenshteinDistance(\\n  expected_code, \\n  actual_code\\n)\\n\\nconst max_dist = Math.max(\\n  expected_code.length,\\n  actual_code.length\\n)\\n\\nconsole.log('truth', expected_code)\\nconsole.log('effort', actual_code)\\nconsole.log('dist', dist)\\nconsole.log('max_dist', max_dist)\\n\\n$input.item.json.score = 1 - (dist / max_dist)\\n\\nreturn $input.item;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"383db4b0-9665-4608-bbf9-3dca88508bff\",\n      \"name\": \"Download image\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -460,\n        200\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $json.query.url }}\",\n        \"options\": {}\n      },\n      \"typeVersion\": 4.2\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Webhook\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Download image\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Evaluating?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Calc string distance\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Respond to Webhook\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Download image\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract code from image\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Calc string distance\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set metrics\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Match webhook format\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Download image\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract code from image\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Evaluating?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When fetching a dataset row\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Match webhook format\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}