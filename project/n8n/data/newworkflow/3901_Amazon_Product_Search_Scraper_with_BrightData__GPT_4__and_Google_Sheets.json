{
  "url": "https://n8n.io/workflows/3901-amazon-product-search-scraper-with-brightdata-gpt-4-and-google-sheets/",
  "title": "Amazon Product Search Scraper with BrightData, GPT-4, and Google Sheets",
  "author": "phil",
  "publish_date": "Last update 19 days ago",
  "publish_date_absolute": "2025-05-07",
  "categories": [
    {
      "name": "AI"
    },
    {
      "name": "Marketing"
    }
  ],
  "workflow_json": "{\"meta\":{\"instanceId\":\"4a11afdb3c52fd098e3eae9fad4b39fdf1bbcde142f596adda46c795e366b326\"},\"nodes\":[{\"id\":\"f1b36f4b-6558-4e83-a999-e6f2d24e196c\",\"name\":\"OpenRouter Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",\"position\":[620,240],\"parameters\":{\"model\":\"openai/gpt-4.1\",\"options\":{}},\"typeVersion\":1},{\"id\":\"89ca0a07-286f-4e68-9e85-0327a4859cc0\",\"name\":\"Structured Output Parser\",\"type\":\"@n8n/n8n-nodes-langchain.outputParserStructured\",\"position\":[900,240],\"parameters\":{\"schemaType\":\"manual\",\"inputSchema\":\"{\\n  \\\"type\\\": \\\"array\\\",\\n  \\\"items\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"name\\\": { \\\"type\\\": \\\"string\\\" },\\n      \\\"description\\\": { \\\"type\\\": \\\"string\\\" },\\n      \\\"rating\\\": { \\\"type\\\": \\\"number\\\" },\\n      \\\"reviews\\\": { \\\"type\\\": \\\"integer\\\" },\\n      \\\"price\\\": { \\\"type\\\": \\\"string\\\" }\\n    },\\n    \\\"required\\\": [\\\"name\\\", \\\"description\\\", \\\"rating\\\", \\\"reviews\\\", \\\"price\\\"]\\n  }\\n}\"},\"typeVersion\":1.2},{\"id\":\"e4800c1d-c0d8-4093-81ec-fc19ad0034cd\",\"name\":\"scrap url\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[240,60],\"parameters\":{\"url\":\"https://api.brightdata.com/request\",\"method\":\"POST\",\"options\":{},\"sendBody\":true,\"sendHeaders\":true,\"bodyParameters\":{\"parameters\":[{\"name\":\"zone\",\"value\":\"web_unlocker1\"},{\"name\":\"url\",\"value\":\"={{ $json.url }}\"},{\"name\":\"format\",\"value\":\"raw\"}]},\"headerParameters\":{\"parameters\":[{\"name\":\"Authorization\",\"value\":\"{{BRIGHTDATA_TOKEN}}\"}]}},\"typeVersion\":4.2},{\"id\":\"1a1f768f-615d-4035-81b0-63b860f8e6ac\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[160,-140],\"parameters\":{\"content\":\"## Web Scraper API\\n\\n[Inscription - Free Trial](https://get.brightdata.com/website-scraper)\"},\"typeVersion\":1},{\"id\":\"2f260d96-4fff-4a4f-af29-1e43f465d54c\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[-440,200],\"parameters\":{},\"typeVersion\":1},{\"id\":\"4be9033f-0b9f-466d-916e-88fbb2a80417\",\"name\":\"url\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[20,200],\"parameters\":{\"options\":{}},\"typeVersion\":3},{\"id\":\"21b6d21c-b977-4175-9068-e0e2e19fa472\",\"name\":\"get urls to scrape\",\"type\":\"n8n-nodes-base.googleSheets\",\"position\":[-200,200],\"parameters\":{\"options\":{},\"sheetName\":\"{{TRACK_SHEET_GID}}\",\"documentId\":\"{{WEB_SHEET_ID}}\"},\"credentials\":{\"googleSheetsOAuth2Api\":{\"id\":\"KsXWRZTrfCUFrrHD\",\"name\":\"Google Sheets\"}},\"typeVersion\":4.5},{\"id\":\"25ef76ec-cf0d-422e-b060-68c49192a008\",\"name\":\"clean html\",\"type\":\"n8n-nodes-base.code\",\"position\":[460,60],\"parameters\":{\"jsCode\":\"// CleanHtmlFunction.js\\n// Purpose: n8n Function node to clean HTML: remove doctype, scripts, styles, head, comments, classes, extra blank lines, and non-whitelisted tags\\n\\nreturn items.map(item => {\\n  const rawHtml = item.json.data;\\n\\n  // 1) remove doctype, scripts, styles, comments and head section, and strip class attributes\\n  let cleaned = rawHtml\\n    .replace(/<!doctype html>/gi, '')\\n    .replace(/<script[\\\\s\\\\S]*?<\\\\/script>/gi, '')\\n    .replace(/<style[\\\\s\\\\S]*?<\\\\/style>/gi, '')\\n    .replace(/<!--[\\\\s\\\\S]*?-->/g, '')\\n    .replace(/<head[\\\\s\\\\S]*?<\\\\/head>/gi, '')\\n    .replace(/\\\\sclass=\\\"[^\\\"]*\\\"/gi, '');\\n\\n  // 2) define whitelist of tags to keep\\n  const allowedTags = [\\n    'h1','h2','h3','h4','h5','h6',\\n    'p','ul','ol','li',\\n    'strong','em','a','blockquote',\\n    'code','pre'\\n  ];\\n\\n  // 3) strip out all tags not in the whitelist, reconstruct allowed tags cleanly\\n  cleaned = cleaned.replace(\\n    /<\\\\/?([a-z][a-z0-9]*)\\\\b[^>]*>/gi,\\n    (match, tagName) => {\\n      const name = tagName.toLowerCase();\\n      if (allowedTags.includes(name)) {\\n        return match.startsWith('</') ? `</${name}>` : `<${name}>`;\\n      }\\n      return '';\\n    }\\n  );\\n\\n  // 4) collapse multiple blank or whitespace-only lines into a single newline\\n  cleaned = cleaned.replace(/(\\\\s*\\\\r?\\\\n\\\\s*){2,}/g, '\\\\n');\\n\\n  // 5) trim leading/trailing whitespace\\n  cleaned = cleaned.trim();\\n\\n  return {\\n    json: { cleanedHtml: cleaned }\\n  };\\n});\"},\"typeVersion\":2},{\"id\":\"f72660d5-8427-4655-acbe-10365273c27b\",\"name\":\"extract data\",\"type\":\"@n8n/n8n-nodes-langchain.chainLlm\",\"position\":[680,60],\"parameters\":{\"text\":\"={{ $json.cleanedHtml }}\",\"messages\":{\"messageValues\":[{\"message\":\"=You are an expert in web page scraping. Provide a structured response in JSON format. Only the response, without commentary.\\n\\nExtract the product information for {{ $(‘url’).item.json.url.split(’/s?k=’)[1].split(’&’)[0] }} present on the page.\\n\\nname\\ndescription\\nrating\\nreviews\\nprice\"}]},\"promptType\":\"define\",\"hasOutputParser\":true},\"typeVersion\":1.6},{\"id\":\"8b4af1bb-d7f8-456e-b630-ecd9b6e4bcdc\",\"name\":\"add results\",\"type\":\"n8n-nodes-base.googleSheets\",\"position\":[1280,200],\"parameters\":{\"columns\":{\"value\":{\"name\":\"={{ $json.output.name }}\",\"price\":\"={{ $json.output.price }}\",\"rating\":\"={{ $json.output.rating }}\",\"reviews\":\"={{ $json.output.reviews }}\",\"description\":\"={{ $json.output.description }}\"},\"schema\":[{\"id\":\"name\",\"type\":\"string\"},{\"id\":\"description\",\"type\":\"string\"},{\"id\":\"rating\",\"type\":\"string\"},{\"id\":\"reviews\",\"type\":\"string\"},{\"id\":\"price\",\"type\":\"string\"}],\"mappingMode\":\"defineBelow\"},\"options\":{},\"operation\":\"append\",\"sheetName\":\"{{RESULTS_SHEET_GID}}\",\"documentId\":\"{{WEB_SHEET_ID}}\"},\"credentials\":{\"googleSheetsOAuth2Api\":{\"id\":\"KsXWRZTrfCUFrrHD\",\"name\":\"Google Sheets\"}},\"typeVersion\":4.5},{\"id\":\"7a5ba438-2ede-4d6c-b8fa-9a958ba1ef3e\",\"name\":\"Split items\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[1060,60],\"parameters\":{\"include\":\"allOtherFields\",\"options\":{},\"fieldToSplitOut\":\"output\"},\"typeVersion\":1}],\"pinData\":{},\"connections\":{\"url\":{\"main\":[[],[{\"node\":\"scrap url\",\"type\":\"main\",\"index\":0}]]},\"scrap url\":{\"main\":[[{\"node\":\"clean html\",\"type\":\"main\",\"index\":0}]]},\"clean html\":{\"main\":[[{\"node\":\"extract data\",\"type\":\"main\",\"index\":0}]]},\"Split items\":{\"main\":[[{\"node\":\"add results\",\"type\":\"main\",\"index\":0}]]},\"add results\":{\"main\":[[{\"node\":\"url\",\"type\":\"main\",\"index\":0}]]},\"extract data\":{\"main\":[[{\"node\":\"Split items\",\"type\":\"main\",\"index\":0}]]},\"get urls to scrape\":{\"main\":[[{\"node\":\"url\",\"type\":\"main\",\"index\":0}]]},\"OpenRouter Chat Model\":{\"ai_languageModel\":[[{\"node\":\"extract data\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Structured Output Parser\":{\"ai_outputParser\":[[{\"node\":\"extract data\",\"type\":\"ai_outputParser\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"get urls to scrape\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This workflow automates **web scraping** of Amazon search result pages by retrieving raw HTML, cleaning it to retain only the relevant product elements, and then using an LLM to **extract** structured product data (name, description, rating, reviews, and price), before **saving** the results back to Google Sheets.\n\nIt integrates Google Sheets to supply and collect URLs, BrightData to fetch page HTML, a custom n8n Function node to sanitize the HTML, LangChain (OpenRouter GPT-4) to parse product details, and Google Sheets again to store the output.\n\n![CleanShot 20250506 at 16.42.332x.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Clean_Shot_2025_05_06_at_16_42_33_2x_72cd43d389.png)  \nURL to scape\n\n.\n\n![CleanShot 20250506 at 16.41.062x.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Clean_Shot_2025_05_06_at_16_41_06_2x_adecdb1094.png)  \nResult\n\n### Who Needs Amazon Search Result Scraping?\n\nThis scraping workflow is ideal for teams and businesses that need to monitor Amazon product listings at scale:\n\n  * **E-commerce Analysts** – Track competitor pricing, ratings, and inventory trends.\n  * **Market Researchers** – Collect data on product popularity and reviews for market analysis.\n  * **Data Teams** – Automate ingestion of product metadata into BI pipelines or data lakes.\n  * **Affiliate Marketers** – Keep affiliate catalogs up to date with latest product details and prices.\n\n\n\nIf you need reliable, structured data from Amazon search results delivered directly into your spreadsheets, this workflow saves you hours of manual copy-and-paste.\n\n### Why Use This Workflow?\n\n  * **End-to-End Automation** – From URL list to clean JSON output in Sheets.\n  * **Robust HTML Cleaning** – Strips scripts, styles, unwanted tags, and noise.\n  * **Accurate Structured Parsing** – Leverages GPT-4 via LangChain for reliable extraction.\n  * **Scalable & Repeatable** – Processes thousands of URLs in batches.\n\n\n\n### Step-by-Step: How This Workflow Scrapes Amazon\n\n  1. **Get URLs from Google Sheets** – Reads a list of search result URLs.\n  2. **Loop Over Items** – Iterates through each URL in controlled batches.\n  3. **Fetch Raw HTML** – Uses [BrightData’s Web Unlocker proxy](https://get.brightdata.com/Unbreakable-Web-Scraper) to retrieve the page.\n  4. **Clean HTML** – A Function node removes doctype, scripts, styles, head, comments, classes, and non-whitelisted tags, collapsing extra whitespace.\n  5. **Extract with LLM** – Passes cleaned HTML into LangChain → GPT-4 to output JSON for each product: \n     * `name`, `description`, `rating`, `reviews`, `price`\n  6. **Save Results** – Appends the JSON fields as columns back into a “results” sheet in Google Sheets.\n\n\n\n### Customization: Tailor to Your Needs\n\n  * **Adaptable Sites** – This workflow can be adapted to any e-commerce or other website, for example [Walmart](https://www.walmart.com) or [eBay](https://www.ebay.com).\n  * **Whitelist Tags** – Modify the allowedTags array in the Code node to keep additional HTML elements.\n  * **Schema Changes** – Update the Structured Output Parser schema to include more fields (e.g., availability, SKU).\n  * **Alternate Data Sink** – Instead of Sheets, route output to a database, CSV file, or webhook.\n\n\n\n### 🔑 Prerequisites\n\n  * **Google Sheets Credentials** – OAuth credentials configured in n8n.\n  * **[BrightData API token](https://get.brightdata.com/Unbreakable-Web-Scraper)** – Stored in n8n credentials as `BRIGHTDATA_TOKEN`.\n  * **OpenRouter API Key** – Configured for the LangChain node to call GPT-4.\n  * **n8n Instance** – Self-hosted or cloud with sufficient quota for HTTP requests and LLM calls.\n\n\n\n### 🚀 Installation & Setup\n\n  * **Configure Credentials**\n    1. In n8n, set up Google Sheets OAuth under “Credentials.”\n    2. Add BrightData token as a new HTTP Request credential.\n    3. Create an OpenRouter API key credential for the LangChain node.\n  * **Import the Workflow**\n    1. Copy the JSON workflow into n8n’s “Import” dialog.\n    2. Map your Google Sheet IDs and GIDs to the `{{WEB_SHEET_ID}}`, `{{TRACK_SHEET_GID}}`, and `{{RESULTS_SHEET_GID}}` placeholders.\n    3. Ensure the `BRIGHTDATA_TOKEN` credential is selected on the HTTP Request node.\n  * **Test & Run**\n    1. Add a few Amazon search URLs to your “track” sheet.\n    2. Execute the workflow and verify product data appears in your “results” sheet.\n    3. Tweak batch size or parser schema as needed.\n\n\n\n### ⚠ Important\n\n  * **API Rate Limits** – Monitor your BrightData and OpenRouter usage to avoid throttling.\n  * **Amazon’s Terms** – Ensure your scraping complies with Amazon’s policies and legal requirements.\n\n\n\n### Summary\n\nThis workflow delivers a fully automated, scalable solution to extract structured product data from Amazon search pages directly into Google Sheets—streamlining your competitive analysis and data collection. 🚀\n\n[Phil | Inforeole](https://inforeole.fr)\n",
  "crawled_at": "2025-05-26T05:56:53.823265",
  "readme_zh": "该工作流实现了亚马逊搜索结果页面的**自动化爬取**：先获取原始HTML，清理后仅保留相关商品元素，再利用大语言模型**提取**结构化商品数据（名称、描述、评分、评论和价格），最后将结果**保存**至Google表格。\n\n系统集成Google表格提供和收集URL，通过BrightData获取页面HTML，自定义n8n函数节点净化HTML内容，调用LangChain（OpenRouter GPT-4）解析商品详情，最终将输出结果存回Google表格。\n\n![待爬取URL](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Clean_Shot_2025_05_06_at_16_42_33_2x_72cd43d389.png)  \n待爬取URL\n\n![结果展示](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Clean_Shot_2025_05_06_at_16_41_06_2x_adecdb1094.png)  \n结果展示\n\n### 适用场景\n\n本工作流特别适合需要大规模监控亚马逊商品列表的团队和企业：\n\n* **电商分析师**——追踪竞品定价、评分与库存趋势\n* **市场研究员**——收集商品热度与评论数据用于市场分析\n* **数据团队**——将商品元数据自动接入BI管道或数据湖\n* **联盟营销人员**——保持联盟商品目录与最新详情价格同步\n\n若需将亚马逊搜索结果可靠的结构化数据直接导入电子表格，本工作流可节省数小时手动复制粘贴时间。\n\n### 核心优势\n\n* **端到端自动化**——从URL列表到表格中的整洁JSON输出\n* **强效HTML净化**——剥离脚本、样式、冗余标签及干扰内容\n* **精准结构化解析**——通过LangChain调用GPT-4实现可靠提取\n* **可扩展可重复**——支持批量处理数千个URL\n\n### 工作流执行步骤\n\n1. **从Google表格获取URL**——读取搜索结果URL列表\n2. **循环处理条目**——按可控批次遍历每个URL\n3. **获取原始HTML**——通过[BrightData反拦截代理](https://get.brightdata.com/Unbreakable-Web-Scraper)抓取页面\n4. **净化HTML**——函数节点移除文档类型声明、脚本、样式、头部、注释、类属性及非白名单标签，压缩多余空格\n5. **大语言模型提取**——将净化后的HTML传入LangChain→GPT-4输出每个商品的JSON数据：\n   * `名称`、`描述`、`评分`、`评论数`、`价格`\n6. **保存结果**——将JSON字段作为列追加至Google表格的\"结果\"工作表\n\n### 定制化方案\n\n* **适配多平台**——可调整适用于任意电商网站（如[沃尔玛](https://www.walmart.com)或[eBay](https://www.ebay.com)）\n* **标签白名单**——修改代码节点的allowedTags数组以保留额外HTML元素\n* **字段扩展**——更新结构化输出解析器架构以包含更多字段（如库存状态、SKU）\n* **多输出端**——可替换表格输出为数据库、CSV文件或Webhook\n\n### 🔑 前提条件\n\n* **Google表格认证**——在n8n中配置OAuth凭证\n* **[BrightData API令牌](https://get.brightdata.com/Unbreakable-Web-Scraper)**——在n8n凭证中存储为`BRIGHTDATA_TOKEN`\n* **OpenRouter API密钥**——为LangChain节点配置GPT-4调用权限\n* **n8n实例**——自建或云服务需具备足够的HTTP请求和LLM调用配额\n\n### 🚀 安装部署\n\n* **凭证配置**\n  1. 在n8n\"凭证\"中设置Google表格OAuth\n  2. 添加BrightData令牌作为HTTP请求凭证\n  3. 为LangChain节点创建OpenRouter API密钥凭证\n* **工作流导入**\n  1. 将JSON工作流复制到n8n的\"导入\"对话框\n  2. 将Google表格ID和GID映射到`{{WEB_SHEET_ID}}`、`{{TRACK_SHEET_GID}}`和`{{RESULTS_SHEET_GID}}`占位符\n  3. 确保HTTP请求节点已选择`BRIGHTDATA_TOKEN`凭证\n* **测试运行**\n  1. 在\"跟踪\"工作表中添加若干亚马逊搜索URL\n  2. 执行工作流并验证\"结果\"工作表中的商品数据\n  3. 按需调整批次量或解析器架构\n\n### ⚠ 注意事项\n\n* **API速率限制**——监控BrightData和OpenRouter用量避免触发限制\n* **合规要求**——确保爬取行为符合亚马逊政策及法律条款\n\n### 方案总结\n\n本工作流提供全自动、可扩展的解决方案，将亚马逊搜索页面的结构化商品数据直接提取至Google表格，为竞品分析与数据采集提效赋能。🚀\n\n[Phil | Inforeole](https://inforeole.fr)",
  "title_zh": "基于BrightData、GPT-4与谷歌表格的亚马逊商品搜索爬虫工具",
  "publish_date_zh": "上次更新于8天前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"4a11afdb3c52fd098e3eae9fad4b39fdf1bbcde142f596adda46c795e366b326\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"f1b36f4b-6558-4e83-a999-e6f2d24e196c\",\n      \"name\": \"OpenRouter Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",\n      \"position\": [\n        620,\n        240\n      ],\n      \"parameters\": {\n        \"model\": \"openai/gpt-4.1\",\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"89ca0a07-286f-4e68-9e85-0327a4859cc0\",\n      \"name\": \"Structured Output Parser\",\n      \"type\": \"@n8n/n8n-nodes-langchain.outputParserStructured\",\n      \"position\": [\n        900,\n        240\n      ],\n      \"parameters\": {\n        \"schemaType\": \"manual\",\n        \"inputSchema\": \"{\\n  \\\"type\\\": \\\"array\\\",\\n  \\\"items\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"name\\\": { \\\"type\\\": \\\"string\\\" },\\n      \\\"description\\\": { \\\"type\\\": \\\"string\\\" },\\n      \\\"rating\\\": { \\\"type\\\": \\\"number\\\" },\\n      \\\"reviews\\\": { \\\"type\\\": \\\"integer\\\" },\\n      \\\"price\\\": { \\\"type\\\": \\\"string\\\" }\\n    },\\n    \\\"required\\\": [\\\"name\\\", \\\"description\\\", \\\"rating\\\", \\\"reviews\\\", \\\"price\\\"]\\n  }\\n}\"\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"e4800c1d-c0d8-4093-81ec-fc19ad0034cd\",\n      \"name\": \"scrap url\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        240,\n        60\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.brightdata.com/request\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"zone\",\n              \"value\": \"web_unlocker1\"\n            },\n            {\n              \"name\": \"url\",\n              \"value\": \"={{ $json.url }}\"\n            },\n            {\n              \"name\": \"format\",\n              \"value\": \"raw\"\n            }\n          ]\n        },\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Authorization\",\n              \"value\": \"{{BRIGHTDATA_TOKEN}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"1a1f768f-615d-4035-81b0-63b860f8e6ac\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        160,\n        -140\n      ],\n      \"parameters\": {\n        \"content\": \"## 网页抓取API\\n\\n[立即注册 - 免费试用](https://get.brightdata.com/website-scraper)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2f260d96-4fff-4a4f-af29-1e43f465d54c\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -440,\n        200\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4be9033f-0b9f-466d-916e-88fbb2a80417\",\n      \"name\": \"url\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        20,\n        200\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"21b6d21c-b977-4175-9068-e0e2e19fa472\",\n      \"name\": \"get urls to scrape\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"position\": [\n        -200,\n        200\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"sheetName\": \"{{TRACK_SHEET_GID}}\",\n        \"documentId\": \"{{WEB_SHEET_ID}}\"\n      },\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"KsXWRZTrfCUFrrHD\",\n          \"name\": \"Google Sheets\"\n        }\n      },\n      \"typeVersion\": 4.5\n    },\n    {\n      \"id\": \"25ef76ec-cf0d-422e-b060-68c49192a008\",\n      \"name\": \"clean html\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        460,\n        60\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// CleanHtmlFunction.js\\n// Purpose: n8n Function node to clean HTML: remove doctype, scripts, styles, head, comments, classes, extra blank lines, and non-whitelisted tags\\n\\nreturn items.map(item => {\\n  const rawHtml = item.json.data;\\n\\n  // 1) remove doctype, scripts, styles, comments and head section, and strip class attributes\\n  let cleaned = rawHtml\\n    .replace(/<!doctype html>/gi, '')\\n    .replace(/<script[\\\\s\\\\S]*?<\\\\/script>/gi, '')\\n    .replace(/<style[\\\\s\\\\S]*?<\\\\/style>/gi, '')\\n    .replace(/<!--[\\\\s\\\\S]*?-->/g, '')\\n    .replace(/<head[\\\\s\\\\S]*?<\\\\/head>/gi, '')\\n    .replace(/\\\\sclass=\\\"[^\\\"]*\\\"/gi, '');\\n\\n  // 2) define whitelist of tags to keep\\n  const allowedTags = [\\n    'h1','h2','h3','h4','h5','h6',\\n    'p','ul','ol','li',\\n    'strong','em','a','blockquote',\\n    'code','pre'\\n  ];\\n\\n  // 3) strip out all tags not in the whitelist, reconstruct allowed tags cleanly\\n  cleaned = cleaned.replace(\\n    /<\\\\/?([a-z][a-z0-9]*)\\\\b[^>]*>/gi,\\n    (match, tagName) => {\\n      const name = tagName.toLowerCase();\\n      if (allowedTags.includes(name)) {\\n        return match.startsWith('</') ? `</${name}>` : `<${name}>`;\\n      }\\n      return '';\\n    }\\n  );\\n\\n  // 4) collapse multiple blank or whitespace-only lines into a single newline\\n  cleaned = cleaned.replace(/(\\\\s*\\\\r?\\\\n\\\\s*){2,}/g, '\\\\n');\\n\\n  // 5) trim leading/trailing whitespace\\n  cleaned = cleaned.trim();\\n\\n  return {\\n    json: { cleanedHtml: cleaned }\\n  };\\n});\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"f72660d5-8427-4655-acbe-10365273c27b\",\n      \"name\": \"extract data\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        680,\n        60\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.cleanedHtml }}\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"=You are an expert in web page scraping. Provide a structured response in JSON format. Only the response, without commentary.\\n\\nExtract the product information for {{ $(‘url’).item.json.url.split(’/s?k=’)[1].split(’&’)[0] }} present on the page.\\n\\nname\\ndescription\\nrating\\nreviews\\nprice\"\n            }\n          ]\n        },\n        \"promptType\": \"define\",\n        \"hasOutputParser\": true\n      },\n      \"typeVersion\": 1.6\n    },\n    {\n      \"id\": \"8b4af1bb-d7f8-456e-b630-ecd9b6e4bcdc\",\n      \"name\": \"add results\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"position\": [\n        1280,\n        200\n      ],\n      \"parameters\": {\n        \"columns\": {\n          \"value\": {\n            \"name\": \"={{ $json.output.name }}\",\n            \"price\": \"={{ $json.output.price }}\",\n            \"rating\": \"={{ $json.output.rating }}\",\n            \"reviews\": \"={{ $json.output.reviews }}\",\n            \"description\": \"={{ $json.output.description }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"name\",\n              \"type\": \"string\"\n            },\n            {\n              \"id\": \"description\",\n              \"type\": \"string\"\n            },\n            {\n              \"id\": \"rating\",\n              \"type\": \"string\"\n            },\n            {\n              \"id\": \"reviews\",\n              \"type\": \"string\"\n            },\n            {\n              \"id\": \"price\",\n              \"type\": \"string\"\n            }\n          ],\n          \"mappingMode\": \"defineBelow\"\n        },\n        \"options\": {},\n        \"operation\": \"append\",\n        \"sheetName\": \"{{RESULTS_SHEET_GID}}\",\n        \"documentId\": \"{{WEB_SHEET_ID}}\"\n      },\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"KsXWRZTrfCUFrrHD\",\n          \"name\": \"Google Sheets\"\n        }\n      },\n      \"typeVersion\": 4.5\n    },\n    {\n      \"id\": \"7a5ba438-2ede-4d6c-b8fa-9a958ba1ef3e\",\n      \"name\": \"Split items\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        1060,\n        60\n      ],\n      \"parameters\": {\n        \"include\": \"allOtherFields\",\n        \"options\": {},\n        \"fieldToSplitOut\": \"output\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"url\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"scrap url\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"scrap url\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"clean html\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"clean html\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"extract data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split items\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"add results\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"add results\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"url\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"extract data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"get urls to scrape\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"url\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenRouter Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"extract data\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Structured Output Parser\": {\n      \"ai_outputParser\": [\n        [\n          {\n            \"node\": \"extract data\",\n            \"type\": \"ai_outputParser\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"get urls to scrape\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}