{
  "url": "https://n8n.io/workflows/3444-redis-locking-for-concurrent-task-handling/",
  "title": "Redis Locking for Concurrent Task Handling",
  "author": "Geoffrey Saxena",
  "publish_date": "Last update 19 days ago",
  "publish_date_absolute": "2025-05-07",
  "categories": [
    {
      "name": "Engineering"
    },
    {
      "name": "IT Ops"
    }
  ],
  "workflow_json": "{\"nodes\":[{\"id\":\"ffe22db7-06b9-4efe-ab35-758e420dbe57\",\"name\":\"END\",\"type\":\"n8n-nodes-base.noOp\",\"position\":[-2880,540],\"parameters\":{},\"typeVersion\":1},{\"id\":\"9480feb6-e12a-4b59-998e-bdc7b119087a\",\"name\":\"Workflow 1\",\"type\":\"n8n-nodes-base.set\",\"position\":[-2620,-20],\"parameters\":{\"options\":{}},\"typeVersion\":3.4},{\"id\":\"54492842-137b-48d6-851a-1ce6cc751612\",\"name\":\"Workflow 2\",\"type\":\"n8n-nodes-base.set\",\"position\":[-2620,200],\"parameters\":{\"options\":{}},\"typeVersion\":3.4},{\"id\":\"83bbda2c-112b-4ed0-9ccd-c7a5c840100d\",\"name\":\"Workflow 3\",\"type\":\"n8n-nodes-base.set\",\"position\":[-2620,420],\"parameters\":{\"options\":{}},\"typeVersion\":3.4},{\"id\":\"74d889d9-5215-495b-8e60-e1c78d79ae8c\",\"name\":\"Incoming Webhook Data\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[-4760,220],\"webhookId\":\"94d08900-4816-4c74-962a-aacff5077d5d\",\"parameters\":{\"path\":\"94d08900-4816-4c74-962a-aacff5077d5d\",\"options\":{}},\"typeVersion\":2},{\"id\":\"cb5e3e72-6678-4efb-8301-f149014444d2\",\"name\":\"Fetch Webhook Data & Declare lockValue\",\"type\":\"n8n-nodes-base.code\",\"position\":[-4520,220],\"parameters\":{\"jsCode\":\"// Parse the Slack payload\\nconst payload = JSON.parse($('Incoming Webhook Data').first().json[\\\"body\\\"][\\\"payload\\\"]);\\n\\n// Extract button action details\\nconst var1 = payload.var1;\\nconst var2 = payload.var2;\\nconst var3 = payload.var3;\\n\\n// Log or return the details\\nreturn {\\n    var1 : var1,\\n    var2: var2,\\n    var3: var3,\\n    lockValue : `${var1}-${var2}-${var3}`\\n};\"},\"typeVersion\":2},{\"id\":\"e118f753-945b-4951-95da-394732fc636c\",\"name\":\"Check Redis Lock\",\"type\":\"n8n-nodes-base.redis\",\"position\":[-4220,220],\"parameters\":{\"key\":\"xyz-lock\",\"options\":{},\"operation\":\"get\",\"propertyName\":\"Element\"},\"credentials\":{\"redis\":{\"id\":\"o0RxOKCtencIaop1\",\"name\":\"Geoffrey Redis\"}},\"typeVersion\":1},{\"id\":\"c1488bae-cb82-48ce-94cd-5359d7d10b04\",\"name\":\"Acquire Redis Lock\",\"type\":\"n8n-nodes-base.redis\",\"position\":[-3520,200],\"parameters\":{\"key\":\"xyz-lock\",\"ttl\":180,\"value\":\"={{ $('Fetch Webhook Data & Declare lockValue').item.json.lookupVariable }}\",\"expire\":true,\"operation\":\"set\"},\"credentials\":{\"redis\":{\"id\":\"o0RxOKCtencIaop1\",\"name\":\"Geoffrey Redis\"}},\"typeVersion\":1},{\"id\":\"0fe5e1d8-f1e4-40e0-a3a4-4c00bbf2b50b\",\"name\":\"redisLock existence boolean\",\"type\":\"n8n-nodes-base.if\",\"position\":[-4020,220],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"905501b4-718c-44fb-b2a5-a8eaf8605511\",\"operator\":{\"type\":\"string\",\"operation\":\"empty\",\"singleValue\":true},\"leftValue\":\"={{ $json.Element }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"3c66fab5-2c2a-4bba-8ba1-ed85e57cd42d\",\"name\":\"redisLock acquired booleans\",\"type\":\"n8n-nodes-base.if\",\"position\":[-3800,320],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"6c071e68-a15a-4da8-b962-fe173b1eb145\",\"operator\":{\"type\":\"string\",\"operation\":\"notExists\",\"singleValue\":true},\"leftValue\":\"={{ $json.Element }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"787d1c86-1a66-40ea-b8b6-29f50a48737c\",\"name\":\"Poll for lock\",\"type\":\"n8n-nodes-base.wait\",\"position\":[-3520,420],\"webhookId\":\"615b4c18-2c29-418c-a2bf-302ff24e5c65\",\"parameters\":{},\"typeVersion\":1.1},{\"id\":\"f5b88169-e97b-4359-890e-969dbdc6d829\",\"name\":\"duplicateWebhook boolean\",\"type\":\"n8n-nodes-base.if\",\"position\":[-3200,420],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"08500e34-cc7f-4005-87bd-f7250dc076fe\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('Fetch Webhook Data & Declare lockValue').item.json.lookupVariable }}\",\"rightValue\":\"={{ $input.first().json.Element }}\"}]}},\"typeVersion\":2.2},{\"id\":\"db4e4149-7970-402c-a3d7-2cfe47b6a5b7\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-4760,-120],\"parameters\":{\"color\":6,\"width\":480,\"height\":220,\"content\":\"#### 🔒 This workflow demonstrates Redis-based locking to prevent concurrent execution of workflows.\\n\\n**Steps:**\\n+ Try to acquire a lock via Redis\\n+ If successful, execute workflow\\n+ If duplicate request; ignore request\\n+ Release the lock after completion\"},\"typeVersion\":1},{\"id\":\"879b7ab5-402b-4ea8-977b-64d29cd9bb39\",\"name\":\"Discard Redis Lock\",\"type\":\"n8n-nodes-base.redis\",\"position\":[-2320,200],\"parameters\":{\"key\":\"n8n-rca-lock\",\"operation\":\"delete\"},\"credentials\":{\"redis\":{\"id\":\"o0RxOKCtencIaop1\",\"name\":\"Geoffrey Redis\"}},\"typeVersion\":1},{\"id\":\"494030d6-e731-4f4f-9193-7b46f2d470d0\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-3580,80],\"parameters\":{\"color\":5,\"width\":220,\"height\":80,\"content\":\"Attempts to acquire a lock using Redis by setting a key with expiration.\"},\"typeVersion\":1},{\"id\":\"a643b45e-2067-4c42-8c1c-365b3fea911a\",\"name\":\"Workflow Switch\",\"type\":\"n8n-nodes-base.switch\",\"position\":[-2880,200],\"parameters\":{\"rules\":{\"values\":[{\"outputKey\":\"1\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"2761039b-e76c-4606-9aaf-48a569942ab7\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"\",\"rightValue\":\"\"}]},\"renameOutput\":true},{\"outputKey\":\"2\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"ef07c62f-bd3f-4f54-85b9-9dbf64915f2c\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"\",\"rightValue\":\"\"}]},\"renameOutput\":true},{\"outputKey\":\"3\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"2dfc15de-bf33-4c25-932f-dae16758e2e6\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"\",\"rightValue\":\"\"}]},\"renameOutput\":true}]},\"options\":{}},\"typeVersion\":3.2},{\"id\":\"5531d4c3-158c-4f98-b6fa-9ef9a85eef71\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-2940,680],\"parameters\":{\"color\":5,\"height\":80,\"content\":\"Skips execution when duplicate request is received.\"},\"typeVersion\":1},{\"id\":\"0a159f03-3ecc-4010-ab63-cc24df90df31\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-2320,100],\"parameters\":{\"color\":5,\"height\":80,\"content\":\"Deletes the Redis lock key to release the lock.\"},\"typeVersion\":1}],\"connections\":{\"Workflow 1\":{\"main\":[[{\"node\":\"Discard Redis Lock\",\"type\":\"main\",\"index\":0}]]},\"Workflow 2\":{\"main\":[[{\"node\":\"Discard Redis Lock\",\"type\":\"main\",\"index\":0}]]},\"Workflow 3\":{\"main\":[[{\"node\":\"Discard Redis Lock\",\"type\":\"main\",\"index\":0}]]},\"Poll for lock\":{\"main\":[[{\"node\":\"duplicateWebhook boolean\",\"type\":\"main\",\"index\":0}]]},\"Workflow Switch\":{\"main\":[[{\"node\":\"Workflow 1\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Workflow 2\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Workflow 3\",\"type\":\"main\",\"index\":0}]]},\"Check Redis Lock\":{\"main\":[[{\"node\":\"redisLock existence boolean\",\"type\":\"main\",\"index\":0}]]},\"Acquire Redis Lock\":{\"main\":[[{\"node\":\"Workflow Switch\",\"type\":\"main\",\"index\":0}]]},\"Incoming Webhook Data\":{\"main\":[[{\"node\":\"Fetch Webhook Data & Declare lockValue\",\"type\":\"main\",\"index\":0}]]},\"duplicateWebhook boolean\":{\"main\":[[{\"node\":\"END\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Check Redis Lock\",\"type\":\"main\",\"index\":0}]]},\"redisLock acquired booleans\":{\"main\":[[{\"node\":\"Acquire Redis Lock\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Poll for lock\",\"type\":\"main\",\"index\":0}]]},\"redisLock existence boolean\":{\"main\":[[{\"node\":\"Acquire Redis Lock\",\"type\":\"main\",\"index\":0}],[{\"node\":\"redisLock acquired booleans\",\"type\":\"main\",\"index\":0}]]},\"Fetch Webhook Data & Declare lockValue\":{\"main\":[[{\"node\":\"Check Redis Lock\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "## 👤 Who is this for?\n\nThis workflow is great for **n8n users who want to prevent duplicate or overlapping workflow runs**. If you're a developer, DevOps engineer, or automation enthusiast managing tasks like **database updates, syncing tools, or hitting rate-limited APIs** , this one’s for you.\n\n* * *\n\n## 🧩 What problem does this solve?\n\nIn the real world, automations can get triggered at the same time—whether that’s because of multiple webhook calls, overlapping schedules, or retries. And when two workflows try to do the same thing at once (like updating a record or syncing data), it can cause **conflicts, data corruption, or wasted API calls**.\n\nThis workflow helps avoid that problem by using **Redis as a lock system** , so **only one instance runs at a time**. Think of it like putting up a “🚧 Workflow in Progress” sign while your logic is running.\n\n* * *\n\n## ⚙️ What this workflow does\n\n  1. When the workflow starts, it tries to **set a Redis key** as a lock with a short expiry.\n  2. If the lock is free: \n     * Your **main business logic runs**.\n     * Once it's done, the lock is cleared.\n  3. If the lock is already taken (i.e., another run is in progress): \n     * The workflow will **wait and retry** a few times.\n  4. If a duplicate request shows up while one is already being processed: \n     * It **skips that duplicate** to avoid unnecessary work.\n\n\n\nYou can customize both the **timeout** and **retry logic** to match your needs.\n\n* * *\n\n## 🛠️ Setup guide\n\nTo use this template:\n\n  * You’ll need access to a **Redis instance** (either self-hosted or managed like Upstash, Redis Cloud, etc).\n  * Set up your Redis credentials in the n8n Redis node.\n  * Swap out the webhook node with your actual trigger or logic.\n  * Adjust the lock timeout to match how long your task typically takes.\n\n\n\n> 💡 **Bonus Tip:** Use this pattern wherever you need **idempotency** or want to avoid **duplicate processing**.\n\n* * *\n\n## 🧪 Example use case\n\nLet’s say you have a workflow that **syncs ClickUp tickets to Google Sheets**. It runs daily at 9 AM and updates tickets, adds notes, and makes sure nothing is missed.\n\nBut what if two runs start at the same time? Or someone triggers a manual sync while the scheduled one is still working?\n\nBy wrapping that whole sync inside this **Redis locking template** , you can make sure it **only runs one at a time** , saving your APIs (and your sanity).\n",
  "crawled_at": "2025-05-26T04:30:52.915983",
  "readme_zh": "## 👤 适用人群\n\n本工作流非常适合**希望避免重复或重叠工作流运行的n8n用户**。如果您是负责**数据库更新、工具同步或调用有速率限制的API**的开发者、DevOps工程师或自动化爱好者，这个方案正是为您量身定制。\n\n* * *\n\n## 🧩 解决什么问题？\n\n现实场景中，自动化流程可能因多重网络钩子调用、计划任务重叠或重试机制而同时触发。当两个工作流试图同时执行相同操作（如更新记录或同步数据）时，可能导致**冲突、数据损坏或API调用浪费**。\n\n本方案通过**Redis分布式锁机制**确保**同一时间只有一个实例运行**，相当于在业务逻辑执行时挂起\"🚧 处理中\"的标识牌。\n\n* * *\n\n## ⚙️ 工作流机制\n\n1. 启动时尝试**设置带短暂过期时间的Redis锁键**\n2. 获取锁成功时：\n   - 执行**核心业务逻辑**\n   - 完成后自动释放锁\n3. 锁已被占用时（即有其他实例正在运行）：\n   - 工作流将**等待并自动重试**数次\n4. 检测到重复请求时：\n   - **跳过冗余处理**以避免无效操作\n\n支持自定义**超时时长**与**重试策略**以适应不同需求。\n\n* * *\n\n## 🛠️ 配置指南\n\n使用本模板需：\n- 准备**Redis实例**（自建或Upstash/Redis Cloud等托管服务）\n- 在n8n的Redis节点中配置认证信息\n- 将示例Webhook节点替换为实际触发器\n- 根据任务耗时调整锁过期时间\n\n> 💡 **进阶技巧**：该模式同样适用于需要**保证幂等性**或**避免重复处理**的场景\n\n* * *\n\n## 🧪 典型应用场景\n\n假设您有一个**每日9点同步ClickUp任务到Google表格**的工作流，需要更新任务状态、添加注释并确保数据完整。\n\n若出现以下情况：\n- 定时任务重叠启动\n- 手动同步与自动调度同时触发\n\n通过**Redis锁模板**封装同步逻辑，可确保**串行化执行**，既保护API配额，也维护系统稳定性。",
  "title_zh": "Redis并发任务处理锁机制",
  "publish_date_zh": "上次更新于8天前",
  "workflow_json_zh": "{\n  \"nodes\": [\n    {\n      \"id\": \"ffe22db7-06b9-4efe-ab35-758e420dbe57\",\n      \"name\": \"END\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        -2880,\n        540\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9480feb6-e12a-4b59-998e-bdc7b119087a\",\n      \"name\": \"Workflow 1\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -2620,\n        -20\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"54492842-137b-48d6-851a-1ce6cc751612\",\n      \"name\": \"Workflow 2\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -2620,\n        200\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"83bbda2c-112b-4ed0-9ccd-c7a5c840100d\",\n      \"name\": \"Workflow 3\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -2620,\n        420\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"74d889d9-5215-495b-8e60-e1c78d79ae8c\",\n      \"name\": \"Incoming Webhook Data\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -4760,\n        220\n      ],\n      \"webhookId\": \"94d08900-4816-4c74-962a-aacff5077d5d\",\n      \"parameters\": {\n        \"path\": \"94d08900-4816-4c74-962a-aacff5077d5d\",\n        \"options\": {}\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"cb5e3e72-6678-4efb-8301-f149014444d2\",\n      \"name\": \"Fetch Webhook Data & Declare lockValue\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        -4520,\n        220\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Parse the Slack payload\\nconst payload = JSON.parse($('Incoming Webhook Data').first().json[\\\"body\\\"][\\\"payload\\\"]);\\n\\n// Extract button action details\\nconst var1 = payload.var1;\\nconst var2 = payload.var2;\\nconst var3 = payload.var3;\\n\\n// Log or return the details\\nreturn {\\n    var1 : var1,\\n    var2: var2,\\n    var3: var3,\\n    lockValue : `${var1}-${var2}-${var3}`\\n};\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"e118f753-945b-4951-95da-394732fc636c\",\n      \"name\": \"Check Redis Lock\",\n      \"type\": \"n8n-nodes-base.redis\",\n      \"position\": [\n        -4220,\n        220\n      ],\n      \"parameters\": {\n        \"key\": \"xyz-lock\",\n        \"options\": {},\n        \"operation\": \"get\",\n        \"propertyName\": \"Element\"\n      },\n      \"credentials\": {\n        \"redis\": {\n          \"id\": \"o0RxOKCtencIaop1\",\n          \"name\": \"Geoffrey Redis\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c1488bae-cb82-48ce-94cd-5359d7d10b04\",\n      \"name\": \"Acquire Redis Lock\",\n      \"type\": \"n8n-nodes-base.redis\",\n      \"position\": [\n        -3520,\n        200\n      ],\n      \"parameters\": {\n        \"key\": \"xyz-lock\",\n        \"ttl\": 180,\n        \"value\": \"={{ $('Fetch Webhook Data & Declare lockValue').item.json.lookupVariable }}\",\n        \"expire\": true,\n        \"operation\": \"set\"\n      },\n      \"credentials\": {\n        \"redis\": {\n          \"id\": \"o0RxOKCtencIaop1\",\n          \"name\": \"Geoffrey Redis\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0fe5e1d8-f1e4-40e0-a3a4-4c00bbf2b50b\",\n      \"name\": \"redisLock existence boolean\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        -4020,\n        220\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"905501b4-718c-44fb-b2a5-a8eaf8605511\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"empty\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.Element }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"3c66fab5-2c2a-4bba-8ba1-ed85e57cd42d\",\n      \"name\": \"redisLock acquired booleans\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        -3800,\n        320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"6c071e68-a15a-4da8-b962-fe173b1eb145\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"notExists\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.Element }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"787d1c86-1a66-40ea-b8b6-29f50a48737c\",\n      \"name\": \"Poll for lock\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        -3520,\n        420\n      ],\n      \"webhookId\": \"615b4c18-2c29-418c-a2bf-302ff24e5c65\",\n      \"parameters\": {},\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"f5b88169-e97b-4359-890e-969dbdc6d829\",\n      \"name\": \"duplicateWebhook boolean\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        -3200,\n        420\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"08500e34-cc7f-4005-87bd-f7250dc076fe\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $('Fetch Webhook Data & Declare lockValue').item.json.lookupVariable }}\",\n              \"rightValue\": \"={{ $input.first().json.Element }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"db4e4149-7970-402c-a3d7-2cfe47b6a5b7\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -4760,\n        -120\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 480,\n        \"height\": 220,\n        \"content\": \"#### 🔒 该工作流演示了基于Redis的锁机制，用于防止工作流并发执行。\\n\\n**步骤：**\\n+ 尝试通过Redis获取锁\\n+ 若成功，则执行工作流\\n+ 若检测到重复请求，则忽略该请求\\n+ 完成后释放锁\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"879b7ab5-402b-4ea8-977b-64d29cd9bb39\",\n      \"name\": \"Discard Redis Lock\",\n      \"type\": \"n8n-nodes-base.redis\",\n      \"position\": [\n        -2320,\n        200\n      ],\n      \"parameters\": {\n        \"key\": \"n8n-rca-lock\",\n        \"operation\": \"delete\"\n      },\n      \"credentials\": {\n        \"redis\": {\n          \"id\": \"o0RxOKCtencIaop1\",\n          \"name\": \"Geoffrey Redis\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"494030d6-e731-4f4f-9193-7b46f2d470d0\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -3580,\n        80\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 220,\n        \"height\": 80,\n        \"content\": \"尝试通过设置带过期时间的键来使用Redis获取锁。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a643b45e-2067-4c42-8c1c-365b3fea911a\",\n      \"name\": \"Workflow Switch\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        -2880,\n        200\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"1\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"2761039b-e76c-4606-9aaf-48a569942ab7\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"2\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"ef07c62f-bd3f-4f54-85b9-9dbf64915f2c\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"3\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"2dfc15de-bf33-4c25-932f-dae16758e2e6\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"5531d4c3-158c-4f98-b6fa-9ef9a85eef71\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -2940,\n        680\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"height\": 80,\n        \"content\": \"当收到重复请求时跳过执行。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0a159f03-3ecc-4010-ab63-cc24df90df31\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -2320,\n        100\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"height\": 80,\n        \"content\": \"删除Redis锁键以释放锁。\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"connections\": {\n    \"Workflow 1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Discard Redis Lock\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Workflow 2\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Discard Redis Lock\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Workflow 3\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Discard Redis Lock\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Poll for lock\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"duplicateWebhook boolean\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Workflow Switch\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Workflow 1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Workflow 2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Workflow 3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Redis Lock\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"redisLock existence boolean\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Acquire Redis Lock\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Workflow Switch\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Incoming Webhook Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Fetch Webhook Data & Declare lockValue\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"duplicateWebhook boolean\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"END\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Check Redis Lock\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"redisLock acquired booleans\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Acquire Redis Lock\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Poll for lock\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"redisLock existence boolean\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Acquire Redis Lock\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"redisLock acquired booleans\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Fetch Webhook Data & Declare lockValue\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Redis Lock\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}