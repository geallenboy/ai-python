{
  "url": "https://n8n.io/workflows/2820-backup-workflows-to-git-repository-on-gitea/",
  "title": "Backup Workflows to Git Repository on Gitea",
  "author": "Octoleo",
  "publish_date": "Last update 4 months ago",
  "publish_date_absolute": "2025-01-26",
  "categories": [
    {
      "name": "Other"
    }
  ],
  "workflow_json": "{\"id\":\"Ef2uEM6H19K2DGUO\",\"meta\":{\"templateId\":\"2532\",\"templateCredsSetupCompleted\":true},\"name\":\"Backup workflows to git repository on Gitea\",\"tags\":[{\"id\":\"UWNX4AzSneYNvTQI\",\"name\":\"Gitea\",\"createdAt\":\"2025-01-28T23:10:06.823Z\",\"updatedAt\":\"2025-01-28T23:10:06.823Z\"},{\"id\":\"4b7Bs9T0Cagsg5tT\",\"name\":\"Git\",\"createdAt\":\"2025-01-28T23:10:26.545Z\",\"updatedAt\":\"2025-01-28T23:10:26.545Z\"},{\"id\":\"HiN3ehC2KkAp5kVs\",\"name\":\"Backup\",\"createdAt\":\"2025-01-28T23:10:38.878Z\",\"updatedAt\":\"2025-01-28T23:10:38.878Z\"}],\"nodes\":[{\"id\":\"639582ef-f13e-4844-bd10-647718079121\",\"name\":\"Globals\",\"type\":\"n8n-nodes-base.set\",\"position\":[600,240],\"parameters\":{\"values\":{\"string\":[{\"name\":\"repo.url\",\"value\":\"https://git.vdm.dev\"},{\"name\":\"repo.name\",\"value\":\"workflows\"},{\"name\":\"repo.owner\",\"value\":\"n8n\"}]},\"options\":{}},\"typeVersion\":1},{\"id\":\"9df89713-220e-43b9-b234-b8f5612629cf\",\"name\":\"n8n\",\"type\":\"n8n-nodes-base.n8n\",\"position\":[840,240],\"parameters\":{\"filters\":{},\"requestOptions\":{}},\"credentials\":{\"n8nApi\":{\"id\":\"ZjfxOLTTHX2CzbKa\",\"name\":\"Main N8N Account\"}},\"typeVersion\":1},{\"id\":\"4b2d375c-a339-404c-babd-555bd2fc4091\",\"name\":\"Schedule Trigger\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[380,240],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"minutes\",\"minutesInterval\":45}]}},\"typeVersion\":1.2},{\"id\":\"ea026e96-0db1-41fd-b003-2f2bf4662696\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2620,300],\"parameters\":{\"height\":80,\"content\":\"Workflow changes committed to the repository\"},\"typeVersion\":1},{\"id\":\"9c402daa-6d03-485d-b8a0-58f1b65d396d\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2260,180],\"parameters\":{\"height\":80,\"content\":\"Check if there are any changes in the workflow\"},\"typeVersion\":1},{\"id\":\"1d9216d9-bf8d-4945-8a58-22fb1ffc9be8\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1800,580],\"parameters\":{\"height\":80,\"content\":\"Create a new file for the workflow\"},\"typeVersion\":1},{\"id\":\"60a3953b-d9f1-4afd-b299-e314116b96c6\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1300,200],\"parameters\":{\"height\":80,\"content\":\"Check if file exists in the repository\"},\"typeVersion\":1},{\"id\":\"f2340ad0-71a1-4c74-8d90-bcb974b8b305\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[780,180],\"parameters\":{\"height\":80,\"content\":\"Get all workflows\"},\"typeVersion\":1},{\"id\":\"617bea19-341a-4e9d-b6fd-6b417e58d756\",\"name\":\"Sticky Note6\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[500,180],\"parameters\":{\"height\":80,\"content\":\"Set variables\"},\"typeVersion\":1},{\"id\":\"72f806d7-e30a-470b-9ba2-37fdc35de3c8\",\"name\":\"SetDataUpdateNode\",\"type\":\"n8n-nodes-base.set\",\"position\":[1920,240],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"0a6b769a-c66d-4784-92c7-a70caa28e1ba\",\"name\":\"item\",\"type\":\"object\",\"value\":\"={{ $node[\\\"ForEach\\\"].json }}\"}]}},\"typeVersion\":3.4},{\"id\":\"bca5e2c4-7aa3-48df-9e5f-b31977970c28\",\"name\":\"SetDataCreateNode\",\"type\":\"n8n-nodes-base.set\",\"position\":[1220,640],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"0a6b769a-c66d-4784-92c7-a70caa28e1ba\",\"name\":\"item\",\"type\":\"object\",\"value\":\"={{ $node[\\\"ForEach\\\"].json }}\"}]}},\"typeVersion\":3.4},{\"id\":\"bf74b1ea-e066-462b-9c3d-ed4a44a09a33\",\"name\":\"Base64EncodeUpdate\",\"type\":\"n8n-nodes-base.code\",\"position\":[2140,240],\"parameters\":{\"language\":\"python\",\"pythonCode\":\"import json\\nimport base64\\nfrom js import Object\\n\\n# Assuming _input.all() returns a JavaScript object\\njs_object = _input.all()\\n\\n# Convert the JsProxy object to a Python dictionary\\ndef js_to_py(js_obj):\\n    if isinstance(js_obj, (str, int, float, bool)) or js_obj is None:\\n        # Base types are already Python-compatible\\n        return js_obj\\n    elif isinstance(js_obj, list):\\n        # Convert lists recursively\\n        return [js_to_py(item) for item in js_obj]\\n    elif hasattr(js_obj, \\\"__iter__\\\") and not isinstance(js_obj, str):\\n        # Handle JsProxy objects (JavaScript objects or arrays)\\n        if hasattr(js_obj, \\\"keys\\\"):\\n            # If it has keys, treat it as a dictionary\\n            return {key: js_to_py(js_obj[key]) for key in Object.keys(js_obj)}\\n        else:\\n            # Otherwise, treat it as a list\\n            return [js_to_py(item) for item in js_obj]\\n    else:\\n        # Fallback for other types\\n        return js_obj\\n\\n# Convert the JavaScript object to a Python dictionary\\ninput_dict = js_to_py(js_object)\\n\\n# Step 0: get the correct data set of the workflow\\ninner_data = input_dict[0].get('json').get('item')\\n\\n# Step 1: Convert the dictionary to a pretty-printed JSON string\\njson_string = json.dumps(inner_data, indent=4)\\n\\n# Step 2: Encode the JSON string to bytes\\njson_bytes = json_string.encode('utf-8')\\n\\n# Step 3: Convert the bytes to a base64 string\\nbase64_string = base64.b64encode(json_bytes).decode('utf-8')\\n\\n# Step 5: Create the return object with the base64 string and its SHA-256 hash\\nreturn_object = {\\n    \\\"item\\\": base64_string\\n}\\n\\n# Return the object\\nreturn return_object\"},\"typeVersion\":2},{\"id\":\"2d817c66-5aa0-45c9-b851-4b5e3dbecca4\",\"name\":\"Base64EncodeCreate\",\"type\":\"n8n-nodes-base.code\",\"position\":[1520,640],\"parameters\":{\"language\":\"python\",\"pythonCode\":\"import json\\nimport base64\\nfrom js import Object\\n\\n# Assuming _input.all() returns a JavaScript object\\njs_object = _input.all()\\n\\n# Convert the JsProxy object to a Python dictionary\\ndef js_to_py(js_obj):\\n    if isinstance(js_obj, (str, int, float, bool)) or js_obj is None:\\n        # Base types are already Python-compatible\\n        return js_obj\\n    elif isinstance(js_obj, list):\\n        # Convert lists recursively\\n        return [js_to_py(item) for item in js_obj]\\n    elif hasattr(js_obj, \\\"__iter__\\\") and not isinstance(js_obj, str):\\n        # Handle JsProxy objects (JavaScript objects or arrays)\\n        if hasattr(js_obj, \\\"keys\\\"):\\n            # If it has keys, treat it as a dictionary\\n            return {key: js_to_py(js_obj[key]) for key in Object.keys(js_obj)}\\n        else:\\n            # Otherwise, treat it as a list\\n            return [js_to_py(item) for item in js_obj]\\n    else:\\n        # Fallback for other types\\n        return js_obj\\n\\n# Convert the JavaScript object to a Python dictionary\\ninput_dict = js_to_py(js_object)\\n\\n# Step 0: get the correct data set of the workflow\\ninner_data = input_dict[0].get('json').get('item')\\n\\n# Step 1: Convert the dictionary to a pretty-printed JSON string\\njson_string = json.dumps(inner_data, indent=4)\\n\\n# Step 2: Encode the JSON string to bytes\\njson_bytes = json_string.encode('utf-8')\\n\\n# Step 3: Convert the bytes to a base64 string\\nbase64_string = base64.b64encode(json_bytes).decode('utf-8')\\n\\n# Step 4: Create the return object with the base64 string in 'item'\\nreturn_object = {\\n    \\\"item\\\": base64_string\\n}\\n\\n# Return the object\\nreturn return_object\"},\"typeVersion\":2},{\"id\":\"41a7da89-1c8c-4100-8c30-d0788962efc1\",\"name\":\"Exist\",\"type\":\"n8n-nodes-base.if\",\"position\":[1640,260],\"parameters\":{\"options\":{\"ignoreCase\":false},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"or\",\"conditions\":[{\"id\":\"16a9182d-059d-4774-ba95-654fb4293fdb\",\"operator\":{\"type\":\"object\",\"operation\":\"notExists\",\"singleValue\":true},\"leftValue\":\"={{ $json.error }}\",\"rightValue\":404}]}},\"executeOnce\":false,\"typeVersion\":2.2,\"alwaysOutputData\":false},{\"id\":\"ab9246eb-a253-4d76-b33b-5f8f12342542\",\"name\":\"Changed\",\"type\":\"n8n-nodes-base.if\",\"position\":[2360,240],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"e0c66624-429a-4f1f-bf7b-1cc1b32bad7b\",\"operator\":{\"type\":\"string\",\"operation\":\"notEquals\"},\"leftValue\":\"={{ $json.item }}\",\"rightValue\":\"={{ $('GetGitea').item.json.content }}\"}]}},\"typeVersion\":2.2},{\"id\":\"4278a176-6496-4817-82f8-591539619673\",\"name\":\"PutGitea\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2700,360],\"parameters\":{\"url\":\"={{ $('Globals').item.json.repo.url }}/api/v1/repos/{{ $('Globals').item.json.repo.owner }}/{{ $('Globals').item.json.repo.name }}/contents/{{ encodeURIComponent($('GetGitea').item.json.name) }}\",\"method\":\"PUT\",\"options\":{},\"sendBody\":true,\"authentication\":\"genericCredentialType\",\"bodyParameters\":{\"parameters\":[{\"name\":\"content\",\"value\":\"={{ $('Base64EncodeUpdate').item.json.item }}\"},{\"name\":\"sha\",\"value\":\"={{ $('GetGitea').item.json.sha }}\"}]},\"genericAuthType\":\"httpHeaderAuth\"},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"gTvBAgkOmqhl5Nmr\",\"name\":\"Gitea Token\"}},\"typeVersion\":4.2},{\"id\":\"12307a61-e7cc-42f9-a7c7-8abbcab9e3ab\",\"name\":\"GetGitea\",\"type\":\"n8n-nodes-base.httpRequest\",\"onError\":\"continueRegularOutput\",\"position\":[1380,260],\"parameters\":{\"url\":\"={{ $('Globals').item.json.repo.url }}/api/v1/repos/{{ encodeURIComponent($('Globals').item.json.repo.owner) }}/{{ encodeURIComponent($('Globals').item.json.repo.name) }}/contents/{{ encodeURIComponent($json.name) }}.json\",\"options\":{},\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\"},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"gTvBAgkOmqhl5Nmr\",\"name\":\"Gitea Token\"}},\"typeVersion\":4.2},{\"id\":\"24fda439-bb23-4392-a297-d8070907f9e6\",\"name\":\"PostGitea\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1920,640],\"parameters\":{\"url\":\"={{ $('Globals').item.json.repo.url }}/api/v1/repos/{{ $('Globals').item.json.repo.owner }}/{{ $('Globals').item.json.repo.name }}/contents/{{ encodeURIComponent($('ForEach').item.json.name) }}.json\",\"method\":\"POST\",\"options\":{},\"sendBody\":true,\"authentication\":\"genericCredentialType\",\"bodyParameters\":{\"parameters\":[{\"name\":\"content\",\"value\":\"={{ $json.item }}\"}]},\"genericAuthType\":\"httpHeaderAuth\"},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"gTvBAgkOmqhl5Nmr\",\"name\":\"Gitea Token\"}},\"typeVersion\":4.2},{\"id\":\"43a60315-d381-4ac4-be4c-f6a158651a00\",\"name\":\"ForEach\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[1060,240],\"parameters\":{\"options\":{}},\"executeOnce\":false,\"typeVersion\":3},{\"id\":\"88578dc4-2398-48d0-b0ba-2198b35bb994\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[380,440],\"parameters\":{\"width\":560,\"height\":1620,\"content\":\"### **📌 Setup Guide for Backup Workflows to Git Repository on Gitea**\\n\\n#### **🔧 1. Configure Global Variables**\\nGo to the **Globals** node and update the following:\\n- **`repo.url`** → `https://your-gitea-instance.com` *(Replace with your actual Gitea URL)*\\n- **`repo.name`** → `workflows` *(Repository name where backups will be stored)*\\n- **`repo.owner`** → `octoleo` *(Gitea account that owns the repository)*\\n\\n📌 **These settings define where workflows will be backed up.**\\n\\n---\\n\\n#### **🔑 2. Set Up Gitea Authentication**\\n1️⃣ **In Gitea:**\\n- Generate a **Personal Access Token** under **Settings → Applications → Generate Token**\\n- Ensure the token has **repo read/write permissions**\\n\\n2️⃣ **In the Credentials Manager:**\\n- Create a new **Gitea Token** credential\\n- Set the **Name** as `Authorization`\\n- Set the **Value** as:\\n```\\nBearer YOUR_PERSONAL_ACCESS_TOKEN\\n```\\n📌 **Ensure there is a space after `Bearer` before the token!**\\n\\n---\\n\\n#### **🔗 3. Connect Gitea Credentials to Git Nodes**\\n- Open each of these **three Git nodes**:\\n- **GetGitea** → Retrieves existing repository data\\n- **PutGitea** → Updates workflows\\n- **PostGitea** → Adds new workflows\\n\\n- Assign the **Gitea Token** credential to each node.\\n\\n📌 **These nodes handle pushing your workflows to Gitea.**\\n\\n---\\n\\n#### **🌐 4. Set Up API Credentials for Workflow Retrieval**\\n- Locate the API request node that **fetches workflows**.\\n- Add your **API authentication credentials** (Token or Basic Auth).\\n\\n📌 **This ensures the workflow can fetch all available workflows from your system.**\\n\\n---\\n\\n#### **🛠️ 5. Test & Activate the Workflow**\\n✅ **Run the workflow manually** → Check that workflows are being backed up correctly.\\n✅ **Review the Gitea repository** → Ensure the files are updated.\\n✅ **Enable the scheduled trigger** → Automates backups at defined intervals.\\n\\n📌 **The workflow automatically checks for changes before committing updates!**\\n\\n---\\n\\n### **🚀 Done! Your Workflows Are Now Backed Up Securely!**\\n💬 Have issues? **Reach out on the forum for help!**\"},\"typeVersion\":1}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"84ba3f3f-fbc8-4792-8e28-198f515fef4e\",\"staticData\":{\"node:Schedule Trigger\":{\"recurrenceRules\":[]}},\"connections\":{\"n8n\":{\"main\":[[{\"node\":\"ForEach\",\"type\":\"main\",\"index\":0}]]},\"Exist\":{\"main\":[[{\"node\":\"SetDataUpdateNode\",\"type\":\"main\",\"index\":0}],[{\"node\":\"SetDataCreateNode\",\"type\":\"main\",\"index\":0}]]},\"Changed\":{\"main\":[[{\"node\":\"PutGitea\",\"type\":\"main\",\"index\":0}],[{\"node\":\"ForEach\",\"type\":\"main\",\"index\":0}]]},\"ForEach\":{\"main\":[[],[{\"node\":\"GetGitea\",\"type\":\"main\",\"index\":0}]]},\"Globals\":{\"main\":[[{\"node\":\"n8n\",\"type\":\"main\",\"index\":0}]]},\"GetGitea\":{\"main\":[[{\"node\":\"Exist\",\"type\":\"main\",\"index\":0}]]},\"PutGitea\":{\"main\":[[{\"node\":\"ForEach\",\"type\":\"main\",\"index\":0}]]},\"PostGitea\":{\"main\":[[{\"node\":\"ForEach\",\"type\":\"main\",\"index\":0}]]},\"Schedule Trigger\":{\"main\":[[{\"node\":\"Globals\",\"type\":\"main\",\"index\":0}]]},\"SetDataCreateNode\":{\"main\":[[{\"node\":\"Base64EncodeCreate\",\"type\":\"main\",\"index\":0}]]},\"SetDataUpdateNode\":{\"main\":[[{\"node\":\"Base64EncodeUpdate\",\"type\":\"main\",\"index\":0}]]},\"Base64EncodeCreate\":{\"main\":[[{\"node\":\"PostGitea\",\"type\":\"main\",\"index\":0}]]},\"Base64EncodeUpdate\":{\"main\":[[{\"node\":\"Changed\",\"type\":\"main\",\"index\":0}]]}},\"triggerCount\":1}",
  "readme": "#### **Overview**\n\nThis workflow automates the backup of all workflows from your system to a **Git repository hosted on Gitea**. It runs on a **scheduled trigger** , fetching, encoding, and committing workflow data, ensuring seamless version control and disaster recovery.\n\n📌 **Quick Setup:** Just update three global variables and configure authentication—no manual exports needed!\n\n* * *\n\n### **How It Works (Quick Glance)**\n\n1️⃣ **Scheduled Execution** → Runs automatically at defined intervals.  \n2️⃣ **Fetch Workflows** → Uses the API to retrieve all workflows.  \n3️⃣ **Process Workflows** → Converts workflow data into a **Git-friendly format**.  \n4️⃣ **Commit & Push to Git** → Saves workflows in a Gitea repository.\n\n* * *\n\n### **Setup Steps** (⚡ Takes ~5 min)\n\n#### **1️⃣ Set Global Variables**\n\nGo to the **Globals** section in the workflow and update:\n\n  * **`repo.url`** → `https://your-gitea-instance.com` _(Replace with your actual Gitea URL)_\n  * **`repo.name`** → `workflows` _(Repository name where backups will be stored)_\n  * **`repo.owner`** → `octoleo` _(Gitea account that owns the repository)_\n\n\n\n📌 **These three variables define where the workflows are stored.**\n\n#### **2️⃣ Configure Gitea Authentication**\n\n  * **Go to your Gitea account** → Generate a **Personal Access Token**\n  * In the **credential manager** , create a **new Gitea Token** with:\n  * **Name:** `Authorization`\n  * **Value:** `Bearer YOUR_PERSONAL_ACCESS_TOKEN`\n\n\n\n📌 **Ensure there is a space after`Bearer` before the token!**\n\n#### **3️⃣ Link Credentials to Git Nodes**\n\nAttach the Gitea credentials to these three Git nodes:\n\n  * **GetGitea** → Retrieves existing repository data\n  * **PutGitea** → Updates workflows\n  * **PostGitea** → Adds new workflows\n\n\n\n#### **4️⃣ Link Credentials for API Requests**\n\n  * **Add API authentication** in the node that fetches all workflows.\n\n\n\n#### **5️⃣ Test & Activate**\n\n  * **Run the workflow manually** to confirm backups work.\n  * Enable the **schedule trigger** for automation.\n\n\n\n📌 **The workflow automatically checks for changes before committing updates.**\n\n* * *\n\n### **Why Use This Workflow?**\n\n✅ **Automated Backups** → No manual exports needed.  \n✅ **Version Control** → Easily track workflow changes.  \n✅ **Simple Setup** → Just configure globals & credentials.  \n✅ **Secure** → Uses token-based authentication.\n\n* * *\n\n### **Next Steps**\n\n💬 Have questions? **Reach out on the forum!** 🚀\n",
  "crawled_at": "2025-05-26T02:06:13.492391",
  "readme_zh": "#### **概述**\n\n该工作流可将系统中的所有工作流自动备份至**Gitea托管的Git仓库**，通过**定时触发器**实现工作流数据的抓取、编码与提交，确保版本控制和灾难恢复的无缝衔接。\n\n📌 **快速设置：** 仅需更新三个全局变量并配置认证信息——无需手动导出！\n\n* * *\n\n### **运作原理（速览）**\n\n1️⃣ **定时执行** → 按预设间隔自动运行  \n2️⃣ **获取工作流** → 通过API拉取所有工作流  \n3️⃣ **处理工作流** → 将数据转换为**Git兼容格式**  \n4️⃣ **提交至Git仓库** → 将工作流保存至Gitea仓库  \n\n* * *\n\n### **配置步骤** (⚡ 约5分钟完成)\n\n#### **1️⃣ 设置全局变量**\n\n进入工作流的**全局变量**模块，更新以下参数：\n\n  * **`repo.url`** → `https://你的Gitea实例地址` _(替换为实际Gitea URL)_  \n  * **`repo.name`** → `workflows` _(用于存储备份的仓库名称)_  \n  * **`repo.owner`** → `octoleo` _(Gitea仓库所有者账户名)_  \n\n📌 **这三个变量决定了工作流的存储位置。**\n\n#### **2️⃣ 配置Gitea认证**\n\n  * **登录Gitea账户** → 生成**个人访问令牌**  \n  * 在**凭证管理器**中创建**Gitea令牌**，填写：  \n  * **名称：** `Authorization`  \n  * **值：** `Bearer 你的个人访问令牌`  \n\n📌 **注意`Bearer`后需保留空格！**\n\n#### **3️⃣ 为Git节点关联凭证**\n\n将Gitea凭证关联至以下三个Git节点：\n\n  * **GetGitea** → 获取现有仓库数据  \n  * **PutGitea** → 更新工作流  \n  * **PostGitea** → 新增工作流  \n\n#### **4️⃣ 配置API请求认证**\n\n  * 在抓取工作流的节点中**添加API认证**  \n\n#### **5️⃣ 测试与激活**\n\n  * **手动运行工作流**验证备份功能  \n  * 启用**定时触发器**实现自动化  \n\n📌 **提交更新前会自动检测变更内容。**\n\n* * *\n\n### **核心优势**\n\n✅ **自动备份** → 告别手动导出  \n✅ **版本控制** → 轻松追踪变更记录  \n✅ **极简配置** → 只需设置变量与凭证  \n✅ **安全保障** → 采用令牌认证机制  \n\n* * *\n\n### **后续支持**\n\n💬 遇到问题？**欢迎在论坛提问！** 🚀",
  "title_zh": "备份工作流至Gitea上的Git仓库",
  "publish_date_zh": "最后更新于3个月前",
  "workflow_json_zh": "{\n  \"id\": \"Ef2uEM6H19K2DGUO\",\n  \"meta\": {\n    \"templateId\": \"2532\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"Backup workflows to git repository on Gitea\",\n  \"tags\": [\n    {\n      \"id\": \"UWNX4AzSneYNvTQI\",\n      \"name\": \"Gitea\",\n      \"createdAt\": \"2025-01-28T23:10:06.823Z\",\n      \"updatedAt\": \"2025-01-28T23:10:06.823Z\"\n    },\n    {\n      \"id\": \"4b7Bs9T0Cagsg5tT\",\n      \"name\": \"Git\",\n      \"createdAt\": \"2025-01-28T23:10:26.545Z\",\n      \"updatedAt\": \"2025-01-28T23:10:26.545Z\"\n    },\n    {\n      \"id\": \"HiN3ehC2KkAp5kVs\",\n      \"name\": \"Backup\",\n      \"createdAt\": \"2025-01-28T23:10:38.878Z\",\n      \"updatedAt\": \"2025-01-28T23:10:38.878Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"639582ef-f13e-4844-bd10-647718079121\",\n      \"name\": \"Globals\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        600,\n        240\n      ],\n      \"parameters\": {\n        \"values\": {\n          \"string\": [\n            {\n              \"name\": \"repo.url\",\n              \"value\": \"https://git.vdm.dev\"\n            },\n            {\n              \"name\": \"repo.name\",\n              \"value\": \"workflows\"\n            },\n            {\n              \"name\": \"repo.owner\",\n              \"value\": \"n8n\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9df89713-220e-43b9-b234-b8f5612629cf\",\n      \"name\": \"n8n\",\n      \"type\": \"n8n-nodes-base.n8n\",\n      \"position\": [\n        840,\n        240\n      ],\n      \"parameters\": {\n        \"filters\": {},\n        \"requestOptions\": {}\n      },\n      \"credentials\": {\n        \"n8nApi\": {\n          \"id\": \"ZjfxOLTTHX2CzbKa\",\n          \"name\": \"Main N8N Account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4b2d375c-a339-404c-babd-555bd2fc4091\",\n      \"name\": \"Schedule Trigger\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [\n        380,\n        240\n      ],\n      \"parameters\": {\n        \"rule\": {\n          \"interval\": [\n            {\n              \"field\": \"minutes\",\n              \"minutesInterval\": 45\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"ea026e96-0db1-41fd-b003-2f2bf4662696\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2620,\n        300\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"已提交至仓库的工作流变更\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9c402daa-6d03-485d-b8a0-58f1b65d396d\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2260,\n        180\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"检查工作流程是否有任何变动\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"1d9216d9-bf8d-4945-8a58-22fb1ffc9be8\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1800,\n        580\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"为工作流程创建新文件\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"60a3953b-d9f1-4afd-b299-e314116b96c6\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1300,\n        200\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"检查文件是否存在于仓库中\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f2340ad0-71a1-4c74-8d90-bcb974b8b305\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        780,\n        180\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"获取所有工作流程\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"617bea19-341a-4e9d-b6fd-6b417e58d756\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        500,\n        180\n      ],\n      \"parameters\": {\n        \"height\": 80,\n        \"content\": \"设置变量\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"72f806d7-e30a-470b-9ba2-37fdc35de3c8\",\n      \"name\": \"SetDataUpdateNode\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1920,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"0a6b769a-c66d-4784-92c7-a70caa28e1ba\",\n              \"name\": \"item\",\n              \"type\": \"object\",\n              \"value\": \"={{ $node[\\\"ForEach\\\"].json }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"bca5e2c4-7aa3-48df-9e5f-b31977970c28\",\n      \"name\": \"SetDataCreateNode\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1220,\n        640\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"0a6b769a-c66d-4784-92c7-a70caa28e1ba\",\n              \"name\": \"item\",\n              \"type\": \"object\",\n              \"value\": \"={{ $node[\\\"ForEach\\\"].json }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"bf74b1ea-e066-462b-9c3d-ed4a44a09a33\",\n      \"name\": \"Base64EncodeUpdate\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2140,\n        240\n      ],\n      \"parameters\": {\n        \"language\": \"python\",\n        \"pythonCode\": \"import json\\nimport base64\\nfrom js import Object\\n\\n# Assuming _input.all() returns a JavaScript object\\njs_object = _input.all()\\n\\n# Convert the JsProxy object to a Python dictionary\\ndef js_to_py(js_obj):\\n    if isinstance(js_obj, (str, int, float, bool)) or js_obj is None:\\n        # Base types are already Python-compatible\\n        return js_obj\\n    elif isinstance(js_obj, list):\\n        # Convert lists recursively\\n        return [js_to_py(item) for item in js_obj]\\n    elif hasattr(js_obj, \\\"__iter__\\\") and not isinstance(js_obj, str):\\n        # Handle JsProxy objects (JavaScript objects or arrays)\\n        if hasattr(js_obj, \\\"keys\\\"):\\n            # If it has keys, treat it as a dictionary\\n            return {key: js_to_py(js_obj[key]) for key in Object.keys(js_obj)}\\n        else:\\n            # Otherwise, treat it as a list\\n            return [js_to_py(item) for item in js_obj]\\n    else:\\n        # Fallback for other types\\n        return js_obj\\n\\n# Convert the JavaScript object to a Python dictionary\\ninput_dict = js_to_py(js_object)\\n\\n# Step 0: get the correct data set of the workflow\\ninner_data = input_dict[0].get('json').get('item')\\n\\n# Step 1: Convert the dictionary to a pretty-printed JSON string\\njson_string = json.dumps(inner_data, indent=4)\\n\\n# Step 2: Encode the JSON string to bytes\\njson_bytes = json_string.encode('utf-8')\\n\\n# Step 3: Convert the bytes to a base64 string\\nbase64_string = base64.b64encode(json_bytes).decode('utf-8')\\n\\n# Step 5: Create the return object with the base64 string and its SHA-256 hash\\nreturn_object = {\\n    \\\"item\\\": base64_string\\n}\\n\\n# Return the object\\nreturn return_object\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"2d817c66-5aa0-45c9-b851-4b5e3dbecca4\",\n      \"name\": \"Base64EncodeCreate\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1520,\n        640\n      ],\n      \"parameters\": {\n        \"language\": \"python\",\n        \"pythonCode\": \"import json\\nimport base64\\nfrom js import Object\\n\\n# Assuming _input.all() returns a JavaScript object\\njs_object = _input.all()\\n\\n# Convert the JsProxy object to a Python dictionary\\ndef js_to_py(js_obj):\\n    if isinstance(js_obj, (str, int, float, bool)) or js_obj is None:\\n        # Base types are already Python-compatible\\n        return js_obj\\n    elif isinstance(js_obj, list):\\n        # Convert lists recursively\\n        return [js_to_py(item) for item in js_obj]\\n    elif hasattr(js_obj, \\\"__iter__\\\") and not isinstance(js_obj, str):\\n        # Handle JsProxy objects (JavaScript objects or arrays)\\n        if hasattr(js_obj, \\\"keys\\\"):\\n            # If it has keys, treat it as a dictionary\\n            return {key: js_to_py(js_obj[key]) for key in Object.keys(js_obj)}\\n        else:\\n            # Otherwise, treat it as a list\\n            return [js_to_py(item) for item in js_obj]\\n    else:\\n        # Fallback for other types\\n        return js_obj\\n\\n# Convert the JavaScript object to a Python dictionary\\ninput_dict = js_to_py(js_object)\\n\\n# Step 0: get the correct data set of the workflow\\ninner_data = input_dict[0].get('json').get('item')\\n\\n# Step 1: Convert the dictionary to a pretty-printed JSON string\\njson_string = json.dumps(inner_data, indent=4)\\n\\n# Step 2: Encode the JSON string to bytes\\njson_bytes = json_string.encode('utf-8')\\n\\n# Step 3: Convert the bytes to a base64 string\\nbase64_string = base64.b64encode(json_bytes).decode('utf-8')\\n\\n# Step 4: Create the return object with the base64 string in 'item'\\nreturn_object = {\\n    \\\"item\\\": base64_string\\n}\\n\\n# Return the object\\nreturn return_object\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"41a7da89-1c8c-4100-8c30-d0788962efc1\",\n      \"name\": \"Exist\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1640,\n        260\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"ignoreCase\": false\n        },\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"or\",\n          \"conditions\": [\n            {\n              \"id\": \"16a9182d-059d-4774-ba95-654fb4293fdb\",\n              \"operator\": {\n                \"type\": \"object\",\n                \"operation\": \"notExists\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.error }}\",\n              \"rightValue\": 404\n            }\n          ]\n        }\n      },\n      \"executeOnce\": false,\n      \"typeVersion\": 2.2,\n      \"alwaysOutputData\": false\n    },\n    {\n      \"id\": \"ab9246eb-a253-4d76-b33b-5f8f12342542\",\n      \"name\": \"Changed\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        2360,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"e0c66624-429a-4f1f-bf7b-1cc1b32bad7b\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"notEquals\"\n              },\n              \"leftValue\": \"={{ $json.item }}\",\n              \"rightValue\": \"={{ $('GetGitea').item.json.content }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"4278a176-6496-4817-82f8-591539619673\",\n      \"name\": \"PutGitea\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2700,\n        360\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Globals').item.json.repo.url }}/api/v1/repos/{{ $('Globals').item.json.repo.owner }}/{{ $('Globals').item.json.repo.name }}/contents/{{ encodeURIComponent($('GetGitea').item.json.name) }}\",\n        \"method\": \"PUT\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"authentication\": \"genericCredentialType\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"content\",\n              \"value\": \"={{ $('Base64EncodeUpdate').item.json.item }}\"\n            },\n            {\n              \"name\": \"sha\",\n              \"value\": \"={{ $('GetGitea').item.json.sha }}\"\n            }\n          ]\n        },\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"gTvBAgkOmqhl5Nmr\",\n          \"name\": \"Gitea Token\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"12307a61-e7cc-42f9-a7c7-8abbcab9e3ab\",\n      \"name\": \"GetGitea\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        1380,\n        260\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Globals').item.json.repo.url }}/api/v1/repos/{{ encodeURIComponent($('Globals').item.json.repo.owner) }}/{{ encodeURIComponent($('Globals').item.json.repo.name) }}/contents/{{ encodeURIComponent($json.name) }}.json\",\n        \"options\": {},\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"gTvBAgkOmqhl5Nmr\",\n          \"name\": \"Gitea Token\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"24fda439-bb23-4392-a297-d8070907f9e6\",\n      \"name\": \"PostGitea\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1920,\n        640\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Globals').item.json.repo.url }}/api/v1/repos/{{ $('Globals').item.json.repo.owner }}/{{ $('Globals').item.json.repo.name }}/contents/{{ encodeURIComponent($('ForEach').item.json.name) }}.json\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"authentication\": \"genericCredentialType\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"content\",\n              \"value\": \"={{ $json.item }}\"\n            }\n          ]\n        },\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"gTvBAgkOmqhl5Nmr\",\n          \"name\": \"Gitea Token\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"43a60315-d381-4ac4-be4c-f6a158651a00\",\n      \"name\": \"ForEach\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        1060,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"executeOnce\": false,\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"88578dc4-2398-48d0-b0ba-2198b35bb994\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        380,\n        440\n      ],\n      \"parameters\": {\n        \"width\": 560,\n        \"height\": 1620,\n        \"content\": \"### **📌 Gitea 工作流备份至 Git 仓库配置指南**\\n\\n#### **🔧 1. 配置全局变量**\\n进入 **Globals** 节点并更新以下参数：\\n- **`repo.url`** → `https://你的Gitea实例地址.com` *(替换为实际Gitea URL)*\\n- **`repo.name`** → `workflows` *(用于存储备份的仓库名称)*\\n- **`repo.owner`** → `octoleo` *(Gitea仓库所属账户名)*\\n\\n📌 **这些设置决定了工作流的备份位置**\\n\\n---\\n\\n#### **🔑 2. 配置Gitea认证**\\n1️⃣ **在Gitea中：**\\n- 进入 **设置→应用→生成令牌** 创建个人访问令牌\\n- 确保令牌具有 **仓库读写权限**\\n\\n2️⃣ **在凭据管理器中：**\\n- 新建 **Gitea令牌** 凭据\\n- 将 **名称** 设为 `Authorization`\\n- 将 **值** 设置为：\\n```\\nBearer 你的个人访问令牌\\n```\\n📌 **注意`Bearer`和令牌之间必须保留空格！**\\n\\n---\\n\\n#### **🔗 3. 为Git节点绑定Gitea凭据**\\n- 分别打开以下 **三个Git节点**：\\n- **GetGitea** → 获取现有仓库数据\\n- **PutGitea** → 更新工作流\\n- **PostGitea** → 新增工作流\\n\\n- 为每个节点分配 **Gitea令牌** 凭据\\n\\n📌 **这些节点负责将工作流推送至Gitea**\\n\\n---\\n\\n#### **🌐 4. 配置工作流获取API凭据**\\n- 找到 **获取工作流** 的API请求节点\\n- 添加 **API认证凭据** (令牌或基础认证)\\n\\n📌 **确保工作流能获取系统中所有可用工作流**\\n\\n---\\n\\n#### **🛠️ 5. 测试并激活工作流**\\n✅ **手动运行工作流** → 检查备份是否正常执行\\n✅ **查看Gitea仓库** → 确认文件已更新\\n✅ **启用定时触发器** → 按设定间隔自动备份\\n\\n📌 **工作流会在提交更新前自动检测变更！**\\n\\n---\\n\\n### **🚀 完成！您的工作流现已安全备份！**\\n💬 遇到问题？**欢迎在论坛寻求帮助！**\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"84ba3f3f-fbc8-4792-8e28-198f515fef4e\",\n  \"staticData\": {\n    \"node:Schedule Trigger\": {\n      \"recurrenceRules\": []\n    }\n  },\n  \"connections\": {\n    \"n8n\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"ForEach\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Exist\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SetDataUpdateNode\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"SetDataCreateNode\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Changed\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"PutGitea\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"ForEach\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"ForEach\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"GetGitea\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Globals\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"n8n\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"GetGitea\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Exist\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"PutGitea\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"ForEach\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"PostGitea\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"ForEach\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Schedule Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Globals\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"SetDataCreateNode\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Base64EncodeCreate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"SetDataUpdateNode\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Base64EncodeUpdate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Base64EncodeCreate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"PostGitea\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Base64EncodeUpdate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Changed\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"triggerCount\": 1\n}"
}