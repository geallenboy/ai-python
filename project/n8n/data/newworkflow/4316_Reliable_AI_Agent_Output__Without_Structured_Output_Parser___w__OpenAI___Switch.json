{
  "url": "https://n8n.io/workflows/4316-reliable-ai-agent-output-without-structured-output-parser-w-openai-and-switch/",
  "title": "Reliable AI Agent Output  Without Structured Output Parser - w/ OpenAI & Switch",
  "author": "Dataki",
  "publish_date": "Last update a day ago",
  "publish_date_absolute": "",
  "categories": [
    {
      "name": "Engineering"
    },
    {
      "name": "AI"
    }
  ],
  "workflow_json": "{\"id\":\"\",\"meta\":{\"instanceId\":\"\"},\"name\":\"Reliable Structured Output from AI Agent Without the Structured Output Parser - with OpenAI & Switch node\",\"tags\":[],\"nodes\":[{\"id\":\"\",\"name\":\"AI Agent\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[-400,760],\"parameters\":{\"text\":\"={{ $json.chatInput }}\",\"options\":{\"maxIterations\":10,\"systemMessage\":\"=You are a helpful assistant specialized in nutrition.  \\nYour task is to provide accurate nutritional information for a given food item.  \\nYou must return your answer strictly in the form of a JSON object matching the following schema:\\n\\n{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"alimentName\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"description\\\": \\\"The name of the food item, in English\\\"\\n    },\\n    \\\"averageCalories\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Average calories per 100g or standard portion (kcal)\\\"\\n    },\\n    \\\"proteins\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of protein per 100g or portion (grams)\\\"\\n    },\\n    \\\"carbohydrates\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Total amount of carbohydrates per 100g or portion (grams), including fiber and sugars\\\"\\n    },\\n    \\\"sugar\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of total sugars (subset of carbohydrates) per 100g or portion (grams)\\\"\\n    },\\n    \\\"fiber\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of dietary fiber (subset of carbohydrates) per 100g or portion (grams)\\\"\\n    },\\n    \\\"fat\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of fat per 100g or portion (grams)\\\"\\n    },\\n    \\\"sodium\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of sodium per 100g or portion (milligrams)\\\"\\n    },\\n    \\\"healthyScore\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"minimum\\\": 0,\\n      \\\"maximum\\\": 10,\\n      \\\"description\\\": \\\"A healthiness score from 0 (very unhealthy) to 10 (very healthy), based on nutritional guidelines\\\"\\n    }\\n  },\\n  \\\"required\\\": [\\n    \\\"alimentName\\\",\\n    \\\"averageCalories\\\",\\n    \\\"proteins\\\",\\n    \\\"carbohydrates\\\",\\n    \\\"sugar\\\",\\n    \\\"fiber\\\",\\n    \\\"fat\\\",\\n    \\\"sodium\\\",\\n    \\\"healthyScore\\\"\\n  ]\\n}\\n\\n\\nIf the user input is not a valid food item, or if you are unsure whether it is a real food, then instead return:\\n\\n{\\n  \\\"error\\\": \\\"invalid_input\\\",\\n  \\\"message\\\": \\\"The provided input does not appear to be a valid food item.\\\"\\n}\\n\\n----\\n\\n⚠️ If you fail to produce output in the correct schema, the Schema Error Prompt below will contain an error message. You will need to follow the instructions it provides:\\n\\n## Schema Error Prompt:\\n\\n{{ $json.schemaErrorPrompt }}\\n\\n\",\"returnIntermediateSteps\":true},\"promptType\":\"define\"},\"executeOnce\":false,\"typeVersion\":1.8},{\"id\":\"\",\"name\":\"When chat message received\",\"type\":\"@n8n/n8n-nodes-langchain.chatTrigger\",\"position\":[-800,760],\"webhookId\":\"\",\"parameters\":{\"mode\":\"webhook\",\"public\":true,\"options\":{\"responseMode\":\"responseNode\"},\"authentication\":\"basicAuth\"},\"credentials\":{\"httpBasicAuth\":{\"id\":\"\",\"name\":\"\"}},\"typeVersion\":1.1},{\"id\":\"\",\"name\":\"OpenAI Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[-400,920],\"parameters\":{\"model\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"=gpt-4.1-nano\"},\"options\":{\"temperature\":0.8,\"responseFormat\":\"json_object\"}},\"credentials\":{\"openAiApi\":{\"id\":\"\",\"name\":\"OpenAi Connection\"}},\"typeVersion\":1.2},{\"id\":\"\",\"name\":\"Simple Memory\",\"type\":\"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\"position\":[-260,920],\"parameters\":{},\"typeVersion\":1.3},{\"id\":\"\",\"name\":\"Switch\",\"type\":\"n8n-nodes-base.switch\",\"position\":[860,760],\"parameters\":{\"rules\":{\"values\":[{\"outputKey\":\"invalidSchema\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"\",\"operator\":{\"type\":\"boolean\",\"operation\":\"true\",\"singleValue\":true},\"leftValue\":\"={{ $json.output.error !== undefined && $json.aiRunIndex < 3 }}\",\"rightValue\":\"\"}]},\"renameOutput\":true},{\"outputKey\":\"validSchema\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"\",\"operator\":{\"type\":\"string\",\"operation\":\"exists\",\"singleValue\":true},\"leftValue\":\"={{ $json.output.alimentName }}\",\"rightValue\":\"\"}]},\"renameOutput\":true}]},\"options\":{\"fallbackOutput\":\"extra\"}},\"typeVersion\":3.2},{\"id\":\"\",\"name\":\"Validate Output + Set `aiRunIndex`\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[260,760],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"\",\"name\":\"output\",\"type\":\"object\",\"value\":\"={{ \\n(() => {\\n\\tlet raw = $json.output;\\n\\n\\tif (typeof raw === 'string') {\\n\\t\\traw = raw\\n\\t\\t\\t.replace(/^\\\\s*```json/i, '')\\n\\t\\t\\t.replace(/```$/i, '')\\n\\t\\t\\t.trim();\\n\\t\\ttry { raw = JSON.parse(raw); }\\n\\t\\tcatch { return { error: 'invalid_json' }; }\\n\\t}\\n\\n\\t// Allow alternative valid response when input is not a valid food item\\n\\tif (\\n\\t\\traw.error === 'invalid_input' &&\\n\\t\\traw.message === 'The provided input does not appear to be a valid food item.'\\n\\t) {\\n\\t\\treturn JSON.stringify(raw, null, 2);\\n\\t}\\n\\n\\t// Check required keys\\n\\tconst requiredKeys = [\\n\\t\\t'alimentName',\\n\\t\\t'averageCalories',\\n\\t\\t'proteins',\\n\\t\\t'carbohydrates',\\n\\t\\t'sugar',\\n\\t\\t'fiber',\\n\\t\\t'fat',\\n\\t\\t'sodium',\\n\\t\\t'healthyScore'\\n\\t];\\n\\n\\tfor (const key of requiredKeys) {\\n\\t\\tif (!(key in raw)) {\\n\\t\\t\\treturn { error: 'missing_key', key };\\n\\t\\t}\\n\\t}\\n\\n\\t// Type checks\\n\\tif (typeof raw.alimentName !== 'string')\\n\\t\\treturn { error: 'invalid_type', key: 'alimentName', expected: 'string' };\\n\\n\\tif (typeof raw.averageCalories !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'averageCalories', expected: 'number' };\\n\\n\\tif (typeof raw.proteins !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'proteins', expected: 'number' };\\n\\n\\tif (typeof raw.carbohydrates !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'carbohydrates', expected: 'number' };\\n\\n\\tif (typeof raw.sugar !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'sugar', expected: 'number' };\\n\\n\\tif (typeof raw.fiber !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'fiber', expected: 'number' };\\n\\n\\tif (typeof raw.fat !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'fat', expected: 'number' };\\n\\n\\tif (typeof raw.sodium !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'sodium', expected: 'number' };\\n\\n\\tif (typeof raw.healthyScore !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'healthyScore', expected: 'number' };\\n\\n\\tif (raw.healthyScore < 0 || raw.healthyScore > 10)\\n\\t\\treturn { error: 'invalid_range', key: 'healthyScore', expected: 'number between 0 and 10' };\\n\\n\\t// If all checks pass, return the parsed and formatted JSON\\n\\treturn JSON.stringify(raw, null, 2);\\n})() \\n}}\"},{\"id\":\"\",\"name\":\"=aiRunIndex\",\"type\":\"number\",\"value\":\"={{ $node[\\\"AI Agent\\\"].runIndex }} \"}]}},\"typeVersion\":3.4},{\"id\":\"\",\"name\":\"Format Schema Error Prompt\",\"type\":\"n8n-nodes-base.set\",\"position\":[920,1020],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"\",\"name\":\"schemaErrorPrompt\",\"type\":\"string\",\"value\":\"=If you're seeing this message, it means your previous response did not follow the required output schema defined in your prompt:\\n\\n{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"alimentName\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"description\\\": \\\"The name of the food item, in English\\\"\\n    },\\n    \\\"averageCalories\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Average calories per 100g or standard portion (kcal)\\\"\\n    },\\n    \\\"proteins\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of protein per 100g or portion (grams)\\\"\\n    },\\n    \\\"carbohydrates\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Total amount of carbohydrates per 100g or portion (grams), including fiber and sugars\\\"\\n    },\\n    \\\"sugar\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of total sugars (subset of carbohydrates) per 100g or portion (grams)\\\"\\n    },\\n    \\\"fiber\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of dietary fiber (subset of carbohydrates) per 100g or portion (grams)\\\"\\n    },\\n    \\\"fat\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of fat per 100g or portion (grams)\\\"\\n    },\\n    \\\"sodium\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of sodium per 100g or portion (milligrams)\\\"\\n    },\\n    \\\"healthyScore\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"minimum\\\": 0,\\n      \\\"maximum\\\": 10,\\n      \\\"description\\\": \\\"A healthiness score from 0 (very unhealthy) to 10 (very healthy), based on nutritional guidelines\\\"\\n    }\\n  },\\n  \\\"required\\\": [\\n    \\\"alimentName\\\",\\n    \\\"averageCalories\\\",\\n    \\\"proteins\\\",\\n    \\\"carbohydrates\\\",\\n    \\\"sugar\\\",\\n    \\\"fiber\\\",\\n    \\\"fat\\\",\\n    \\\"sodium\\\",\\n    \\\"healthyScore\\\"\\n  ]\\n}\\n\\n\\nPlease revise your output to strictly match this structure.\\n\\nFor reference, the last user message was:\\n{{ $('When chat message received').item.json.chatInput }}\\n\\nAnd your response was:\\n{{ $('AI Agent').item.json.output }}\\n\\nThis does not conform to the expected schema. Please correct your output accordingly.\"},{\"id\":\"\",\"name\":\"sessionId\",\"type\":\"string\",\"value\":\"={{ $('When chat message received').item.json.sessionId }}\"},{\"id\":\"\",\"name\":\"chatInput\",\"type\":\"string\",\"value\":\"={{ $('When chat message received').item.json.chatInput }}\"}]}},\"typeVersion\":3.4},{\"id\":\"\",\"name\":\"Valid Schema Output\",\"type\":\"n8n-nodes-base.set\",\"position\":[1460,760],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"\",\"name\":\"nutritionalValues\",\"type\":\"object\",\"value\":\"={{ $json.output }}\"}]}},\"typeVersion\":3.4},{\"id\":\"\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[600,-260],\"parameters\":{\"color\":7,\"width\":520,\"height\":1140,\"content\":\"## Switch\\n\\n## ⚠️ Warning : 🔁 **Infinite loop risk**\\n\\nIf you **modify this node without understanding** the expressions inside, it can cause an infinite loop, which is **exactly what you don’t want** for your n8n instance, your results… or your API credits ($). 😉\\n\\nThe logic uses **$json.output.error !== undefined && $json.aiRunIndex < 3** to control retries.  \\nChanging this without adjusting the flow logic may cause endless retries or silent failures.\\n\\n\\n----\\n\\n## How it Works\\n\\nThis `Switch` node routes the data flow based on validation outcomes:\\n\\n### 🟥 `invalidSchema`\\n- **Condition:**  \\n  **{{ $json.output.error !== undefined && $json.aiRunIndex < 3 }}**\\n- **Purpose:**  \\n  Detects if there's an error in the output **and** the number of AI attempts (`aiRunIndex`) is less than 3.  \\n  Used to trigger a retry or a corrective step before giving up.\\nIf it gives up, the **Fallback route** with an error message will be used.\\n\\n### 🟩 `validSchema`\\n- **Condition:**  \\n  `{{ $json.output.alimentName }} exists`\\n- **Purpose:**  \\n  Validates that the `alimentName` field is present in the output, implying a successful extraction or transformation.\\n\\n### 🟨 Fallback (named `extra`)\\n- **Purpose:**  \\n  Any case not matching the above two will be routed here.  \\n  Useful for handling unexpected or unvalidated scenarios.\\n\\n---\\n\\n**Good practice:**  \\nBefore modifying this node, trace the flow downstream and ensure your logic won't bypass validation or introduce unintended retry loops.\\n\"},\"typeVersion\":1},{\"id\":\"\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-480,-160],\"parameters\":{\"color\":7,\"width\":500,\"height\":1040,\"content\":\"## AI Agent\\n\\n\\nThis node sets an **AI agent** to generate nutritional information based on a food name provided via `chatInput`.\\n\\n\\n---\\n\\n## How it works:\\n\\n- 💬 **Prompt definition:**\\n  The agent is instructed to behave like a nutrition expert. It must return a response **strictly in JSON format**, matching a predefined schema with fields like:\\n  - `alimentName`\\n  - `averageCalories`\\n  - `proteins`, `carbohydrates`, `sugar`, `fiber`, `fat`, `sodium`\\n  - `healthyScore` (from 0 to 10)\\n\\n\\nHowever, **structured output parser is not used here**, because the node tends to throw errors frequently when parsing is enforced. Instead, the output is manually validated in later steps.\\n\\n**Check the System Prompt** : it’s designed to **allow the AI Agent** to **receive an \\\"Error Prompt\\\"** if the response doesn’t follow the expected schema.\\n\\n\\n\\n```\\n⚠️ If you fail to produce output in the correct schema, the Schema Error Prompt below will contain an error message. You will need to follow the instructions it provides:\\n## Schema Error Prompt:\\n{{ $json.schemaErrorPrompt }}\\n```\\n-  **Error handling:**\\n  If the input is not a valid food, the agent must return:\\n  ```json\\n  {\\n    \\\"error\\\": \\\"invalid_input\\\",\\n    \\\"message\\\": \\\"The provided input does not appear to be a valid food item.\\\"\\n  }\\n\"},\"typeVersion\":1},{\"id\":\"\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[60,-160],\"parameters\":{\"color\":7,\"width\":500,\"height\":1040,\"content\":\"## Validate Output + Set `aiRunIndex`\\n\\nThis node **validates** the AI output to ensure it matches the expected nutrition schema,  \\nand sets a helper variable `aiRunIndex` for retry tracking.\\n\\nOf course, you'll need to **edit the IIFE that checks the schema** to match the structure you expect.  \\nIf you're not comfortable with coding, **OpenAI's o3 model does a great job helping with that**.\\n\\n\\n\\n----\\n\\n## What it does:\\n\\n- ✅ **Parses AI response** (if it's a string with ` ```json ` wrapper).\\n- ✅ **Validates structure**:\\n  - Checks presence of all required keys (e.g. `alimentName`, `averageCalories`, etc.).\\n  - Checks types (`string` for names, `number` for nutrition values).\\n  - Validates that `healthyScore` is between `0` and `10`.\\n\\n- ❌ **If anything fails**, it returns a structured error:\\n  - `invalid_json`, `missing_key`, `invalid_type`, or `invalid_range`.\\n\\n- 🔁 **Sets `aiRunIndex`** based on how many times the AI node has run (used later to limit retries).\\n\\n---\\n\\n**Note:**  \\nThis replaces a structured parser and gives full control over error handling without crashing the workflow.\"},\"typeVersion\":1},{\"id\":\"\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1160,360],\"parameters\":{\"color\":7,\"width\":700,\"height\":520,\"content\":\"## Valid Schema Output\\n\\n\\nThis node stores the **validated nutritional data** under a clean variable name: `nutritionalValues`.\\n\\n\\n---\\n\\n## What it does:\\n\\n- Takes the parsed and validated `output` from earlier steps.\\n- Assigns it to a new variable called `nutritionalValues` for easier access and downstream processing.\\n\\n---\\n\\n**Note:**  \\nAt this point, the data is assumed to be valid — all schema and type checks have already been performed.\\n\"},\"typeVersion\":1},{\"id\":\"\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1160,940],\"parameters\":{\"color\":7,\"width\":700,\"height\":600,\"content\":\"## Output Handling (Valid & Invalid Schema)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n## Set schemaValidationError & lastAgentOutput\\n- Stores the output of the node \\\"Validate Output + Set `aiRunIndex`\\\" in a variable called `schemaValidationError`.\\n- Stores the output of the node \\\"AI Agent\\\" in a variable called `lastAgentOutput`.\\n\\n## Set chat Output\\n- Constructs a user-facing message in the `output` field using the two previously stored variables.\\n- The message explains that a schema validation error occurred and provides the last response from the AI agent as fallback context.\\n\"},\"typeVersion\":1},{\"id\":\"\",\"name\":\"Set schemaValidationError & lastAgentOutput\",\"type\":\"n8n-nodes-base.set\",\"position\":[1280,1020],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"\",\"name\":\"schemaValidationError\",\"type\":\"string\",\"value\":\"={{ $('Validate Output + Set `aiRunIndex`').item.json.output }}\"},{\"id\":\"\",\"name\":\"lastAgentOutput\",\"type\":\"string\",\"value\":\"={{ $('AI Agent').item.json.output }}\"}]}},\"typeVersion\":3.4},{\"id\":\"\",\"name\":\"Set chat Output\",\"type\":\"n8n-nodes-base.set\",\"position\":[1640,1020],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"\",\"name\":\"output\",\"type\":\"string\",\"value\":\"=This output was sent because a schema validation error occurred:\\n\\n{{ $json.schemaValidationError }}\\n\\nHowever, here is the last AI agent response:\\n\\n{{ $json.lastAgentOutput }}\"}]}},\"typeVersion\":3.4},{\"id\":\"\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1580,-60],\"parameters\":{\"color\":5,\"width\":720,\"height\":940,\"content\":\"## Reliable Structured Output from AI Agent *Without* the Structured Output Parser - with OpenAI & Switch node\\n\\nThis workflow serves as a **solid foundation** when you need an **AI Agent to return output in a specific JSON schema**, without relying on the often-unreliable **Structured Output Parser**.\\n\\n## What It Does\\nThe example workflow takes a simple input (like a food item) and expects a JSON-formatted output containing its nutritional values.\\n\\n## Why Use This Instead of Structured Output Parser?\\n\\nThe built-in [Structured Output Parser](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparserstructured/common-issues/) node is known to be unreliable when working with AI Agents.\\n\\nWhile the **n8n documentation recommends using a “Basic LLM Chain”** followed by a **Structured Output Parser**, this alternative workflow **completely avoids using the Structured Output Parser node**.  \\nInstead, it implements a custom loop that manually validates the AI Agent's output.\\n\\nThis method has **proven especially reliable** with OpenAI's `gpt-4.1` series (`gpt-4.1`, `gpt-4.1-mini`, `gpt-4.1-nano`), which tend to **produce correctly structured JSON** on the first try, as long as the **System Prompt is well defined**.\\nIn this template, `gpt-4.1-nano` is set by default.\\n\\n### How It Works\\n\\nInstead of using the *Structured Output Parser*, this workflow loops the AI Agent through a manual schema validation process:\\n\\n- A **custom schema check** is performed after the AI Agent response.\\n- A **runIndex counter** tracks the number of retries.\\n- A **Switch node**:\\n  - If the output does **not** match the expected schema, it routes back to the AI Agent with an updated prompt asking it to return the correct format. The process allows up to **4 retries** to avoid infinite loops.\\n  - If the output **does** match the schema, it continues to a **Set node** that serves as chat response (you can customize this part to fit your use case).\\n\\n\\nThis approach ensures schema consistency, offers flexibility, and avoids the brittleness of the default parser.\\n\"},\"typeVersion\":1}],\"active\":false,\"pinData\":{},\"settings\":{\"callerPolicy\":\"\",\"executionOrder\":\"v1\",\"executionTimeout\":60},\"versionId\":\"\",\"connections\":{\"Switch\":{\"main\":[[{\"node\":\"Format Schema Error Prompt\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Valid Schema Output\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Set schemaValidationError & lastAgentOutput\",\"type\":\"main\",\"index\":0}]]},\"AI Agent\":{\"main\":[[{\"node\":\"Validate Output + Set `aiRunIndex`\",\"type\":\"main\",\"index\":0}]]},\"Simple Memory\":{\"ai_memory\":[[{\"node\":\"AI Agent\",\"type\":\"ai_memory\",\"index\":0}]]},\"OpenAI Chat Model\":{\"ai_languageModel\":[[{\"node\":\"AI Agent\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Format Schema Error Prompt\":{\"main\":[[{\"node\":\"AI Agent\",\"type\":\"main\",\"index\":0}]]},\"When chat message received\":{\"main\":[[{\"node\":\"AI Agent\",\"type\":\"main\",\"index\":0}]]},\"Validate Output + Set `aiRunIndex`\":{\"main\":[[{\"node\":\"Switch\",\"type\":\"main\",\"index\":0}]]},\"Set schemaValidationError & lastAgentOutput\":{\"main\":[[{\"node\":\"Set chat Output\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This workflow serves as a **solid foundation** when you need an **AI Agent to return output in a specific JSON schema** , without relying on the often-unreliable **Structured Output Parser**.\n\n## What It Does\n\nThe example workflow takes a simple input (like a food item) and expects a JSON-formatted output containing its nutritional values.\n\n## Why Use This Instead of Structured Output Parser?\n\nThe built-in [Structured Output Parser](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparserstructured/common-issues/) node is known to be unreliable when working with AI Agents.\n\nWhile the **n8n documentation recommends using a “Basic LLM Chain”** followed by a **Structured Output Parser** , this alternative workflow **completely avoids using the Structured Output Parser node**.  \nInstead, it implements a custom loop that manually validates the AI Agent's output.\n\nThis method has **proven especially reliable** with OpenAI's `gpt-4.1` series (`gpt-4.1`, `gpt-4.1-mini`, `gpt-4.1-nano`), which tend to **produce correctly structured JSON** on the first try, as long as the **System Prompt is well defined**.  \nIn this template, `gpt-4.1-nano` is set by default.\n\n### How It Works\n\nInstead of using the _Structured Output Parser_ , this workflow loops the AI Agent through a manual schema validation process:\n\n  * A **custom schema check** is performed after the AI Agent response.\n  * A **runIndex counter** tracks the number of retries.\n  * A **Switch node** : \n    * If the output does **not** match the expected schema, it routes back to the AI Agent with an updated prompt asking it to return the correct format. The process allows up to **4 retries** to avoid infinite loops.\n    * If the output **does** match the schema, it continues to a **Set node** that serves as chat response (you can customize this part to fit your use case).\n\n\n\nThis approach ensures schema consistency, offers flexibility, and avoids the brittleness of the default parser.\n",
  "crawled_at": "2025-05-27T23:03:13.395631",
  "readme_zh": "该工作流为需要**AI代理以特定JSON格式返回输出**的场景提供了**可靠基础**，且无需依赖时常不稳定的**结构化输出解析器**。\n\n## 功能说明\n\n示例工作流接收简单输入（如食物名称），并预期输出包含其营养成分值的JSON格式数据。\n\n## 为何选择此方案而非结构化输出解析器？\n\n内置的[结构化输出解析器](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparserstructured/common-issues/)节点在与AI代理配合时存在可靠性问题。\n\n虽然**n8n官方文档建议使用\"基础LLM链\"配合结构化输出解析器**，但本替代方案**彻底规避了结构化输出解析器节点**，转而通过自定义循环手动验证AI代理输出。\n\n该方法经实证与OpenAI的`gpt-4.1`系列（`gpt-4.1`/`gpt-4.1-mini`/`gpt-4.1-nano`）配合**表现尤为可靠**——只要**系统提示定义明确**，这些模型通常能**首次尝试即生成结构正确的JSON**。本模板默认使用`gpt-4.1-nano`。\n\n### 实现原理\n\n工作流通过以下手动校验流程替代结构化输出解析器：\n\n* AI代理响应后执行**自定义模式校验**\n* **runIndex计数器**记录重试次数\n* **条件判断节点**：\n  * 若输出**不符合**预期结构，则携带修正提示将请求重新路由至AI代理（最多**4次重试**以避免死循环）\n  * 若输出**符合**结构要求，则进入**设置节点**作为聊天响应（可根据实际需求自定义）\n\n此方案在确保数据结构一致性的同时，兼具灵活性，有效规避了默认解析器的脆弱性问题。",
  "title_zh": "可靠的AI代理输出 无需结构化输出解析器 - 结合OpenAI与Switch技术",
  "publish_date_zh": "最近更新于一天前",
  "workflow_json_zh": "{\n  \"id\": \"\",\n  \"meta\": {\n    \"instanceId\": \"\"\n  },\n  \"name\": \"Reliable Structured Output from AI Agent Without the Structured Output Parser - with OpenAI & Switch node\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"\",\n      \"name\": \"AI Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        -400,\n        760\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.chatInput }}\",\n        \"options\": {\n          \"maxIterations\": 10,\n          \"systemMessage\": \"=You are a helpful assistant specialized in nutrition.  \\nYour task is to provide accurate nutritional information for a given food item.  \\nYou must return your answer strictly in the form of a JSON object matching the following schema:\\n\\n{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"alimentName\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"description\\\": \\\"The name of the food item, in English\\\"\\n    },\\n    \\\"averageCalories\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Average calories per 100g or standard portion (kcal)\\\"\\n    },\\n    \\\"proteins\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of protein per 100g or portion (grams)\\\"\\n    },\\n    \\\"carbohydrates\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Total amount of carbohydrates per 100g or portion (grams), including fiber and sugars\\\"\\n    },\\n    \\\"sugar\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of total sugars (subset of carbohydrates) per 100g or portion (grams)\\\"\\n    },\\n    \\\"fiber\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of dietary fiber (subset of carbohydrates) per 100g or portion (grams)\\\"\\n    },\\n    \\\"fat\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of fat per 100g or portion (grams)\\\"\\n    },\\n    \\\"sodium\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of sodium per 100g or portion (milligrams)\\\"\\n    },\\n    \\\"healthyScore\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"minimum\\\": 0,\\n      \\\"maximum\\\": 10,\\n      \\\"description\\\": \\\"A healthiness score from 0 (very unhealthy) to 10 (very healthy), based on nutritional guidelines\\\"\\n    }\\n  },\\n  \\\"required\\\": [\\n    \\\"alimentName\\\",\\n    \\\"averageCalories\\\",\\n    \\\"proteins\\\",\\n    \\\"carbohydrates\\\",\\n    \\\"sugar\\\",\\n    \\\"fiber\\\",\\n    \\\"fat\\\",\\n    \\\"sodium\\\",\\n    \\\"healthyScore\\\"\\n  ]\\n}\\n\\n\\nIf the user input is not a valid food item, or if you are unsure whether it is a real food, then instead return:\\n\\n{\\n  \\\"error\\\": \\\"invalid_input\\\",\\n  \\\"message\\\": \\\"The provided input does not appear to be a valid food item.\\\"\\n}\\n\\n----\\n\\n⚠️ If you fail to produce output in the correct schema, the Schema Error Prompt below will contain an error message. You will need to follow the instructions it provides:\\n\\n## Schema Error Prompt:\\n\\n{{ $json.schemaErrorPrompt }}\\n\\n\",\n          \"returnIntermediateSteps\": true\n        },\n        \"promptType\": \"define\"\n      },\n      \"executeOnce\": false,\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"When chat message received\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",\n      \"position\": [\n        -800,\n        760\n      ],\n      \"webhookId\": \"\",\n      \"parameters\": {\n        \"mode\": \"webhook\",\n        \"public\": true,\n        \"options\": {\n          \"responseMode\": \"responseNode\"\n        },\n        \"authentication\": \"basicAuth\"\n      },\n      \"credentials\": {\n        \"httpBasicAuth\": {\n          \"id\": \"\",\n          \"name\": \"\"\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        -400,\n        920\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"=gpt-4.1-nano\"\n        },\n        \"options\": {\n          \"temperature\": 0.8,\n          \"responseFormat\": \"json_object\"\n        }\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"\",\n          \"name\": \"OpenAi Connection\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"Simple Memory\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\n      \"position\": [\n        -260,\n        920\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1.3\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"Switch\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        860,\n        760\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"invalidSchema\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"\",\n                    \"operator\": {\n                      \"type\": \"boolean\",\n                      \"operation\": \"true\",\n                      \"singleValue\": true\n                    },\n                    \"leftValue\": \"={{ $json.output.error !== undefined && $json.aiRunIndex < 3 }}\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"validSchema\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"exists\",\n                      \"singleValue\": true\n                    },\n                    \"leftValue\": \"={{ $json.output.alimentName }}\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {\n          \"fallbackOutput\": \"extra\"\n        }\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"Validate Output + Set `aiRunIndex`\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        260,\n        760\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"\",\n              \"name\": \"output\",\n              \"type\": \"object\",\n              \"value\": \"={{ \\n(() => {\\n\\tlet raw = $json.output;\\n\\n\\tif (typeof raw === 'string') {\\n\\t\\traw = raw\\n\\t\\t\\t.replace(/^\\\\s*```json/i, '')\\n\\t\\t\\t.replace(/```$/i, '')\\n\\t\\t\\t.trim();\\n\\t\\ttry { raw = JSON.parse(raw); }\\n\\t\\tcatch { return { error: 'invalid_json' }; }\\n\\t}\\n\\n\\t// Allow alternative valid response when input is not a valid food item\\n\\tif (\\n\\t\\traw.error === 'invalid_input' &&\\n\\t\\traw.message === 'The provided input does not appear to be a valid food item.'\\n\\t) {\\n\\t\\treturn JSON.stringify(raw, null, 2);\\n\\t}\\n\\n\\t// Check required keys\\n\\tconst requiredKeys = [\\n\\t\\t'alimentName',\\n\\t\\t'averageCalories',\\n\\t\\t'proteins',\\n\\t\\t'carbohydrates',\\n\\t\\t'sugar',\\n\\t\\t'fiber',\\n\\t\\t'fat',\\n\\t\\t'sodium',\\n\\t\\t'healthyScore'\\n\\t];\\n\\n\\tfor (const key of requiredKeys) {\\n\\t\\tif (!(key in raw)) {\\n\\t\\t\\treturn { error: 'missing_key', key };\\n\\t\\t}\\n\\t}\\n\\n\\t// Type checks\\n\\tif (typeof raw.alimentName !== 'string')\\n\\t\\treturn { error: 'invalid_type', key: 'alimentName', expected: 'string' };\\n\\n\\tif (typeof raw.averageCalories !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'averageCalories', expected: 'number' };\\n\\n\\tif (typeof raw.proteins !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'proteins', expected: 'number' };\\n\\n\\tif (typeof raw.carbohydrates !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'carbohydrates', expected: 'number' };\\n\\n\\tif (typeof raw.sugar !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'sugar', expected: 'number' };\\n\\n\\tif (typeof raw.fiber !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'fiber', expected: 'number' };\\n\\n\\tif (typeof raw.fat !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'fat', expected: 'number' };\\n\\n\\tif (typeof raw.sodium !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'sodium', expected: 'number' };\\n\\n\\tif (typeof raw.healthyScore !== 'number')\\n\\t\\treturn { error: 'invalid_type', key: 'healthyScore', expected: 'number' };\\n\\n\\tif (raw.healthyScore < 0 || raw.healthyScore > 10)\\n\\t\\treturn { error: 'invalid_range', key: 'healthyScore', expected: 'number between 0 and 10' };\\n\\n\\t// If all checks pass, return the parsed and formatted JSON\\n\\treturn JSON.stringify(raw, null, 2);\\n})() \\n}}\"\n            },\n            {\n              \"id\": \"\",\n              \"name\": \"=aiRunIndex\",\n              \"type\": \"number\",\n              \"value\": \"={{ $node[\\\"AI Agent\\\"].runIndex }} \"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"Format Schema Error Prompt\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        920,\n        1020\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"\",\n              \"name\": \"schemaErrorPrompt\",\n              \"type\": \"string\",\n              \"value\": \"=If you're seeing this message, it means your previous response did not follow the required output schema defined in your prompt:\\n\\n{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"alimentName\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"description\\\": \\\"The name of the food item, in English\\\"\\n    },\\n    \\\"averageCalories\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Average calories per 100g or standard portion (kcal)\\\"\\n    },\\n    \\\"proteins\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of protein per 100g or portion (grams)\\\"\\n    },\\n    \\\"carbohydrates\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Total amount of carbohydrates per 100g or portion (grams), including fiber and sugars\\\"\\n    },\\n    \\\"sugar\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of total sugars (subset of carbohydrates) per 100g or portion (grams)\\\"\\n    },\\n    \\\"fiber\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of dietary fiber (subset of carbohydrates) per 100g or portion (grams)\\\"\\n    },\\n    \\\"fat\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of fat per 100g or portion (grams)\\\"\\n    },\\n    \\\"sodium\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"description\\\": \\\"Amount of sodium per 100g or portion (milligrams)\\\"\\n    },\\n    \\\"healthyScore\\\": {\\n      \\\"type\\\": \\\"number\\\",\\n      \\\"minimum\\\": 0,\\n      \\\"maximum\\\": 10,\\n      \\\"description\\\": \\\"A healthiness score from 0 (very unhealthy) to 10 (very healthy), based on nutritional guidelines\\\"\\n    }\\n  },\\n  \\\"required\\\": [\\n    \\\"alimentName\\\",\\n    \\\"averageCalories\\\",\\n    \\\"proteins\\\",\\n    \\\"carbohydrates\\\",\\n    \\\"sugar\\\",\\n    \\\"fiber\\\",\\n    \\\"fat\\\",\\n    \\\"sodium\\\",\\n    \\\"healthyScore\\\"\\n  ]\\n}\\n\\n\\nPlease revise your output to strictly match this structure.\\n\\nFor reference, the last user message was:\\n{{ $('When chat message received').item.json.chatInput }}\\n\\nAnd your response was:\\n{{ $('AI Agent').item.json.output }}\\n\\nThis does not conform to the expected schema. Please correct your output accordingly.\"\n            },\n            {\n              \"id\": \"\",\n              \"name\": \"sessionId\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('When chat message received').item.json.sessionId }}\"\n            },\n            {\n              \"id\": \"\",\n              \"name\": \"chatInput\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('When chat message received').item.json.chatInput }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"Valid Schema Output\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1460,\n        760\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"\",\n              \"name\": \"nutritionalValues\",\n              \"type\": \"object\",\n              \"value\": \"={{ $json.output }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        600,\n        -260\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 520,\n        \"height\": 1140,\n        \"content\": \"## 开关节点\\n\\n## ⚠️ 警告：🔄 **无限循环风险**\\n\\n若**未理解内部表达式就修改此节点**，可能导致无限循环，这将对您的n8n实例、运行结果...或API调用额度（$）造成**灾难性后果**。😉\\n\\n当前逻辑采用 **$json.output.error !== undefined && $json.aiRunIndex < 3** 控制重试机制。  \\n盲目修改可能引发无止境重试或静默失败。\\n\\n----\\n\\n## 运作原理\\n\\n本`Switch`节点根据验证结果路由数据流：\\n\\n### 🟥 `无效结构`\\n- **条件：**  \\n  **{{ $json.output.error !== undefined && $json.aiRunIndex < 3 }}**\\n- **作用：**  \\n  当输出含错误**且**AI尝试次数(`aiRunIndex`)未达3次时触发。  \\n  用于在最终放弃前发起重试或修正流程。  \\n  若放弃处理，将转至含错误信息的**备用路由**。\\n\\n### 🟩 `有效结构`\\n- **条件：**  \\n  `{{ $json.output.alimentName }} 存在`\\n- **作用：**  \\n  验证输出中存在`alimentName`字段，表明数据提取/转换成功。\\n\\n### 🟨 备用路由（命名为`extra`）\\n- **作用：**  \\n  处理所有不符合上述条件的情况。  \\n  适用于处理意外或未验证的场景。\\n\\n---\\n\\n**最佳实践：**  \\n修改前请向下追踪流程，确保新逻辑不会绕过验证或引发非预期重试循环。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -480,\n        -160\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 500,\n        \"height\": 1040,\n        \"content\": \"## AI代理\\n\\n\\n该节点设置了一个**AI代理**，用于根据通过`chatInput`提供的食物名称生成营养信息。\\n\\n\\n---\\n\\n## 工作原理:\\n\\n- 💬 **提示词定义:**\\n  该代理被设定为营养专家角色。它必须**严格以JSON格式**返回响应，并匹配预定义的字段结构，包括:\\n  - `食物名称`\\n  - `平均卡路里`\\n  - `蛋白质`、`碳水化合物`、`糖分`、`膳食纤维`、`脂肪`、`钠含量`\\n  - `健康评分`（0到10分制）\\n\\n\\n但此处**未使用结构化输出解析器**，因为强制解析时该节点容易频繁报错。后续步骤将手动验证输出内容。\\n\\n**查看系统提示词**：其设计允许**当响应不符合预期结构时**，AI代理将收到\\\"错误提示\\\"。\\n\\n```\\n⚠️ 若您未能生成符合结构的输出，下方的结构错误提示将包含错误信息。您需要按照其中的指示操作:\\n## 结构错误提示:\\n{{ $json.schemaErrorPrompt }}\\n```\\n-  **错误处理:**\\n  若输入不是有效食物，代理必须返回:\\n  ```json\\n  {\\n    \\\"error\\\": \\\"无效输入\\\",\\n    \\\"message\\\": \\\"提供的输入似乎不是有效的食物项。\\\"\\n  }\\n  ```\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        60,\n        -160\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 500,\n        \"height\": 1040,\n        \"content\": \"## 验证输出 + 设置 `aiRunIndex`\\n\\n该节点用于**验证**AI输出是否符合预期的营养数据架构，  \\n并设置辅助变量`aiRunIndex`以追踪重试次数。\\n\\n当然，您需要**修改检查架构的IIFE函数**以匹配您预期的数据结构。  \\n若您不熟悉编码，**OpenAI的o3模型能很好地协助完成这项工作**。\\n\\n----\\n\\n## 功能说明:\\n\\n- ✅ **解析AI响应**（若为带` ```json `包装的字符串）\\n- ✅ **验证数据结构**:\\n  - 检查必备字段是否存在（如`alimentName`, `averageCalories`等）\\n  - 校验类型（名称需为`string`类型，营养值需为`number`类型）\\n  - 确保`healthyScore`分值在`0`到`10`之间\\n\\n- ❌ **若验证失败**，将返回结构化错误:\\n  - 包括`invalid_json`（无效JSON）、`missing_key`（缺失字段）、`invalid_type`（类型错误）或`invalid_range`（超出范围）\\n\\n- 🔁 **设置`aiRunIndex`**  \\n  根据AI节点的运行次数赋值（用于后续限制重试次数）\\n\\n---\\n\\n**注意:**  \\n此方案替代了结构化解析器，可在不中断工作流的前提下实现完整的错误处理控制。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1160,\n        360\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 700,\n        \"height\": 520,\n        \"content\": \"## 有效模式输出\\n\\n\\n该节点将**经过验证的营养数据**存储在一个清晰的变量名下：`nutritionalValues`（营养数值）。\\n\\n---\\n\\n## 功能说明：\\n\\n- 接收前期步骤中已解析并验证的`output`数据  \\n- 将其赋值给新变量`nutritionalValues`，便于后续访问和处理  \\n\\n---\\n\\n**注意：**  \\n至此阶段数据已被视为有效——所有模式校验和类型检查均已完成。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1160,\n        940\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 700,\n        \"height\": 600,\n        \"content\": \"## 输出处理（有效与无效模式）\\n\\n## 设置schemaValidationError和lastAgentOutput\\n- 将节点\\\"验证输出+设置`aiRunIndex`\\\"的输出存储在名为`schemaValidationError`的变量中\\n- 将节点\\\"AI代理\\\"的输出存储在名为`lastAgentOutput`的变量中\\n\\n## 设置聊天输出\\n- 使用上述两个变量在`output`字段中构建面向用户的消息\\n- 该消息会说明发生了模式验证错误，并提供AI代理的最后响应作为备用上下文\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"Set schemaValidationError & lastAgentOutput\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1280,\n        1020\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"\",\n              \"name\": \"schemaValidationError\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Validate Output + Set `aiRunIndex`').item.json.output }}\"\n            },\n            {\n              \"id\": \"\",\n              \"name\": \"lastAgentOutput\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('AI Agent').item.json.output }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"Set chat Output\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1640,\n        1020\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"\",\n              \"name\": \"output\",\n              \"type\": \"string\",\n              \"value\": \"=This output was sent because a schema validation error occurred:\\n\\n{{ $json.schemaValidationError }}\\n\\nHowever, here is the last AI agent response:\\n\\n{{ $json.lastAgentOutput }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1580,\n        -60\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 720,\n        \"height\": 940,\n        \"content\": \"## 无需结构化输出解析器实现AI代理的可靠结构化输出 - 基于OpenAI与Switch节点方案\\n\\n本工作流为需要**AI代理返回特定JSON格式输出**的场景提供了**稳健的基础方案**，且完全规避了**结构化输出解析器**的不可靠性问题。\\n\\n## 功能说明\\n示例工作流接收简单输入（如食物名称），要求AI返回包含该食物营养成分的标准化JSON格式数据。\\n\\n## 为何选择本方案而非结构化输出解析器？\\n\\n内置的[结构化输出解析器](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparserstructured/common-issues/)节点在与AI代理配合时存在稳定性缺陷。\\n\\n虽然**n8n官方文档建议采用\\\"基础LLM链\\\"配合结构化输出解析器**，但本方案**彻底弃用结构化输出解析器节点**，转而通过自定义循环逻辑实现人工验证机制。\\n\\n该方法经实证在OpenAI的`gpt-4.1`系列模型（含`gpt-4.1`/`gpt-4.1-mini`/`gpt-4.1-nano`）上表现尤为可靠——只要**系统提示词定义得当**，这些模型通常能**首次响应即生成合规JSON结构**。本模板默认采用`gpt-4.1-nano`模型。\\n\\n### 实现原理\\n\\n通过以下手动校验流程替代结构化输出解析器：\\n\\n- AI代理响应后执行**自定义格式校验**\\n- **runIndex计数器**记录重试次数\\n- **Switch节点**进行逻辑分流：\\n  - 若输出**不符合**预期结构，则携带格式修正要求重新提交至AI代理（最多**4次重试**避免死循环）\\n  - 若输出**符合**结构要求，则进入**Set节点**生成最终响应（可根据实际需求自定义后续处理）\\n\\n该方案在确保数据结构一致性的同时，提供了更高灵活性，有效规避了默认解析器的脆弱性问题。\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"callerPolicy\": \"\",\n    \"executionOrder\": \"v1\",\n    \"executionTimeout\": 60\n  },\n  \"versionId\": \"\",\n  \"connections\": {\n    \"Switch\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Format Schema Error Prompt\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Valid Schema Output\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Set schemaValidationError & lastAgentOutput\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"AI Agent\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Validate Output + Set `aiRunIndex`\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Simple Memory\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Format Schema Error Prompt\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When chat message received\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Validate Output + Set `aiRunIndex`\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Switch\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set schemaValidationError & lastAgentOutput\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set chat Output\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}