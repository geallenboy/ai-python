{
  "url": "https://n8n.io/workflows/3436-send-links-from-telegram-channel-to-hoarder-and-readeck/",
  "title": "Send links from Telegram Channel to Hoarder and Readeck",
  "author": "Sherlockes",
  "publish_date": "Last update 19 days ago",
  "publish_date_absolute": "2025-05-07",
  "categories": [
    {
      "name": "Other"
    }
  ],
  "workflow_json": "{\"id\":\"Gd4MsAZGnSGfBwaw\",\"meta\":{\"instanceId\":\"8fb543b511022c43ab705107ba101545bb8b0fdb9bd6ebc4cca28dc9591a036e\"},\"name\":\"Telegram channel to Readeck & Hoarder\",\"tags\":[],\"nodes\":[{\"id\":\"6e50d52e-8b9e-4c92-82a1-af366c7a2ccf\",\"name\":\"Schedule Trigger\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[-440,-700],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"hours\"}]}},\"typeVersion\":1.2},{\"id\":\"bb7430a2-a7b7-47f2-9ba3-a3e43c8da004\",\"name\":\"Split Out\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[-100,-120],\"parameters\":{\"options\":{},\"fieldToSplitOut\":\"bookmarks\"},\"typeVersion\":1},{\"id\":\"922aeb0b-29b1-46c6-9b18-76c02eca5a9e\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-460,-480],\"parameters\":{\"width\":1120,\"height\":220,\"content\":\"## Readeck\"},\"typeVersion\":1},{\"id\":\"64d4ca0b-2c16-441e-9461-5707be877132\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-220,-740],\"parameters\":{\"width\":480,\"height\":200,\"content\":\"## Telegram\"},\"typeVersion\":1},{\"id\":\"13ae24ec-ac11-470a-bad4-76403861f632\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-460,-180],\"parameters\":{\"width\":1120,\"height\":220,\"content\":\"## Hoarder\"},\"typeVersion\":1},{\"id\":\"c606f434-d37b-4406-997a-1e7f17319281\",\"name\":\"not_saved_links_hd\",\"type\":\"n8n-nodes-base.code\",\"position\":[260,-120],\"parameters\":{\"jsCode\":\"const linksCanalItems = $('channel_links_tg').all();\\nconst saved_links_items = $('saved_links_hd').all();\\n\\n// Extract links\\nconst saved_links = new Set(\\n    saved_links_items.map(item => String(item.json.content.url))\\n);\\n\\n// Filter\\nconst filteredLinks = linksCanalItems.filter(item => {\\n    return !saved_links.has(String(item.json.url));\\n});\\n\\nreturn filteredLinks;\\n\\n\\n\\n\\n\\n\\n\\n\\n\"},\"typeVersion\":2},{\"id\":\"d0f61836-798c-4835-ae8f-8f184b6720ed\",\"name\":\"not_saved_links_rd\",\"type\":\"n8n-nodes-base.code\",\"position\":[260,-420],\"parameters\":{\"jsCode\":\"const linksCanalItems = $('channel_links_tg').all();\\nconst saved_links_items = $('saved_links_rd').all();\\n\\n// Extract urls\\nconst saved_urls = new Set(\\n    saved_links_items.map(item => String(item.json.url))\\n);\\n\\n// Filter\\nconst filteredLinks = linksCanalItems.filter(item => {\\n    return !saved_urls.has(String(item.json.url));\\n});\\n\\nreturn filteredLinks;\\n\\n\\n\\n\\n\\n\\n\\n\\n\"},\"typeVersion\":2},{\"id\":\"f33349a7-361a-4b0f-844b-1ca5ded2aeab\",\"name\":\"saved_links_rd\",\"type\":\"n8n-nodes-base.set\",\"position\":[80,-420],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"8c6f3806-0fb8-4c76-a0bc-19b588717430\",\"name\":\"id\",\"type\":\"string\",\"value\":\"={{ $json.id }}\"},{\"id\":\"ef41cba3-2844-479c-9467-6b94ae24c98b\",\"name\":\"url\",\"type\":\"string\",\"value\":\"={{ $json.url }}\"}]}},\"typeVersion\":3.4},{\"id\":\"63d45b19-e878-418e-8eb5-c16b50af9669\",\"name\":\"save_link_rd\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[460,-420],\"parameters\":{\"url\":\"={{$env.READECK_SERVER}}/api/bookmarks\",\"method\":\"POST\",\"options\":{},\"sendBody\":true,\"sendHeaders\":true,\"bodyParameters\":{\"parameters\":[{\"name\":\"url\",\"value\":\"={{ $json.url }}\"}]},\"headerParameters\":{\"parameters\":[{\"name\":\"accept\",\"value\":\"application/json\"},{\"name\":\"authorization\",\"value\":\"=Bearer {{$env.READECK_API_KEY}}\"}]}},\"typeVersion\":4.2},{\"id\":\"9416a858-1a25-4c3e-a49e-153118c268a7\",\"name\":\"save_link_hd\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[460,-120],\"parameters\":{\"url\":\"={{$env.HOARDER_SERVER}}/api/v1/bookmarks\",\"method\":\"POST\",\"options\":{},\"sendBody\":true,\"sendHeaders\":true,\"bodyParameters\":{\"parameters\":[{\"name\":\"type\",\"value\":\"link\"},{\"name\":\"url\",\"value\":\"={{ $json.url }}\"}]},\"headerParameters\":{\"parameters\":[{\"name\":\"Authorization\",\"value\":\"=Bearer {{$env.HOARDER_API_KEY}}\"}]}},\"typeVersion\":4.2},{\"id\":\"13693467-cd75-4774-9072-832419606ab2\",\"name\":\"get_links_rd\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-280,-420],\"parameters\":{\"url\":\"={{$env.READECK_SERVER}}/api/bookmarks\",\"options\":{},\"sendHeaders\":true,\"headerParameters\":{\"parameters\":[{\"name\":\"accept\",\"value\":\"application/json\"},{\"name\":\"authorization\",\"value\":\"=Bearer {{$env.READECK_API_KEY}}\"}]}},\"typeVersion\":4.2,\"alwaysOutputData\":true},{\"id\":\"e4ed315d-d065-425a-b30d-eca1509670cc\",\"name\":\"get_links_hd\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-280,-120],\"parameters\":{\"url\":\"={{$env.HOARDER_SERVER}}/api/v1/bookmarks\",\"options\":{},\"sendHeaders\":true,\"headerParameters\":{\"parameters\":[{\"name\":\"Authorization\",\"value\":\"=Bearer {{$env.HOARDER_API_KEY}}\"}]}},\"typeVersion\":4.2,\"alwaysOutputData\":true},{\"id\":\"f54d9a4d-f00b-41bf-988a-8920d0046424\",\"name\":\"saved_links_hd\",\"type\":\"n8n-nodes-base.set\",\"position\":[80,-120],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"b07ce8e5-0b67-4c9c-831a-7a52f92f5744\",\"name\":\"content.url\",\"type\":\"string\",\"value\":\"={{ $json.content.url }}\"}]}},\"typeVersion\":3.4},{\"id\":\"d4e83b9d-5988-46f4-b853-86daec274dba\",\"name\":\"channel_links_tg\",\"type\":\"n8n-nodes-base.code\",\"position\":[120,-700],\"parameters\":{\"jsCode\":\"// Define the chatId from the environment variable\\nconst chatId = parseInt($env.TG_SHERLINK_ID, 10);\\n// Access the \\\"result\\\" field from the previous node's output\\nconst updates = $node[\\\"channel_items_tg\\\"].json[\\\"result\\\"];\\n// Check if \\\"result\\\" is an array\\nif (!Array.isArray(updates)) {\\n  return []; // Return empty if there are no messages\\n}\\n// Filter and process the messages\\nconst filteredUpdates = updates\\n  .map(update => {\\n    // Ensure message from the specified channel\\n    if (update.channel_post && update.channel_post.chat && update.channel_post.chat.id === chatId) {\\n      return {\\n        id: update.channel_post.message_id,\\n        url: update.channel_post.text\\n      };\\n    }\\n    return null;\\n  })\\n  \\n  .filter(item => item !== null) // Filter nulls\\n  .filter(item => {\\n    // Filter only with hyperlink in text\\n    const text = item.url || \\\"\\\"; // Defined text\\n    return /https?:\\\\/\\\\/[^\\\\s]+/.test(text); // hyperlink\\n  });\\n// Convert each array element into an individual item\\nreturn filteredUpdates.map(update => ({ json: update }));\\n\"},\"typeVersion\":2,\"alwaysOutputData\":false},{\"id\":\"ca306aed-e682-4c35-a257-3b65bcfde895\",\"name\":\"channel_items_tg\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-80,-700],\"parameters\":{\"url\":\"=https://api.telegram.org/bot{{$env.TG_SHERLINK_BOT_TOKEN}}/getUpdates\",\"options\":{},\"sendQuery\":true,\"queryParameters\":{\"parameters\":[{}]}},\"typeVersion\":4.2}],\"active\":true,\"pinData\":{},\"settings\":{\"callerPolicy\":\"workflowsFromSameOwner\",\"executionOrder\":\"v1\"},\"versionId\":\"85dd3731-0772-4b8b-b828-ae6a034d5419\",\"connections\":{\"Split Out\":{\"main\":[[{\"node\":\"saved_links_hd\",\"type\":\"main\",\"index\":0}]]},\"get_links_hd\":{\"main\":[[{\"node\":\"Split Out\",\"type\":\"main\",\"index\":0}]]},\"get_links_rd\":{\"main\":[[{\"node\":\"saved_links_rd\",\"type\":\"main\",\"index\":0}]]},\"save_link_hd\":{\"main\":[[]]},\"save_link_rd\":{\"main\":[[]]},\"saved_links_hd\":{\"main\":[[{\"node\":\"not_saved_links_hd\",\"type\":\"main\",\"index\":0}]]},\"saved_links_rd\":{\"main\":[[{\"node\":\"not_saved_links_rd\",\"type\":\"main\",\"index\":0}]]},\"Schedule Trigger\":{\"main\":[[{\"node\":\"channel_items_tg\",\"type\":\"main\",\"index\":0}]]},\"channel_items_tg\":{\"main\":[[{\"node\":\"channel_links_tg\",\"type\":\"main\",\"index\":0}]]},\"channel_links_tg\":{\"main\":[[{\"node\":\"get_links_rd\",\"type\":\"main\",\"index\":0},{\"node\":\"get_links_hd\",\"type\":\"main\",\"index\":0}]]},\"not_saved_links_hd\":{\"main\":[[{\"node\":\"save_link_hd\",\"type\":\"main\",\"index\":0}]]},\"not_saved_links_rd\":{\"main\":[[{\"node\":\"save_link_rd\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "### What this template is made for:\n\nI have a personal Telegram channel and a bot inside it where I save interesting links that I want to save or read later. The idea is that n8n will take care of reading the new links added to this channel and send them, through the corresponding API, to the Hoarder and Readeck installations.\n\n### How it works\n\n  * Since my server where n8n runs is not always on, a \"Schedule Trigger\" will be responsible for checking every so often if there is any new content in the Telegram channel where I store the links. This request is made through \"http request\" and the Telegram API.\n  * Next, a code block is responsible for filtering out everything that is not a hyperlink.  \nAt this point, the flow splits into two so that parallel and similar processes are performed for Hoarder and Readeck.\n  * The corresponding API is accessed to get a list of all the links saved in the corresponding service.\n  * A code block is responsible for filtering the list of hyperlinks previously obtained from Telegram so that only those that are not already saved in the service continue.\n  * Finally, another \"Http Request\" node is responsible for using the service API to save the link in the corresponding service.\n\n\n\n### Configuration instructions\n\nThe template makes use of the environment variables that I have declared in the n8n \"docker-compose.yml\" file through an external \".env\" file. These are the variables I use:\n    \n    \n    # Telegram Bot Token Sherlink\n    TG_SHERLINK_BOT_TOKEN=XXXXXXXX:XXXXXXXXXXXXXXXX\n    # Id Telegram Channel Sherlink\n    TG_SHERLINK_ID=-XXXXXXXXXXXXX\n    # Readeck server\n    READECK_SERVER=http://readeck.midomain.com\n    READECK_API_KEY=xxxxxxxxxxxxx\n    # Hoarder server\n    HOARDER_SERVER=http://hoarder.midomain.com\n    HOARDER_API_KEY=xxxxxxxxxxxxxx\n    \n\nCreated in 1.85.4 n8n version\n",
  "crawled_at": "2025-05-26T04:28:58.712154",
  "readme_zh": "### 此模板用途说明：\n\n我拥有一个私人Telegram频道及内置机器人，用于收藏待阅或需保存的趣味链接。该模板通过n8n自动化流程实现以下功能：实时监测频道新增链接，并通过对应API将链接同步至Hoarder与Readeck应用。\n\n### 运作原理\n\n* **定时触发检测**：由于运行n8n的服务器并非持续在线，\"计划触发器\"会定时通过Telegram API发起HTTP请求，检查存储链接的频道是否有新内容。\n* **链接过滤**：代码块负责筛除非超链接内容，随后流程分叉为两条并行路径，分别处理Hoarder与Readeck的同步操作。\n* **数据比对**：调用各服务API获取已存链接列表，通过代码块比对Telegram提取的新链接，仅保留未收录条目。\n* **最终存储**：通过HTTP请求节点调用服务API，将筛选后的链接存入对应系统。\n\n### 配置指南\n\n本模板通过n8n的docker-compose.yml引用外部.env文件配置环境变量，具体参数如下：\n\n```plaintext\n# Telegram机器人令牌\nTG_SHERLINK_BOT_TOKEN=XXXXXXXX:XXXXXXXXXXXXXXXX\n# Telegram频道ID\nTG_SHERLINK_ID=-XXXXXXXXXXXXX\n# Readeck服务配置\nREADECK_SERVER=http://readeck.midomain.com\nREADECK_API_KEY=xxxxxxxxxxxxx\n# Hoarder服务配置\nHOARDER_SERVER=http://hoarder.midomain.com\nHOARDER_API_KEY=xxxxxxxxxxxxxx\n```\n\n（基于n8n 1.85.4版本创建）",
  "title_zh": "将Telegram频道中的链接发送至Hoarder和Readeck",
  "publish_date_zh": "最后更新于19天前",
  "workflow_json_zh": "{\n  \"id\": \"Gd4MsAZGnSGfBwaw\",\n  \"meta\": {\n    \"instanceId\": \"8fb543b511022c43ab705107ba101545bb8b0fdb9bd6ebc4cca28dc9591a036e\"\n  },\n  \"name\": \"Telegram channel to Readeck & Hoarder\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"6e50d52e-8b9e-4c92-82a1-af366c7a2ccf\",\n      \"name\": \"Schedule Trigger\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [\n        -440,\n        -700\n      ],\n      \"parameters\": {\n        \"rule\": {\n          \"interval\": [\n            {\n              \"field\": \"hours\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"bb7430a2-a7b7-47f2-9ba3-a3e43c8da004\",\n      \"name\": \"Split Out\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        -100,\n        -120\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldToSplitOut\": \"bookmarks\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"922aeb0b-29b1-46c6-9b18-76c02eca5a9e\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -460,\n        -480\n      ],\n      \"parameters\": {\n        \"width\": 1120,\n        \"height\": 220,\n        \"content\": \"## 阅读台\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"64d4ca0b-2c16-441e-9461-5707be877132\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -220,\n        -740\n      ],\n      \"parameters\": {\n        \"width\": 480,\n        \"height\": 200,\n        \"content\": \"## 电报\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"13ae24ec-ac11-470a-bad4-76403861f632\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -460,\n        -180\n      ],\n      \"parameters\": {\n        \"width\": 1120,\n        \"height\": 220,\n        \"content\": \"囤积者\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c606f434-d37b-4406-997a-1e7f17319281\",\n      \"name\": \"not_saved_links_hd\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        260,\n        -120\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const linksCanalItems = $('channel_links_tg').all();\\nconst saved_links_items = $('saved_links_hd').all();\\n\\n// Extract links\\nconst saved_links = new Set(\\n    saved_links_items.map(item => String(item.json.content.url))\\n);\\n\\n// Filter\\nconst filteredLinks = linksCanalItems.filter(item => {\\n    return !saved_links.has(String(item.json.url));\\n});\\n\\nreturn filteredLinks;\\n\\n\\n\\n\\n\\n\\n\\n\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"d0f61836-798c-4835-ae8f-8f184b6720ed\",\n      \"name\": \"not_saved_links_rd\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        260,\n        -420\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const linksCanalItems = $('channel_links_tg').all();\\nconst saved_links_items = $('saved_links_rd').all();\\n\\n// Extract urls\\nconst saved_urls = new Set(\\n    saved_links_items.map(item => String(item.json.url))\\n);\\n\\n// Filter\\nconst filteredLinks = linksCanalItems.filter(item => {\\n    return !saved_urls.has(String(item.json.url));\\n});\\n\\nreturn filteredLinks;\\n\\n\\n\\n\\n\\n\\n\\n\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"f33349a7-361a-4b0f-844b-1ca5ded2aeab\",\n      \"name\": \"saved_links_rd\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        80,\n        -420\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"8c6f3806-0fb8-4c76-a0bc-19b588717430\",\n              \"name\": \"id\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.id }}\"\n            },\n            {\n              \"id\": \"ef41cba3-2844-479c-9467-6b94ae24c98b\",\n              \"name\": \"url\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.url }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"63d45b19-e878-418e-8eb5-c16b50af9669\",\n      \"name\": \"save_link_rd\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        460,\n        -420\n      ],\n      \"parameters\": {\n        \"url\": \"={{$env.READECK_SERVER}}/api/bookmarks\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"url\",\n              \"value\": \"={{ $json.url }}\"\n            }\n          ]\n        },\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"accept\",\n              \"value\": \"application/json\"\n            },\n            {\n              \"name\": \"authorization\",\n              \"value\": \"=Bearer {{$env.READECK_API_KEY}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"9416a858-1a25-4c3e-a49e-153118c268a7\",\n      \"name\": \"save_link_hd\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        460,\n        -120\n      ],\n      \"parameters\": {\n        \"url\": \"={{$env.HOARDER_SERVER}}/api/v1/bookmarks\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"type\",\n              \"value\": \"link\"\n            },\n            {\n              \"name\": \"url\",\n              \"value\": \"={{ $json.url }}\"\n            }\n          ]\n        },\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Authorization\",\n              \"value\": \"=Bearer {{$env.HOARDER_API_KEY}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"13693467-cd75-4774-9072-832419606ab2\",\n      \"name\": \"get_links_rd\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -280,\n        -420\n      ],\n      \"parameters\": {\n        \"url\": \"={{$env.READECK_SERVER}}/api/bookmarks\",\n        \"options\": {},\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"accept\",\n              \"value\": \"application/json\"\n            },\n            {\n              \"name\": \"authorization\",\n              \"value\": \"=Bearer {{$env.READECK_API_KEY}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"e4ed315d-d065-425a-b30d-eca1509670cc\",\n      \"name\": \"get_links_hd\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -280,\n        -120\n      ],\n      \"parameters\": {\n        \"url\": \"={{$env.HOARDER_SERVER}}/api/v1/bookmarks\",\n        \"options\": {},\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Authorization\",\n              \"value\": \"=Bearer {{$env.HOARDER_API_KEY}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"f54d9a4d-f00b-41bf-988a-8920d0046424\",\n      \"name\": \"saved_links_hd\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        80,\n        -120\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"b07ce8e5-0b67-4c9c-831a-7a52f92f5744\",\n              \"name\": \"content.url\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.content.url }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"d4e83b9d-5988-46f4-b853-86daec274dba\",\n      \"name\": \"channel_links_tg\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        120,\n        -700\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Define the chatId from the environment variable\\nconst chatId = parseInt($env.TG_SHERLINK_ID, 10);\\n// Access the \\\"result\\\" field from the previous node's output\\nconst updates = $node[\\\"channel_items_tg\\\"].json[\\\"result\\\"];\\n// Check if \\\"result\\\" is an array\\nif (!Array.isArray(updates)) {\\n  return []; // Return empty if there are no messages\\n}\\n// Filter and process the messages\\nconst filteredUpdates = updates\\n  .map(update => {\\n    // Ensure message from the specified channel\\n    if (update.channel_post && update.channel_post.chat && update.channel_post.chat.id === chatId) {\\n      return {\\n        id: update.channel_post.message_id,\\n        url: update.channel_post.text\\n      };\\n    }\\n    return null;\\n  })\\n  \\n  .filter(item => item !== null) // Filter nulls\\n  .filter(item => {\\n    // Filter only with hyperlink in text\\n    const text = item.url || \\\"\\\"; // Defined text\\n    return /https?:\\\\/\\\\/[^\\\\s]+/.test(text); // hyperlink\\n  });\\n// Convert each array element into an individual item\\nreturn filteredUpdates.map(update => ({ json: update }));\\n\"\n      },\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": false\n    },\n    {\n      \"id\": \"ca306aed-e682-4c35-a257-3b65bcfde895\",\n      \"name\": \"channel_items_tg\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -80,\n        -700\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.telegram.org/bot{{$env.TG_SHERLINK_BOT_TOKEN}}/getUpdates\",\n        \"options\": {},\n        \"sendQuery\": true,\n        \"queryParameters\": {\n          \"parameters\": [\n            {}\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {},\n  \"settings\": {\n    \"callerPolicy\": \"workflowsFromSameOwner\",\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"85dd3731-0772-4b8b-b828-ae6a034d5419\",\n  \"connections\": {\n    \"Split Out\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"saved_links_hd\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"get_links_hd\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split Out\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"get_links_rd\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"saved_links_rd\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"save_link_hd\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"save_link_rd\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"saved_links_hd\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"not_saved_links_hd\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"saved_links_rd\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"not_saved_links_rd\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Schedule Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"channel_items_tg\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"channel_items_tg\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"channel_links_tg\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"channel_links_tg\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"get_links_rd\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"get_links_hd\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"not_saved_links_hd\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"save_link_hd\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"not_saved_links_rd\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"save_link_rd\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}