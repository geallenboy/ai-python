{
  "url": "https://n8n.io/workflows/880-receive-updates-of-the-position-of-the-iss-every-minute/",
  "title": "Receive updates of the position of the ISS every minute",
  "author": "Harshil Agrawal",
  "publish_date": "Last update 10 months ago",
  "publish_date_absolute": "2024-07-25",
  "categories": [
    {
      "name": "Building Blocks"
    }
  ],
  "workflow_json": "{\"nodes\":[{\"name\":\"Function\",\"type\":\"n8n-nodes-base.function\",\"position\":[1470,380],\"parameters\":{\"functionCode\":\"const new_items = [];\\n// Get static data stored with the workflow\\nconst data = this.getWorkflowStaticData(\\\"node\\\");\\ndata.timestamp = data.timestamp || [];\\nfor (var i = items.length - 1; i >= 0; i--) {\\n// Check if data is already present\\n  if (data.timestamp.includes(items[i].json.timestamp)) {\\n    break;\\n  } else {\\n// if new data then add it to an array\\n    new_items.push({\\n      json: {\\n        timestamp: items[i].json.timestamp,\\n        latitude: items[i].json.latitude,\\n        longitude: items[i].json.longitude\\n      },\\n    });\\n  }\\n}\\ndata.timestamp = items.map((item) => item.json.timestamp);\\n// Check if array is empty\\nif (new_items.length === 0) {\\n  return [{ json: { message: \\\"No new items\\\" } }];\\n} else {\\n// return new items if array is not empty\\nconsole.log(new_items);\\n  return new_items;\\n}\\n\"},\"typeVersion\":1},{\"name\":\"Set\",\"type\":\"n8n-nodes-base.set\",\"position\":[1270,380],\"parameters\":{\"values\":{\"number\":[{\"name\":\"latitude\",\"value\":\"={{$node[\\\"HTTP Request\\\"].json[\\\"0\\\"][\\\"latitude\\\"]}}\"},{\"name\":\"longitude\",\"value\":\"={{$node[\\\"HTTP Request\\\"].json[\\\"0\\\"][\\\"longitude\\\"]}}\"},{\"name\":\"timestamp\",\"value\":\"={{$node[\\\"HTTP Request\\\"].json[\\\"0\\\"][\\\"timestamp\\\"]}}\"}],\"string\":[]},\"options\":{},\"keepOnlySet\":true},\"typeVersion\":1},{\"name\":\"HTTP Request\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1070,380],\"parameters\":{\"url\":\"https://api.wheretheiss.at/v1/satellites/25544/positions\",\"options\":{},\"queryParametersUi\":{\"parameter\":[{\"name\":\"timestamps\",\"value\":\"={{Date.now();}}\"}]}},\"typeVersion\":1},{\"name\":\"Cron\",\"type\":\"n8n-nodes-base.cron\",\"position\":[870,380],\"parameters\":{\"triggerTimes\":{\"item\":[{\"mode\":\"everyMinute\"}]}},\"typeVersion\":1}],\"connections\":{\"Set\":{\"main\":[[{\"node\":\"Function\",\"type\":\"main\",\"index\":0}]]},\"Cron\":{\"main\":[[{\"node\":\"HTTP Request\",\"type\":\"main\",\"index\":0}]]},\"HTTP Request\":{\"main\":[[{\"node\":\"Set\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This workflow demonstrates the use of static data in n8n. The workflow is built on the concept of polling.\n\n**Cron node:** The Cron node triggers the workflow every minute. You can configure the time based on your use-case.\n\n**HTTP Request node:** This node makes an HTTP Request to an API that returns the position of the ISS.\n\n**Set node:** In the Set node we set the information that we need in the workflow. Since we only need the timestamp, latitude, and longitude we set this in the node. If you need other information, you can set them in this node.\n\n**Function node:** The Function node, checks if the incoming data is similar to the data that was returned in the previous execution or not. If the data is different the Function node returns this new node, otherwise, it returns a message 'No New Items'. The data is also stored as static data with the workflow.\n\nBased on your use-case, you can build the workflow further. For example, you can use it send updates to Mattermost or Slack\n",
  "crawled_at": "2025-05-25T19:02:46.470119",
  "readme_zh": "此工作流展示了如何在n8n中使用静态数据。该工作流基于轮询机制构建。\n\n**Cron节点：** 定时触发器每分钟激活工作流。您可根据实际需求调整触发时间。\n\n**HTTP请求节点：** 向返回国际空间站位置信息的API发起HTTP请求。\n\n**Set节点：** 在此节点设置工作流所需的关键信息。本示例仅需时间戳、纬度和经度数据，如需其他字段可在此配置。\n\n**函数节点：** 该节点会校验当前数据与上次执行结果是否一致。若数据更新则输出新节点，否则返回\"无新数据\"提示。所有数据均会作为静态数据存储在工作流中。\n\n您可以根据实际需求扩展此工作流，例如添加向Mattermost或Slack发送更新的功能。",
  "title_zh": "每分钟接收国际空间站的位置更新",
  "publish_date_zh": "最后更新于10个月前",
  "workflow_json_zh": "{\n  \"nodes\": [\n    {\n      \"name\": \"Function\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        1470,\n        380\n      ],\n      \"parameters\": {\n        \"functionCode\": \"const new_items = [];\\n// Get static data stored with the workflow\\nconst data = this.getWorkflowStaticData(\\\"node\\\");\\ndata.timestamp = data.timestamp || [];\\nfor (var i = items.length - 1; i >= 0; i--) {\\n// Check if data is already present\\n  if (data.timestamp.includes(items[i].json.timestamp)) {\\n    break;\\n  } else {\\n// if new data then add it to an array\\n    new_items.push({\\n      json: {\\n        timestamp: items[i].json.timestamp,\\n        latitude: items[i].json.latitude,\\n        longitude: items[i].json.longitude\\n      },\\n    });\\n  }\\n}\\ndata.timestamp = items.map((item) => item.json.timestamp);\\n// Check if array is empty\\nif (new_items.length === 0) {\\n  return [{ json: { message: \\\"No new items\\\" } }];\\n} else {\\n// return new items if array is not empty\\nconsole.log(new_items);\\n  return new_items;\\n}\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Set\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1270,\n        380\n      ],\n      \"parameters\": {\n        \"values\": {\n          \"number\": [\n            {\n              \"name\": \"latitude\",\n              \"value\": \"={{$node[\\\"HTTP Request\\\"].json[\\\"0\\\"][\\\"latitude\\\"]}}\"\n            },\n            {\n              \"name\": \"longitude\",\n              \"value\": \"={{$node[\\\"HTTP Request\\\"].json[\\\"0\\\"][\\\"longitude\\\"]}}\"\n            },\n            {\n              \"name\": \"timestamp\",\n              \"value\": \"={{$node[\\\"HTTP Request\\\"].json[\\\"0\\\"][\\\"timestamp\\\"]}}\"\n            }\n          ],\n          \"string\": []\n        },\n        \"options\": {},\n        \"keepOnlySet\": true\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"HTTP Request\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1070,\n        380\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.wheretheiss.at/v1/satellites/25544/positions\",\n        \"options\": {},\n        \"queryParametersUi\": {\n          \"parameter\": [\n            {\n              \"name\": \"timestamps\",\n              \"value\": \"={{Date.now();}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Cron\",\n      \"type\": \"n8n-nodes-base.cron\",\n      \"position\": [\n        870,\n        380\n      ],\n      \"parameters\": {\n        \"triggerTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"everyMinute\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"connections\": {\n    \"Set\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Function\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Cron\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"HTTP Request\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"HTTP Request\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}