{
  "url": "https://n8n.io/workflows/3279-oauth2-settings-finder-with-openrouter-chat-model-and-llama-33/",
  "title": "OAuth2 Settings Finder with OpenRouter Chat Model and Llama 3.3",
  "author": "Hendriekus",
  "publish_date": "Last update 2 months ago",
  "publish_date_absolute": "2025-03-26",
  "categories": [
    {
      "name": "Engineering"
    },
    {
      "name": "AI"
    },
    {
      "name": "IT Ops"
    }
  ],
  "workflow_json": "{\"id\":\"eHuvG2I1vOYj0U6k\",\"meta\":{\"instanceId\":\"1c7be698fdfa769249b0c65dcf8862b184efc981b9cec697fe71be1be502c151\"},\"name\":\"My workflow\",\"tags\":[{\"id\":\"isKwzRd30jBHOwft\",\"name\":\"AI\",\"createdAt\":\"2025-03-20T12:19:54.225Z\",\"updatedAt\":\"2025-03-20T12:19:54.225Z\"},{\"id\":\"14BO5kV7hwR3aVmH\",\"name\":\"OAuth\",\"createdAt\":\"2025-03-20T12:19:58.622Z\",\"updatedAt\":\"2025-03-20T12:19:58.622Z\"},{\"id\":\"hzAAB0A7DmXlEfor\",\"name\":\"Service\",\"createdAt\":\"2025-03-20T12:20:03.063Z\",\"updatedAt\":\"2025-03-20T12:20:03.063Z\"}],\"nodes\":[{\"id\":\"6503d6be-e4f3-4a06-b027-9fb210788a30\",\"name\":\"When Executed by Another Workflow\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[80,340],\"parameters\":{\"inputSource\":\"jsonExample\",\"jsonExample\":\"{\\n  \\\"name\\\" : \\\"Atlassian\\\",\\n  \\\"audience\\\" : \\\"api.atlassian.com\\\"\\n}\"},\"typeVersion\":1.1},{\"id\":\"d6246380-096b-458f-a52c-b263c1e4b800\",\"name\":\"LLM Bus\",\"type\":\"@n8n/n8n-nodes-langchain.chainLlm\",\"position\":[400,340],\"parameters\":{\"text\":\"You are an AI agent tasked with identifying the (pretty-print) OAuth service name, audience, authorization URI, and token URI.\\nThe input is only a name bearing on the OAUth service, e.g.:\\n1. Jira.  The name Jira must be resolved to the correlated API service, in this case, Atlassian.  OAuth information can be gleaned from https://developer.atlassian.com/.\\n2. Sage. This is potentially a vague name.  However, in the context of API and OAuth, it is probably Sage300 the ERP system.  OAuth information can be gleaned from https://developer.sage.com.\\n3. SAP. This can be the SAP HANA Cloud Platform. Authorization is usually be dedicated URL, e.g., https://<host_name>:<port_number>/sap/bc/sec/oauth2/client/grant/authorization?\\n4. Google. This can be the Google API, e.g., https://accounts.google.com/o/oauth2/v2/auth? with audience as project-id-random-value.apps.googleusercontent.com.\\n\\nObtaining these details by just knowing the pretty-name of the service might be cumbersome.  Therefore a confidence score, as a probabilistic indication your confidence\\nof the data must be calculated.  Express your confidence score on a scale of 1 (absolute certainty) down to almost zero (least certain), i.e., confidence NUMERIC(3, 2) CHECK (confidence >= 0.1 AND confidence <= 1.0).\\nIf you can't obtain information, invent the data, but justify your improvisation by assigning a very low confidence score.  You must always return a result, no matter\\nhow low your confidence.\\n\\nThese Instructions comprise a Context Understanding, Information Retrieval, Output Format, an Example, with Accuracy and Verification.  \\n1. Context Understanding: The name (as input) value represents the target API or service. You need to identify the service name, audience, authorization URI, and token URI based on the name value. \\n2. Information Retrieval: Use reputable sources and official documentation to find the correct service name, audience, authorization URI and token URI.\\n3. Output Format: Service Name: [Service Name], [Audience], [Authorization URI], [Token URI], [Details]: (Your choice rationale in about 100 words to justify your answer), and lastly the [Confidence] (probability factor) as a numeric value 0<x≤1andx∈{0.01,0.02,…,1.00}.\\n4. Example 1: If the name is Sage, the service is probably something like sage300.yourdomain.com (where the yourdomain is clearly a proprietary name), the authorization and token uri follow the same pattern, e.g., \\na. Service Name: Sage 300,\\nb. Audience: sage300.yourdomain.com\\nc. Authorization URI: https://sage300.yourdomain.com/oauth/authorize?, \\nd. Token URI: https://sage300.yourdomain.com/oauth/token, \\ne. Details: Your domain is embedded in the standard presentation of the audience, authorization uri, and the token uri.  Therefore I substituted the standard representations of the OAuth pattern. \\nf. Confidence: 0.90 (=> 0<x≤1andx∈{0.01,0.02,…,1.00})\\n5. Example 2: If the name is Jira, the API service is probably Atlassian the elements: \\na. Service Name: Atlassian, \\nb. Audience: api.atlassian.com\\nc. Authorization URI: https://auth.atlassian.com/authorize?, \\nd. Token URI: https://auth.atlassian.com/oauth/token, \\ne. Details: I have referenced the Atlassian online API documentation and retrieved the standard presentation of the audience, authorization uri, and the token uri from their documentation. \\nf. Confidence: 1 (=> 0<x≤1andx∈{0.01,0.02,…,1.00})\\n6. Accuracy and Verification: Double-check the information to ensure it is correct and up-to-date. If the name value is ambiguous or not well-documented, provide the best possible match based on available information, or improvise an answer based on the patterns of OAuth, but assign a low Confidence.\\n7. Improvisation when OAuth elements relating to the provided {{ $json.name }} (API service name) cannot be determined with high confidence you should specify common patterns or fallback options for OAuth and perform additional searches to cross-reference multiple sources to improve accuracy.\\n\",\"messages\":{\"messageValues\":[{\"type\":\"HumanMessagePromptTemplate\",\"message\":\"=The OAuth requester wants you to define the:  OAuth Service (pretty print) Name, the audience (parameter in the authorization uri), the aurhorization_uri (for the API OAuth authorization call), the token_uri (for the token call), your explanation for choosing these values, and your Confidence about the information you provided. \\nOutput the service_name, audience, authorization_uri, token_uri, details, and the Confidence factor.\\nOAuth Service for which to obtain configuration: {{ $json.name }}.  \\nProvide the requester with the pretty-print OAuth Service Name, the audience (authorization parameter) the authorization_uri, the token_uri, your rationale (in n more than 75 words) for choosing the values, and the Confidence factor pertaining.\"}]},\"promptType\":\"define\",\"hasOutputParser\":true},\"typeVersion\":1.5},{\"id\":\"90cdcbfa-cf7e-4123-b241-dafaea12d1a4\",\"name\":\"Structured Output Parser\",\"type\":\"@n8n/n8n-nodes-langchain.outputParserStructured\",\"position\":[640,580],\"parameters\":{\"schemaType\":\"manual\",\"inputSchema\":\"{\\n  \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\",\\n  \\\"title\\\": \\\"Generated schema for Root\\\",\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"action\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"text\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  },\\n  \\\"required\\\": [\\n    \\\"action\\\",\\n    \\\"text\\\"\\n  ]\\n}\"},\"typeVersion\":1.2},{\"id\":\"5f8cb1e1-39e7-4617-9b56-e0b41bfee466\",\"name\":\"OpenRouter Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",\"position\":[340,580],\"parameters\":{\"model\":\"latitudegames/wayfarer-large-70b-llama-3.3\",\"options\":{\"topP\":0.9,\"maxTokens\":2500,\"maxRetries\":2,\"temperature\":0.5,\"responseFormat\":\"json_object\",\"presencePenalty\":0.6,\"frequencyPenalty\":0.5}},\"credentials\":{\"openRouterApi\":{\"id\":\"QRSxlMSE2Tacaxcl\",\"name\":\"OpenRouter account\"}},\"typeVersion\":1},{\"id\":\"13012149-1408-4dbc-9108-146281001562\",\"name\":\"Conform JSON\",\"type\":\"n8n-nodes-base.code\",\"position\":[900,340],\"parameters\":{\"jsCode\":\"// Extract the relevant information from the original output\\nconst items =$input.all();\\n// Extract the relevant information from the input\\nconst originalText = items[0].json.output.text;\\n\\n// Parse the text to extract the required fields\\nconst lines = originalText.split('\\\\n');\\nconst service_name = lines[0].split(': ')[1];\\nconst audience = lines[1].split(': ')[1];\\nconst authorization_uri = lines[2].split(': ')[1];\\nconst token_uri = lines[3].split(': ')[1];\\nconst details = lines[4].split(': ')[1];\\nconst confidence = parseFloat(lines[5].split(': ')[1]);\\n\\n// Return the transformed output\\nreturn [\\n  {\\n    json: {\\n      output: {\\n        service_name,\\n        audience,\\n        authorization_uri,\\n        token_uri,\\n        details,\\n        confidence\\n      }\\n    }\\n  }\\n];\"},\"typeVersion\":2},{\"id\":\"8d4d10a4-ac75-4fc7-a607-19d91cde6ac6\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[0,-200],\"parameters\":{\"color\":4,\"width\":1100,\"height\":360,\"content\":\"## OAuth2 Settings Finder with OpenRouter Chat Model and Llama 3.3\\n\\n**Overview:**\\nThe AI agent identifies:\\n- Authorization URI\\n- Token URI\\n- Audience\\n\\n**Methodology:**\\nConfidence scoring is utilized to assess the trustworthiness of extracted data:\\n- Score Range: 0 < x ≤ 1\\n- Score Granularity: 0.01 increments\\n\\n**Model Details:**\\nLeveraging the Wayfarer Large 70b Llama 3.3 model.\"},\"typeVersion\":1},{\"id\":\"e3abf498-e9ca-482e-9e75-4a4db0bbb813\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[0,180],\"parameters\":{\"width\":280,\"height\":560,\"content\":\"## Start\\n**Trigger** input from the calling process.\"},\"typeVersion\":1},{\"id\":\"2359628b-7f58-4f04-ac94-7d33f6bf9b0e\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[300,180],\"parameters\":{\"color\":5,\"height\":560,\"content\":\"## AI Agent\\n**Prompt** input to find data.\"},\"typeVersion\":1},{\"id\":\"e6977545-9559-45e5-a9ee-c131cc6f021b\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[560,180],\"parameters\":{\"color\":5,\"height\":560,\"content\":\"## Output\\n**Parser** to grab the AI results into a JSON structure, according to the specified schema.\"},\"typeVersion\":1},{\"id\":\"9216c88f-2c79-458e-9583-9fc718a78ea2\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[820,180],\"parameters\":{\"color\":7,\"width\":280,\"height\":560,\"content\":\"## Conform\\n**Output** to your process expectation.\"},\"typeVersion\":1},{\"id\":\"18b261ec-e2c2-4ce8-a61d-72397ecb328d\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1520,-200],\"parameters\":{\"color\":7,\"width\":1500,\"height\":940,\"content\":\"## Purpose\\nThis template is designed to assist users in obtaining OAuth2 settings using AI-powered insights. It is ideal for developers, IT professionals, or anyone working with APIs that require OAuth2 authentication. By leveraging the AI agent, users can simplify the process of extracting and validating key details such as the `authorization_url`, `token_url`, and `audience`.\\n\\n## Value \\nObtaining OAuth2 details via AI saves time and reduces the risk of human error. The confidence scoring system provides an indication of the trustworthiness of the results, empowering users to make informed decisions.\\n## Setup Instructions\\n### 1. Configuration Nodes\\n- **Structured Output Node**: Parses the AI model's output using a predefined JSON schema. This ensures the data is structured for downstream processing.\\n- **Code Node**:  If the AI model’s output does not match the required format, use the Code node to re-arrange and transform the data. Example code snippets are provided below for common scenarios.\\n### 2. AI Model Prompt\\nThe prompt for the AI model includes:\\n- A detailed structure and objectives of the query.\\n- Flexibility for the model to improvise when accurate results cannot be determined.\\n### 3. Confidence Scoring\\nThe AI model assigns a confidence score (0 < x ≤ 1) to indicate the reliability of the extracted data. Scores are provided in increments of 0.01 for granularity.\\n\\n## Configuration Example\\nThis is an example of the Code node can be configured to reformat the data:\\n```const items =$input.all();\\nconst originalText = items[0].json.output.text;\\nconst lines = originalText.split('\\\\n');\\nconst service_name = lines[0].split(': ')[1];\\nconst audience = lines[1].split(': ')[1];\\nconst authorization_uri = lines[2].split(': ')[1];\\nconst token_uri = lines[3].split(': ')[1];\\nconst details = lines[4].split(': ')[1];\\nconst confidence = parseFloat(lines[5].split(': ')[1]);\\nreturn [\\n  {\\n    json: {\\n      output: {\\n        service_name,\\n        audience,\\n        authorization_uri,\\n        token_uri,\\n        details,\\n        confidence\\n      }\\n    }\\n  }\\n];\"},\"typeVersion\":1},{\"id\":\"05edd9e4-e2ad-4dc5-930e-44aa814c07b2\",\"name\":\"Sticky Note6\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1520,760],\"parameters\":{\"color\":6,\"width\":2620,\"content\":\"## Adaptability\\n**Customize** this template:\\n* Update the AI model prompt with details specific to your API or OAuth2 setup.\\n* Adjust the JSON schema in the Structured Output node to match the data format.\\n* Modify the Code logic to suit the application's requirements. \"},\"typeVersion\":1}],\"active\":false,\"pinData\":{\"When Executed by Another Workflow\":[{\"json\":{\"name\":\"Atlassian\"}}]},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"c1321677-4ea5-4c8c-8742-02ffd4c8ef70\",\"connections\":{\"LLM Bus\":{\"main\":[[{\"node\":\"Conform JSON\",\"type\":\"main\",\"index\":0}]]},\"OpenRouter Chat Model\":{\"ai_languageModel\":[[{\"node\":\"LLM Bus\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Structured Output Parser\":{\"ai_outputParser\":[[{\"node\":\"LLM Bus\",\"type\":\"ai_outputParser\",\"index\":0}]]},\"When Executed by Another Workflow\":{\"main\":[[{\"node\":\"LLM Bus\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "## Find OAuth URIs with AI Llama\n\n**Overview:**  \nThe AI agent identifies:\n\n  * Authorization URI\n  * Token URI\n  * Audience\n\n\n\n**Methodology:**  \nConfidence scoring is utilized to assess the trustworthiness of extracted data:\n\n  * Score Range: 0 < x ≤ 1\n  * Score Granularity: 0.01 increments\n\n\n\n**Model Details:**  \nLeveraging the Wayfarer Large 70b Llama 3.3 model.\n\n## How it works:\n\nThis template is designed to assist users in obtaining OAuth2 settings using AI-powered insights. It is ideal for developers, IT professionals, or anyone working with APIs that require OAuth2 authentication. By leveraging the AI agent, users can simplify the process of extracting and validating key details such as the `authorization_url`, `token_url`, and `audience`.\n\n## Set up instructions:\n\n### 1\\. Configuration Nodes\n\n  * **Structured Output Node** : Parses the AI model's output using a predefined JSON schema. This ensures the data is structured for downstream processing.\n  * **Code Node** : If the AI model’s output does not match the required format, use the Code node to re-arrange and transform the data. Example code snippets are provided below for common scenarios.\n\n\n\n### 2\\. AI Model Prompt\n\nThe prompt for the AI model includes:\n\n  * A detailed structure and objectives of the query.\n  * Flexibility for the model to improvise when accurate results cannot be determined.\n\n\n\n### 3\\. Confidence Scoring\n\nThe AI model assigns a confidence score (0 < x ≤ 1) to indicate the reliability of the extracted data. Scores are provided in increments of 0.01 for granularity.\n\n## Adaptability\n\n**Customize** this template:\n\n  * Update the AI model prompt with details specific to your API or OAuth2 setup.\n  * Adjust the JSON schema in the Structured Output node to match the data format.\n  * Modify the Code logic to suit the application's requirements.\n\n\n",
  "crawled_at": "2025-05-26T04:06:59.192384",
  "readme_zh": "## 使用AI Llama查找OAuth URI\n\n**概述:**  \nAI代理可识别以下内容：\n  * 授权URI\n  * 令牌URI\n  * 受众标识\n\n\n**方法:**  \n采用置信度评分评估数据提取的可信度：\n  * 评分范围：0 < x ≤ 1\n  * 评分精度：0.01为最小增量\n\n\n**模型详情:**  \n基于Wayfarer Large 70b Llama 3.3模型构建。\n\n## 工作原理：\n\n本模板专为通过AI智能获取OAuth2设置而设计，特别适合需要OAuth2认证的API开发者、IT专业人员。AI代理能简化关键信息（如`authorization_url`、`token_url`和`audience`）的提取与验证流程。\n\n## 设置指南：\n\n### 1. 配置节点\n  * **结构化输出节点**：通过预定义JSON模式解析AI模型输出，确保数据结构化处理\n  * **代码节点**：当AI输出格式不符时，可使用代码节点重组数据。下文提供常用场景的代码示例\n\n\n### 2. AI模型指令\nAI指令包含：\n  * 查询目标与结构的详细说明\n  * 当无法确定准确结果时允许模型自主调整的灵活性\n\n\n### 3. 置信度评分\nAI模型为提取数据分配置信度评分（0 < x ≤ 1），以0.01为增量提供精度评估。\n\n## 适应性\n**定制化建议**：\n  * 根据具体API或OAuth2配置更新AI指令\n  * 调整结构化输出节点的JSON模式以匹配数据格式\n  * 修改代码逻辑以适应应用需求",
  "title_zh": "OAuth2设置查找器（集成OpenRouter聊天模型与Llama 3.3）",
  "publish_date_zh": "上次更新于22天前",
  "workflow_json_zh": "{\n  \"id\": \"eHuvG2I1vOYj0U6k\",\n  \"meta\": {\n    \"instanceId\": \"1c7be698fdfa769249b0c65dcf8862b184efc981b9cec697fe71be1be502c151\"\n  },\n  \"name\": \"My workflow\",\n  \"tags\": [\n    {\n      \"id\": \"isKwzRd30jBHOwft\",\n      \"name\": \"AI\",\n      \"createdAt\": \"2025-03-20T12:19:54.225Z\",\n      \"updatedAt\": \"2025-03-20T12:19:54.225Z\"\n    },\n    {\n      \"id\": \"14BO5kV7hwR3aVmH\",\n      \"name\": \"OAuth\",\n      \"createdAt\": \"2025-03-20T12:19:58.622Z\",\n      \"updatedAt\": \"2025-03-20T12:19:58.622Z\"\n    },\n    {\n      \"id\": \"hzAAB0A7DmXlEfor\",\n      \"name\": \"Service\",\n      \"createdAt\": \"2025-03-20T12:20:03.063Z\",\n      \"updatedAt\": \"2025-03-20T12:20:03.063Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"6503d6be-e4f3-4a06-b027-9fb210788a30\",\n      \"name\": \"When Executed by Another Workflow\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        80,\n        340\n      ],\n      \"parameters\": {\n        \"inputSource\": \"jsonExample\",\n        \"jsonExample\": \"{\\n  \\\"name\\\" : \\\"Atlassian\\\",\\n  \\\"audience\\\" : \\\"api.atlassian.com\\\"\\n}\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"d6246380-096b-458f-a52c-b263c1e4b800\",\n      \"name\": \"LLM Bus\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        400,\n        340\n      ],\n      \"parameters\": {\n        \"text\": \"You are an AI agent tasked with identifying the (pretty-print) OAuth service name, audience, authorization URI, and token URI.\\nThe input is only a name bearing on the OAUth service, e.g.:\\n1. Jira.  The name Jira must be resolved to the correlated API service, in this case, Atlassian.  OAuth information can be gleaned from https://developer.atlassian.com/.\\n2. Sage. This is potentially a vague name.  However, in the context of API and OAuth, it is probably Sage300 the ERP system.  OAuth information can be gleaned from https://developer.sage.com.\\n3. SAP. This can be the SAP HANA Cloud Platform. Authorization is usually be dedicated URL, e.g., https://<host_name>:<port_number>/sap/bc/sec/oauth2/client/grant/authorization?\\n4. Google. This can be the Google API, e.g., https://accounts.google.com/o/oauth2/v2/auth? with audience as project-id-random-value.apps.googleusercontent.com.\\n\\nObtaining these details by just knowing the pretty-name of the service might be cumbersome.  Therefore a confidence score, as a probabilistic indication your confidence\\nof the data must be calculated.  Express your confidence score on a scale of 1 (absolute certainty) down to almost zero (least certain), i.e., confidence NUMERIC(3, 2) CHECK (confidence >= 0.1 AND confidence <= 1.0).\\nIf you can't obtain information, invent the data, but justify your improvisation by assigning a very low confidence score.  You must always return a result, no matter\\nhow low your confidence.\\n\\nThese Instructions comprise a Context Understanding, Information Retrieval, Output Format, an Example, with Accuracy and Verification.  \\n1. Context Understanding: The name (as input) value represents the target API or service. You need to identify the service name, audience, authorization URI, and token URI based on the name value. \\n2. Information Retrieval: Use reputable sources and official documentation to find the correct service name, audience, authorization URI and token URI.\\n3. Output Format: Service Name: [Service Name], [Audience], [Authorization URI], [Token URI], [Details]: (Your choice rationale in about 100 words to justify your answer), and lastly the [Confidence] (probability factor) as a numeric value 0<x≤1andx∈{0.01,0.02,…,1.00}.\\n4. Example 1: If the name is Sage, the service is probably something like sage300.yourdomain.com (where the yourdomain is clearly a proprietary name), the authorization and token uri follow the same pattern, e.g., \\na. Service Name: Sage 300,\\nb. Audience: sage300.yourdomain.com\\nc. Authorization URI: https://sage300.yourdomain.com/oauth/authorize?, \\nd. Token URI: https://sage300.yourdomain.com/oauth/token, \\ne. Details: Your domain is embedded in the standard presentation of the audience, authorization uri, and the token uri.  Therefore I substituted the standard representations of the OAuth pattern. \\nf. Confidence: 0.90 (=> 0<x≤1andx∈{0.01,0.02,…,1.00})\\n5. Example 2: If the name is Jira, the API service is probably Atlassian the elements: \\na. Service Name: Atlassian, \\nb. Audience: api.atlassian.com\\nc. Authorization URI: https://auth.atlassian.com/authorize?, \\nd. Token URI: https://auth.atlassian.com/oauth/token, \\ne. Details: I have referenced the Atlassian online API documentation and retrieved the standard presentation of the audience, authorization uri, and the token uri from their documentation. \\nf. Confidence: 1 (=> 0<x≤1andx∈{0.01,0.02,…,1.00})\\n6. Accuracy and Verification: Double-check the information to ensure it is correct and up-to-date. If the name value is ambiguous or not well-documented, provide the best possible match based on available information, or improvise an answer based on the patterns of OAuth, but assign a low Confidence.\\n7. Improvisation when OAuth elements relating to the provided {{ $json.name }} (API service name) cannot be determined with high confidence you should specify common patterns or fallback options for OAuth and perform additional searches to cross-reference multiple sources to improve accuracy.\\n\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"type\": \"HumanMessagePromptTemplate\",\n              \"message\": \"=The OAuth requester wants you to define the:  OAuth Service (pretty print) Name, the audience (parameter in the authorization uri), the aurhorization_uri (for the API OAuth authorization call), the token_uri (for the token call), your explanation for choosing these values, and your Confidence about the information you provided. \\nOutput the service_name, audience, authorization_uri, token_uri, details, and the Confidence factor.\\nOAuth Service for which to obtain configuration: {{ $json.name }}.  \\nProvide the requester with the pretty-print OAuth Service Name, the audience (authorization parameter) the authorization_uri, the token_uri, your rationale (in n more than 75 words) for choosing the values, and the Confidence factor pertaining.\"\n            }\n          ]\n        },\n        \"promptType\": \"define\",\n        \"hasOutputParser\": true\n      },\n      \"typeVersion\": 1.5\n    },\n    {\n      \"id\": \"90cdcbfa-cf7e-4123-b241-dafaea12d1a4\",\n      \"name\": \"Structured Output Parser\",\n      \"type\": \"@n8n/n8n-nodes-langchain.outputParserStructured\",\n      \"position\": [\n        640,\n        580\n      ],\n      \"parameters\": {\n        \"schemaType\": \"manual\",\n        \"inputSchema\": \"{\\n  \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\",\\n  \\\"title\\\": \\\"Generated schema for Root\\\",\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"action\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"text\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  },\\n  \\\"required\\\": [\\n    \\\"action\\\",\\n    \\\"text\\\"\\n  ]\\n}\"\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"5f8cb1e1-39e7-4617-9b56-e0b41bfee466\",\n      \"name\": \"OpenRouter Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",\n      \"position\": [\n        340,\n        580\n      ],\n      \"parameters\": {\n        \"model\": \"latitudegames/wayfarer-large-70b-llama-3.3\",\n        \"options\": {\n          \"topP\": 0.9,\n          \"maxTokens\": 2500,\n          \"maxRetries\": 2,\n          \"temperature\": 0.5,\n          \"responseFormat\": \"json_object\",\n          \"presencePenalty\": 0.6,\n          \"frequencyPenalty\": 0.5\n        }\n      },\n      \"credentials\": {\n        \"openRouterApi\": {\n          \"id\": \"QRSxlMSE2Tacaxcl\",\n          \"name\": \"OpenRouter account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"13012149-1408-4dbc-9108-146281001562\",\n      \"name\": \"Conform JSON\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        900,\n        340\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Extract the relevant information from the original output\\nconst items =$input.all();\\n// Extract the relevant information from the input\\nconst originalText = items[0].json.output.text;\\n\\n// Parse the text to extract the required fields\\nconst lines = originalText.split('\\\\n');\\nconst service_name = lines[0].split(': ')[1];\\nconst audience = lines[1].split(': ')[1];\\nconst authorization_uri = lines[2].split(': ')[1];\\nconst token_uri = lines[3].split(': ')[1];\\nconst details = lines[4].split(': ')[1];\\nconst confidence = parseFloat(lines[5].split(': ')[1]);\\n\\n// Return the transformed output\\nreturn [\\n  {\\n    json: {\\n      output: {\\n        service_name,\\n        audience,\\n        authorization_uri,\\n        token_uri,\\n        details,\\n        confidence\\n      }\\n    }\\n  }\\n];\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"8d4d10a4-ac75-4fc7-a607-19d91cde6ac6\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        0,\n        -200\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 1100,\n        \"height\": 360,\n        \"content\": \"## 基于OpenRouter聊天模型与Llama 3.3的OAuth2配置发现工具\\n\\n**功能概述：**\\n该AI代理可自动识别：\\n- 授权接口地址\\n- 令牌获取接口\\n- 目标服务受众\\n\\n**技术原理：**\\n采用置信度评分机制评估数据可靠性：\\n- 评分范围：0 < x ≤ 1\\n- 精度等级：0.01分位递进\\n\\n**模型架构：**\\n搭载Wayfarer Large 70b Llama 3.3大语言模型\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e3abf498-e9ca-482e-9e75-4a4db0bbb813\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        0,\n        180\n      ],\n      \"parameters\": {\n        \"width\": 280,\n        \"height\": 560,\n        \"content\": \"## 开始  \\n来自调用进程的**触发**输入。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2359628b-7f58-4f04-ac94-7d33f6bf9b0e\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        300,\n        180\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"height\": 560,\n        \"content\": \"## AI代理  \\n**提示** 输入以查找数据。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e6977545-9559-45e5-a9ee-c131cc6f021b\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        560,\n        180\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"height\": 560,\n        \"content\": \"## 输出\\n**解析器** 用于将AI结果抓取为符合指定模式的JSON结构。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9216c88f-2c79-458e-9583-9fc718a78ea2\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        820,\n        180\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 280,\n        \"height\": 560,\n        \"content\": \"## 符合预期\\n**输出**与您的流程预期一致。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"18b261ec-e2c2-4ce8-a61d-72397ecb328d\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1520,\n        -200\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 1500,\n        \"height\": 940,\n        \"content\": \"## 用途\\n本模板旨在通过AI智能分析帮助用户获取OAuth2配置参数，特别适合需要OAuth2认证的开发者、IT技术人员及API对接人员。借助AI代理，用户可快速提取并验证关键参数（如`authorization_url`、`token_url`和`audience`），大幅简化配置流程。\\n\\n## 核心价值  \\n通过AI获取OAuth2参数既能节省时间，又能降低人为错误风险。系统提供的置信度评分机制可直观反映结果可靠性，辅助用户做出准确判断。\\n\\n## 配置指南\\n### 1. 节点配置\\n- **结构化输出节点**：根据预设JSON模板解析AI模型输出，确保数据格式符合后续处理要求\\n- **代码节点**：当AI输出格式不符时，可通过代码节点进行数据重构（下方提供常用转换代码示例）\\n\\n### 2. AI模型指令\\nAI指令包含：\\n- 明确的查询结构与目标说明\\n- 允许模型在无法确定准确结果时进行合理推断\\n\\n### 3. 置信度评分  \\nAI模型将为提取结果标注置信度分值（0 < x ≤ 1），以0.01为最小单位进行精确评估。\\n\\n## 配置示例\\n以下代码节点示例演示如何重构数据格式：\\n```const items =$input.all();\\nconst originalText = items[0].json.output.text;\\nconst lines = originalText.split('\\\\n');\\nconst service_name = lines[0].split(': ')[1];\\nconst audience = lines[1].split(': ')[1];\\nconst authorization_uri = lines[2].split(': ')[1];\\nconst token_uri = lines[3].split(': ')[1];\\nconst details = lines[4].split(': ')[1];\\nconst confidence = parseFloat(lines[5].split(': ')[1]);\\nreturn [\\n  {\\n    json: {\\n      output: {\\n        service_name,\\n        audience,\\n        authorization_uri,\\n        token_uri,\\n        details,\\n        confidence\\n      }\\n    }\\n  }\\n];```\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"05edd9e4-e2ad-4dc5-930e-44aa814c07b2\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1520,\n        760\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 2620,\n        \"content\": \"## 适应性\\n**自定义**此模板：\\n* 根据您的API或OAuth2设置更新AI模型提示中的具体细节。\\n* 调整结构化输出节点中的JSON模式以匹配数据格式。\\n* 修改代码逻辑以满足应用程序的需求。\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {\n    \"When Executed by Another Workflow\": [\n      {\n        \"json\": {\n          \"name\": \"Atlassian\"\n        }\n      }\n    ]\n  },\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"c1321677-4ea5-4c8c-8742-02ffd4c8ef70\",\n  \"connections\": {\n    \"LLM Bus\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Conform JSON\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenRouter Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"LLM Bus\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Structured Output Parser\": {\n      \"ai_outputParser\": [\n        [\n          {\n            \"node\": \"LLM Bus\",\n            \"type\": \"ai_outputParser\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When Executed by Another Workflow\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"LLM Bus\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}