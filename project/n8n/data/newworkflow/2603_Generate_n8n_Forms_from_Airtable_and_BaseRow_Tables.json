{
  "url": "https://n8n.io/workflows/2603-generate-n8n-forms-from-airtable-and-baserow-tables/",
  "title": "Generate n8n Forms from Airtable and BaseRow Tables",
  "author": "Jimleuk",
  "publish_date": "Last update 6 months ago",
  "publish_date_absolute": "2024-11-26",
  "categories": [
    {
      "name": "Other"
    }
  ],
  "workflow_json": "{\"meta\":{\"instanceId\":\"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\"},\"nodes\":[{\"id\":\"266ebce9-540d-4fd8-95c2-2799f0eff8d9\",\"name\":\"Get Base Schema\",\"type\":\"n8n-nodes-base.airtable\",\"position\":[420,160],\"parameters\":{\"base\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $json.BaseId }}\"},\"resource\":\"base\",\"operation\":\"getSchema\"},\"credentials\":{\"airtableTokenApi\":{\"id\":\"Und0frCQ6SNVX3VV\",\"name\":\"Airtable Personal Access Token account\"}},\"typeVersion\":2.1},{\"id\":\"1c33d0db-6eac-4638-8b5e-867ec52abd11\",\"name\":\"On form submission\",\"type\":\"n8n-nodes-base.formTrigger\",\"position\":[80,160],\"webhookId\":\"a6daabfe-5507-4ac1-9345-45a59ba67630\",\"parameters\":{\"options\":{\"path\":\"airtable-n8n-form\",\"ignoreBots\":true},\"formTitle\":\"Airtable to n8n Form\",\"formFields\":{\"values\":[{\"fieldType\":\"dropdown\",\"fieldLabel\":\"BaseId\",\"fieldOptions\":{\"values\":[{\"option\":\"appfP15Xd0aVZR9xV\"}]},\"requiredField\":true},{\"fieldType\":\"dropdown\",\"fieldLabel\":\"TableId\",\"fieldOptions\":{\"values\":[{\"option\":\"tblBuJjQmTZL0MI8U\"}]},\"requiredField\":true}]},\"formDescription\":\"This workflow creates an n8n form for an Airtable base.\"},\"typeVersion\":2.2},{\"id\":\"fef7c4f2-0153-4321-a0a4-700b84f27a0b\",\"name\":\"Filter Unsupported FieldTypes\",\"type\":\"n8n-nodes-base.filter\",\"position\":[1220,160],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"72309d3f-cd52-4bfa-8b29-df0795e38d7f\",\"operator\":{\"type\":\"string\",\"operation\":\"exists\",\"singleValue\":true},\"leftValue\":\"={{ $json.fieldType }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"b62f82bd-781b-4b41-83a1-57423e639c5e\",\"name\":\"Combine Fields\",\"type\":\"n8n-nodes-base.aggregate\",\"position\":[1400,160],\"parameters\":{\"options\":{},\"aggregate\":\"aggregateAllItemData\"},\"typeVersion\":1},{\"id\":\"b38ef15c-0098-47d9-964e-50466f4cd7fa\",\"name\":\"Render Form\",\"type\":\"n8n-nodes-base.form\",\"position\":[1800,160],\"webhookId\":\"86e5d6db-20ee-4df5-b37a-38ac85e16b7d\",\"parameters\":{\"options\":{},\"defineForm\":\"json\",\"jsonOutput\":\"={{ $json.data }}\"},\"typeVersion\":1},{\"id\":\"00bb7ad8-0457-4c38-a430-d9a1cd41d5fe\",\"name\":\"Files To List\",\"type\":\"n8n-nodes-base.code\",\"position\":[3160,160],\"parameters\":{\"jsCode\":\"let results = [];\\n\\nconst fileInputs = $('Combine Fields').first().json.data.filter(item => item.fieldType === 'file');\\n\\nif (!fileInputs.length) return [];\\n\\nconst { json, binary } = $('Render Form').first();\\n\\nfor (fileInput of fileInputs) {\\n  const binaryKeys = Object.keys(binary).filter(key => key.startsWith(fileInput.fieldLabel));\\n  for (key of binaryKeys) {\\n    results.push({\\n      json: { fieldLabel: fileInput.fieldLabel },\\n      binary: {\\n          data: binary[key],\\n      }\\n    });\\n  }\\n}\\n\\nreturn results;\"},\"typeVersion\":2},{\"id\":\"5f570811-ace9-489b-8889-d9686fe398f7\",\"name\":\"Fields to List\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[780,160],\"parameters\":{\"options\":{},\"fieldToSplitOut\":\"fields\"},\"typeVersion\":1},{\"id\":\"e3d222de-9673-4529-8a7c-8a16071b3ac9\",\"name\":\"Covert to n8n Form Fields\",\"type\":\"n8n-nodes-base.code\",\"position\":[1040,160],\"parameters\":{\"mode\":\"runOnceForEachItem\",\"jsCode\":\"function createField (\\n  label = '',\\n  type = '',\\n  options = {},\\n) {\\n  return {\\n    fieldLabel: label,\\n    fieldType: type,\\n    formatDate: options.formatDate,\\n    fieldOptions: options.choices ?  { values: options.choices } : undefined,\\n    requiredField: options.isRequired || true,\\n    placeholder: options.placeholder,\\n    multiselect: options.isMultipleSelect,\\n    multipleFiles: options.isMultipleFiles,\\n    acceptFileTypes: options.acceptFileType,\\n  }\\n};\\n\\n\\nconst { type, name, options } = $input.item.json;\\nlet field = null;\\n\\nswitch (type) {\\n  case 'singleLineText':\\n  case 'phoneNumber':\\n  case 'url': {\\n    field = createField(name, 'text');\\n    break;\\n  }\\n  case 'multilineText': {\\n    field = createField(name, 'textarea');\\n    break;\\n  }\\n  case 'number': {\\n    field = createField(name, 'number');\\n    break;\\n  }\\n  case 'email': {\\n    field = createField(name, 'email');\\n    break;\\n  }\\n  case 'dateTime': {\\n    field = createField(name, 'date', {\\n      formatDate: `yyyy-MM-dd HH:mm`\\n    });\\n    break;\\n  }\\n  case 'singleSelect':\\n  case 'multipleSelects': {\\n    field = createField(name, 'dropdown', {\\n      choices: options.choices.map(choice => ({ option: choice.name })),\\n      isMultipleSelect: type === 'multipleSelects'\\n    });\\n    break;\\n  }\\n  case 'checkbox': {\\n    field = createField(name, 'dropdown', {\\n      choices: [{ 'option': name }],\\n      isMultipleSelect: true\\n    });\\n    break;\\n  }\\n  case 'multipleAttachments': {\\n    field = createField(name, 'file', {\\n      isMultipleFiles: true,\\n    });\\n    break;\\n  }\\n  default:\\n}\\n\\nreturn { json: field || {} }\"},\"typeVersion\":2},{\"id\":\"f88924ed-288a-4790-a092-67bf74866217\",\"name\":\"Filter Table\",\"type\":\"n8n-nodes-base.filter\",\"position\":[600,160],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"d74b2ca6-da27-4f84-9e2c-6c1353921df9\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.id }}\",\"rightValue\":\"={{ $('On form submission').item.json.TableId }}\"}]}},\"typeVersion\":2.2},{\"id\":\"262eca82-3488-4a2d-9fc2-fe137253f72c\",\"name\":\"Baserow List Fields\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[420,460],\"parameters\":{\"url\":\"=https://api.baserow.io/api/database/fields/table/{{ $json.TableId }}/\",\"options\":{},\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\"},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"bRnXiQiL9kogLPl3\",\"name\":\"Baserow.io\"}},\"typeVersion\":4.2},{\"id\":\"933b8ee7-ec8f-4cca-af29-fb7eab8f581a\",\"name\":\"Covert to n8n Form Fields1\",\"type\":\"n8n-nodes-base.code\",\"position\":[1040,460],\"parameters\":{\"mode\":\"runOnceForEachItem\",\"jsCode\":\"function createField (\\n  label = '',\\n  type = '',\\n  options = {},\\n) {\\n  return {\\n    fieldLabel: label,\\n    fieldType: type,\\n    formatDate: options.formatDate,\\n    fieldOptions: options.choices ?  { values: options.choices } : undefined,\\n    requiredField: options.isRequired || true,\\n    placeholder: options.placeholder,\\n    multiselect: options.isMultipleSelect,\\n    multipleFiles: options.isMultipleFiles,\\n    acceptFileTypes: options.acceptFileType,\\n  }\\n};\\n\\n\\nconst { type, name, select_options } = $input.item.json;\\nlet field = null;\\n\\nswitch (type) {\\n  case 'text':\\n  case 'phone_number':\\n  case 'url': {\\n    field = createField(name, 'text');\\n    break;\\n  }\\n  case 'long_text': {\\n    field = createField(name, 'textarea');\\n    break;\\n  }\\n  case 'number': {\\n    field = createField(name, 'number');\\n    break;\\n  }\\n  case 'email': {\\n    field = createField(name, 'email');\\n    break;\\n  }\\n  case 'date': {\\n    field = createField(name, 'date', {\\n      formatDate: `yyyy-MM-dd HH:mm`\\n    });\\n    break;\\n  }\\n  case 'single_select':\\n  case 'multiple_select': {\\n    field = createField(name, 'dropdown', {\\n      choices: select_options.map(choice => ({\\n        option: choice.value\\n      })),\\n      isMultipleSelect: type === 'multiple_select'\\n    });\\n    break;\\n  }\\n  case 'boolean': {\\n    field = createField(name, 'dropdown', {\\n      choices: [{ 'option': name }],\\n      isMultipleSelect: true\\n    });\\n    break;\\n  }\\n  case 'file': {\\n    field = createField(name, 'file', {\\n      isMultipleFiles: true,\\n    });\\n    break;\\n  }\\n  default:\\n}\\n\\nreturn { json: field || {} }\"},\"typeVersion\":2},{\"id\":\"74dc5acf-0dc9-4898-bff4-3fe27f04fbc8\",\"name\":\"Combine Fields1\",\"type\":\"n8n-nodes-base.aggregate\",\"position\":[1400,460],\"parameters\":{\"options\":{},\"aggregate\":\"aggregateAllItemData\"},\"typeVersion\":1},{\"id\":\"73eccae5-377e-4a8e-91ed-2f24f47eca71\",\"name\":\"Filter Unsupported FieldTypes1\",\"type\":\"n8n-nodes-base.filter\",\"position\":[1220,460],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"72309d3f-cd52-4bfa-8b29-df0795e38d7f\",\"operator\":{\"type\":\"string\",\"operation\":\"exists\",\"singleValue\":true},\"leftValue\":\"={{ $json.fieldType }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"702354ad-a138-46b7-93c3-7bb431164c12\",\"name\":\"Render Form1\",\"type\":\"n8n-nodes-base.form\",\"position\":[1800,460],\"webhookId\":\"86e5d6db-20ee-4df5-b37a-38ac85e16b7d\",\"parameters\":{\"options\":{},\"defineForm\":\"json\",\"jsonOutput\":\"={{ $json.data }}\"},\"typeVersion\":1},{\"id\":\"158eee94-5ca9-432f-8020-3195eec243ee\",\"name\":\"Baserow Create Row\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2460,460],\"parameters\":{\"url\":\"=https://api.baserow.io/api/database/rows/table/{{ $('On form submission1').first().json.TableId }}/?user_field_names=true\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{ $json.toJsonString() }}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\"},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"bRnXiQiL9kogLPl3\",\"name\":\"Baserow.io\"}},\"typeVersion\":4.2},{\"id\":\"405030ad-af35-48ce-a1b5-61a7c8dfeb05\",\"name\":\"On form submission1\",\"type\":\"n8n-nodes-base.formTrigger\",\"position\":[80,460],\"webhookId\":\"8ef4e5d9-5d92-4a3d-8d44-adf35a4bde3a\",\"parameters\":{\"options\":{\"path\":\"baserow-n8n-form\"},\"formTitle\":\"Baserow to n8n Form\",\"formFields\":{\"values\":[{\"fieldType\":\"dropdown\",\"fieldLabel\":\"TableId\",\"fieldOptions\":{\"values\":[{\"option\":\"401709\"}]},\"requiredField\":true}]},\"formDescription\":\"This workflow creates an n8n form for a Baserow table.\"},\"typeVersion\":2.2},{\"id\":\"940e2015-cdfe-4fb9-841b-a25ef5903097\",\"name\":\"Files To List1\",\"type\":\"n8n-nodes-base.code\",\"position\":[2800,460],\"parameters\":{\"jsCode\":\"let results = [];\\n\\nconst fileInputs = $('Combine Fields1').first().json.data.filter(item => item.fieldType === 'file');\\n\\nif (!fileInputs.length) return [];\\n\\nconst { json, binary } = $('Render Form1').first();\\n\\nfor (fileInput of fileInputs) {\\n  const binaryKeys = Object.keys(binary).filter(key => key.startsWith(fileInput.fieldLabel));\\n  for (key of binaryKeys) {\\n    results.push({\\n      json: { fieldLabel: fileInput.fieldLabel },\\n      binary: {\\n          data: binary[key],\\n      }\\n    });\\n  }\\n}\\n\\nreturn results;\"},\"typeVersion\":2},{\"id\":\"dd18a5ff-230a-4b94-ab6f-a258fbf034e0\",\"name\":\"Baserow Upload File\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2980,460],\"parameters\":{\"url\":\"https://api.baserow.io/api/user-files/upload-file/\",\"method\":\"POST\",\"options\":{},\"sendBody\":true,\"contentType\":\"multipart-form-data\",\"authentication\":\"genericCredentialType\",\"bodyParameters\":{\"parameters\":[{\"name\":\"file\",\"parameterType\":\"formBinaryData\",\"inputDataFieldName\":\"data\"}]},\"genericAuthType\":\"httpHeaderAuth\"},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"bRnXiQiL9kogLPl3\",\"name\":\"Baserow.io\"}},\"typeVersion\":4.2},{\"id\":\"5679a086-d80d-4d55-89e4-1bea1626f561\",\"name\":\"Baserow Update Row\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[3340,460],\"parameters\":{\"url\":\"=https://api.baserow.io/api/database/rows/table/{{ $('On form submission1').first().json.TableId }}/{{ $('Baserow Create Row').first().json.id }}/?user_field_names=true\",\"method\":\"PATCH\",\"options\":{\"lowercaseHeaders\":false},\"jsonBody\":\"={{ $json.data.toJsonString() }}\",\"sendBody\":true,\"sendHeaders\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\",\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"}]}},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"bRnXiQiL9kogLPl3\",\"name\":\"Baserow.io\"}},\"executeOnce\":false,\"typeVersion\":4.2},{\"id\":\"3a3a2074-5d7d-4f42-bc52-8255f86483c5\",\"name\":\"Group By FieldName\",\"type\":\"n8n-nodes-base.code\",\"position\":[3160,460],\"parameters\":{\"jsCode\":\"const pairs = $input.all().map((item, idx) => ({\\n  field: $('Files To List1').itemMatching(idx).json.fieldLabel,\\n  file: item.json,\\n}));\\n\\nconst groups = {};\\npairs.forEach(pair => {\\n  if (!groups[pair.field]) groups[pair.field] = [];\\n  groups[pair.field].push({\\n    name: pair.file.name,\\n    visible_name: pair.file.original_name\\n  });\\n});\\n\\nreturn { json: { data: groups } };\"},\"typeVersion\":2},{\"id\":\"79480b76-6bc9-4786-9c67-3d0a2c36b8bd\",\"name\":\"Update Airtable Row\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[3340,160],\"parameters\":{\"url\":\"=https://content.airtable.com/v0/{{ $('On form submission').first().json.BaseId }}/{{ $('Airtable Create Record').first().json.id }}/{{ $json.fieldLabel }}/uploadAttachment\",\"method\":\"POST\",\"options\":{},\"sendBody\":true,\"authentication\":\"predefinedCredentialType\",\"bodyParameters\":{\"parameters\":[{\"name\":\"contentType\",\"value\":\"={{ $binary.data.mimeType }}\"},{\"name\":\"filename\",\"value\":\"={{ $binary.data.fileName }}\"},{\"name\":\"file\",\"value\":\"={{ $input.item.binary.data.data }}\"}]},\"nodeCredentialType\":\"airtableTokenApi\"},\"credentials\":{\"airtableTokenApi\":{\"id\":\"Und0frCQ6SNVX3VV\",\"name\":\"Airtable Personal Access Token account\"}},\"typeVersion\":4.2},{\"id\":\"94d20c33-d589-43db-aef2-afe3d4a3efcf\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-540,-200],\"parameters\":{\"width\":446.4999999999999,\"height\":834.0643999999993,\"content\":\"## Try It Out!\\n### This template is an example of how you could replace Airtable or Baserow forms with n8n forms. Though debateable whether this is actually useful, it is a cool demo of how someone would approach this if it every became a problem.\\n\\n## How it works\\n* A form trigger is used to dynamically select a database/table from which to build the n8n form from.\\n* the table's schema is imported into the workflow and using the code node, is converted into the n8n form fields schema.\\n* This let's us dynamically build the fields in our n8n form when we choose to define the form using the JSON option.\\n* Once the n8n form submits, we convert the values back into our table's API schema so that we can create a new row.\\n* Note any files/attachments fields are removed as they need to be handled separately.\\n* Files are processed separately as they may first need to be stored. Once complete, the reference is saved into the newly created row.\\n\\n\\n**Check out the example Airtable here** - [https://airtable.com/appfP15Xd0aVZR9xV/shrGFgXLyQ4Jg58SU](https://airtable.com/appfP15Xd0aVZR9xV/shrGFgXLyQ4Jg58SU)\\n\\n\\n⭐️ [**New to Airtable? Sign up here!**](https://airtable.com/invite/r/cKzxFYVc)\\n\\n## How to use\\n* The n8n form is autogenerated which means you only need provide access to the table. Using this approach, this template can be reused for any number of Airtable and/or Baserow tables.\\n\\n### Need Help?\\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\\n\\nHappy Hacking!\\n\"},\"typeVersion\":1},{\"id\":\"bf89ec64-0524-428a-b087-a563311b02d7\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[338,-20],\"parameters\":{\"color\":7,\"width\":600.75,\"height\":675.625,\"content\":\"## 1. Get Table Schema\\n\\n**Airtable** schema returns all tables with extra metadata whereas **Baserow** has a dedicated list fields endpoint for each table. This means for **Airtable**, we need to filter out the table we want and split out its fields array.\"},\"typeVersion\":1},{\"id\":\"c2b77c23-b2d4-46b1-8d59-8f8d950cfc70\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[967.5,-20],\"parameters\":{\"color\":7,\"width\":616.40625,\"height\":677.1875,\"content\":\"## 2. Convert To N8N Form Schema\\n\\nBoth products contain similar schema with only different field labels. This makes it quite simple to convert either to n8n's forms. JSON schema.\"},\"typeVersion\":1},{\"id\":\"1cb13171-5682-41e4-8976-1f3f6f5d2cf5\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1600,-20],\"parameters\":{\"color\":7,\"width\":483.015625,\"height\":677.1875,\"content\":\"## 3. Render as N8N Form\\n\\nDid you know you can build forms dynamically from JSON? Well, you can! This flexibility makes working with n8n forms strategic because you can conditionally exclude fields which may not apply to the user or the context.\"},\"typeVersion\":1},{\"id\":\"e2603a0c-0c0d-4702-998f-f1e3c2e9955b\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2100,-20],\"parameters\":{\"color\":7,\"width\":602.265625,\"height\":677.1875,\"content\":\"## 4. Create New Row\\n\\nBoth **Airtable** and **Baserow** accept field labels as body param keys when using their API however, files and attachments are handled separately. Here we omit any file fields \"},\"typeVersion\":1},{\"id\":\"42a4b3e1-2b18-4f19-a803-b6ff9ea8133b\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2720,-20],\"parameters\":{\"color\":7,\"width\":824.3125,\"height\":677.1875,\"content\":\"## 5. Upload Files & Attachments\\n\\n**Baserow** requires a 2 step process where the file is first uploaded and the returning reference is used to update the row. **Airtable** API allows upload and update of the row in one operation. The **Airtable** upload API also seems to work in an append fashion - each call adds to the attachments array - but **Baserow** uses replace approach meaning you need to upload the files in one go.\"},\"typeVersion\":1},{\"id\":\"356e3852-2268-41d0-ad83-e44d62cb6675\",\"name\":\"Sticky Note6\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[20,20],\"parameters\":{\"color\":5,\"width\":264.0997209302325,\"height\":99.50571162790695,\"content\":\"### AirTable Example\\n### 🚨 Change your Base ID and Table ID here!\"},\"typeVersion\":1},{\"id\":\"1e93967b-792d-4608-b7d3-eec5f84c2c8b\",\"name\":\"Sticky Note7\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[20,620],\"parameters\":{\"color\":5,\"width\":259.5844837209301,\"height\":80,\"content\":\"### BaseRow Example\\n### 🚨 Change your TableId here!\"},\"typeVersion\":1},{\"id\":\"84cf486e-15a5-4bb2-b62f-885056254944\",\"name\":\"Prep Data for Insert1\",\"type\":\"n8n-nodes-base.code\",\"position\":[2240,460],\"parameters\":{\"mode\":\"runOnceForEachItem\",\"jsCode\":\"const schema = $('Baserow List Fields').all().map(input => input.json);\\nconst data = $input.item.json;\\n\\n// 1. filter out file inputs\\nconst fileKeys = schema.filter(item => item.type === 'file').map(item => item.name);\\n\\nconst filteredData = Object.keys(data)\\n  .filter(key => !fileKeys.includes(key))\\n  .reduce((acc,key) => ({\\n    ...acc,\\n    [key]: data[key]\\n  }), {});\\n\\n// 2. typecast for boolean\\nconst booleanKeys = schema.filter(item => item.type === 'boolean').map(item => item.name);\\n\\nbooleanKeys.forEach(key => {\\n  if (filteredData[key] !== undefined) filteredData[key] = Boolean(filteredData[key]);\\n});\\n\\nreturn { json: filteredData }\\n\"},\"typeVersion\":2},{\"id\":\"68fd3129-7bfd-4d73-80b0-f5af51161dc2\",\"name\":\"Prep Data for Insert\",\"type\":\"n8n-nodes-base.code\",\"position\":[2240,160],\"parameters\":{\"mode\":\"runOnceForEachItem\",\"jsCode\":\"const schema = $('Fields to List').all().map(input => input.json);\\nconst data = $input.item.json;\\n\\n// 1. filter out file inputs\\nconst fileKeys = schema.filter(item => item.type === 'multipleAttachments').map(item => item.name);\\n\\nconst filteredData = schema\\n  .filter(field => !fileKeys.includes(field.name))\\n  .reduce((acc,field) => ({\\n    ...acc,\\n    [field.name]: data[field.name]\\n  }), {});\\n\\n// 2. typecast for boolean\\nconst booleanKeys = schema.filter(item => item.type === 'checkbox').map(item => item.name);\\n\\nbooleanKeys.forEach(key => {\\n  if (filteredData[key] !== undefined) filteredData[key] = Boolean(filteredData[key]);\\n});\\n\\nreturn { json: filteredData }\\n\"},\"typeVersion\":2},{\"id\":\"1a9fe02f-9100-453e-97d5-789d6c0f74dc\",\"name\":\"Airtable Create Record\",\"type\":\"n8n-nodes-base.airtable\",\"position\":[2460,160],\"parameters\":{\"base\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $('On form submission').first().json.BaseId }}\"},\"table\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $('On form submission').first().json.TableId }}\"},\"columns\":{\"value\":{\"Name\":\"={{ $json.Name }}\",\"Email\":\"={{ $json.Email }}\",\"Notes\":\"={{ $json.Notes }}\",\"Mobile\":\"={{ $json.Mobile }}\",\"Status\":\"={{ $json.Status }}\",\"Website\":\"={{ $json.Website }}\",\"Categories\":\"={{ $json.Categories }}\",\"Is Special?\":\"={{ $json[\\\"Is Special?\\\"].isNotEmpty() }}\",\"Target Date\":\"={{ $now.toISO() }}\",\"Retry Attempts\":\"={{ $json[\\\"Retry Attempts\\\"] }}\"},\"schema\":[{\"id\":\"Name\",\"type\":\"string\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Name\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Notes\",\"type\":\"string\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Notes\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Status\",\"type\":\"options\",\"display\":true,\"options\":[{\"name\":\"Todo\",\"value\":\"Todo\"},{\"name\":\"In progress\",\"value\":\"In progress\"},{\"name\":\"Done\",\"value\":\"Done\"}],\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Status\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Categories\",\"type\":\"array\",\"display\":true,\"options\":[{\"name\":\"Finance\",\"value\":\"Finance\"},{\"name\":\"Agriculture\",\"value\":\"Agriculture\"},{\"name\":\"Business Management\",\"value\":\"Business Management\"},{\"name\":\"Arts & Culture\",\"value\":\"Arts & Culture\"}],\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Categories\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Is Special?\",\"type\":\"boolean\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Is Special?\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Target Date\",\"type\":\"dateTime\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Target Date\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Mobile\",\"type\":\"string\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Mobile\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Email\",\"type\":\"string\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Email\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Website\",\"type\":\"string\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Website\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Retry Attempts\",\"type\":\"number\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Retry Attempts\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Attachments\",\"type\":\"array\",\"display\":true,\"removed\":true,\"readOnly\":false,\"required\":false,\"displayName\":\"Attachments\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"autoMapInputData\",\"matchingColumns\":[]},\"options\":{},\"operation\":\"create\"},\"credentials\":{\"airtableTokenApi\":{\"id\":\"Und0frCQ6SNVX3VV\",\"name\":\"Airtable Personal Access Token account\"}},\"typeVersion\":2.1},{\"id\":\"9e92dcf9-43ca-49df-8e53-8cfaea94ed96\",\"name\":\"Show Completion!\",\"type\":\"n8n-nodes-base.form\",\"position\":[3680,460],\"webhookId\":\"ebf678ed-c9eb-4365-afd1-bfebe03955c6\",\"parameters\":{\"options\":{},\"operation\":\"completion\",\"completionTitle\":\"Submission Complete!\",\"completionMessage\":\"Thanks for completing the form.\"},\"executeOnce\":true,\"typeVersion\":1},{\"id\":\"5dc56f6b-e218-45de-8875-542d9ff0cec3\",\"name\":\"Show Completion!1\",\"type\":\"n8n-nodes-base.form\",\"position\":[3680,160],\"webhookId\":\"ebf678ed-c9eb-4365-afd1-bfebe03955c6\",\"parameters\":{\"options\":{},\"operation\":\"completion\",\"completionTitle\":\"Submission Complete!\",\"completionMessage\":\"Thanks for completing the form.\"},\"executeOnce\":true,\"typeVersion\":1}],\"pinData\":{},\"connections\":{\"Render Form\":{\"main\":[[{\"node\":\"Prep Data for Insert\",\"type\":\"main\",\"index\":0}]]},\"Filter Table\":{\"main\":[[{\"node\":\"Fields to List\",\"type\":\"main\",\"index\":0}]]},\"Render Form1\":{\"main\":[[{\"node\":\"Prep Data for Insert1\",\"type\":\"main\",\"index\":0}]]},\"Files To List\":{\"main\":[[{\"node\":\"Update Airtable Row\",\"type\":\"main\",\"index\":0}]]},\"Combine Fields\":{\"main\":[[{\"node\":\"Render Form\",\"type\":\"main\",\"index\":0}]]},\"Fields to List\":{\"main\":[[{\"node\":\"Covert to n8n Form Fields\",\"type\":\"main\",\"index\":0}]]},\"Files To List1\":{\"main\":[[{\"node\":\"Baserow Upload File\",\"type\":\"main\",\"index\":0}]]},\"Combine Fields1\":{\"main\":[[{\"node\":\"Render Form1\",\"type\":\"main\",\"index\":0}]]},\"Get Base Schema\":{\"main\":[[{\"node\":\"Filter Table\",\"type\":\"main\",\"index\":0}]]},\"Baserow Create Row\":{\"main\":[[{\"node\":\"Files To List1\",\"type\":\"main\",\"index\":0}]]},\"Baserow Update Row\":{\"main\":[[{\"node\":\"Show Completion!\",\"type\":\"main\",\"index\":0}]]},\"Group By FieldName\":{\"main\":[[{\"node\":\"Baserow Update Row\",\"type\":\"main\",\"index\":0}]]},\"On form submission\":{\"main\":[[{\"node\":\"Get Base Schema\",\"type\":\"main\",\"index\":0}]]},\"Baserow List Fields\":{\"main\":[[{\"node\":\"Covert to n8n Form Fields1\",\"type\":\"main\",\"index\":0}]]},\"Baserow Upload File\":{\"main\":[[{\"node\":\"Group By FieldName\",\"type\":\"main\",\"index\":0}]]},\"On form submission1\":{\"main\":[[{\"node\":\"Baserow List Fields\",\"type\":\"main\",\"index\":0}]]},\"Update Airtable Row\":{\"main\":[[{\"node\":\"Show Completion!1\",\"type\":\"main\",\"index\":0}]]},\"Prep Data for Insert\":{\"main\":[[{\"node\":\"Airtable Create Record\",\"type\":\"main\",\"index\":0}]]},\"Prep Data for Insert1\":{\"main\":[[{\"node\":\"Baserow Create Row\",\"type\":\"main\",\"index\":0}]]},\"Airtable Create Record\":{\"main\":[[{\"node\":\"Files To List\",\"type\":\"main\",\"index\":0}]]},\"Covert to n8n Form Fields\":{\"main\":[[{\"node\":\"Filter Unsupported FieldTypes\",\"type\":\"main\",\"index\":0}]]},\"Covert to n8n Form Fields1\":{\"main\":[[{\"node\":\"Filter Unsupported FieldTypes1\",\"type\":\"main\",\"index\":0}]]},\"Filter Unsupported FieldTypes\":{\"main\":[[{\"node\":\"Combine Fields\",\"type\":\"main\",\"index\":0}]]},\"Filter Unsupported FieldTypes1\":{\"main\":[[{\"node\":\"Combine Fields1\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This n8n template showcases a cool feature of n8n Forms where the form itself can be defined dynamically using the [form fields schema](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.form/#defining-the-form-using-json).\n\nIt may be debateable how useful this template actually is since both [Airtable](https://airtable.com/invite/r/cKzxFYVc) and [Baserow](https://baserow.io) provide form interfaces already but still a great exercise and demonstration if ever the use-case comes around.\n\n## How it works\n\n  * A form trigger is used to dynamically select a database/table from which to build the n8n form from.\n  * the table's schema is imported into the workflow and using the code node, is converted into the n8n form fields schema.\n  * This let's us dynamically build the fields in our n8n form when we choose to define the form using the JSON option.\n  * Once the n8n form submits, we convert the values back into our table's API schema so that we can create a new row.\n  * Note any files/attachments fields are removed as they need to be handled separately.\n  * Files are processed separately as they may first need to be stored. Once complete, the reference is saved into the newly created row.\n\n\n\n**Check out the example Airtable here** \\- <https://airtable.com/appfP15Xd0aVZR9xV/shrGFgXLyQ4Jg58SU>\n\n## How to use\n\n  * The n8n form is autogenerated which means you only need provide access to the table. Using this approach, this template can be reused for any number of Airtable and/or Baserow tables.\n\n\n\n## Requirements\n\n  * You'll need either an [Airtable account](https://airtable.com/invite/r/cKzxFYVc) or a [Baserow](https://baserow.io) account to use this template.\n  * Accessible n8n instance to your users\n\n\n\n## Customising this workflow\n\n  * Not using either Airtable or Baserow? Theoretically any datastore which provides a fields schema can be used with this template.\n  * If you're feeling creative, split the table into multiple forms for a better user experience.\n\n\n",
  "crawled_at": "2025-05-26T00:27:10.335521",
  "readme_zh": "这个n8n模板展示了n8n表单的一项炫酷功能——通过[表单字段模式](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.form/#defining-the-form-using-json)动态定义表单结构。\n\n虽然[Airtable](https://airtable.com/invite/r/cKzxFYVc)和[Baserow](https://baserow.io)本身已提供表单界面，使得该模板的实际效用存疑，但它仍不失为应对特定场景的绝佳演练与功能示范。\n\n## 运作原理\n\n* 使用表单触发器动态选择数据库/数据表作为n8n表单构建源\n* 将数据表结构导入工作流，通过代码节点转换为n8n表单字段模式\n* 当选择JSON方式定义表单时，即可动态构建n8n表单字段\n* 表单提交后，将数据值转换回数据表API模式以创建新行\n* 注意：文件/附件字段需单独处理，故在此过程中会被移除\n* 文件需先存储后处理，最终将引用地址存入新建行\n\n**查看Airtable示例** \\- <https://airtable.com/appfP15Xd0aVZR9xV/shrGFgXLyQ4Jg58SU>\n\n## 使用方法\n\n* n8n表单为自动生成，仅需提供数据表访问权限。通过此方式，本模板可复用于任意数量的Airtable/Baserow数据表\n\n## 必备条件\n\n* 需拥有[Airtable账户](https://airtable.com/invite/r/cKzxFYVc)或[Baserow账户](https://baserow.io)\n* 用户可访问的n8n实例\n\n## 自定义调整\n\n* 非Airtable/Baserow用户？理论上任何提供字段模式的数据存储都可适配本模板\n* 进阶技巧：可将数据表拆分为多个表单以优化用户体验",
  "title_zh": "从Airtable和BaseRow表格生成n8n表单",
  "publish_date_zh": "最后更新于5个月前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"266ebce9-540d-4fd8-95c2-2799f0eff8d9\",\n      \"name\": \"Get Base Schema\",\n      \"type\": \"n8n-nodes-base.airtable\",\n      \"position\": [\n        420,\n        160\n      ],\n      \"parameters\": {\n        \"base\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $json.BaseId }}\"\n        },\n        \"resource\": \"base\",\n        \"operation\": \"getSchema\"\n      },\n      \"credentials\": {\n        \"airtableTokenApi\": {\n          \"id\": \"Und0frCQ6SNVX3VV\",\n          \"name\": \"Airtable Personal Access Token account\"\n        }\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"1c33d0db-6eac-4638-8b5e-867ec52abd11\",\n      \"name\": \"On form submission\",\n      \"type\": \"n8n-nodes-base.formTrigger\",\n      \"position\": [\n        80,\n        160\n      ],\n      \"webhookId\": \"a6daabfe-5507-4ac1-9345-45a59ba67630\",\n      \"parameters\": {\n        \"options\": {\n          \"path\": \"airtable-n8n-form\",\n          \"ignoreBots\": true\n        },\n        \"formTitle\": \"Airtable to n8n Form\",\n        \"formFields\": {\n          \"values\": [\n            {\n              \"fieldType\": \"dropdown\",\n              \"fieldLabel\": \"BaseId\",\n              \"fieldOptions\": {\n                \"values\": [\n                  {\n                    \"option\": \"appfP15Xd0aVZR9xV\"\n                  }\n                ]\n              },\n              \"requiredField\": true\n            },\n            {\n              \"fieldType\": \"dropdown\",\n              \"fieldLabel\": \"TableId\",\n              \"fieldOptions\": {\n                \"values\": [\n                  {\n                    \"option\": \"tblBuJjQmTZL0MI8U\"\n                  }\n                ]\n              },\n              \"requiredField\": true\n            }\n          ]\n        },\n        \"formDescription\": \"This workflow creates an n8n form for an Airtable base.\"\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"fef7c4f2-0153-4321-a0a4-700b84f27a0b\",\n      \"name\": \"Filter Unsupported FieldTypes\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        1220,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"72309d3f-cd52-4bfa-8b29-df0795e38d7f\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"exists\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.fieldType }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"b62f82bd-781b-4b41-83a1-57423e639c5e\",\n      \"name\": \"Combine Fields\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        1400,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"aggregate\": \"aggregateAllItemData\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b38ef15c-0098-47d9-964e-50466f4cd7fa\",\n      \"name\": \"Render Form\",\n      \"type\": \"n8n-nodes-base.form\",\n      \"position\": [\n        1800,\n        160\n      ],\n      \"webhookId\": \"86e5d6db-20ee-4df5-b37a-38ac85e16b7d\",\n      \"parameters\": {\n        \"options\": {},\n        \"defineForm\": \"json\",\n        \"jsonOutput\": \"={{ $json.data }}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"00bb7ad8-0457-4c38-a430-d9a1cd41d5fe\",\n      \"name\": \"Files To List\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        3160,\n        160\n      ],\n      \"parameters\": {\n        \"jsCode\": \"let results = [];\\n\\nconst fileInputs = $('Combine Fields').first().json.data.filter(item => item.fieldType === 'file');\\n\\nif (!fileInputs.length) return [];\\n\\nconst { json, binary } = $('Render Form').first();\\n\\nfor (fileInput of fileInputs) {\\n  const binaryKeys = Object.keys(binary).filter(key => key.startsWith(fileInput.fieldLabel));\\n  for (key of binaryKeys) {\\n    results.push({\\n      json: { fieldLabel: fileInput.fieldLabel },\\n      binary: {\\n          data: binary[key],\\n      }\\n    });\\n  }\\n}\\n\\nreturn results;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"5f570811-ace9-489b-8889-d9686fe398f7\",\n      \"name\": \"Fields to List\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        780,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldToSplitOut\": \"fields\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e3d222de-9673-4529-8a7c-8a16071b3ac9\",\n      \"name\": \"Covert to n8n Form Fields\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1040,\n        160\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"function createField (\\n  label = '',\\n  type = '',\\n  options = {},\\n) {\\n  return {\\n    fieldLabel: label,\\n    fieldType: type,\\n    formatDate: options.formatDate,\\n    fieldOptions: options.choices ?  { values: options.choices } : undefined,\\n    requiredField: options.isRequired || true,\\n    placeholder: options.placeholder,\\n    multiselect: options.isMultipleSelect,\\n    multipleFiles: options.isMultipleFiles,\\n    acceptFileTypes: options.acceptFileType,\\n  }\\n};\\n\\n\\nconst { type, name, options } = $input.item.json;\\nlet field = null;\\n\\nswitch (type) {\\n  case 'singleLineText':\\n  case 'phoneNumber':\\n  case 'url': {\\n    field = createField(name, 'text');\\n    break;\\n  }\\n  case 'multilineText': {\\n    field = createField(name, 'textarea');\\n    break;\\n  }\\n  case 'number': {\\n    field = createField(name, 'number');\\n    break;\\n  }\\n  case 'email': {\\n    field = createField(name, 'email');\\n    break;\\n  }\\n  case 'dateTime': {\\n    field = createField(name, 'date', {\\n      formatDate: `yyyy-MM-dd HH:mm`\\n    });\\n    break;\\n  }\\n  case 'singleSelect':\\n  case 'multipleSelects': {\\n    field = createField(name, 'dropdown', {\\n      choices: options.choices.map(choice => ({ option: choice.name })),\\n      isMultipleSelect: type === 'multipleSelects'\\n    });\\n    break;\\n  }\\n  case 'checkbox': {\\n    field = createField(name, 'dropdown', {\\n      choices: [{ 'option': name }],\\n      isMultipleSelect: true\\n    });\\n    break;\\n  }\\n  case 'multipleAttachments': {\\n    field = createField(name, 'file', {\\n      isMultipleFiles: true,\\n    });\\n    break;\\n  }\\n  default:\\n}\\n\\nreturn { json: field || {} }\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"f88924ed-288a-4790-a092-67bf74866217\",\n      \"name\": \"Filter Table\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        600,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"d74b2ca6-da27-4f84-9e2c-6c1353921df9\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.id }}\",\n              \"rightValue\": \"={{ $('On form submission').item.json.TableId }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"262eca82-3488-4a2d-9fc2-fe137253f72c\",\n      \"name\": \"Baserow List Fields\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        420,\n        460\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.baserow.io/api/database/fields/table/{{ $json.TableId }}/\",\n        \"options\": {},\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"bRnXiQiL9kogLPl3\",\n          \"name\": \"Baserow.io\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"933b8ee7-ec8f-4cca-af29-fb7eab8f581a\",\n      \"name\": \"Covert to n8n Form Fields1\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1040,\n        460\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"function createField (\\n  label = '',\\n  type = '',\\n  options = {},\\n) {\\n  return {\\n    fieldLabel: label,\\n    fieldType: type,\\n    formatDate: options.formatDate,\\n    fieldOptions: options.choices ?  { values: options.choices } : undefined,\\n    requiredField: options.isRequired || true,\\n    placeholder: options.placeholder,\\n    multiselect: options.isMultipleSelect,\\n    multipleFiles: options.isMultipleFiles,\\n    acceptFileTypes: options.acceptFileType,\\n  }\\n};\\n\\n\\nconst { type, name, select_options } = $input.item.json;\\nlet field = null;\\n\\nswitch (type) {\\n  case 'text':\\n  case 'phone_number':\\n  case 'url': {\\n    field = createField(name, 'text');\\n    break;\\n  }\\n  case 'long_text': {\\n    field = createField(name, 'textarea');\\n    break;\\n  }\\n  case 'number': {\\n    field = createField(name, 'number');\\n    break;\\n  }\\n  case 'email': {\\n    field = createField(name, 'email');\\n    break;\\n  }\\n  case 'date': {\\n    field = createField(name, 'date', {\\n      formatDate: `yyyy-MM-dd HH:mm`\\n    });\\n    break;\\n  }\\n  case 'single_select':\\n  case 'multiple_select': {\\n    field = createField(name, 'dropdown', {\\n      choices: select_options.map(choice => ({\\n        option: choice.value\\n      })),\\n      isMultipleSelect: type === 'multiple_select'\\n    });\\n    break;\\n  }\\n  case 'boolean': {\\n    field = createField(name, 'dropdown', {\\n      choices: [{ 'option': name }],\\n      isMultipleSelect: true\\n    });\\n    break;\\n  }\\n  case 'file': {\\n    field = createField(name, 'file', {\\n      isMultipleFiles: true,\\n    });\\n    break;\\n  }\\n  default:\\n}\\n\\nreturn { json: field || {} }\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"74dc5acf-0dc9-4898-bff4-3fe27f04fbc8\",\n      \"name\": \"Combine Fields1\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        1400,\n        460\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"aggregate\": \"aggregateAllItemData\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"73eccae5-377e-4a8e-91ed-2f24f47eca71\",\n      \"name\": \"Filter Unsupported FieldTypes1\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        1220,\n        460\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"72309d3f-cd52-4bfa-8b29-df0795e38d7f\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"exists\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.fieldType }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"702354ad-a138-46b7-93c3-7bb431164c12\",\n      \"name\": \"Render Form1\",\n      \"type\": \"n8n-nodes-base.form\",\n      \"position\": [\n        1800,\n        460\n      ],\n      \"webhookId\": \"86e5d6db-20ee-4df5-b37a-38ac85e16b7d\",\n      \"parameters\": {\n        \"options\": {},\n        \"defineForm\": \"json\",\n        \"jsonOutput\": \"={{ $json.data }}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"158eee94-5ca9-432f-8020-3195eec243ee\",\n      \"name\": \"Baserow Create Row\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2460,\n        460\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.baserow.io/api/database/rows/table/{{ $('On form submission1').first().json.TableId }}/?user_field_names=true\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={{ $json.toJsonString() }}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"bRnXiQiL9kogLPl3\",\n          \"name\": \"Baserow.io\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"405030ad-af35-48ce-a1b5-61a7c8dfeb05\",\n      \"name\": \"On form submission1\",\n      \"type\": \"n8n-nodes-base.formTrigger\",\n      \"position\": [\n        80,\n        460\n      ],\n      \"webhookId\": \"8ef4e5d9-5d92-4a3d-8d44-adf35a4bde3a\",\n      \"parameters\": {\n        \"options\": {\n          \"path\": \"baserow-n8n-form\"\n        },\n        \"formTitle\": \"Baserow to n8n Form\",\n        \"formFields\": {\n          \"values\": [\n            {\n              \"fieldType\": \"dropdown\",\n              \"fieldLabel\": \"TableId\",\n              \"fieldOptions\": {\n                \"values\": [\n                  {\n                    \"option\": \"401709\"\n                  }\n                ]\n              },\n              \"requiredField\": true\n            }\n          ]\n        },\n        \"formDescription\": \"This workflow creates an n8n form for a Baserow table.\"\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"940e2015-cdfe-4fb9-841b-a25ef5903097\",\n      \"name\": \"Files To List1\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2800,\n        460\n      ],\n      \"parameters\": {\n        \"jsCode\": \"let results = [];\\n\\nconst fileInputs = $('Combine Fields1').first().json.data.filter(item => item.fieldType === 'file');\\n\\nif (!fileInputs.length) return [];\\n\\nconst { json, binary } = $('Render Form1').first();\\n\\nfor (fileInput of fileInputs) {\\n  const binaryKeys = Object.keys(binary).filter(key => key.startsWith(fileInput.fieldLabel));\\n  for (key of binaryKeys) {\\n    results.push({\\n      json: { fieldLabel: fileInput.fieldLabel },\\n      binary: {\\n          data: binary[key],\\n      }\\n    });\\n  }\\n}\\n\\nreturn results;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"dd18a5ff-230a-4b94-ab6f-a258fbf034e0\",\n      \"name\": \"Baserow Upload File\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2980,\n        460\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.baserow.io/api/user-files/upload-file/\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"contentType\": \"multipart-form-data\",\n        \"authentication\": \"genericCredentialType\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"file\",\n              \"parameterType\": \"formBinaryData\",\n              \"inputDataFieldName\": \"data\"\n            }\n          ]\n        },\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"bRnXiQiL9kogLPl3\",\n          \"name\": \"Baserow.io\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"5679a086-d80d-4d55-89e4-1bea1626f561\",\n      \"name\": \"Baserow Update Row\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        3340,\n        460\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.baserow.io/api/database/rows/table/{{ $('On form submission1').first().json.TableId }}/{{ $('Baserow Create Row').first().json.id }}/?user_field_names=true\",\n        \"method\": \"PATCH\",\n        \"options\": {\n          \"lowercaseHeaders\": false\n        },\n        \"jsonBody\": \"={{ $json.data.toJsonString() }}\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"bRnXiQiL9kogLPl3\",\n          \"name\": \"Baserow.io\"\n        }\n      },\n      \"executeOnce\": false,\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"3a3a2074-5d7d-4f42-bc52-8255f86483c5\",\n      \"name\": \"Group By FieldName\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        3160,\n        460\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const pairs = $input.all().map((item, idx) => ({\\n  field: $('Files To List1').itemMatching(idx).json.fieldLabel,\\n  file: item.json,\\n}));\\n\\nconst groups = {};\\npairs.forEach(pair => {\\n  if (!groups[pair.field]) groups[pair.field] = [];\\n  groups[pair.field].push({\\n    name: pair.file.name,\\n    visible_name: pair.file.original_name\\n  });\\n});\\n\\nreturn { json: { data: groups } };\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"79480b76-6bc9-4786-9c67-3d0a2c36b8bd\",\n      \"name\": \"Update Airtable Row\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        3340,\n        160\n      ],\n      \"parameters\": {\n        \"url\": \"=https://content.airtable.com/v0/{{ $('On form submission').first().json.BaseId }}/{{ $('Airtable Create Record').first().json.id }}/{{ $json.fieldLabel }}/uploadAttachment\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"authentication\": \"predefinedCredentialType\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"contentType\",\n              \"value\": \"={{ $binary.data.mimeType }}\"\n            },\n            {\n              \"name\": \"filename\",\n              \"value\": \"={{ $binary.data.fileName }}\"\n            },\n            {\n              \"name\": \"file\",\n              \"value\": \"={{ $input.item.binary.data.data }}\"\n            }\n          ]\n        },\n        \"nodeCredentialType\": \"airtableTokenApi\"\n      },\n      \"credentials\": {\n        \"airtableTokenApi\": {\n          \"id\": \"Und0frCQ6SNVX3VV\",\n          \"name\": \"Airtable Personal Access Token account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"94d20c33-d589-43db-aef2-afe3d4a3efcf\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -540,\n        -200\n      ],\n      \"parameters\": {\n        \"width\": 446.4999999999999,\n        \"height\": 834.0643999999993,\n        \"content\": \"## 动手试试吧！\\n### 本模板展示了如何用n8n表单替代Airtable或Baserow表单。虽然这种替换是否有实际价值尚可商榷，但它精彩演示了遇到此类需求时的解决思路。\\n\\n## 实现原理\\n* 通过表单触发器动态选择数据库/数据表，并据此构建n8n表单\\n* 将数据表结构导入工作流，经代码节点转换为n8n表单字段结构\\n* 当选择JSON模式定义表单时，即可动态生成字段配置\\n* 表单提交后，将返回值转换回数据表API结构以创建新行\\n* 注意：文件/附件字段需单独处理，此处会被移除\\n* 文件需先存储后处理，最终将引用地址存入新建行\\n\\n**查看Airtable示例** - [https://airtable.com/appfP15Xd0aVZR9xV/shrGFgXLyQ4Jg58SU](https://airtable.com/appfP15Xd0aVZR9xV/shrGFgXLyQ4Jg58SU)\\n\\n⭐️ [**初次使用Airtable？点此注册！**](https://airtable.com/invite/r/cKzxFYVc)\\n\\n## 使用指南\\n* n8n表单支持自动生成，您只需提供数据表访问权限。采用此方案，本模板可复用于任意Airtable/Baserow数据表。\\n\\n### 需要帮助？\\n加入[Discord社区](https://discord.com/invite/XPKeKXeB7d) 或访问[官方论坛](https://community.n8n.io/)！\\n\\n祝您探索愉快！\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"bf89ec64-0524-428a-b087-a563311b02d7\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        338,\n        -20\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 600.75,\n        \"height\": 675.625,\n        \"content\": \"## 1. 获取表结构\\n\\n**Airtable**的架构会返回包含额外元数据的所有表，而**Baserow**则为每个表提供了专门的字段列表端点。这意味着对于**Airtable**，我们需要筛选出所需的表并分离出其字段数组。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c2b77c23-b2d4-46b1-8d59-8f8d950cfc70\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        967.5,\n        -20\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 616.40625,\n        \"height\": 677.1875,\n        \"content\": \"## 2. 转换为N8N表单模式\\n\\n两种产品包含的模式相似，仅字段标签不同。这使得将它们转换为n8n的表单JSON模式相当简单。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"1cb13171-5682-41e4-8976-1f3f6f5d2cf5\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1600,\n        -20\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 483.015625,\n        \"height\": 677.1875,\n        \"content\": \"## 3. 以N8N表单形式呈现\\n\\n您知道吗？您可以通过JSON动态构建表单。没错，确实可以！这种灵活性使得使用n8n表单具有策略性优势，因为您可以根据条件排除可能不适用于用户或特定上下文的字段。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e2603a0c-0c0d-4702-998f-f1e3c2e9955b\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2100,\n        -20\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 602.265625,\n        \"height\": 677.1875,\n        \"content\": \"## 4. 创建新行\\n\\n**Airtable** 和 **Baserow** 在使用 API 时都接受将字段标签作为请求体的参数键，但文件和附件会单独处理。此处我们省略了所有文件字段。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"42a4b3e1-2b18-4f19-a803-b6ff9ea8133b\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2720,\n        -20\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 824.3125,\n        \"height\": 677.1875,\n        \"content\": \"## 5. 上传文件与附件\\n\\n**Baserow** 需要分两步操作：首先上传文件，然后使用返回的引用更新行记录。而 **Airtable** API 允许通过单次操作同时完成上传和行记录更新。**Airtable** 的上传接口采用追加模式——每次调用都会向附件数组添加新内容——但 **Baserow** 采用替换机制，这意味着您需要一次性上传所有文件。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"356e3852-2268-41d0-ad83-e44d62cb6675\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        20,\n        20\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 264.0997209302325,\n        \"height\": 99.50571162790695,\n        \"content\": \"### AirTable 示例\\n### 🚨 在此处更改您的基础ID和表格ID！\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"1e93967b-792d-4608-b7d3-eec5f84c2c8b\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        20,\n        620\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 259.5844837209301,\n        \"height\": 80,\n        \"content\": \"### 基础行示例\\n### 🚨 在此处更改您的表格ID！\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"84cf486e-15a5-4bb2-b62f-885056254944\",\n      \"name\": \"Prep Data for Insert1\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2240,\n        460\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"const schema = $('Baserow List Fields').all().map(input => input.json);\\nconst data = $input.item.json;\\n\\n// 1. filter out file inputs\\nconst fileKeys = schema.filter(item => item.type === 'file').map(item => item.name);\\n\\nconst filteredData = Object.keys(data)\\n  .filter(key => !fileKeys.includes(key))\\n  .reduce((acc,key) => ({\\n    ...acc,\\n    [key]: data[key]\\n  }), {});\\n\\n// 2. typecast for boolean\\nconst booleanKeys = schema.filter(item => item.type === 'boolean').map(item => item.name);\\n\\nbooleanKeys.forEach(key => {\\n  if (filteredData[key] !== undefined) filteredData[key] = Boolean(filteredData[key]);\\n});\\n\\nreturn { json: filteredData }\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"68fd3129-7bfd-4d73-80b0-f5af51161dc2\",\n      \"name\": \"Prep Data for Insert\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2240,\n        160\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"const schema = $('Fields to List').all().map(input => input.json);\\nconst data = $input.item.json;\\n\\n// 1. filter out file inputs\\nconst fileKeys = schema.filter(item => item.type === 'multipleAttachments').map(item => item.name);\\n\\nconst filteredData = schema\\n  .filter(field => !fileKeys.includes(field.name))\\n  .reduce((acc,field) => ({\\n    ...acc,\\n    [field.name]: data[field.name]\\n  }), {});\\n\\n// 2. typecast for boolean\\nconst booleanKeys = schema.filter(item => item.type === 'checkbox').map(item => item.name);\\n\\nbooleanKeys.forEach(key => {\\n  if (filteredData[key] !== undefined) filteredData[key] = Boolean(filteredData[key]);\\n});\\n\\nreturn { json: filteredData }\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"1a9fe02f-9100-453e-97d5-789d6c0f74dc\",\n      \"name\": \"Airtable Create Record\",\n      \"type\": \"n8n-nodes-base.airtable\",\n      \"position\": [\n        2460,\n        160\n      ],\n      \"parameters\": {\n        \"base\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $('On form submission').first().json.BaseId }}\"\n        },\n        \"table\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $('On form submission').first().json.TableId }}\"\n        },\n        \"columns\": {\n          \"value\": {\n            \"Name\": \"={{ $json.Name }}\",\n            \"Email\": \"={{ $json.Email }}\",\n            \"Notes\": \"={{ $json.Notes }}\",\n            \"Mobile\": \"={{ $json.Mobile }}\",\n            \"Status\": \"={{ $json.Status }}\",\n            \"Website\": \"={{ $json.Website }}\",\n            \"Categories\": \"={{ $json.Categories }}\",\n            \"Is Special?\": \"={{ $json[\\\"Is Special?\\\"].isNotEmpty() }}\",\n            \"Target Date\": \"={{ $now.toISO() }}\",\n            \"Retry Attempts\": \"={{ $json[\\\"Retry Attempts\\\"] }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"Name\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Name\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Notes\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Notes\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Status\",\n              \"type\": \"options\",\n              \"display\": true,\n              \"options\": [\n                {\n                  \"name\": \"Todo\",\n                  \"value\": \"Todo\"\n                },\n                {\n                  \"name\": \"In progress\",\n                  \"value\": \"In progress\"\n                },\n                {\n                  \"name\": \"Done\",\n                  \"value\": \"Done\"\n                }\n              ],\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Status\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Categories\",\n              \"type\": \"array\",\n              \"display\": true,\n              \"options\": [\n                {\n                  \"name\": \"Finance\",\n                  \"value\": \"Finance\"\n                },\n                {\n                  \"name\": \"Agriculture\",\n                  \"value\": \"Agriculture\"\n                },\n                {\n                  \"name\": \"Business Management\",\n                  \"value\": \"Business Management\"\n                },\n                {\n                  \"name\": \"Arts & Culture\",\n                  \"value\": \"Arts & Culture\"\n                }\n              ],\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Categories\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Is Special?\",\n              \"type\": \"boolean\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Is Special?\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Target Date\",\n              \"type\": \"dateTime\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Target Date\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Mobile\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Mobile\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Email\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Email\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Website\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Website\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Retry Attempts\",\n              \"type\": \"number\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Retry Attempts\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Attachments\",\n              \"type\": \"array\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Attachments\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"autoMapInputData\",\n          \"matchingColumns\": []\n        },\n        \"options\": {},\n        \"operation\": \"create\"\n      },\n      \"credentials\": {\n        \"airtableTokenApi\": {\n          \"id\": \"Und0frCQ6SNVX3VV\",\n          \"name\": \"Airtable Personal Access Token account\"\n        }\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"9e92dcf9-43ca-49df-8e53-8cfaea94ed96\",\n      \"name\": \"Show Completion!\",\n      \"type\": \"n8n-nodes-base.form\",\n      \"position\": [\n        3680,\n        460\n      ],\n      \"webhookId\": \"ebf678ed-c9eb-4365-afd1-bfebe03955c6\",\n      \"parameters\": {\n        \"options\": {},\n        \"operation\": \"completion\",\n        \"completionTitle\": \"Submission Complete!\",\n        \"completionMessage\": \"Thanks for completing the form.\"\n      },\n      \"executeOnce\": true,\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5dc56f6b-e218-45de-8875-542d9ff0cec3\",\n      \"name\": \"Show Completion!1\",\n      \"type\": \"n8n-nodes-base.form\",\n      \"position\": [\n        3680,\n        160\n      ],\n      \"webhookId\": \"ebf678ed-c9eb-4365-afd1-bfebe03955c6\",\n      \"parameters\": {\n        \"options\": {},\n        \"operation\": \"completion\",\n        \"completionTitle\": \"Submission Complete!\",\n        \"completionMessage\": \"Thanks for completing the form.\"\n      },\n      \"executeOnce\": true,\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Render Form\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prep Data for Insert\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filter Table\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Fields to List\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Render Form1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prep Data for Insert1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Files To List\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Update Airtable Row\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Combine Fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Render Form\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Fields to List\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Covert to n8n Form Fields\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Files To List1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Baserow Upload File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Combine Fields1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Render Form1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Base Schema\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filter Table\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Baserow Create Row\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Files To List1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Baserow Update Row\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Show Completion!\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Group By FieldName\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Baserow Update Row\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"On form submission\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Base Schema\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Baserow List Fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Covert to n8n Form Fields1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Baserow Upload File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Group By FieldName\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"On form submission1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Baserow List Fields\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Update Airtable Row\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Show Completion!1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prep Data for Insert\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Airtable Create Record\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prep Data for Insert1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Baserow Create Row\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Airtable Create Record\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Files To List\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Covert to n8n Form Fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filter Unsupported FieldTypes\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Covert to n8n Form Fields1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filter Unsupported FieldTypes1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filter Unsupported FieldTypes\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Combine Fields\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filter Unsupported FieldTypes1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Combine Fields1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}