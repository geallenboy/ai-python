{
  "url": "https://n8n.io/workflows/378-tiny-tiny-rss-aka-tt-rss-feed-to-mastodon/",
  "title": "Tiny tiny Rss (aka tt-rss) Feed to Mastodon",
  "author": "dev",
  "publish_date": "Last update 10 months ago",
  "publish_date_absolute": "2024-07-25",
  "categories": [
    {
      "name": "Other"
    }
  ],
  "workflow_json": "{\"id\":\"2\",\"name\":\"post to mattermost v2\",\"nodes\":[{\"name\":\"RSS Feed Read\",\"type\":\"n8n-nodes-base.rssFeedRead\",\"position\":[580,150],\"parameters\":{\"url\":\"{HERE YOUR TINY TINY RSS PUBLIC FEED}\"},\"typeVersion\":1},{\"name\":\"HTTP Request\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1170,90],\"parameters\":{\"url\":\"=https://{HERE YOUR MASTONDON INSTANCE URL}/api/v1/statuses?access_token={HERE YOUR MASTODON ACCESS TOKEN}\",\"options\":{},\"requestMethod\":\"POST\",\"queryParametersUi\":{\"parameter\":[{\"name\":\"status\",\"value\":\"={{$node[\\\"RSS Feed Read\\\"].json[\\\"title\\\"]}} \\n{{$node[\\\"RSS Feed Read\\\"].json[\\\"link\\\"]}}\"}]}},\"typeVersion\":1},{\"name\":\"Cron\",\"type\":\"n8n-nodes-base.cron\",\"position\":[400,150],\"parameters\":{\"triggerTimes\":{\"item\":[{\"mode\":\"everyX\",\"unit\":\"minutes\",\"value\":10}]}},\"typeVersion\":1},{\"name\":\"Function\",\"type\":\"n8n-nodes-base.function\",\"position\":[790,150],\"parameters\":{\"functionCode\":\"// Get the global workflow static data\\nconst staticData = getWorkflowStaticData('global');\\n\\n// Access its data\\nconst lastRssId = staticData.lastRssId\\n\\nlet list = []\\n\\n\\nfor (const item of $items(\\\"RSS Feed Read\\\")){\\n  let currentId = item.json[\\\"id\\\"].split('/').pop()\\n  if(currentId == lastRssId) break;\\n  list.push({'json': {\\n    'id': currentId,\\n    'lastId': lastRssId,\\n    'title': item.json[\\\"title\\\"],\\n    'url': item.json[\\\"link\\\"]\\n  }})\\n}\\n\\n\\n// Get the last ID from Rss Feed\\nlet currentRssId = $item(0).$node[\\\"RSS Feed Read\\\"].json[\\\"id\\\"].split('/').pop()\\n\\n// TODO: make a loop to get all the items beyond the last saved id\\nif(!lastRssId || currentRssId != lastRssId)\\n{  \\n  // Update its data\\n  staticData.lastRssId = currentRssId;\\n  \\n}\\nelse { list = [{'json':{'id': 'NaN', 'lastId': staticData.lastRssId }}] }\\nreturn list;\\n\\n\"},\"typeVersion\":1},{\"name\":\"IF\",\"type\":\"n8n-nodes-base.if\",\"position\":[960,150],\"parameters\":{\"conditions\":{\"string\":[{\"value1\":\"={{$node[\\\"Function\\\"].json[\\\"id\\\"]}}\",\"value2\":\"NaN\",\"operation\":\"notEqual\"}],\"boolean\":[]}},\"typeVersion\":1},{\"name\":\"NoOp\",\"type\":\"n8n-nodes-base.noOp\",\"position\":[1180,280],\"parameters\":{},\"typeVersion\":1}],\"active\":true,\"settings\":{},\"connections\":{\"IF\":{\"main\":[[{\"node\":\"HTTP Request\",\"type\":\"main\",\"index\":0}],[{\"node\":\"NoOp\",\"type\":\"main\",\"index\":0}]]},\"Cron\":{\"main\":[[{\"node\":\"RSS Feed Read\",\"type\":\"main\",\"index\":0}]]},\"Function\":{\"main\":[[{\"node\":\"IF\",\"type\":\"main\",\"index\":0}]]},\"RSS Feed Read\":{\"main\":[[{\"node\":\"Function\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "Every 10 minutes look at your published news in your Tiny tiny RSS public feed and make a toot on your mastodon.\n\nYou'll need:\n\n  * Your mastondon URL instance\n  * Your mastondon access token\n  * Your Tiny Tiny RSS public published feed URL\n\n\n",
  "crawled_at": "2025-05-25T18:03:06.180261",
  "readme_zh": "每隔10分钟查看一次你Tiny Tiny RSS公开订阅源中发布的新闻，并在Mastodon上发一条嘟文。\n\n你需要准备：\n\n  * 你的Mastodon实例网址\n  * 你的Mastodon访问令牌\n  * 你的Tiny Tiny RSS公开发布订阅源链接",
  "title_zh": "小小RSS（又称tt-rss）订阅转至Mastodon",
  "publish_date_zh": "最后更新于10个月前",
  "workflow_json_zh": "{\n  \"id\": \"2\",\n  \"name\": \"post to mattermost v2\",\n  \"nodes\": [\n    {\n      \"name\": \"RSS Feed Read\",\n      \"type\": \"n8n-nodes-base.rssFeedRead\",\n      \"position\": [\n        580,\n        150\n      ],\n      \"parameters\": {\n        \"url\": \"{HERE YOUR TINY TINY RSS PUBLIC FEED}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"HTTP Request\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1170,\n        90\n      ],\n      \"parameters\": {\n        \"url\": \"=https://{HERE YOUR MASTONDON INSTANCE URL}/api/v1/statuses?access_token={HERE YOUR MASTODON ACCESS TOKEN}\",\n        \"options\": {},\n        \"requestMethod\": \"POST\",\n        \"queryParametersUi\": {\n          \"parameter\": [\n            {\n              \"name\": \"status\",\n              \"value\": \"={{$node[\\\"RSS Feed Read\\\"].json[\\\"title\\\"]}} \\n{{$node[\\\"RSS Feed Read\\\"].json[\\\"link\\\"]}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Cron\",\n      \"type\": \"n8n-nodes-base.cron\",\n      \"position\": [\n        400,\n        150\n      ],\n      \"parameters\": {\n        \"triggerTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"everyX\",\n              \"unit\": \"minutes\",\n              \"value\": 10\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Function\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        790,\n        150\n      ],\n      \"parameters\": {\n        \"functionCode\": \"// Get the global workflow static data\\nconst staticData = getWorkflowStaticData('global');\\n\\n// Access its data\\nconst lastRssId = staticData.lastRssId\\n\\nlet list = []\\n\\n\\nfor (const item of $items(\\\"RSS Feed Read\\\")){\\n  let currentId = item.json[\\\"id\\\"].split('/').pop()\\n  if(currentId == lastRssId) break;\\n  list.push({'json': {\\n    'id': currentId,\\n    'lastId': lastRssId,\\n    'title': item.json[\\\"title\\\"],\\n    'url': item.json[\\\"link\\\"]\\n  }})\\n}\\n\\n\\n// Get the last ID from Rss Feed\\nlet currentRssId = $item(0).$node[\\\"RSS Feed Read\\\"].json[\\\"id\\\"].split('/').pop()\\n\\n// TODO: make a loop to get all the items beyond the last saved id\\nif(!lastRssId || currentRssId != lastRssId)\\n{  \\n  // Update its data\\n  staticData.lastRssId = currentRssId;\\n  \\n}\\nelse { list = [{'json':{'id': 'NaN', 'lastId': staticData.lastRssId }}] }\\nreturn list;\\n\\n\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"IF\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        960,\n        150\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"string\": [\n            {\n              \"value1\": \"={{$node[\\\"Function\\\"].json[\\\"id\\\"]}}\",\n              \"value2\": \"NaN\",\n              \"operation\": \"notEqual\"\n            }\n          ],\n          \"boolean\": []\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"NoOp\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        1180,\n        280\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": true,\n  \"settings\": {},\n  \"connections\": {\n    \"IF\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"HTTP Request\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"NoOp\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Cron\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"RSS Feed Read\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Function\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"IF\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"RSS Feed Read\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Function\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}