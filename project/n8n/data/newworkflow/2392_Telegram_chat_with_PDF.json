{
  "url": "https://n8n.io/workflows/2392-telegram-chat-with-pdf/",
  "title": "Telegram chat with PDF",
  "author": "felipe biava cataneo",
  "publish_date": "Last update 8 months ago",
  "publish_date_absolute": "2024-09-25",
  "categories": [
    {
      "name": "AI"
    }
  ],
  "workflow_json": "{\"id\":\"5Ycrm1MuK8htwd96\",\"meta\":{\"instanceId\":\"e5595d8cd58f3a24b5a8cf05dd852846c05423873db868a2b7d01a778210c45a\",\"templateCredsSetupCompleted\":true},\"name\":\"Telegram RAG pdf\",\"tags\":[],\"nodes\":[{\"id\":\"9fbce801-8c42-43a4-bc70-d93042d68b2c\",\"name\":\"Telegram Trigger\",\"type\":\"n8n-nodes-base.telegramTrigger\",\"position\":[-220,240],\"webhookId\":\"b178f034-9997-4832-9bb4-a43c3015506e\",\"parameters\":{\"updates\":[\"message\"],\"additionalFields\":{}},\"credentials\":{\"telegramApi\":{\"id\":\"\",\"name\":\"\"}},\"typeVersion\":1.1},{\"id\":\"1bfc1fbd-86b1-4a8a-9301-fe54497f5acd\",\"name\":\"Embeddings OpenAI\",\"type\":\"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\"position\":[720,460],\"parameters\":{\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"\",\"name\":\"\"}},\"typeVersion\":1},{\"id\":\"d5ad7851-ed40-4b3a-b0d5-aeaf04362f1c\",\"name\":\"Default Data Loader\",\"type\":\"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\",\"position\":[860,460],\"parameters\":{\"options\":{},\"dataType\":\"binary\"},\"typeVersion\":1},{\"id\":\"fed803d0-49a2-4b82-8f20-a02a10caa027\",\"name\":\"Recursive Character Text Splitter\",\"type\":\"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter\",\"position\":[940,680],\"parameters\":{\"options\":{},\"chunkSize\":3000,\"chunkOverlap\":200},\"typeVersion\":1},{\"id\":\"ab60f36f-fada-4812-8dbd-441ad372cb80\",\"name\":\"Stop and Error\",\"type\":\"n8n-nodes-base.stopAndError\",\"position\":[220,840],\"parameters\":{\"errorMessage\":\"An error occurred\"},\"typeVersion\":1},{\"id\":\"c87f1db3-7cc9-4063-9895-4b4d68ea53a1\",\"name\":\"Question and Answer Chain\",\"type\":\"@n8n/n8n-nodes-langchain.chainRetrievalQa\",\"position\":[-280,500],\"parameters\":{\"text\":\"={{ $json.message.text }}\\nSearch the database with the retriever for information for the answer\",\"promptType\":\"define\"},\"typeVersion\":1.3},{\"id\":\"c9bc4c80-8e57-48bc-a405-131ed7348c1d\",\"name\":\"Vector Store Retriever\",\"type\":\"@n8n/n8n-nodes-langchain.retrieverVectorStore\",\"position\":[-240,680],\"parameters\":{},\"typeVersion\":1},{\"id\":\"0217056f-2b71-4308-adf1-19dcd4d2cc11\",\"name\":\"Pinecone Vector Store1\",\"type\":\"@n8n/n8n-nodes-langchain.vectorStorePinecone\",\"position\":[-280,860],\"parameters\":{\"options\":{},\"pineconeIndex\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"telegram\",\"cachedResultName\":\"telegram\"}},\"credentials\":{\"pineconeApi\":{\"id\":\"\",\"name\":\"\"}},\"typeVersion\":1},{\"id\":\"693f9026-f47f-48dc-8e5d-e8b832a37235\",\"name\":\"Groq Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGroq\",\"position\":[-380,660],\"parameters\":{\"model\":\"llama-3.1-70b-versatile\",\"options\":{}},\"credentials\":{\"groqApi\":{\"id\":\"\",\"name\":\"\"}},\"typeVersion\":1},{\"id\":\"c7acf014-138f-4be7-b569-c309bb10e50d\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[500,73.04879287725316],\"parameters\":{\"color\":7,\"width\":1139.5159692915001,\"height\":873.6068151028411,\"content\":\"# Load data into database\\nFetch file from **Telegram**, split it into chunks and insert into **Pinecone** index, a message from **Telegram** will be sent just to let the user know that the process finished\"},\"typeVersion\":1},{\"id\":\"dd3b9d8b-5771-4a09-8c1b-794cb8737d5d\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-878.769,400],\"parameters\":{\"color\":7,\"width\":1344.7918019808176,\"height\":806.8716167324012,\"content\":\"# Chat with Database\\n\\n1. **Receive** the incoming chat message.\\n2. **Retrieve** relevant chunks from the _vector store_.\\n3. **Pass** these chunks to the model.\\n\\nThe model will use the retrieved information to **formulate a precise response**.\\n\"},\"typeVersion\":1},{\"id\":\"9aaf575a-5e40-407c-951c-10b1d16e5d3c\",\"name\":\"Check If is a document\",\"type\":\"n8n-nodes-base.if\",\"position\":[220,240],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"8839993b-9fe7-4e1e-a1cc-fe5de6b0bb62\",\"operator\":{\"type\":\"object\",\"operation\":\"exists\",\"singleValue\":true},\"leftValue\":\"={{ $json.message.document }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2},{\"id\":\"c1edb6bf-ba95-4a5f-9626-add673274086\",\"name\":\"Change to application/pdf\",\"type\":\"n8n-nodes-base.code\",\"position\":[700,220],\"parameters\":{\"jsCode\":\"// Função para modificar os metadados do arquivo binário\\nfunction modifyBinaryMetadata(items) {\\n  for (const item of items) {\\n    if (item.binary && item.binary.data) {\\n      // Modifica o tipo MIME\\n      item.binary.data.mimeType = 'application/pdf';\\n      \\n      // Garante que o nome do arquivo termine com .pdf\\n      if (!item.binary.data.fileName.toLowerCase().endsWith('.pdf')) {\\n        item.binary.data.fileName += '.pdf';\\n      }\\n      \\n      // Atualiza o contentType no fileType (se existir)\\n      if (item.binary.data.fileType) {\\n        item.binary.data.fileType.contentType = 'application/pdf';\\n      }\\n    }\\n  }\\n  return items;\\n}\\n\\n// Aplica a modificação e retorna os itens atualizados\\nreturn modifyBinaryMetadata($input.all());\"},\"typeVersion\":2},{\"id\":\"ea4d4e74-8954-47f0-a3a0-662d47ea2298\",\"name\":\"Telegram get File\",\"type\":\"n8n-nodes-base.telegram\",\"position\":[520,220],\"parameters\":{\"fileId\":\"={{ $json.message.document.file_id }}\",\"resource\":\"file\"},\"credentials\":{\"telegramApi\":{\"id\":\"\",\"name\":\"\"}},\"typeVersion\":1.2},{\"id\":\"cf548bee-d5d5-4f1a-a059-932ea163e155\",\"name\":\"Embeddings\",\"type\":\"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\"position\":[-100,1080],\"parameters\":{\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"\",\"name\":\"\"}},\"typeVersion\":1},{\"id\":\"e3bd4759-80cc-42bb-ba53-f9e88e9ba916\",\"name\":\"Telegram Response\",\"type\":\"n8n-nodes-base.telegram\",\"onError\":\"continueErrorOutput\",\"position\":[160,560],\"parameters\":{\"text\":\"={{ $json.response.text }}\",\"chatId\":\"={{ $('Telegram Trigger').item.json.message.chat.id }}\",\"additionalFields\":{\"appendAttribution\":false}},\"credentials\":{\"telegramApi\":{\"id\":\"\",\"name\":\"\"}},\"typeVersion\":1.2},{\"id\":\"e478df48-9e6d-4a84-89be-beb569914ae3\",\"name\":\"Telegram Response about Database\",\"type\":\"n8n-nodes-base.telegram\",\"onError\":\"continueErrorOutput\",\"position\":[1400,220],\"parameters\":{\"text\":\"={{ $json.metadata.pdf.totalPages }} pages saved on Pinecone\",\"chatId\":\"={{ $('Telegram Trigger').item.json.message.chat.id }}\",\"additionalFields\":{\"appendAttribution\":false}},\"credentials\":{\"telegramApi\":{\"id\":\"\",\"name\":\"\"}},\"typeVersion\":1.2},{\"id\":\"5be7a321-1be6-4173-83de-3d569666718d\",\"name\":\"Stop and Error1\",\"type\":\"n8n-nodes-base.stopAndError\",\"position\":[1400,580],\"parameters\":{\"errorMessage\":\"An error occurred.\"},\"typeVersion\":1},{\"id\":\"aae26861-f34d-4b59-bd99-3662fbd6676c\",\"name\":\"Pinecone Vector Store\",\"type\":\"@n8n/n8n-nodes-langchain.vectorStorePinecone\",\"position\":[880,220],\"parameters\":{\"mode\":\"insert\",\"options\":{},\"pineconeIndex\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"telegram\",\"cachedResultName\":\"telegram\"}},\"credentials\":{\"pineconeApi\":{\"id\":\"\",\"name\":\"\"}},\"typeVersion\":1},{\"id\":\"312fb807-4225-4630-ab32-aa12fe07c127\",\"name\":\"Limit to 1\",\"type\":\"n8n-nodes-base.limit\",\"position\":[1220,220],\"parameters\":{},\"typeVersion\":1}],\"active\":true,\"pinData\":{},\"settings\":{\"timezone\":\"America/Sao_Paulo\",\"callerPolicy\":\"workflowsFromSameOwner\",\"executionOrder\":\"v1\",\"saveManualExecutions\":true},\"versionId\":\"03612d23-6630-4ec6-8738-1dae593c8d23\",\"connections\":{\"Embeddings\":{\"ai_embedding\":[[{\"node\":\"Pinecone Vector Store1\",\"type\":\"ai_embedding\",\"index\":0}]]},\"Limit to 1\":{\"main\":[[{\"node\":\"Telegram Response about Database\",\"type\":\"main\",\"index\":0}]]},\"Groq Chat Model\":{\"ai_languageModel\":[[{\"node\":\"Question and Answer Chain\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Telegram Trigger\":{\"main\":[[{\"node\":\"Check If is a document\",\"type\":\"main\",\"index\":0}]]},\"Embeddings OpenAI\":{\"ai_embedding\":[[{\"node\":\"Pinecone Vector Store\",\"type\":\"ai_embedding\",\"index\":0}]]},\"Telegram Response\":{\"main\":[[],[{\"node\":\"Stop and Error\",\"type\":\"main\",\"index\":0}]]},\"Telegram get File\":{\"main\":[[{\"node\":\"Change to application/pdf\",\"type\":\"main\",\"index\":0}]]},\"Default Data Loader\":{\"ai_document\":[[{\"node\":\"Pinecone Vector Store\",\"type\":\"ai_document\",\"index\":0}]]},\"Pinecone Vector Store\":{\"main\":[[{\"node\":\"Limit to 1\",\"type\":\"main\",\"index\":0}]]},\"Check If is a document\":{\"main\":[[{\"node\":\"Telegram get File\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Question and Answer Chain\",\"type\":\"main\",\"index\":0}]]},\"Pinecone Vector Store1\":{\"ai_vectorStore\":[[{\"node\":\"Vector Store Retriever\",\"type\":\"ai_vectorStore\",\"index\":0}]]},\"Vector Store Retriever\":{\"ai_retriever\":[[{\"node\":\"Question and Answer Chain\",\"type\":\"ai_retriever\",\"index\":0}]]},\"Change to application/pdf\":{\"main\":[[{\"node\":\"Pinecone Vector Store\",\"type\":\"main\",\"index\":0}]]},\"Question and Answer Chain\":{\"main\":[[{\"node\":\"Telegram Response\",\"type\":\"main\",\"index\":0}]]},\"Telegram Response about Database\":{\"main\":[[],[{\"node\":\"Stop and Error1\",\"type\":\"main\",\"index\":0}]]},\"Recursive Character Text Splitter\":{\"ai_textSplitter\":[[{\"node\":\"Default Data Loader\",\"type\":\"ai_textSplitter\",\"index\":0}]]}}}",
  "readme": "## What this template does\n\nThis template serves as a Chatbot that enables you to ask questions about the content of a PDF directly in Telegream.\n\nIt checks incoming Telegram messages if they contain a document. If they do, it stores the PDF in a Pinecone Vector store. If there's no document, it will search the Vector Store for information and try to answer your question.\n\n## Setup\n\n  1. Open the Telegram app and search for the BotFather user (@BotFather)\n  2. Start a chat with the BotFather\n  3. Type /newbot to create a new bot\n  4. Follow the prompts to name your bot and get a unique API token\n  5. Save your access token and username  \nOnce you set your bot, you can send the pdf, and then ask questions about the content.\n\n\n\n## How to adjust it to your needs\n\n  * You can exchange the Groq chat model with any model that you like\n  * Exchange Pinecone with any other vector store tool you like (e.g. Supabase, Postgres or QDrant)\n\n\n\n#Telegram, #Pinecone, #Openai, #GroQ\n",
  "crawled_at": "2025-05-25T23:42:17.513418",
  "readme_zh": "## 模板功能说明\n\n本模板是一个聊天机器人，支持您直接在Telegram中查询PDF文档内容。\n\n其工作流程如下：当检测到Telegram消息含有附件时，会自动将PDF存储至Pinecone向量数据库；若无附件则会在向量库中检索信息并尝试回答您的问题。\n\n## 配置指南\n\n1. 打开Telegram应用，搜索BotFather官方账号（@BotFather）\n2. 与BotFather开启对话\n3. 输入/newbot指令创建新机器人\n4. 按照指引完成命名并获取专属API令牌\n5. 妥善保存访问令牌和用户名\n完成设置后，您只需发送PDF文件即可开始进行内容咨询\n\n## 个性化定制建议\n\n* 可替换Groq聊天模型为任意您偏好的AI模型\n* Pinecone可替换为其他向量数据库工具（如Supabase/Postgres/QDrant等）\n\n#Telegram #Pinecone #Openai #GroQ",
  "title_zh": "与PDF文件的Telegram聊天",
  "publish_date_zh": "最后更新于7个月前",
  "workflow_json_zh": "{\n  \"id\": \"5Ycrm1MuK8htwd96\",\n  \"meta\": {\n    \"instanceId\": \"e5595d8cd58f3a24b5a8cf05dd852846c05423873db868a2b7d01a778210c45a\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"Telegram RAG pdf\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"9fbce801-8c42-43a4-bc70-d93042d68b2c\",\n      \"name\": \"Telegram Trigger\",\n      \"type\": \"n8n-nodes-base.telegramTrigger\",\n      \"position\": [\n        -220,\n        240\n      ],\n      \"webhookId\": \"b178f034-9997-4832-9bb4-a43c3015506e\",\n      \"parameters\": {\n        \"updates\": [\n          \"message\"\n        ],\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"\",\n          \"name\": \"\"\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"1bfc1fbd-86b1-4a8a-9301-fe54497f5acd\",\n      \"name\": \"Embeddings OpenAI\",\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\n      \"position\": [\n        720,\n        460\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"\",\n          \"name\": \"\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d5ad7851-ed40-4b3a-b0d5-aeaf04362f1c\",\n      \"name\": \"Default Data Loader\",\n      \"type\": \"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\",\n      \"position\": [\n        860,\n        460\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"dataType\": \"binary\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fed803d0-49a2-4b82-8f20-a02a10caa027\",\n      \"name\": \"Recursive Character Text Splitter\",\n      \"type\": \"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter\",\n      \"position\": [\n        940,\n        680\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"chunkSize\": 3000,\n        \"chunkOverlap\": 200\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ab60f36f-fada-4812-8dbd-441ad372cb80\",\n      \"name\": \"Stop and Error\",\n      \"type\": \"n8n-nodes-base.stopAndError\",\n      \"position\": [\n        220,\n        840\n      ],\n      \"parameters\": {\n        \"errorMessage\": \"An error occurred\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c87f1db3-7cc9-4063-9895-4b4d68ea53a1\",\n      \"name\": \"Question and Answer Chain\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainRetrievalQa\",\n      \"position\": [\n        -280,\n        500\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.message.text }}\\nSearch the database with the retriever for information for the answer\",\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.3\n    },\n    {\n      \"id\": \"c9bc4c80-8e57-48bc-a405-131ed7348c1d\",\n      \"name\": \"Vector Store Retriever\",\n      \"type\": \"@n8n/n8n-nodes-langchain.retrieverVectorStore\",\n      \"position\": [\n        -240,\n        680\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0217056f-2b71-4308-adf1-19dcd4d2cc11\",\n      \"name\": \"Pinecone Vector Store1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.vectorStorePinecone\",\n      \"position\": [\n        -280,\n        860\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"pineconeIndex\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"telegram\",\n          \"cachedResultName\": \"telegram\"\n        }\n      },\n      \"credentials\": {\n        \"pineconeApi\": {\n          \"id\": \"\",\n          \"name\": \"\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"693f9026-f47f-48dc-8e5d-e8b832a37235\",\n      \"name\": \"Groq Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGroq\",\n      \"position\": [\n        -380,\n        660\n      ],\n      \"parameters\": {\n        \"model\": \"llama-3.1-70b-versatile\",\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"groqApi\": {\n          \"id\": \"\",\n          \"name\": \"\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c7acf014-138f-4be7-b569-c309bb10e50d\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        500,\n        73.04879287725316\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 1139.5159692915001,\n        \"height\": 873.6068151028411,\n        \"content\": \"# 将数据载入数据库\\n从**Telegram**获取文件，将其分割成块并插入**Pinecone**索引，完成后会发送一条**Telegram**消息通知用户处理已完成\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"dd3b9d8b-5771-4a09-8c1b-794cb8737d5d\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -878.769,\n        400\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 1344.7918019808176,\n        \"height\": 806.8716167324012,\n        \"content\": \"# 数据库对话交互\\n\\n1. **接收** 传入的聊天消息\\n2. 从_向量存储_中**检索**相关数据块\\n3. 将这些数据块**传递**给模型\\n\\n模型将利用检索到的信息**生成精准响应**\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9aaf575a-5e40-407c-951c-10b1d16e5d3c\",\n      \"name\": \"Check If is a document\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        220,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"8839993b-9fe7-4e1e-a1cc-fe5de6b0bb62\",\n              \"operator\": {\n                \"type\": \"object\",\n                \"operation\": \"exists\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.message.document }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"c1edb6bf-ba95-4a5f-9626-add673274086\",\n      \"name\": \"Change to application/pdf\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        700,\n        220\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Função para modificar os metadados do arquivo binário\\nfunction modifyBinaryMetadata(items) {\\n  for (const item of items) {\\n    if (item.binary && item.binary.data) {\\n      // Modifica o tipo MIME\\n      item.binary.data.mimeType = 'application/pdf';\\n      \\n      // Garante que o nome do arquivo termine com .pdf\\n      if (!item.binary.data.fileName.toLowerCase().endsWith('.pdf')) {\\n        item.binary.data.fileName += '.pdf';\\n      }\\n      \\n      // Atualiza o contentType no fileType (se existir)\\n      if (item.binary.data.fileType) {\\n        item.binary.data.fileType.contentType = 'application/pdf';\\n      }\\n    }\\n  }\\n  return items;\\n}\\n\\n// Aplica a modificação e retorna os itens atualizados\\nreturn modifyBinaryMetadata($input.all());\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"ea4d4e74-8954-47f0-a3a0-662d47ea2298\",\n      \"name\": \"Telegram get File\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        520,\n        220\n      ],\n      \"parameters\": {\n        \"fileId\": \"={{ $json.message.document.file_id }}\",\n        \"resource\": \"file\"\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"\",\n          \"name\": \"\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"cf548bee-d5d5-4f1a-a059-932ea163e155\",\n      \"name\": \"Embeddings\",\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\n      \"position\": [\n        -100,\n        1080\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"\",\n          \"name\": \"\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e3bd4759-80cc-42bb-ba53-f9e88e9ba916\",\n      \"name\": \"Telegram Response\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        160,\n        560\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.response.text }}\",\n        \"chatId\": \"={{ $('Telegram Trigger').item.json.message.chat.id }}\",\n        \"additionalFields\": {\n          \"appendAttribution\": false\n        }\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"\",\n          \"name\": \"\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"e478df48-9e6d-4a84-89be-beb569914ae3\",\n      \"name\": \"Telegram Response about Database\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        1400,\n        220\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.metadata.pdf.totalPages }} pages saved on Pinecone\",\n        \"chatId\": \"={{ $('Telegram Trigger').item.json.message.chat.id }}\",\n        \"additionalFields\": {\n          \"appendAttribution\": false\n        }\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"\",\n          \"name\": \"\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"5be7a321-1be6-4173-83de-3d569666718d\",\n      \"name\": \"Stop and Error1\",\n      \"type\": \"n8n-nodes-base.stopAndError\",\n      \"position\": [\n        1400,\n        580\n      ],\n      \"parameters\": {\n        \"errorMessage\": \"An error occurred.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"aae26861-f34d-4b59-bd99-3662fbd6676c\",\n      \"name\": \"Pinecone Vector Store\",\n      \"type\": \"@n8n/n8n-nodes-langchain.vectorStorePinecone\",\n      \"position\": [\n        880,\n        220\n      ],\n      \"parameters\": {\n        \"mode\": \"insert\",\n        \"options\": {},\n        \"pineconeIndex\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"telegram\",\n          \"cachedResultName\": \"telegram\"\n        }\n      },\n      \"credentials\": {\n        \"pineconeApi\": {\n          \"id\": \"\",\n          \"name\": \"\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"312fb807-4225-4630-ab32-aa12fe07c127\",\n      \"name\": \"Limit to 1\",\n      \"type\": \"n8n-nodes-base.limit\",\n      \"position\": [\n        1220,\n        220\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {},\n  \"settings\": {\n    \"timezone\": \"America/Sao_Paulo\",\n    \"callerPolicy\": \"workflowsFromSameOwner\",\n    \"executionOrder\": \"v1\",\n    \"saveManualExecutions\": true\n  },\n  \"versionId\": \"03612d23-6630-4ec6-8738-1dae593c8d23\",\n  \"connections\": {\n    \"Embeddings\": {\n      \"ai_embedding\": [\n        [\n          {\n            \"node\": \"Pinecone Vector Store1\",\n            \"type\": \"ai_embedding\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Limit to 1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Telegram Response about Database\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Groq Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Question and Answer Chain\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Telegram Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check If is a document\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Embeddings OpenAI\": {\n      \"ai_embedding\": [\n        [\n          {\n            \"node\": \"Pinecone Vector Store\",\n            \"type\": \"ai_embedding\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Telegram Response\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"Stop and Error\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Telegram get File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Change to application/pdf\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Default Data Loader\": {\n      \"ai_document\": [\n        [\n          {\n            \"node\": \"Pinecone Vector Store\",\n            \"type\": \"ai_document\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Pinecone Vector Store\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Limit to 1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check If is a document\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Telegram get File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Question and Answer Chain\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Pinecone Vector Store1\": {\n      \"ai_vectorStore\": [\n        [\n          {\n            \"node\": \"Vector Store Retriever\",\n            \"type\": \"ai_vectorStore\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Vector Store Retriever\": {\n      \"ai_retriever\": [\n        [\n          {\n            \"node\": \"Question and Answer Chain\",\n            \"type\": \"ai_retriever\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Change to application/pdf\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Pinecone Vector Store\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Question and Answer Chain\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Telegram Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Telegram Response about Database\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"Stop and Error1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Recursive Character Text Splitter\": {\n      \"ai_textSplitter\": [\n        [\n          {\n            \"node\": \"Default Data Loader\",\n            \"type\": \"ai_textSplitter\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}