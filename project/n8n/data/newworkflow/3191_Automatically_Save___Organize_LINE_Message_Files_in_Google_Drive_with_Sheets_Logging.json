{
  "url": "https://n8n.io/workflows/3191-automatically-save-and-organize-line-message-files-in-google-drive-with-sheets-logging/",
  "title": "Automatically Save & Organize LINE Message Files in Google Drive with Sheets Logging",
  "author": "Jaruphat J.",
  "publish_date": "Last update 2 months ago",
  "publish_date_absolute": "2025-03-26",
  "categories": [
    {
      "name": "Other"
    },
    {
      "name": "IT Ops"
    }
  ],
  "workflow_json": "{\"id\":\"mqdP7Aw1KnkIq2W5\",\"meta\":{\"instanceId\":\"2c12b0b552404dc07af67cd5f092afd21d18c808d4fdabdb04cb4b064195b6fb\",\"templateCredsSetupCompleted\":true},\"name\":\"Line Save File to Google Drive and Log File's URL\",\"tags\":[{\"id\":\"W3ZSaJHRI2hXA9gT\",\"name\":\"Line Messaging API\",\"createdAt\":\"2025-03-09T13:14:42.780Z\",\"updatedAt\":\"2025-03-09T13:14:42.780Z\"}],\"nodes\":[{\"id\":\"47c9f83b-5590-4ffc-825c-5fee72e8ef87\",\"name\":\"Get Config\",\"type\":\"n8n-nodes-base.googleSheets\",\"position\":[1220,-200],\"parameters\":{\"range\":\"config!A1:H2\",\"options\":{},\"sheetId\":\"1iO4ZHU7s0fe1Jn8jcScNDce7rFXQlkRBqsO8IFHbcSc\"},\"credentials\":{\"googleSheetsOAuth2Api\":{\"id\":\"0RVWjnYzlWor2bMu\",\"name\":\"Google Sheets account\"}},\"typeVersion\":2,\"alwaysOutputData\":true},{\"id\":\"1514cec1-bd12-4ce4-99af-bd2465026822\",\"name\":\"Create Date Folder\",\"type\":\"n8n-nodes-base.googleDrive\",\"position\":[1700,80],\"parameters\":{\"name\":\"={{ $('Determine Folder Info').item.json.dateFolderName }}\",\"options\":{\"parents\":[\"={{ $('Determine Folder Info').item.json.baseFolderId }}\"]},\"resource\":\"folder\"},\"credentials\":{\"googleDriveOAuth2Api\":{\"id\":\"QVrgALkld7whKIgB\",\"name\":\"Google Drive account - Peakwave\"}},\"typeVersion\":2},{\"id\":\"a584238e-1d53-46ff-8cfc-437e14ea71d9\",\"name\":\"Set Date Folder ID\",\"type\":\"n8n-nodes-base.code\",\"position\":[1960,-20],\"parameters\":{\"jsCode\":\"// Log ข้อมูล input ทั้งหมด\\n//console.log(\\\"Set Target Parent (Date) - Input:\\\", items);\\n\\nlet targetParentId = '';\\n\\nif (items.length > 0) {\\n\\t// ตรวจสอบจาก branch แรก (True Branch จาก IF node)\\n\\tif (items[0].json && items[0].json.id) {\\n\\t\\ttargetParentId = items[0].json.id;\\n\\t} else if (items.length > 1 && items[1].json && items[1].json.id) {\\n\\t\\t// ถ้าไม่พบจาก branch แรก ให้ลองดูจาก branch ที่สอง (False Branch หรือผลจากการสร้าง folder ใหม่)\\n\\t\\ttargetParentId = items[1].json.id;\\n\\t}\\n\\t\\n\\t// เพิ่ม targetParentId ลงใน items[0].json\\n\\titems[0].json.targetParentId = targetParentId;\\n\\tconsole.log(\\\"Set Target Parent (Date) - Output:\\\", items);\\n\\treturn items;\\n} else {\\n\\tconsole.log(\\\"Set Target Parent (Date) - No input items.\\\");\\n\\treturn [];\\n}\\n\"},\"typeVersion\":2,\"alwaysOutputData\":false},{\"id\":\"aa480dc9-935e-4a6e-a6c6-2559255ae1c2\",\"name\":\"Create File Type Folder\",\"type\":\"n8n-nodes-base.googleDrive\",\"position\":[1700,400],\"parameters\":{\"name\":\"={{ $('Determine Folder Info').item.json.fileTypeFolderName }}\",\"driveId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $('Determine Folder Info').item.json.baseFolderId }}\"},\"options\":{},\"folderId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $('Get Config').first().json['Store by Date'] === true ? $('Set Date Folder ID').first().json.targetParentId : $('Get Config').first().json[\\\"Parent Folder ID\\\"] }}\"},\"resource\":\"folder\"},\"credentials\":{\"googleDriveOAuth2Api\":{\"id\":\"QVrgALkld7whKIgB\",\"name\":\"Google Drive account - Peakwave\"}},\"typeVersion\":3},{\"id\":\"d5ed8981-5b65-45a3-8ff4-c00902756bb9\",\"name\":\"Upload File to Google Drive\",\"type\":\"n8n-nodes-base.googleDrive\",\"onError\":\"continueRegularOutput\",\"position\":[1600,640],\"parameters\":{\"name\":\"={{ $('Merge Event and Config Data').item.json.body.events[0].timestamp }}.{{$node[\\\"Get File Binary Content\\\"].binary.data.fileExtension}}\",\"driveId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $('Configure Final Parent Folder ID').item.json.finalParentId }}\"},\"options\":{},\"folderId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"root\"}},\"credentials\":{\"googleDriveOAuth2Api\":{\"id\":\"QVrgALkld7whKIgB\",\"name\":\"Google Drive account - Peakwave\"}},\"typeVersion\":3,\"alwaysOutputData\":false},{\"id\":\"92787455-6839-455f-a939-6927660bc215\",\"name\":\"Determine Folder Info\",\"type\":\"n8n-nodes-base.code\",\"position\":[1960,-280],\"parameters\":{\"jsCode\":\"const data = items[0].json;\\nconst config = data.config;\\nconst event = data.event;\\n\\n// ใช้ key จาก config ตามที่ส่งมา\\nlet baseFolderId = config[\\\"Parent Folder ID\\\"];\\nlet dateFolderName = \\\"\\\";\\nlet fileTypeFolderName = \\\"\\\";\\n\\n// หากตั้งค่า Store by Date เป็น true\\nif (config[\\\"Store by Date\\\"]) {\\n  // ใช้ CurrentDate จาก config หรือใช้วันที่ปัจจุบันถ้าไม่มี\\n  dateFolderName = config[\\\"CurrentDate\\\"] ? config[\\\"CurrentDate\\\"] : new Date().toISOString().slice(0,10).replace(/-/g, \\\"\\\");\\n}\\n\\n// หากตั้งค่า Store by File Type เป็น true\\nif (config[\\\"Store by File Type\\\"]) {\\n  // ตรวจสอบว่า event.body.events มีข้อมูลหรือไม่\\n  if (event.body && event.body.events && event.body.events.length > 0) {\\n    // ดึง type ของ message จาก event.body.events[0]\\n    fileTypeFolderName = event.body.events[0].message.type.toLowerCase();\\n  }\\n}\\n\\nreturn [{\\n  json: {\\n    baseFolderId,\\n    dateFolderName,\\n    fileTypeFolderName,\\n    storeByDate: config[\\\"Store by Date\\\"],\\n    storeByFileType: config[\\\"Store by File Type\\\"],\\n    event: event,\\n    config: config\\n  }\\n}];\\n\"},\"typeVersion\":2},{\"id\":\"f4e30758-986e-4dd4-bc85-f2953e883bfe\",\"name\":\"Search Date Folder\",\"type\":\"n8n-nodes-base.googleDrive\",\"position\":[980,0],\"parameters\":{\"filter\":{\"folderId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $json.baseFolderId }}\"}},\"options\":{},\"resource\":\"fileFolder\",\"queryString\":\"={{ $json.dateFolderName }}\"},\"credentials\":{\"googleDriveOAuth2Api\":{\"id\":\"QVrgALkld7whKIgB\",\"name\":\"Google Drive account - Peakwave\"}},\"typeVersion\":3,\"alwaysOutputData\":true},{\"id\":\"e74d65bc-be7f-43d0-8b0a-ee6316b4aff9\",\"name\":\"Merge Event and Config Data\",\"type\":\"n8n-nodes-base.merge\",\"position\":[1480,-280],\"parameters\":{\"mode\":\"mergeByIndex\"},\"typeVersion\":1},{\"id\":\"f380d584-32aa-435f-8e8e-6d1d05932bd2\",\"name\":\"Check Existing Date Folder\",\"type\":\"n8n-nodes-base.if\",\"position\":[1220,0],\"parameters\":{\"conditions\":{\"boolean\":[{\"value1\":\"={{ $json.id !== undefined }}\",\"value2\":true}]}},\"typeVersion\":1},{\"id\":\"96dc0853-67ec-4cfc-b40c-0cce63f51e96\",\"name\":\"Check Existing File Type Folder\",\"type\":\"n8n-nodes-base.if\",\"position\":[1220,320],\"parameters\":{\"conditions\":{\"boolean\":[{\"value1\":\"={{ $json.id !== undefined }}\",\"value2\":true}]}},\"typeVersion\":1},{\"id\":\"742cb154-3b23-423d-8df6-53a82f0d8aab\",\"name\":\"Merge Final Parent Folder Data\",\"type\":\"n8n-nodes-base.merge\",\"position\":[2280,400],\"parameters\":{},\"typeVersion\":1},{\"id\":\"1003b29d-9140-4961-90d4-b94e4d33dc69\",\"name\":\"Search File Type Folder\",\"type\":\"n8n-nodes-base.googleDrive\",\"position\":[980,320],\"parameters\":{\"filter\":{\"folderId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $('Get Config').item.json['Store by Date'] === true && $json.targetParentId && $json.targetParentId !== \\\"\\\" ? $json.targetParentId : $('Get Config').item.json['Parent Folder ID'] }}\"}},\"options\":{},\"resource\":\"fileFolder\",\"queryString\":\"={{ $('Determine Folder Info').item.json.fileTypeFolderName }}\"},\"credentials\":{\"googleDriveOAuth2Api\":{\"id\":\"QVrgALkld7whKIgB\",\"name\":\"Google Drive account - Peakwave\"}},\"typeVersion\":3,\"alwaysOutputData\":true},{\"id\":\"8015eb75-0c38-4c3b-a29f-f04dedf79cee\",\"name\":\"Set File Type Folder ID\",\"type\":\"n8n-nodes-base.code\",\"position\":[1960,320],\"parameters\":{\"jsCode\":\"// Log ข้อมูล input ทั้งหมด\\n//console.log(\\\"Set Target Parent (Date) - Input:\\\", items);\\n\\nlet targetParentId = '';\\n\\nif (items.length > 0) {\\n\\t// ตรวจสอบจาก branch แรก (True Branch จาก IF node)\\n\\tif (items[0].json && items[0].json.id) {\\n\\t\\ttargetParentId = items[0].json.id;\\n\\t} else if (items.length > 1 && items[1].json && items[1].json.id) {\\n\\t\\t// ถ้าไม่พบจาก branch แรก ให้ลองดูจาก branch ที่สอง (False Branch หรือผลจากการสร้าง folder ใหม่)\\n\\t\\ttargetParentId = items[1].json.id;\\n\\t}\\n\\t\\n\\t// เพิ่ม targetParentId ลงใน items[0].json\\n\\titems[0].json.targetParentId = targetParentId;\\n\\tconsole.log(\\\"Set Target Parent (Date) - Output:\\\", items);\\n\\treturn items;\\n} else {\\n\\tconsole.log(\\\"Set Target Parent (Date) - No input items.\\\");\\n\\treturn [];\\n}\\n\"},\"typeVersion\":2},{\"id\":\"b59d58c7-cb8c-4edc-a7e7-533675c39a96\",\"name\":\"Configure Final Parent Folder ID\",\"type\":\"n8n-nodes-base.code\",\"position\":[960,640],\"parameters\":{\"jsCode\":\"/**\\n * Expected input: items array จาก Merge Final Data\\n * - items[0].json คือผลลัพธ์ที่อาจเป็น folder สำหรับวันที่หรือ file type folder (ขึ้นอยู่กับเงื่อนไข)\\n * - items[1].json คือผลลัพธ์อีกส่วนหนึ่ง (สำหรับกรณีที่มีทั้งสอง)\\n * \\n * Config จะถูกดึงมาจาก node 'Get Config'\\n */\\n\\nconst config = $('Get Config').first().json;\\nlet finalParentId = '';\\n\\n// เงื่อนไขเลือก finalParentId\\nif (config[\\\"Store by Date\\\"] === true && config[\\\"Store by File Type\\\"] === true) {\\n    // เมื่อทั้งสองเป็น TRUE: สมมุติว่า file type folder อยู่ใน items[1]\\n    finalParentId = $('Set File Type Folder ID').first().json.targetParentId\\n} else if (config[\\\"Store by Date\\\"] === true && config[\\\"Store by File Type\\\"] === false) {\\n    // ใช้ folder ตามวันที่ (items[0])\\n    finalParentId =$('Set Date Folder ID').first().json.targetParentId;\\n} else if (config[\\\"Store by Date\\\"] === false && config[\\\"Store by File Type\\\"] === true) {\\n    // ใช้ folder สำหรับประเภทไฟล์ (ใน test case นี้ ใช้ items[0])\\n    finalParentId = $('Set File Type Folder ID').first().json.targetParentId;\\n} else {\\n    // เมื่อทั้งสองเป็น FALSE: ใช้ Parent Folder ID จาก config\\n    finalParentId = config[\\\"Parent Folder ID\\\"];\\n}\\n\\n// เพิ่ม finalParentId ลงใน items[0].json เพื่อส่งต่อให้ Node \\\"Upload File to Google Drive\\\" ใช้งาน\\nitems[0].json.finalParentId = finalParentId;\\nreturn [items[0]];\\n\"},\"typeVersion\":2},{\"id\":\"683c83fc-e4b7-4a0d-b5f0-8958d0743faf\",\"name\":\"Process Event and Config Data\",\"type\":\"n8n-nodes-base.code\",\"position\":[1680,-280],\"parameters\":{\"jsCode\":\"// ตรวจสอบว่า items มีอย่างน้อย 2 รายการหรือไม่\\nconst eventData = items[0].json;\\nlet config;\\n\\nif (items.length >= 2) {\\n\\t// ถ้ามี items[1] ให้ใช้เป็น config\\n\\tconst configData = items[1].json;\\n\\tconfig = Array.isArray(configData) ? configData[0] : configData;\\n} else {\\n\\t// ถ้าไม่มี items[1] ให้ลองดึง config จาก eventData\\n\\t// สมมุติว่าฟิลด์ config ถูกส่งมาพร้อมกับ eventData ด้วยชื่อฟิลด์เหมือนที่ได้ใน output\\n\\tif (eventData[\\\"Parent Folder Path\\\"] && eventData[\\\"Parent Folder ID\\\"]) {\\n\\t\\tconfig = {\\n\\t\\t\\t\\\"Parent Folder Path\\\": eventData[\\\"Parent Folder Path\\\"],\\n\\t\\t\\t\\\"Parent Folder ID\\\": eventData[\\\"Parent Folder ID\\\"],\\n\\t\\t\\t\\\"Store by Date\\\": eventData[\\\"Store by Date\\\"],\\n\\t\\t\\t\\\"Store by File Type\\\": eventData[\\\"Store by File Type\\\"],\\n\\t\\t\\t\\\"Allow File Types\\\": eventData[\\\"Allow File Types\\\"],\\n\\t\\t\\t\\\"CurrentDate\\\": eventData[\\\"CurrentDate\\\"],\\n\\t\\t\\t\\\"Reply Enabled\\\": eventData[\\\"Reply Enabled\\\"],\\n\\t\\t\\t\\\"CHANNEL ACCESS TOKEN\\\": eventData[\\\"CHANNEL ACCESS TOKEN\\\"]\\n\\t\\t};\\n\\t} else {\\n\\t\\tthrow new Error(\\\"ไม่พบข้อมูล config! กรุณาตรวจสอบว่า node ก่อนหน้านี้ส่งข้อมูล config มาด้วย\\\");\\n\\t}\\n}\\n\\nreturn [{ json: { event: eventData, config: config } }];\\n\"},\"typeVersion\":2},{\"id\":\"fb5bd15c-bb0a-420b-a14b-ed5df5ecd691\",\"name\":\"Get File Binary Content\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1180,640],\"parameters\":{\"url\":\"=https://api-data.line.me/v2/bot/message/{{ $('LINE Webhook Listener').item.json.body.events[0].message.id }}/content\",\"options\":{},\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\"},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"byY3kI23lMe4ewnM\",\"name\":\"Header Auth account - Maid\"}},\"executeOnce\":true,\"typeVersion\":4.2},{\"id\":\"f064ba27-a5a8-4cca-afb8-3e099fb5abc8\",\"name\":\"Log File Details to Google Sheet\",\"type\":\"n8n-nodes-base.googleSheets\",\"onError\":\"continueRegularOutput\",\"position\":[1820,640],\"parameters\":{\"columns\":{\"value\":{\"File Name\":\"={{ $json.name }}\",\"File Type\":\"={{ $json.fileExtension }}\",\"Date Uploaded\":\"={{ $json.createdTime }}\",\"Google Drive URL\":\"={{ $json.webContentLink }}\"},\"schema\":[{\"id\":\"File Name\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"File Name\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Date Uploaded\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"Date Uploaded\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Google Drive URL\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"Google Drive URL\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"File Type\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"File Type\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[],\"attemptToConvertTypes\":false,\"convertFieldsToString\":false},\"options\":{},\"operation\":\"append\",\"sheetName\":{\"__rl\":true,\"mode\":\"list\",\"value\":585160829,\"cachedResultUrl\":\"https://docs.google.com/spreadsheets/d/1iO4ZHU7s0fe1Jn8jcScNDce7rFXQlkRBqsO8IFHbcSc/edit#gid=585160829\",\"cachedResultName\":\"fileList\"},\"documentId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"1iO4ZHU7s0fe1Jn8jcScNDce7rFXQlkRBqsO8IFHbcSc\"}},\"credentials\":{\"googleSheetsOAuth2Api\":{\"id\":\"0RVWjnYzlWor2bMu\",\"name\":\"Google Sheets account\"}},\"typeVersion\":4.5,\"alwaysOutputData\":true},{\"id\":\"fd936998-6ba0-4dbe-b406-c785f89181dd\",\"name\":\"Check Reply Enabled Flag\",\"type\":\"n8n-nodes-base.if\",\"position\":[2040,640],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"8f593e3a-95dd-457e-903f-f2ca68cdbcd1\",\"operator\":{\"type\":\"boolean\",\"operation\":\"true\",\"singleValue\":true},\"leftValue\":\"={{ $('Get Config').item.json['Reply Enabled'] }}\",\"rightValue\":\"true\"}]}},\"typeVersion\":2.2,\"alwaysOutputData\":true},{\"id\":\"7d1f19e7-cb6c-4f5d-8a10-b84e9e06345a\",\"name\":\"Check if Store by Date is Enabled\",\"type\":\"n8n-nodes-base.if\",\"position\":[1420,80],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"370bcd8c-c72a-4e69-acfd-9e271b1a09ed\",\"operator\":{\"type\":\"boolean\",\"operation\":\"true\",\"singleValue\":true},\"leftValue\":\"={{ $('Get Config').item.json['Store by Date'] === true }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"8644134e-673c-4360-8831-71c048c1522d\",\"name\":\"Check if Store by File Type is Enabled\",\"type\":\"n8n-nodes-base.if\",\"position\":[1420,400],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"7c0577ba-b2ed-4050-a580-3cadc7da2b73\",\"operator\":{\"type\":\"boolean\",\"operation\":\"true\",\"singleValue\":true},\"leftValue\":\"={{ $('Get Config').item.json['Store by File Type'] === true }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"f6b24396-a854-42c4-ae70-55095d637b9a\",\"name\":\"LINE Webhook Listener\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[980,-300],\"webhookId\":\"feb869e5-a96c-4a5c-b346-3d7c7e64bf0a\",\"parameters\":{\"path\":\"line-webhook\",\"options\":{},\"httpMethod\":\"POST\"},\"typeVersion\":1},{\"id\":\"3b1ca174-f5fc-4b01-90f4-be9240f8be77\",\"name\":\"Send LINE Reply Message\",\"type\":\"n8n-nodes-base.httpRequest\",\"onError\":\"continueRegularOutput\",\"position\":[2280,620],\"parameters\":{\"url\":\"https://api.line.me/v2/bot/message/reply\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={\\n  \\\"replyToken\\\": \\\"{{ $('LINE Webhook Listener').first().json.body.events[0].replyToken }}\\\",\\n  \\\"messages\\\": [\\n    {\\n      \\\"type\\\": \\\"text\\\",\\n      \\\"text\\\": \\\"{{ $('Validate File Type').item.json.error ? $('Validate File Type').item.json.error : $json['Google Drive URL'] }}\\\"\\n    }\\n  ]\\n}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\"},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"byY3kI23lMe4ewnM\",\"name\":\"Header Auth account - Maid\"}},\"typeVersion\":4.2,\"alwaysOutputData\":true},{\"id\":\"87465dac-4557-4ee4-ae21-b36aab37c884\",\"name\":\"Validate File Type\",\"type\":\"n8n-nodes-base.code\",\"onError\":\"continueRegularOutput\",\"position\":[1380,640],\"parameters\":{\"jsCode\":\"// ดึงค่า allowed types จาก Node \\\"Get Config\\\"\\nconst allowedTypes = $('Get Config').first().json[\\\"Allow File Types\\\"]\\n  .split(\\\"|\\\")\\n  .map(s => s.trim().toLowerCase());\\n\\n// ดึงค่า file type จากข้อมูลของ event (ปรับให้ตรงกับ structure ของข้อมูลคุณ)\\nconst fileType = $('LINE Webhook Listener').first().json.body.events[0].message.type.toLowerCase();\\n\\n// ตรวจสอบว่า fileType อยู่ใน allowedTypes หรือไม่\\nif (!allowedTypes.includes(fileType)) {\\n  // สร้าง Error object พร้อมแนบข้อมูล replyToken และ errorMessage\\n  const error = new Error(`File type '${fileType}' is not allowed.`);\\n  error.json = {\\n    replyToken: $('LINE Webhook Listener').first().json.body.events[0].replyToken,\\n    errorMessage: error.message,\\n  };\\n  throw error;\\n}\\n\\nreturn items;\\n\"},\"typeVersion\":2,\"alwaysOutputData\":true},{\"id\":\"00ddc2ae-4782-4079-947e-2fda99c0f037\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[220,-380],\"parameters\":{\"width\":2320,\"height\":320,\"content\":\"## Workflow Entry & Configuration\\nThis section initializes the workflow by listening to incoming requests from \\nthe LINE Messaging API and retrieving configuration details from Google Sheets. \\nIt merges the event data with the config, then determines initial folder information \\n(such as whether to store files by date or file type). Nodes in this group:\\n\\n* **LINE Webhook Listener**\\nReceives POST requests (file messages) from LINE.\\n* **Get Config**\\nReads configuration data (parent folder, allowed file types, etc.) from a Google Sheet.\\n* **Merge Event and Config Data**\\nCombines the LINE event data and config data.\\n* **Determine Folder Info**\\nCalculates folder names based on the config (e.g., date folder name, file type folder name).\"},\"typeVersion\":1},{\"id\":\"ccae9a3d-0a46-4c06-b94b-c3bd08d10df1\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[220,-40],\"parameters\":{\"color\":5,\"width\":2320,\"height\":340,\"content\":\"## Folder Search & Creation\\nThis section handles the logic for finding or creating the appropriate Google Drive folders.\\nIt checks if a date folder exists (when Store by Date is enabled) and whether a file type folder\\n is required (when Store by File Type is enabled). Nodes in this group:\\n\\n* **Search Date Folder / Check Existing Date Folder / Check if Store by Date is Enabled** \\nLooks for or creates a date-based folder.\\n* **Create Date Folder / Set Date Folder ID** \\nreates and stores the date folder ID if it doesn’t exist.\\n* **Search File Type Folder / Check Existing File Type Folder / Check if Store by File Type is Enabled** \\nSimilarly handles file type subfolder logic.\\n* **Create File Type Folder / Set File Type Folder ID** \\n Creates and stores the file type folder ID.\\n* **Merge Final Parent Folder Data / Configure Final Parent Folder ID** \\nMerges the final folder IDs (date folder + file type folder) to determine where the file should be placed.\"},\"typeVersion\":1},{\"id\":\"b9272975-3e0d-436c-b8e3-98fcb8cfc893\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[220,600],\"parameters\":{\"color\":4,\"width\":2320,\"height\":320,\"content\":\"## Upload, Log, & Reply\\nOnce the file is validated and the correct folder determined, the workflow uploads the file\\nto Google Drive and logs the details in a Google Sheet. Finally, it checks whether replies \\nare enabled and, if so, sends a message back to the LINE user (either confirming a successful\\nupload or reporting an error). Nodes in this group:\\n\\n* **Upload File to Google Drive**\\nUploads the validated file to the determined folder path.\\n* **Log File Details to Google Sheet**\\nRecords the file name, upload date, URL, and file type in Google Sheets.\\n* **Check Reply Enabled Flag**\\nVerifies if replies to LINE are turned on in the config.\\n* **Send LINE Reply Message**\\nSends a text reply back to the user via LINE, either containing the file’s Google Drive URL or an error message.\"},\"typeVersion\":1},{\"id\":\"85a84d38-6992-439d-bdaa-de37b0dac554\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[220,320],\"parameters\":{\"color\":6,\"width\":2320,\"height\":260,\"content\":\"## File Retrieval & Validation\\nIn this group, the workflow fetches the binary content of the file from the LINE API\\nand validates whether the file type is allowed (e.g., image, audio, video). If the \\nfile type is not permitted, the workflow throws an error which will be used to send\\nan appropriate reply message back to LINE. Nodes in this group:\\n\\n* **Get File Binary Content**\\nRetrieves the actual file data from the LINE Messaging API.\\n* **Validate File Type**\\nChecks the file’s MIME type against an allowed list from the config and throws an error if disallowed.\"},\"typeVersion\":1}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"10f96ecd-2a9e-48c6-91f6-b49c00e0ac90\",\"connections\":{\"Get Config\":{\"main\":[[{\"node\":\"Merge Event and Config Data\",\"type\":\"main\",\"index\":1}]]},\"Create Date Folder\":{\"main\":[[{\"node\":\"Set Date Folder ID\",\"type\":\"main\",\"index\":0}]]},\"Search Date Folder\":{\"main\":[[{\"node\":\"Check Existing Date Folder\",\"type\":\"main\",\"index\":0}]]},\"Set Date Folder ID\":{\"main\":[[{\"node\":\"Search File Type Folder\",\"type\":\"main\",\"index\":0},{\"node\":\"Merge Final Parent Folder Data\",\"type\":\"main\",\"index\":0}]]},\"Validate File Type\":{\"main\":[[{\"node\":\"Upload File to Google Drive\",\"type\":\"main\",\"index\":0}]]},\"Determine Folder Info\":{\"main\":[[{\"node\":\"Search Date Folder\",\"type\":\"main\",\"index\":0}]]},\"LINE Webhook Listener\":{\"main\":[[{\"node\":\"Merge Event and Config Data\",\"type\":\"main\",\"index\":0},{\"node\":\"Get Config\",\"type\":\"main\",\"index\":0}]]},\"Create File Type Folder\":{\"main\":[[{\"node\":\"Set File Type Folder ID\",\"type\":\"main\",\"index\":0}]]},\"Get File Binary Content\":{\"main\":[[{\"node\":\"Validate File Type\",\"type\":\"main\",\"index\":0}]]},\"Search File Type Folder\":{\"main\":[[{\"node\":\"Check Existing File Type Folder\",\"type\":\"main\",\"index\":0}]]},\"Set File Type Folder ID\":{\"main\":[[{\"node\":\"Merge Final Parent Folder Data\",\"type\":\"main\",\"index\":1}]]},\"Check Reply Enabled Flag\":{\"main\":[[{\"node\":\"Send LINE Reply Message\",\"type\":\"main\",\"index\":0}]]},\"Check Existing Date Folder\":{\"main\":[[{\"node\":\"Set Date Folder ID\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Check if Store by Date is Enabled\",\"type\":\"main\",\"index\":0}]]},\"Merge Event and Config Data\":{\"main\":[[{\"node\":\"Process Event and Config Data\",\"type\":\"main\",\"index\":0}]]},\"Upload File to Google Drive\":{\"main\":[[{\"node\":\"Log File Details to Google Sheet\",\"type\":\"main\",\"index\":0}]]},\"Process Event and Config Data\":{\"main\":[[{\"node\":\"Determine Folder Info\",\"type\":\"main\",\"index\":0}]]},\"Merge Final Parent Folder Data\":{\"main\":[[{\"node\":\"Configure Final Parent Folder ID\",\"type\":\"main\",\"index\":0}]]},\"Check Existing File Type Folder\":{\"main\":[[{\"node\":\"Set File Type Folder ID\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Check if Store by File Type is Enabled\",\"type\":\"main\",\"index\":0}]]},\"Configure Final Parent Folder ID\":{\"main\":[[{\"node\":\"Get File Binary Content\",\"type\":\"main\",\"index\":0}]]},\"Log File Details to Google Sheet\":{\"main\":[[{\"node\":\"Check Reply Enabled Flag\",\"type\":\"main\",\"index\":0}]]},\"Check if Store by Date is Enabled\":{\"main\":[[{\"node\":\"Create Date Folder\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Set Date Folder ID\",\"type\":\"main\",\"index\":0}]]},\"Check if Store by File Type is Enabled\":{\"main\":[[{\"node\":\"Create File Type Folder\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Set File Type Folder ID\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "## Overview\n\nThis workflow automatically saves files received via LINE Messaging API into Google Drive and logs the file details into a Google Sheet. It checks the file type against allowed types, organizes files into date-based folders and (optionally) file type–specific subfolders, and sends a reply message back to the LINE user with the file URL or an error message if the file type is not permitted.\n\n## Who is this for?\n\n**Developers & IT Administrators:** Looking to integrate LINE with Google Drive and Sheets for automated file management.  \n**Businesses & Marketing Teams:** That want to automatically archive media files and documents received from users via LINE.  \n**Anyone Interested in No-Code Automation:** Users who want to leverage n8n’s capabilities without heavy coding.\n\n## What Problem Does This Workflow Solve?\n\n**Automated File Organization:** Files received from LINE are automatically checked for allowed file types, then stored in a structured folder hierarchy in Google Drive (by date and/or file type).  \n**Data Logging:** Each file upload is recorded in a Google Sheet, providing an audit trail with file names, upload dates, URLs, and types.  \n**Instant Feedback:** Users receive an immediate reply via LINE confirming the file upload, or an error message if the file type is not allowed.\n\n## What This Workflow Does\n\n**1\\. Receives Incoming Requests:**\n\n  * A webhook node (_\"LINE Webhook Listener\"_) listens for POST requests from LINE, capturing file upload events and associated metadata.\n\n\n\n**2\\. Configuration Loading:**\n\n  * A Google Sheets node (_\"Get Config\"_) reads configuration data (e.g., parent folder ID, allowed file types, folder organization settings, and credentials) from a pre-defined sheet.\n\n\n\n**Data Merging & Processing:**\n\n  * The _\"Merge Event and Config Data\"_ and _\"Process Event and Config Data\"_ nodes merge and structure the event data with configuration settings.\n  * A _\"Determine Folder Info\"_ node calculates folder names based on the configuration. If Store by Date is enabled, it uses the current date (or a specified date) as the folder name. If Store by File Type is also enabled, it uses the file’s type (e.g., image) for a subfolder.\n\n\n\n**4\\. Folder Search & Creation:**\n\n  * The workflow searches for an existing date folder (_\"Search Date Folder\"_).\n  * If the date folder is not found, an IF node (_\"Check Existing Date Folder\"_) routes to a _\"Create Date Folder\"_ node.\n  * Similarly, for file type organization, the workflow uses a _\"Search FileType Folder\"_ node (with appropriate conditions) to look for a subfolder, or creates it if not found.\n  * The _\"Set Date Folder ID\"_ and _\"Set Image Folder ID\"_ nodes capture and merge the resulting folder IDs.\n  * Finally, the _\"Config final ParentId\"_ node sets the final target folder ID based on the configuration conditions: \n    * **Store by Date: TRUE, Store by File Type: TRUE:** Use the file type folder (inside the date folder).\n    * **Store by Date: TRUE, Store by File Type: FALSE:** Use the date folder.\n    * **Store by Date: FALSE, Store by File Type: TRUE:** Use the file type folder.\n    * **Store by Date: FALSE, Store by File Type: FALSE:** Use the Parent Folder ID from the configuration.\n\n\n\n**5\\. File Retrieval and Validation:**\n\n  * A HTTP Request node (_\"Get File Binary Content\"_) fetches the file’s binary data from the LINE API.\n  * A Function node (_\"Validate File Type\"_) checks if the file’s MIME type is included in the allowed list (e.g., \"audio|image|video\"). If not, it throws an error that is captured for the reply.\n\n\n\n**6\\. File Upload and Logging:**\n\n  * The _\"Upload File to Google Drive\"_ node uploads the validated binary file to the final target folder.\n  * After a successful upload, the _\"Log File Details to Google Sheet\"_ node logs details such as file name, upload date, Google Drive URL, and file type into a designated Google Sheet.\n\n\n\n**7\\. User Feedback:**\n\n  * The _\"Check Reply Enabled Flag\"_ node checks if the reply feature is enabled.\n  * Finally, the _\"Send LINE Reply Message\"_ node sends a reply message back to the LINE user with either the file URL (if the upload was successful) or an error message (if the file type was not allowed).\n\n\n\n## Setup Instructions\n\n**1\\. Google Sheets Setup:**\n\n  * **Create a Google Sheet with two sheets:**\n    * **config:** Include columns for Parent Folder Path, Parent Folder ID, Store by Date (boolean), Store by File Type (boolean), Allow File Types (e.g., “audio|image|video”), CurrentDate, Reply Enabled, and CHANNEL ACCESS TOKEN.\n    * **fileList:** Create headers for File Name, Date Uploaded, Google Drive URL, and File Type.\n\n\n\nFor an example of the required format, check this Google Sheets template: [Google Sheet Template](https://docs.google.com/spreadsheets/d/1iO4ZHU7s0fe1Jn8jcScNDce7rFXQlkRBqsO8IFHbcSc/edit?usp=sharing)\n\n**2\\. Google Drive Credentials:**\n\n  * Set up and authorize your Google Drive credentials in n8n.\n\n\n\n**3\\. LINE Messaging API:**\n\n  * Configure your LINE Developer Console webhook to point to the n8n Webhook URL (\"Line Chat Bot\" node).\n  * Ensure you have the proper Channel Access Token stored in your Google Sheet.\n\n\n\n**4\\. n8n Workflow Import:**\n\n  * Import the provided JSON file into your n8n instance.\n  * Verify node connections and update any credential references as needed.\n\n\n\n**5\\. Test the Workflow:**\n\n  * Send a test message via LINE to confirm that files are properly validated, uploaded, logged, and that reply messages are sent.\n\n\n\n## How to Customize This Workflow\n\n  * Allowed File Types: Adjust the _\"Validate File Type\"_ field in your config sheet to control which file types are accepted.\n  * Folder Structure: Modify the logic in the \"Determine Folder Info\" and subsequent folder nodes to change how folders are structured (e.g., use different date formats or add additional categorization).\n  * Logging: Update the _\"Log File Details to Google Sheet\"_ node if you wish to log additional file metadata.\n  * Reply Messages: Customize the reply text in the _\"Send LINE Reply Message\"_ node to include more detailed information or instructions.\n\n\n",
  "crawled_at": "2025-05-26T03:57:59.049979",
  "readme_zh": "## 概述\n\n该工作流可自动将通过LINE Messaging API接收的文件保存至Google Drive，并将文件详情记录到Google表格中。它能校验文件类型是否符合允许范围，按日期创建文件夹（可选按文件类型建立子文件夹）分类存储，并向LINE用户返回包含文件链接的确认消息或类型不符的报错提示。\n\n## 适用人群\n\n**开发者与IT管理员**：需要将LINE与Google Drive及表格集成实现自动化文件管理  \n**企业与营销团队**：希望自动归档用户通过LINE发送的媒体文件与文档  \n**零代码自动化爱好者**：希望无需复杂编程即可利用n8n实现自动化\n\n## 解决的核心问题\n\n**自动化文件归档**：自动校验LINE接收的文件类型，并按日期/文件类型分层存储至Google Drive  \n**数据留痕**：所有上传记录自动记入Google表格，包含文件名、上传时间、链接及类型等审计信息  \n**即时反馈**：用户即刻收到文件上传成功的链接或类型不符的报错通知\n\n## 工作流详解\n\n**1. 接收请求**  \n• _\"LINE Webhook监听器\"_节点实时捕获LINE平台的文件上传事件及元数据\n\n**2. 加载配置**  \n• _\"获取配置\"_节点从预设Google表格读取父文件夹ID、允许的文件类型、分类设置等参数\n\n**3. 数据处理**  \n• 通过_\"合并事件与配置\"_和_\"处理事件数据\"_节点整合数据  \n• _\"确定文件夹信息\"_节点根据配置生成文件夹名称（日期格式或文件类型子目录）\n\n**4. 文件夹管理**  \n• 先查询是否存在日期文件夹（_\"查询日期文件夹\"_节点）  \n• 若不存在则通过条件分支（_\"检查日期文件夹\"_节点）触发_\"创建日期文件夹\"_  \n• 同类逻辑处理文件类型子文件夹（_\"查询文件类型文件夹\"_节点）  \n• 最终由_\"配置最终父ID\"_节点根据以下规则确定存储路径：  \n  - **同时启用日期与类型分类**：日期文件夹/类型子文件夹  \n  - **仅日期分类**：日期文件夹  \n  - **仅类型分类**：类型文件夹  \n  - **均不启用**：配置表中指定的父文件夹\n\n**5. 文件校验**  \n• 通过HTTP请求节点获取LINE文件二进制数据  \n• _\"校验文件类型\"_节点核对MIME类型白名单（如\"音频|图片|视频\"）\n\n**6. 文件上传**  \n• 校验通过后，_\"上传至Google Drive\"_节点执行文件传输  \n• _\"记录文件详情\"_节点将关键信息写入Google表格\n\n**7. 用户反馈**  \n• 根据配置表中的回复开关，通过LINE节点发送成功链接或类型错误提示\n\n## 配置指南\n\n**1. Google表格准备**  \n• 创建含两个工作表的表格：  \n  - **config表**：包含父文件夹路径、ID、分类开关、允许类型（如\"audio|image|video\"）、当前日期、回复开关、LINE频道令牌等字段  \n  - **fileList表**：设置文件名、上传日期、云盘链接、文件类型等列名  \n• 参考模板：[Google表格模板](https://docs.google.com/spreadsheets/d/1iO4ZHU7s0fe1Jn8jcScNDce7rFXQlkRBqsO8IFHbcSc/edit?usp=sharing)\n\n**2. 云盘授权**  \n• 在n8n中完成Google Drive凭证配置\n\n**3. LINE对接**  \n• 在LINE开发者平台将webhook指向n8n的_\"LINE聊天机器人\"_节点URL  \n• 确保配置表中已录入正确的频道访问令牌\n\n**4. 工作流部署**  \n• 将提供的JSON文件导入n8n  \n• 检查节点连接关系并按需更新凭证引用\n\n**5. 测试验证**  \n• 通过LINE发送测试文件，确认上传、记录、回复全流程正常运行\n\n## 自定义建议\n\n• **文件类型控制**：修改配置表中的_\"校验文件类型\"_字段  \n• **目录结构**：调整_\"确定文件夹信息\"_节点逻辑（如更改日期格式或增加分类维度）  \n• **日志字段**：扩展_\"记录文件详情\"_节点的元数据记录范围  \n• **回复模板**：在LINE回复节点中定制化消息内容",
  "title_zh": "利用表格记录自动保存并整理LINE消息文件至Google Drive",
  "publish_date_zh": "最后更新于2个月前",
  "workflow_json_zh": "{\n  \"id\": \"mqdP7Aw1KnkIq2W5\",\n  \"meta\": {\n    \"instanceId\": \"2c12b0b552404dc07af67cd5f092afd21d18c808d4fdabdb04cb4b064195b6fb\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"Line Save File to Google Drive and Log File's URL\",\n  \"tags\": [\n    {\n      \"id\": \"W3ZSaJHRI2hXA9gT\",\n      \"name\": \"Line Messaging API\",\n      \"createdAt\": \"2025-03-09T13:14:42.780Z\",\n      \"updatedAt\": \"2025-03-09T13:14:42.780Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"47c9f83b-5590-4ffc-825c-5fee72e8ef87\",\n      \"name\": \"Get Config\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"position\": [\n        1220,\n        -200\n      ],\n      \"parameters\": {\n        \"range\": \"config!A1:H2\",\n        \"options\": {},\n        \"sheetId\": \"1iO4ZHU7s0fe1Jn8jcScNDce7rFXQlkRBqsO8IFHbcSc\"\n      },\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"0RVWjnYzlWor2bMu\",\n          \"name\": \"Google Sheets account\"\n        }\n      },\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"1514cec1-bd12-4ce4-99af-bd2465026822\",\n      \"name\": \"Create Date Folder\",\n      \"type\": \"n8n-nodes-base.googleDrive\",\n      \"position\": [\n        1700,\n        80\n      ],\n      \"parameters\": {\n        \"name\": \"={{ $('Determine Folder Info').item.json.dateFolderName }}\",\n        \"options\": {\n          \"parents\": [\n            \"={{ $('Determine Folder Info').item.json.baseFolderId }}\"\n          ]\n        },\n        \"resource\": \"folder\"\n      },\n      \"credentials\": {\n        \"googleDriveOAuth2Api\": {\n          \"id\": \"QVrgALkld7whKIgB\",\n          \"name\": \"Google Drive account - Peakwave\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"a584238e-1d53-46ff-8cfc-437e14ea71d9\",\n      \"name\": \"Set Date Folder ID\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1960,\n        -20\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Log ข้อมูล input ทั้งหมด\\n//console.log(\\\"Set Target Parent (Date) - Input:\\\", items);\\n\\nlet targetParentId = '';\\n\\nif (items.length > 0) {\\n\\t// ตรวจสอบจาก branch แรก (True Branch จาก IF node)\\n\\tif (items[0].json && items[0].json.id) {\\n\\t\\ttargetParentId = items[0].json.id;\\n\\t} else if (items.length > 1 && items[1].json && items[1].json.id) {\\n\\t\\t// ถ้าไม่พบจาก branch แรก ให้ลองดูจาก branch ที่สอง (False Branch หรือผลจากการสร้าง folder ใหม่)\\n\\t\\ttargetParentId = items[1].json.id;\\n\\t}\\n\\t\\n\\t// เพิ่ม targetParentId ลงใน items[0].json\\n\\titems[0].json.targetParentId = targetParentId;\\n\\tconsole.log(\\\"Set Target Parent (Date) - Output:\\\", items);\\n\\treturn items;\\n} else {\\n\\tconsole.log(\\\"Set Target Parent (Date) - No input items.\\\");\\n\\treturn [];\\n}\\n\"\n      },\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": false\n    },\n    {\n      \"id\": \"aa480dc9-935e-4a6e-a6c6-2559255ae1c2\",\n      \"name\": \"Create File Type Folder\",\n      \"type\": \"n8n-nodes-base.googleDrive\",\n      \"position\": [\n        1700,\n        400\n      ],\n      \"parameters\": {\n        \"name\": \"={{ $('Determine Folder Info').item.json.fileTypeFolderName }}\",\n        \"driveId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $('Determine Folder Info').item.json.baseFolderId }}\"\n        },\n        \"options\": {},\n        \"folderId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $('Get Config').first().json['Store by Date'] === true ? $('Set Date Folder ID').first().json.targetParentId : $('Get Config').first().json[\\\"Parent Folder ID\\\"] }}\"\n        },\n        \"resource\": \"folder\"\n      },\n      \"credentials\": {\n        \"googleDriveOAuth2Api\": {\n          \"id\": \"QVrgALkld7whKIgB\",\n          \"name\": \"Google Drive account - Peakwave\"\n        }\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"d5ed8981-5b65-45a3-8ff4-c00902756bb9\",\n      \"name\": \"Upload File to Google Drive\",\n      \"type\": \"n8n-nodes-base.googleDrive\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        1600,\n        640\n      ],\n      \"parameters\": {\n        \"name\": \"={{ $('Merge Event and Config Data').item.json.body.events[0].timestamp }}.{{$node[\\\"Get File Binary Content\\\"].binary.data.fileExtension}}\",\n        \"driveId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $('Configure Final Parent Folder ID').item.json.finalParentId }}\"\n        },\n        \"options\": {},\n        \"folderId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"root\"\n        }\n      },\n      \"credentials\": {\n        \"googleDriveOAuth2Api\": {\n          \"id\": \"QVrgALkld7whKIgB\",\n          \"name\": \"Google Drive account - Peakwave\"\n        }\n      },\n      \"typeVersion\": 3,\n      \"alwaysOutputData\": false\n    },\n    {\n      \"id\": \"92787455-6839-455f-a939-6927660bc215\",\n      \"name\": \"Determine Folder Info\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1960,\n        -280\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const data = items[0].json;\\nconst config = data.config;\\nconst event = data.event;\\n\\n// ใช้ key จาก config ตามที่ส่งมา\\nlet baseFolderId = config[\\\"Parent Folder ID\\\"];\\nlet dateFolderName = \\\"\\\";\\nlet fileTypeFolderName = \\\"\\\";\\n\\n// หากตั้งค่า Store by Date เป็น true\\nif (config[\\\"Store by Date\\\"]) {\\n  // ใช้ CurrentDate จาก config หรือใช้วันที่ปัจจุบันถ้าไม่มี\\n  dateFolderName = config[\\\"CurrentDate\\\"] ? config[\\\"CurrentDate\\\"] : new Date().toISOString().slice(0,10).replace(/-/g, \\\"\\\");\\n}\\n\\n// หากตั้งค่า Store by File Type เป็น true\\nif (config[\\\"Store by File Type\\\"]) {\\n  // ตรวจสอบว่า event.body.events มีข้อมูลหรือไม่\\n  if (event.body && event.body.events && event.body.events.length > 0) {\\n    // ดึง type ของ message จาก event.body.events[0]\\n    fileTypeFolderName = event.body.events[0].message.type.toLowerCase();\\n  }\\n}\\n\\nreturn [{\\n  json: {\\n    baseFolderId,\\n    dateFolderName,\\n    fileTypeFolderName,\\n    storeByDate: config[\\\"Store by Date\\\"],\\n    storeByFileType: config[\\\"Store by File Type\\\"],\\n    event: event,\\n    config: config\\n  }\\n}];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"f4e30758-986e-4dd4-bc85-f2953e883bfe\",\n      \"name\": \"Search Date Folder\",\n      \"type\": \"n8n-nodes-base.googleDrive\",\n      \"position\": [\n        980,\n        0\n      ],\n      \"parameters\": {\n        \"filter\": {\n          \"folderId\": {\n            \"__rl\": true,\n            \"mode\": \"id\",\n            \"value\": \"={{ $json.baseFolderId }}\"\n          }\n        },\n        \"options\": {},\n        \"resource\": \"fileFolder\",\n        \"queryString\": \"={{ $json.dateFolderName }}\"\n      },\n      \"credentials\": {\n        \"googleDriveOAuth2Api\": {\n          \"id\": \"QVrgALkld7whKIgB\",\n          \"name\": \"Google Drive account - Peakwave\"\n        }\n      },\n      \"typeVersion\": 3,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"e74d65bc-be7f-43d0-8b0a-ee6316b4aff9\",\n      \"name\": \"Merge Event and Config Data\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        1480,\n        -280\n      ],\n      \"parameters\": {\n        \"mode\": \"mergeByIndex\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f380d584-32aa-435f-8e8e-6d1d05932bd2\",\n      \"name\": \"Check Existing Date Folder\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1220,\n        0\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"boolean\": [\n            {\n              \"value1\": \"={{ $json.id !== undefined }}\",\n              \"value2\": true\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"96dc0853-67ec-4cfc-b40c-0cce63f51e96\",\n      \"name\": \"Check Existing File Type Folder\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1220,\n        320\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"boolean\": [\n            {\n              \"value1\": \"={{ $json.id !== undefined }}\",\n              \"value2\": true\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"742cb154-3b23-423d-8df6-53a82f0d8aab\",\n      \"name\": \"Merge Final Parent Folder Data\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        2280,\n        400\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"1003b29d-9140-4961-90d4-b94e4d33dc69\",\n      \"name\": \"Search File Type Folder\",\n      \"type\": \"n8n-nodes-base.googleDrive\",\n      \"position\": [\n        980,\n        320\n      ],\n      \"parameters\": {\n        \"filter\": {\n          \"folderId\": {\n            \"__rl\": true,\n            \"mode\": \"id\",\n            \"value\": \"={{ $('Get Config').item.json['Store by Date'] === true && $json.targetParentId && $json.targetParentId !== \\\"\\\" ? $json.targetParentId : $('Get Config').item.json['Parent Folder ID'] }}\"\n          }\n        },\n        \"options\": {},\n        \"resource\": \"fileFolder\",\n        \"queryString\": \"={{ $('Determine Folder Info').item.json.fileTypeFolderName }}\"\n      },\n      \"credentials\": {\n        \"googleDriveOAuth2Api\": {\n          \"id\": \"QVrgALkld7whKIgB\",\n          \"name\": \"Google Drive account - Peakwave\"\n        }\n      },\n      \"typeVersion\": 3,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"8015eb75-0c38-4c3b-a29f-f04dedf79cee\",\n      \"name\": \"Set File Type Folder ID\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1960,\n        320\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Log ข้อมูล input ทั้งหมด\\n//console.log(\\\"Set Target Parent (Date) - Input:\\\", items);\\n\\nlet targetParentId = '';\\n\\nif (items.length > 0) {\\n\\t// ตรวจสอบจาก branch แรก (True Branch จาก IF node)\\n\\tif (items[0].json && items[0].json.id) {\\n\\t\\ttargetParentId = items[0].json.id;\\n\\t} else if (items.length > 1 && items[1].json && items[1].json.id) {\\n\\t\\t// ถ้าไม่พบจาก branch แรก ให้ลองดูจาก branch ที่สอง (False Branch หรือผลจากการสร้าง folder ใหม่)\\n\\t\\ttargetParentId = items[1].json.id;\\n\\t}\\n\\t\\n\\t// เพิ่ม targetParentId ลงใน items[0].json\\n\\titems[0].json.targetParentId = targetParentId;\\n\\tconsole.log(\\\"Set Target Parent (Date) - Output:\\\", items);\\n\\treturn items;\\n} else {\\n\\tconsole.log(\\\"Set Target Parent (Date) - No input items.\\\");\\n\\treturn [];\\n}\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"b59d58c7-cb8c-4edc-a7e7-533675c39a96\",\n      \"name\": \"Configure Final Parent Folder ID\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        960,\n        640\n      ],\n      \"parameters\": {\n        \"jsCode\": \"/**\\n * Expected input: items array จาก Merge Final Data\\n * - items[0].json คือผลลัพธ์ที่อาจเป็น folder สำหรับวันที่หรือ file type folder (ขึ้นอยู่กับเงื่อนไข)\\n * - items[1].json คือผลลัพธ์อีกส่วนหนึ่ง (สำหรับกรณีที่มีทั้งสอง)\\n * \\n * Config จะถูกดึงมาจาก node 'Get Config'\\n */\\n\\nconst config = $('Get Config').first().json;\\nlet finalParentId = '';\\n\\n// เงื่อนไขเลือก finalParentId\\nif (config[\\\"Store by Date\\\"] === true && config[\\\"Store by File Type\\\"] === true) {\\n    // เมื่อทั้งสองเป็น TRUE: สมมุติว่า file type folder อยู่ใน items[1]\\n    finalParentId = $('Set File Type Folder ID').first().json.targetParentId\\n} else if (config[\\\"Store by Date\\\"] === true && config[\\\"Store by File Type\\\"] === false) {\\n    // ใช้ folder ตามวันที่ (items[0])\\n    finalParentId =$('Set Date Folder ID').first().json.targetParentId;\\n} else if (config[\\\"Store by Date\\\"] === false && config[\\\"Store by File Type\\\"] === true) {\\n    // ใช้ folder สำหรับประเภทไฟล์ (ใน test case นี้ ใช้ items[0])\\n    finalParentId = $('Set File Type Folder ID').first().json.targetParentId;\\n} else {\\n    // เมื่อทั้งสองเป็น FALSE: ใช้ Parent Folder ID จาก config\\n    finalParentId = config[\\\"Parent Folder ID\\\"];\\n}\\n\\n// เพิ่ม finalParentId ลงใน items[0].json เพื่อส่งต่อให้ Node \\\"Upload File to Google Drive\\\" ใช้งาน\\nitems[0].json.finalParentId = finalParentId;\\nreturn [items[0]];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"683c83fc-e4b7-4a0d-b5f0-8958d0743faf\",\n      \"name\": \"Process Event and Config Data\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1680,\n        -280\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// ตรวจสอบว่า items มีอย่างน้อย 2 รายการหรือไม่\\nconst eventData = items[0].json;\\nlet config;\\n\\nif (items.length >= 2) {\\n\\t// ถ้ามี items[1] ให้ใช้เป็น config\\n\\tconst configData = items[1].json;\\n\\tconfig = Array.isArray(configData) ? configData[0] : configData;\\n} else {\\n\\t// ถ้าไม่มี items[1] ให้ลองดึง config จาก eventData\\n\\t// สมมุติว่าฟิลด์ config ถูกส่งมาพร้อมกับ eventData ด้วยชื่อฟิลด์เหมือนที่ได้ใน output\\n\\tif (eventData[\\\"Parent Folder Path\\\"] && eventData[\\\"Parent Folder ID\\\"]) {\\n\\t\\tconfig = {\\n\\t\\t\\t\\\"Parent Folder Path\\\": eventData[\\\"Parent Folder Path\\\"],\\n\\t\\t\\t\\\"Parent Folder ID\\\": eventData[\\\"Parent Folder ID\\\"],\\n\\t\\t\\t\\\"Store by Date\\\": eventData[\\\"Store by Date\\\"],\\n\\t\\t\\t\\\"Store by File Type\\\": eventData[\\\"Store by File Type\\\"],\\n\\t\\t\\t\\\"Allow File Types\\\": eventData[\\\"Allow File Types\\\"],\\n\\t\\t\\t\\\"CurrentDate\\\": eventData[\\\"CurrentDate\\\"],\\n\\t\\t\\t\\\"Reply Enabled\\\": eventData[\\\"Reply Enabled\\\"],\\n\\t\\t\\t\\\"CHANNEL ACCESS TOKEN\\\": eventData[\\\"CHANNEL ACCESS TOKEN\\\"]\\n\\t\\t};\\n\\t} else {\\n\\t\\tthrow new Error(\\\"ไม่พบข้อมูล config! กรุณาตรวจสอบว่า node ก่อนหน้านี้ส่งข้อมูล config มาด้วย\\\");\\n\\t}\\n}\\n\\nreturn [{ json: { event: eventData, config: config } }];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"fb5bd15c-bb0a-420b-a14b-ed5df5ecd691\",\n      \"name\": \"Get File Binary Content\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1180,\n        640\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api-data.line.me/v2/bot/message/{{ $('LINE Webhook Listener').item.json.body.events[0].message.id }}/content\",\n        \"options\": {},\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"byY3kI23lMe4ewnM\",\n          \"name\": \"Header Auth account - Maid\"\n        }\n      },\n      \"executeOnce\": true,\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"f064ba27-a5a8-4cca-afb8-3e099fb5abc8\",\n      \"name\": \"Log File Details to Google Sheet\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        1820,\n        640\n      ],\n      \"parameters\": {\n        \"columns\": {\n          \"value\": {\n            \"File Name\": \"={{ $json.name }}\",\n            \"File Type\": \"={{ $json.fileExtension }}\",\n            \"Date Uploaded\": \"={{ $json.createdTime }}\",\n            \"Google Drive URL\": \"={{ $json.webContentLink }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"File Name\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"File Name\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Date Uploaded\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"Date Uploaded\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Google Drive URL\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"Google Drive URL\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"File Type\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"File Type\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": false\n        },\n        \"options\": {},\n        \"operation\": \"append\",\n        \"sheetName\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": 585160829,\n          \"cachedResultUrl\": \"https://docs.google.com/spreadsheets/d/1iO4ZHU7s0fe1Jn8jcScNDce7rFXQlkRBqsO8IFHbcSc/edit#gid=585160829\",\n          \"cachedResultName\": \"fileList\"\n        },\n        \"documentId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"1iO4ZHU7s0fe1Jn8jcScNDce7rFXQlkRBqsO8IFHbcSc\"\n        }\n      },\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"0RVWjnYzlWor2bMu\",\n          \"name\": \"Google Sheets account\"\n        }\n      },\n      \"typeVersion\": 4.5,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"fd936998-6ba0-4dbe-b406-c785f89181dd\",\n      \"name\": \"Check Reply Enabled Flag\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        2040,\n        640\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"8f593e3a-95dd-457e-903f-f2ca68cdbcd1\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $('Get Config').item.json['Reply Enabled'] }}\",\n              \"rightValue\": \"true\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"7d1f19e7-cb6c-4f5d-8a10-b84e9e06345a\",\n      \"name\": \"Check if Store by Date is Enabled\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1420,\n        80\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"370bcd8c-c72a-4e69-acfd-9e271b1a09ed\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $('Get Config').item.json['Store by Date'] === true }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"8644134e-673c-4360-8831-71c048c1522d\",\n      \"name\": \"Check if Store by File Type is Enabled\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1420,\n        400\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"7c0577ba-b2ed-4050-a580-3cadc7da2b73\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $('Get Config').item.json['Store by File Type'] === true }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"f6b24396-a854-42c4-ae70-55095d637b9a\",\n      \"name\": \"LINE Webhook Listener\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        980,\n        -300\n      ],\n      \"webhookId\": \"feb869e5-a96c-4a5c-b346-3d7c7e64bf0a\",\n      \"parameters\": {\n        \"path\": \"line-webhook\",\n        \"options\": {},\n        \"httpMethod\": \"POST\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3b1ca174-f5fc-4b01-90f4-be9240f8be77\",\n      \"name\": \"Send LINE Reply Message\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        2280,\n        620\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.line.me/v2/bot/message/reply\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"replyToken\\\": \\\"{{ $('LINE Webhook Listener').first().json.body.events[0].replyToken }}\\\",\\n  \\\"messages\\\": [\\n    {\\n      \\\"type\\\": \\\"text\\\",\\n      \\\"text\\\": \\\"{{ $('Validate File Type').item.json.error ? $('Validate File Type').item.json.error : $json['Google Drive URL'] }}\\\"\\n    }\\n  ]\\n}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"byY3kI23lMe4ewnM\",\n          \"name\": \"Header Auth account - Maid\"\n        }\n      },\n      \"typeVersion\": 4.2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"87465dac-4557-4ee4-ae21-b36aab37c884\",\n      \"name\": \"Validate File Type\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        1380,\n        640\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// ดึงค่า allowed types จาก Node \\\"Get Config\\\"\\nconst allowedTypes = $('Get Config').first().json[\\\"Allow File Types\\\"]\\n  .split(\\\"|\\\")\\n  .map(s => s.trim().toLowerCase());\\n\\n// ดึงค่า file type จากข้อมูลของ event (ปรับให้ตรงกับ structure ของข้อมูลคุณ)\\nconst fileType = $('LINE Webhook Listener').first().json.body.events[0].message.type.toLowerCase();\\n\\n// ตรวจสอบว่า fileType อยู่ใน allowedTypes หรือไม่\\nif (!allowedTypes.includes(fileType)) {\\n  // สร้าง Error object พร้อมแนบข้อมูล replyToken และ errorMessage\\n  const error = new Error(`File type '${fileType}' is not allowed.`);\\n  error.json = {\\n    replyToken: $('LINE Webhook Listener').first().json.body.events[0].replyToken,\\n    errorMessage: error.message,\\n  };\\n  throw error;\\n}\\n\\nreturn items;\\n\"\n      },\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"00ddc2ae-4782-4079-947e-2fda99c0f037\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        220,\n        -380\n      ],\n      \"parameters\": {\n        \"width\": 2320,\n        \"height\": 320,\n        \"content\": \"## Workflow Entry & Configuration\\nThis section initializes the workflow by listening to incoming requests from \\nthe LINE Messaging API and retrieving configuration details from Google Sheets. \\nIt merges the event data with the config, then determines initial folder information \\n(such as whether to store files by date or file type). Nodes in this group:\\n\\n* **LINE Webhook Listener**\\nReceives POST requests (file messages) from LINE.\\n* **Get Config**\\nReads configuration data (parent folder, allowed file types, etc.) from a Google Sheet.\\n* **Merge Event and Config Data**\\nCombines the LINE event data and config data.\\n* **Determine Folder Info**\\nCalculates folder names based on the config (e.g., date folder name, file type folder name).\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ccae9a3d-0a46-4c06-b94b-c3bd08d10df1\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        220,\n        -40\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 2320,\n        \"height\": 340,\n        \"content\": \"## Folder Search & Creation\\nThis section handles the logic for finding or creating the appropriate Google Drive folders.\\nIt checks if a date folder exists (when Store by Date is enabled) and whether a file type folder\\n is required (when Store by File Type is enabled). Nodes in this group:\\n\\n* **Search Date Folder / Check Existing Date Folder / Check if Store by Date is Enabled** \\nLooks for or creates a date-based folder.\\n* **Create Date Folder / Set Date Folder ID** \\nreates and stores the date folder ID if it doesn’t exist.\\n* **Search File Type Folder / Check Existing File Type Folder / Check if Store by File Type is Enabled** \\nSimilarly handles file type subfolder logic.\\n* **Create File Type Folder / Set File Type Folder ID** \\n Creates and stores the file type folder ID.\\n* **Merge Final Parent Folder Data / Configure Final Parent Folder ID** \\nMerges the final folder IDs (date folder + file type folder) to determine where the file should be placed.\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b9272975-3e0d-436c-b8e3-98fcb8cfc893\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        220,\n        600\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 2320,\n        \"height\": 320,\n        \"content\": \"## 上传、记录与回复\\n文件验证通过且目标文件夹确认后，工作流会将文件上传至Google Drive，并将详细信息记录在Google表格中。最后检查是否启用了回复功能，若已启用则向LINE用户发送消息（确认上传成功或报告错误）。该节点组包含：\\n\\n* **上传文件至Google Drive**\\n将已验证的文件上传至指定文件夹路径\\n* **记录文件详情至Google表格**\\n在Google表格中登记文件名、上传日期、URL及文件类型\\n* **检查回复启用标志**\\n验证配置中是否开启了LINE回复功能\\n* **发送LINE回复消息**\\n通过LINE向用户发送文本回复，内容包含文件的Google Drive链接或错误信息\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"85a84d38-6992-439d-bdaa-de37b0dac554\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        220,\n        320\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 2320,\n        \"height\": 260,\n        \"content\": \"## 文件获取与验证\\n该模块的工作流程是从LINE API获取文件的二进制内容，并验证文件类型是否被允许（如图像、音频、视频等）。若文件类型不符合要求，工作流将抛出错误，用于向LINE返回相应的回复消息。该模块包含以下节点：\\n\\n* **获取文件二进制内容**  \\n从LINE Messaging API获取实际的文件数据。  \\n* **验证文件类型**  \\n根据配置中的允许列表检查文件的MIME类型，若类型不被允许则抛出错误。\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"10f96ecd-2a9e-48c6-91f6-b49c00e0ac90\",\n  \"connections\": {\n    \"Get Config\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Event and Config Data\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Create Date Folder\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set Date Folder ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Search Date Folder\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Existing Date Folder\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set Date Folder ID\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Search File Type Folder\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Merge Final Parent Folder Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Validate File Type\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Upload File to Google Drive\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Determine Folder Info\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Search Date Folder\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"LINE Webhook Listener\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Event and Config Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Get Config\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create File Type Folder\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set File Type Folder ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get File Binary Content\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Validate File Type\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Search File Type Folder\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Existing File Type Folder\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set File Type Folder ID\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Final Parent Folder Data\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Check Reply Enabled Flag\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send LINE Reply Message\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Existing Date Folder\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set Date Folder ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Check if Store by Date is Enabled\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Merge Event and Config Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Process Event and Config Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Upload File to Google Drive\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Log File Details to Google Sheet\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Process Event and Config Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Determine Folder Info\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Merge Final Parent Folder Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Configure Final Parent Folder ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Existing File Type Folder\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set File Type Folder ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Check if Store by File Type is Enabled\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Configure Final Parent Folder ID\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get File Binary Content\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Log File Details to Google Sheet\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Reply Enabled Flag\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check if Store by Date is Enabled\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create Date Folder\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Set Date Folder ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check if Store by File Type is Enabled\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create File Type Folder\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Set File Type Folder ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}