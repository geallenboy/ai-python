{
  "url": "https://n8n.io/workflows/2043-crypto-market-alert-system-with-binance-and-telegram-integration/",
  "title": "Crypto Market Alert System with Binance and Telegram Integration",
  "author": "Nskha",
  "publish_date": "Last update 10 months ago",
  "publish_date_absolute": "2024-07-25",
  "categories": [
    {
      "name": "Other"
    }
  ],
  "workflow_json": "{\"meta\":{\"instanceId\":\"dbd43d88d26a9e30d8aadc002c9e77f1400c683dd34efe3778d43d27250dde50\"},\"nodes\":[{\"id\":\"f305e08e-d4b4-4ec6-be74-5edb7a3711e5\",\"name\":\"Schedule Trigger\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[520,1279],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"minutes\"}]}},\"typeVersion\":1.1},{\"id\":\"abac20ef-6319-40e3-8d30-806d7499a427\",\"name\":\"Send Telegram Message\",\"type\":\"n8n-nodes-base.telegram\",\"position\":[1360,1279],\"parameters\":{\"text\":\"={{ $json.data.replaceAll(/(Last Price: \\\\S+)$/gm,\\\"$1\\\\n\\\").slice(0,1000) }}\",\"chatId\":\"-1002138086614\",\"additionalFields\":{}},\"typeVersion\":1},{\"id\":\"d23c3277-62ca-4e1f-ad5d-48c07e0d6b94\",\"name\":\"Aggregate\",\"type\":\"n8n-nodes-base.aggregate\",\"notes\":\"Combine all items\",\"position\":[1020,1279],\"parameters\":{\"options\":{},\"aggregate\":\"aggregateAllItemData\"},\"notesInFlow\":true,\"typeVersion\":1},{\"id\":\"ba174e7f-4377-46dc-aca8-30adf81e5d61\",\"name\":\"Binance 24h Price Change\",\"type\":\"n8n-nodes-base.httpRequest\",\"notes\":\"Get data of changed price coins in last 24h\",\"position\":[680,1279],\"parameters\":{\"url\":\"https://api.binance.com/api/v1/ticker/24hr\",\"options\":{}},\"notesInFlow\":true,\"typeVersion\":1},{\"id\":\"575563d5-3fb5-40f3-8017-d015cc822d5f\",\"name\":\"Filter by 10% Change rate\",\"type\":\"n8n-nodes-base.function\",\"notes\":\"Filter by 10% Up & Down\",\"position\":[860,1279],\"parameters\":{\"functionCode\":\"// Iterate over all coins and check for 10% price change\\nconst significantChanges = [];\\nfor (const coin of items[0].json) {\\n  const priceChangePercent = parseFloat(coin.priceChangePercent);\\n  if (Math.abs(priceChangePercent) >= 15) {\\n    significantChanges.push({ \\n      symbol: coin.symbol, \\n      priceChangePercent, \\n      lastPrice: coin.lastPrice \\n    });\\n  }\\n}\\n\\n// Sort the items by percent rate from high to low\\nsignificantChanges.sort((a, b) => b.priceChangePercent - a.priceChangePercent);\\n\\n// Format the sorted data for output\\nconst sortedOutput = significantChanges.map(change => ({\\n  json: { message: `\\\\`\\\\`\\\\`${change.symbol} Price changed by ${change.priceChangePercent}% \\\\n Last Price: ${change.lastPrice}\\\\`\\\\`\\\\`` }\\n}));\\n\\nreturn sortedOutput;\\n\"},\"notesInFlow\":true,\"typeVersion\":1},{\"id\":\"dcfeae2e-bcdd-472d-98e4-8c1772ccdf1b\",\"name\":\"Split By 1K chars\",\"type\":\"n8n-nodes-base.code\",\"notes\":\"Split them for telegram message limit\",\"position\":[1180,1279],\"parameters\":{\"jsCode\":\"// Function to split the data into chunks of approximately 1000 characters\\nfunction splitDataIntoChunks(data) {\\n    const chunks = [];\\n    let currentChunk = \\\"\\\";\\n\\n    data.forEach(item => {\\n        // Ensure that each item has a 'message' property\\n        if (item && item.message) {\\n            const message = item.message + \\\"\\\\n\\\"; // Adding a newline for separation\\n            // Check if adding this message to the current chunk would exceed the 1000 characters limit\\n            if (currentChunk.length + message.length > 1000) {\\n                // If so, push the current chunk to the chunks array and start a new chunk\\n                chunks.push({ json: { data: currentChunk } });\\n                currentChunk = message;\\n            } else {\\n                // Otherwise, add the message to the current chunk\\n                currentChunk += message;\\n            }\\n        }\\n    });\\n\\n    // Add the last chunk if it's not empty\\n    if (currentChunk) {\\n        chunks.push({ json: { data: currentChunk } });\\n    }\\n\\n    return chunks;\\n}\\n\\n// The input data is passed from the previous node\\nconst inputData = items[0].json.data; // Accessing the 'data' property\\n\\n// Process the data\\nconst result = splitDataIntoChunks(inputData);\\n\\n// Output the result\\nreturn result;\\n\"},\"notesInFlow\":true,\"typeVersion\":2},{\"id\":\"40e25c71-641a-4b69-afec-b8a93d5d6448\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[483.54457851446114,1040],\"parameters\":{\"color\":5,\"width\":1040.928205084989,\"height\":183.94838465674636,\"content\":\"### Workflow Setup Steps:\\n1. Ensure the **_Schedule Trigger_** is active to desired cron time (Default 5 minutes).\\n2. [_Optional_] Configure the **_Binance 24h Price Change_** node with your API details (Default one is Free Public API Call - Free).\\n3. Set up your **Telegram bot** token in the **Telegram node credentials**.\\n4. Update the **_Chat ID_** in the **_Send Telegram Message_** node.\\n5. Test the workflow to ensure everything is set up correctly.\\n* **Notes**: Detailed telegram bot setup instructions are available in the [workflow's n8n page](https://n8n.io/workflows/2043-crypto-market-alert-system-with-binance-and-telegram-integration).\"},\"typeVersion\":1}],\"pinData\":{},\"connections\":{\"Aggregate\":{\"main\":[[{\"node\":\"Split By 1K chars\",\"type\":\"main\",\"index\":0}]]},\"Schedule Trigger\":{\"main\":[[{\"node\":\"Binance 24h Price Change\",\"type\":\"main\",\"index\":0}]]},\"Split By 1K chars\":{\"main\":[[{\"node\":\"Send Telegram Message\",\"type\":\"main\",\"index\":0}]]},\"Binance 24h Price Change\":{\"main\":[[{\"node\":\"Filter by 10% Change rate\",\"type\":\"main\",\"index\":0}]]},\"Filter by 10% Change rate\":{\"main\":[[{\"node\":\"Aggregate\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "An innovative N8N workflow that monitors cryptocurrency prices on Binance, identifies significant market movements, and sends customized alerts through Telegram. Ideal for traders and enthusiasts seeking real-time market insights.\n\n[![659d07c153303c6de24e6442.jpg](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/659d07c153303c6de24e6442_e1a9252d9e.jpg)](https://www.youtube.com/embed/slG_q_sT_E8)\n\n### How It Works\n\n  1. **Trigger Options** : Choose between a manual trigger or a scheduled trigger to start the workflow.\n  2. **Fetch Market Data** : The 'Binance 24h Price Change' node retrieves the latest 24-hour price changes for cryptocurrencies from Binance.\n  3. **Identify Significant Changes** : The 'Filter by 10% Change rate' node filters out cryptocurrencies with price changes of 10% or more.\n  4. **Aggregate Data** : The 'Aggregate' node combines all significant changes into a single dataset.\n  5. **Format Data for Telegram** : The 'Split By 1K chars' node formats this data into chunks suitable for Telegram's message size limit.\n  6. **Send Telegram Message** : The 'Send Telegram Message' node broadcasts the formatted message to a specified Telegram chat.\n\n\n\n### Set Up Steps\n\n  * **Estimated Time** : About 1-5 minutes for setup.\n\n  * **Initial Configuration** : Set up a Binance API connection (Optional) and your Telegram bot credentials.\n\n  * **Customization** : Adjust the trigger according to your preference (manual or scheduled) and update the Telegram chat ID.\n\n  * **Create Telegram bot steps** :-  \nSetting up a Telegram bot and obtaining its token involves several steps. Here's a detailed guide:\n\n\n\n  1. **Start a Chat with BotFather:**\n\n     * Open Telegram and search for \"BotFather\". This is the official bot that allows you to create new bots.\n     * Start a chat with BotFather by clicking on the \"Start\" button at the bottom of the screen.\n  2. **Create a New Bot:**\n\n     * In the chat with BotFather, type `/newbot` and send the message.\n     * BotFather will ask you to choose a name for your bot. This is a display name and can be anything you like.\n     * Next, you'll need to choose a username for your bot. This must be unique and end in `bot`. For example, `my_crypto_alert_bot`.\n  3. **Receive Your Token:**\n\n     * After you've set the name and username, BotFather will provide you with a token. This token is like a password for your bot, so keep it secure.\n     * The message will look something like this:\n           \n           Done! Congratulations on your new bot. You will find it at t.me/my_crypto_alert_bot. You can now add a description, about section and profile picture for your bot, see /help for a list of commands. Use this token to access the HTTP API: 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\n           \n\n     * The token in this case is `123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11`.\n  4. **Test Your Bot:**\n\n     * You can find your bot by searching for its username in Telegram.\n     * Start a chat with your bot and try sending it a message. Although it won't respond yet, this step is essential to ensure it's set up correctly.\n  5. **Use the Token in n8n:**\n\n     * In your n8n workflow, when setting up the Telegram node, you'll be prompted to enter credentials.\n     * Choose to add new credentials and paste the token you received from BotFather.\n  6. **Get Your Chat ID:**\n\n     * To send messages to a specific chat, you need to know the chat ID.\n     * The easiest way to find this is to first message your bot, then use a bot like `@userinfobot` to get your chat ID.\n     * Once you have the chat ID, you can configure it in the Telegram node in your n8n workflow.\n  7. **Finalize Your Workflow:**\n\n     * With the bot token and chat ID set up in n8n, your Telegram notifications should work as intended in your workflow.\n\n\n\nRemember, keep your bot token secure and never share it publicly. If your token is compromised, you can always generate a new one by chatting with BotFather and selecting `/token`.\n\n### Example result\n\n![siDCAAKSc3.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/si_DCAAK_Sc3_3edcc35ad7.png)\n    \n    \n    Keywords: n8n workflow, cryptocurrency market, Binance API, Telegram bot, price alert system, automated trading signals, market analysis\n    \n",
  "crawled_at": "2025-05-25T20:43:08.060250",
  "readme_zh": "一套创新的N8N自动化流程，实时监控币安加密货币价格波动，捕捉显著市场异动并通过Telegram推送定制化警报。专为追求实时行情洞察的交易者与爱好者打造。\n\n[![659d07c153303c6de24e6442.jpg](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/659d07c153303c6de24e6442_e1a9252d9e.jpg)](https://www.youtube.com/embed/slG_q_sT_E8)\n\n### 运作原理\n\n1. **触发方式**：支持手动触发或定时触发启动流程\n2. **获取行情**：通过\"币安24小时涨跌幅\"节点抓取最新加密货币价格变动\n3. **筛选异动**：\"10%涨跌幅过滤\"节点自动识别波动超10%的币种\n4. **数据整合**：\"聚合节点\"将所有显著波动归集为统一数据集\n5. **格式优化**：\"按1K字符分割\"节点适配Telegram消息长度限制\n6. **推送警报**：\"发送Telegram消息\"节点将格式化内容投递至指定群组\n\n### 配置指南\n\n* **耗时预估**：约1-5分钟完成部署\n* **基础配置**：需设置币安API连接（可选）及Telegram机器人凭证\n* **个性化设置**：按需选择触发方式（手动/定时），更新Telegram聊天ID\n* **Telegram机器人创建步骤**：\n\n1. **启动BotFather对话**\n   - 在Telegram搜索\"BotFather\"\n   - 点击底部\"Start\"按钮开启对话\n\n2. **创建新机器人**\n   - 发送`/newbot`指令\n   - 设定机器人显示名称（任意）\n   - 设置唯一用户名（须以bot结尾，如my_crypto_bot）\n\n3. **获取API令牌**\n   - 成功创建后将获得形如`123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11`的令牌\n   - 该令牌相当于机器人密码，请妥善保管\n\n4. **基础测试**\n   - 通过用户名搜索新建的机器人\n   - 发送测试消息验证基础功能\n\n5. **n8n凭证配置**\n   - 在Telegram节点粘贴从BotFather获取的令牌\n\n6. **获取聊天ID**\n   - 向机器人发送任意消息\n   - 使用@userinfobot等工具查询聊天ID\n   - 将ID填入n8n的Telegram节点\n\n7. **完成部署**\n   - 配置完成后即可通过工作流接收警报\n\n（重要提示：令牌泄露时可通过BotFather的`/token`指令重新生成）\n\n### 效果示例\n\n![siDCAAKSc3.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/si_DCAAK_Sc3_3edcc35ad7.png)\n\n关键词：n8n自动化流程 加密货币市场 币安API Telegram机器人 价格警报系统 自动化交易信号 市场分析",
  "title_zh": "集成币安与Telegram的加密市场预警系统",
  "publish_date_zh": "最后更新于10个月前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"dbd43d88d26a9e30d8aadc002c9e77f1400c683dd34efe3778d43d27250dde50\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"f305e08e-d4b4-4ec6-be74-5edb7a3711e5\",\n      \"name\": \"Schedule Trigger\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [\n        520,\n        1279\n      ],\n      \"parameters\": {\n        \"rule\": {\n          \"interval\": [\n            {\n              \"field\": \"minutes\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"abac20ef-6319-40e3-8d30-806d7499a427\",\n      \"name\": \"Send Telegram Message\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        1360,\n        1279\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.data.replaceAll(/(Last Price: \\\\S+)$/gm,\\\"$1\\\\n\\\").slice(0,1000) }}\",\n        \"chatId\": \"-1002138086614\",\n        \"additionalFields\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d23c3277-62ca-4e1f-ad5d-48c07e0d6b94\",\n      \"name\": \"Aggregate\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"notes\": \"Combine all items\",\n      \"position\": [\n        1020,\n        1279\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"aggregate\": \"aggregateAllItemData\"\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ba174e7f-4377-46dc-aca8-30adf81e5d61\",\n      \"name\": \"Binance 24h Price Change\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"notes\": \"Get data of changed price coins in last 24h\",\n      \"position\": [\n        680,\n        1279\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.binance.com/api/v1/ticker/24hr\",\n        \"options\": {}\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"575563d5-3fb5-40f3-8017-d015cc822d5f\",\n      \"name\": \"Filter by 10% Change rate\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"notes\": \"Filter by 10% Up & Down\",\n      \"position\": [\n        860,\n        1279\n      ],\n      \"parameters\": {\n        \"functionCode\": \"// Iterate over all coins and check for 10% price change\\nconst significantChanges = [];\\nfor (const coin of items[0].json) {\\n  const priceChangePercent = parseFloat(coin.priceChangePercent);\\n  if (Math.abs(priceChangePercent) >= 15) {\\n    significantChanges.push({ \\n      symbol: coin.symbol, \\n      priceChangePercent, \\n      lastPrice: coin.lastPrice \\n    });\\n  }\\n}\\n\\n// Sort the items by percent rate from high to low\\nsignificantChanges.sort((a, b) => b.priceChangePercent - a.priceChangePercent);\\n\\n// Format the sorted data for output\\nconst sortedOutput = significantChanges.map(change => ({\\n  json: { message: `\\\\`\\\\`\\\\`${change.symbol} Price changed by ${change.priceChangePercent}% \\\\n Last Price: ${change.lastPrice}\\\\`\\\\`\\\\`` }\\n}));\\n\\nreturn sortedOutput;\\n\"\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"dcfeae2e-bcdd-472d-98e4-8c1772ccdf1b\",\n      \"name\": \"Split By 1K chars\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"notes\": \"Split them for telegram message limit\",\n      \"position\": [\n        1180,\n        1279\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Function to split the data into chunks of approximately 1000 characters\\nfunction splitDataIntoChunks(data) {\\n    const chunks = [];\\n    let currentChunk = \\\"\\\";\\n\\n    data.forEach(item => {\\n        // Ensure that each item has a 'message' property\\n        if (item && item.message) {\\n            const message = item.message + \\\"\\\\n\\\"; // Adding a newline for separation\\n            // Check if adding this message to the current chunk would exceed the 1000 characters limit\\n            if (currentChunk.length + message.length > 1000) {\\n                // If so, push the current chunk to the chunks array and start a new chunk\\n                chunks.push({ json: { data: currentChunk } });\\n                currentChunk = message;\\n            } else {\\n                // Otherwise, add the message to the current chunk\\n                currentChunk += message;\\n            }\\n        }\\n    });\\n\\n    // Add the last chunk if it's not empty\\n    if (currentChunk) {\\n        chunks.push({ json: { data: currentChunk } });\\n    }\\n\\n    return chunks;\\n}\\n\\n// The input data is passed from the previous node\\nconst inputData = items[0].json.data; // Accessing the 'data' property\\n\\n// Process the data\\nconst result = splitDataIntoChunks(inputData);\\n\\n// Output the result\\nreturn result;\\n\"\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"40e25c71-641a-4b69-afec-b8a93d5d6448\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        483.54457851446114,\n        1040\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 1040.928205084989,\n        \"height\": 183.94838465674636,\n        \"content\": \"### 工作流设置步骤：\\n1. 确保 **_定时触发器_** 设置为预期的cron时间（默认为5分钟）。\\n2. [_可选_] 在 **_Binance 24小时价格变动_** 节点配置您的API信息（默认使用免费公共API调用）。\\n3. 在 **Telegram节点凭据** 中设置您的 **Telegram机器人令牌**。\\n4. 更新 **_发送Telegram消息_** 节点中的 **_聊天ID_**。\\n5. 测试工作流以确保所有配置正确无误。\\n* **注意**：详细的Telegram机器人设置说明可在[工作流的n8n页面](https://n8n.io/workflows/2043-crypto-market-alert-system-with-binance-and-telegram-integration)查看。\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Aggregate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split By 1K chars\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Schedule Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Binance 24h Price Change\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split By 1K chars\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Telegram Message\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Binance 24h Price Change\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filter by 10% Change rate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filter by 10% Change rate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}