{
  "url": "https://n8n.io/workflows/3363-automated-interview-scheduling-with-gpt-4o-and-google-calendar-chat-bot/",
  "title": "Automated Interview Scheduling with GPT-4o and Google Calendar Chat Bot",
  "author": "Robert Breen",
  "publish_date": "Last update 2 months ago",
  "publish_date_absolute": "2025-03-26",
  "categories": [
    {
      "name": "HR"
    },
    {
      "name": "AI"
    }
  ],
  "workflow_json": "{\"id\":\"bh3H2b654RSYgIm9\",\"meta\":{\"instanceId\":\"efb474b59b0341d7791932605bd9ff04a6c7ed9941fdd53dc4a2e4b99a6f9439\",\"templateCredsSetupCompleted\":true},\"name\":\"Inverview Scheduler\",\"tags\":[],\"nodes\":[{\"id\":\"cd5664f9-0b6b-491a-a0a0-1d8b3b2f2461\",\"name\":\"OpenAI Chat Model2\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[320,1480],\"parameters\":{\"model\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gpt-4o-mini\"},\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"ghJTvay8CvwXDsXz\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.2},{\"id\":\"e8ca4a14-ee58-4be0-838b-5cbf8a802b6e\",\"name\":\"Window Buffer Memory2\",\"type\":\"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\"position\":[520,1480],\"parameters\":{\"sessionKey\":\"={{ $json.sessionId }}\",\"sessionIdType\":\"customKey\",\"contextWindowLength\":10},\"typeVersion\":1.3},{\"id\":\"d2957530-acd1-4875-a75b-69b890f08065\",\"name\":\"OpenAI Chat Model4\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[1220,1440],\"parameters\":{\"model\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gpt-4o-mini\"},\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"ghJTvay8CvwXDsXz\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.2},{\"id\":\"897c8189-aaa9-45c7-99c6-95378a7a13f2\",\"name\":\"Run Get Availability\",\"type\":\"@n8n/n8n-nodes-langchain.toolWorkflow\",\"position\":[720,1520],\"parameters\":{\"name\":\"get_availability\",\"source\":\"parameter\",\"description\":\"Call this tool to get my availability\",\"workflowJson\":\"{\\n  \\\"nodes\\\": [\\n    {\\n      \\\"parameters\\\": {\\n        \\\"operation\\\": \\\"getAll\\\",\\n        \\\"calendar\\\": {\\n          \\\"__rl\\\": true,\\n          \\\"value\\\": \\\"rbreen.ynteractive@gmail.com\\\",\\n          \\\"mode\\\": \\\"list\\\",\\n          \\\"cachedResultName\\\": \\\"rbreen.ynteractive@gmail.com\\\"\\n        },\\n        \\\"returnAll\\\": true,\\n        \\\"options\\\": {\\n          \\\"fields\\\": \\\"\\\"\\n        }\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.googleCalendar\\\",\\n      \\\"typeVersion\\\": 1.3,\\n      \\\"position\\\": [\\n        -500,\\n        220\\n      ],\\n      \\\"id\\\": \\\"a1017705-8866-469f-83e0-9f5d5f37af53\\\",\\n      \\\"name\\\": \\\"Check My Calendar\\\",\\n      \\\"credentials\\\": {\\n        \\\"googleCalendarOAuth2Api\\\": {\\n          \\\"id\\\": \\\"nc5M45R7LyFadByw\\\",\\n          \\\"name\\\": \\\"Google Calendar account\\\"\\n        }\\n      }\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"jsCode\\\": \\\"const events = items.map(item => item.json);\\\\nconst intervalMinutes = 30;\\\\nconst timeZone = 'America/New_York';\\\\n\\\\nfunction formatToEastern(date) {\\\\n  const tzDate = new Intl.DateTimeFormat('en-US', {\\\\n    timeZone,\\\\n    year: 'numeric',\\\\n    month: '2-digit',\\\\n    day: '2-digit',\\\\n    hour: '2-digit',\\\\n    minute: '2-digit',\\\\n    second: '2-digit',\\\\n    hour12: false\\\\n  }).formatToParts(date).reduce((acc, part) => {\\\\n    if (part.type !== 'literal') acc[part.type] = part.value;\\\\n    return acc;\\\\n  }, {});\\\\n\\\\n  const offset = getEasternOffset(date);\\\\n  return `${tzDate.year}-${tzDate.month}-${tzDate.day}T${tzDate.hour}:${tzDate.minute}:${tzDate.second}${offset}`;\\\\n}\\\\n\\\\nfunction getEasternOffset(date) {\\\\n  const options = { timeZone, timeZoneName: 'short' };\\\\n  const parts = new Intl.DateTimeFormat('en-US', options).formatToParts(date);\\\\n  const tzName = parts.find(p => p.type === 'timeZoneName').value;\\\\n  return tzName.includes('EDT') ? '-04:00' : '-05:00';\\\\n}\\\\n\\\\nfunction alignToPreviousSlot(date) {\\\\n  const aligned = new Date(date);\\\\n  const minutes = aligned.getMinutes();\\\\n  aligned.setMinutes(minutes < 30 ? 0 : 30, 0, 0);\\\\n  return aligned;\\\\n}\\\\n\\\\nfunction alignToNextSlot(date) {\\\\n  const aligned = new Date(date);\\\\n  const minutes = aligned.getMinutes();\\\\n  if (minutes > 0 && minutes <= 30) {\\\\n    aligned.setMinutes(30, 0, 0);\\\\n  } else if (minutes > 30) {\\\\n    aligned.setHours(aligned.getHours() + 1);\\\\n    aligned.setMinutes(0, 0, 0);\\\\n  } else {\\\\n    aligned.setMinutes(0, 0, 0);\\\\n  }\\\\n  return aligned;\\\\n}\\\\n\\\\nconst splitEventIntoETBlocks = (event) => {\\\\n  const blocks = [];\\\\n\\\\n  let current = alignToPreviousSlot(new Date(event.start.dateTime));\\\\n  const eventEnd = alignToNextSlot(new Date(event.end.dateTime));\\\\n\\\\n  while (current < eventEnd) {\\\\n    const blockEnd = new Date(current);\\\\n    blockEnd.setMinutes(current.getMinutes() + intervalMinutes);\\\\n\\\\n    blocks.push({\\\\n      start: formatToEastern(current),\\\\n      end: formatToEastern(blockEnd)\\\\n    });\\\\n\\\\n    current = blockEnd;\\\\n  }\\\\n\\\\n  return blocks;\\\\n};\\\\n\\\\nlet allBlocks = [];\\\\nfor (const event of events) {\\\\n  if (event.start?.dateTime && event.end?.dateTime) {\\\\n    const blocks = splitEventIntoETBlocks(event);\\\\n    allBlocks = allBlocks.concat(blocks);\\\\n  }\\\\n}\\\\n\\\\nreturn allBlocks.map(block => ({ json: block }));\\\\n\\\"\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.code\\\",\\n      \\\"typeVersion\\\": 2,\\n      \\\"position\\\": [\\n        -280,\\n        240\\n      ],\\n      \\\"id\\\": \\\"fb9063c2-de6b-4513-8901-d12625f5d772\\\",\\n      \\\"name\\\": \\\"Split Events into 30 min blocks\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"assignments\\\": {\\n          \\\"assignments\\\": [\\n            {\\n              \\\"id\\\": \\\"f1270be8-1d11-4086-8bc0-ae53c99507c1\\\",\\n              \\\"name\\\": \\\"start\\\",\\n              \\\"value\\\": \\\"={{ $json.start }}\\\",\\n              \\\"type\\\": \\\"string\\\"\\n            },\\n            {\\n              \\\"id\\\": \\\"1a5f24ff-7d0c-436d-bb0b-015fc0c85cb7\\\",\\n              \\\"name\\\": \\\"end\\\",\\n              \\\"value\\\": \\\"={{ $json.end }}\\\",\\n              \\\"type\\\": \\\"string\\\"\\n            },\\n            {\\n              \\\"id\\\": \\\"befe6645-c0c1-40eb-9ba6-eccf2a762247\\\",\\n              \\\"name\\\": \\\"Blocked\\\",\\n              \\\"value\\\": \\\"Blocked\\\",\\n              \\\"type\\\": \\\"string\\\"\\n            }\\n          ]\\n        },\\n        \\\"options\\\": {}\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n      \\\"typeVersion\\\": 3.4,\\n      \\\"position\\\": [\\n        -80,\\n        240\\n      ],\\n      \\\"id\\\": \\\"23d8ed50-131f-49ea-9ce8-72a0067fe828\\\",\\n      \\\"name\\\": \\\"Add Blocked Field\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"jsCode\\\": \\\"const slots = [];\\\\nconst slotMinutes = 30;\\\\nconst timeZone = 'America/New_York';\\\\nconst businessStartHour = 9;\\\\nconst businessEndHour = 17;\\\\n\\\\n// Get offset like -04:00 or -05:00\\\\nfunction getEasternOffset(date) {\\\\n  const options = { timeZone, timeZoneName: 'short' };\\\\n  const parts = new Intl.DateTimeFormat('en-US', options).formatToParts(date);\\\\n  const tz = parts.find(p => p.type === 'timeZoneName')?.value || 'EST';\\\\n  return tz.includes('EDT') ? '-04:00' : '-05:00';\\\\n}\\\\n\\\\n// Format Date as ISO with Eastern offset\\\\nfunction formatToEasternISO(date) {\\\\n  const formatter = new Intl.DateTimeFormat('en-CA', {\\\\n    timeZone,\\\\n    year: 'numeric',\\\\n    month: '2-digit',\\\\n    day: '2-digit',\\\\n    hour: '2-digit',\\\\n    minute: '2-digit',\\\\n    second: '2-digit',\\\\n    hour12: false,\\\\n  });\\\\n\\\\n  const parts = formatter.formatToParts(date).reduce((acc, part) => {\\\\n    if (part.type !== 'literal') acc[part.type] = part.value;\\\\n    return acc;\\\\n  }, {});\\\\n\\\\n  const offset = getEasternOffset(date);\\\\n  return `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}${offset}`;\\\\n}\\\\n\\\\n// Convert a Date to the hour/minute of its Eastern time\\\\nfunction getEasternTimeParts(date) {\\\\n  const formatter = new Intl.DateTimeFormat('en-US', {\\\\n    timeZone,\\\\n    hour: '2-digit',\\\\n    minute: '2-digit',\\\\n    hour12: false,\\\\n  });\\\\n  const [hourStr, minStr] = formatter.format(date).split(':');\\\\n  return { hour: parseInt(hourStr), minute: parseInt(minStr) };\\\\n}\\\\n\\\\nconst now = new Date();\\\\nconst endDate = new Date(now);\\\\nendDate.setDate(now.getDate() + 7);\\\\n\\\\n// Set current time to 24 hours in the future\\\\nconst current = new Date(now);\\\\ncurrent.setHours(current.getHours() + 24);\\\\n\\\\n// Round to the next 30-minute block in Eastern time\\\\nconst { minute } = getEasternTimeParts(current);\\\\nif (minute < 30) {\\\\n  current.setMinutes(30, 0, 0);\\\\n} else {\\\\n  current.setHours(current.getHours() + 1);\\\\n  current.setMinutes(0, 0, 0);\\\\n}\\\\n\\\\n// Generate 30-minute blocks only during business hours & weekdays\\\\nwhile (current < endDate) {\\\\n  const dayOfWeek = current.getDay(); // 0 = Sunday, 6 = Saturday\\\\n\\\\n  // Skip weekends\\\\n  if (dayOfWeek !== 0 && dayOfWeek !== 6) {\\\\n    const { hour } = getEasternTimeParts(current);\\\\n\\\\n    if (hour >= businessStartHour && hour < businessEndHour) {\\\\n      const start = new Date(current);\\\\n      const end = new Date(start);\\\\n      end.setMinutes(start.getMinutes() + slotMinutes);\\\\n\\\\n      slots.push({\\\\n        start: formatToEasternISO(start),\\\\n        end: formatToEasternISO(end),\\\\n      });\\\\n    }\\\\n  }\\\\n\\\\n  current.setMinutes(current.getMinutes() + slotMinutes);\\\\n}\\\\n\\\\nreturn slots.map(slot => ({ json: slot }));\\\\n\\\"\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.code\\\",\\n      \\\"typeVersion\\\": 2,\\n      \\\"position\\\": [\\n        -400,\\n        460\\n      ],\\n      \\\"id\\\": \\\"01597a94-d94b-47e7-9488-adea3abb741c\\\",\\n      \\\"name\\\": \\\"Generate 30 Minute Timeslots\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"mode\\\": \\\"combine\\\",\\n        \\\"fieldsToMatchString\\\": \\\"start, end\\\",\\n        \\\"joinMode\\\": \\\"enrichInput2\\\",\\n        \\\"options\\\": {}\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.merge\\\",\\n      \\\"typeVersion\\\": 3,\\n      \\\"position\\\": [\\n        180,\\n        300\\n      ],\\n      \\\"id\\\": \\\"2d9f98a1-02ac-4332-a288-635a48ea3ee8\\\",\\n      \\\"name\\\": \\\"Combine My Calendar with All Slots\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"conditions\\\": {\\n          \\\"options\\\": {\\n            \\\"caseSensitive\\\": true,\\n            \\\"leftValue\\\": \\\"\\\",\\n            \\\"typeValidation\\\": \\\"strict\\\",\\n            \\\"version\\\": 2\\n          },\\n          \\\"conditions\\\": [\\n            {\\n              \\\"id\\\": \\\"af65c6c8-31c7-4f27-a073-cf7f72079882\\\",\\n              \\\"leftValue\\\": \\\"={{ $json.Blocked }}\\\",\\n              \\\"rightValue\\\": \\\"Blocked\\\",\\n              \\\"operator\\\": {\\n                \\\"type\\\": \\\"string\\\",\\n                \\\"operation\\\": \\\"notEquals\\\"\\n              }\\n            }\\n          ],\\n          \\\"combinator\\\": \\\"and\\\"\\n        },\\n        \\\"options\\\": {}\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.if\\\",\\n      \\\"typeVersion\\\": 2.2,\\n      \\\"position\\\": [\\n        420,\\n        280\\n      ],\\n      \\\"id\\\": \\\"0438b5be-b3c4-4645-9604-303ace7bfead\\\",\\n      \\\"name\\\": \\\"Check if Calendar Blocked\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"jsCode\\\": \\\"const formatted = items.map(item => {\\\\n  const start = item.json.start;\\\\n  const end = item.json.end;\\\\n  return `${start} - ${end}`;\\\\n});\\\\n\\\\nconst combined = formatted.join(', ');\\\\n\\\\nreturn [\\\\n  {\\\\n    json: {\\\\n      availableSlots: combined\\\\n    }\\\\n  }\\\\n];\\\\n\\\"\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.code\\\",\\n      \\\"typeVersion\\\": 2,\\n      \\\"position\\\": [\\n        660,\\n        300\\n      ],\\n      \\\"id\\\": \\\"4a6bfde4-7d9f-4837-bc6c-66bf968e782a\\\",\\n      \\\"name\\\": \\\"Return string of all available times\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"inputSource\\\": \\\"passthrough\\\"\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.executeWorkflowTrigger\\\",\\n      \\\"typeVersion\\\": 1.1,\\n      \\\"position\\\": [\\n        -760,\\n        340\\n      ],\\n      \\\"id\\\": \\\"8bde95cb-7239-4b7d-aca1-0adacf2ea257\\\",\\n      \\\"name\\\": \\\"Get Availability\\\"\\n    }\\n  ],\\n  \\\"connections\\\": {\\n    \\\"Check My Calendar\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Split Events into 30 min blocks\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"Split Events into 30 min blocks\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Add Blocked Field\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"Add Blocked Field\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Combine My Calendar with All Slots\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"Generate 30 Minute Timeslots\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Combine My Calendar with All Slots\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 1\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"Combine My Calendar with All Slots\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Check if Calendar Blocked\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"Check if Calendar Blocked\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Return string of all available times\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"Get Availability\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Check My Calendar\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          },\\n          {\\n            \\\"node\\\": \\\"Generate 30 Minute Timeslots\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  },\\n  \\\"pinData\\\": {},\\n  \\\"meta\\\": {\\n    \\\"instanceId\\\": \\\"efb474b59b0341d7791932605bd9ff04a6c7ed9941fdd53dc4a2e4b99a6f9439\\\"\\n  }\\n}\"},\"typeVersion\":2.1},{\"id\":\"8892f883-aaae-4616-bb50-bbe0f9dacb23\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1440,1660],\"parameters\":{\"color\":3,\"width\":520,\"height\":480,\"content\":\"Check Day Names Tool\\n\\n\\n1. This part of the flow is just a copy of what is embedded in the \\\"Check Day Names Tool\\\". It does not run. \\n\\n2. If you update this part of the flow, copy it with ctrl-c and paste it into another workbook. Add a sub-workflow execution. Set the workflow to accept all data. Copy the flow. Paste the Workflow JSON field in the \\\"Check Day Names Tool\\\" tool node\\n\"},\"typeVersion\":1},{\"id\":\"234b89da-9003-43d5-842a-4ecf92522b51\",\"name\":\"check day names\",\"type\":\"@n8n/n8n-nodes-langchain.toolWorkflow\",\"position\":[880,1480],\"parameters\":{\"name\":\"check_days\",\"source\":\"parameter\",\"workflowJson\":\"{\\n  \\\"nodes\\\": [\\n    {\\n      \\\"parameters\\\": {\\n        \\\"inputSource\\\": \\\"passthrough\\\"\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.executeWorkflowTrigger\\\",\\n      \\\"typeVersion\\\": 1.1,\\n      \\\"position\\\": [\\n        -400,\\n        -120\\n      ],\\n      \\\"id\\\": \\\"dec37e15-3695-4911-91a6-1f97018ab982\\\",\\n      \\\"name\\\": \\\"When Executed by Another Workflow\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"jsCode\\\": \\\"function getWeekdaysNextTwoWeeks() {\\\\n  const items = [];\\\\n  const longDayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\\\\n\\\\n  const today = new Date();\\\\n  const endDate = new Date();\\\\n  endDate.setDate(today.getDate() + 14); // 2 weeks ahead\\\\n\\\\n  const current = new Date(today);\\\\n\\\\n  while (current <= endDate) {\\\\n    const dayOfWeek = current.getDay(); // 0 = Sunday, 6 = Saturday\\\\n\\\\n    // Only weekdays (Mon–Fri)\\\\n    if (dayOfWeek >= 1 && dayOfWeek <= 5) {\\\\n      const dateStr = current.toISOString().split('T')[0]; // YYYY-MM-DD\\\\n      const output = `${longDayNames[dayOfWeek]} - ${dateStr}`;\\\\n\\\\n      items.push({\\\\n        json: {\\\\n          day: output\\\\n        }\\\\n      });\\\\n    }\\\\n\\\\n    current.setDate(current.getDate() + 1); // Go to next day\\\\n  }\\\\n\\\\n  return items;\\\\n}\\\\n\\\\n// Example usage:\\\\nreturn getWeekdaysNextTwoWeeks();\\\\n\\\"\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.code\\\",\\n      \\\"typeVersion\\\": 2,\\n      \\\"position\\\": [\\n        -180,\\n        -120\\n      ],\\n      \\\"id\\\": \\\"cbbe4248-d1cc-48e3-9ea8-67a844f3de29\\\",\\n      \\\"name\\\": \\\"Check Day Names\\\"\\n    }\\n  ],\\n  \\\"connections\\\": {\\n    \\\"When Executed by Another Workflow\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Check Day Names\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  },\\n  \\\"pinData\\\": {},\\n  \\\"meta\\\": {\\n    \\\"instanceId\\\": \\\"efb474b59b0341d7791932605bd9ff04a6c7ed9941fdd53dc4a2e4b99a6f9439\\\"\\n  }\\n}\"},\"typeVersion\":2.1},{\"id\":\"c052c7e4-1587-4c7e-9a8e-043c8571338d\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[180,1660],\"parameters\":{\"width\":1200,\"height\":500,\"content\":\"Get Availability Execution. \\n\\n1. This part of the flow is just a copy of what is embedded in the \\\"Run Get Availability Tool\\\". It does not run. \\n\\n2. If you update this part of the flow, copy it with ctrl-c and paste it into another workbook. Add a sub-workflow execution. Set the workflow to accept all data. Copy the flow. Paste the Workflow JSON field in the \\\"Run Get Availability\\\" tool node\"},\"typeVersion\":1},{\"id\":\"b7c71153-fbd1-45ac-8dbf-d4beb241daaf\",\"name\":\"Convert Output to JSON\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[1240,1260],\"parameters\":{\"text\":\"={{ $json.output }}\",\"options\":{\"systemMessage\":\"=take in this message and output json\"},\"promptType\":\"define\",\"hasOutputParser\":true},\"typeVersion\":1.7},{\"id\":\"1f902158-5885-46d6-8d7e-26ccf116ed0a\",\"name\":\"Interview Scheduler\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[520,1220],\"parameters\":{\"text\":\"={{ $json.chatInput }}\",\"options\":{\"systemMessage\":\"=You are a friendly AI chatbot helping users schedule meetings. Ask for Phone, email, preferred date, and time. Confirm details before booking. Time zone: Eastern.\\n\\nToday's date is {{ $now }}\\n\\n1. Use the get_availability tool to find when I am available. it will return comma separated timeslots the interviewer can meet. check the proposed time against the results. Times are in 24 hour clock times in this format.  2025-03-31T09:00:00-04:00\\n3. If I am not available, look at get_availability tool again and propose a similar time where I am available\\n2. use the check_days tool if the user mentions something like next tuesday so you know what date they are talking about\\n3. Once a time is aggreed upon, output json in this format \\n2025-03-28T13:00:00-04:00. \\n4. once you have the email, phone start and end time, output only the json and nothing else\\n\\n{\\n  \\\"interview\\\": {\\n    \\\"email\\\": \\\"applicant@example.com\\\",\\n    \\\"phone\\\": \\\"814-882-1293\\\",\\n    \\\"start_datetime\\\": \\\"2025-03-28T10:00:00\\\",\\n    \\\"end_datetime\\\": \\\"2025-03-28T11:00:00\\\"\\n  }\\n}\\n\\n## Rules\\n- If the calendar is not available at the time requested, do not double book. Send a new time.\\n- Interviews are all 30 minutes long\\n- Do not book over another meeting\\n- do not give details about what is on the interviewers calendar\\n- do not converse with the user about anything else\",\"returnIntermediateSteps\":true},\"promptType\":\"define\"},\"typeVersion\":1.7},{\"id\":\"ba0fb82e-a280-4392-833e-04f00a47170c\",\"name\":\"If Final Output\",\"type\":\"n8n-nodes-base.if\",\"position\":[960,1160],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"e75b6a50-680f-4f5b-8dd3-fc93be1bc7f1\",\"operator\":{\"type\":\"string\",\"operation\":\"contains\"},\"leftValue\":\"={{ $json.output }}\",\"rightValue\":\"start_datetime\"},{\"id\":\"cadd4bff-8d53-446c-8ad0-14b3fb9ab335\",\"operator\":{\"type\":\"string\",\"operation\":\"contains\"},\"leftValue\":\"={{ $json.output }}\",\"rightValue\":\"end_datetime\"}]}},\"typeVersion\":2.2},{\"id\":\"c56bcba9-ac39-474b-a186-ceb67fa4008d\",\"name\":\"Respond for More Info\",\"type\":\"n8n-nodes-base.noOp\",\"position\":[1040,1400],\"parameters\":{},\"typeVersion\":1},{\"id\":\"efd03308-0da1-4797-b899-3d4446eba722\",\"name\":\"Parse to JSON\",\"type\":\"@n8n/n8n-nodes-langchain.outputParserStructured\",\"position\":[1400,1500],\"parameters\":{\"jsonSchemaExample\":\"{\\n  \\\"interview\\\": {\\n    \\\"email\\\": \\\"applicant@example.com\\\",\\n    \\\"phone\\\": \\\"814-882-1293\\\",\\n    \\\"start_datetime\\\": \\\"2025-03-28T10:00:00\\\",\\n    \\\"end_datetime\\\": \\\"2025-03-28T11:00:00\\\"\\n  }\\n}\"},\"typeVersion\":1.2},{\"id\":\"11abd142-d509-4459-bdf5-861dcf4263bf\",\"name\":\"Set Meeting with Google\",\"type\":\"n8n-nodes-base.googleCalendar\",\"position\":[1640,1280],\"parameters\":{\"end\":\"={{ $json.output.interview.end_datetime }}\",\"start\":\"={{ $json.output.interview.start_datetime }}\",\"calendar\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"rbreen.ynteractive@gmail.com\",\"cachedResultName\":\"rbreen.ynteractive@gmail.com\"},\"additionalFields\":{\"summary\":\"Interview\",\"attendees\":[\"={{ $json.output.interview.email }}\"],\"description\":\"=I will call you at  {{ $json.output.interview.phone }}\"}},\"credentials\":{\"googleCalendarOAuth2Api\":{\"id\":\"nc5M45R7LyFadByw\",\"name\":\"Google Calendar account\"}},\"typeVersion\":1.3},{\"id\":\"fef5ba53-4386-4e88-9f28-8a9b5d9c928f\",\"name\":\"Final Response to User\",\"type\":\"n8n-nodes-base.code\",\"position\":[1640,1500],\"parameters\":{\"jsCode\":\"const email = $('Convert Output to JSON').first().json.output.interview.email;\\nconst phone = $('Convert Output to JSON').first().json.output.interview.phone;\\nconst start_datetime = $('Convert Output to JSON').first().json.output.interview.start_datetime;\\nconst end_datetime = $('Convert Output to JSON').first().json.output.interview.end_datetime;\\n\\nlet text = `✅ Interview Confirmed!\\\\n\\\\n📧 Email: ${email}\\\\n📞 Phone: ${phone}\\\\n🕒 Start: ${start_datetime}\\\\n🕕 End: ${end_datetime}`;\\n\\nreturn { text };\\n\"},\"typeVersion\":2},{\"id\":\"a06664e2-d5d2-40a7-98a5-a3de2d775b7c\",\"name\":\"Generate Interview Times\",\"type\":\"n8n-nodes-base.code\",\"position\":[1620,1920],\"parameters\":{\"jsCode\":\"function getWeekdaysNextTwoWeeks() {\\n  const items = [];\\n  const longDayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\\n\\n  const today = new Date();\\n  const endDate = new Date();\\n  endDate.setDate(today.getDate() + 14); // 2 weeks ahead\\n\\n  const current = new Date(today);\\n\\n  while (current <= endDate) {\\n    const dayOfWeek = current.getDay(); // 0 = Sunday, 6 = Saturday\\n\\n    // Only weekdays (Mon–Fri)\\n    if (dayOfWeek >= 1 && dayOfWeek <= 5) {\\n      const dateStr = current.toISOString().split('T')[0]; // YYYY-MM-DD\\n      const output = `${longDayNames[dayOfWeek]} - ${dateStr}`;\\n\\n      items.push({\\n        json: {\\n          day: output\\n        }\\n      });\\n    }\\n\\n    current.setDate(current.getDate() + 1); // Go to next day\\n  }\\n\\n  return items;\\n}\\n\\n// Example usage:\\nreturn getWeekdaysNextTwoWeeks();\\n\"},\"typeVersion\":2},{\"id\":\"f35d595e-6834-4898-bbcb-b17599d769b4\",\"name\":\"Check My Calendar\",\"type\":\"n8n-nodes-base.googleCalendar\",\"position\":[420,1820],\"parameters\":{\"options\":{\"fields\":\"\"},\"calendar\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"rbreen.ynteractive@gmail.com\",\"cachedResultName\":\"rbreen.ynteractive@gmail.com\"},\"operation\":\"getAll\",\"returnAll\":true},\"credentials\":{\"googleCalendarOAuth2Api\":{\"id\":\"nc5M45R7LyFadByw\",\"name\":\"Google Calendar account\"}},\"typeVersion\":1.3},{\"id\":\"29e3a097-b6f1-4a54-b943-d9ad9177b03b\",\"name\":\"Split Events into 30 min blocks\",\"type\":\"n8n-nodes-base.code\",\"position\":[620,1820],\"parameters\":{\"jsCode\":\"const events = items.map(item => item.json);\\nconst intervalMinutes = 30;\\nconst timeZone = 'America/New_York';\\n\\nfunction formatToEastern(date) {\\n  const tzDate = new Intl.DateTimeFormat('en-US', {\\n    timeZone,\\n    year: 'numeric',\\n    month: '2-digit',\\n    day: '2-digit',\\n    hour: '2-digit',\\n    minute: '2-digit',\\n    second: '2-digit',\\n    hour12: false\\n  }).formatToParts(date).reduce((acc, part) => {\\n    if (part.type !== 'literal') acc[part.type] = part.value;\\n    return acc;\\n  }, {});\\n\\n  const offset = getEasternOffset(date);\\n  return `${tzDate.year}-${tzDate.month}-${tzDate.day}T${tzDate.hour}:${tzDate.minute}:${tzDate.second}${offset}`;\\n}\\n\\nfunction getEasternOffset(date) {\\n  const options = { timeZone, timeZoneName: 'short' };\\n  const parts = new Intl.DateTimeFormat('en-US', options).formatToParts(date);\\n  const tzName = parts.find(p => p.type === 'timeZoneName').value;\\n  return tzName.includes('EDT') ? '-04:00' : '-05:00';\\n}\\n\\nfunction alignToPreviousSlot(date) {\\n  const aligned = new Date(date);\\n  const minutes = aligned.getMinutes();\\n  aligned.setMinutes(minutes < 30 ? 0 : 30, 0, 0);\\n  return aligned;\\n}\\n\\nfunction alignToNextSlot(date) {\\n  const aligned = new Date(date);\\n  const minutes = aligned.getMinutes();\\n  if (minutes > 0 && minutes <= 30) {\\n    aligned.setMinutes(30, 0, 0);\\n  } else if (minutes > 30) {\\n    aligned.setHours(aligned.getHours() + 1);\\n    aligned.setMinutes(0, 0, 0);\\n  } else {\\n    aligned.setMinutes(0, 0, 0);\\n  }\\n  return aligned;\\n}\\n\\nconst splitEventIntoETBlocks = (event) => {\\n  const blocks = [];\\n\\n  let current = alignToPreviousSlot(new Date(event.start.dateTime));\\n  const eventEnd = alignToNextSlot(new Date(event.end.dateTime));\\n\\n  while (current < eventEnd) {\\n    const blockEnd = new Date(current);\\n    blockEnd.setMinutes(current.getMinutes() + intervalMinutes);\\n\\n    blocks.push({\\n      start: formatToEastern(current),\\n      end: formatToEastern(blockEnd)\\n    });\\n\\n    current = blockEnd;\\n  }\\n\\n  return blocks;\\n};\\n\\nlet allBlocks = [];\\nfor (const event of events) {\\n  if (event.start?.dateTime && event.end?.dateTime) {\\n    const blocks = splitEventIntoETBlocks(event);\\n    allBlocks = allBlocks.concat(blocks);\\n  }\\n}\\n\\nreturn allBlocks.map(block => ({ json: block }));\\n\"},\"typeVersion\":2},{\"id\":\"f9297e8a-75dd-4f12-b0e1-d3fa372a7631\",\"name\":\"Add Blocked Field\",\"type\":\"n8n-nodes-base.set\",\"position\":[800,1840],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"f1270be8-1d11-4086-8bc0-ae53c99507c1\",\"name\":\"start\",\"type\":\"string\",\"value\":\"={{ $json.start }}\"},{\"id\":\"1a5f24ff-7d0c-436d-bb0b-015fc0c85cb7\",\"name\":\"end\",\"type\":\"string\",\"value\":\"={{ $json.end }}\"},{\"id\":\"befe6645-c0c1-40eb-9ba6-eccf2a762247\",\"name\":\"Blocked\",\"type\":\"string\",\"value\":\"Blocked\"}]}},\"typeVersion\":3.4},{\"id\":\"8ba70f94-e9e6-44aa-b0e7-9a5294634e0e\",\"name\":\"Generate 30 Minute Timeslots\",\"type\":\"n8n-nodes-base.code\",\"position\":[440,2020],\"parameters\":{\"jsCode\":\"const slots = [];\\nconst slotMinutes = 30;\\nconst timeZone = 'America/New_York';\\nconst businessStartHour = 9;\\nconst businessEndHour = 17;\\n\\n// Get offset like -04:00 or -05:00\\nfunction getEasternOffset(date) {\\n  const options = { timeZone, timeZoneName: 'short' };\\n  const parts = new Intl.DateTimeFormat('en-US', options).formatToParts(date);\\n  const tz = parts.find(p => p.type === 'timeZoneName')?.value || 'EST';\\n  return tz.includes('EDT') ? '-04:00' : '-05:00';\\n}\\n\\n// Format Date as ISO with Eastern offset\\nfunction formatToEasternISO(date) {\\n  const formatter = new Intl.DateTimeFormat('en-CA', {\\n    timeZone,\\n    year: 'numeric',\\n    month: '2-digit',\\n    day: '2-digit',\\n    hour: '2-digit',\\n    minute: '2-digit',\\n    second: '2-digit',\\n    hour12: false,\\n  });\\n\\n  const parts = formatter.formatToParts(date).reduce((acc, part) => {\\n    if (part.type !== 'literal') acc[part.type] = part.value;\\n    return acc;\\n  }, {});\\n\\n  const offset = getEasternOffset(date);\\n  return `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}${offset}`;\\n}\\n\\n// Convert a Date to the hour/minute of its Eastern time\\nfunction getEasternTimeParts(date) {\\n  const formatter = new Intl.DateTimeFormat('en-US', {\\n    timeZone,\\n    hour: '2-digit',\\n    minute: '2-digit',\\n    hour12: false,\\n  });\\n  const [hourStr, minStr] = formatter.format(date).split(':');\\n  return { hour: parseInt(hourStr), minute: parseInt(minStr) };\\n}\\n\\nconst now = new Date();\\nconst endDate = new Date(now);\\nendDate.setDate(now.getDate() + 7);\\n\\n// Set current time to 24 hours in the future\\nconst current = new Date(now);\\ncurrent.setHours(current.getHours() + 24);\\n\\n// Round to the next 30-minute block in Eastern time\\nconst { minute } = getEasternTimeParts(current);\\nif (minute < 30) {\\n  current.setMinutes(30, 0, 0);\\n} else {\\n  current.setHours(current.getHours() + 1);\\n  current.setMinutes(0, 0, 0);\\n}\\n\\n// Generate 30-minute blocks only during business hours & weekdays\\nwhile (current < endDate) {\\n  const dayOfWeek = current.getDay(); // 0 = Sunday, 6 = Saturday\\n\\n  // Skip weekends\\n  if (dayOfWeek !== 0 && dayOfWeek !== 6) {\\n    const { hour } = getEasternTimeParts(current);\\n\\n    if (hour >= businessStartHour && hour < businessEndHour) {\\n      const start = new Date(current);\\n      const end = new Date(start);\\n      end.setMinutes(start.getMinutes() + slotMinutes);\\n\\n      slots.push({\\n        start: formatToEasternISO(start),\\n        end: formatToEasternISO(end),\\n      });\\n    }\\n  }\\n\\n  current.setMinutes(current.getMinutes() + slotMinutes);\\n}\\n\\nreturn slots.map(slot => ({ json: slot }));\\n\"},\"typeVersion\":2},{\"id\":\"3ea13a0a-d496-40b8-9321-6bc3df415191\",\"name\":\"Combine My Calendar with All Slots\",\"type\":\"n8n-nodes-base.merge\",\"position\":[780,2020],\"parameters\":{\"mode\":\"combine\",\"options\":{},\"joinMode\":\"enrichInput2\",\"fieldsToMatchString\":\"start, end\"},\"typeVersion\":3},{\"id\":\"ad57e0b4-43d0-4991-adc3-e325e2405e93\",\"name\":\"Check if Calendar Blocked\",\"type\":\"n8n-nodes-base.if\",\"position\":[1100,1820],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"af65c6c8-31c7-4f27-a073-cf7f72079882\",\"operator\":{\"type\":\"string\",\"operation\":\"notEquals\"},\"leftValue\":\"={{ $json.Blocked }}\",\"rightValue\":\"Blocked\"}]}},\"typeVersion\":2.2},{\"id\":\"6e427266-1f64-4492-b4c0-30d03d6a20de\",\"name\":\"Return string of all available times\",\"type\":\"n8n-nodes-base.code\",\"position\":[1160,2000],\"parameters\":{\"jsCode\":\"const formatted = items.map(item => {\\n  const start = item.json.start;\\n  const end = item.json.end;\\n  return `${start} - ${end}`;\\n});\\n\\nconst combined = formatted.join(', ');\\n\\nreturn [\\n  {\\n    json: {\\n      availableSlots: combined\\n    }\\n  }\\n];\\n\"},\"typeVersion\":2},{\"id\":\"3f26c921-2d4c-4e8a-a551-801c2a94086a\",\"name\":\"Get Availability\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[220,1920],\"parameters\":{\"inputSource\":\"passthrough\"},\"typeVersion\":1.1},{\"id\":\"6d34f9e2-4c43-4e0b-a54d-2c8076ee6fe0\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-420,1160],\"parameters\":{\"color\":5,\"width\":520,\"height\":1000,\"content\":\"How to Use the Interview Scheduler Workflow in n8n\\n________________________________________\\n✨ Overview\\nThis workflow allows candidates to schedule interviews by chatting with an AI assistant. It checks your Google Calendar availability, identifies free 30-minute weekday slots between 9am-5pm EST, and automatically books a meeting once details are confirmed.\\n________________________________________\\n⚡ Prerequisites\\n1.\\tOpenAI Account\\no\\tAPI Key with GPT-4o model access\\n2.\\tGoogle Account with Calendar Access\\no\\tYour calendar must be accessible via Google Calendar\\n3.\\tOAuth2 Credentials for Google Calendar API configured in n8n\\n4.\\tOpenAI Credentials configured in n8n\\n________________________________________\\n🔐 API Credentials Setup\\nGoogle Calendar OAuth2:\\n•\\tCreate a project called n8n in google cloud console\\n•\\tGo to n8n > Credentials\\n•\\tCreate new Google Calendar OAuth2 API credentials\\n•\\tAuthorize your Google account (e.g., yourname@gmail.com)\\nOpenAI:\\n•\\tGo to Credentials\\n•\\tCreate new OpenAI API credentials\\n•\\tEnter your OpenAI API key and give it a label (e.g., \\\"My OpenAI Key\\\")\\n________________________________________\\n🔧 How to Make It Yours\\n✅ Update These Workflow Fields:\\n1.\\tGoogle Calendar Email\\no\\tReplace all instances of rbreen.ynteractive@gmail.com with your own Google Calendar email.\\no\\tThis appears in:\\n\\tGoogle Calendar Nodes\\n\\tToolWorkflow JSON for \\\"Run Get Availability\\\"\\n2.\\tGoogle Calendar OAuth2 Credential Name\\no\\tReplace credential name Google Calendar account with your own credential name.\\n3.\\tOpenAI Credential Name\\no\\tReplace OpenAi account with your own OpenAI credential name.\\n4.\\tWebhook URL / Chat Interface\\no\\tGo to the Candidate Chat node\\no\\tCopy the webhook URL\\no\\tShare this public link with users to start the chatbot\\n5.\\tSystem Message Instructions (Optional)\\no\\tYou can tweak the system message in the Interview Scheduler agent node to change tone, questions, or rules.\\n6.\\tCustom Branding (Optional)\\no\\tUpdate the title and subtitle in the Candidate Chat node under options\\no\\tYou can also replace the final message in Final Response to User with your own branding/tone\\n________________________________________\\n\\n\\n\"},\"typeVersion\":1},{\"id\":\"07ef21ee-c02a-4145-a0fb-3ecc260ff585\",\"name\":\"When chat message received\",\"type\":\"@n8n/n8n-nodes-langchain.chatTrigger\",\"position\":[280,1220],\"webhookId\":\"0c8f9f17-f5f3-4b5d-85e7-071ced0213ae\",\"parameters\":{\"public\":true,\"options\":{}},\"typeVersion\":1.1}],\"active\":true,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"69e8aa1b-e404-44ed-aedc-7d8480e2383e\",\"connections\":{\"Parse to JSON\":{\"ai_outputParser\":[[{\"node\":\"Convert Output to JSON\",\"type\":\"ai_outputParser\",\"index\":0}]]},\"If Final Output\":{\"main\":[[{\"node\":\"Convert Output to JSON\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Respond for More Info\",\"type\":\"main\",\"index\":0}]]},\"check day names\":{\"ai_tool\":[[{\"node\":\"Interview Scheduler\",\"type\":\"ai_tool\",\"index\":0}]]},\"Get Availability\":{\"main\":[[{\"node\":\"Check My Calendar\",\"type\":\"main\",\"index\":0},{\"node\":\"Generate 30 Minute Timeslots\",\"type\":\"main\",\"index\":0}]]},\"Add Blocked Field\":{\"main\":[[{\"node\":\"Combine My Calendar with All Slots\",\"type\":\"main\",\"index\":0}]]},\"Check My Calendar\":{\"main\":[[{\"node\":\"Split Events into 30 min blocks\",\"type\":\"main\",\"index\":0}]]},\"OpenAI Chat Model2\":{\"ai_languageModel\":[[{\"node\":\"Interview Scheduler\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"OpenAI Chat Model4\":{\"ai_languageModel\":[[{\"node\":\"Convert Output to JSON\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Interview Scheduler\":{\"main\":[[{\"node\":\"If Final Output\",\"type\":\"main\",\"index\":0}]]},\"Run Get Availability\":{\"ai_tool\":[[{\"node\":\"Interview Scheduler\",\"type\":\"ai_tool\",\"index\":0}]]},\"Respond for More Info\":{\"main\":[[]]},\"Window Buffer Memory2\":{\"ai_memory\":[[{\"node\":\"Interview Scheduler\",\"type\":\"ai_memory\",\"index\":0}]]},\"Convert Output to JSON\":{\"main\":[[{\"node\":\"Set Meeting with Google\",\"type\":\"main\",\"index\":0}]]},\"Final Response to User\":{\"main\":[[]]},\"Set Meeting with Google\":{\"main\":[[{\"node\":\"Final Response to User\",\"type\":\"main\",\"index\":0}]]},\"Check if Calendar Blocked\":{\"main\":[[{\"node\":\"Return string of all available times\",\"type\":\"main\",\"index\":0}]]},\"When chat message received\":{\"main\":[[{\"node\":\"Interview Scheduler\",\"type\":\"main\",\"index\":0}]]},\"Generate 30 Minute Timeslots\":{\"main\":[[{\"node\":\"Combine My Calendar with All Slots\",\"type\":\"main\",\"index\":1}]]},\"Split Events into 30 min blocks\":{\"main\":[[{\"node\":\"Add Blocked Field\",\"type\":\"main\",\"index\":0}]]},\"Combine My Calendar with All Slots\":{\"main\":[[{\"node\":\"Check if Calendar Blocked\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "✨ Overview\n\nThis workflow allows candidates to schedule interviews through a conversational AI assistant. It integrates with your Google Calendar to check for existing events and generates a list of available 30-minute weekday slots between 9 AM and 5 PM Eastern Time. Once the candidate selects a suitable time and provides their contact information, the AI bot automatically books the meeting on your calendar and confirms the appointment.\n\n⚡ Prerequisites\n\nTo use this workflow, you need an OpenAI account with access to the GPT-4o model, a Google account with a calendar that can be accessed through the Google Calendar API, and an active instance of n8n—either self-hosted or via n8n cloud. Within n8n, you must have two credential configurations ready: one for Google Calendar using OAuth2 authentication, and another for your OpenAI API key.\n\n🔐 API Credentials Setup\n\nFor Google Calendar, go to the Google Cloud Console and create a new project. Enable the Google Calendar API, then create OAuth2 credentials by selecting “Web Application” as the application type. Add <http://localhost:5678/rest/oauth2-credential/callback> as the redirect URI if using local n8n. After that, go to n8n, navigate to the Credentials section, and create a new Google Calendar OAuth2 credential using your account. For OpenAI, visit [platform.openai.com](http://platform.openai.com) to retrieve your API key. Then go to the n8n Credentials page, create a new credential for OpenAI, paste your key, and name it for reference.\n\n🔧 How to Make This Workflow Yours\n\nTo customize the workflow for your use, start by replacing all instances of the calendar email [rbreen.ynteractive@gmail.com](mailto:rbreen.ynteractive@gmail.com) with your own Google Calendar email. This email is referenced in multiple places, including Google Calendar nodes and the ToolWorkflow JSON for the node named \"Run Get Availability.\" Also update any instances where the Google Calendar credential is labeled as Google Calendar account to match your own credential name within n8n. Do the same for the OpenAI credential label, replacing OpenAi account with the name of your own credential.\n\nNext, go to the node labeled Candidate Chat and copy the webhook URL. This is the public chat interface where candidates will engage with the bot—share this URL with them through email, your website, or anywhere you want to allow access. Optionally, you can also tweak the system message in the Interview Scheduler node to modify the tone, language, or logic used during conversations. If you want to add branding, update the title, subtitle, and inputPlaceholder in the Candidate Chat node, and consider modifying the final confirmation message in Final Response to User to reflect your brand voice. You can also update the business rules such as time zone, working hours, or default duration by editing the logic in the Generate 30 Minute Timeslots code node.\n\n🧩 Workflow Explanation\n\nThis workflow begins with the Candidate Chat node, which triggers when a user visits the public chat URL. The Interview Scheduler node acts as an AI agent, guiding the user through providing their email, phone number, and preferred interview time. It checks availability using the Run Get Availability tool, which in turn reads your calendar and compares it with generated free time slots from the Generate 30 Minute Timeslots node. The check day names tool helps the AI interpret natural language date expressions like “next Tuesday.”\n\nThe schedule is only populated with 30-minute weekday slots from 9 AM to 5 PM Eastern Time, and no events are scheduled if they overlap with existing ones. When a suitable time is confirmed, the AI formats the result into structured JSON, creates an event on your Google Calendar, and sends a confirmation back to the user with all relevant meeting details.\n\n🚀 Deployment Steps\n\nTo deploy the interview scheduler, import the provided workflow JSON into your n8n instance. Update the Google Calendar email, OpenAI and Google credential labels, system prompts, and branding as needed. Test the connections to ensure the API credentials are working correctly. Once everything is configured, copy and share the public chat URL from the Candidate Chat node. When candidates engage with the chat, the workflow will walk them through the interview booking process, check your availability, and finalize the booking automatically.\n\n💡 Additional Tips\n\nBy default, the workflow avoids scheduling interviews on weekends and outside of 9–5 EST. Each interview lasts exactly 30 minutes, and overlapping with existing events is prevented. The assistant does not reveal details about other meetings. You can customize every part of this workflow to fit your use case, including subworkflows like Get Availability and check day names, or even white-label it for client use. This workflow is ready to become your AI-powered interview scheduling assistant.\n",
  "crawled_at": "2025-05-26T04:19:14.310683",
  "readme_zh": "✨ 概述\n\n本工作流允许候选人通过对话式AI助手预约面试。系统会与您的Google日历对接，检查现有日程并生成美国东部时间上午9点至下午5点之间、工作日可用的30分钟时段列表。当候选人选定时间并提供联系方式后，AI机器人将自动在您的日历上创建会议并发送确认通知。\n\n⚡ 前置条件\n\n使用本工作流需具备：可访问GPT-4o模型的OpenAI账户、支持Google Calendar API调用的Google账户，以及自托管或n8n云端的n8n实例。在n8n中需预先配置两项凭证：采用OAuth2验证的Google Calendar凭证和OpenAI API密钥凭证。\n\n🔐 API凭证配置\n\nGoogle Calendar配置：进入Google云控制台创建新项目，启用Google Calendar API后，选择\"Web应用\"类型创建OAuth2凭证。若使用本地n8n，需添加<http://localhost:5678/rest/oauth2-credential/callback>作为回调地址。随后在n8n凭证页面创建对应的Google Calendar OAuth2凭证。OpenAI配置：登录[platform.openai.com](http://platform.openai.com)获取API密钥，在n8n凭证页面创建新凭证并粘贴密钥。\n\n🔧 个性化设置指南\n\n1. 全局替换日历邮箱[rbreen.ynteractive@gmail.com](mailto:rbreen.ynteractive@gmail.com)为您自己的Google日历邮箱（涉及Google Calendar节点及\"Run Get Availability\"节点的ToolWorkflow JSON）\n2. 更新n8n中所有Google Calendar凭证和OpenAI凭证的引用名称\n3. 复制\"Candidate Chat\"节点的webhook URL作为公开聊天接口\n4. 可选定制：\n   - 修改\"Interview Scheduler\"节点的系统提示语调整对话风格\n   - 编辑\"Candidate Chat\"节点的标题/副标题/输入框提示语添加品牌元素\n   - 调整\"Final Response to User\"的确认话术\n   - 通过\"Generate 30 Minute Timeslots\"代码节点修改时区/工作时间等业务规则\n\n🧩 工作流原理\n\n1. 用户访问公开聊天URL触发\"Candidate Chat\"节点\n2. \"Interview Scheduler\"AI代理引导用户提供邮箱/电话/意向时间\n3. \"Run Get Availability\"工具调用：\n   - \"Generate 30 Minute Timeslots\"生成工作日9-17点空闲时段\n   - 实时比对日历现有事件避免冲突\n4. \"check day names\"工具解析自然语言日期（如\"下周二\"）\n5. 确认时间后，AI将结构化JSON数据写入Google日历并向用户发送含会议详情的确认信息\n\n🚀 部署步骤\n\n1. 将提供的JSON工作流导入n8n实例\n2. 更新日历邮箱/API凭证/品牌信息等参数\n3. 测试各接口连接状态\n4. 分发\"Candidate Chat\"节点的公开聊天URL\n\n💡 进阶提示\n\n• 默认设置：仅安排工作日9-17点（EST）的30分钟会议，自动规避日程冲突  \n• 隐私保护：不透露其他会议详情  \n• 扩展性：可完全自定义\"Get Availability\"等子工作流，支持白标化改造  \n• 本解决方案可立即成为您的智能面试预约助手",
  "title_zh": "基于GPT-4o与谷歌日历的聊天机器人自动面试排期系统",
  "publish_date_zh": "上次更新于一个月前",
  "workflow_json_zh": "{\n  \"id\": \"bh3H2b654RSYgIm9\",\n  \"meta\": {\n    \"instanceId\": \"efb474b59b0341d7791932605bd9ff04a6c7ed9941fdd53dc4a2e4b99a6f9439\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"Inverview Scheduler\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"cd5664f9-0b6b-491a-a0a0-1d8b3b2f2461\",\n      \"name\": \"OpenAI Chat Model2\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        320,\n        1480\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"ghJTvay8CvwXDsXz\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"e8ca4a14-ee58-4be0-838b-5cbf8a802b6e\",\n      \"name\": \"Window Buffer Memory2\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\n      \"position\": [\n        520,\n        1480\n      ],\n      \"parameters\": {\n        \"sessionKey\": \"={{ $json.sessionId }}\",\n        \"sessionIdType\": \"customKey\",\n        \"contextWindowLength\": 10\n      },\n      \"typeVersion\": 1.3\n    },\n    {\n      \"id\": \"d2957530-acd1-4875-a75b-69b890f08065\",\n      \"name\": \"OpenAI Chat Model4\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        1220,\n        1440\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"ghJTvay8CvwXDsXz\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"897c8189-aaa9-45c7-99c6-95378a7a13f2\",\n      \"name\": \"Run Get Availability\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\",\n      \"position\": [\n        720,\n        1520\n      ],\n      \"parameters\": {\n        \"name\": \"get_availability\",\n        \"source\": \"parameter\",\n        \"description\": \"Call this tool to get my availability\",\n        \"workflowJson\": \"{\\n  \\\"nodes\\\": [\\n    {\\n      \\\"parameters\\\": {\\n        \\\"operation\\\": \\\"getAll\\\",\\n        \\\"calendar\\\": {\\n          \\\"__rl\\\": true,\\n          \\\"value\\\": \\\"rbreen.ynteractive@gmail.com\\\",\\n          \\\"mode\\\": \\\"list\\\",\\n          \\\"cachedResultName\\\": \\\"rbreen.ynteractive@gmail.com\\\"\\n        },\\n        \\\"returnAll\\\": true,\\n        \\\"options\\\": {\\n          \\\"fields\\\": \\\"\\\"\\n        }\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.googleCalendar\\\",\\n      \\\"typeVersion\\\": 1.3,\\n      \\\"position\\\": [\\n        -500,\\n        220\\n      ],\\n      \\\"id\\\": \\\"a1017705-8866-469f-83e0-9f5d5f37af53\\\",\\n      \\\"name\\\": \\\"Check My Calendar\\\",\\n      \\\"credentials\\\": {\\n        \\\"googleCalendarOAuth2Api\\\": {\\n          \\\"id\\\": \\\"nc5M45R7LyFadByw\\\",\\n          \\\"name\\\": \\\"Google Calendar account\\\"\\n        }\\n      }\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"jsCode\\\": \\\"const events = items.map(item => item.json);\\\\nconst intervalMinutes = 30;\\\\nconst timeZone = 'America/New_York';\\\\n\\\\nfunction formatToEastern(date) {\\\\n  const tzDate = new Intl.DateTimeFormat('en-US', {\\\\n    timeZone,\\\\n    year: 'numeric',\\\\n    month: '2-digit',\\\\n    day: '2-digit',\\\\n    hour: '2-digit',\\\\n    minute: '2-digit',\\\\n    second: '2-digit',\\\\n    hour12: false\\\\n  }).formatToParts(date).reduce((acc, part) => {\\\\n    if (part.type !== 'literal') acc[part.type] = part.value;\\\\n    return acc;\\\\n  }, {});\\\\n\\\\n  const offset = getEasternOffset(date);\\\\n  return `${tzDate.year}-${tzDate.month}-${tzDate.day}T${tzDate.hour}:${tzDate.minute}:${tzDate.second}${offset}`;\\\\n}\\\\n\\\\nfunction getEasternOffset(date) {\\\\n  const options = { timeZone, timeZoneName: 'short' };\\\\n  const parts = new Intl.DateTimeFormat('en-US', options).formatToParts(date);\\\\n  const tzName = parts.find(p => p.type === 'timeZoneName').value;\\\\n  return tzName.includes('EDT') ? '-04:00' : '-05:00';\\\\n}\\\\n\\\\nfunction alignToPreviousSlot(date) {\\\\n  const aligned = new Date(date);\\\\n  const minutes = aligned.getMinutes();\\\\n  aligned.setMinutes(minutes < 30 ? 0 : 30, 0, 0);\\\\n  return aligned;\\\\n}\\\\n\\\\nfunction alignToNextSlot(date) {\\\\n  const aligned = new Date(date);\\\\n  const minutes = aligned.getMinutes();\\\\n  if (minutes > 0 && minutes <= 30) {\\\\n    aligned.setMinutes(30, 0, 0);\\\\n  } else if (minutes > 30) {\\\\n    aligned.setHours(aligned.getHours() + 1);\\\\n    aligned.setMinutes(0, 0, 0);\\\\n  } else {\\\\n    aligned.setMinutes(0, 0, 0);\\\\n  }\\\\n  return aligned;\\\\n}\\\\n\\\\nconst splitEventIntoETBlocks = (event) => {\\\\n  const blocks = [];\\\\n\\\\n  let current = alignToPreviousSlot(new Date(event.start.dateTime));\\\\n  const eventEnd = alignToNextSlot(new Date(event.end.dateTime));\\\\n\\\\n  while (current < eventEnd) {\\\\n    const blockEnd = new Date(current);\\\\n    blockEnd.setMinutes(current.getMinutes() + intervalMinutes);\\\\n\\\\n    blocks.push({\\\\n      start: formatToEastern(current),\\\\n      end: formatToEastern(blockEnd)\\\\n    });\\\\n\\\\n    current = blockEnd;\\\\n  }\\\\n\\\\n  return blocks;\\\\n};\\\\n\\\\nlet allBlocks = [];\\\\nfor (const event of events) {\\\\n  if (event.start?.dateTime && event.end?.dateTime) {\\\\n    const blocks = splitEventIntoETBlocks(event);\\\\n    allBlocks = allBlocks.concat(blocks);\\\\n  }\\\\n}\\\\n\\\\nreturn allBlocks.map(block => ({ json: block }));\\\\n\\\"\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.code\\\",\\n      \\\"typeVersion\\\": 2,\\n      \\\"position\\\": [\\n        -280,\\n        240\\n      ],\\n      \\\"id\\\": \\\"fb9063c2-de6b-4513-8901-d12625f5d772\\\",\\n      \\\"name\\\": \\\"Split Events into 30 min blocks\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"assignments\\\": {\\n          \\\"assignments\\\": [\\n            {\\n              \\\"id\\\": \\\"f1270be8-1d11-4086-8bc0-ae53c99507c1\\\",\\n              \\\"name\\\": \\\"start\\\",\\n              \\\"value\\\": \\\"={{ $json.start }}\\\",\\n              \\\"type\\\": \\\"string\\\"\\n            },\\n            {\\n              \\\"id\\\": \\\"1a5f24ff-7d0c-436d-bb0b-015fc0c85cb7\\\",\\n              \\\"name\\\": \\\"end\\\",\\n              \\\"value\\\": \\\"={{ $json.end }}\\\",\\n              \\\"type\\\": \\\"string\\\"\\n            },\\n            {\\n              \\\"id\\\": \\\"befe6645-c0c1-40eb-9ba6-eccf2a762247\\\",\\n              \\\"name\\\": \\\"Blocked\\\",\\n              \\\"value\\\": \\\"Blocked\\\",\\n              \\\"type\\\": \\\"string\\\"\\n            }\\n          ]\\n        },\\n        \\\"options\\\": {}\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n      \\\"typeVersion\\\": 3.4,\\n      \\\"position\\\": [\\n        -80,\\n        240\\n      ],\\n      \\\"id\\\": \\\"23d8ed50-131f-49ea-9ce8-72a0067fe828\\\",\\n      \\\"name\\\": \\\"Add Blocked Field\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"jsCode\\\": \\\"const slots = [];\\\\nconst slotMinutes = 30;\\\\nconst timeZone = 'America/New_York';\\\\nconst businessStartHour = 9;\\\\nconst businessEndHour = 17;\\\\n\\\\n// Get offset like -04:00 or -05:00\\\\nfunction getEasternOffset(date) {\\\\n  const options = { timeZone, timeZoneName: 'short' };\\\\n  const parts = new Intl.DateTimeFormat('en-US', options).formatToParts(date);\\\\n  const tz = parts.find(p => p.type === 'timeZoneName')?.value || 'EST';\\\\n  return tz.includes('EDT') ? '-04:00' : '-05:00';\\\\n}\\\\n\\\\n// Format Date as ISO with Eastern offset\\\\nfunction formatToEasternISO(date) {\\\\n  const formatter = new Intl.DateTimeFormat('en-CA', {\\\\n    timeZone,\\\\n    year: 'numeric',\\\\n    month: '2-digit',\\\\n    day: '2-digit',\\\\n    hour: '2-digit',\\\\n    minute: '2-digit',\\\\n    second: '2-digit',\\\\n    hour12: false,\\\\n  });\\\\n\\\\n  const parts = formatter.formatToParts(date).reduce((acc, part) => {\\\\n    if (part.type !== 'literal') acc[part.type] = part.value;\\\\n    return acc;\\\\n  }, {});\\\\n\\\\n  const offset = getEasternOffset(date);\\\\n  return `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}${offset}`;\\\\n}\\\\n\\\\n// Convert a Date to the hour/minute of its Eastern time\\\\nfunction getEasternTimeParts(date) {\\\\n  const formatter = new Intl.DateTimeFormat('en-US', {\\\\n    timeZone,\\\\n    hour: '2-digit',\\\\n    minute: '2-digit',\\\\n    hour12: false,\\\\n  });\\\\n  const [hourStr, minStr] = formatter.format(date).split(':');\\\\n  return { hour: parseInt(hourStr), minute: parseInt(minStr) };\\\\n}\\\\n\\\\nconst now = new Date();\\\\nconst endDate = new Date(now);\\\\nendDate.setDate(now.getDate() + 7);\\\\n\\\\n// Set current time to 24 hours in the future\\\\nconst current = new Date(now);\\\\ncurrent.setHours(current.getHours() + 24);\\\\n\\\\n// Round to the next 30-minute block in Eastern time\\\\nconst { minute } = getEasternTimeParts(current);\\\\nif (minute < 30) {\\\\n  current.setMinutes(30, 0, 0);\\\\n} else {\\\\n  current.setHours(current.getHours() + 1);\\\\n  current.setMinutes(0, 0, 0);\\\\n}\\\\n\\\\n// Generate 30-minute blocks only during business hours & weekdays\\\\nwhile (current < endDate) {\\\\n  const dayOfWeek = current.getDay(); // 0 = Sunday, 6 = Saturday\\\\n\\\\n  // Skip weekends\\\\n  if (dayOfWeek !== 0 && dayOfWeek !== 6) {\\\\n    const { hour } = getEasternTimeParts(current);\\\\n\\\\n    if (hour >= businessStartHour && hour < businessEndHour) {\\\\n      const start = new Date(current);\\\\n      const end = new Date(start);\\\\n      end.setMinutes(start.getMinutes() + slotMinutes);\\\\n\\\\n      slots.push({\\\\n        start: formatToEasternISO(start),\\\\n        end: formatToEasternISO(end),\\\\n      });\\\\n    }\\\\n  }\\\\n\\\\n  current.setMinutes(current.getMinutes() + slotMinutes);\\\\n}\\\\n\\\\nreturn slots.map(slot => ({ json: slot }));\\\\n\\\"\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.code\\\",\\n      \\\"typeVersion\\\": 2,\\n      \\\"position\\\": [\\n        -400,\\n        460\\n      ],\\n      \\\"id\\\": \\\"01597a94-d94b-47e7-9488-adea3abb741c\\\",\\n      \\\"name\\\": \\\"Generate 30 Minute Timeslots\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"mode\\\": \\\"combine\\\",\\n        \\\"fieldsToMatchString\\\": \\\"start, end\\\",\\n        \\\"joinMode\\\": \\\"enrichInput2\\\",\\n        \\\"options\\\": {}\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.merge\\\",\\n      \\\"typeVersion\\\": 3,\\n      \\\"position\\\": [\\n        180,\\n        300\\n      ],\\n      \\\"id\\\": \\\"2d9f98a1-02ac-4332-a288-635a48ea3ee8\\\",\\n      \\\"name\\\": \\\"Combine My Calendar with All Slots\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"conditions\\\": {\\n          \\\"options\\\": {\\n            \\\"caseSensitive\\\": true,\\n            \\\"leftValue\\\": \\\"\\\",\\n            \\\"typeValidation\\\": \\\"strict\\\",\\n            \\\"version\\\": 2\\n          },\\n          \\\"conditions\\\": [\\n            {\\n              \\\"id\\\": \\\"af65c6c8-31c7-4f27-a073-cf7f72079882\\\",\\n              \\\"leftValue\\\": \\\"={{ $json.Blocked }}\\\",\\n              \\\"rightValue\\\": \\\"Blocked\\\",\\n              \\\"operator\\\": {\\n                \\\"type\\\": \\\"string\\\",\\n                \\\"operation\\\": \\\"notEquals\\\"\\n              }\\n            }\\n          ],\\n          \\\"combinator\\\": \\\"and\\\"\\n        },\\n        \\\"options\\\": {}\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.if\\\",\\n      \\\"typeVersion\\\": 2.2,\\n      \\\"position\\\": [\\n        420,\\n        280\\n      ],\\n      \\\"id\\\": \\\"0438b5be-b3c4-4645-9604-303ace7bfead\\\",\\n      \\\"name\\\": \\\"Check if Calendar Blocked\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"jsCode\\\": \\\"const formatted = items.map(item => {\\\\n  const start = item.json.start;\\\\n  const end = item.json.end;\\\\n  return `${start} - ${end}`;\\\\n});\\\\n\\\\nconst combined = formatted.join(', ');\\\\n\\\\nreturn [\\\\n  {\\\\n    json: {\\\\n      availableSlots: combined\\\\n    }\\\\n  }\\\\n];\\\\n\\\"\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.code\\\",\\n      \\\"typeVersion\\\": 2,\\n      \\\"position\\\": [\\n        660,\\n        300\\n      ],\\n      \\\"id\\\": \\\"4a6bfde4-7d9f-4837-bc6c-66bf968e782a\\\",\\n      \\\"name\\\": \\\"Return string of all available times\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"inputSource\\\": \\\"passthrough\\\"\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.executeWorkflowTrigger\\\",\\n      \\\"typeVersion\\\": 1.1,\\n      \\\"position\\\": [\\n        -760,\\n        340\\n      ],\\n      \\\"id\\\": \\\"8bde95cb-7239-4b7d-aca1-0adacf2ea257\\\",\\n      \\\"name\\\": \\\"Get Availability\\\"\\n    }\\n  ],\\n  \\\"connections\\\": {\\n    \\\"Check My Calendar\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Split Events into 30 min blocks\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"Split Events into 30 min blocks\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Add Blocked Field\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"Add Blocked Field\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Combine My Calendar with All Slots\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"Generate 30 Minute Timeslots\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Combine My Calendar with All Slots\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 1\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"Combine My Calendar with All Slots\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Check if Calendar Blocked\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"Check if Calendar Blocked\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Return string of all available times\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"Get Availability\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Check My Calendar\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          },\\n          {\\n            \\\"node\\\": \\\"Generate 30 Minute Timeslots\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  },\\n  \\\"pinData\\\": {},\\n  \\\"meta\\\": {\\n    \\\"instanceId\\\": \\\"efb474b59b0341d7791932605bd9ff04a6c7ed9941fdd53dc4a2e4b99a6f9439\\\"\\n  }\\n}\"\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"8892f883-aaae-4616-bb50-bbe0f9dacb23\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1440,\n        1660\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 520,\n        \"height\": 480,\n        \"content\": \"检查日期名称工具\\n\\n\\n1. 这部分流程仅是\\\"检查日期名称工具\\\"内嵌内容的副本，不会实际运行。\\n\\n2. 如需更新此部分流程，请使用ctrl-c复制后粘贴至另一工作簿。添加子流程执行模块，将工作流设置为接收所有数据。复制整个流程后，将工作流JSON字段粘贴至\\\"检查日期名称工具\\\"的节点中。\\n\\n（注：根据技术文档翻译规范，对以下术语进行了统一处理：\\n1. \\\"flow\\\"译为\\\"流程\\\"而非\\\"流\\\"以符合IT领域术语\\n2. \\\"workbook\\\"译为\\\"工作簿\\\"保持与Excel术语一致\\n3. \\\"JSON field\\\"译为\\\"JSON字段\\\"保留专业缩写\\n4. \\\"tool node\\\"译为\\\"工具节点\\\"准确表达组件概念\\n译文采用简洁的说明文体，通过\\\"请\\\"字保持指导性语气，同时使用\\\"模块\\\"\\\"字段\\\"等技术术语确保专业性）\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"234b89da-9003-43d5-842a-4ecf92522b51\",\n      \"name\": \"check day names\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\",\n      \"position\": [\n        880,\n        1480\n      ],\n      \"parameters\": {\n        \"name\": \"check_days\",\n        \"source\": \"parameter\",\n        \"workflowJson\": \"{\\n  \\\"nodes\\\": [\\n    {\\n      \\\"parameters\\\": {\\n        \\\"inputSource\\\": \\\"passthrough\\\"\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.executeWorkflowTrigger\\\",\\n      \\\"typeVersion\\\": 1.1,\\n      \\\"position\\\": [\\n        -400,\\n        -120\\n      ],\\n      \\\"id\\\": \\\"dec37e15-3695-4911-91a6-1f97018ab982\\\",\\n      \\\"name\\\": \\\"When Executed by Another Workflow\\\"\\n    },\\n    {\\n      \\\"parameters\\\": {\\n        \\\"jsCode\\\": \\\"function getWeekdaysNextTwoWeeks() {\\\\n  const items = [];\\\\n  const longDayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\\\\n\\\\n  const today = new Date();\\\\n  const endDate = new Date();\\\\n  endDate.setDate(today.getDate() + 14); // 2 weeks ahead\\\\n\\\\n  const current = new Date(today);\\\\n\\\\n  while (current <= endDate) {\\\\n    const dayOfWeek = current.getDay(); // 0 = Sunday, 6 = Saturday\\\\n\\\\n    // Only weekdays (Mon–Fri)\\\\n    if (dayOfWeek >= 1 && dayOfWeek <= 5) {\\\\n      const dateStr = current.toISOString().split('T')[0]; // YYYY-MM-DD\\\\n      const output = `${longDayNames[dayOfWeek]} - ${dateStr}`;\\\\n\\\\n      items.push({\\\\n        json: {\\\\n          day: output\\\\n        }\\\\n      });\\\\n    }\\\\n\\\\n    current.setDate(current.getDate() + 1); // Go to next day\\\\n  }\\\\n\\\\n  return items;\\\\n}\\\\n\\\\n// Example usage:\\\\nreturn getWeekdaysNextTwoWeeks();\\\\n\\\"\\n      },\\n      \\\"type\\\": \\\"n8n-nodes-base.code\\\",\\n      \\\"typeVersion\\\": 2,\\n      \\\"position\\\": [\\n        -180,\\n        -120\\n      ],\\n      \\\"id\\\": \\\"cbbe4248-d1cc-48e3-9ea8-67a844f3de29\\\",\\n      \\\"name\\\": \\\"Check Day Names\\\"\\n    }\\n  ],\\n  \\\"connections\\\": {\\n    \\\"When Executed by Another Workflow\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"Check Day Names\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  },\\n  \\\"pinData\\\": {},\\n  \\\"meta\\\": {\\n    \\\"instanceId\\\": \\\"efb474b59b0341d7791932605bd9ff04a6c7ed9941fdd53dc4a2e4b99a6f9439\\\"\\n  }\\n}\"\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"c052c7e4-1587-4c7e-9a8e-043c8571338d\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        180,\n        1660\n      ],\n      \"parameters\": {\n        \"width\": 1200,\n        \"height\": 500,\n        \"content\": \"获取可用性执行。\\n\\n1. 这部分流程仅是\\\"运行获取可用性工具\\\"中嵌入内容的副本，不会实际执行。\\n\\n2. 如需更新此部分流程，请使用ctrl-c复制并粘贴至另一工作簿。添加子流程执行节点，将工作流设置为接收所有数据。复制整个流程后，将工作流JSON字段粘贴至\\\"运行获取可用性\\\"工具节点中。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b7c71153-fbd1-45ac-8dbf-d4beb241daaf\",\n      \"name\": \"Convert Output to JSON\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        1240,\n        1260\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.output }}\",\n        \"options\": {\n          \"systemMessage\": \"=take in this message and output json\"\n        },\n        \"promptType\": \"define\",\n        \"hasOutputParser\": true\n      },\n      \"typeVersion\": 1.7\n    },\n    {\n      \"id\": \"1f902158-5885-46d6-8d7e-26ccf116ed0a\",\n      \"name\": \"Interview Scheduler\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        520,\n        1220\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.chatInput }}\",\n        \"options\": {\n          \"systemMessage\": \"=You are a friendly AI chatbot helping users schedule meetings. Ask for Phone, email, preferred date, and time. Confirm details before booking. Time zone: Eastern.\\n\\nToday's date is {{ $now }}\\n\\n1. Use the get_availability tool to find when I am available. it will return comma separated timeslots the interviewer can meet. check the proposed time against the results. Times are in 24 hour clock times in this format.  2025-03-31T09:00:00-04:00\\n3. If I am not available, look at get_availability tool again and propose a similar time where I am available\\n2. use the check_days tool if the user mentions something like next tuesday so you know what date they are talking about\\n3. Once a time is aggreed upon, output json in this format \\n2025-03-28T13:00:00-04:00. \\n4. once you have the email, phone start and end time, output only the json and nothing else\\n\\n{\\n  \\\"interview\\\": {\\n    \\\"email\\\": \\\"applicant@example.com\\\",\\n    \\\"phone\\\": \\\"814-882-1293\\\",\\n    \\\"start_datetime\\\": \\\"2025-03-28T10:00:00\\\",\\n    \\\"end_datetime\\\": \\\"2025-03-28T11:00:00\\\"\\n  }\\n}\\n\\n## Rules\\n- If the calendar is not available at the time requested, do not double book. Send a new time.\\n- Interviews are all 30 minutes long\\n- Do not book over another meeting\\n- do not give details about what is on the interviewers calendar\\n- do not converse with the user about anything else\",\n          \"returnIntermediateSteps\": true\n        },\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.7\n    },\n    {\n      \"id\": \"ba0fb82e-a280-4392-833e-04f00a47170c\",\n      \"name\": \"If Final Output\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        960,\n        1160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"e75b6a50-680f-4f5b-8dd3-fc93be1bc7f1\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"contains\"\n              },\n              \"leftValue\": \"={{ $json.output }}\",\n              \"rightValue\": \"start_datetime\"\n            },\n            {\n              \"id\": \"cadd4bff-8d53-446c-8ad0-14b3fb9ab335\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"contains\"\n              },\n              \"leftValue\": \"={{ $json.output }}\",\n              \"rightValue\": \"end_datetime\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"c56bcba9-ac39-474b-a186-ceb67fa4008d\",\n      \"name\": \"Respond for More Info\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        1040,\n        1400\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"efd03308-0da1-4797-b899-3d4446eba722\",\n      \"name\": \"Parse to JSON\",\n      \"type\": \"@n8n/n8n-nodes-langchain.outputParserStructured\",\n      \"position\": [\n        1400,\n        1500\n      ],\n      \"parameters\": {\n        \"jsonSchemaExample\": \"{\\n  \\\"interview\\\": {\\n    \\\"email\\\": \\\"applicant@example.com\\\",\\n    \\\"phone\\\": \\\"814-882-1293\\\",\\n    \\\"start_datetime\\\": \\\"2025-03-28T10:00:00\\\",\\n    \\\"end_datetime\\\": \\\"2025-03-28T11:00:00\\\"\\n  }\\n}\"\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"11abd142-d509-4459-bdf5-861dcf4263bf\",\n      \"name\": \"Set Meeting with Google\",\n      \"type\": \"n8n-nodes-base.googleCalendar\",\n      \"position\": [\n        1640,\n        1280\n      ],\n      \"parameters\": {\n        \"end\": \"={{ $json.output.interview.end_datetime }}\",\n        \"start\": \"={{ $json.output.interview.start_datetime }}\",\n        \"calendar\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"rbreen.ynteractive@gmail.com\",\n          \"cachedResultName\": \"rbreen.ynteractive@gmail.com\"\n        },\n        \"additionalFields\": {\n          \"summary\": \"Interview\",\n          \"attendees\": [\n            \"={{ $json.output.interview.email }}\"\n          ],\n          \"description\": \"=I will call you at  {{ $json.output.interview.phone }}\"\n        }\n      },\n      \"credentials\": {\n        \"googleCalendarOAuth2Api\": {\n          \"id\": \"nc5M45R7LyFadByw\",\n          \"name\": \"Google Calendar account\"\n        }\n      },\n      \"typeVersion\": 1.3\n    },\n    {\n      \"id\": \"fef5ba53-4386-4e88-9f28-8a9b5d9c928f\",\n      \"name\": \"Final Response to User\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1640,\n        1500\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const email = $('Convert Output to JSON').first().json.output.interview.email;\\nconst phone = $('Convert Output to JSON').first().json.output.interview.phone;\\nconst start_datetime = $('Convert Output to JSON').first().json.output.interview.start_datetime;\\nconst end_datetime = $('Convert Output to JSON').first().json.output.interview.end_datetime;\\n\\nlet text = `✅ Interview Confirmed!\\\\n\\\\n📧 Email: ${email}\\\\n📞 Phone: ${phone}\\\\n🕒 Start: ${start_datetime}\\\\n🕕 End: ${end_datetime}`;\\n\\nreturn { text };\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"a06664e2-d5d2-40a7-98a5-a3de2d775b7c\",\n      \"name\": \"Generate Interview Times\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1620,\n        1920\n      ],\n      \"parameters\": {\n        \"jsCode\": \"function getWeekdaysNextTwoWeeks() {\\n  const items = [];\\n  const longDayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\\n\\n  const today = new Date();\\n  const endDate = new Date();\\n  endDate.setDate(today.getDate() + 14); // 2 weeks ahead\\n\\n  const current = new Date(today);\\n\\n  while (current <= endDate) {\\n    const dayOfWeek = current.getDay(); // 0 = Sunday, 6 = Saturday\\n\\n    // Only weekdays (Mon–Fri)\\n    if (dayOfWeek >= 1 && dayOfWeek <= 5) {\\n      const dateStr = current.toISOString().split('T')[0]; // YYYY-MM-DD\\n      const output = `${longDayNames[dayOfWeek]} - ${dateStr}`;\\n\\n      items.push({\\n        json: {\\n          day: output\\n        }\\n      });\\n    }\\n\\n    current.setDate(current.getDate() + 1); // Go to next day\\n  }\\n\\n  return items;\\n}\\n\\n// Example usage:\\nreturn getWeekdaysNextTwoWeeks();\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"f35d595e-6834-4898-bbcb-b17599d769b4\",\n      \"name\": \"Check My Calendar\",\n      \"type\": \"n8n-nodes-base.googleCalendar\",\n      \"position\": [\n        420,\n        1820\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"fields\": \"\"\n        },\n        \"calendar\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"rbreen.ynteractive@gmail.com\",\n          \"cachedResultName\": \"rbreen.ynteractive@gmail.com\"\n        },\n        \"operation\": \"getAll\",\n        \"returnAll\": true\n      },\n      \"credentials\": {\n        \"googleCalendarOAuth2Api\": {\n          \"id\": \"nc5M45R7LyFadByw\",\n          \"name\": \"Google Calendar account\"\n        }\n      },\n      \"typeVersion\": 1.3\n    },\n    {\n      \"id\": \"29e3a097-b6f1-4a54-b943-d9ad9177b03b\",\n      \"name\": \"Split Events into 30 min blocks\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        620,\n        1820\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const events = items.map(item => item.json);\\nconst intervalMinutes = 30;\\nconst timeZone = 'America/New_York';\\n\\nfunction formatToEastern(date) {\\n  const tzDate = new Intl.DateTimeFormat('en-US', {\\n    timeZone,\\n    year: 'numeric',\\n    month: '2-digit',\\n    day: '2-digit',\\n    hour: '2-digit',\\n    minute: '2-digit',\\n    second: '2-digit',\\n    hour12: false\\n  }).formatToParts(date).reduce((acc, part) => {\\n    if (part.type !== 'literal') acc[part.type] = part.value;\\n    return acc;\\n  }, {});\\n\\n  const offset = getEasternOffset(date);\\n  return `${tzDate.year}-${tzDate.month}-${tzDate.day}T${tzDate.hour}:${tzDate.minute}:${tzDate.second}${offset}`;\\n}\\n\\nfunction getEasternOffset(date) {\\n  const options = { timeZone, timeZoneName: 'short' };\\n  const parts = new Intl.DateTimeFormat('en-US', options).formatToParts(date);\\n  const tzName = parts.find(p => p.type === 'timeZoneName').value;\\n  return tzName.includes('EDT') ? '-04:00' : '-05:00';\\n}\\n\\nfunction alignToPreviousSlot(date) {\\n  const aligned = new Date(date);\\n  const minutes = aligned.getMinutes();\\n  aligned.setMinutes(minutes < 30 ? 0 : 30, 0, 0);\\n  return aligned;\\n}\\n\\nfunction alignToNextSlot(date) {\\n  const aligned = new Date(date);\\n  const minutes = aligned.getMinutes();\\n  if (minutes > 0 && minutes <= 30) {\\n    aligned.setMinutes(30, 0, 0);\\n  } else if (minutes > 30) {\\n    aligned.setHours(aligned.getHours() + 1);\\n    aligned.setMinutes(0, 0, 0);\\n  } else {\\n    aligned.setMinutes(0, 0, 0);\\n  }\\n  return aligned;\\n}\\n\\nconst splitEventIntoETBlocks = (event) => {\\n  const blocks = [];\\n\\n  let current = alignToPreviousSlot(new Date(event.start.dateTime));\\n  const eventEnd = alignToNextSlot(new Date(event.end.dateTime));\\n\\n  while (current < eventEnd) {\\n    const blockEnd = new Date(current);\\n    blockEnd.setMinutes(current.getMinutes() + intervalMinutes);\\n\\n    blocks.push({\\n      start: formatToEastern(current),\\n      end: formatToEastern(blockEnd)\\n    });\\n\\n    current = blockEnd;\\n  }\\n\\n  return blocks;\\n};\\n\\nlet allBlocks = [];\\nfor (const event of events) {\\n  if (event.start?.dateTime && event.end?.dateTime) {\\n    const blocks = splitEventIntoETBlocks(event);\\n    allBlocks = allBlocks.concat(blocks);\\n  }\\n}\\n\\nreturn allBlocks.map(block => ({ json: block }));\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"f9297e8a-75dd-4f12-b0e1-d3fa372a7631\",\n      \"name\": \"Add Blocked Field\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        800,\n        1840\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"f1270be8-1d11-4086-8bc0-ae53c99507c1\",\n              \"name\": \"start\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.start }}\"\n            },\n            {\n              \"id\": \"1a5f24ff-7d0c-436d-bb0b-015fc0c85cb7\",\n              \"name\": \"end\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.end }}\"\n            },\n            {\n              \"id\": \"befe6645-c0c1-40eb-9ba6-eccf2a762247\",\n              \"name\": \"Blocked\",\n              \"type\": \"string\",\n              \"value\": \"Blocked\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"8ba70f94-e9e6-44aa-b0e7-9a5294634e0e\",\n      \"name\": \"Generate 30 Minute Timeslots\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        440,\n        2020\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const slots = [];\\nconst slotMinutes = 30;\\nconst timeZone = 'America/New_York';\\nconst businessStartHour = 9;\\nconst businessEndHour = 17;\\n\\n// Get offset like -04:00 or -05:00\\nfunction getEasternOffset(date) {\\n  const options = { timeZone, timeZoneName: 'short' };\\n  const parts = new Intl.DateTimeFormat('en-US', options).formatToParts(date);\\n  const tz = parts.find(p => p.type === 'timeZoneName')?.value || 'EST';\\n  return tz.includes('EDT') ? '-04:00' : '-05:00';\\n}\\n\\n// Format Date as ISO with Eastern offset\\nfunction formatToEasternISO(date) {\\n  const formatter = new Intl.DateTimeFormat('en-CA', {\\n    timeZone,\\n    year: 'numeric',\\n    month: '2-digit',\\n    day: '2-digit',\\n    hour: '2-digit',\\n    minute: '2-digit',\\n    second: '2-digit',\\n    hour12: false,\\n  });\\n\\n  const parts = formatter.formatToParts(date).reduce((acc, part) => {\\n    if (part.type !== 'literal') acc[part.type] = part.value;\\n    return acc;\\n  }, {});\\n\\n  const offset = getEasternOffset(date);\\n  return `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}${offset}`;\\n}\\n\\n// Convert a Date to the hour/minute of its Eastern time\\nfunction getEasternTimeParts(date) {\\n  const formatter = new Intl.DateTimeFormat('en-US', {\\n    timeZone,\\n    hour: '2-digit',\\n    minute: '2-digit',\\n    hour12: false,\\n  });\\n  const [hourStr, minStr] = formatter.format(date).split(':');\\n  return { hour: parseInt(hourStr), minute: parseInt(minStr) };\\n}\\n\\nconst now = new Date();\\nconst endDate = new Date(now);\\nendDate.setDate(now.getDate() + 7);\\n\\n// Set current time to 24 hours in the future\\nconst current = new Date(now);\\ncurrent.setHours(current.getHours() + 24);\\n\\n// Round to the next 30-minute block in Eastern time\\nconst { minute } = getEasternTimeParts(current);\\nif (minute < 30) {\\n  current.setMinutes(30, 0, 0);\\n} else {\\n  current.setHours(current.getHours() + 1);\\n  current.setMinutes(0, 0, 0);\\n}\\n\\n// Generate 30-minute blocks only during business hours & weekdays\\nwhile (current < endDate) {\\n  const dayOfWeek = current.getDay(); // 0 = Sunday, 6 = Saturday\\n\\n  // Skip weekends\\n  if (dayOfWeek !== 0 && dayOfWeek !== 6) {\\n    const { hour } = getEasternTimeParts(current);\\n\\n    if (hour >= businessStartHour && hour < businessEndHour) {\\n      const start = new Date(current);\\n      const end = new Date(start);\\n      end.setMinutes(start.getMinutes() + slotMinutes);\\n\\n      slots.push({\\n        start: formatToEasternISO(start),\\n        end: formatToEasternISO(end),\\n      });\\n    }\\n  }\\n\\n  current.setMinutes(current.getMinutes() + slotMinutes);\\n}\\n\\nreturn slots.map(slot => ({ json: slot }));\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"3ea13a0a-d496-40b8-9321-6bc3df415191\",\n      \"name\": \"Combine My Calendar with All Slots\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        780,\n        2020\n      ],\n      \"parameters\": {\n        \"mode\": \"combine\",\n        \"options\": {},\n        \"joinMode\": \"enrichInput2\",\n        \"fieldsToMatchString\": \"start, end\"\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"ad57e0b4-43d0-4991-adc3-e325e2405e93\",\n      \"name\": \"Check if Calendar Blocked\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1100,\n        1820\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"af65c6c8-31c7-4f27-a073-cf7f72079882\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"notEquals\"\n              },\n              \"leftValue\": \"={{ $json.Blocked }}\",\n              \"rightValue\": \"Blocked\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"6e427266-1f64-4492-b4c0-30d03d6a20de\",\n      \"name\": \"Return string of all available times\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1160,\n        2000\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const formatted = items.map(item => {\\n  const start = item.json.start;\\n  const end = item.json.end;\\n  return `${start} - ${end}`;\\n});\\n\\nconst combined = formatted.join(', ');\\n\\nreturn [\\n  {\\n    json: {\\n      availableSlots: combined\\n    }\\n  }\\n];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"3f26c921-2d4c-4e8a-a551-801c2a94086a\",\n      \"name\": \"Get Availability\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        220,\n        1920\n      ],\n      \"parameters\": {\n        \"inputSource\": \"passthrough\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"6d34f9e2-4c43-4e0b-a54d-2c8076ee6fe0\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -420,\n        1160\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 520,\n        \"height\": 1000,\n        \"content\": \"如何在n8n中使用面试安排工作流\\n________________________________________\\n✨ 概述  \\n该工作流允许候选人通过与AI助手对话来安排面试。系统会检查您的Google日历空闲时段，识别美国东部时间工作日上午9点至下午5点之间30分钟的空档，并在确认细节后自动预订会议。  \\n________________________________________\\n⚡ 前提条件  \\n1. OpenAI账户  \\n   ○ 需拥有GPT-4o模型访问权限的API密钥  \\n2. 具备日历访问权限的Google账户  \\n   ○ 您的日历必须能通过Google Calendar访问  \\n3. 在n8n中配置Google Calendar API的OAuth2凭证  \\n4. 在n8n中配置OpenAI凭证  \\n________________________________________\\n🔐 API凭证设置  \\nGoogle Calendar OAuth2：  \\n• 在Google云控制台创建名为n8n的项目  \\n• 进入n8n > 凭证  \\n• 创建新的Google Calendar OAuth2 API凭证  \\n• 授权您的Google账户（如yourname@gmail.com）  \\n\\nOpenAI：  \\n• 进入凭证管理  \\n• 创建新的OpenAI API凭证  \\n• 输入您的OpenAI API密钥并添加标签（如\\\"My OpenAI Key\\\"）  \\n________________________________________\\n🔧 个性化配置指南  \\n✅ 需更新的工作流字段：  \\n1. Google Calendar邮箱  \\n   ○ 将所有rbreen.ynteractive@gmail.com替换为您自己的Google Calendar邮箱  \\n   ○ 出现位置：  \\n      Google Calendar节点  \\n      \\\"Run Get Availability\\\"的ToolWorkflow JSON中  \\n\\n2. Google Calendar OAuth2凭证名称  \\n   ○ 将\\\"Google Calendar account\\\"替换为您自己的凭证名称  \\n\\n3. OpenAI凭证名称  \\n   ○ 将\\\"OpenAi account\\\"替换为您自己的OpenAI凭证名称  \\n\\n4. Webhook URL/聊天界面  \\n   ○ 进入Candidate Chat节点  \\n   ○ 复制webhook URL  \\n   ○ 将此公开链接分享给用户以启动聊天机器人  \\n\\n5. 系统消息指令（可选）  \\n   ○ 可在Interview Scheduler agent节点中调整系统消息以更改语气、问题或规则  \\n\\n6. 自定义品牌（可选）  \\n   ○ 在Candidate Chat节点的选项下更新标题和副标题  \\n   ○ 还可在Final Response to User中替换最终消息以匹配您的品牌风格  \\n________________________________________\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"07ef21ee-c02a-4145-a0fb-3ecc260ff585\",\n      \"name\": \"When chat message received\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",\n      \"position\": [\n        280,\n        1220\n      ],\n      \"webhookId\": \"0c8f9f17-f5f3-4b5d-85e7-071ced0213ae\",\n      \"parameters\": {\n        \"public\": true,\n        \"options\": {}\n      },\n      \"typeVersion\": 1.1\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"69e8aa1b-e404-44ed-aedc-7d8480e2383e\",\n  \"connections\": {\n    \"Parse to JSON\": {\n      \"ai_outputParser\": [\n        [\n          {\n            \"node\": \"Convert Output to JSON\",\n            \"type\": \"ai_outputParser\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"If Final Output\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert Output to JSON\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Respond for More Info\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"check day names\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"Interview Scheduler\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Availability\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check My Calendar\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Generate 30 Minute Timeslots\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Add Blocked Field\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Combine My Calendar with All Slots\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check My Calendar\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split Events into 30 min blocks\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model2\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Interview Scheduler\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model4\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Convert Output to JSON\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Interview Scheduler\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If Final Output\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Run Get Availability\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"Interview Scheduler\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Respond for More Info\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"Window Buffer Memory2\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"Interview Scheduler\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert Output to JSON\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set Meeting with Google\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Final Response to User\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"Set Meeting with Google\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Final Response to User\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check if Calendar Blocked\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Return string of all available times\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When chat message received\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Interview Scheduler\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate 30 Minute Timeslots\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Combine My Calendar with All Slots\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Split Events into 30 min blocks\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Add Blocked Field\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Combine My Calendar with All Slots\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check if Calendar Blocked\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}