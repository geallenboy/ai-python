{
  "url": "https://n8n.io/workflows/2338-reconcile-rent-payments-with-local-excel-spreadsheet-and-openai/",
  "title": "Reconcile Rent Payments with Local Excel Spreadsheet and OpenAI",
  "author": "Jimleuk",
  "publish_date": "Last update 9 months ago",
  "publish_date_absolute": "2024-08-25",
  "categories": [
    {
      "name": "Finance"
    },
    {
      "name": "AI"
    }
  ],
  "workflow_json": "{\"meta\":{\"instanceId\":\"26ba763460b97c249b82942b23b6384876dfeb9327513332e743c5f6219c2b8e\"},\"nodes\":[{\"id\":\"bebbf9cf-8103-4694-a3be-ae3ee1e9ebaf\",\"name\":\"Watch For Bank Statements\",\"type\":\"n8n-nodes-base.localFileTrigger\",\"position\":[780,400],\"parameters\":{\"path\":\"/home/node/host_mount/reconciliation_project\",\"events\":[\"add\"],\"options\":{\"ignored\":\"!**/*.csv\"},\"triggerOn\":\"folder\"},\"typeVersion\":1},{\"id\":\"eca26bed-ba44-4507-97d4-9154e26908a5\",\"name\":\"Get Tenant Details\",\"type\":\"@n8n/n8n-nodes-langchain.toolCode\",\"position\":[1660,540],\"parameters\":{\"name\":\"get_tenant_details\",\"jsCode\":\"const xlsx = require('xlsx');\\n\\nconst { spreadsheet_location } = $('Set Variables').item.json;\\nconst sheetName = 'tenants';\\n\\nconst wb = xlsx.readFile(spreadsheet_location, { sheets: [sheetName] });\\nconst rows = xlsx.utils.sheet_to_json(wb.Sheets[sheetName], { raw: false });\\n\\nconst queryToList = [].concat(typeof query === 'string' ? query.split(',') : query);\\n\\nconst result = queryToList.map(q => (\\n  rows.find(row =>\\n    row['Tenant Name'].toLowerCase() === q.toLowerCase()\\n    || row['Tenant ID'].toLowerCase() === q.toString().toLowerCase()\\n  )\\n));\\n\\nreturn result ? JSON.stringify(result) : `No results were found for ${query}`;\",\"description\":\"Call this tool to get a tenant's details which includes their tenancy terms, rent amount and any notes attached to their account. Pass in one or an array of either the tenant ID or the name of the tenant.\"},\"typeVersion\":1.1},{\"id\":\"76b68c2f-8d33-4f61-a442-732e784b733a\",\"name\":\"Structured Output Parser\",\"type\":\"@n8n/n8n-nodes-langchain.outputParserStructured\",\"position\":[1920,540],\"parameters\":{\"jsonSchemaExample\":\"[{\\n  \\\"tenant_id\\\": \\\"\\\",\\n  \\\"tenant_name\\\": \\\"\\\",\\n  \\\"property_id\\\": \\\"\\\",\\n  \\\"property_postcode\\\": \\\"\\\",\\n  \\\"action_required\\\": \\\"\\\",\\n  \\\"details\\\": \\\"\\\",\\n  \\\"date\\\": \\\"\\\"\\n}]\"},\"typeVersion\":1.2},{\"id\":\"be01720f-4617-4a2b-aaed-2474f9f0e25b\",\"name\":\"Get Bank Statement File\",\"type\":\"n8n-nodes-base.readWriteFile\",\"position\":[1100,400],\"parameters\":{\"options\":{},\"fileSelector\":\"={{ $('Watch For Bank Statements').item.json.path }}\"},\"typeVersion\":1},{\"id\":\"2aba5f6a-56b0-411f-9124-33025d90e325\",\"name\":\"Get CSV Data\",\"type\":\"n8n-nodes-base.extractFromFile\",\"position\":[1260,400],\"parameters\":{\"options\":{}},\"typeVersion\":1},{\"id\":\"a60d5851-f938-4696-855b-1f0845ffbc6c\",\"name\":\"Alert Actions To List\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[2260,400],\"parameters\":{\"options\":{},\"fieldToSplitOut\":\"output\"},\"typeVersion\":1},{\"id\":\"f804d9fb-f679-4e95-b70f-722e7c222c40\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[690.6721905682555,177.80249392766257],\"parameters\":{\"color\":7,\"width\":748.2548372021405,\"height\":457.6238063670572,\"content\":\"## Step 1. Wait For Incoming Bank Statements\\n[Read more about the local file triggers](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)\\n\\nFor this demo, we'll show that n8n is more than capable working with the local filesystem. This gives great benefits in terms of privacy and data security.\\n\\nFor our datastore, we're using a locally hosted XLSX Excel file which we'll query and update throughout this workflow.\"},\"typeVersion\":1},{\"id\":\"01e9c335-320c-4fff-9ade-ad1cf808db00\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1460,80],\"parameters\":{\"color\":7,\"width\":634.3165117416636,\"height\":675.2455596085985,\"content\":\"## Step 2. Delegate to AI Agent to Quickly Identify Issues with Rental Payments\\n[Read more about AI Agents](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/)\\n\\nAn AI agent can not only check against agreed amounts and compare due dates but also consider contract exceptions and tenant notes before deciding to take action. In a scenario of 10+ of tenants, this can save a lot of admin time.\\n\\nFor this demo, we're using a remote LLM Model but this can easily be swapped out for other self-hosted LLMS models that support function calling.\"},\"typeVersion\":1},{\"id\":\"2456b1e5-ceec-45c3-91a7-52e21125e6e5\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2120,143.8836673253448],\"parameters\":{\"color\":7,\"width\":618.3293247808133,\"height\":473.7439917476675,\"content\":\"## Step 3. Generate a Report to Action any Issues\\n[Read more about using the Code Node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code)\\n\\nAfter the AI Agent has helped identify issues to action, we can generate a  report and update a locally hosted xlsx file. This again helps keep workflows private to nothing senstive goes over the wire.\\n\\nThough n8n lacks a builtin node for editing local xlsx file, we can tap into the sheetJS library available to the \\\"Code\\\" node.\"},\"typeVersion\":1},{\"id\":\"7b32e8f9-b543-47e1-a08e-53ee47105966\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[260,80],\"parameters\":{\"width\":399.5148533727183,\"height\":558.2628336538015,\"content\":\"## Try It Out!\\n### This workflow ingests bank statements to analyses them against a list of tenants using an AI Agent. The agent then flags any issues such as missing payments or incorrect amounts which are exported to a XLSX spreadsheet.\\n\\n### Note: This workflow is intended to work with a self-hosted version of n8n and has access to the local file system.\\n\\n* Watches for CSV files (bank statements)\\n* Imports into AI agent for analysis.\\n* AI agent will query the Excel spreadsheet for tenant and property details.\\n* AI agent will generate report on discrepancies or issues and write them to the Excel file.\\n\\n\\n### Need Help?\\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\\n\\nHappy Hacking!\"},\"typeVersion\":1},{\"id\":\"ba35ed0b-7ace-4b76-b915-0dc516a07fb1\",\"name\":\"Get Property Details\",\"type\":\"@n8n/n8n-nodes-langchain.toolCode\",\"position\":[1800,540],\"parameters\":{\"name\":\"get_property_details\",\"jsCode\":\"const xlsx = require('xlsx');\\n\\nconst { spreadsheet_location } = $('Set Variables').item.json;\\nconst sheetName = 'properties'\\n\\nconst wb = xlsx.readFile(spreadsheet_location, { sheets: [sheetName] });\\nconst rows = xlsx.utils.sheet_to_json(wb.Sheets[sheetName], { raw: false });\\n\\nconst queryToList = [].concat(typeof query === 'string' ? query.split(',') :query);\\n\\nconst result = queryToList.map(q => rows.find(row => row['Property ID'] === q));\\n\\nreturn result ? JSON.stringify(result) : `No results were found for ${query}`;\",\"description\":\"Call this tool to get a property details which includes the address, postcode and type of the property. Pass in one or an array of Property IDs.\"},\"typeVersion\":1.1},{\"id\":\"8c85a2f5-6741-41f4-b377-c74a74b14d0f\",\"name\":\"Set Variables\",\"type\":\"n8n-nodes-base.set\",\"position\":[940,400],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"bcd3dd04-0082-4da6-b36b-e5ad09c4de30\",\"name\":\"spreadsheet_location\",\"type\":\"string\",\"value\":\"/home/node/host_mount/reconciliation_project/reconcilation-workbook.xlsx\"}]}},\"typeVersion\":3.4},{\"id\":\"bd75bad8-caa3-48f1-8892-3d1221765564\",\"name\":\"Append To Spreadsheet\",\"type\":\"n8n-nodes-base.code\",\"position\":[2480,400],\"parameters\":{\"jsCode\":\"const xlsx = require('xlsx');\\n\\nconst { spreadsheet_location } = $('Set Variables').first().json;\\nconst sheetName = 'alerts';\\n\\nconst wb = xlsx.readFile(spreadsheet_location);\\nxlsx.writeFile(wb, spreadsheet_location + '.bak.xlsx'); // create backup\\n\\nconst worksheet = wb.Sheets[sheetName];\\n\\nconst inputs = $input.all();\\n\\nfor (input of inputs) {\\n  xlsx.utils.sheet_add_aoa(worksheet, [\\n    [\\n      input.json.date,\\n      input.json[\\\"property_id\\\"],\\n      input.json[\\\"property_postcode\\\"],\\n      input.json[\\\"tenant_id\\\"],\\n      input.json[\\\"tenant_name\\\"],\\n      input.json[\\\"action_required\\\"],\\n      input.json[\\\"details\\\"],\\n    ]\\n  ], { origin: -1 });\\n}\\n\\n// update sheet ref\\nconst range = xlsx.utils.decode_range(worksheet['!ref']);\\nconst rowIndex = range.e.r + 1; // The next row index to append\\nworksheet['!ref'] = xlsx.utils.encode_range({\\n    s: range.s,\\n    e: { r: rowIndex, c: range.e.c }\\n});\\n\\nxlsx.writeFile(wb, spreadsheet_location, {\\n  cellDates: true,\\n  cellStyles: true,\\n  bookType: 'xlsx',\\n});\\n\\nreturn {\\\"json\\\": { \\\"output\\\": `${inputs.length} rows added` }}\"},\"typeVersion\":2},{\"id\":\"c818ea7e-dc57-4680-b797-abb21cca87fb\",\"name\":\"OpenAI Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[1540,540],\"parameters\":{\"model\":\"gpt-4o\",\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"8gccIjcuf3gvaoEr\",\"name\":\"OpenAi account\"}},\"typeVersion\":1},{\"id\":\"b2a97514-6020-49a6-bbdb-ee1251eb6aed\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2280,640],\"parameters\":{\"color\":3,\"width\":461.5505566920007,\"height\":106.59049079746408,\"content\":\"### 🚨Warning! Potentially Destructive Operations!\\nWith code comes great responsibility! There is a risk you may overwrite/delete data you didn't intend. Always makes backups and test on a copy of your spreadsheets!\"},\"typeVersion\":1},{\"id\":\"f869f6eb-cf19-4b14-bf3a-4db5d636646f\",\"name\":\"Reconcile Rental Payments\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[1640,360],\"parameters\":{\"text\":\"=Bank Statement for {{ $input.first().json.date }} to {{  $input.last().json.date }}:\\n|date|reference|money in|money out|\\n|-|-|-|-|\\n{{ $input.all().map(row => `|${row.json.date}|${row.json.reference}|${row.json.money_in || ''}|${row.json.money_out || ''}|`).join('\\\\n') }}\",\"options\":{\"systemMessage\":\"Your task is to help reconcile rent payments with the uploaded bank statement and alert only if there are any actions to be taken in regards to the tenants.\\n* Identify and flag any tenants who have have missed their rent according to the month. Late payments which are within a few days of the due date are acceptable and should not be flagged.\\n* Identify and flag if any tenants have not paid the correct ammount due, either less or more.\\n* Identify and flag any tenants who are finishing their rentals within the time period of the current statement.\\n* Identify and flag any remaining fees which are due and have not been paid from any tenant in the last month of their rental.\\n\\nIf the bank statement show incomplete months due to cut off, it is ok to assume the payment is pending and not actually missing.\\n\\nThe alert system requires a JSON formatted message. It is important that you format your response as follows:\\n[{\\n  \\\"tenant_id\\\": \\\"\\\",\\n  \\\"tenant_name\\\": \\\"\\\",\\n  \\\"property_id\\\": \\\"\\\",\\n  \\\"property_postcode\\\": \\\"\\\",\\n  \\\"action required\\\": \\\"\\\",\\n  \\\"details\\\": \\\"\\\",\\n  \\\"date\\\": \\\"\\\"\\n}]\"},\"promptType\":\"define\",\"hasOutputParser\":true},\"executeOnce\":true,\"typeVersion\":1.6},{\"id\":\"510dc73c-f267-41f3-a981-58f5bfc229a6\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[360,660],\"parameters\":{\"color\":5,\"width\":302.6142384407349,\"height\":86.00673806595168,\"content\":\"### 💡I'm designed to work self-hosted!\\nSome nodes in this workflow are only available to the self-hosted version of n8n.\"},\"typeVersion\":1}],\"pinData\":{},\"connections\":{\"Get CSV Data\":{\"main\":[[{\"node\":\"Reconcile Rental Payments\",\"type\":\"main\",\"index\":0}]]},\"Set Variables\":{\"main\":[[{\"node\":\"Get Bank Statement File\",\"type\":\"main\",\"index\":0}]]},\"OpenAI Chat Model\":{\"ai_languageModel\":[[{\"node\":\"Reconcile Rental Payments\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Get Tenant Details\":{\"ai_tool\":[[{\"node\":\"Reconcile Rental Payments\",\"type\":\"ai_tool\",\"index\":0}]]},\"Get Property Details\":{\"ai_tool\":[[{\"node\":\"Reconcile Rental Payments\",\"type\":\"ai_tool\",\"index\":0}]]},\"Alert Actions To List\":{\"main\":[[{\"node\":\"Append To Spreadsheet\",\"type\":\"main\",\"index\":0}]]},\"Get Bank Statement File\":{\"main\":[[{\"node\":\"Get CSV Data\",\"type\":\"main\",\"index\":0}]]},\"Structured Output Parser\":{\"ai_outputParser\":[[{\"node\":\"Reconcile Rental Payments\",\"type\":\"ai_outputParser\",\"index\":0}]]},\"Reconcile Rental Payments\":{\"main\":[[{\"node\":\"Alert Actions To List\",\"type\":\"main\",\"index\":0}]]},\"Watch For Bank Statements\":{\"main\":[[{\"node\":\"Set Variables\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This n8n workflow is designed to work on the local network and assists with reconciling downloaded bank statements with internal tenant records to quickly highlight any issues with payments such as missed or late payments or those of incorrect amounts.\n\nThis assistant can then generate a report to quick flag attention to ensure remedial action is taken.\n\n## How it works\n\n  * The workflow monitors a local network drive to watch for new bank statements that are added.\n  * This bank statement is then imported into the n8n workflow, its contents extracted and sent to the AI Agent.\n  * The AI Agent analyses the line items to identify the dates and any incoming payments from tenants.\n  * The AI agent then uses an locally-hosted Excel (\"XLSX\") spreadsheet to get both tenant records and property records. From this data, it can determine for each active tenant when payment is due, the amount and the tenancy duration.\n  * Comparing to the bank statement, the AI Agent can now report on where tenants have missed their payments, made late payments or are paying the incorrect amounts.\n  * The final report is generated and logged in the same XLSX for a human to check and action.\n\n\n\n## Requirements\n\n  * A self-hosted version of n8n is required.\n  * OpenAI account for the AI model\n\n\n\n## Customising this workflow\n\nIf you organisation has a Slack or Teams account, consider sending reports to a channel for increased productivity. Email may be a good choice too.\n\n## Want to go fully local?\n\nA version of this workflow is available which uses Ollama instead. You can download this template here: <https://drive.google.com/file/d/1YRKjfakpInm23F_g8AHupKPBN-fphWgK/view?usp=sharing>\n",
  "crawled_at": "2025-05-25T23:32:16.180822",
  "readme_zh": "该n8n工作流专为局域网环境设计，用于将下载的银行对账单与内部租户记录进行自动对账，快速识别付款异常情况（如漏付、迟付或金额错误），并生成预警报告以便及时采取补救措施。\n\n## 运行原理\n  * 工作流监控局域网驱动器，实时检测新增银行对账单文件\n  * 自动导入对账单内容并发送至AI代理程序\n  * AI代理解析交易明细，识别租户付款日期及金额\n  * 通过调取本地Excel表格（XLSX格式）中的租户档案与物业记录，核验各租户的应付周期、金额及租约期限\n  * 比对银行流水后，AI代理将生成包含逾期未付、延迟支付及金额偏差等问题的报告\n  * 最终报告将记录至原Excel文件供人工核查处理\n\n## 系统要求\n  * 需自行部署n8n服务\n  * 需配置OpenAI账户调用AI模型\n\n## 定制建议\n若企业使用Slack或Teams，可将报告推送至协作频道提升处理效率，邮件通知亦为可行方案。\n\n## 本地化部署方案\n本工作流另提供基于Ollama的纯本地版本模板，下载地址：<https://drive.google.com/file/d/1YRKjfakpInm23F_g8AHupKPBN-fphWgK/view?usp=sharing>",
  "title_zh": "将租金支付与本地Excel电子表格和OpenAI对账",
  "publish_date_zh": "最后更新于8个月前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"26ba763460b97c249b82942b23b6384876dfeb9327513332e743c5f6219c2b8e\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"bebbf9cf-8103-4694-a3be-ae3ee1e9ebaf\",\n      \"name\": \"Watch For Bank Statements\",\n      \"type\": \"n8n-nodes-base.localFileTrigger\",\n      \"position\": [\n        780,\n        400\n      ],\n      \"parameters\": {\n        \"path\": \"/home/node/host_mount/reconciliation_project\",\n        \"events\": [\n          \"add\"\n        ],\n        \"options\": {\n          \"ignored\": \"!**/*.csv\"\n        },\n        \"triggerOn\": \"folder\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"eca26bed-ba44-4507-97d4-9154e26908a5\",\n      \"name\": \"Get Tenant Details\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolCode\",\n      \"position\": [\n        1660,\n        540\n      ],\n      \"parameters\": {\n        \"name\": \"get_tenant_details\",\n        \"jsCode\": \"const xlsx = require('xlsx');\\n\\nconst { spreadsheet_location } = $('Set Variables').item.json;\\nconst sheetName = 'tenants';\\n\\nconst wb = xlsx.readFile(spreadsheet_location, { sheets: [sheetName] });\\nconst rows = xlsx.utils.sheet_to_json(wb.Sheets[sheetName], { raw: false });\\n\\nconst queryToList = [].concat(typeof query === 'string' ? query.split(',') : query);\\n\\nconst result = queryToList.map(q => (\\n  rows.find(row =>\\n    row['Tenant Name'].toLowerCase() === q.toLowerCase()\\n    || row['Tenant ID'].toLowerCase() === q.toString().toLowerCase()\\n  )\\n));\\n\\nreturn result ? JSON.stringify(result) : `No results were found for ${query}`;\",\n        \"description\": \"Call this tool to get a tenant's details which includes their tenancy terms, rent amount and any notes attached to their account. Pass in one or an array of either the tenant ID or the name of the tenant.\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"76b68c2f-8d33-4f61-a442-732e784b733a\",\n      \"name\": \"Structured Output Parser\",\n      \"type\": \"@n8n/n8n-nodes-langchain.outputParserStructured\",\n      \"position\": [\n        1920,\n        540\n      ],\n      \"parameters\": {\n        \"jsonSchemaExample\": \"[{\\n  \\\"tenant_id\\\": \\\"\\\",\\n  \\\"tenant_name\\\": \\\"\\\",\\n  \\\"property_id\\\": \\\"\\\",\\n  \\\"property_postcode\\\": \\\"\\\",\\n  \\\"action_required\\\": \\\"\\\",\\n  \\\"details\\\": \\\"\\\",\\n  \\\"date\\\": \\\"\\\"\\n}]\"\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"be01720f-4617-4a2b-aaed-2474f9f0e25b\",\n      \"name\": \"Get Bank Statement File\",\n      \"type\": \"n8n-nodes-base.readWriteFile\",\n      \"position\": [\n        1100,\n        400\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fileSelector\": \"={{ $('Watch For Bank Statements').item.json.path }}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2aba5f6a-56b0-411f-9124-33025d90e325\",\n      \"name\": \"Get CSV Data\",\n      \"type\": \"n8n-nodes-base.extractFromFile\",\n      \"position\": [\n        1260,\n        400\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a60d5851-f938-4696-855b-1f0845ffbc6c\",\n      \"name\": \"Alert Actions To List\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        2260,\n        400\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldToSplitOut\": \"output\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f804d9fb-f679-4e95-b70f-722e7c222c40\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        690.6721905682555,\n        177.80249392766257\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 748.2548372021405,\n        \"height\": 457.6238063670572,\n        \"content\": \"## 第一步：等待银行对账单传入\\n[详细了解本地文件触发器](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)\\n\\n在本演示中，我们将展示n8n完全能够处理本地文件系统操作。这在隐私保护和数据安全方面具有显著优势。\\n\\n我们的数据存储采用本地托管的XLSX格式Excel文件，整个工作流程中将对该文件进行查询和更新操作。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"01e9c335-320c-4fff-9ade-ad1cf808db00\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1460,\n        80\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 634.3165117416636,\n        \"height\": 675.2455596085985,\n        \"content\": \"## 第二步：委托AI代理快速识别租金支付问题\\n[详细了解AI代理](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/)\\n\\nAI代理不仅能核对约定金额与到期日，还能在决定采取行动前综合考虑合同例外条款和租户备注。面对10名以上租户的场景，这将大幅节省管理时间。\\n\\n本演示使用远程LLM模型，但可轻松替换为其他支持函数调用的自托管LLM模型。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2456b1e5-ceec-45c3-91a7-52e21125e6e5\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2120,\n        143.8836673253448\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 618.3293247808133,\n        \"height\": 473.7439917476675,\n        \"content\": \"## 第三步：生成问题处理报告  \\n[详细了解代码节点用法](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code)  \\n\\n当AI助手协助识别出待处理问题后，我们可以生成报告并更新本地托管的xlsx文件。这种方式能确保工作流隐私性，避免敏感数据通过网络传输。  \\n\\n虽然n8n没有内置编辑本地xlsx文件的节点，但我们可以利用\\\"代码\\\"节点支持的sheetJS库来实现这一功能。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7b32e8f9-b543-47e1-a08e-53ee47105966\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        260,\n        80\n      ],\n      \"parameters\": {\n        \"width\": 399.5148533727183,\n        \"height\": 558.2628336538015,\n        \"content\": \"## 试试看吧！\\n### 该工作流通过AI智能体分析银行对账单与租户清单的匹配情况。AI智能体会标记缺失付款或金额错误等问题，并将结果导出至XLSX表格。\\n\\n### 注意：此工作流需在自托管的n8n版本中运行，需有本地文件系统访问权限。\\n\\n* 监控CSV文件（银行对账单）\\n* 导入AI智能体进行分析\\n* AI智能体将查询Excel表格中的租户及房产信息\\n* AI智能体生成差异问题报告并写入Excel文件\\n\\n### 需要帮助？\\n加入[Discord讨论组](https://discord.com/invite/XPKeKXeB7d)或访问[社区论坛](https://community.n8n.io/)提问！\\n\\n祝您探索愉快！\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ba35ed0b-7ace-4b76-b915-0dc516a07fb1\",\n      \"name\": \"Get Property Details\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolCode\",\n      \"position\": [\n        1800,\n        540\n      ],\n      \"parameters\": {\n        \"name\": \"get_property_details\",\n        \"jsCode\": \"const xlsx = require('xlsx');\\n\\nconst { spreadsheet_location } = $('Set Variables').item.json;\\nconst sheetName = 'properties'\\n\\nconst wb = xlsx.readFile(spreadsheet_location, { sheets: [sheetName] });\\nconst rows = xlsx.utils.sheet_to_json(wb.Sheets[sheetName], { raw: false });\\n\\nconst queryToList = [].concat(typeof query === 'string' ? query.split(',') :query);\\n\\nconst result = queryToList.map(q => rows.find(row => row['Property ID'] === q));\\n\\nreturn result ? JSON.stringify(result) : `No results were found for ${query}`;\",\n        \"description\": \"Call this tool to get a property details which includes the address, postcode and type of the property. Pass in one or an array of Property IDs.\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"8c85a2f5-6741-41f4-b377-c74a74b14d0f\",\n      \"name\": \"Set Variables\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        940,\n        400\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"bcd3dd04-0082-4da6-b36b-e5ad09c4de30\",\n              \"name\": \"spreadsheet_location\",\n              \"type\": \"string\",\n              \"value\": \"/home/node/host_mount/reconciliation_project/reconcilation-workbook.xlsx\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"bd75bad8-caa3-48f1-8892-3d1221765564\",\n      \"name\": \"Append To Spreadsheet\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2480,\n        400\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const xlsx = require('xlsx');\\n\\nconst { spreadsheet_location } = $('Set Variables').first().json;\\nconst sheetName = 'alerts';\\n\\nconst wb = xlsx.readFile(spreadsheet_location);\\nxlsx.writeFile(wb, spreadsheet_location + '.bak.xlsx'); // create backup\\n\\nconst worksheet = wb.Sheets[sheetName];\\n\\nconst inputs = $input.all();\\n\\nfor (input of inputs) {\\n  xlsx.utils.sheet_add_aoa(worksheet, [\\n    [\\n      input.json.date,\\n      input.json[\\\"property_id\\\"],\\n      input.json[\\\"property_postcode\\\"],\\n      input.json[\\\"tenant_id\\\"],\\n      input.json[\\\"tenant_name\\\"],\\n      input.json[\\\"action_required\\\"],\\n      input.json[\\\"details\\\"],\\n    ]\\n  ], { origin: -1 });\\n}\\n\\n// update sheet ref\\nconst range = xlsx.utils.decode_range(worksheet['!ref']);\\nconst rowIndex = range.e.r + 1; // The next row index to append\\nworksheet['!ref'] = xlsx.utils.encode_range({\\n    s: range.s,\\n    e: { r: rowIndex, c: range.e.c }\\n});\\n\\nxlsx.writeFile(wb, spreadsheet_location, {\\n  cellDates: true,\\n  cellStyles: true,\\n  bookType: 'xlsx',\\n});\\n\\nreturn {\\\"json\\\": { \\\"output\\\": `${inputs.length} rows added` }}\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"c818ea7e-dc57-4680-b797-abb21cca87fb\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        1540,\n        540\n      ],\n      \"parameters\": {\n        \"model\": \"gpt-4o\",\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"8gccIjcuf3gvaoEr\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b2a97514-6020-49a6-bbdb-ee1251eb6aed\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2280,\n        640\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 461.5505566920007,\n        \"height\": 106.59049079746408,\n        \"content\": \"### ⚠️警告！可能存在破坏性操作！\\n代码赋予你重大责任！存在意外覆盖/删除数据的风险。务必提前备份并在电子表格副本上测试！\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f869f6eb-cf19-4b14-bf3a-4db5d636646f\",\n      \"name\": \"Reconcile Rental Payments\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        1640,\n        360\n      ],\n      \"parameters\": {\n        \"text\": \"=Bank Statement for {{ $input.first().json.date }} to {{  $input.last().json.date }}:\\n|date|reference|money in|money out|\\n|-|-|-|-|\\n{{ $input.all().map(row => `|${row.json.date}|${row.json.reference}|${row.json.money_in || ''}|${row.json.money_out || ''}|`).join('\\\\n') }}\",\n        \"options\": {\n          \"systemMessage\": \"Your task is to help reconcile rent payments with the uploaded bank statement and alert only if there are any actions to be taken in regards to the tenants.\\n* Identify and flag any tenants who have have missed their rent according to the month. Late payments which are within a few days of the due date are acceptable and should not be flagged.\\n* Identify and flag if any tenants have not paid the correct ammount due, either less or more.\\n* Identify and flag any tenants who are finishing their rentals within the time period of the current statement.\\n* Identify and flag any remaining fees which are due and have not been paid from any tenant in the last month of their rental.\\n\\nIf the bank statement show incomplete months due to cut off, it is ok to assume the payment is pending and not actually missing.\\n\\nThe alert system requires a JSON formatted message. It is important that you format your response as follows:\\n[{\\n  \\\"tenant_id\\\": \\\"\\\",\\n  \\\"tenant_name\\\": \\\"\\\",\\n  \\\"property_id\\\": \\\"\\\",\\n  \\\"property_postcode\\\": \\\"\\\",\\n  \\\"action required\\\": \\\"\\\",\\n  \\\"details\\\": \\\"\\\",\\n  \\\"date\\\": \\\"\\\"\\n}]\"\n        },\n        \"promptType\": \"define\",\n        \"hasOutputParser\": true\n      },\n      \"executeOnce\": true,\n      \"typeVersion\": 1.6\n    },\n    {\n      \"id\": \"510dc73c-f267-41f3-a981-58f5bfc229a6\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        360,\n        660\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 302.6142384407349,\n        \"height\": 86.00673806595168,\n        \"content\": \"### 💡我专为自托管设计！\\n此工作流中的某些节点仅适用于n8n的自托管版本。\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Get CSV Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Reconcile Rental Payments\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set Variables\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Bank Statement File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Reconcile Rental Payments\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Tenant Details\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"Reconcile Rental Payments\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Property Details\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"Reconcile Rental Payments\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Alert Actions To List\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Append To Spreadsheet\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Bank Statement File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get CSV Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Structured Output Parser\": {\n      \"ai_outputParser\": [\n        [\n          {\n            \"node\": \"Reconcile Rental Payments\",\n            \"type\": \"ai_outputParser\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Reconcile Rental Payments\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Alert Actions To List\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Watch For Bank Statements\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set Variables\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}