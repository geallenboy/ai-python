{
  "url": "https://n8n.io/workflows/4078-convert-markdown-content-to-contentful-rich-text-with-ai-formatting/",
  "title": "Convert Markdown Content to Contentful Rich Text with AI Formatting",
  "author": "Varritech",
  "publish_date": "Last update 7 days ago",
  "publish_date_absolute": "2025-05-19",
  "categories": [
    {
      "name": "Engineering"
    },
    {
      "name": "AI"
    }
  ],
  "workflow_json": "{\"id\":\"uIREtTV8TRuF3lru\",\"meta\":{\"instanceId\":\"6bcff5ef8a06e8086902526a05c2a4c7bf5da8101f89e582301ed78094606f40\"},\"name\":\"Convert Markdown Content to Contentful Rich Text with AI Formatting.\",\"tags\":[{\"id\":\"NEDxtCyOlsLSVNBI\",\"name\":\"Formatter\",\"createdAt\":\"2025-05-17T10:41:27.012Z\",\"updatedAt\":\"2025-05-17T10:41:27.012Z\"},{\"id\":\"B6FHhLBUZRavCehy\",\"name\":\"Content Creation\",\"createdAt\":\"2025-05-17T10:41:40.276Z\",\"updatedAt\":\"2025-05-17T10:41:40.276Z\"}],\"nodes\":[{\"id\":\"f50b2f81-d9b4-4206-a18c-a02573afe8e7\",\"name\":\"Create newly formatted Contentful Entry\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1680,240],\"parameters\":{\"url\":\"=https://api.contentful.com/spaces/{INSERT_YOUR_SPACE}/environments/master/entries\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{ $json }}\",\"sendBody\":true,\"jsonHeaders\":\"{\\n  \\\"Authorization\\\": \\\"Bearer {INSERT TOKEN HERE}\\\",\\n  \\\"Content-Type\\\": \\\"application/vnd.contentful.management.v1+json\\\",\\n  \\\"X-Contentful-Version\\\": \\\"2\\\",  \\n  \\\"X-Contentful-Content-Type\\\": \\\"knowledgeBaseArticle\\\"\\n}\",\"sendHeaders\":true,\"specifyBody\":\"json\",\"specifyHeaders\":\"json\"},\"typeVersion\":4.2},{\"id\":\"d2d8efbc-3914-4c9b-98fe-566c1843f58d\",\"name\":\"When Executed by Another Workflow\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[-380,20],\"parameters\":{\"inputSource\":\"jsonExample\",\"jsonExample\":\"{\\n  \\\"title\\\": \\\"...\\\",\\n  \\\"slug\\\": \\\"...\\\",\\n  \\\"category\\\": {\\n    \\\"id\\\": \\\"...\\\"\\n  },\\n  \\\"description\\\": \\\"...\\\",\\n  \\\"keywords\\\": [\\\"keyword1\\\", \\\"keyword2\\\"],\\n  \\\"content\\\": \\\"...\\\",\\n  \\\"metaTitle\\\": \\\"...\\\",\\n  \\\"metaDescription\\\": \\\"...\\\",\\n  \\\"readingTime\\\": \\\"...\\\",\\n  \\\"difficulty\\\": \\\"...\\\"\\n}\"},\"typeVersion\":1.1},{\"id\":\"57960c96-94ce-43d1-83b8-d6417b79373a\",\"name\":\"Merge1\",\"type\":\"n8n-nodes-base.merge\",\"position\":[1020,240],\"parameters\":{},\"typeVersion\":3},{\"id\":\"f304bcec-2150-4767-95a9-38c1e98e2c52\",\"name\":\"Format1\",\"type\":\"n8n-nodes-base.code\",\"position\":[1360,240],\"parameters\":{\"jsCode\":\"// Get all items passed into this node as an array\\nconst items = $input.all();\\n\\n\\n// If you always have at least two items:\\nconst firstItem = items[0].json;\\nconst secondItem = items[1].json;\\n\\n// Overwrite the first item’s “content” with the second item’s “content”\\nfirstItem.content = secondItem.content;\\n\\nreturn [\\n  {\\n    json: {\\n      fields: {\\n        title: { \\\"en-US\\\": firstItem.title },\\n        slug: { \\\"en-US\\\": firstItem.slug },\\n        category: {\\n          \\\"en-US\\\": {\\n            sys: {\\n              type: \\\"Link\\\",\\n              linkType: \\\"Entry\\\",\\n              id: firstItem.category.id\\n            }\\n          }\\n        },\\n        description: { \\\"en-US\\\": firstItem.description },\\n        keywords: { \\\"en-US\\\": firstItem.keywords },\\n        content: {\\n          \\\"en-US\\\": {\\n            nodeType: \\\"document\\\",\\n            data: {},\\n            content: firstItem.content\\n          }\\n        },\\n        metaTitle: { \\\"en-US\\\": firstItem.metaTitle },\\n        metaDescription: { \\\"en-US\\\": firstItem.metaDescription },\\n        readingTime: { \\\"en-US\\\": firstItem.readingTime },\\n        difficulty: { \\\"en-US\\\": firstItem.difficulty }\\n      }\\n    }\\n  }\\n];\"},\"typeVersion\":2},{\"id\":\"85edaba2-c42b-4ca8-af84-080255dd93d3\",\"name\":\"Markdown to Contentful format\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[340,380],\"parameters\":{\"text\":\"=Here is the markdown content to convert:\\n\\n{{ $json.contentChunk }}\",\"options\":{\"systemMessage\":\"=You are a npm package which takes markdown and converts it to valid Contentful Rich Text\\n\\nHere are some examples of input to output:\\n\\nAdditional Rules to Avoid Validation Errors:\\n\\nEnsure every single node, especially heading and paragraph types, includes the \\\"data\\\": {} property explicitly. Do NOT omit \\\"data\\\" even if it is empty.\\n\\nValidate that each text, inline, or block element consistently adheres to this structure:\\n\\n{\\n  \\\"nodeType\\\": \\\"<type>\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"<childType>\\\",\\n      \\\"value\\\": \\\"<textValue>\\\",\\n      \\\"marks\\\": [],\\n      \\\"data\\\": {}\\n    }\\n  ]\\n}\\nFor elements like text nodes, always explicitly include \\\"data\\\": {} alongside \\\"marks\\\": [] even if they are empty arrays or objects.\\n\\nDo not output nodes without the complete structure specified above, as this can cause validation failures in Contentful.\\n\\nConfirm explicitly that \\\"content\\\": [] is included, even if empty, for nodes that require it (e.g., embedded-asset-block, hr, etc.).\\n\\nNever output incomplete nodes missing \\\"data\\\" or \\\"content\\\".\\n\\nExample of Correct Minimal Node Structure:\\n\\n{\\n  \\\"nodeType\\\": \\\"paragraph\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"text\\\",\\n      \\\"value\\\": \\\"Your text here.\\\",\\n      \\\"marks\\\": [],\\n      \\\"data\\\": {}\\n    }\\n  ]\\n}\\n\\nAlways strictly follow this guidance to ensure successful content publishing and avoid repeated validation errors.\\n\\n1. Paragraphs\\n\\nMarkdown:\\n\\nThis is a paragraph of text.\\n\\nContentful Rich Text JSON:\\n\\n{\\n  \\\"nodeType\\\": \\\"document\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"paragraph\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"text\\\",\\n          \\\"value\\\": \\\"This is a paragraph of text.\\\",\\n          \\\"marks\\\": [],\\n          \\\"data\\\": {}\\n        }\\n      ]\\n    }\\n  ]\\n}\\n2. Headings\\n\\nMarkdown:\\n\\n# Heading Level 1\\n## Heading Level 2\\n### Heading Level 3\\n\\nContentful Rich Text JSON:\\n\\n{\\n  \\\"nodeType\\\": \\\"document\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"heading-1\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"text\\\",\\n          \\\"value\\\": \\\"Heading Level 1\\\",\\n          \\\"marks\\\": [],\\n          \\\"data\\\": {}\\n        }\\n      ]\\n    },\\n    {\\n      \\\"nodeType\\\": \\\"heading-2\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"text\\\",\\n          \\\"value\\\": \\\"Heading Level 2\\\",\\n          \\\"marks\\\": [],\\n          \\\"data\\\": {}\\n        }\\n      ]\\n    },\\n    {\\n      \\\"nodeType\\\": \\\"heading-3\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"text\\\",\\n          \\\"value\\\": \\\"Heading Level 3\\\",\\n          \\\"marks\\\": [],\\n          \\\"data\\\": {}\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n3. Bold and Italic Text\\n\\nMarkdown:\\n\\n**Bold Text**\\n*Italic Text*\\n\\nContentful Rich Text JSON:\\n\\n{\\n  \\\"nodeType\\\": \\\"document\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"paragraph\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"text\\\",\\n          \\\"value\\\": \\\"Bold Text\\\",\\n          \\\"marks\\\": [\\n            {\\n              \\\"type\\\": \\\"bold\\\"\\n            }\\n          ],\\n          \\\"data\\\": {}\\n        }\\n      ]\\n    },\\n    {\\n      \\\"nodeType\\\": \\\"paragraph\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"text\\\",\\n          \\\"value\\\": \\\"Italic Text\\\",\\n          \\\"marks\\\": [\\n            {\\n              \\\"type\\\": \\\"italic\\\"\\n            }\\n          ],\\n          \\\"data\\\": {}\\n        }\\n      ]\\n    }\\n  ]\\n}\\n4. Lists\\n\\nMarkdown:\\n\\n- Unordered Item 1\\n- Unordered Item 2\\n\\n1. Ordered Item 1\\n2. Ordered Item 2\\n\\nContentful Rich Text JSON:\\n\\n{\\n  \\\"nodeType\\\": \\\"document\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"unordered-list\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"list-item\\\",\\n          \\\"data\\\": {},\\n          \\\"content\\\": [\\n            {\\n              \\\"nodeType\\\": \\\"paragraph\\\",\\n              \\\"data\\\": {},\\n              \\\"content\\\": [\\n                {\\n                  \\\"nodeType\\\": \\\"text\\\",\\n                  \\\"value\\\": \\\"Unordered Item 1\\\",\\n                  \\\"marks\\\": [],\\n                  \\\"data\\\": {}\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"nodeType\\\": \\\"list-item\\\",\\n          \\\"data\\\": {},\\n          \\\"content\\\": [\\n            {\\n              \\\"nodeType\\\": \\\"paragraph\\\",\\n              \\\"data\\\": {},\\n              \\\"content\\\": [\\n                {\\n                  \\\"nodeType\\\": \\\"text\\\",\\n                  \\\"value\\\": \\\"Unordered Item 2\\\",\\n                  \\\"marks\\\": [],\\n                  \\\"data\\\": {}\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    },\\n    {\\n      \\\"nodeType\\\": \\\"ordered-list\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"list-item\\\",\\n          \\\"data\\\": {},\\n          \\\"content\\\": [\\n            {\\n              \\\"nodeType\\\": \\\"paragraph\\\",\\n              \\\"data\\\": {},\\n              \\\"content\\\": [\\n                {\\n                  \\\"nodeType\\\": \\\"text\\\",\\n                  \\\"value\\\": \\\"Ordered Item 1\\\",\\n                  \\\"marks\\\": [],\\n                  \\\"data\\\": {}\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"nodeType\\\": \\\"list-item\\\",\\n          \\\"data\\\": {},\\n          \\\"content\\\": [\\n            {\\n              \\\"nodeType\\\": \\\"paragraph\\\",\\n              \\\"data\\\": {},\\n              \\\"content\\\": [\\n                {\\n                  \\\"nodeType\\\": \\\"text\\\",\\n                  \\\"value\\\": \\\"Ordered Item 2\\\",\\n                  \\\"marks\\\": [],\\n                  \\\"data\\\": {}\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n5. Links\\n\\nMarkdown:\\n\\n[Contentful](https://www.contentful.com)\\n\\nContentful Rich Text JSON:\\n\\n{\\n  \\\"nodeType\\\": \\\"document\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"paragraph\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"hyperlink\\\",\\n          \\\"data\\\": {\\n            \\\"uri\\\": \\\"https://www.contentful.com\\\"\\n          },\\n          \\\"content\\\": [\\n            {\\n              \\\"nodeType\\\": \\\"text\\\",\\n              \\\"value\\\": \\\"Contentful\\\",\\n              \\\"marks\\\": [],\\n              \\\"data\\\": {}\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n6. Images\\n\\nMarkdown:\\n\\n![Alt text](https://www.example.com/image.jpg)\\n\\nContentful Rich Text JSON:\\n\\n{\\n  \\\"nodeType\\\": \\\"document\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"embedded-asset-block\\\",\\n      \\\"data\\\": {\\n        \\\"target\\\": {\\n          \\\"sys\\\": {\\n            \\\"id\\\": \\\"asset-id\\\",\\n            \\\"type\\\": \\\"Link\\\",\\n            \\\"linkType\\\": \\\"Asset\\\"\\n          }\\n        }\\n      },\\n      \\\"content\\\": []\\n    }\\n  ]\\n}\\n\\nRules:\\n- The output must be valid Rich Text based on the specifications\\n- Do not make up any new types, only use the information that is available\\n- Do not output anything else besides the Contetnful RIch Text JSON in the format specified above\\n- Do not include ```json before the output. The output needs to be parseable JSON\\n- You must include a node to account for every single work in the input. DO NOT exclude any data from the input\\n\\nHere are all the possible types:\\n\\nimport { BLOCKS } from './blocks';\\nimport { INLINES } from './inlines';\\nimport { Block, Inline, ListItemBlock, Text } from './types';\\n\\n// eslint-disable-next-line @typescript-eslint/ban-types\\ntype EmptyNodeData = {};\\n// BLOCKS\\n\\n// Heading\\nexport interface Heading1 extends Block {\\n  nodeType: BLOCKS.HEADING_1;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface Heading2 extends Block {\\n  nodeType: BLOCKS.HEADING_2;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface Heading3 extends Block {\\n  nodeType: BLOCKS.HEADING_3;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface Heading4 extends Block {\\n  nodeType: BLOCKS.HEADING_4;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface Heading5 extends Block {\\n  nodeType: BLOCKS.HEADING_5;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface Heading6 extends Block {\\n  nodeType: BLOCKS.HEADING_6;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\n// Paragraph\\nexport interface Paragraph extends Block {\\n  nodeType: BLOCKS.PARAGRAPH;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\n// Quote\\nexport interface Quote extends Block {\\n  nodeType: BLOCKS.QUOTE;\\n  data: EmptyNodeData;\\n  content: Paragraph[];\\n}\\n// Horizontal rule\\nexport interface Hr extends Block {\\n  nodeType: BLOCKS.HR;\\n  /**\\n   *\\n   * @maxItems 0\\n   */\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\n// OL\\nexport interface OrderedList extends Block {\\n  nodeType: BLOCKS.OL_LIST;\\n  data: EmptyNodeData;\\n  content: ListItem[];\\n}\\n// UL\\nexport interface UnorderedList extends Block {\\n  nodeType: BLOCKS.UL_LIST;\\n  data: EmptyNodeData;\\n  content: ListItem[];\\n}\\n\\nexport interface ListItem extends Block {\\n  nodeType: BLOCKS.LIST_ITEM;\\n  data: EmptyNodeData;\\n  content: ListItemBlock[];\\n}\\n\\n// taken from graphql schema-generator/contentful-types/link.ts\\nexport interface Link<T extends string = string> {\\n  sys: {\\n    type: 'Link';\\n    linkType: T;\\n    id: string;\\n  };\\n}\\n\\nexport interface ResourceLink {\\n  sys: {\\n    type: 'ResourceLink';\\n    linkType: 'Contentful:Entry';\\n    urn: string;\\n  };\\n}\\n\\nexport interface EntryLinkBlock extends Block {\\n  nodeType: BLOCKS.EMBEDDED_ENTRY;\\n  data: {\\n    target: Link<'Entry'>;\\n  };\\n  /**\\n   *\\n   * @maxItems 0\\n   */\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface AssetLinkBlock extends Block {\\n  nodeType: BLOCKS.EMBEDDED_ASSET;\\n  data: {\\n    target: Link<'Asset'>;\\n  };\\n  /**\\n   *\\n   * @maxItems 0\\n   */\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface ResourceLinkBlock extends Block {\\n  nodeType: BLOCKS.EMBEDDED_RESOURCE;\\n  data: {\\n    target: ResourceLink;\\n  };\\n  /**\\n   *\\n   * @maxItems 0\\n   */\\n  content: Array<Inline | Text>;\\n}\\n\\n// INLINE\\n\\nexport interface EntryLinkInline extends Inline {\\n  nodeType: INLINES.EMBEDDED_ENTRY;\\n  data: {\\n    target: Link<'Entry'>;\\n  };\\n  /**\\n   *\\n   * @maxItems 0\\n   */\\n  content: Text[];\\n}\\n\\nexport interface ResourceLinkInline extends Inline {\\n  nodeType: INLINES.EMBEDDED_RESOURCE;\\n  data: {\\n    target: ResourceLink;\\n  };\\n  /**\\n   *\\n   * @maxItems 0\\n   */\\n  content: Text[];\\n}\\n\\nexport interface Hyperlink extends Inline {\\n  nodeType: INLINES.HYPERLINK;\\n  data: {\\n    uri: string;\\n  };\\n  content: Text[];\\n}\\n\\nexport interface AssetHyperlink extends Inline {\\n  nodeType: INLINES.ASSET_HYPERLINK;\\n  data: {\\n    target: Link<'Asset'>;\\n  };\\n  content: Text[];\\n}\\n\\nexport interface EntryHyperlink extends Inline {\\n  nodeType: INLINES.ENTRY_HYPERLINK;\\n  data: {\\n    target: Link<'Entry'>;\\n  };\\n  content: Text[];\\n}\\n\\nexport interface ResourceHyperlink extends Inline {\\n  nodeType: INLINES.RESOURCE_HYPERLINK;\\n  data: {\\n    target: ResourceLink;\\n  };\\n  content: Text[];\\n}\\n\\nexport interface TableCell extends Block {\\n  nodeType: BLOCKS.TABLE_HEADER_CELL | BLOCKS.TABLE_CELL;\\n  data: {\\n    colspan?: number;\\n    rowspan?: number;\\n  };\\n\\n  /**\\n   * @minItems 1\\n   */\\n  content: Paragraph[];\\n}\\n\\nexport interface TableHeaderCell extends TableCell {\\n  nodeType: BLOCKS.TABLE_HEADER_CELL;\\n}\\n\\n// An abstract table row can have both table cell types\\n\\nexport interface TableRow extends Block {\\n  nodeType: BLOCKS.TABLE_ROW;\\n  data: EmptyNodeData;\\n\\n  /**\\n   * @minItems 1\\n   */\\n  content: TableCell[];\\n}\\n\\nexport interface Table extends Block {\\n  nodeType: BLOCKS.TABLE;\\n  data: EmptyNodeData;\\n\\n  /**\\n   * @minItems 1\\n   */\\n  content: TableRow[];\\n}\"},\"promptType\":\"define\"},\"typeVersion\":1.8},{\"id\":\"3b409954-1506-46da-8ea9-ed2c938b84fc\",\"name\":\"Split by Headings\",\"type\":\"n8n-nodes-base.code\",\"position\":[0,220],\"parameters\":{\"jsCode\":\"// Split the markdown into sections using ## as the logical chunk point\\nconst splitByHeading = (markdown, headingLevel = 3) => {\\n  const headingRegex = new RegExp(`(?=^${'#'.repeat(headingLevel)}\\\\\\\\s)`, 'gm');\\n  return markdown.split(headingRegex).filter(chunk => chunk.trim());\\n};\\n\\n// Get the first input item's content\\nconst input = items[0].json;\\nconst chunks = splitByHeading(input.content);\\n\\nreturn chunks.map((chunk, index) => {\\n  return {\\n    json: {\\n      index,\\n      slug: input.slug?.trim(),\\n      title: input.title?.trim(),\\n      contentChunk: chunk.trim(),\\n    }\\n  };\\n});\\n\"},\"typeVersion\":2},{\"id\":\"d9bd0b06-730b-4e63-a3f4-73678b09aaa7\",\"name\":\"Combine Rich Text Objects\",\"type\":\"n8n-nodes-base.code\",\"position\":[720,380],\"parameters\":{\"jsCode\":\"const combinedContent = [];\\n\\nfor (const item of items) {\\n  let raw = item.json;\\n\\n  // Handle if AI agent returned a stringified JSON inside a property like `output`\\n  if (typeof raw === 'object' && typeof raw.output === 'string') {\\n    try {\\n      raw = JSON.parse(raw.output);\\n    } catch (e) {\\n      throw new Error(`Failed to parse JSON from agent output:\\\\n${raw.output}`);\\n    }\\n  }\\n\\n  // Handle if AI agent returned plain stringified JSON (not wrapped in a key)\\n  if (typeof raw === 'string') {\\n    try {\\n      raw = JSON.parse(raw);\\n    } catch (e) {\\n      throw new Error(`Failed to parse raw JSON string:\\\\n${raw}`);\\n    }\\n  }\\n\\n  // Add content from parsed result\\n  if (raw?.content?.length) {\\n    combinedContent.push(...raw.content);\\n  }\\n}\\n\\nreturn [\\n  {\\n    json: {\\n      nodeType: 'document',\\n      data: {},\\n      content: combinedContent\\n    }\\n  }\\n];\\n\"},\"typeVersion\":2},{\"id\":\"08f5c7a8-3200-47bf-a4c9-5333956ddf49\",\"name\":\"OpenAI Chat Model2\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[300,620],\"parameters\":{\"model\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gpt-4.1\",\"cachedResultName\":\"gpt-4.1\"},\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"KLN8ZfDzv8mW6pyu\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.2},{\"id\":\"e1bbe1ba-3be3-44c9-af34-e27c56246545\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[200,80],\"parameters\":{\"width\":880,\"height\":760,\"content\":\"# Converts to Proprietary Format for Contentful\\n\\n- Uses an example output format to generate content to specific rich text formatting for contentful upload.\\n- References the contentful documentation for the bot to pull from.\"},\"typeVersion\":1},{\"id\":\"36266f04-12cf-4a19-8d60-45974e69ab6b\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1180,-340],\"parameters\":{\"color\":3,\"width\":980,\"height\":860,\"content\":\"# Publishes to Contentful API\\n\\n## Requirements\\n\\n- Add your space ID to the endpoint\\n- Add your Management Token to the flow\\n\\n\\n| Field Name | Type | Description |\\n|------------|------|-------------|\\n| Title | Short text | The title of the article. Acts as the entry title. |\\n| Slug | Short text | URL-friendly version of the title, used in routing. |\\n| Category | Reference | Linked content type representing the article's category. |\\n| Description | Long text | A short summary or overview of the article. |\\n| Keywords | Short text (list) | SEO keywords for the article. |\\n| Meta Title | Short text | SEO-specific title shown in browser tab and search engines. |\\n| Meta Description | Long text | SEO-specific description used in search engine previews. |\\n| Difficulty Level | Short text | Indicates how advanced the content is (e.g., Beginner, Intermediate, Advanced). |\\n| Related Articles | References (many) | Links to other related article entries for cross-referencing. |\\n| Content | Rich text | Main body of the article. Supports formatting, embeds, etc. |\\n| readingTime | Short text | Estimated reading time (e.g., \\\"5 min read\\\"). |\"},\"typeVersion\":1},{\"id\":\"f0ecec88-c4a7-472f-b71b-d78f57635472\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-800,-520],\"parameters\":{\"color\":5,\"width\":900,\"height\":620,\"content\":\"# Varritech Free Workflows for n8n\\n\\nAccess our collection of **free, ready-to-use n8n workflows** designed to streamline your data operations and automation needs.\\n\\n## What You'll Get:\\n- Pre-built data integration workflows\\n- Time-saving automation templates\\n- Step-by-step implementation guides\\n- Regular updates with new workflows\\n\\n## How to Use:\\n1. Download our free workflows\\n2. Import into your n8n instance\\n3. Configure with your credentials\\n4. Start automating immediately\\n\\n**Note:** For additional workflows, tutorials, and technical support, visit our website at [varritech.com](https://varritech.com)\\n\\n*Unlock the full potential of n8n with Varritech's workflow solutions!*\"},\"typeVersion\":1},{\"id\":\"e4bf6af7-cd5a-4f54-9512-5e91d86f6bf6\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1180,620],\"parameters\":{\"color\":4,\"width\":980,\"height\":540,\"content\":\"# Need Additional Help With Contentful?\\n\\nThank you for using our free n8n Upload to Contentful workflow! If you need assistance with:\\n\\n- Custom Contentful implementations\\n- Advanced content modeling strategies\\n- API integration optimization\\n- Content migration services\\n- Extending your automation workflows\\n\\n**Varritech is here to help!** Our team specializes in CMS implementations and automation solutions to streamline your content operations.\\n\\nVisit [varritech.com](https://varritech.com) for expert support with your Contentful and automation needs.\"},\"typeVersion\":1}],\"active\":false,\"pinData\":{},\"settings\":{\"callerPolicy\":\"workflowsFromSameOwner\",\"executionOrder\":\"v1\",\"executionTimeout\":600},\"versionId\":\"c049c9ae-5037-4f0e-b499-65b5315529b3\",\"connections\":{\"Merge1\":{\"main\":[[{\"node\":\"Format1\",\"type\":\"main\",\"index\":0}]]},\"Format1\":{\"main\":[[{\"node\":\"Create newly formatted Contentful Entry\",\"type\":\"main\",\"index\":0}]]},\"Split by Headings\":{\"main\":[[{\"node\":\"Markdown to Contentful format\",\"type\":\"main\",\"index\":0}]]},\"OpenAI Chat Model2\":{\"ai_languageModel\":[[{\"node\":\"Markdown to Contentful format\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Combine Rich Text Objects\":{\"main\":[[{\"node\":\"Merge1\",\"type\":\"main\",\"index\":1}]]},\"Markdown to Contentful format\":{\"main\":[[{\"node\":\"Combine Rich Text Objects\",\"type\":\"main\",\"index\":0}]]},\"When Executed by Another Workflow\":{\"main\":[[{\"node\":\"Split by Headings\",\"type\":\"main\",\"index\":0},{\"node\":\"Merge1\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "# Workflow: Publish to Contentful with Rich Text Formatting\n\n## ⚡ About the Creators\n\nThis workflow was created by **Varritech** Technologies, an innovative agency that leverages AI to engineer, design, and deliver software development projects 500% faster than traditional agencies. Based in New York City, we specialize in custom software development, web applications, and digital transformation solutions. If you need assistance implementing this workflow or have questions about content management solutions, please reach out to our team.\n\n## 🏗️ Architecture Overview\n\nThis workflow takes a JSON article payload, splits its markdown content into logical chunks, converts each chunk into Contentful Rich Text JSON via an AI agent, merges the resulting rich text nodes back into a single document, formats the entire entry according to Contentful's field schema, and finally publishes it to Contentful.\n\n  1. **Trigger** → Executes when called by another workflow\n  2. **Split by Headings** → Breaks markdown into `##`-delimited chunks\n  3. **Markdown → Rich Text** → AI agent converts each chunk to Contentful Rich Text JSON\n  4. **Combine Rich Text Objects** → Aggregates all chunk outputs into one document\n  5. **Format Entry** → Wraps metadata and rich-text content into Contentful schema\n  6. **Publish Entry** → HTTP POST to Contentful API\n\n\n\n* * *\n\n## 📦 Node-by-Node Breakdown\n    \n    \n    flowchart LR\n      A[When Executed by Another Workflow] --&gt; B[Split by Headings]\n      B --&gt; C[Markdown to Contentful format]\n      C --&gt; D[Combine Rich Text Objects]\n      D --&gt; E[Merge1]\n      E --&gt; F[Format1]\n      F --&gt; G[Create newly formatted Contentful Entry]\n    \n\n### 1\\. When Executed by Another Workflow\n\n**Type:** Execute Workflow Trigger\n\n**Input Example:**\n\n  * title, slug, [category.id](http://category.id), description, keywords, content, metaTitle, metaDescription, readingTime, difficulty\n\n\n\n**Purpose:** Receives the JSON payload from the upstream workflow.\n\n### 2\\. Split by Headings\n\n**Type:** Code\n\n**Logic:**\n\n  * Splits input.content into an array of markdown chunks at each second-level heading (##).\n  * Emits one item per chunk with index, slug, title, and contentChunk.\n\n\n\n### 3\\. Markdown to Contentful format\n\n**Type:** LangChain Agent (+ OpenAI Chat model)\n\n**System Prompt:**\n\n  * Defines rules for generating valid Contentful Rich Text JSON (must include nodeType, data:{}, content:[], etc.).\n  * Provides examples for paragraphs, headings, lists, links, and images.\n\n\n\n**User Prompt:**\n\nHere is the markdown content to convert:  \n`{{ $json.contentChunk }}`\n\n**Purpose:** Converts each markdown chunk into an array of rich-text nodes.\n\n### 4\\. Combine Rich Text Objects\n\n**Type:** Code\n\n**Logic:**\n\n  * Parses and merges all content arrays returned by the AI agent into one combined content array under a document root.\n\n\n\n### 5\\. Merge1\n\n**Type:** Merge\n\n**Purpose:** Joins the original item (with metadata) and the combined rich-text document into a single data stream.\n\n### 6\\. Format1\n\n**Type:** Code\n\n**Logic:**\n\n  * Maps workflow data into the Contentful entry schema by setting each field (title, slug, category link, description, keywords, rich-text content, metaTitle, metaDescription, readingTime, difficulty) under the appropriate locale and structure required by Contentful.\n\n\n\n### 7\\. Create newly formatted Contentful Entry\n\n**Type:** HTTP Request\n\n**Method:** POST\n\n**URL:**  \n<https://api.contentful.com/spaces>\n\n**Headers:**\n\n  * Authorization: Bearer token for Contentful Management API\n  * Content-Type: application/vnd.contentful.management.v1+json\n  * X-Contentful-Version: entry version number\n  * X-Contentful-Content-Type: content type ID\n\n\n\n**Body:** The formatted fields object produced by the previous node\n\n**Purpose:** Publishes the new entry with rich-text content to Contentful.\n\n## 🔍 Design Rationale & Best Practices\n\n### Chunked Conversion\n\nSplitting by headings prevents AI context limits and keeps conversions modular.\n\n### Strict Rich Text Schema\n\nEnforcing nodeType, data, and content structure avoids validation errors on Contentful.\n\n### Two-Phase Merge\n\nSeparating \"combine AI outputs\" and \"format entry\" keeps transformations clear and testable.\n\n### Idempotent Publish\n\nUses explicit versioning and content type headers to ensure correct entry creation.\n",
  "crawled_at": "2025-05-26T06:29:33.589479",
  "readme_zh": "# 工作流：发布富文本格式内容至Contentful\n\n## ⚡ 创作者介绍\n\n本工作流由**Varritech**科技公司开发，这是一家创新机构，利用人工智能技术将软件开发项目的工程、设计和交付速度提升至传统机构的500%。我们总部位于纽约市，专注于定制软件开发、网络应用程序和数字化转型解决方案。如需本工作流实施协助或内容管理解决方案咨询，请联系我们的团队。\n\n## 🏗️ 架构概览\n\n该工作流接收JSON格式的文章数据，将其Markdown内容按逻辑分块，通过AI代理将每个分块转换为Contentful富文本JSON格式，将生成的富文本节点重新合并为完整文档，按照Contentful字段模式格式化整个条目，最终发布至Contentful平台。\n\n  1. **触发器** → 由其他工作流调用时执行\n  2. **按标题分割** → 将Markdown按`##`分隔符分块\n  3. **Markdown转富文本** → AI代理将每个分块转为Contentful富文本JSON\n  4. **合并富文本对象** → 将所有分块输出聚合成单一文档\n  5. **格式化条目** → 将元数据和富文本内容封装为Contentful模式\n  6. **发布条目** → 通过HTTP POST请求发送至Contentful API",
  "title_zh": "使用AI格式化将Markdown内容转换为Contentful富文本",
  "publish_date_zh": "上次更新于7天前",
  "workflow_json_zh": "{\n  \"id\": \"uIREtTV8TRuF3lru\",\n  \"meta\": {\n    \"instanceId\": \"6bcff5ef8a06e8086902526a05c2a4c7bf5da8101f89e582301ed78094606f40\"\n  },\n  \"name\": \"Convert Markdown Content to Contentful Rich Text with AI Formatting.\",\n  \"tags\": [\n    {\n      \"id\": \"NEDxtCyOlsLSVNBI\",\n      \"name\": \"Formatter\",\n      \"createdAt\": \"2025-05-17T10:41:27.012Z\",\n      \"updatedAt\": \"2025-05-17T10:41:27.012Z\"\n    },\n    {\n      \"id\": \"B6FHhLBUZRavCehy\",\n      \"name\": \"Content Creation\",\n      \"createdAt\": \"2025-05-17T10:41:40.276Z\",\n      \"updatedAt\": \"2025-05-17T10:41:40.276Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"f50b2f81-d9b4-4206-a18c-a02573afe8e7\",\n      \"name\": \"Create newly formatted Contentful Entry\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1680,\n        240\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.contentful.com/spaces/{INSERT_YOUR_SPACE}/environments/master/entries\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={{ $json }}\",\n        \"sendBody\": true,\n        \"jsonHeaders\": \"{\\n  \\\"Authorization\\\": \\\"Bearer {INSERT TOKEN HERE}\\\",\\n  \\\"Content-Type\\\": \\\"application/vnd.contentful.management.v1+json\\\",\\n  \\\"X-Contentful-Version\\\": \\\"2\\\",  \\n  \\\"X-Contentful-Content-Type\\\": \\\"knowledgeBaseArticle\\\"\\n}\",\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"specifyHeaders\": \"json\"\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"d2d8efbc-3914-4c9b-98fe-566c1843f58d\",\n      \"name\": \"When Executed by Another Workflow\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        -380,\n        20\n      ],\n      \"parameters\": {\n        \"inputSource\": \"jsonExample\",\n        \"jsonExample\": \"{\\n  \\\"title\\\": \\\"...\\\",\\n  \\\"slug\\\": \\\"...\\\",\\n  \\\"category\\\": {\\n    \\\"id\\\": \\\"...\\\"\\n  },\\n  \\\"description\\\": \\\"...\\\",\\n  \\\"keywords\\\": [\\\"keyword1\\\", \\\"keyword2\\\"],\\n  \\\"content\\\": \\\"...\\\",\\n  \\\"metaTitle\\\": \\\"...\\\",\\n  \\\"metaDescription\\\": \\\"...\\\",\\n  \\\"readingTime\\\": \\\"...\\\",\\n  \\\"difficulty\\\": \\\"...\\\"\\n}\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"57960c96-94ce-43d1-83b8-d6417b79373a\",\n      \"name\": \"Merge1\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        1020,\n        240\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"f304bcec-2150-4767-95a9-38c1e98e2c52\",\n      \"name\": \"Format1\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1360,\n        240\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Get all items passed into this node as an array\\nconst items = $input.all();\\n\\n\\n// If you always have at least two items:\\nconst firstItem = items[0].json;\\nconst secondItem = items[1].json;\\n\\n// Overwrite the first item’s “content” with the second item’s “content”\\nfirstItem.content = secondItem.content;\\n\\nreturn [\\n  {\\n    json: {\\n      fields: {\\n        title: { \\\"en-US\\\": firstItem.title },\\n        slug: { \\\"en-US\\\": firstItem.slug },\\n        category: {\\n          \\\"en-US\\\": {\\n            sys: {\\n              type: \\\"Link\\\",\\n              linkType: \\\"Entry\\\",\\n              id: firstItem.category.id\\n            }\\n          }\\n        },\\n        description: { \\\"en-US\\\": firstItem.description },\\n        keywords: { \\\"en-US\\\": firstItem.keywords },\\n        content: {\\n          \\\"en-US\\\": {\\n            nodeType: \\\"document\\\",\\n            data: {},\\n            content: firstItem.content\\n          }\\n        },\\n        metaTitle: { \\\"en-US\\\": firstItem.metaTitle },\\n        metaDescription: { \\\"en-US\\\": firstItem.metaDescription },\\n        readingTime: { \\\"en-US\\\": firstItem.readingTime },\\n        difficulty: { \\\"en-US\\\": firstItem.difficulty }\\n      }\\n    }\\n  }\\n];\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"85edaba2-c42b-4ca8-af84-080255dd93d3\",\n      \"name\": \"Markdown to Contentful format\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        340,\n        380\n      ],\n      \"parameters\": {\n        \"text\": \"=Here is the markdown content to convert:\\n\\n{{ $json.contentChunk }}\",\n        \"options\": {\n          \"systemMessage\": \"=You are a npm package which takes markdown and converts it to valid Contentful Rich Text\\n\\nHere are some examples of input to output:\\n\\nAdditional Rules to Avoid Validation Errors:\\n\\nEnsure every single node, especially heading and paragraph types, includes the \\\"data\\\": {} property explicitly. Do NOT omit \\\"data\\\" even if it is empty.\\n\\nValidate that each text, inline, or block element consistently adheres to this structure:\\n\\n{\\n  \\\"nodeType\\\": \\\"<type>\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"<childType>\\\",\\n      \\\"value\\\": \\\"<textValue>\\\",\\n      \\\"marks\\\": [],\\n      \\\"data\\\": {}\\n    }\\n  ]\\n}\\nFor elements like text nodes, always explicitly include \\\"data\\\": {} alongside \\\"marks\\\": [] even if they are empty arrays or objects.\\n\\nDo not output nodes without the complete structure specified above, as this can cause validation failures in Contentful.\\n\\nConfirm explicitly that \\\"content\\\": [] is included, even if empty, for nodes that require it (e.g., embedded-asset-block, hr, etc.).\\n\\nNever output incomplete nodes missing \\\"data\\\" or \\\"content\\\".\\n\\nExample of Correct Minimal Node Structure:\\n\\n{\\n  \\\"nodeType\\\": \\\"paragraph\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"text\\\",\\n      \\\"value\\\": \\\"Your text here.\\\",\\n      \\\"marks\\\": [],\\n      \\\"data\\\": {}\\n    }\\n  ]\\n}\\n\\nAlways strictly follow this guidance to ensure successful content publishing and avoid repeated validation errors.\\n\\n1. Paragraphs\\n\\nMarkdown:\\n\\nThis is a paragraph of text.\\n\\nContentful Rich Text JSON:\\n\\n{\\n  \\\"nodeType\\\": \\\"document\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"paragraph\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"text\\\",\\n          \\\"value\\\": \\\"This is a paragraph of text.\\\",\\n          \\\"marks\\\": [],\\n          \\\"data\\\": {}\\n        }\\n      ]\\n    }\\n  ]\\n}\\n2. Headings\\n\\nMarkdown:\\n\\n# Heading Level 1\\n## Heading Level 2\\n### Heading Level 3\\n\\nContentful Rich Text JSON:\\n\\n{\\n  \\\"nodeType\\\": \\\"document\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"heading-1\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"text\\\",\\n          \\\"value\\\": \\\"Heading Level 1\\\",\\n          \\\"marks\\\": [],\\n          \\\"data\\\": {}\\n        }\\n      ]\\n    },\\n    {\\n      \\\"nodeType\\\": \\\"heading-2\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"text\\\",\\n          \\\"value\\\": \\\"Heading Level 2\\\",\\n          \\\"marks\\\": [],\\n          \\\"data\\\": {}\\n        }\\n      ]\\n    },\\n    {\\n      \\\"nodeType\\\": \\\"heading-3\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"text\\\",\\n          \\\"value\\\": \\\"Heading Level 3\\\",\\n          \\\"marks\\\": [],\\n          \\\"data\\\": {}\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\n3. Bold and Italic Text\\n\\nMarkdown:\\n\\n**Bold Text**\\n*Italic Text*\\n\\nContentful Rich Text JSON:\\n\\n{\\n  \\\"nodeType\\\": \\\"document\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"paragraph\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"text\\\",\\n          \\\"value\\\": \\\"Bold Text\\\",\\n          \\\"marks\\\": [\\n            {\\n              \\\"type\\\": \\\"bold\\\"\\n            }\\n          ],\\n          \\\"data\\\": {}\\n        }\\n      ]\\n    },\\n    {\\n      \\\"nodeType\\\": \\\"paragraph\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"text\\\",\\n          \\\"value\\\": \\\"Italic Text\\\",\\n          \\\"marks\\\": [\\n            {\\n              \\\"type\\\": \\\"italic\\\"\\n            }\\n          ],\\n          \\\"data\\\": {}\\n        }\\n      ]\\n    }\\n  ]\\n}\\n4. Lists\\n\\nMarkdown:\\n\\n- Unordered Item 1\\n- Unordered Item 2\\n\\n1. Ordered Item 1\\n2. Ordered Item 2\\n\\nContentful Rich Text JSON:\\n\\n{\\n  \\\"nodeType\\\": \\\"document\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"unordered-list\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"list-item\\\",\\n          \\\"data\\\": {},\\n          \\\"content\\\": [\\n            {\\n              \\\"nodeType\\\": \\\"paragraph\\\",\\n              \\\"data\\\": {},\\n              \\\"content\\\": [\\n                {\\n                  \\\"nodeType\\\": \\\"text\\\",\\n                  \\\"value\\\": \\\"Unordered Item 1\\\",\\n                  \\\"marks\\\": [],\\n                  \\\"data\\\": {}\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"nodeType\\\": \\\"list-item\\\",\\n          \\\"data\\\": {},\\n          \\\"content\\\": [\\n            {\\n              \\\"nodeType\\\": \\\"paragraph\\\",\\n              \\\"data\\\": {},\\n              \\\"content\\\": [\\n                {\\n                  \\\"nodeType\\\": \\\"text\\\",\\n                  \\\"value\\\": \\\"Unordered Item 2\\\",\\n                  \\\"marks\\\": [],\\n                  \\\"data\\\": {}\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    },\\n    {\\n      \\\"nodeType\\\": \\\"ordered-list\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"list-item\\\",\\n          \\\"data\\\": {},\\n          \\\"content\\\": [\\n            {\\n              \\\"nodeType\\\": \\\"paragraph\\\",\\n              \\\"data\\\": {},\\n              \\\"content\\\": [\\n                {\\n                  \\\"nodeType\\\": \\\"text\\\",\\n                  \\\"value\\\": \\\"Ordered Item 1\\\",\\n                  \\\"marks\\\": [],\\n                  \\\"data\\\": {}\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"nodeType\\\": \\\"list-item\\\",\\n          \\\"data\\\": {},\\n          \\\"content\\\": [\\n            {\\n              \\\"nodeType\\\": \\\"paragraph\\\",\\n              \\\"data\\\": {},\\n              \\\"content\\\": [\\n                {\\n                  \\\"nodeType\\\": \\\"text\\\",\\n                  \\\"value\\\": \\\"Ordered Item 2\\\",\\n                  \\\"marks\\\": [],\\n                  \\\"data\\\": {}\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n5. Links\\n\\nMarkdown:\\n\\n[Contentful](https://www.contentful.com)\\n\\nContentful Rich Text JSON:\\n\\n{\\n  \\\"nodeType\\\": \\\"document\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"paragraph\\\",\\n      \\\"data\\\": {},\\n      \\\"content\\\": [\\n        {\\n          \\\"nodeType\\\": \\\"hyperlink\\\",\\n          \\\"data\\\": {\\n            \\\"uri\\\": \\\"https://www.contentful.com\\\"\\n          },\\n          \\\"content\\\": [\\n            {\\n              \\\"nodeType\\\": \\\"text\\\",\\n              \\\"value\\\": \\\"Contentful\\\",\\n              \\\"marks\\\": [],\\n              \\\"data\\\": {}\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n6. Images\\n\\nMarkdown:\\n\\n![Alt text](https://www.example.com/image.jpg)\\n\\nContentful Rich Text JSON:\\n\\n{\\n  \\\"nodeType\\\": \\\"document\\\",\\n  \\\"data\\\": {},\\n  \\\"content\\\": [\\n    {\\n      \\\"nodeType\\\": \\\"embedded-asset-block\\\",\\n      \\\"data\\\": {\\n        \\\"target\\\": {\\n          \\\"sys\\\": {\\n            \\\"id\\\": \\\"asset-id\\\",\\n            \\\"type\\\": \\\"Link\\\",\\n            \\\"linkType\\\": \\\"Asset\\\"\\n          }\\n        }\\n      },\\n      \\\"content\\\": []\\n    }\\n  ]\\n}\\n\\nRules:\\n- The output must be valid Rich Text based on the specifications\\n- Do not make up any new types, only use the information that is available\\n- Do not output anything else besides the Contetnful RIch Text JSON in the format specified above\\n- Do not include ```json before the output. The output needs to be parseable JSON\\n- You must include a node to account for every single work in the input. DO NOT exclude any data from the input\\n\\nHere are all the possible types:\\n\\nimport { BLOCKS } from './blocks';\\nimport { INLINES } from './inlines';\\nimport { Block, Inline, ListItemBlock, Text } from './types';\\n\\n// eslint-disable-next-line @typescript-eslint/ban-types\\ntype EmptyNodeData = {};\\n// BLOCKS\\n\\n// Heading\\nexport interface Heading1 extends Block {\\n  nodeType: BLOCKS.HEADING_1;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface Heading2 extends Block {\\n  nodeType: BLOCKS.HEADING_2;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface Heading3 extends Block {\\n  nodeType: BLOCKS.HEADING_3;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface Heading4 extends Block {\\n  nodeType: BLOCKS.HEADING_4;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface Heading5 extends Block {\\n  nodeType: BLOCKS.HEADING_5;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface Heading6 extends Block {\\n  nodeType: BLOCKS.HEADING_6;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\n// Paragraph\\nexport interface Paragraph extends Block {\\n  nodeType: BLOCKS.PARAGRAPH;\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\n// Quote\\nexport interface Quote extends Block {\\n  nodeType: BLOCKS.QUOTE;\\n  data: EmptyNodeData;\\n  content: Paragraph[];\\n}\\n// Horizontal rule\\nexport interface Hr extends Block {\\n  nodeType: BLOCKS.HR;\\n  /**\\n   *\\n   * @maxItems 0\\n   */\\n  data: EmptyNodeData;\\n  content: Array<Inline | Text>;\\n}\\n\\n// OL\\nexport interface OrderedList extends Block {\\n  nodeType: BLOCKS.OL_LIST;\\n  data: EmptyNodeData;\\n  content: ListItem[];\\n}\\n// UL\\nexport interface UnorderedList extends Block {\\n  nodeType: BLOCKS.UL_LIST;\\n  data: EmptyNodeData;\\n  content: ListItem[];\\n}\\n\\nexport interface ListItem extends Block {\\n  nodeType: BLOCKS.LIST_ITEM;\\n  data: EmptyNodeData;\\n  content: ListItemBlock[];\\n}\\n\\n// taken from graphql schema-generator/contentful-types/link.ts\\nexport interface Link<T extends string = string> {\\n  sys: {\\n    type: 'Link';\\n    linkType: T;\\n    id: string;\\n  };\\n}\\n\\nexport interface ResourceLink {\\n  sys: {\\n    type: 'ResourceLink';\\n    linkType: 'Contentful:Entry';\\n    urn: string;\\n  };\\n}\\n\\nexport interface EntryLinkBlock extends Block {\\n  nodeType: BLOCKS.EMBEDDED_ENTRY;\\n  data: {\\n    target: Link<'Entry'>;\\n  };\\n  /**\\n   *\\n   * @maxItems 0\\n   */\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface AssetLinkBlock extends Block {\\n  nodeType: BLOCKS.EMBEDDED_ASSET;\\n  data: {\\n    target: Link<'Asset'>;\\n  };\\n  /**\\n   *\\n   * @maxItems 0\\n   */\\n  content: Array<Inline | Text>;\\n}\\n\\nexport interface ResourceLinkBlock extends Block {\\n  nodeType: BLOCKS.EMBEDDED_RESOURCE;\\n  data: {\\n    target: ResourceLink;\\n  };\\n  /**\\n   *\\n   * @maxItems 0\\n   */\\n  content: Array<Inline | Text>;\\n}\\n\\n// INLINE\\n\\nexport interface EntryLinkInline extends Inline {\\n  nodeType: INLINES.EMBEDDED_ENTRY;\\n  data: {\\n    target: Link<'Entry'>;\\n  };\\n  /**\\n   *\\n   * @maxItems 0\\n   */\\n  content: Text[];\\n}\\n\\nexport interface ResourceLinkInline extends Inline {\\n  nodeType: INLINES.EMBEDDED_RESOURCE;\\n  data: {\\n    target: ResourceLink;\\n  };\\n  /**\\n   *\\n   * @maxItems 0\\n   */\\n  content: Text[];\\n}\\n\\nexport interface Hyperlink extends Inline {\\n  nodeType: INLINES.HYPERLINK;\\n  data: {\\n    uri: string;\\n  };\\n  content: Text[];\\n}\\n\\nexport interface AssetHyperlink extends Inline {\\n  nodeType: INLINES.ASSET_HYPERLINK;\\n  data: {\\n    target: Link<'Asset'>;\\n  };\\n  content: Text[];\\n}\\n\\nexport interface EntryHyperlink extends Inline {\\n  nodeType: INLINES.ENTRY_HYPERLINK;\\n  data: {\\n    target: Link<'Entry'>;\\n  };\\n  content: Text[];\\n}\\n\\nexport interface ResourceHyperlink extends Inline {\\n  nodeType: INLINES.RESOURCE_HYPERLINK;\\n  data: {\\n    target: ResourceLink;\\n  };\\n  content: Text[];\\n}\\n\\nexport interface TableCell extends Block {\\n  nodeType: BLOCKS.TABLE_HEADER_CELL | BLOCKS.TABLE_CELL;\\n  data: {\\n    colspan?: number;\\n    rowspan?: number;\\n  };\\n\\n  /**\\n   * @minItems 1\\n   */\\n  content: Paragraph[];\\n}\\n\\nexport interface TableHeaderCell extends TableCell {\\n  nodeType: BLOCKS.TABLE_HEADER_CELL;\\n}\\n\\n// An abstract table row can have both table cell types\\n\\nexport interface TableRow extends Block {\\n  nodeType: BLOCKS.TABLE_ROW;\\n  data: EmptyNodeData;\\n\\n  /**\\n   * @minItems 1\\n   */\\n  content: TableCell[];\\n}\\n\\nexport interface Table extends Block {\\n  nodeType: BLOCKS.TABLE;\\n  data: EmptyNodeData;\\n\\n  /**\\n   * @minItems 1\\n   */\\n  content: TableRow[];\\n}\"\n        },\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"3b409954-1506-46da-8ea9-ed2c938b84fc\",\n      \"name\": \"Split by Headings\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        0,\n        220\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Split the markdown into sections using ## as the logical chunk point\\nconst splitByHeading = (markdown, headingLevel = 3) => {\\n  const headingRegex = new RegExp(`(?=^${'#'.repeat(headingLevel)}\\\\\\\\s)`, 'gm');\\n  return markdown.split(headingRegex).filter(chunk => chunk.trim());\\n};\\n\\n// Get the first input item's content\\nconst input = items[0].json;\\nconst chunks = splitByHeading(input.content);\\n\\nreturn chunks.map((chunk, index) => {\\n  return {\\n    json: {\\n      index,\\n      slug: input.slug?.trim(),\\n      title: input.title?.trim(),\\n      contentChunk: chunk.trim(),\\n    }\\n  };\\n});\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"d9bd0b06-730b-4e63-a3f4-73678b09aaa7\",\n      \"name\": \"Combine Rich Text Objects\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        720,\n        380\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const combinedContent = [];\\n\\nfor (const item of items) {\\n  let raw = item.json;\\n\\n  // Handle if AI agent returned a stringified JSON inside a property like `output`\\n  if (typeof raw === 'object' && typeof raw.output === 'string') {\\n    try {\\n      raw = JSON.parse(raw.output);\\n    } catch (e) {\\n      throw new Error(`Failed to parse JSON from agent output:\\\\n${raw.output}`);\\n    }\\n  }\\n\\n  // Handle if AI agent returned plain stringified JSON (not wrapped in a key)\\n  if (typeof raw === 'string') {\\n    try {\\n      raw = JSON.parse(raw);\\n    } catch (e) {\\n      throw new Error(`Failed to parse raw JSON string:\\\\n${raw}`);\\n    }\\n  }\\n\\n  // Add content from parsed result\\n  if (raw?.content?.length) {\\n    combinedContent.push(...raw.content);\\n  }\\n}\\n\\nreturn [\\n  {\\n    json: {\\n      nodeType: 'document',\\n      data: {},\\n      content: combinedContent\\n    }\\n  }\\n];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"08f5c7a8-3200-47bf-a4c9-5333956ddf49\",\n      \"name\": \"OpenAI Chat Model2\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        300,\n        620\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4.1\",\n          \"cachedResultName\": \"gpt-4.1\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"KLN8ZfDzv8mW6pyu\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"e1bbe1ba-3be3-44c9-af34-e27c56246545\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        200,\n        80\n      ],\n      \"parameters\": {\n        \"width\": 880,\n        \"height\": 760,\n        \"content\": \"# 转换为Contentful专有格式\\n\\n- 使用示例输出格式生成内容，适配Contentful上传所需的特定富文本格式\\n- 引用Contentful文档供机器人提取参考\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"36266f04-12cf-4a19-8d60-45974e69ab6b\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1180,\n        -340\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 980,\n        \"height\": 860,\n        \"content\": \"# 发布至Contentful API\\n\\n## 需求说明\\n\\n- 在端点地址中添加您的空间ID\\n- 在流程中添加您的管理令牌\\n\\n\\n| 字段名称 | 类型 | 描述 |\\n|------------|------|-------------|\\n| 标题 | 短文本 | 文章标题，同时作为条目名称 |\\n| 网址别名 | 短文本 | 用于路由的URL友好型标题格式 |\\n| 分类 | 引用 | 关联内容类型，表示文章所属分类 |\\n| 描述 | 长文本 | 文章摘要或内容概览 |\\n| 关键词 | 短文本(列表) | 文章SEO关键词 |\\n| 元标题 | 短文本 | 浏览器标签页和搜索引擎显示的SEO专用标题 |\\n| 元描述 | 长文本 | 搜索引擎预览使用的SEO专用描述 |\\n| 难度等级 | 短文本 | 内容难度标识（如：初级/中级/高级） |\\n| 相关文章 | 多引用 | 可交叉引用的其他相关文章条目 |\\n| 正文内容 | 富文本 | 支持格式化和嵌入等内容的主体部分 |\\n| 阅读时长 | 短文本 | 预估阅读时间（如\\\"5分钟阅读\\\"） |\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f0ecec88-c4a7-472f-b71b-d78f57635472\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -800,\n        -520\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 900,\n        \"height\": 620,\n        \"content\": \"# Varritech 免费 n8n 工作流模板\\n\\n获取我们精心设计的**免费即用型n8n工作流**集合，助您轻松实现数据操作与自动化需求。\\n\\n## 您将获得：\\n- 开箱即用的数据集成工作流\\n- 高效省时的自动化模板\\n- 分步式实施指南\\n- 定期更新的工作流库\\n\\n## 使用指南：\\n1. 下载免费工作流模板\\n2. 导入您的n8n实例\\n3. 配置个人凭证\\n4. 立即启动自动化流程\\n\\n**注：** 更多工作流模板、教程及技术支持，请访问官网 [varritech.com](https://varritech.com)\\n\\n*Varritech工作流解决方案，释放n8n平台的无限潜能！*\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e4bf6af7-cd5a-4f54-9512-5e91d86f6bf6\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1180,\n        620\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 980,\n        \"height\": 540,\n        \"content\": \"# 需要更多关于Contentful的帮助？\\n\\n感谢您使用我们免费的n8n上传至Contentful工作流！如果您需要以下方面的帮助：\\n\\n- 定制化Contentful实施方案\\n- 高级内容建模策略\\n- API集成优化\\n- 内容迁移服务\\n- 扩展自动化工作流程\\n\\n**Varritech随时为您服务！** 我们的团队专注于CMS实施和自动化解决方案，助您简化内容运营流程。\\n\\n访问[varritech.com](https://varritech.com)获取Contentful和自动化需求的专家支持。\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"callerPolicy\": \"workflowsFromSameOwner\",\n    \"executionOrder\": \"v1\",\n    \"executionTimeout\": 600\n  },\n  \"versionId\": \"c049c9ae-5037-4f0e-b499-65b5315529b3\",\n  \"connections\": {\n    \"Merge1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Format1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Format1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create newly formatted Contentful Entry\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split by Headings\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Markdown to Contentful format\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model2\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Markdown to Contentful format\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Combine Rich Text Objects\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge1\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Markdown to Contentful format\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Combine Rich Text Objects\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When Executed by Another Workflow\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split by Headings\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Merge1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}