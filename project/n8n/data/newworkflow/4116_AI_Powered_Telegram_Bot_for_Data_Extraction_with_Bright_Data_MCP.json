{
  "url": "https://n8n.io/workflows/4116-ai-powered-telegram-bot-for-data-extraction-with-bright-data-mcp/",
  "title": "AI-Powered Telegram Bot for Data Extraction with Bright Data MCP",
  "author": "Cyril Nicko Gaspar",
  "publish_date": "Last update 5 days ago",
  "publish_date_absolute": "2025-05-21",
  "categories": [
    {
      "name": "Engineering"
    },
    {
      "name": "Building Blocks"
    },
    {
      "name": "AI"
    }
  ],
  "workflow_json": "{\"meta\":{\"instanceId\":\"4e6be3a68285934388a854ac0ffdc5e5500688d5cdb88d0ec2d734e85f097355\",\"templateCredsSetupCompleted\":true},\"nodes\":[{\"id\":\"9be111d1-4ea3-4c43-8b75-66a1123002fd\",\"name\":\"AI Agent\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[-1580,840],\"parameters\":{\"text\":\"={{ $json.body.message.text }}\",\"options\":{\"systemMessage\":\"You are a helpful assistant. Run the MCP tool when dealing with the web search, scraping, and browser automation.\"},\"promptType\":\"define\"},\"typeVersion\":1.9},{\"id\":\"860579ca-110e-4b7d-848a-e4085e05a6a6\",\"name\":\"Simple Memory\",\"type\":\"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\"position\":[-1520,1060],\"parameters\":{\"sessionKey\":\"={{ $json.body.message.chat.id }}\",\"sessionIdType\":\"customKey\"},\"typeVersion\":1.3},{\"id\":\"b9b2b497-1018-40ad-b1bd-0e04cbfdb95b\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-2480,400],\"parameters\":{\"color\":2,\"width\":560,\"height\":640,\"content\":\"## Receive Webhook from Telegram\\nSetup telegram hook using the HTTP node below. Replace the api key placeholder in the URL field of the node.\\nReplace the URL with the one generated from the Webhook trigger node.\\n\"},\"typeVersion\":1},{\"id\":\"6fd8fd1b-0ec2-402a-8d97-13bbc6ca6ca2\",\"name\":\"OpenRouter Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",\"position\":[-1660,1060],\"parameters\":{\"model\":\"anthropic/claude-3.7-sonnet\",\"options\":{}},\"credentials\":{\"openRouterApi\":{\"id\":\"mShT6DheOqjTyDCh\",\"name\":\"OpenRouter account\"}},\"typeVersion\":1},{\"id\":\"273d9378-bbea-49ea-8a4c-cf473da4639e\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[-2400,580],\"parameters\":{},\"typeVersion\":1},{\"id\":\"4f77a573-e729-4ca2-9263-005c9c67b21a\",\"name\":\"Set Telegram Webhook\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-2140,580],\"parameters\":{\"url\":\"https://api.telegram.org/bot<your-api-token>/setWebhook\",\"options\":{},\"sendBody\":true,\"bodyParameters\":{\"parameters\":[{\"name\":\"url\",\"value\":\"<the url generated from your workflow>\"}]}},\"typeVersion\":4.2},{\"id\":\"b29f6cbd-2ca1-455e-9372-4d7c1aee2811\",\"name\":\"Receive Message Trigger from Telegram\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[-2280,840],\"webhookId\":\"4f1caff9-e22f-426b-b5da-f5175be0a7bc\",\"parameters\":{\"path\":\"4f1caff9-e22f-426b-b5da-f5175be0a7bc\",\"options\":{},\"httpMethod\":\"POST\"},\"typeVersion\":2},{\"id\":\"f8b25f38-143b-4fc8-890c-03701bde0809\",\"name\":\"Typing action\",\"type\":\"n8n-nodes-base.telegram\",\"position\":[-1040,260],\"webhookId\":\"84423ab1-dbb7-4105-9bb3-98abdf1a42bf\",\"parameters\":{\"chatId\":\"={{ $('Trigger by the main workflow').item.json.chatId }}\",\"operation\":\"sendChatAction\"},\"credentials\":{\"telegramApi\":{\"id\":\"GY19yNGJWcslVpXr\",\"name\":\"Telegram account\"}},\"typeVersion\":1.2},{\"id\":\"22d5b740-0ad4-4e4d-b5b4-7961e131d3bd\",\"name\":\"Sub-workflow to trigger Typing Action\",\"type\":\"n8n-nodes-base.executeWorkflow\",\"position\":[-1580,260],\"parameters\":{\"mode\":\"each\",\"options\":{\"waitForSubWorkflow\":false},\"workflowId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"nnFhm4hEcyaMNkXV\",\"cachedResultName\":\"Basic Bright Data MCP\"},\"workflowInputs\":{\"value\":{\"chatId\":\"={{ $json.body.message.chat.id }}\",\"executionId\":\"={{ $execution.id }}\"},\"schema\":[{\"id\":\"executionId\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"executionId\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"chatId\",\"type\":\"number\",\"display\":true,\"required\":false,\"displayName\":\"chatId\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[],\"attemptToConvertTypes\":false,\"convertFieldsToString\":true}},\"typeVersion\":1.2},{\"id\":\"a2d0a7ba-df6b-43d3-9fb4-1026e3d4d154\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1760,680],\"parameters\":{\"color\":3,\"width\":620,\"height\":560,\"content\":\"## AI Agent with Bright Data MCP as a tool\\nHost your SSE server using Supergateway or similar tools. Please check the template’s description for more instruction to setup the SSE from STDIO  command. Then paste the SSE endpoint tinthe MCP tool below.\"},\"typeVersion\":1},{\"id\":\"a4dd5168-8a4f-4ec6-8d3c-992ceb7db7ff\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-820,700],\"parameters\":{\"color\":5,\"width\":560,\"height\":460,\"content\":\"## Send the agent's message via Telegram Bot\"},\"typeVersion\":1},{\"id\":\"84999800-2659-4e4d-8771-d9c5f7ff4e2a\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1720,120],\"parameters\":{\"color\":4,\"width\":1560,\"height\":500,\"content\":\"## Loop the typing action in Telegram\\nTyping action last fro 10 seconds only, so while the agent is still processing query, execute this tool in a loop until it succeed\"},\"typeVersion\":1},{\"id\":\"266b1d20-452b-47fc-9632-437bf7f3abac\",\"name\":\"Reply Error Message\",\"type\":\"n8n-nodes-base.telegram\",\"position\":[320,280],\"webhookId\":\"2f426e92-cd04-4f68-a7c0-276c7a025429\",\"parameters\":{\"text\":\"There's an error with the bot. Please try again later.\",\"chatId\":\"={{ $('Trigger by the main workflow').item.json.chatId }}\",\"additionalFields\":{\"appendAttribution\":false}},\"credentials\":{\"telegramApi\":{\"id\":\"GY19yNGJWcslVpXr\",\"name\":\"Telegram account\"}},\"typeVersion\":1.2},{\"id\":\"4be1ec2b-3ef2-45b8-b1d4-cf39791654f2\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[0,80],\"parameters\":{\"width\":560,\"height\":500,\"content\":\"## Reply error message to the user on error\"},\"typeVersion\":1},{\"id\":\"a3d321c8-4e9d-4c0e-86b5-da002b0ac29d\",\"name\":\"MCP Client\",\"type\":\"@n8n/n8n-nodes-langchain.mcpClientTool\",\"position\":[-1340,1080],\"parameters\":{\"sseEndpoint\":\"http://localhost:8000\"},\"typeVersion\":1},{\"id\":\"c716a991-17e0-4de4-af0d-ba6e44b5c6d2\",\"name\":\"Check if the execution in N8N is finished\",\"type\":\"n8n-nodes-base.n8n\",\"position\":[-600,260],\"parameters\":{\"options\":{},\"resource\":\"execution\",\"operation\":\"get\",\"executionId\":\"={{ $('Trigger by the main workflow').item.json.executionId }}\",\"requestOptions\":{}},\"credentials\":{\"n8nApi\":{\"id\":\"oYyQ7JNyppFRzPaV\",\"name\":\"n8n account\"}},\"typeVersion\":1},{\"id\":\"b6f08d79-16a5-47a7-800d-7c8ba902ab52\",\"name\":\"If the N8N execution is finished\",\"type\":\"n8n-nodes-base.if\",\"position\":[-340,320],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"ad6687c9-24a0-4332-8b0f-ec1aa0751cfc\",\"operator\":{\"type\":\"boolean\",\"operation\":\"false\",\"singleValue\":true},\"leftValue\":\"={{ $json.finished }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"38342c4f-b020-4dc5-b633-ebaaf2582fef\",\"name\":\"Check if the N8N status is success\",\"type\":\"n8n-nodes-base.if\",\"position\":[100,280],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"ad6687c9-24a0-4332-8b0f-ec1aa0751cfc\",\"operator\":{\"type\":\"string\",\"operation\":\"notEquals\"},\"leftValue\":\"={{ $json.status }}\",\"rightValue\":\"success\"}]}},\"typeVersion\":2.2},{\"id\":\"dd3c7d3e-b011-4856-b41e-c17882a19aab\",\"name\":\"Send AI’s output to the user via Telegram\",\"type\":\"n8n-nodes-base.telegram\",\"position\":[-580,840],\"webhookId\":\"56e83f5d-ba64-458d-9a5b-6c3d8ae6f584\",\"parameters\":{\"text\":\"={{ $json.output }}\",\"chatId\":\"={{ $('Receive Message Trigger from Telegram').item.json.body.message.chat.id }}\",\"additionalFields\":{\"appendAttribution\":false}},\"credentials\":{\"telegramApi\":{\"id\":\"GY19yNGJWcslVpXr\",\"name\":\"Telegram account\"}},\"typeVersion\":1.2},{\"id\":\"d415ca44-e93b-4e10-8af6-f0f6cc059e26\",\"name\":\"Wait for the typing action to finish by 10 seconds\",\"type\":\"n8n-nodes-base.wait\",\"position\":[-820,260],\"webhookId\":\"812d8e5e-2b50-4cbd-a4b5-f18640aa0e61\",\"parameters\":{\"amount\":10},\"typeVersion\":1.1},{\"id\":\"6d7822c9-ac66-443f-909b-83596dd738c0\",\"name\":\"Trigger by the main workflow\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[-1300,260],\"parameters\":{\"workflowInputs\":{\"values\":[{\"name\":\"executionId\"},{\"name\":\"chatId\",\"type\":\"number\"}]}},\"typeVersion\":1.1}],\"pinData\":{},\"connections\":{\"AI Agent\":{\"main\":[[{\"node\":\"Send AI’s output to the user via Telegram\",\"type\":\"main\",\"index\":0}]]},\"MCP Client\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Simple Memory\":{\"ai_memory\":[[{\"node\":\"AI Agent\",\"type\":\"ai_memory\",\"index\":0}]]},\"Typing action\":{\"main\":[[{\"node\":\"Wait for the typing action to finish by 10 seconds\",\"type\":\"main\",\"index\":0}]]},\"OpenRouter Chat Model\":{\"ai_languageModel\":[[{\"node\":\"AI Agent\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Trigger by the main workflow\":{\"main\":[[{\"node\":\"Typing action\",\"type\":\"main\",\"index\":0}]]},\"If the N8N execution is finished\":{\"main\":[[{\"node\":\"Typing action\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Check if the N8N status is success\",\"type\":\"main\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"Set Telegram Webhook\",\"type\":\"main\",\"index\":0}]]},\"Check if the N8N status is success\":{\"main\":[[{\"node\":\"Reply Error Message\",\"type\":\"main\",\"index\":0}],[]]},\"Receive Message Trigger from Telegram\":{\"main\":[[{\"node\":\"AI Agent\",\"type\":\"main\",\"index\":0},{\"node\":\"Sub-workflow to trigger Typing Action\",\"type\":\"main\",\"index\":0}]]},\"Check if the execution in N8N is finished\":{\"main\":[[{\"node\":\"If the N8N execution is finished\",\"type\":\"main\",\"index\":0}]]},\"Wait for the typing action to finish by 10 seconds\":{\"main\":[[{\"node\":\"Check if the execution in N8N is finished\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "![IMG_0889.jpeg](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/IMG_0889_c5b61918ef.jpeg)\n\n## 📌 **AI Agent Template with Bright Data MCP Tool Integration**\n\nThis template enables natural-language-driven automation using Bright Data MCP tools. It extracts all available tools from MCP, processes the user’s query through an AI agent, then dynamically selects and executes the appropriate tool.\n\n* * *\n\n### ❓ Problem It Solves\n\nTraditional automation often requires users to understand APIs, interfaces, or scripts to perform backend tasks. The Bright Data MCP integration solves this by allowing natural language interaction, intelligently classifying user intent, and managing context-aware execution of complex operations—ideal for data extraction, customer support, and workflow orchestration.\n\n* * *\n\n### 🧰 Pre-requisites\n\nBefore deploying this template, make sure you have:\n\n  * An active **N8N** instance (self-hosted or cloud).\n  * A valid **OpenRouter API key** (or another compatible AI model).\n  * Telegram bot and its API token\n  * Access to the **Bright Data MCP API** with credentials.\n  * Basic familiarity with N8N workflows and nodes.\n\n\n\n* * *\n\n### ⚙️ Setup Instructions\n\n  1. #### Setup and obtain API token and other necessary information from Bright Data\n\nIn your Bright Data account, obtain the following information:\n\n     * API token\n     * Web Unlocker zone name (optional)\n     * Browser API username and password string separated by colon (optional)\n  2. #### Host SSE server from STDIO command\n\nThe methods below will allow you to receive SSE (Server-Sent Events) from Bright Data MCP via a local Supergateway or Smithery\n\n* * *\n\n_**Method 1: Run Supergateway in a separate web service (Recommended)**_\n\nThis method will work for both cloud version and self-hosted N8N.\n\nSignup to any cloud services of your choice (DigitalOcean, Heroku, Hetzner, Render, etc.).\n\n##### For NPM based installation:\n\n     * Create a new web service.\n     * Choose Node.js as runtime environment and setup a custom server without repository.\n     * In your server’s settings to define environment variables or .env file, add:  \n`API_TOKEN=your_brightdata_api_token WEB_UNLOCKER_ZONE=optional_zone_name BROWSER_AUTH=optional_browser_auth`\n     * Paste the following text as a start command: `npx -y supergateway --stdio \"npx -y @brightdata/mcp\" --port 8000 --baseUrl http://localhost:8000 --ssePath /sse --messagePath /message`\n     * Deploy it and copy the web server URL, then append `/sse` into it.\n     * Your SSE server should now be accessible at: `https://your_server_url/sse`\n\n##### For Docker based installation:\n\n     * Create a new web service.\n     * Choose Docker as the runtime environment.\n     * Set up your Docker environment by pulling the necessary images or creating a custom Dockerfile.\n     * In your server’s settings to define environment variables or .env file, add:  \n`API_TOKEN=your_brightdata_api_token WEB_UNLOCKER_ZONE=optional_zone_name BROWSER_AUTH=optional_browser_auth`\n     * Use the following Docker command to run Supergateway: `docker run -it --rm -p 8000:8000 supercorp/supergateway \\ --stdio \"npx -y @brightdata/mcp /\" \\ --port 8000`\n     * Deploy it and copy the web server URL, then append `/sse` into it.\n     * Your SSE server should now be accessible at: `https://your_server_url/sse`\n\nFor more installation guides, please refer to <https://github.com/supercorp-ai/supergateway.git>.\n\n* * *\n\n_**Method 2: Run Supergateway in the same web service as the N8N instance**_\n\nThis method will only work for self-hosted N8N.\n\n##### a. Set Required Environment Variables\n\nIn your server's settings to define environment variables or `.env` file, add:\n    \n    API_TOKEN=your_brightdata_api_token\n    WEB_UNLOCKER_ZONE=optional_zone_name\n    BROWSER_AUTH=optional_browser_auth\n    \n\n##### b. Run Supergateway in Background\n    \n    npx -y supergateway --stdio \"npx -y @brightdata/mcp\" --port 8000 --baseUrl http://localhost:8000 --ssePath /sse --messagePath /message\n    \n\nUse the command above to execute it through the cloud shell or set it as a pre-deploy command.\n\nYour SSE server should now be accessible at:  \n`http://localhost:8000/sse`\n\nFor more installation guides, please refer to <https://github.com/supercorp-ai/supergateway.git>.\n\n* * *\n\n**_Method 3: Configure via[Smithery.ai](http://Smithery.ai)_ (Easiest)**  \nIf you don't want additional setup and want to test it right away, follow these instructions:\n\nVisit <https://smithery.ai/server/@luminati-io/brightdata-mcp/tools> to:\n\n     * Signup (if you are new to Smithery)\n     * Create an API key\n     * Define environment variables via a profile\n     * Retrieve your SSE server HTTP URL\n  3. **Import the Workflow**\n\n     * Open N8N.\n     * Import the JSON workflow file included with this template.\n     * Update any nodes referencing external services (e.g., OpenRouter, Telegram).\n  4. **Setup Telegram Integration**\n\n     * If you haven't setup a bot in Telegram, below is the instruction how to create one using BotFather:\n\n       * Search for **@BotFather** in Telegram and start a conversation with it.\n       * Send the command `/newbot` to create a new bot. You'll be prompted to enter a name and a unique username for your bot.\n       * BotFather will provide you with an access token, which you'll need to use to interact with the bot's API.\n     * Edit the **HTTP Request** node in the workflow.\n\n     * Configure the URL as follows:\n           \n           https://api.telegram.org/bot+your_telegram_bot_token+/setWebhook?url=+your_webhook_url\n           \n\n     * Replace `+your_telegram_bot_token+` with your actual Telegram bot token.\n\n     * Replace `+your_webhook_url+` with the URL from the **Webhook Trigger** node in the workflow.\n\n     * This will set up Telegram to forward messages to your n8n agent.\n\n\n\n\n* * *\n\n### 🔄 Workflow Functionality (Summary)\n\n  * The user submits a message via chat.\n  * **Memory** nodes retain context for multi-turn conversations.\n  * The mapped tool is executed and results are returned contextually.\n\n\n\n🧠 _Optional memory buffers and memory manager nodes keep the interaction context-aware._\n\n* * *\n\n### 🧩 Use Cases\n\n  * **Data Scraping on Demand** : Launch scraping tasks via chat.\n  * **Lead Generation Bots** : Enrich or validate leads with MCP tools.\n  * **AI-Powered Customer Support** : Classify and answer queries with real-time data tools.\n  * **Workflow Assistants** : Let teams run backend processes like lookups or report generation using plain language.\n\n\n\n* * *\n\n### 🛠️ Customization\n\n  * **Classifier Prompt & Logic**: Tweak the AI’s prompt and tool-matching schema to better fit your use case.\n  * **Memory Configuration** : Adjust retention policies and context depth.\n  * **Tool Execution Sub-Workflow** : Extend for retries, logging, or chaining actions.\n  * **Omni-Channel Support** : Connect via webhooks to chat interfaces like Slack, WhatsApp, Telegram, or custom UIs.\n\n\n\n* * *\n\n### ✅ Summary\n\nThis template equips you with a powerful no-code/low-code AI agent that translates conversation into real-world action. Using Bright Data’s MCP tools through natural language, it enables teams to automate and scale data-driven tasks effortlessly.\n",
  "crawled_at": "2025-05-26T06:44:27.245965",
  "readme_zh": "![IMG_0889.jpeg](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/IMG_0889_c5b61918ef.jpeg)\n\n## 📌 **集成Bright Data MCP工具的AI智能体模板**\n\n本模板通过Bright Data MCP工具实现自然语言驱动的自动化流程。它能提取MCP所有可用工具，通过AI智能体处理用户查询，并动态选择执行对应工具。\n\n* * *\n\n### ❓ 解决的问题\n\n传统自动化通常要求用户理解API、接口或脚本来执行后台任务。Bright Data MCP集成方案通过自然语言交互、智能意图分类和上下文感知的复杂操作执行，完美适用于数据抓取、客户支持和工作流编排场景。\n\n* * *\n\n### 🧰 前置条件\n\n部署前请确保具备：\n\n  * 可用的**N8N实例**（自托管或云端）\n  * 有效的**OpenRouter API密钥**（或其他兼容AI模型）\n  * Telegram机器人及其API令牌\n  * **Bright Data MCP API**访问权限及凭证\n  * 基础的N8N工作流和节点操作知识\n\n* * *\n\n### ⚙️ 配置说明\n\n  1. #### 从Bright Data获取API令牌等必要信息\n\n在Bright Data账户中获取以下信息：\n\n     * API令牌\n     * Web Unlocker区域名称（可选）\n     * 浏览器API用户名与密码（冒号分隔的字符串，可选）\n  2. #### 通过STDIO命令托管SSE服务器\n\n以下方法可通过本地Supergateway或Smithery接收Bright Data MCP的SSE（服务器推送事件）\n\n* * *\n\n_**方法1：在独立Web服务运行Supergateway（推荐）**_\n\n适用于云端版和自托管版N8N。\n\n注册任意云服务（DigitalOcean、Heroku、Hetzner、Render等）。\n\n##### NPM安装方式：\n\n     * 创建新Web服务\n     * 选择Node.js运行时环境，设置无仓库的自定义服务器\n     * 在服务器设置的环境变量或.env文件中添加：  \n`API_TOKEN=您的brightdata_api令牌 WEB_UNLOCKER_ZONE=可选区域名 BROWSER_AUTH=可选浏览器认证`\n     * 将以下文本粘贴为启动命令：`npx -y supergateway --stdio \"npx -y @brightdata/mcp\" --port 8000 --baseUrl http://localhost:8000 --ssePath /sse --messagePath /message`\n     * 部署后复制服务器URL，末尾添加`/sse`\n     * 现在可通过以下地址访问SSE服务器：`https://您的服务器地址/sse`\n\n##### Docker安装方式：\n\n     * 创建新Web服务\n     * 选择Docker运行时环境\n     * 拉取所需镜像或创建自定义Dockerfile\n     * 在环境变量或.env文件中添加：  \n`API_TOKEN=您的brightdata_api令牌 WEB_UNLOCKER_ZONE=可选区域名 BROWSER_AUTH=可选浏览器认证`\n     * 使用以下Docker命令运行：`docker run -it --rm -p 8000:8000 supercorp/supergateway \\ --stdio \"npx -y @brightdata/mcp /\" \\ --port 8000`\n     * 部署后复制服务器URL，末尾添加`/sse`\n     * 现在可通过以下地址访问SSE服务器：`https://您的服务器地址/sse`\n\n更多安装指南请参阅<https://github.com/supercorp-ai/supergateway.git>。\n\n* * *\n\n_**方法2：在N8N实例同服务运行Supergateway**_\n\n仅适用于自托管N8N。\n\n##### a. 设置环境变量\n\n在服务器环境变量或`.env`文件中添加：\n    \n    API_TOKEN=您的brightdata_api令牌\n    WEB_UNLOCKER_ZONE=可选区域名\n    BROWSER_AUTH=可选浏览器认证\n    \n\n##### b. 后台运行Supergateway\n    \n    npx -y supergateway --stdio \"npx -y @brightdata/mcp\" --port 8000 --baseUrl http://localhost:8000 --ssePath /sse --messagePath /message\n    \n\n通过云shell执行上述命令，或设为预部署命令。\n\n现在可通过以下地址访问SSE服务器：  \n`http://localhost:8000/sse`\n\n更多安装指南请参阅<https://github.com/supercorp-ai/supergateway.git>。\n\n* * *\n\n**_方法3：通过[Smithery.ai](http://Smithery.ai)配置（最简单）_**  \n若需快速测试无需额外配置：\n\n访问<https://smithery.ai/server/@luminati-io/brightdata-mcp/tools>：\n\n     * 注册（新用户）\n     * 创建API密钥\n     * 通过配置文件定义环境变量\n     * 获取SSE服务器HTTP URL\n  3. **导入工作流**\n\n     * 打开N8N\n     * 导入模板附带的JSON工作流文件\n     * 更新引用外部服务的节点（如OpenRouter、Telegram）\n  4. **配置Telegram集成**\n\n     * 若未创建Telegram机器人，可通过BotFather创建：\n\n       * 在Telegram搜索**@BotFather**并对话\n       * 发送`/newbot`指令创建机器人，按提示输入名称和唯一用户名\n       * BotFather将提供用于API交互的访问令牌\n     * 编辑工作流中的**HTTP Request**节点\n\n     * 按以下格式配置URL：\n           \n           https://api.telegram.org/bot+您的telegram_bot令牌+/setWebhook?url=+您的webhook地址\n           \n\n     * 替换`+您的telegram_bot令牌+`为实际令牌\n\n     * 替换`+您的webhook地址+`为工作流中**Webhook Trigger**节点的URL\n\n     * 完成设置后Telegram消息将转发至n8n智能体\n\n* * *\n\n### 🔄 工作流功能（概述）\n\n  * 用户通过聊天提交消息\n  * **记忆**节点保留多轮对话上下文\n  * 执行映射工具并返回上下文相关结果",
  "title_zh": "基于Bright Data MCP的AI驱动Telegram数据提取机器人",
  "publish_date_zh": "上次更新于5天前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"4e6be3a68285934388a854ac0ffdc5e5500688d5cdb88d0ec2d734e85f097355\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"9be111d1-4ea3-4c43-8b75-66a1123002fd\",\n      \"name\": \"AI Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        -1580,\n        840\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.body.message.text }}\",\n        \"options\": {\n          \"systemMessage\": \"You are a helpful assistant. Run the MCP tool when dealing with the web search, scraping, and browser automation.\"\n        },\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.9\n    },\n    {\n      \"id\": \"860579ca-110e-4b7d-848a-e4085e05a6a6\",\n      \"name\": \"Simple Memory\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\n      \"position\": [\n        -1520,\n        1060\n      ],\n      \"parameters\": {\n        \"sessionKey\": \"={{ $json.body.message.chat.id }}\",\n        \"sessionIdType\": \"customKey\"\n      },\n      \"typeVersion\": 1.3\n    },\n    {\n      \"id\": \"b9b2b497-1018-40ad-b1bd-0e04cbfdb95b\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -2480,\n        400\n      ],\n      \"parameters\": {\n        \"color\": 2,\n        \"width\": 560,\n        \"height\": 640,\n        \"content\": \"## 接收Telegram的Webhook通知\\n使用下方的HTTP节点配置Telegram钩子。将节点URL字段中的API密钥占位符替换为实际值。\\n请将该URL替换为Webhook触发器节点生成的地址。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6fd8fd1b-0ec2-402a-8d97-13bbc6ca6ca2\",\n      \"name\": \"OpenRouter Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",\n      \"position\": [\n        -1660,\n        1060\n      ],\n      \"parameters\": {\n        \"model\": \"anthropic/claude-3.7-sonnet\",\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openRouterApi\": {\n          \"id\": \"mShT6DheOqjTyDCh\",\n          \"name\": \"OpenRouter account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"273d9378-bbea-49ea-8a4c-cf473da4639e\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -2400,\n        580\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4f77a573-e729-4ca2-9263-005c9c67b21a\",\n      \"name\": \"Set Telegram Webhook\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -2140,\n        580\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.telegram.org/bot<your-api-token>/setWebhook\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"url\",\n              \"value\": \"<the url generated from your workflow>\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"b29f6cbd-2ca1-455e-9372-4d7c1aee2811\",\n      \"name\": \"Receive Message Trigger from Telegram\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -2280,\n        840\n      ],\n      \"webhookId\": \"4f1caff9-e22f-426b-b5da-f5175be0a7bc\",\n      \"parameters\": {\n        \"path\": \"4f1caff9-e22f-426b-b5da-f5175be0a7bc\",\n        \"options\": {},\n        \"httpMethod\": \"POST\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"f8b25f38-143b-4fc8-890c-03701bde0809\",\n      \"name\": \"Typing action\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        -1040,\n        260\n      ],\n      \"webhookId\": \"84423ab1-dbb7-4105-9bb3-98abdf1a42bf\",\n      \"parameters\": {\n        \"chatId\": \"={{ $('Trigger by the main workflow').item.json.chatId }}\",\n        \"operation\": \"sendChatAction\"\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"GY19yNGJWcslVpXr\",\n          \"name\": \"Telegram account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"22d5b740-0ad4-4e4d-b5b4-7961e131d3bd\",\n      \"name\": \"Sub-workflow to trigger Typing Action\",\n      \"type\": \"n8n-nodes-base.executeWorkflow\",\n      \"position\": [\n        -1580,\n        260\n      ],\n      \"parameters\": {\n        \"mode\": \"each\",\n        \"options\": {\n          \"waitForSubWorkflow\": false\n        },\n        \"workflowId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"nnFhm4hEcyaMNkXV\",\n          \"cachedResultName\": \"Basic Bright Data MCP\"\n        },\n        \"workflowInputs\": {\n          \"value\": {\n            \"chatId\": \"={{ $json.body.message.chat.id }}\",\n            \"executionId\": \"={{ $execution.id }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"executionId\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"executionId\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"chatId\",\n              \"type\": \"number\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"chatId\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": true\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"a2d0a7ba-df6b-43d3-9fb4-1026e3d4d154\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1760,\n        680\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 620,\n        \"height\": 560,\n        \"content\": \"## 配备Bright Data MCP工具的AI代理\\n使用Supergateway或类似工具托管您的SSE服务器。请查阅模板说明以获取通过STDIO命令设置SSE的详细指引，随后将SSE终端点粘贴至下方MCP工具中。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a4dd5168-8a4f-4ec6-8d3c-992ceb7db7ff\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -820,\n        700\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 560,\n        \"height\": 460,\n        \"content\": \"## 通过Telegram机器人发送代理消息\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"84999800-2659-4e4d-8771-d9c5f7ff4e2a\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1720,\n        120\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 1560,\n        \"height\": 500,\n        \"content\": \"## 在Telegram中循环显示\\\"正在输入\\\"状态  \\n由于\\\"正在输入\\\"状态仅持续10秒，因此当代理仍在处理查询时，需循环执行此工具直至成功\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"266b1d20-452b-47fc-9632-437bf7f3abac\",\n      \"name\": \"Reply Error Message\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        320,\n        280\n      ],\n      \"webhookId\": \"2f426e92-cd04-4f68-a7c0-276c7a025429\",\n      \"parameters\": {\n        \"text\": \"There's an error with the bot. Please try again later.\",\n        \"chatId\": \"={{ $('Trigger by the main workflow').item.json.chatId }}\",\n        \"additionalFields\": {\n          \"appendAttribution\": false\n        }\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"GY19yNGJWcslVpXr\",\n          \"name\": \"Telegram account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"4be1ec2b-3ef2-45b8-b1d4-cf39791654f2\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        0,\n        80\n      ],\n      \"parameters\": {\n        \"width\": 560,\n        \"height\": 500,\n        \"content\": \"## 出错时向用户回复错误信息\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a3d321c8-4e9d-4c0e-86b5-da002b0ac29d\",\n      \"name\": \"MCP Client\",\n      \"type\": \"@n8n/n8n-nodes-langchain.mcpClientTool\",\n      \"position\": [\n        -1340,\n        1080\n      ],\n      \"parameters\": {\n        \"sseEndpoint\": \"http://localhost:8000\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c716a991-17e0-4de4-af0d-ba6e44b5c6d2\",\n      \"name\": \"Check if the execution in N8N is finished\",\n      \"type\": \"n8n-nodes-base.n8n\",\n      \"position\": [\n        -600,\n        260\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"resource\": \"execution\",\n        \"operation\": \"get\",\n        \"executionId\": \"={{ $('Trigger by the main workflow').item.json.executionId }}\",\n        \"requestOptions\": {}\n      },\n      \"credentials\": {\n        \"n8nApi\": {\n          \"id\": \"oYyQ7JNyppFRzPaV\",\n          \"name\": \"n8n account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b6f08d79-16a5-47a7-800d-7c8ba902ab52\",\n      \"name\": \"If the N8N execution is finished\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        -340,\n        320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"ad6687c9-24a0-4332-8b0f-ec1aa0751cfc\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"false\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.finished }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"38342c4f-b020-4dc5-b633-ebaaf2582fef\",\n      \"name\": \"Check if the N8N status is success\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        100,\n        280\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"ad6687c9-24a0-4332-8b0f-ec1aa0751cfc\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"notEquals\"\n              },\n              \"leftValue\": \"={{ $json.status }}\",\n              \"rightValue\": \"success\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"dd3c7d3e-b011-4856-b41e-c17882a19aab\",\n      \"name\": \"Send AI’s output to the user via Telegram\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        -580,\n        840\n      ],\n      \"webhookId\": \"56e83f5d-ba64-458d-9a5b-6c3d8ae6f584\",\n      \"parameters\": {\n        \"text\": \"={{ $json.output }}\",\n        \"chatId\": \"={{ $('Receive Message Trigger from Telegram').item.json.body.message.chat.id }}\",\n        \"additionalFields\": {\n          \"appendAttribution\": false\n        }\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"GY19yNGJWcslVpXr\",\n          \"name\": \"Telegram account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"d415ca44-e93b-4e10-8af6-f0f6cc059e26\",\n      \"name\": \"Wait for the typing action to finish by 10 seconds\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        -820,\n        260\n      ],\n      \"webhookId\": \"812d8e5e-2b50-4cbd-a4b5-f18640aa0e61\",\n      \"parameters\": {\n        \"amount\": 10\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"6d7822c9-ac66-443f-909b-83596dd738c0\",\n      \"name\": \"Trigger by the main workflow\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        -1300,\n        260\n      ],\n      \"parameters\": {\n        \"workflowInputs\": {\n          \"values\": [\n            {\n              \"name\": \"executionId\"\n            },\n            {\n              \"name\": \"chatId\",\n              \"type\": \"number\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"AI Agent\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send AI’s output to the user via Telegram\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"MCP Client\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Simple Memory\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Typing action\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Wait for the typing action to finish by 10 seconds\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenRouter Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Trigger by the main workflow\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Typing action\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"If the N8N execution is finished\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Typing action\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Check if the N8N status is success\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set Telegram Webhook\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check if the N8N status is success\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Reply Error Message\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        []\n      ]\n    },\n    \"Receive Message Trigger from Telegram\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Sub-workflow to trigger Typing Action\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check if the execution in N8N is finished\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If the N8N execution is finished\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Wait for the typing action to finish by 10 seconds\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check if the execution in N8N is finished\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}