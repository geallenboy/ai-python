{
  "url": "https://n8n.io/workflows/1407-simple-file-based-key-value-store-writekey/",
  "title": "Simple file based key value store (WriteKey)",
  "author": "Peter",
  "publish_date": "Last update 10 months ago",
  "publish_date_absolute": "2024-07-25",
  "categories": [
    {
      "name": "Engineering"
    },
    {
      "name": "Building Blocks"
    }
  ],
  "workflow_json": "{\"id\":12,\"name\":\"Storage: WriteKey\",\"nodes\":[{\"name\":\"On clicking 'execute'\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[60,300],\"parameters\":{},\"typeVersion\":1},{\"name\":\"Write Binary File\",\"type\":\"n8n-nodes-base.writeBinaryFile\",\"position\":[420,740],\"parameters\":{\"fileName\":\"={{$node[\\\"Config\\\"].json[\\\"file\\\"]}}\",\"dataPropertyName\":\"=data\"},\"typeVersion\":1},{\"name\":\"Config\",\"type\":\"n8n-nodes-base.functionItem\",\"position\":[600,300],\"parameters\":{\"functionCode\":\"return {\\n  file: '/home/node/.n8n/local-files' + item.file,\\n  key: item.key,\\n  value: item.value\\n}\"},\"typeVersion\":1},{\"name\":\"Read Binary Files\",\"type\":\"n8n-nodes-base.readBinaryFiles\",\"position\":[240,520],\"parameters\":{\"fileSelector\":\"={{$json[\\\"file\\\"]}}\"},\"typeVersion\":1,\"continueOnFail\":true,\"alwaysOutputData\":true},{\"name\":\"SetKeyValue\",\"type\":\"n8n-nodes-base.functionItem\",\"position\":[600,520],\"parameters\":{\"functionCode\":\"const key = $node[\\\"Config\\\"].json[\\\"key\\\"]\\nconst value = $node[\\\"Config\\\"].json[\\\"value\\\"]\\nitem[key] = value\\n\\nreturn item;\"},\"typeVersion\":1},{\"name\":\"BinaryToJSON\",\"type\":\"n8n-nodes-base.moveBinaryData\",\"position\":[420,520],\"parameters\":{\"options\":{}},\"typeVersion\":1,\"alwaysOutputData\":true},{\"name\":\"JSONToBinary\",\"type\":\"n8n-nodes-base.moveBinaryData\",\"position\":[240,740],\"parameters\":{\"mode\":\"jsonToBinary\",\"options\":{}},\"typeVersion\":1},{\"name\":\"SplitInBatches\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[420,300],\"parameters\":{\"options\":{},\"batchSize\":1},\"typeVersion\":1},{\"name\":\"Repeat\",\"type\":\"n8n-nodes-base.if\",\"position\":[600,740],\"parameters\":{\"conditions\":{\"boolean\":[{\"value1\":\"={{$node[\\\"SplitInBatches\\\"].context[\\\"noItemsLeft\\\"]}}\",\"value2\":true}]}},\"typeVersion\":1},{\"name\":\"Done\",\"type\":\"n8n-nodes-base.functionItem\",\"position\":[800,740],\"parameters\":{\"functionCode\":\"console.log('Done!');\\n\\nreturn item;\"},\"typeVersion\":1}],\"active\":false,\"settings\":{},\"connections\":{\"Config\":{\"main\":[[{\"node\":\"Read Binary Files\",\"type\":\"main\",\"index\":0}]]},\"Repeat\":{\"main\":[[{\"node\":\"Done\",\"type\":\"main\",\"index\":0}],[{\"node\":\"SplitInBatches\",\"type\":\"main\",\"index\":0}]]},\"SetKeyValue\":{\"main\":[[{\"node\":\"JSONToBinary\",\"type\":\"main\",\"index\":0}]]},\"BinaryToJSON\":{\"main\":[[{\"node\":\"SetKeyValue\",\"type\":\"main\",\"index\":0}]]},\"JSONToBinary\":{\"main\":[[{\"node\":\"Write Binary File\",\"type\":\"main\",\"index\":0}]]},\"SplitInBatches\":{\"main\":[[{\"node\":\"Config\",\"type\":\"main\",\"index\":0}]]},\"Read Binary Files\":{\"main\":[[{\"node\":\"BinaryToJSON\",\"type\":\"main\",\"index\":0}]]},\"Write Binary File\":{\"main\":[[{\"node\":\"Repeat\",\"type\":\"main\",\"index\":0}]]},\"On clicking 'execute'\":{\"main\":[[{\"node\":\"SplitInBatches\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "Store a key with a value in a local json file. Multiple keys could be saved in a single file.\n\nRelated workflow: [GetKey](https://n8n.io/workflows/1408)\n\nCreate a subfolder in your n8n homedir: `/home/node/.n8n/local-files`. In docker look at the data path and create a subfolder `local-files`.  \nSet the correct access rights `chmod 1000.1000 local-files`.\n\nPut the workflow code in a new workflow named `WriteKey`.\n\nCreate another workflow with a `function item`:\n    \n    \n    return  {\n      file: '/4711.json', // 4711 should be your workflow id\n      key: 'MyKey',\n      value: 'MyValue'\n    }\n    \n\nPipe the `function item` to an `Execution Workflow` that calls the `WriteKey` workflow.\n\nIt would be nice if we could get someday a shiny built-in n8n node that does the job. :)\n",
  "crawled_at": "2025-05-25T19:39:27.183310",
  "readme_zh": "将键值对存储到本地JSON文件中。单个文件可保存多个键值。\n\n相关工作流：[获取键值](https://n8n.io/workflows/1408)\n\n在n8n主目录下创建子文件夹：`/home/node/.n8n/local-files`。若使用Docker，请在数据路径下创建`local-files`子文件夹。  \n设置正确的访问权限：`chmod 1000.1000 local-files`。\n\n将工作流代码保存至名为`写入键值`的新工作流中。\n\n创建另一个包含`函数项`的工作流：\n    \n    \n    return  {\n      file: '/4711.json', // 4711应替换为你的工作流ID\n      key: '我的键',\n      value: '我的值'\n    }\n    \n\n将`函数项`连接至`执行工作流`节点，调用`写入键值`工作流。\n\n期待未来能有一个内置的n8n节点来优雅地实现这个功能。 :)",
  "title_zh": "基于文件的简单键值存储（WriteKey）",
  "publish_date_zh": "最后更新于9个月前",
  "workflow_json_zh": "{\n  \"id\": 12,\n  \"name\": \"Storage: WriteKey\",\n  \"nodes\": [\n    {\n      \"name\": \"On clicking 'execute'\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        60,\n        300\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Write Binary File\",\n      \"type\": \"n8n-nodes-base.writeBinaryFile\",\n      \"position\": [\n        420,\n        740\n      ],\n      \"parameters\": {\n        \"fileName\": \"={{$node[\\\"Config\\\"].json[\\\"file\\\"]}}\",\n        \"dataPropertyName\": \"=data\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Config\",\n      \"type\": \"n8n-nodes-base.functionItem\",\n      \"position\": [\n        600,\n        300\n      ],\n      \"parameters\": {\n        \"functionCode\": \"return {\\n  file: '/home/node/.n8n/local-files' + item.file,\\n  key: item.key,\\n  value: item.value\\n}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Read Binary Files\",\n      \"type\": \"n8n-nodes-base.readBinaryFiles\",\n      \"position\": [\n        240,\n        520\n      ],\n      \"parameters\": {\n        \"fileSelector\": \"={{$json[\\\"file\\\"]}}\"\n      },\n      \"typeVersion\": 1,\n      \"continueOnFail\": true,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"name\": \"SetKeyValue\",\n      \"type\": \"n8n-nodes-base.functionItem\",\n      \"position\": [\n        600,\n        520\n      ],\n      \"parameters\": {\n        \"functionCode\": \"const key = $node[\\\"Config\\\"].json[\\\"key\\\"]\\nconst value = $node[\\\"Config\\\"].json[\\\"value\\\"]\\nitem[key] = value\\n\\nreturn item;\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"BinaryToJSON\",\n      \"type\": \"n8n-nodes-base.moveBinaryData\",\n      \"position\": [\n        420,\n        520\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"name\": \"JSONToBinary\",\n      \"type\": \"n8n-nodes-base.moveBinaryData\",\n      \"position\": [\n        240,\n        740\n      ],\n      \"parameters\": {\n        \"mode\": \"jsonToBinary\",\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"SplitInBatches\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        420,\n        300\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"batchSize\": 1\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Repeat\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        600,\n        740\n      ],\n      \"parameters\": {\n        \"conditions\": {\n          \"boolean\": [\n            {\n              \"value1\": \"={{$node[\\\"SplitInBatches\\\"].context[\\\"noItemsLeft\\\"]}}\",\n              \"value2\": true\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Done\",\n      \"type\": \"n8n-nodes-base.functionItem\",\n      \"position\": [\n        800,\n        740\n      ],\n      \"parameters\": {\n        \"functionCode\": \"console.log('Done!');\\n\\nreturn item;\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"settings\": {},\n  \"connections\": {\n    \"Config\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Read Binary Files\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Repeat\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Done\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"SplitInBatches\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"SetKeyValue\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"JSONToBinary\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"BinaryToJSON\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SetKeyValue\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"JSONToBinary\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Write Binary File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"SplitInBatches\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Config\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Read Binary Files\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"BinaryToJSON\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Write Binary File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Repeat\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"On clicking 'execute'\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SplitInBatches\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}