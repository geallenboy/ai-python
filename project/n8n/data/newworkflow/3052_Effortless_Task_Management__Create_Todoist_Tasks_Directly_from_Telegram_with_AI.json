{
  "url": "https://n8n.io/workflows/3052-effortless-task-management-create-todoist-tasks-directly-from-telegram-with-ai/",
  "title": "Effortless Task Management: Create Todoist Tasks Directly from Telegram with AI",
  "author": "Onur",
  "publish_date": "Last update 3 months ago",
  "publish_date_absolute": "2025-02-26",
  "categories": [
    {
      "name": "Other"
    }
  ],
  "workflow_json": "{\"meta\":{\"instanceId\":\"b41148c809c7896d124743d940fc0964703e540af66564ef95e25a4ceea61c77\",\"templateCredsSetupCompleted\":true},\"nodes\":[{\"id\":\"e87d3723-7e7a-4ff3-bffb-b2bd2096bd34\",\"name\":\"OpenAI Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[1080,260],\"parameters\":{\"model\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gpt-4o-mini\"},\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"uFPD9I4pWJ4xUVf7\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.2},{\"id\":\"d25bf3ea-0de4-4317-9205-651f8a1a6ba8\",\"name\":\"Basic LLM Chain\",\"type\":\"@n8n/n8n-nodes-langchain.chainLlm\",\"position\":[1060,40],\"parameters\":{\"text\":\"={{ $json.text }}\",\"messages\":{\"messageValues\":[{\"message\":\"=Okay, I've further refined the system prompt to include only the \\\"content\\\" and \\\"priority\\\" fields in the JSON output for the Todoist tool. Here's the updated prompt:\\n\\n**System Prompt:**\\n\\n```\\nYou are an AI agent acting as a project management assistant. The user will provide you with a task or project description. Your job is to break down this task or project into smaller, manageable sub-tasks. You will then format each sub-task into a JSON object suitable for input to the \\\"Todoist\\\" tool and provide these JSON objects in a list.\\n\\n**Requirements:**\\n\\n1.  **Sub-Task Decomposition:** Break down the task or project provided by the user into logical and actionable sub-tasks. Each sub-task should be self-contained, completable, and measurable.\\n2.  **JSON Format for Todoist:** Format each sub-task as a JSON object with the following structure:\\n\\n    ```json\\n    {\\n      \\\"content\\\": \\\"[Task Description]\\\",\\n      \\\"priority\\\": [Priority Level (1-4, where 4 is highest)]\\n    }\\n    ```\\n\\n    *   `content`: A clear and concise description of the task.\\n    *   `priority`: An integer representing the task priority, ranging from 1 (lowest) to 4 (highest). Consider the importance and urgency of the task when assigning the priority.\\n\\n3.  **Tool Usage - Todoist JSON Output:** After decomposing the project into sub-tasks, you **MUST** format each sub-task into the JSON structure specified above and present all the JSON objects in a Python list. This list will be the direct input to the \\\"Todoist\\\" tool.\\n\\n4.  **Contextual Understanding:** Fully understand the context of the task or project provided by the user. If necessary, ask for additional information or clarification to resolve any ambiguities.\\n\\n5.  **Limitations:**\\n\\n    *   Avoid very general or abstract sub-tasks.\\n    *   Ensure that each sub-task is completable and measurable.\\n    *   When creating sub-tasks, consider the user's skills and resources.\\n    *   Ensure all the output is valid JSON format within a python list\\n\\n**User Input:**\\n\\nThe user will provide you with a task or project description in the following format:\\n\\n```\\nProject Description: [User's Entered Task or Project Description]\\n```\\n\\n**Example:**\\n\\n**User Input:**\\n\\n```\\nProject Description: Plan a team offsite.\\n```\\n\\n**LLM Response:**\\n\\n```python\\n[\\n  {\\n    \\\"content\\\": \\\"Research potential offsite locations.\\\",\\n    \\\"priority\\\": 3\\n  },\\n  {\\n    \\\"content\\\": \\\"Determine the budget for the offsite.\\\",\\n    \\\"priority\\\": 4\\n  },\\n  {\\n    \\\"content\\\": \\\"Send out a survey to gather team preferences.\\\",\\n    \\\"priority\\\": 3\\n  },\\n  {\\n    \\\"content\\\": \\\"Book the chosen venue.\\\",\\n    \\\"priority\\\": 4\\n  },\\n  {\\n    \\\"content\\\": \\\"Plan team-building activities.\\\",\\n    \\\"priority\\\": 2\\n  }\\n]\\n```\\n\\n**Key Changes and Explanations:**\\n\\n*   **Simplified JSON Structure:** The JSON object now only includes `content` and `priority`.\\n*   **Example Updated:** The example response reflects the simplified JSON format.\\n*   **Conciseness:** The prompt is now more concise, focusing only on the necessary fields.\\n\\n**Jinja2 Template Version**\\n\\n```python\\nfrom jinja2 import Template\\n\\ntemplate_string = \\\"\\\"\\\"\\nYou are an AI agent acting as a project management assistant. The user will provide you with a task or project description. Your job is to break down this task or project into smaller, manageable sub-tasks. You will then format each sub-task into a JSON object suitable for input to the \\\"Todoist\\\" tool and provide these JSON objects in a list.\\n\\n**Requirements:**\\n\\n1.  **Sub-Task Decomposition:** Break down the task or project provided by the user into logical and actionable sub-tasks. Each sub-task should be self-contained, completable, and measurable.\\n2.  **JSON Format for Todoist:** Format each sub-task as a JSON object with the following structure:\\n\\n    ```json\\n    {\\n      \\\"content\\\": \\\"[Task Description]\\\",\\n      \\\"priority\\\": [Priority Level (1-4, where 4 is highest)]\\n    }\\n    ```\\n\\n    *   `content`: A clear and concise description of the task.\\n    *   `priority`: An integer representing the task priority, ranging from 1 (lowest) to 4 (highest). Consider the importance and urgency of the task when assigning the priority.\\n\\n3.  **Tool Usage - Todoist JSON Output:** After decomposing the project into sub-tasks, you **MUST** format each sub-task into the JSON structure specified above and present all the JSON objects in a Python list. This list will be the direct input to the \\\"Todoist\\\" tool.\\n\\n4.  **Contextual Understanding:** Fully understand the context of the task or project provided by the user. If necessary, ask for additional information or clarification to resolve any ambiguities.\\n\\n5.  **Limitations:**\\n\\n    *   Avoid very general or abstract sub-tasks.\\n    *   Ensure that each sub-task is completable and measurable.\\n    *   When creating sub-tasks, consider the user's skills and resources.\\n    *   Ensure all the output is valid JSON format within a python list\\n\\n**User Input:**\\n\\nThe user will provide you with a task or project description in the following format:\\n\\n```\\nProject Description: {{ project_description }}\\n```\\n\\n**Example:**\\n\\n**User Input:**\\n\\n```\\nProject Description: Plan a team offsite.\\n```\\n\\n**LLM Response:**\\n\\n```python\\n[\\n  {\\n    \\\"content\\\": \\\"Research potential offsite locations.\\\",\\n    \\\"priority\\\": 3\\n  },\\n  {\\n    \\\"content\\\": \\\"Determine the budget for the offsite.\\\",\\n    \\\"priority\\\": 4\\n  },\\n  {\\n    \\\"content\\\": \\\"Send out a survey to gather team preferences.\\\",\\n    \\\"priority\\\": 3\\n  },\\n  {\\n    \\\"content\\\": \\\"Book the chosen venue.\\\",\\n    \\\"priority\\\": 4\\n  },\\n  {\\n    \\\"content\\\": \\\"Plan team-building activities.\\\",\\n    \\\"priority\\\": 2\\n  }\\n]\\n```\\n\\\"\\\"\\\"\\n\\ntemplate = Template(template_string)\\n\\n# Example Usage\\nproject_description = \\\"Plan a team offsite.\\\"\\nprompt = template.render(project_description=project_description)\\n\\nprint(prompt)\\n```\\n \\n\"}]},\"promptType\":\"define\",\"hasOutputParser\":true},\"typeVersion\":1.5},{\"id\":\"ddfe59c5-574c-470b-b2cc-efa05da74972\",\"name\":\"Receive Telegram Messages\",\"type\":\"n8n-nodes-base.telegramTrigger\",\"position\":[-220,-100],\"webhookId\":\"4e2cd560-ae4e-4ed7-a8ea-984518404e51\",\"parameters\":{\"updates\":[\"message\"],\"additionalFields\":{}},\"credentials\":{\"telegramApi\":{\"id\":\"lff3pLERRdQmkmeV\",\"name\":\"Telegram account\"}},\"typeVersion\":1.1},{\"id\":\"23f2cedd-bcd2-4a94-acc1-8829b30553dc\",\"name\":\"Voice or Text?\",\"type\":\"n8n-nodes-base.switch\",\"position\":[140,-20],\"parameters\":{\"rules\":{\"values\":[{\"outputKey\":\"Audio\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"af30c479-4542-405f-b315-37c50c4e2bef\",\"operator\":{\"type\":\"string\",\"operation\":\"exists\",\"singleValue\":true},\"leftValue\":\"={{ $json.message.voice.file_id }}\",\"rightValue\":\"\"}]},\"renameOutput\":true},{\"outputKey\":\"Text\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"a3ca8cd4-fbb2-40b5-829a-24724f2fbc85\",\"operator\":{\"type\":\"string\",\"operation\":\"exists\",\"singleValue\":true},\"leftValue\":\"={{ $json.message.text || \\\"\\\" }}\",\"rightValue\":\"\"}]},\"renameOutput\":true},{\"outputKey\":\"Error\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"9bcfdee0-2f09-4037-a7b9-689ef392371d\",\"operator\":{\"type\":\"string\",\"operation\":\"exists\",\"singleValue\":true},\"leftValue\":\"error\",\"rightValue\":\"\"}]},\"renameOutput\":true}]},\"options\":{}},\"typeVersion\":3.2},{\"id\":\"128e8268-a256-4256-8757-9ece8be86d75\",\"name\":\"Fetch Voice Message\",\"type\":\"n8n-nodes-base.telegram\",\"position\":[500,-120],\"webhookId\":\"23645237-4943-4c32-b18c-97c410cc3409\",\"parameters\":{\"fileId\":\"={{ $json.message.voice.file_id }}\",\"resource\":\"file\"},\"credentials\":{\"telegramApi\":{\"id\":\"lff3pLERRdQmkmeV\",\"name\":\"Telegram account\"}},\"typeVersion\":1.2},{\"id\":\"d8219ba5-bb33-44f5-a9a2-65fd16be335b\",\"name\":\"Transcribe Voice to Text\",\"type\":\"@n8n/n8n-nodes-langchain.openAi\",\"position\":[720,-120],\"parameters\":{\"options\":{},\"resource\":\"audio\",\"operation\":\"translate\"},\"credentials\":{\"openAiApi\":{\"id\":\"uFPD9I4pWJ4xUVf7\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.8},{\"id\":\"0c5f5568-fd14-4c65-8661-ebc5803158ce\",\"name\":\"Prepare for LLM\",\"type\":\"n8n-nodes-base.set\",\"position\":[620,100],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"b324a329-3c49-4f7f-b683-74331b7fe7f8\",\"name\":\"=text\",\"type\":\"string\",\"value\":\"={{$json.message.text}}\"}]}},\"typeVersion\":3.4},{\"id\":\"76ed8f5c-59f7-4cb9-9e59-25ac7e9e8c60\",\"name\":\"Extract Tasks\",\"type\":\"@n8n/n8n-nodes-langchain.outputParserStructured\",\"position\":[1220,260],\"parameters\":{\"jsonSchemaExample\":\"  {\\n    \\\"content\\\": \\\"Send out invitations.\\\",\\n    \\\"priority\\\": 3\\n  }\"},\"typeVersion\":1.2},{\"id\":\"7d0dbcb7-aac1-4eea-8f0b-6173148bfd3f\",\"name\":\"Create Todoist Tasks\",\"type\":\"n8n-nodes-base.todoist\",\"position\":[1620,40],\"parameters\":{\"content\":\"={{ $json.output.content }}\",\"options\":{\"priority\":\"={{ $json.output.priority }}\"},\"project\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"2349786654\",\"cachedResultName\":\"Task\"}},\"credentials\":{\"todoistApi\":{\"id\":\"yqSn5VBXyA4R6hgt\",\"name\":\"Todoist account\"}},\"typeVersion\":2.1},{\"id\":\"544b3f63-8ac1-4f81-9c24-943df16d9324\",\"name\":\"Send Confirmation\",\"type\":\"n8n-nodes-base.telegram\",\"position\":[1880,40],\"webhookId\":\"5699aecd-e061-4b7f-af7b-4a23eb7201c6\",\"parameters\":{\"text\":\"=Task : {{ $json.content }} Task Link :{{ $json.url }}\",\"chatId\":\"={{ $('Receive Telegram Messages').item.json.message.chat.id }}\",\"additionalFields\":{}},\"credentials\":{\"telegramApi\":{\"id\":\"lff3pLERRdQmkmeV\",\"name\":\"Telegram account\"}},\"typeVersion\":1.2},{\"id\":\"b244f935-3047-4581-84ac-b01b2f962c1d\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-260,-240],\"parameters\":{\"width\":260,\"height\":320,\"content\":\" \\n**This workflow listens for incoming voice or text messages from Telegram users.** \"},\"typeVersion\":1},{\"id\":\"fa99930d-8e75-4f1e-aa9b-47c38e611538\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[440,-220],\"parameters\":{\"width\":460,\"height\":260,\"content\":\" **Voice messages are fetched from Telegram and transcribed into text using OpenAI's Whisper API.**  \"},\"typeVersion\":1},{\"id\":\"beb460c9-0412-40c4-a3cf-76660eb0e1b8\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1000,-60],\"parameters\":{\"width\":380,\"height\":440,\"content\":\" \\n**The LLM (OpenAI Chat Model) analyzes the text and breaks it down into tasks and sub-tasks, formatted for Todoist.**  \"},\"typeVersion\":1}],\"pinData\":{},\"connections\":{\"Extract Tasks\":{\"ai_outputParser\":[[{\"node\":\"Basic LLM Chain\",\"type\":\"ai_outputParser\",\"index\":0}]]},\"Voice or Text?\":{\"main\":[[{\"node\":\"Fetch Voice Message\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Prepare for LLM\",\"type\":\"main\",\"index\":0}]]},\"Basic LLM Chain\":{\"main\":[[{\"node\":\"Create Todoist Tasks\",\"type\":\"main\",\"index\":0}]]},\"Prepare for LLM\":{\"main\":[[{\"node\":\"Basic LLM Chain\",\"type\":\"main\",\"index\":0}]]},\"OpenAI Chat Model\":{\"ai_languageModel\":[[{\"node\":\"Basic LLM Chain\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Fetch Voice Message\":{\"main\":[[{\"node\":\"Transcribe Voice to Text\",\"type\":\"main\",\"index\":0}]]},\"Create Todoist Tasks\":{\"main\":[[{\"node\":\"Send Confirmation\",\"type\":\"main\",\"index\":0}]]},\"Transcribe Voice to Text\":{\"main\":[[{\"node\":\"Basic LLM Chain\",\"type\":\"main\",\"index\":0}]]},\"Receive Telegram Messages\":{\"main\":[[{\"node\":\"Voice or Text?\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "## Effortless Task Management: Create Todoist Tasks Directly from Telegram with AI\n\nThis n8n workflow empowers you to seamlessly manage your tasks by creating Todoist entries directly from Telegram, using the power of AI. Simply send a voice or text message to your Telegram bot, and this workflow will transform it into actionable tasks in your Todoist account.\n\n### Who is this for?\n\n  * **Busy professionals** who need a quick and easy way to capture tasks on the go.\n  * **Students** looking to streamline their assignments and project management.\n  * **Anyone** who wants to leverage AI for effortless task management.\n\n\n\n### What Problem Does it Solve?\n\nThis workflow eliminates the need to manually enter tasks into Todoist. It automates the process of capturing, organizing, and prioritizing tasks, saving you time and effort.\n\n### What are the Benefits?\n\n  * **Seamless Integration:** Connect your Telegram and Todoist accounts for a frictionless workflow.\n  * **AI-Powered Task Breakdown:** LLM AI intelligently analyzes your messages and breaks them down into manageable sub-tasks.\n  * **Voice-to-Task:** Create tasks with voice messages for hands-free convenience.\n  * **Increased Productivity:** Capture and organize tasks quickly, keeping you focused and productive.\n  * **Accessibility:** Access your tasks from anywhere with Todoist's mobile app and Google extension.\n\n\n\n### How it Works\n\n  1. **Send a message:** Send a voice or text message describing your task to your Telegram bot.\n  2. **AI analysis:** The workflow uses an LLM (OpenAI Chat Model) to analyze your message and break it down into sub-tasks.\n  3. **Task creation:** The workflow creates tasks in your Todoist account based on the AI's analysis.\n  4. **Notification:** You receive a Telegram notification with a link to your newly created tasks in Todoist.\n\n\n\n### Nodes in the Workflow\n\n  * **Telegram Trigger:** Listens for incoming messages on Telegram.\n  * **Switch:** Routes messages based on their type (voice or text).\n  * **Telegram:** Fetches voice messages from Telegram.\n  * **OpenAI:** Transcribes voice messages to text using OpenAI's Whisper API.\n  * **Edit Fields:** Prepares the text for the LLM.\n  * **Basic LLM Chain:** Analyzes messages and generates sub-tasks using OpenAI's GPT model.\n  * **Structured Output Parser:** Extracts sub-tasks from the LLM's response.\n  * **Todoist:** Creates tasks in your Todoist account.\n  * **Telegram:** Sends a notification with a link to your Todoist tasks.\n\n\n\n### Requirements\n\n  * Active n8n instance.\n  * Telegram account with a bot.\n  * Todoist account.\n  * OpenAI API key.\n\n\n\n### Setup Information\n\n  1. Import the workflow JSON into your n8n instance.\n  2. Configure the Telegram Trigger node with your bot token.\n  3. Set up the OpenAI credentials with your API key.\n  4. Connect your Todoist account in the Todoist node.\n  5. Customize the LLM prompt (optional) to fine-tune task creation.\n\n\n\n### Additional Tips\n\n  * Explore Todoist's features to further organize and manage your tasks.\n  * Experiment with different LLM prompts to optimize task breakdown.\n  * Use n8n's features to automate other aspects of your workflow.\n\n\n\nThis workflow combines the convenience of Telegram with the power of AI and Todoist to provide a seamless task management experience. Start managing your tasks effortlessly today!\n",
  "crawled_at": "2025-05-26T03:36:06.533774",
  "readme_zh": "## 轻松任务管理：通过AI直接从Telegram创建Todoist任务\n\n这款n8n工作流让您能借助AI技术，直接从Telegram创建待办事项，实现无缝任务管理。只需向您的Telegram机器人发送语音或文字消息，工作流就会将其转化为Todoist账户中的可执行任务。\n\n### 适用人群\n\n* **忙碌的职场人士**：需要快速记录临时任务的移动办公族\n* **学生群体**：希望高效管理作业和课程项目的学习者\n* **所有追求效率的用户**：想用AI实现智能任务管理的任何人\n\n### 解决痛点\n\n彻底告别手动输入任务的繁琐流程，自动化实现任务的捕捉、整理与优先级排序，为您节省宝贵时间。\n\n### 核心优势\n\n* **无缝衔接**：Telegram与Todoist账号即时联通\n* **AI智能解析**：大语言模型自动拆分复杂任务为可执行子项\n* **语音转任务**：动动嘴就能创建任务，解放双手\n* **效率跃升**：快速捕捉并归类任务，保持专注高效\n* **全平台同步**：通过Todoist移动端和谷歌插件随时访问任务\n\n### 运作流程\n\n1. **发送指令**：向Telegram机器人描述任务（语音/文字）\n2. **AI处理**：通过OpenAI大模型解析任务结构\n3. **自动生成**：在Todoist中创建结构化任务清单\n4. **即时通知**：接收带任务链接的Telegram提醒\n\n### 工作流节点\n\n* **Telegram触发器**：监听消息输入\n* **路由开关**：区分语音/文本消息\n* **Telegram组件**：获取语音消息文件\n* **OpenAI模块**：通过Whisper API转译语音\n* **字段编辑器**：预处理文本内容\n* **LLM处理链**：调用GPT模型生成子任务\n* **结构化解析器**：提取标准化任务项\n* **Todoist组件**：创建最终任务\n* **Telegram通知**：发送任务完成提醒\n\n### 环境要求\n\n* 已部署的n8n实例\n* 具备机器人的Telegram账号\n* Todoist有效账户\n* OpenAI API密钥\n\n### 配置指南\n\n1. 将工作流JSON导入n8n\n2. 在Telegram触发器节点配置机器人令牌\n3. 设置OpenAI凭证（API密钥）\n4. 在Todoist节点绑定账户\n5. （可选）自定义LLM提示词优化任务生成\n\n### 进阶技巧\n\n* 深度利用Todoist的标签/优先级功能\n* 尝试不同LLM提示词组合提升任务解析精度\n* 结合n8n其他功能扩展自动化场景\n\n本方案融合Telegram的便捷性、AI的智能解析与Todoist的专业管理，打造流畅的任务处理体验。立即开启您的智能效率革命！",
  "title_zh": "轻松任务管理：通过AI直接在Telegram中创建Todoist任务",
  "publish_date_zh": "最后更新于2个月前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"b41148c809c7896d124743d940fc0964703e540af66564ef95e25a4ceea61c77\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"e87d3723-7e7a-4ff3-bffb-b2bd2096bd34\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        1080,\n        260\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"uFPD9I4pWJ4xUVf7\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"d25bf3ea-0de4-4317-9205-651f8a1a6ba8\",\n      \"name\": \"Basic LLM Chain\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        1060,\n        40\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.text }}\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"=Okay, I've further refined the system prompt to include only the \\\"content\\\" and \\\"priority\\\" fields in the JSON output for the Todoist tool. Here's the updated prompt:\\n\\n**System Prompt:**\\n\\n```\\nYou are an AI agent acting as a project management assistant. The user will provide you with a task or project description. Your job is to break down this task or project into smaller, manageable sub-tasks. You will then format each sub-task into a JSON object suitable for input to the \\\"Todoist\\\" tool and provide these JSON objects in a list.\\n\\n**Requirements:**\\n\\n1.  **Sub-Task Decomposition:** Break down the task or project provided by the user into logical and actionable sub-tasks. Each sub-task should be self-contained, completable, and measurable.\\n2.  **JSON Format for Todoist:** Format each sub-task as a JSON object with the following structure:\\n\\n    ```json\\n    {\\n      \\\"content\\\": \\\"[Task Description]\\\",\\n      \\\"priority\\\": [Priority Level (1-4, where 4 is highest)]\\n    }\\n    ```\\n\\n    *   `content`: A clear and concise description of the task.\\n    *   `priority`: An integer representing the task priority, ranging from 1 (lowest) to 4 (highest). Consider the importance and urgency of the task when assigning the priority.\\n\\n3.  **Tool Usage - Todoist JSON Output:** After decomposing the project into sub-tasks, you **MUST** format each sub-task into the JSON structure specified above and present all the JSON objects in a Python list. This list will be the direct input to the \\\"Todoist\\\" tool.\\n\\n4.  **Contextual Understanding:** Fully understand the context of the task or project provided by the user. If necessary, ask for additional information or clarification to resolve any ambiguities.\\n\\n5.  **Limitations:**\\n\\n    *   Avoid very general or abstract sub-tasks.\\n    *   Ensure that each sub-task is completable and measurable.\\n    *   When creating sub-tasks, consider the user's skills and resources.\\n    *   Ensure all the output is valid JSON format within a python list\\n\\n**User Input:**\\n\\nThe user will provide you with a task or project description in the following format:\\n\\n```\\nProject Description: [User's Entered Task or Project Description]\\n```\\n\\n**Example:**\\n\\n**User Input:**\\n\\n```\\nProject Description: Plan a team offsite.\\n```\\n\\n**LLM Response:**\\n\\n```python\\n[\\n  {\\n    \\\"content\\\": \\\"Research potential offsite locations.\\\",\\n    \\\"priority\\\": 3\\n  },\\n  {\\n    \\\"content\\\": \\\"Determine the budget for the offsite.\\\",\\n    \\\"priority\\\": 4\\n  },\\n  {\\n    \\\"content\\\": \\\"Send out a survey to gather team preferences.\\\",\\n    \\\"priority\\\": 3\\n  },\\n  {\\n    \\\"content\\\": \\\"Book the chosen venue.\\\",\\n    \\\"priority\\\": 4\\n  },\\n  {\\n    \\\"content\\\": \\\"Plan team-building activities.\\\",\\n    \\\"priority\\\": 2\\n  }\\n]\\n```\\n\\n**Key Changes and Explanations:**\\n\\n*   **Simplified JSON Structure:** The JSON object now only includes `content` and `priority`.\\n*   **Example Updated:** The example response reflects the simplified JSON format.\\n*   **Conciseness:** The prompt is now more concise, focusing only on the necessary fields.\\n\\n**Jinja2 Template Version**\\n\\n```python\\nfrom jinja2 import Template\\n\\ntemplate_string = \\\"\\\"\\\"\\nYou are an AI agent acting as a project management assistant. The user will provide you with a task or project description. Your job is to break down this task or project into smaller, manageable sub-tasks. You will then format each sub-task into a JSON object suitable for input to the \\\"Todoist\\\" tool and provide these JSON objects in a list.\\n\\n**Requirements:**\\n\\n1.  **Sub-Task Decomposition:** Break down the task or project provided by the user into logical and actionable sub-tasks. Each sub-task should be self-contained, completable, and measurable.\\n2.  **JSON Format for Todoist:** Format each sub-task as a JSON object with the following structure:\\n\\n    ```json\\n    {\\n      \\\"content\\\": \\\"[Task Description]\\\",\\n      \\\"priority\\\": [Priority Level (1-4, where 4 is highest)]\\n    }\\n    ```\\n\\n    *   `content`: A clear and concise description of the task.\\n    *   `priority`: An integer representing the task priority, ranging from 1 (lowest) to 4 (highest). Consider the importance and urgency of the task when assigning the priority.\\n\\n3.  **Tool Usage - Todoist JSON Output:** After decomposing the project into sub-tasks, you **MUST** format each sub-task into the JSON structure specified above and present all the JSON objects in a Python list. This list will be the direct input to the \\\"Todoist\\\" tool.\\n\\n4.  **Contextual Understanding:** Fully understand the context of the task or project provided by the user. If necessary, ask for additional information or clarification to resolve any ambiguities.\\n\\n5.  **Limitations:**\\n\\n    *   Avoid very general or abstract sub-tasks.\\n    *   Ensure that each sub-task is completable and measurable.\\n    *   When creating sub-tasks, consider the user's skills and resources.\\n    *   Ensure all the output is valid JSON format within a python list\\n\\n**User Input:**\\n\\nThe user will provide you with a task or project description in the following format:\\n\\n```\\nProject Description: {{ project_description }}\\n```\\n\\n**Example:**\\n\\n**User Input:**\\n\\n```\\nProject Description: Plan a team offsite.\\n```\\n\\n**LLM Response:**\\n\\n```python\\n[\\n  {\\n    \\\"content\\\": \\\"Research potential offsite locations.\\\",\\n    \\\"priority\\\": 3\\n  },\\n  {\\n    \\\"content\\\": \\\"Determine the budget for the offsite.\\\",\\n    \\\"priority\\\": 4\\n  },\\n  {\\n    \\\"content\\\": \\\"Send out a survey to gather team preferences.\\\",\\n    \\\"priority\\\": 3\\n  },\\n  {\\n    \\\"content\\\": \\\"Book the chosen venue.\\\",\\n    \\\"priority\\\": 4\\n  },\\n  {\\n    \\\"content\\\": \\\"Plan team-building activities.\\\",\\n    \\\"priority\\\": 2\\n  }\\n]\\n```\\n\\\"\\\"\\\"\\n\\ntemplate = Template(template_string)\\n\\n# Example Usage\\nproject_description = \\\"Plan a team offsite.\\\"\\nprompt = template.render(project_description=project_description)\\n\\nprint(prompt)\\n```\\n \\n\"\n            }\n          ]\n        },\n        \"promptType\": \"define\",\n        \"hasOutputParser\": true\n      },\n      \"typeVersion\": 1.5\n    },\n    {\n      \"id\": \"ddfe59c5-574c-470b-b2cc-efa05da74972\",\n      \"name\": \"Receive Telegram Messages\",\n      \"type\": \"n8n-nodes-base.telegramTrigger\",\n      \"position\": [\n        -220,\n        -100\n      ],\n      \"webhookId\": \"4e2cd560-ae4e-4ed7-a8ea-984518404e51\",\n      \"parameters\": {\n        \"updates\": [\n          \"message\"\n        ],\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"lff3pLERRdQmkmeV\",\n          \"name\": \"Telegram account\"\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"23f2cedd-bcd2-4a94-acc1-8829b30553dc\",\n      \"name\": \"Voice or Text?\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        140,\n        -20\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"Audio\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"af30c479-4542-405f-b315-37c50c4e2bef\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"exists\",\n                      \"singleValue\": true\n                    },\n                    \"leftValue\": \"={{ $json.message.voice.file_id }}\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"Text\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"a3ca8cd4-fbb2-40b5-829a-24724f2fbc85\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"exists\",\n                      \"singleValue\": true\n                    },\n                    \"leftValue\": \"={{ $json.message.text || \\\"\\\" }}\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"Error\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"9bcfdee0-2f09-4037-a7b9-689ef392371d\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"exists\",\n                      \"singleValue\": true\n                    },\n                    \"leftValue\": \"error\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"128e8268-a256-4256-8757-9ece8be86d75\",\n      \"name\": \"Fetch Voice Message\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        500,\n        -120\n      ],\n      \"webhookId\": \"23645237-4943-4c32-b18c-97c410cc3409\",\n      \"parameters\": {\n        \"fileId\": \"={{ $json.message.voice.file_id }}\",\n        \"resource\": \"file\"\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"lff3pLERRdQmkmeV\",\n          \"name\": \"Telegram account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"d8219ba5-bb33-44f5-a9a2-65fd16be335b\",\n      \"name\": \"Transcribe Voice to Text\",\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"position\": [\n        720,\n        -120\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"resource\": \"audio\",\n        \"operation\": \"translate\"\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"uFPD9I4pWJ4xUVf7\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"0c5f5568-fd14-4c65-8661-ebc5803158ce\",\n      \"name\": \"Prepare for LLM\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        620,\n        100\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"b324a329-3c49-4f7f-b683-74331b7fe7f8\",\n              \"name\": \"=text\",\n              \"type\": \"string\",\n              \"value\": \"={{$json.message.text}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"76ed8f5c-59f7-4cb9-9e59-25ac7e9e8c60\",\n      \"name\": \"Extract Tasks\",\n      \"type\": \"@n8n/n8n-nodes-langchain.outputParserStructured\",\n      \"position\": [\n        1220,\n        260\n      ],\n      \"parameters\": {\n        \"jsonSchemaExample\": \"  {\\n    \\\"content\\\": \\\"Send out invitations.\\\",\\n    \\\"priority\\\": 3\\n  }\"\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"7d0dbcb7-aac1-4eea-8f0b-6173148bfd3f\",\n      \"name\": \"Create Todoist Tasks\",\n      \"type\": \"n8n-nodes-base.todoist\",\n      \"position\": [\n        1620,\n        40\n      ],\n      \"parameters\": {\n        \"content\": \"={{ $json.output.content }}\",\n        \"options\": {\n          \"priority\": \"={{ $json.output.priority }}\"\n        },\n        \"project\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"2349786654\",\n          \"cachedResultName\": \"Task\"\n        }\n      },\n      \"credentials\": {\n        \"todoistApi\": {\n          \"id\": \"yqSn5VBXyA4R6hgt\",\n          \"name\": \"Todoist account\"\n        }\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"544b3f63-8ac1-4f81-9c24-943df16d9324\",\n      \"name\": \"Send Confirmation\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        1880,\n        40\n      ],\n      \"webhookId\": \"5699aecd-e061-4b7f-af7b-4a23eb7201c6\",\n      \"parameters\": {\n        \"text\": \"=Task : {{ $json.content }} Task Link :{{ $json.url }}\",\n        \"chatId\": \"={{ $('Receive Telegram Messages').item.json.message.chat.id }}\",\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"lff3pLERRdQmkmeV\",\n          \"name\": \"Telegram account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"b244f935-3047-4581-84ac-b01b2f962c1d\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -260,\n        -240\n      ],\n      \"parameters\": {\n        \"width\": 260,\n        \"height\": 320,\n        \"content\": \"**该工作流程负责监听来自Telegram用户的语音或文字消息。**\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fa99930d-8e75-4f1e-aa9b-47c38e611538\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        440,\n        -220\n      ],\n      \"parameters\": {\n        \"width\": 460,\n        \"height\": 260,\n        \"content\": \"**语音消息从Telegram获取，并通过OpenAI的Whisper API转录为文本。**\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"beb460c9-0412-40c4-a3cf-76660eb0e1b8\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1000,\n        -60\n      ],\n      \"parameters\": {\n        \"width\": 380,\n        \"height\": 440,\n        \"content\": \"**LLM（OpenAI聊天模型）分析文本并将其分解为任务和子任务，格式适配Todoist。**\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Extract Tasks\": {\n      \"ai_outputParser\": [\n        [\n          {\n            \"node\": \"Basic LLM Chain\",\n            \"type\": \"ai_outputParser\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Voice or Text?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Fetch Voice Message\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Prepare for LLM\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Basic LLM Chain\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create Todoist Tasks\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prepare for LLM\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Basic LLM Chain\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Basic LLM Chain\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Fetch Voice Message\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Transcribe Voice to Text\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create Todoist Tasks\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Confirmation\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Transcribe Voice to Text\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Basic LLM Chain\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Receive Telegram Messages\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Voice or Text?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}