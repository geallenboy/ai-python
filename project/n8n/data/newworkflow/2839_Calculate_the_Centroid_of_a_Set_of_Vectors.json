{
  "url": "https://n8n.io/workflows/2839-calculate-the-centroid-of-a-set-of-vectors/",
  "title": "Calculate the Centroid of a Set of Vectors",
  "author": "Mauricio Perera",
  "publish_date": "Last update 4 months ago",
  "publish_date_absolute": "2025-01-26",
  "categories": [
    {
      "name": "Other"
    },
    {
      "name": "Building Blocks"
    }
  ],
  "workflow_json": "{\"id\":\"g3q68zSOQvTcydLs\",\"meta\":{\"instanceId\":\"92786e96ce436aecd3a1d62d818a74e51ca684bb36c805928bef93a3b46549ad\"},\"name\":\"Calculate the Centroid of a Set of Vectors\",\"tags\":[],\"nodes\":[{\"id\":\"32a8aa56-aa7e-4c9e-a39e-f65234224bcf\",\"name\":\"Receive Vectors\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[-440,20],\"webhookId\":\"30091e91-fc67-4bab-b1fd-ed65c8f4f860\",\"parameters\":{\"path\":\"centroid\",\"options\":{},\"responseMode\":\"responseNode\"},\"notesInFlow\":true,\"typeVersion\":2},{\"id\":\"a020a49a-cc9f-49af-aa95-829d9d16da04\",\"name\":\"Extract & Parse Vectors\",\"type\":\"n8n-nodes-base.set\",\"position\":[360,20],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"3e1d9e72-7668-427d-958c-42bff7270a37\",\"name\":\"vectors\",\"type\":\"array\",\"value\":\"={{ $json.query.vectors }}\"}]}},\"typeVersion\":3.4},{\"id\":\"2f328de6-4ef1-4aac-8838-d616637f4b88\",\"name\":\"Validate & Compute Centroid\",\"type\":\"n8n-nodes-base.code\",\"position\":[960,20],\"parameters\":{\"jsCode\":\"const input = items[0].json;\\nconst vectors = input.vectors;\\n\\nif (!Array.isArray(vectors) || vectors.length === 0) {\\n  return [{ json: { error: \\\"Invalid input: Expected an array of vectors.\\\" } }];\\n}\\n\\nconst dimension = vectors[0].length;\\nif (!vectors.every(v => v.length === dimension)) {\\n  return [{ json: { error: \\\"Vectors have inconsistent dimensions.\\\" } }];\\n}\\n\\nconst centroid = new Array(dimension).fill(0);\\nvectors.forEach(vector => {\\n  vector.forEach((val, index) => {\\n    centroid[index] += val;\\n  });\\n});\\n\\nfor (let i = 0; i < dimension; i++) {\\n  centroid[i] /= vectors.length;\\n}\\n\\nreturn [{ json: { centroid } }];\"},\"typeVersion\":2},{\"id\":\"821bc173-3578-4cf2-9fd7-8ea9cba8dc3f\",\"name\":\"Return Centroid Response\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"position\":[1640,20],\"parameters\":{\"options\":{}},\"typeVersion\":1.1},{\"id\":\"73964e7b-1217-422f-8078-09604fa2a3d7\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[20,-200],\"parameters\":{\"color\":3,\"width\":620,\"height\":420,\"content\":\"📌 **Description:**  \\nThis node extracts the `vectors` array from the **GET request** and converts it into a properly formatted array for processing.  \\n- **Ensures `vectors` is a valid array.**  \\n- **If the parameter is missing, it may generate an error.**  \\n\\n🔹 **Expected Output Example:**\\n```json\\n{\\n  \\\"vectors\\\": [[2,3,4],[4,5,6],[6,7,8]]\\n}\\n```\\n\"},\"typeVersion\":1},{\"id\":\"e4793b20-bfa6-4b08-b46c-f92d1c9c2622\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[640,-280],\"parameters\":{\"color\":4,\"width\":700,\"height\":500,\"content\":\"📌 **Description:**  \\nThis node performs **vector validation** and **centroid computation**.  \\n- **Validation:** Ensures all vectors have the same number of dimensions.  \\n- **Computation:** Averages each dimension to determine the centroid.  \\n- **If validation fails:** Returns an error message indicating inconsistent dimensions.  \\n\\n🔹 **Successful Output Example:**\\n```json\\n{\\n  \\\"centroid\\\": [4,5,6]\\n}\\n```\\n🔹 **Error Output Example:**\\n```json\\n{\\n  \\\"error\\\": \\\"Vectors have inconsistent dimensions.\\\"\\n}\\n```\\n\"},\"typeVersion\":1},{\"id\":\"e0ac1c4d-0435-44d1-ba87-0cfc9dea207b\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1340,-200],\"parameters\":{\"color\":2,\"width\":680,\"height\":420,\"content\":\"📌 **Description:**  \\nThis node sends the **final response** back to the client that made the request.  \\n- **If the computation is successful**, it returns the centroid.  \\n- **If an error occurs**, it returns a descriptive error message.  \\n\\n🔹 **Example Response:**\\n```json\\n{\\n  \\\"centroid\\\": [4, 5, 6]\\n}\\n```\\n\"},\"typeVersion\":1},{\"id\":\"2b4fbae7-c2e5-4666-ba9f-72a5313fc16f\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-820,-200],\"parameters\":{\"color\":4,\"width\":840,\"height\":420,\"content\":\"📌 **Description:**  \\nThis node acts as the **entry point** for the workflow, receiving a **GET request** containing an array of vectors in the `vectors` parameter.  \\n- **Expected Input:** `vectors` parameter in JSON format.  \\n- **Example Request:**  \\n  ```plaintext\\n  https://actions.singular-innovation.com/webhook-test/centroid?vectors=[[2,3,4],[4,5,6],[6,7,8]]\\n  ```\\n- **Output:** Passes the received data to the next node for processing.\\n\"},\"typeVersion\":1}],\"active\":true,\"pinData\":{\"Receive Vectors\":[{\"json\":{\"body\":{},\"query\":{\"vectors\":\"[[2,3,4],[4,5,6],[6,7,8]]\"},\"params\":{},\"headers\":{\"host\":\"actions.singular-innovation.com\",\"accept\":\"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\"cookie\":\"rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX1%2FNTT5WOkcYG%2FWSKmLWL%2F6W9TAbYFEQv8s%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX19thqA5y56KyQdmUG3L%2BhCiYIxQok7WXRI%3D; n8n-auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImZjOTg1OTJjLTcwOWUtNGI5Mi1hODk0LWZiNjVlODY1ZmRlMiIsImhhc2giOiJhOFg4MW1zcU1zIiwiaWF0IjoxNzM3OTg1MzI5LCJleHAiOjE3Mzg1OTAxMjl9.GSjpKJ_cG5CqttWwhEeHOxWwlNByvLTu8CGH7ncVug8; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX1%2BickXpx2WwsiLS3K45TJoms2IgVIMIQRvQnuaNzfjLtzG9mEXObNu4ojurRNkdq0msPjPy10UDEQ%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX1%2BbvZ%2F6U02zoG3zOFSyRAIzp7gVabGBqqkm7MUCy3Wkn5WOQd%2F%2Bk5e8gVlJ%2BUkJOYJnhS%2F%2Btc7D99%2FTIaFVympE%2BjrtY7ydRWcd69oJHwZWGK%2BeCP1cKh9fqq%2B3sFCVYv7pnm4xMkAAwAM%2BDuzhFTZ0ZFWEA9t8z9M%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX19s%2BCzIY1zJrLksYKMyyTZBHFB0YpKHQWouDTpomPoyyHa9MtTtEUArCVmtBaEf%2FqNhQKJrC8I4hX%2FepCmsx8TqQ6Rzxij0%2FBPvvdq6JWijlttfLovsIF%2BjDLnmVfeRsPbdVgrJXo0neA%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%2292786e96ce436aecd3a1d62d818a74e51ca684bb36c805928bef93a3b46549ad%23fc98592c-709e-4b92-a894-fb65e865fde2%22%2C%22%24sesid%22%3A%5B1738160096669%2C%220194b262-b90a-74cf-ab0d-257b174571c7%22%2C1738159601930%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Factions.singular-innovation.com%2Fsignin%3Fredirect%3D%25252F%22%7D%7D; rl_session=RudderEncrypt%3AU2FsdGVkX19G2WmuxH5ZaEfkSkfe4e2i5iyzrvY4U6jPHxAnaSaY8YaPPAFRADU%2FgEyIFzVE0cEXdOZLTBcsa%2Byoiz3Wng4SqZeqnZu2pr1a%2FT0A6mSwTn%2Bw1Ki5ozJpDTVNg6%2BWfaNDa1LGpWRzCQ%3D%3D\",\"sec-ch-ua\":\"\\\"Google Chrome\\\";v=\\\"131\\\", \\\"Chromium\\\";v=\\\"131\\\", \\\"Not_A Brand\\\";v=\\\"24\\\"\",\"x-real-ip\":\"177.232.86.200\",\"connection\":\"close\",\"user-agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\",\"cache-control\":\"max-age=0\",\"sec-fetch-dest\":\"document\",\"sec-fetch-mode\":\"navigate\",\"sec-fetch-site\":\"none\",\"sec-fetch-user\":\"?1\",\"accept-encoding\":\"gzip, deflate, br, zstd\",\"accept-language\":\"es-419,es;q=0.9\",\"x-forwarded-for\":\"177.232.86.200\",\"sec-ch-ua-mobile\":\"?0\",\"x-forwarded-proto\":\"https\",\"sec-ch-ua-platform\":\"\\\"Windows\\\"\",\"upgrade-insecure-requests\":\"1\"},\"webhookUrl\":\"https://actions.singular-innovation.com/webhook-test/centroid\",\"executionMode\":\"test\"}}]},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"f9c7fa52-264b-4967-ae7a-62247cce7a50\",\"connections\":{\"Receive Vectors\":{\"main\":[[{\"node\":\"Extract & Parse Vectors\",\"type\":\"main\",\"index\":0}]]},\"Extract & Parse Vectors\":{\"main\":[[{\"node\":\"Validate & Compute Centroid\",\"type\":\"main\",\"index\":0}]]},\"Validate & Compute Centroid\":{\"main\":[[{\"node\":\"Return Centroid Response\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "# n8n Workflow: Calculate the Centroid of a Set of Vectors\n\n## Overview\n\nThis workflow receives an array of vectors in JSON format, validates that all vectors have the same dimensions, and computes the centroid. It is designed to be reusable across different projects.\n\n## Workflow Structure\n\n### Nodes and Their Functions:\n\n  1. **Receive Vectors (Webhook)** : Accepts a GET request containing an array of vectors in the `vectors` parameter.\n\n     * **Expected Input:** `vectors` parameter in JSON format.\n     * **Example Request:** `/webhook/centroid?vectors=[[2,3,4],[4,5,6],[6,7,8]]`\n     * **Output:** Passes the received data to the next node.\n  2. **Extract & Parse Vectors (Set Node)**: Converts the input string into a proper JSON array for processing.\n\n     * **Ensures`vectors` is a valid array.**\n     * **If the parameter is missing, it may generate an error.**\n     * **Expected Output Example:**\n    \n    {\n      \"vectors\": [[2,3,4],[4,5,6],[6,7,8]]\n    }\n    \n\n  3. **Validate & Compute Centroid (Code Node)**: Validates vector dimensions and calculates the centroid.\n\n     * **Validation:** Ensures all vectors have the same number of dimensions.\n     * **Computation:** Averages each dimension to determine the centroid.\n     * **If validation fails:** Returns an error message indicating inconsistent dimensions.\n     * **Successful Output Example:**\n    \n    {\n      \"centroid\": [4,5,6]\n    }\n    \n\n     * **Error Output Example:**\n    \n    {\n      \"error\": \"Vectors have inconsistent dimensions.\"\n    }\n    \n\n  4. **Return Centroid Response (Respond to Webhook Node)** : Sends the final response back to the client.\n\n     * **If the computation is successful** , it returns the centroid.\n     * **If an error occurs** , it returns a descriptive error message.\n     * **Example Response:**\n    \n    {\n      \"centroid\": [4, 5, 6]\n    }\n    \n\n\n\n\n## Inputs\n\n  * JSON array of vectors, where each vector is an array of numerical values.\n\n\n\n### Example Input\n    \n    \n    {\n      \"vectors\": [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n      ]\n    }\n    \n\n## Setup Guide\n\n  1. **Create a new workflow in n8n**.\n  2. **Add a Webhook node** (`Receive Vectors`) to receive JSON input.\n  3. **Add a Set node** (`Extract & Parse Vectors`) to extract and convert the data.\n  4. **Add a Code node** (`Validate & Compute Centroid`) to: \n     * Validate dimensions.\n     * Compute the centroid.\n  5. **Add a Respond to Webhook node** (`Return Centroid Response`) to return the result.\n\n\n\n### Function Node Script Example\n    \n    \n    const input = items[0].json;\n    const vectors = input.vectors;\n    \n    if (!Array.isArray(vectors) || vectors.length === 0) {\n      return [{ json: { error: \"Invalid input: Expected an array of vectors.\" } }];\n    }\n    \n    const dimension = vectors[0].length;\n    if (!vectors.every(v =&gt; v.length === dimension)) {\n      return [{ json: { error: \"Vectors have inconsistent dimensions.\" } }];\n    }\n    \n    const centroid = new Array(dimension).fill(0);\n    vectors.forEach(vector =&gt; {\n      vector.forEach((val, index) =&gt; {\n        centroid[index] += val;\n      });\n    });\n    \n    for (let i = 0; i &lt; dimension; i++) {\n      centroid[i] /= vectors.length;\n    }\n    \n    return [{ json: { centroid } }];\n    \n\n## Testing\n\n  * Use a tool like Postman or the n8n UI to send sample inputs and verify the responses.\n  * Modify the input vectors to test different scenarios.\n\n\n\nThis workflow provides a simple yet flexible solution for vector centroid computation, ensuring validation and reliability.\n",
  "crawled_at": "2025-05-26T02:09:26.343532",
  "readme_zh": "# n8n工作流：计算向量集合的质心\n\n## 概述\n\n本工作流接收JSON格式的向量数组，验证所有向量是否具有相同维度，并计算质心。设计适用于不同项目的可复用场景。\n\n## 工作流结构\n\n### 节点功能说明：\n\n1. **接收向量（Webhook节点）**：通过GET请求接收包含向量数组的`vectors`参数\n   * **输入要求**：JSON格式的`vectors`参数\n   * **示例请求**：`/webhook/centroid?vectors=[[2,3,4],[4,5,6],[6,7,8]]`\n   * **输出**：将接收数据传递给下一节点\n\n2. **提取解析向量（Set节点）**：将输入字符串转换为可处理的JSON数组\n   * **确保`vectors`是有效数组**\n   * **参数缺失时可能报错**\n   * **预期输出示例**：\n```json\n{\n  \"vectors\": [[2,3,4],[4,5,6],[6,7,8]]\n}\n```\n\n3. **验证并计算质心（Code节点）**：验证向量维度并计算质心\n   * **验证**：确保所有向量维度一致\n   * **计算**：对各维度求平均值确定质心\n   * **验证失败时**：返回维度不一致错误\n   * **成功输出示例**：\n```json\n{\n  \"centroid\": [4,5,6]\n}\n```\n   * **错误输出示例**：\n```json\n{\n  \"error\": \"向量维度不一致\"\n}\n```\n\n4. **返回质心响应（Webhook响应节点）**：向客户端返回最终结果\n   * **计算成功时**返回质心坐标\n   * **发生错误时**返回描述性错误信息\n   * **响应示例**：\n```json\n{\n  \"centroid\": [4, 5, 6]\n}\n```\n\n## 输入参数\n\n* 向量JSON数组，每个向量为数值型数组\n\n### 输入示例\n```json\n{\n  \"vectors\": [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ]\n}\n```\n\n## 配置指南\n\n1. **在n8n创建新工作流**\n2. **添加Webhook节点**（接收向量）用于接收JSON输入\n3. **添加Set节点**（提取解析向量）转换数据格式\n4. **添加Code节点**（验证计算质心）实现：\n   * 维度验证\n   * 质心计算\n5. **添加Webhook响应节点**（返回质心响应）输出结果\n\n### 函数节点脚本示例\n```javascript\nconst input = items[0].json;\nconst vectors = input.vectors;\n\nif (!Array.isArray(vectors) || vectors.length === 0) {\n  return [{ json: { error: \"无效输入：应为向量数组\" } }];\n}\n\nconst dimension = vectors[0].length;\nif (!vectors.every(v => v.length === dimension)) {\n  return [{ json: { error: \"向量维度不一致\" } }];\n}\n\nconst centroid = new Array(dimension).fill(0);\nvectors.forEach(vector => {\n  vector.forEach((val, index) => {\n    centroid[index] += val;\n  });\n});\n\nfor (let i = 0; i < dimension; i++) {\n  centroid[i] /= vectors.length;\n}\n\nreturn [{ json: { centroid } }];\n```\n\n## 测试验证\n\n* 使用Postman或n8n界面发送测试数据验证响应\n* 修改输入向量测试不同场景\n\n本工作流提供简洁灵活的向量质心计算方案，确保验证可靠性和计算准确性。",
  "title_zh": "计算一组向量的质心",
  "publish_date_zh": "最后更新于3个月前",
  "workflow_json_zh": "{\n  \"id\": \"g3q68zSOQvTcydLs\",\n  \"meta\": {\n    \"instanceId\": \"92786e96ce436aecd3a1d62d818a74e51ca684bb36c805928bef93a3b46549ad\"\n  },\n  \"name\": \"Calculate the Centroid of a Set of Vectors\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"32a8aa56-aa7e-4c9e-a39e-f65234224bcf\",\n      \"name\": \"Receive Vectors\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -440,\n        20\n      ],\n      \"webhookId\": \"30091e91-fc67-4bab-b1fd-ed65c8f4f860\",\n      \"parameters\": {\n        \"path\": \"centroid\",\n        \"options\": {},\n        \"responseMode\": \"responseNode\"\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"a020a49a-cc9f-49af-aa95-829d9d16da04\",\n      \"name\": \"Extract & Parse Vectors\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        360,\n        20\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"3e1d9e72-7668-427d-958c-42bff7270a37\",\n              \"name\": \"vectors\",\n              \"type\": \"array\",\n              \"value\": \"={{ $json.query.vectors }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"2f328de6-4ef1-4aac-8838-d616637f4b88\",\n      \"name\": \"Validate & Compute Centroid\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        960,\n        20\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const input = items[0].json;\\nconst vectors = input.vectors;\\n\\nif (!Array.isArray(vectors) || vectors.length === 0) {\\n  return [{ json: { error: \\\"Invalid input: Expected an array of vectors.\\\" } }];\\n}\\n\\nconst dimension = vectors[0].length;\\nif (!vectors.every(v => v.length === dimension)) {\\n  return [{ json: { error: \\\"Vectors have inconsistent dimensions.\\\" } }];\\n}\\n\\nconst centroid = new Array(dimension).fill(0);\\nvectors.forEach(vector => {\\n  vector.forEach((val, index) => {\\n    centroid[index] += val;\\n  });\\n});\\n\\nfor (let i = 0; i < dimension; i++) {\\n  centroid[i] /= vectors.length;\\n}\\n\\nreturn [{ json: { centroid } }];\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"821bc173-3578-4cf2-9fd7-8ea9cba8dc3f\",\n      \"name\": \"Return Centroid Response\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        1640,\n        20\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"73964e7b-1217-422f-8078-09604fa2a3d7\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        20,\n        -200\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 620,\n        \"height\": 420,\n        \"content\": \"📌 **功能描述：**  \\n该节点从 **GET请求** 中提取 `vectors` 数组，并将其转换为格式规范的数组以供处理。  \\n- **确保 `vectors` 为有效数组**  \\n- **若参数缺失，可能触发错误**  \\n\\n🔹 **预期输出示例：**\\n```json\\n{\\n  \\\"vectors\\\": [[2,3,4],[4,5,6],[6,7,8]]\\n}\\n```\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e4793b20-bfa6-4b08-b46c-f92d1c9c2622\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        640,\n        -280\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 700,\n        \"height\": 500,\n        \"content\": \"📌 **功能描述：**  \\n该节点执行**向量校验**与**质心计算**。  \\n- **校验机制：** 确保所有向量维度一致。  \\n- **计算逻辑：** 通过各维度求均值确定质心坐标。  \\n- **校验失败时：** 返回维度不一致的报错信息。  \\n\\n✨ **成功输出示例：**\\n```json\\n{\\n  \\\"centroid\\\": [4,5,6]\\n}\\n```\\n⚠ **错误输出示例：**\\n```json\\n{\\n  \\\"error\\\": \\\"向量维度不一致\\\"\\n}\\n```\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e0ac1c4d-0435-44d1-ba87-0cfc9dea207b\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1340,\n        -200\n      ],\n      \"parameters\": {\n        \"color\": 2,\n        \"width\": 680,\n        \"height\": 420,\n        \"content\": \"📌 **说明：**  \\n此节点将**最终响应**返回给发起请求的客户端。  \\n- **若计算成功**，则返回质心坐标。  \\n- **若发生错误**，则返回错误描述信息。  \\n\\n🔹 **响应示例：**\\n```json\\n{\\n  \\\"质心\\\": [4, 5, 6]\\n}\\n```\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2b4fbae7-c2e5-4666-ba9f-72a5313fc16f\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -820,\n        -200\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 840,\n        \"height\": 420,\n        \"content\": \"📌 **功能说明：**  \\n该节点作为工作流的**入口**，接收一个包含向量数组的**GET请求**，数组通过`vectors`参数传递。  \\n- **预期输入：** JSON格式的`vectors`参数。  \\n- **请求示例：**  \\n  ```plaintext\\n  https://actions.singular-innovation.com/webhook-test/centroid?vectors=[[2,3,4],[4,5,6],[6,7,8]]\\n  ```\\n- **输出：** 将接收到的数据传递给下一个节点进行处理。\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {\n    \"Receive Vectors\": [\n      {\n        \"json\": {\n          \"body\": {},\n          \"query\": {\n            \"vectors\": \"[[2,3,4],[4,5,6],[6,7,8]]\"\n          },\n          \"params\": {},\n          \"headers\": {\n            \"host\": \"actions.singular-innovation.com\",\n            \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\n            \"cookie\": \"rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX1%2FNTT5WOkcYG%2FWSKmLWL%2F6W9TAbYFEQv8s%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX19thqA5y56KyQdmUG3L%2BhCiYIxQok7WXRI%3D; n8n-auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImZjOTg1OTJjLTcwOWUtNGI5Mi1hODk0LWZiNjVlODY1ZmRlMiIsImhhc2giOiJhOFg4MW1zcU1zIiwiaWF0IjoxNzM3OTg1MzI5LCJleHAiOjE3Mzg1OTAxMjl9.GSjpKJ_cG5CqttWwhEeHOxWwlNByvLTu8CGH7ncVug8; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX1%2BickXpx2WwsiLS3K45TJoms2IgVIMIQRvQnuaNzfjLtzG9mEXObNu4ojurRNkdq0msPjPy10UDEQ%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX1%2BbvZ%2F6U02zoG3zOFSyRAIzp7gVabGBqqkm7MUCy3Wkn5WOQd%2F%2Bk5e8gVlJ%2BUkJOYJnhS%2F%2Btc7D99%2FTIaFVympE%2BjrtY7ydRWcd69oJHwZWGK%2BeCP1cKh9fqq%2B3sFCVYv7pnm4xMkAAwAM%2BDuzhFTZ0ZFWEA9t8z9M%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX19s%2BCzIY1zJrLksYKMyyTZBHFB0YpKHQWouDTpomPoyyHa9MtTtEUArCVmtBaEf%2FqNhQKJrC8I4hX%2FepCmsx8TqQ6Rzxij0%2FBPvvdq6JWijlttfLovsIF%2BjDLnmVfeRsPbdVgrJXo0neA%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%2292786e96ce436aecd3a1d62d818a74e51ca684bb36c805928bef93a3b46549ad%23fc98592c-709e-4b92-a894-fb65e865fde2%22%2C%22%24sesid%22%3A%5B1738160096669%2C%220194b262-b90a-74cf-ab0d-257b174571c7%22%2C1738159601930%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Factions.singular-innovation.com%2Fsignin%3Fredirect%3D%25252F%22%7D%7D; rl_session=RudderEncrypt%3AU2FsdGVkX19G2WmuxH5ZaEfkSkfe4e2i5iyzrvY4U6jPHxAnaSaY8YaPPAFRADU%2FgEyIFzVE0cEXdOZLTBcsa%2Byoiz3Wng4SqZeqnZu2pr1a%2FT0A6mSwTn%2Bw1Ki5ozJpDTVNg6%2BWfaNDa1LGpWRzCQ%3D%3D\",\n            \"sec-ch-ua\": \"\\\"Google Chrome\\\";v=\\\"131\\\", \\\"Chromium\\\";v=\\\"131\\\", \\\"Not_A Brand\\\";v=\\\"24\\\"\",\n            \"x-real-ip\": \"177.232.86.200\",\n            \"connection\": \"close\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\",\n            \"cache-control\": \"max-age=0\",\n            \"sec-fetch-dest\": \"document\",\n            \"sec-fetch-mode\": \"navigate\",\n            \"sec-fetch-site\": \"none\",\n            \"sec-fetch-user\": \"?1\",\n            \"accept-encoding\": \"gzip, deflate, br, zstd\",\n            \"accept-language\": \"es-419,es;q=0.9\",\n            \"x-forwarded-for\": \"177.232.86.200\",\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"x-forwarded-proto\": \"https\",\n            \"sec-ch-ua-platform\": \"\\\"Windows\\\"\",\n            \"upgrade-insecure-requests\": \"1\"\n          },\n          \"webhookUrl\": \"https://actions.singular-innovation.com/webhook-test/centroid\",\n          \"executionMode\": \"test\"\n        }\n      }\n    ]\n  },\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"f9c7fa52-264b-4967-ae7a-62247cce7a50\",\n  \"connections\": {\n    \"Receive Vectors\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract & Parse Vectors\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract & Parse Vectors\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Validate & Compute Centroid\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Validate & Compute Centroid\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Return Centroid Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}