{
  "url": "https://n8n.io/workflows/3617-generate-monthly-financial-reports-with-gemini-ai-sql-and-outlook/",
  "title": "Generate Monthly Financial Reports with Gemini AI, SQL, and Outlook",
  "author": "Amjid Ali",
  "publish_date": "Last update a month ago",
  "publish_date_absolute": "",
  "categories": [
    {
      "name": "Finance"
    },
    {
      "name": "AI"
    }
  ],
  "workflow_json": "{\"meta\":{\"instanceId\":\"32d80f55a35a7b57f8e47a2ac19558d9f5bcec983a5519d9c29ba713ff4f12c7\"},\"nodes\":[{\"id\":\"fdd55253-5cb6-4b1f-9c93-6915f254f700\",\"name\":\"Schedule Trigger\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[-60,-240],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"months\",\"triggerAtDayOfMonth\":5}]}},\"typeVersion\":1.2},{\"id\":\"c8d6064a-3fd7-478d-891c-6ade336daa1f\",\"name\":\"YTD vs Prevoius Month1\",\"type\":\"n8n-nodes-base.mySql\",\"onError\":\"continueRegularOutput\",\"position\":[640,0],\"parameters\":{\"query\":\"SELECT\\n  --  budget_data.fiscal_year AS `Year`,\\n  --  budget_data.cost_center AS `Cost Center`,\\n    budget_data.budget_group AS `Budget Group`,\\n--    budget_data.sort_order AS `Sort Order`,\\n\\n    -- YTD Totals up to previous month (up to dynamic month)\\n    SUM(budget_data.budget_amount) AS `Budget YTD`,\\n    SUM(COALESCE(actual_data.actual_amount, 0)) AS `Actual YTD`,\\n    SUM(COALESCE(actual_data.actual_amount, 0)) - SUM(budget_data.budget_amount) AS `Variance YTD`,\\n\\n    -- Previous Month Totals Only\\n    SUM(CASE WHEN budget_data.budget_month = {{ $('PreviousMonth').item.json.previousMonth }} THEN budget_data.budget_amount ELSE 0 END) AS `Budget PM`,\\n    SUM(CASE WHEN budget_data.budget_month = {{ $('PreviousMonth').item.json.previousMonth }} THEN COALESCE(actual_data.actual_amount, 0) ELSE 0 END) AS `Actual PM`,\\n    SUM(CASE WHEN budget_data.budget_month = {{ $('PreviousMonth').item.json.previousMonth }} THEN COALESCE(actual_data.actual_amount, 0) ELSE 0 END) -\\n    SUM(CASE WHEN budget_data.budget_month = {{ $('PreviousMonth').item.json.previousMonth }} THEN budget_data.budget_amount ELSE 0 END) AS `Variance PM`\\n\\nFROM\\n    (\\n        SELECT\\n            bg.budget_group_name AS budget_group,\\n            bg.sort_order,\\n            bgd.fiscal_year,\\n            bgd.budget_month,\\n            bgd.cost_center,\\n            CAST(bgd.budget_amount AS DECIMAL(18,6)) AS budget_amount\\n        FROM\\n            `tabBudget Group Detail` bgd\\n        JOIN\\n            `tabBudget Group` bg ON bg.name = bgd.parent\\n        WHERE\\n            bgd.fiscal_year = {{ $('PreviousMonth').item.json.year }}\\n            AND bgd.budget_month <= {{ $('PreviousMonth').item.json.previousMonth }}\\n            AND bgd.cost_center = '{{ $json.CostCenter }}'\\n    ) AS budget_data\\n\\nLEFT JOIN (\\n    SELECT\\n        acc.budget_group AS budget_group,\\n        YEAR(gl.posting_date) AS fiscal_year,\\n        MONTH(gl.posting_date) AS budget_month,\\n        gl.cost_center,\\n        SUM(\\n            CASE \\n                WHEN acc.root_type = 'Income' THEN gl.credit - gl.debit\\n                WHEN acc.root_type = 'Expense' THEN gl.debit - gl.credit\\n                ELSE 0\\n            END\\n        ) AS actual_amount\\n    FROM\\n        `tabGL Entry` gl\\n    JOIN\\n        `tabAccount` acc ON gl.account = acc.name\\n    WHERE\\n        acc.budget_group IS NOT NULL\\n        AND acc.root_type IN ('Income', 'Expense')\\n        AND gl.docstatus = 1\\n        AND YEAR(gl.posting_date) = {{ $('PreviousMonth').item.json.year }}\\n        AND MONTH(gl.posting_date) <= {{ $('PreviousMonth').item.json.previousMonth }}\\n        AND gl.cost_center = '{{ $('Filter').item.json['Cost Center'] }}'\\n    GROUP BY\\n        acc.budget_group,\\n        YEAR(gl.posting_date),\\n        MONTH(gl.posting_date),\\n        gl.cost_center\\n) AS actual_data\\nON\\n    budget_data.budget_group = actual_data.budget_group AND\\n    budget_data.fiscal_year = actual_data.fiscal_year AND\\n    budget_data.budget_month = actual_data.budget_month AND\\n    budget_data.cost_center = actual_data.cost_center\\n\\nGROUP BY\\n    budget_data.fiscal_year,\\n    budget_data.cost_center,\\n    budget_data.budget_group,\\n    budget_data.sort_order\\n\\nORDER BY\\n    budget_data.cost_center,\\n    budget_data.sort_order,\\n    budget_data.budget_group;\\n\",\"options\":{},\"operation\":\"executeQuery\"},\"retryOnFail\":false,\"typeVersion\":2.4},{\"id\":\"13102b1c-8a06-4a23-8174-75254bf783ac\",\"name\":\"Loop Over Items\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[-40,200],\"parameters\":{\"options\":{}},\"typeVersion\":3},{\"id\":\"da2a0b30-3df4-430c-8cac-cd9d735ce759\",\"name\":\"CostCentrs\",\"type\":\"n8n-nodes-base.set\",\"position\":[1100,-240],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"ac6bcf14-13e3-464d-b9cd-4adee56018d7\",\"name\":\"Cost Center\",\"type\":\"string\",\"value\":\"={{ $json['Cost Center'] }}\"}]}},\"typeVersion\":3.4},{\"id\":\"7891d71c-18f8-4e07-aa30-f50bec10cef6\",\"name\":\"Date & Time\",\"type\":\"n8n-nodes-base.dateTime\",\"position\":[260,-240],\"parameters\":{\"options\":{}},\"typeVersion\":2},{\"id\":\"3e69dc27-0850-4978-bf10-e81ff575ec60\",\"name\":\"PreviousMonth\",\"type\":\"n8n-nodes-base.code\",\"position\":[520,-240],\"parameters\":{\"jsCode\":\"// Get the input date from the previous node\\nconst inputDateStr = $input.first().json.currentDate;\\nconst inputDate = new Date(inputDateStr);\\n\\n// Move to the first day of the current month\\ninputDate.setDate(1);\\n\\n// Step back one day to land in the previous month\\ninputDate.setDate(0);\\n\\n// Extract previous month and year\\nconst previousMonth = inputDate.getMonth() + 1; // Months are 0-based\\nconst year = inputDate.getFullYear(); // This will reflect the correct year, even in January\\n\\nreturn [\\n  {\\n    json: {\\n      previousMonth: previousMonth.toString().padStart(2, '0'), // e.g., \\\"01\\\", \\\"12\\\"\\n      year: year.toString()                                     // e.g., \\\"2024\\\"\\n    }\\n  }\\n];\\n\"},\"typeVersion\":2},{\"id\":\"f6776225-39d2-4746-a90f-b4d1b12a66ee\",\"name\":\"Selected Cost Center\",\"type\":\"n8n-nodes-base.set\",\"position\":[260,220],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"c4a6c71a-0df4-49df-9068-f039ddf7d507\",\"name\":\"CostCenter\",\"type\":\"string\",\"value\":\"={{ $json['Cost Center'] }}\"},{\"id\":\"ade95f85-baa2-4f5d-a125-7360b17cf99b\",\"name\":\"previousMonth\",\"type\":\"string\",\"value\":\"={{ $('PreviousMonth').item.json.previousMonth }}\"},{\"id\":\"36c1d772-5bb7-47a6-81f9-1b70208e558b\",\"name\":\"year\",\"type\":\"string\",\"value\":\"={{ $('PreviousMonth').item.json.year }}\"}]}},\"typeVersion\":3.4},{\"id\":\"1e23d876-21be-4d90-b5e4-38f3543a0c3b\",\"name\":\"Get Cost Centers with Budgets\",\"type\":\"n8n-nodes-base.mySql\",\"position\":[800,-240],\"parameters\":{\"query\":\"SELECT DISTINCT\\n    budget_data.cost_center AS `Cost Center`\\nFROM\\n(\\n    SELECT\\n        bgd.cost_center,\\n        bgd.fiscal_year,\\n        bgd.budget_month\\n    FROM\\n        `tabBudget Group Detail` bgd\\n    JOIN\\n        `tabBudget Group` bg ON bg.name = bgd.parent\\n    WHERE\\n        bgd.fiscal_year = {{ $json.year }}\\n        AND bgd.budget_month <= {{ $json.previousMonth }}\\n) AS budget_data\\n\\nINNER JOIN\\n(\\n    SELECT DISTINCT\\n        gl.cost_center,\\n        YEAR(gl.posting_date) AS fiscal_year,\\n        MONTH(gl.posting_date) AS budget_month\\n    FROM\\n        `tabGL Entry` gl\\n    JOIN\\n        `tabAccount` acc ON gl.account = acc.name\\n    WHERE\\n        acc.budget_group IS NOT NULL\\n        AND acc.root_type IN ('Income', 'Expense')\\n        AND gl.docstatus = 1\\n        AND YEAR(gl.posting_date) = {{ $json.year }}\\n        AND MONTH(gl.posting_date) <= {{ $json.previousMonth }}\\n        AND gl.cost_center IS NOT NULL\\n) AS gl_data\\nON\\n    budget_data.cost_center = gl_data.cost_center\\n    AND budget_data.fiscal_year = gl_data.fiscal_year\\n    AND budget_data.budget_month = gl_data.budget_month\\n\\nORDER BY\\n    budget_data.cost_center;\\n\",\"options\":{},\"operation\":\"executeQuery\"},\"typeVersion\":2.4},{\"id\":\"d4429595-b1b9-4121-a612-24be11e6a36a\",\"name\":\"Filter\",\"type\":\"n8n-nodes-base.filter\",\"position\":[1380,-240],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"d7a13ce7-24d3-406a-934b-97f9a47b206c\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json['Cost Center'] }}\",\"rightValue\":\"AI DEPARTMENT\"}]}},\"typeVersion\":2.2},{\"id\":\"67bbe834-ae40-4aad-b468-6fa73c9dc6c6\",\"name\":\"HTML\",\"type\":\"n8n-nodes-base.html\",\"position\":[40,920],\"parameters\":{\"html\":\"{{ $json.html }}\"},\"typeVersion\":1.2},{\"id\":\"58d1dc63-9ba7-41b8-af39-b7c134ab3cea\",\"name\":\"verticalPL\",\"type\":\"n8n-nodes-base.code\",\"position\":[900,220],\"parameters\":{\"jsCode\":\"const rows = items;\\n\\n// Get column names from the first row\\nconst headers = Object.keys(rows[0].json);\\n\\n// Build header HTML\\nlet headerHtml = headers.map(col => `<th>${col}</th>`).join('');\\n\\n// Build rows\\nlet bodyHtml = rows.map(row => {\\n  return `<tr>${headers.map(col => `<td>${row.json[col]}</td>`).join('')}</tr>`;\\n}).join('');\\n\\n// Combine into one table\\nconst tableHtml = `\\n<table border=\\\"1\\\" cellpadding=\\\"6\\\" cellspacing=\\\"0\\\" style=\\\"border-collapse: collapse;\\\">\\n  <thead><tr>${headerHtml}</tr></thead>\\n  <tbody>${bodyHtml}</tbody>\\n</table>\\n`;\\n\\nreturn [{ json: { table: tableHtml } }];\\n\"},\"typeVersion\":2},{\"id\":\"9a8bdb09-f9d4-4c4b-b1d5-dadb3c6ee567\",\"name\":\"Merge\",\"type\":\"n8n-nodes-base.merge\",\"position\":[1380,220],\"parameters\":{\"numberInputs\":4},\"typeVersion\":3.1},{\"id\":\"d310db4d-183d-4f99-9bd0-863320d2db73\",\"name\":\"Code\",\"type\":\"n8n-nodes-base.code\",\"position\":[1420,580],\"parameters\":{\"jsCode\":\"const table1 = $input.first().json.table; // From the first input node\\nconst table2 = $items(\\\"verticalPL\\\")[0].json.table; // From the node named 'verticalPL'\\nconst table3 = $items(\\\"WIP1\\\")[0].json.table; // From the node named 'WIP1'\\nconst table4 = $items(\\\"Employees1\\\")[0].json.table; // From the node named 'Employees1'\\n\\nconst htmlOutput = `\\n<!DOCTYPE html>\\n<html>\\n<head>\\n  <style>\\n    body { font-family: Arial, sans-serif; font-size: 14px; color: #333; }\\n    h2 { margin-top: 30px; }\\n    table { border-collapse: collapse; width: 100%; margin-top: 10px; }\\n    th, td { border: 1px solid #ccc; padding: 8px; text-align: right; }\\n    th:first-child, td:first-child { text-align: left; }\\n    thead { background-color: #f0f0f0; }\\n  </style>\\n</head>\\n<body>\\n  <h2>📊 Financial Overview – YTD & PM Summary</h2>\\n  ${table1}\\n\\n  <h2>📊 Financial Overview – Vertical Profit & Loss</h2>\\n  ${table2}\\n\\n  <h2>📊 Financial Overview – WIP Summary</h2>\\n  ${table3}\\n\\n  <h2>👥 Employees in the Business Unit</h2>\\n  ${table4}\\n</body>\\n</html>\\n`;\\n\\nreturn [{ json: { html: htmlOutput } }];\\n\"},\"typeVersion\":2},{\"id\":\"ba5e60fb-d5cc-4a5f-9cb6-07808f7c7021\",\"name\":\"Microsoft Outlook2\",\"type\":\"n8n-nodes-base.microsoftOutlook\",\"position\":[1240,920],\"webhookId\":\"0cdef86a-9910-49aa-bdd3-1beecb260035\",\"parameters\":{\"subject\":\"=Business Performance Syncbricks\",\"bodyContent\":\"={{ $json['Email Output'] }}\",\"toRecipients\":\"amjid@amjidali.com\",\"additionalFields\":{\"bodyContentType\":\"html\"}},\"typeVersion\":2},{\"id\":\"c3cdf21d-417f-420b-98f9-dfca33119c5a\",\"name\":\"CostCenter\",\"type\":\"n8n-nodes-base.code\",\"position\":[920,0],\"parameters\":{\"jsCode\":\"const rows = items;\\n\\n// Get column names from the first row\\nconst headers = Object.keys(rows[0].json);\\n\\n// Build header HTML\\nlet headerHtml = headers.map(col => `<th>${col}</th>`).join('');\\n\\n// Build rows\\nlet bodyHtml = rows.map(row => {\\n  return `<tr>${headers.map(col => `<td>${row.json[col]}</td>`).join('')}</tr>`;\\n}).join('');\\n\\n// Combine into one table\\nconst tableHtml = `\\n<table border=\\\"1\\\" cellpadding=\\\"6\\\" cellspacing=\\\"0\\\" style=\\\"border-collapse: collapse;\\\">\\n  <thead><tr>${headerHtml}</tr></thead>\\n  <tbody>${bodyHtml}</tbody>\\n</table>\\n`;\\n\\nreturn [{ json: { table: tableHtml } }];\\n\"},\"typeVersion\":2},{\"id\":\"9d9fb099-5fca-4777-a753-f6791f37fd37\",\"name\":\"WIP1\",\"type\":\"n8n-nodes-base.code\",\"position\":[900,400],\"parameters\":{\"jsCode\":\"const rows = items;\\n\\n// Get column names from the first row\\nconst headers = Object.keys(rows[0].json);\\n\\n// Build header HTML\\nlet headerHtml = headers.map(col => `<th>${col}</th>`).join('');\\n\\n// Build rows\\nlet bodyHtml = rows.map(row => {\\n  return `<tr>${headers.map(col => `<td>${row.json[col]}</td>`).join('')}</tr>`;\\n}).join('');\\n\\n// Combine into one table\\nconst tableHtml = `\\n<table border=\\\"1\\\" cellpadding=\\\"6\\\" cellspacing=\\\"0\\\" style=\\\"border-collapse: collapse;\\\">\\n  <thead><tr>${headerHtml}</tr></thead>\\n  <tbody>${bodyHtml}</tbody>\\n</table>\\n`;\\n\\nreturn [{ json: { table: tableHtml } }];\\n\"},\"typeVersion\":2},{\"id\":\"5a6626ed-c841-4fd7-9111-f686fcacaa37\",\"name\":\"Employees\",\"type\":\"n8n-nodes-base.mySql\",\"onError\":\"continueRegularOutput\",\"position\":[640,600],\"parameters\":{\"query\":\"SELECT\\n   -- e.payroll_cost_center AS `Payroll Cost Center`,\\n    COUNT(*) AS `Total Employees`,\\n    COUNT(CASE WHEN YEAR(e.date_of_joining) = YEAR(CURDATE()) THEN 1 END) AS `Joined This Year`,\\n    COUNT(CASE WHEN YEAR(e.date_of_joining) = YEAR(CURDATE()) AND MONTH(e.date_of_joining) = MONTH(CURDATE()) THEN 1 END) AS `Joined This Month`\\nFROM\\n    `tabEmployee` e\\nWHERE\\n    e.status = 'Active'\\n    AND e.payroll_cost_center = '{{ $json.CostCenter }}'\\nGROUP BY\\n    e.payroll_cost_center;\\n\",\"options\":{},\"operation\":\"executeQuery\"},\"retryOnFail\":false,\"typeVersion\":2.4},{\"id\":\"bbfd2c19-9538-4106-8931-f65f0261d43c\",\"name\":\"Employees1\",\"type\":\"n8n-nodes-base.code\",\"position\":[900,600],\"parameters\":{\"jsCode\":\"const rows = items;\\n\\n// Get column names from the first row\\nconst headers = Object.keys(rows[0].json);\\n\\n// Build header HTML\\nlet headerHtml = headers.map(col => `<th>${col}</th>`).join('');\\n\\n// Build rows\\nlet bodyHtml = rows.map(row => {\\n  return `<tr>${headers.map(col => `<td>${row.json[col]}</td>`).join('')}</tr>`;\\n}).join('');\\n\\n// Combine into one table\\nconst tableHtml = `\\n<table border=\\\"1\\\" cellpadding=\\\"6\\\" cellspacing=\\\"0\\\" style=\\\"border-collapse: collapse;\\\">\\n  <thead><tr>${headerHtml}</tr></thead>\\n  <tbody>${bodyHtml}</tbody>\\n</table>\\n`;\\n\\nreturn [{ json: { table: tableHtml } }];\\n\"},\"typeVersion\":2},{\"id\":\"b425da91-2faa-4063-93dd-4d997f7cd7eb\",\"name\":\"Wait\",\"type\":\"n8n-nodes-base.wait\",\"position\":[1480,1180],\"webhookId\":\"83d7ae9a-e309-4bac-a0b4-5ff651e3afe3\",\"parameters\":{\"unit\":\"minutes\"},\"typeVersion\":1.1},{\"id\":\"5deead0c-d386-4b51-9b96-bd58e85244c0\",\"name\":\"Financial Performance\",\"type\":\"n8n-nodes-base.code\",\"position\":[700,920],\"parameters\":{\"jsCode\":\"let html = $input.first().json.output || '';\\n\\n// Remove ```html at the start and ``` at the end (if present)\\nhtml = html.trim().replace(/^```html\\\\s*/i, '').replace(/```$/i, '');\\n\\nreturn [{\\n  json: {\\n    cleaned_html: html\\n  }\\n}];\\n\"},\"typeVersion\":2},{\"id\":\"a472032f-42ba-4cb2-9bf7-55314083833e\",\"name\":\"Email Data\",\"type\":\"n8n-nodes-base.set\",\"position\":[940,920],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"b227e25f-99ce-4147-b22d-c2a6cabfcafa\",\"name\":\"CostCenter\",\"type\":\"string\",\"value\":\"={{ $('Selected Cost Center').first().json.CostCenter }}\\n\"},{\"id\":\"94e5a360-cbff-4498-bd75-98cafe08557b\",\"name\":\"Email Output\",\"type\":\"string\",\"value\":\"={{ $json.cleaned_html }}\"},{\"id\":\"20cd6408-ab44-4632-8f0a-967604f16a1c\",\"name\":\"For the Month\",\"type\":\"string\",\"value\":\"=Month : {{ $('PreviousMonth').first().json.previousMonth }} - {{ $('PreviousMonth').first().json.year }}\"}]}},\"typeVersion\":3.4},{\"id\":\"b7c1ae4d-cbe3-47fb-84fa-f34295f8dfee\",\"name\":\"Calculator\",\"type\":\"@n8n/n8n-nodes-langchain.toolCalculator\",\"position\":[620,1220],\"parameters\":{},\"typeVersion\":1},{\"id\":\"2e59b7b8-d8f6-4433-98c5-f637f6b5eaf4\",\"name\":\"Business Performance AI Agent (Analyst)\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"onError\":\"continueRegularOutput\",\"position\":[300,920],\"parameters\":{\"text\":\"=You are a Business Performance Analyst Expert in Financial Management of Syncbricks LLC,  you willbe given an input to Analyze the Financial Performance of syncbricks which is an AI and Automation Company.\\nThe sections Given to you will be below\\n\\n1. Financial Overview – YTD & PM Summary (whis is income and expense of the Company, this data doesn't include the calculation of Gross Profit and Net Profit that you must do. This should be used together in one section only don't seperate them)\\n2. Financial Overview – Vertical Profit & Loss (This containers the Verticials within the Cost Center, these are in fact the Sub Business Unit, you don't need to calculate anything but the information is for analysis to see how the Verticals within the Business Unit Perfored )\\n3. Financial Overview – WIP Summary (This is the Projects Summary about how many projects are currently open and work is the WIP - Work in Process of the Project, the WIP figure should be added for Profit and Loss Statement Under Proejct Reveneu as expected WIP)\\n4. Employees in the Business Unit (These will be the number of Employees who are directly working in this BU, which means these employees are only serving the Company, other staff which are in back office support are not included in this. )\\n*** Your Role ***\\n\\nYour Role is to Prepare a comprehensive Report : \\n1. Executive Summary : Tell how was the overall performance of the Business Unit.\\n2. Analayze the Financial Overview - YTD together with PM Summary (Which is Previous Month) which is previous month Income and Expenses you must use Proper Strcuture of Financial Statement with Budget Vs Actuals (follow same input already given). \\n\\nYou must use the Section that will be shared with you in detail that says \\\"Financial Overview – YTD & PM Summary \\\" and from there you must ensure to create sections based on best Practices of Performance Analysis that should include;\\n\\nSection: Revenue\\n-Projects - Revenue\\n-Trading - Revenue\\n-Service - Revenue\\nNet Sales (Total)\\nSection: Project Work in Process\\nWIP (Revenue to Book)\\nTotal: Gross Sale\\nSection: Cost of Sale\\nProjects - COGS\\nTrading - COGS\\nService - COGS\\nTotal Cost of Sales\\nGross Profit\\nOther Income\\nGross Income\\n\\nSection: Indirect Cost (here you must all the detail of expenses from \\\"Financial Overview – YTD & PM Summary\\\"\\nThen you must calculate\\nProfit / (Loss) before tax\\nNP % to Revenue\\n\\nUse the calculator tool to ensure precise calculations.\\n\\n\\n- Don't add decimals give format in currency but don't add symbol.\\nUse the standard P&L Format where you should first use Sale, then Cost of Sale and GP, then use Indirect Expenses and then Net Profile. Ensure to calculate the Perentages as well.\\n3. Provide the Summary of the Verticials Performance with their Profit and Loss and Percetage and Total of all Verticlals\\n4. Current Project Progress.\\n5. Employees Summary, Number of Employees, How many joined in this Year and what is per Eployee Revenue and Gross Profit \\n\\nAnalyze Overall Performance of the Company and provide the Business Managers an Overview of what should be done next. Calculate per employee profit as well and suggest what is the performance overall\\n\\n**Tools**\\nUse calculator tool to do all calculations for accurate calculations\\n\\n** Formatting and Output **\\n\\nGive output in html format fully responsive in with beauty added using CSS,  ready to be shared with all possible tables, in hightly attracrtive format, headings, add colors green for good, red for bad, organge for acceptable and so on, also add remarks to show how the performance was, enusre to response as if you were as an Expert in Analyzing the Bususiness Performance. Don't add any other infomration or symbols which are not part of html. Don't give additional message saying ok, I will do and so on.\\nAlign Text in table on left and numbers on right\\nNumber formatting : ##,###\\n\\n\\nHere is the data\\n\\nMonth : {{ $('PreviousMonth').first().json.previousMonth }}\\nYear  : {{ $('PreviousMonth').first().json.year }}\\n\\n{{ $json.html }}\\n\\n\",\"options\":{},\"promptType\":\"define\"},\"typeVersion\":1.8},{\"id\":\"3ac7b91e-ee61-4b40-9d2d-76d7916479ee\",\"name\":\"Think\",\"type\":\"@n8n/n8n-nodes-langchain.toolThink\",\"position\":[460,1220],\"parameters\":{},\"typeVersion\":1},{\"id\":\"97bac1cb-8271-4169-98cf-6ea5b06ef5db\",\"name\":\"Google Gemini Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\"position\":[220,1220],\"parameters\":{\"options\":{},\"modelName\":\"models/gemini-2.5-pro-exp-03-25\"},\"typeVersion\":1},{\"id\":\"27f40dc7-61b9-4e09-9b6d-6bb9d16c38c3\",\"name\":\"Departments \",\"type\":\"n8n-nodes-base.mySql\",\"onError\":\"continueRegularOutput\",\"position\":[640,200],\"parameters\":{\"query\":\"SELECT\\n   -- gl.vertical AS `Vertical`,\\n\\n    -- Total Income (based on root_type)\\n    ROUND(SUM(CASE WHEN acc.root_type = 'Income' THEN gl.credit - gl.debit ELSE 0 END), 0) AS `Total Income`,\\n\\n    -- Total Expenses (based on root_type)\\n    ROUND(SUM(CASE WHEN acc.root_type = 'Expense' THEN gl.debit - gl.credit ELSE 0 END), 0) AS `Total Expenses`,\\n\\n    -- Profit or Loss = Income - Expenses\\n    ROUND(SUM(\\n        CASE \\n            WHEN acc.root_type = 'Income' THEN gl.credit - gl.debit\\n            WHEN acc.root_type = 'Expense' THEN -1 * (gl.debit - gl.credit)\\n            ELSE 0\\n        END\\n    ), 0) AS `Profit or Loss`\\n\\nFROM\\n    `tabGL Entry` gl\\nJOIN\\n    `tabAccount` acc ON gl.account = acc.name\\n\\nWHERE\\n    acc.root_type IN ('Income', 'Expense')\\n    AND gl.docstatus = 1\\n    AND gl.cost_center = '{{ $(\\\"Selected Cost Center\\\").item.json.CostCenter }}'\\n    AND MONTH(gl.posting_date) = {{ $(\\\"Selected Cost Center\\\").item.json.previousMonth }}\\n    AND YEAR(gl.posting_date) = {{ $(\\\"Selected Cost Center\\\").item.json.year }}\\n\\nGROUP BY\\n    gl.vertical\\n\",\"options\":{},\"operation\":\"executeQuery\"},\"retryOnFail\":false,\"typeVersion\":2.4},{\"id\":\"b2a3ec7d-d400-4d1c-877d-f49f67ad742f\",\"name\":\"Projects\",\"type\":\"n8n-nodes-base.mySql\",\"onError\":\"continueRegularOutput\",\"position\":[620,380],\"parameters\":{\"query\":\"SELECT\\n   -- p.cost_center AS `Cost Center`,\\n    COUNT(DISTINCT p.name) AS `Projects`,\\n\\n    FORMAT(SUM(p.contract_value), 0) AS `Contract Value`,\\n    FORMAT(SUM(p.total_opening_revenue), 0) AS `Opening Revenue`,\\n    FORMAT(SUM(p.total_opening_cost), 0) AS `Opening Cost`,\\n\\n    -- New Revenue (GL)\\n    IFNULL((\\n        SELECT SUM(gl.credit - gl.debit)\\n        FROM `tabGL Entry` gl\\n        JOIN `tabAccount` acc ON acc.name = gl.account\\n        WHERE gl.docstatus = 1 AND acc.root_type = 'Income' AND acc.is_group = 0\\n          AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n          AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n    ), 0) AS `New Revenue`,\\n\\n    -- New Cost (GL)\\n    IFNULL((\\n        SELECT SUM(gl.debit - gl.credit)\\n        FROM `tabGL Entry` gl\\n        JOIN `tabAccount` acc ON acc.name = gl.account\\n        WHERE gl.docstatus = 1 AND acc.root_type = 'Expense' AND acc.is_group = 0\\n          AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n          AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n    ), 0) AS `New Cost`,\\n\\n    -- Actual Revenue\\n    FORMAT(\\n        SUM(p.total_opening_revenue) +\\n        IFNULL((\\n            SELECT SUM(gl.credit - gl.debit)\\n            FROM `tabGL Entry` gl\\n            JOIN `tabAccount` acc ON acc.name = gl.account\\n            WHERE gl.docstatus = 1 AND acc.root_type = 'Income' AND acc.is_group = 0\\n              AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n              AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n        ), 0), 0\\n    ) AS `Actual Revenue`,\\n\\n    -- Actual Cost\\n    FORMAT(\\n        SUM(p.total_opening_cost) +\\n        IFNULL((\\n            SELECT SUM(gl.debit - gl.credit)\\n            FROM `tabGL Entry` gl\\n            JOIN `tabAccount` acc ON acc.name = gl.account\\n            WHERE gl.docstatus = 1 AND acc.root_type = 'Expense' AND acc.is_group = 0\\n              AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n              AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n        ), 0), 0\\n    ) AS `Actual Cost`,\\n\\n    -- Invoice %\\n    CONCAT(ROUND((\\n        (\\n            SUM(p.total_opening_revenue) +\\n            IFNULL((\\n                SELECT SUM(gl.credit - gl.debit)\\n                FROM `tabGL Entry` gl\\n                JOIN `tabAccount` acc ON acc.name = gl.account\\n                WHERE gl.docstatus = 1 AND acc.root_type = 'Income' AND acc.is_group = 0\\n                  AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n                  AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n            ), 0)\\n        ) / NULLIF(SUM(p.contract_value), 0) * 100\\n    ), 0), '%') AS `Invoice %`,\\n\\n    -- Cost %\\n    CONCAT(ROUND((\\n        (\\n            SUM(p.total_opening_cost) +\\n            IFNULL((\\n                SELECT SUM(gl.debit - gl.credit)\\n                FROM `tabGL Entry` gl\\n                JOIN `tabAccount` acc ON acc.name = gl.account\\n                WHERE gl.docstatus = 1 AND acc.root_type = 'Expense' AND acc.is_group = 0\\n                  AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n                  AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n            ), 0)\\n        ) / NULLIF(SUM(p.budgeted_project_cost), 0) * 100\\n    ), 0), '%') AS `Cost %`,\\n\\n    -- WIP Calculation\\n    FORMAT(\\n        CASE\\n            WHEN SUM(p.budgeted_project_cost) = 0 THEN 0\\n            WHEN (\\n                SUM(p.total_opening_cost) +\\n                IFNULL((\\n                    SELECT SUM(gl.debit - gl.credit)\\n                    FROM `tabGL Entry` gl\\n                    JOIN `tabAccount` acc ON acc.name = gl.account\\n                    WHERE gl.docstatus = 1 AND acc.root_type = 'Expense' AND acc.is_group = 0\\n                      AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n                      AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n                ), 0)\\n            ) > SUM(p.budgeted_project_cost)\\n            THEN\\n                SUM(p.contract_value) -\\n                (SUM(p.total_opening_revenue) +\\n                IFNULL((\\n                    SELECT SUM(gl.credit - gl.debit)\\n                    FROM `tabGL Entry` gl\\n                    JOIN `tabAccount` acc ON acc.name = gl.account\\n                    WHERE gl.docstatus = 1 AND acc.root_type = 'Income' AND acc.is_group = 0\\n                      AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n                      AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n                ), 0))\\n            ELSE\\n                (SUM(p.contract_value) * (\\n                    (SUM(p.total_opening_cost) +\\n                    IFNULL((\\n                        SELECT SUM(gl.debit - gl.credit)\\n                        FROM `tabGL Entry` gl\\n                        JOIN `tabAccount` acc ON acc.name = gl.account\\n                        WHERE gl.docstatus = 1 AND acc.root_type = 'Expense' AND acc.is_group = 0\\n                          AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n                          AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n                    ), 0)) / NULLIF(SUM(p.budgeted_project_cost), 0)\\n                )) -\\n                (SUM(p.total_opening_revenue) +\\n                IFNULL((\\n                    SELECT SUM(gl.credit - gl.debit)\\n                    FROM `tabGL Entry` gl\\n                    JOIN `tabAccount` acc ON acc.name = gl.account\\n                    WHERE gl.docstatus = 1 AND acc.root_type = 'Income' AND acc.is_group = 0\\n                      AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n                      AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n                ), 0))\\n        END,\\n    0) AS `WIP`\\n\\nFROM\\n    `tabProject` p\\nWHERE\\n    p.cost_center = '{{ $json.CostCenter }}'\\n    AND p.status = 'Open'\\nGROUP BY\\n    p.cost_center;\\n\",\"options\":{},\"operation\":\"executeQuery\"},\"retryOnFail\":false,\"typeVersion\":2.4},{\"id\":\"a1c5f474-dc92-47e7-bf59-9cca756245cf\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1260,-20],\"parameters\":{\"width\":1120,\"height\":1200,\"content\":\"## Key Sections of n8n Workflow\\n\\n**🟢 Schedule Trigger**\\n- Triggers the automation on the 5th of every month.\\n- Sets the cadence for monthly reporting.\\n\\n**📅 Date & Time + 🧮 PreviousMonth**\\n- Captures the current date and derives the previous month/year for dynamic filtering.\\n- Used throughout all SQL queries for monthly slicing.\\n\\n**📊 Get Cost Centers with Budgets**\\n- Dynamically fetches all cost centers that have relevant budget and GL data for the selected period.\\n- Ensures only active, relevant divisions are processed.\\n\\n**🔍 Filter**\\n- Narrows the analysis to a specific Cost Center (e.g., \\\"AI DEPARTMENT\\\") during testing or preview.\\n\\n**🔁 Loop Over Items**\\n- Iterates over all fetched Cost Centers to individually generate reports for each business unit.\\n- Powers multi-division reporting automation.\\n\\n**🧾 YTD vs Previous Month1**\\n- Performs detailed financial comparison between Year-To-Date and Previous Month.\\n- Outputs revenue, expenses, and variance figures.\\n\\n**🏢 Departments + 🧱 verticalPL**\\n- Analyzes financial performance by sub-divisions (Verticals) within the cost center.\\n- Data is transformed into an HTML table for final report.\\n\\n**🧱 Projects + 🧮 WIP1**\\n- Gathers project status and WIP metrics.\\n- Calculates % invoiced, cost % used, and revenue recognition stats.\\n\\n**👥 Employees + 📊 Employees1**\\n- Counts total employees, joined this month/year for the selected cost center.\\n- Used to calculate per-employee KPIs.\\n\\n**🔗 Merge + 🧾 Code**\\n- Combines all HTML tables into a single responsive report with visual formatting.\\n- Clean, structured layout for email and review.\\n\\n**💡 Business Performance AI Agent (Analyst)**\\n- Uses Google Gemini 2.5 Pro to analyze financial HTML output.\\n- Executes structured analysis and generates business insights, executive summary, profitability, and recommendations.\\n\\n**📩 Email Data + Microsoft Outlook**\\n- Sends the final HTML report via email.\\n- Ready for business manager distribution with personalized message.\\n\\n**⏳ Wait**\\n- Enables looping and batch control across multiple cost centers.\\n- Prevents overloading or email spamming.\\n\\n**🧠 Think + Calculator**\\n- Used by the AI Agent to \\\"reason\\\" and perform precise financial computations.\\n- Ensures accuracy in gross/net profit, percentages, and insights.\"},\"typeVersion\":1},{\"id\":\"59500949-a8b9-4287-b6f7-be49e58e1842\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1960,580],\"parameters\":{\"color\":4,\"width\":680,\"height\":560,\"content\":\"## SQL Query Nodes \\n(e.g., YTD vs Previous Month, Projects, Employees, Departments)\\nThese nodes fetch structured financial data (like revenue, expenses, WIP, employee count) directly from your database (e.g., ERPNext on MySQL).\\n\\nYou can use any database (MySQL, PostgreSQL, MSSQL, etc.) as long as the schema is mapped accordingly.\\n\\nTo generate these queries faster, use ChatGPT or any AI chat tool:\\n👉 Just describe what you want (e.g., “monthly budget vs actual grouped by cost center”), and it will write SQL for you.\\n\\nYou can also replace these SQL nodes with any other data source:\\n\\nExcel/CSV File (via Google Drive or n8n Read Binary File)\\n\\nGoogle Sheets\\n\\nAirtable\\n\\nREST APIs\\n\\nInternal apps\\n\\n✅ The key is to produce the same structured data format expected by the next steps in the workflow.\"},\"typeVersion\":1},{\"id\":\"02f76680-0bbf-408f-826e-daef5e6e9b09\",\"name\":\"Sticky Note11\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1960,0],\"parameters\":{\"color\":4,\"width\":675,\"height\":536,\"content\":\"## Developed by Amjid Ali\\n\\nThank you for using this workflow template. It has taken me countless hours of hard work, research, and dedication to develop, and I sincerely hope it adds value to your work.\\n\\nIf you find this template helpful, I kindly ask you to consider supporting my efforts. Your support will help me continue improving and creating more valuable resources.\\n\\nYou can contribute via PayPal here:\\n\\nhttp://paypal.me/pmptraining\\n\\nFor Full Course about ERPNext or Automation using AI follow below link\\n\\nhttp://lms.syncbricks.com\\n\\nAdditionally, when sharing this template, I would greatly appreciate it if you include my original information to ensure proper credit is given.\\n\\nThank you for your generosity and support!\\nEmail : amjid@amjidali.com\\nhttps://linkedin.com/in/amjidali\\nhttps://syncbricks.com\\nhttps://youtube.com/@syncbricks\"},\"typeVersion\":1}],\"pinData\":{},\"connections\":{\"Code\":{\"main\":[[{\"node\":\"HTML\",\"type\":\"main\",\"index\":0}]]},\"HTML\":{\"main\":[[{\"node\":\"Business Performance AI Agent (Analyst)\",\"type\":\"main\",\"index\":0}]]},\"WIP1\":{\"main\":[[{\"node\":\"Merge\",\"type\":\"main\",\"index\":2}]]},\"Wait\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]},\"Merge\":{\"main\":[[{\"node\":\"Code\",\"type\":\"main\",\"index\":0}]]},\"Think\":{\"ai_tool\":[[{\"node\":\"Business Performance AI Agent (Analyst)\",\"type\":\"ai_tool\",\"index\":0}]]},\"Filter\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]},\"Projects\":{\"main\":[[{\"node\":\"WIP1\",\"type\":\"main\",\"index\":0}]]},\"Employees\":{\"main\":[[{\"node\":\"Employees1\",\"type\":\"main\",\"index\":0}]]},\"Calculator\":{\"ai_tool\":[[{\"node\":\"Business Performance AI Agent (Analyst)\",\"type\":\"ai_tool\",\"index\":0}]]},\"CostCenter\":{\"main\":[[{\"node\":\"Merge\",\"type\":\"main\",\"index\":0}]]},\"CostCentrs\":{\"main\":[[{\"node\":\"Filter\",\"type\":\"main\",\"index\":0}]]},\"Email Data\":{\"main\":[[{\"node\":\"Microsoft Outlook2\",\"type\":\"main\",\"index\":0}]]},\"Employees1\":{\"main\":[[{\"node\":\"Merge\",\"type\":\"main\",\"index\":3}]]},\"verticalPL\":{\"main\":[[{\"node\":\"Merge\",\"type\":\"main\",\"index\":1}]]},\"Date & Time\":{\"main\":[[{\"node\":\"PreviousMonth\",\"type\":\"main\",\"index\":0}]]},\"Departments \":{\"main\":[[{\"node\":\"verticalPL\",\"type\":\"main\",\"index\":0}]]},\"PreviousMonth\":{\"main\":[[{\"node\":\"Get Cost Centers with Budgets\",\"type\":\"main\",\"index\":0}]]},\"Loop Over Items\":{\"main\":[[],[{\"node\":\"Selected Cost Center\",\"type\":\"main\",\"index\":0}]]},\"Schedule Trigger\":{\"main\":[[{\"node\":\"Date & Time\",\"type\":\"main\",\"index\":0}]]},\"Microsoft Outlook2\":{\"main\":[[{\"node\":\"Wait\",\"type\":\"main\",\"index\":0}]]},\"Selected Cost Center\":{\"main\":[[{\"node\":\"YTD vs Prevoius Month1\",\"type\":\"main\",\"index\":0},{\"node\":\"Departments \",\"type\":\"main\",\"index\":0},{\"node\":\"Projects\",\"type\":\"main\",\"index\":0},{\"node\":\"Employees\",\"type\":\"main\",\"index\":0}]]},\"Financial Performance\":{\"main\":[[{\"node\":\"Email Data\",\"type\":\"main\",\"index\":0}]]},\"YTD vs Prevoius Month1\":{\"main\":[[{\"node\":\"CostCenter\",\"type\":\"main\",\"index\":0}]]},\"Google Gemini Chat Model\":{\"ai_languageModel\":[[{\"node\":\"Business Performance AI Agent (Analyst)\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Get Cost Centers with Budgets\":{\"main\":[[{\"node\":\"CostCentrs\",\"type\":\"main\",\"index\":0}]]},\"Business Performance AI Agent (Analyst)\":{\"main\":[[{\"node\":\"Financial Performance\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "# 🚀 AI-Powered Business Performance Reporting Automation\n\n**Unlock executive-level insights with ZERO manual work!**  \nThis n8n template empowers you to automate your entire monthly business performance reporting using dynamic SQL queries, AI-driven analysis, and beautiful HTML dashboards — all delivered directly to your inbox.\n\n* * *\n\n## 🎯 What This Automation Does\n\n  * 📆 **Triggers automatically every month** (5th of each month)\n  * 🧮 **Fetches financial data** from SQL (ERPNext or any database)\n  * 🔁 **Loops over cost centers** to analyze each business unit individually\n  * 📊 **Generates Profit & Loss reports**, WIP, Employee stats, and vertical breakdowns\n  * 🤖 **Uses Google Gemini 2.5 AI** to perform advanced financial analysis\n  * 💌 **Delivers a polished HTML report** to your email inbox\n  * 🔧 **Fully modular** – replace data source with Excel, Google Sheets, or APIs\n\n\n\n![Sample Report](https://syncbricks.com/wp-content/uploads/2025/04/report.png)\n\n* * *\n\n## 🧑‍🏫 Step-by-Step Video Tutorial\n\n🎥 **Watch the full tutorial on YouTube:**  \n[![Watch Tutorial](https://img.youtube.com/vi/yatQpQZLqg4/0.jpg)](https://youtu.be/yatQpQZLqg4)  \n📌 _Learn how each node works and see the AI-generated report in action._\n\n* * *\n\n## 🌐 Useful Links\n\n  * 🔗 **Sign up for n8n Cloud** (recommended for non-tech users):  \n👉 <https://n8n.syncbricks.com>\n\n  * 📘 **Download the step-by-step Guidebook (Free)** :  \n👉 <https://lms.syncbricks.com/books/n8n>\n\n  * 📚 **Explore the full course on n8n** (includes templates, workflows, and AI integrations):  \n👉 <https://lms.syncbricks.com/courses/n8n>\n\n\n\n\n* * *\n\n## 🛠 Requirements\n\n  * ✅ n8n (Self-hosted or Cloud)\n  * ✅ SQL Database (MySQL / PostgreSQL / ERPNext)\n  * ✅ Microsoft Outlook or Gmail (to send the report)\n  * ✅ Gemini API Key (for AI analysis)\n  * ✅ Basic understanding of your data schema\n\n\n\n* * *\n\n## 💡 Why Use This Template?\n\n  * ⏱ **Saves 2-3 days of manual work every month**\n  * 📈 **Improves financial visibility across business units**\n  * 🤝 **Great for CFOs, COOs, Finance Analysts, and BI teams**\n  * 🔄 **Scales across multiple divisions and companies**\n  * 🧠 **Leverages AI for actionable insights and recommendations**\n\n\n\n* * *\n\n## 🧩 Customize It Your Way\n\n  * Replace the SQL nodes with:\n\n    * Excel / Google Sheets\n    * Airtable / APIs\n    * Custom Applications\n  * Swap the AI model:\n\n    * OpenAI GPT\n    * Claude\n    * DeepSeek\n  * Adjust the report structure or HTML style\n\n\n\n\n* * *\n\n## 🙌 Get Started Now\n\n🎯 Import the JSON template → Connect your data → Receive business insights via email.  \nDon’t let manual reporting slow down your decision-making.\n\n👉 [Sign up for n8n Cloud](https://n8n.syncbricks.com)  \n👉 [Learn n8n with Amjid](https://www.udemy.com/course/mastering-n8n-ai-agents-api-automation-webhooks-no-code/?referralCode=0309FD70BE2D72630C09)  \n👉 [Download Guide](https://lms.syncbricks.com/books/n8n)\n\n* * *\n\n**Created by[Amjid Ali](https://amjidali.com) | SyncBricks™ – Automation for Everyone**\n",
  "crawled_at": "2025-05-26T05:02:31.769888",
  "readme_zh": "# 🚀 AI驱动的商业绩效报告自动化\n\n**零手动工作解锁高管级洞察！**  \n此n8n模板助您通过动态SQL查询、AI分析和精美HTML仪表盘实现月度商业绩效报告全自动化——直接送达您的收件箱。\n\n* * *\n\n## 🎯 自动化功能\n\n  * 📆 **每月自动触发**（每月5日）\n  * 🧮 **从SQL数据库获取财务数据**（支持ERPNext或任何数据库）\n  * 🔁 **循环处理各成本中心**，独立分析每个业务单元\n  * 📊 **生成损益报告**、在制品数据、员工统计与垂直业务分解\n  * 🤖 **运用Google Gemini 2.5 AI**进行高级财务分析\n  * 💌 **发送精美HTML报告**至指定邮箱\n  * 🔧 **完全模块化**——可替换为Excel、Google表格或API数据源\n\n![示例报告](https://syncbricks.com/wp-content/uploads/2025/04/report.png)\n\n* * *\n\n## 🧑‍🏫 视频教程\n\n🎥 **完整教程观看地址:**  \n[![观看教程](https://img.youtube.com/vi/yatQpQZLqg4/0.jpg)](https://youtu.be/yatQpQZLqg4)  \n📌 _了解每个节点的运作，查看AI生成报告的实际效果_\n\n* * *\n\n## 🌐 实用链接\n\n  * 🔗 **注册n8n云服务**（非技术用户推荐）:  \n👉 <https://n8n.syncbricks.com>\n\n  * 📘 **下载免费操作指南** :  \n👉 <https://lms.syncbricks.com/books/n8n>\n\n  * 📚 **学习完整n8n课程**（含模板、工作流与AI集成）:  \n👉 <https://lms.syncbricks.com/courses/n8n>\n\n* * *\n\n## 🛠 系统要求\n\n  * ✅ n8n（自托管或云服务）\n  * ✅ SQL数据库（MySQL/PostgreSQL/ERPNext）\n  * ✅ 微软Outlook或Gmail（用于发送报告）\n  * ✅ Gemini API密钥（用于AI分析）\n  * ✅ 基础数据结构理解能力\n\n* * *\n\n## 💡 使用优势\n\n  * ⏱ **每月节省2-3天手工工作时间**\n  * 📈 **提升跨业务单元的财务可视性**\n  * 🤝 **适合CFO、COO、财务分析师和BI团队**\n  * 🔄 **支持多部门/多公司扩展**\n  * 🧠 **AI驱动可执行洞察与建议**\n\n* * *\n\n## 🧩 自定义选项\n\n  * 可替换SQL节点为：\n    * Excel/Google表格\n    * Airtable/API接口\n    * 自定义应用程序\n  * 可切换AI模型：\n    * OpenAI GPT\n    * Claude\n    * DeepSeek\n  * 可调整报告结构或HTML样式\n\n* * *\n\n## 🙌 立即开始\n\n🎯 导入JSON模板 → 连接数据源 → 通过邮件接收商业洞察  \n别让手工报告拖慢您的决策速度\n\n👉 [注册n8n云服务](https://n8n.syncbricks.com)  \n👉 [向Amjid学习n8n](https://www.udemy.com/course/mastering-n8n-ai-agents-api-automation-webhooks-no-code/?referralCode=0309FD70BE2D72630C09)  \n👉 [下载指南](https://lms.syncbricks.com/books/n8n)\n\n* * *\n\n**由[Amjid Ali](https://amjidali.com)创建 | SyncBricks™——全民自动化**",
  "title_zh": "利用Gemini AI、SQL和Outlook生成月度财务报告",
  "publish_date_zh": "上次更新于4天前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"32d80f55a35a7b57f8e47a2ac19558d9f5bcec983a5519d9c29ba713ff4f12c7\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"fdd55253-5cb6-4b1f-9c93-6915f254f700\",\n      \"name\": \"Schedule Trigger\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [\n        -60,\n        -240\n      ],\n      \"parameters\": {\n        \"rule\": {\n          \"interval\": [\n            {\n              \"field\": \"months\",\n              \"triggerAtDayOfMonth\": 5\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"c8d6064a-3fd7-478d-891c-6ade336daa1f\",\n      \"name\": \"YTD vs Prevoius Month1\",\n      \"type\": \"n8n-nodes-base.mySql\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        640,\n        0\n      ],\n      \"parameters\": {\n        \"query\": \"SELECT\\n  --  budget_data.fiscal_year AS `Year`,\\n  --  budget_data.cost_center AS `Cost Center`,\\n    budget_data.budget_group AS `Budget Group`,\\n--    budget_data.sort_order AS `Sort Order`,\\n\\n    -- YTD Totals up to previous month (up to dynamic month)\\n    SUM(budget_data.budget_amount) AS `Budget YTD`,\\n    SUM(COALESCE(actual_data.actual_amount, 0)) AS `Actual YTD`,\\n    SUM(COALESCE(actual_data.actual_amount, 0)) - SUM(budget_data.budget_amount) AS `Variance YTD`,\\n\\n    -- Previous Month Totals Only\\n    SUM(CASE WHEN budget_data.budget_month = {{ $('PreviousMonth').item.json.previousMonth }} THEN budget_data.budget_amount ELSE 0 END) AS `Budget PM`,\\n    SUM(CASE WHEN budget_data.budget_month = {{ $('PreviousMonth').item.json.previousMonth }} THEN COALESCE(actual_data.actual_amount, 0) ELSE 0 END) AS `Actual PM`,\\n    SUM(CASE WHEN budget_data.budget_month = {{ $('PreviousMonth').item.json.previousMonth }} THEN COALESCE(actual_data.actual_amount, 0) ELSE 0 END) -\\n    SUM(CASE WHEN budget_data.budget_month = {{ $('PreviousMonth').item.json.previousMonth }} THEN budget_data.budget_amount ELSE 0 END) AS `Variance PM`\\n\\nFROM\\n    (\\n        SELECT\\n            bg.budget_group_name AS budget_group,\\n            bg.sort_order,\\n            bgd.fiscal_year,\\n            bgd.budget_month,\\n            bgd.cost_center,\\n            CAST(bgd.budget_amount AS DECIMAL(18,6)) AS budget_amount\\n        FROM\\n            `tabBudget Group Detail` bgd\\n        JOIN\\n            `tabBudget Group` bg ON bg.name = bgd.parent\\n        WHERE\\n            bgd.fiscal_year = {{ $('PreviousMonth').item.json.year }}\\n            AND bgd.budget_month <= {{ $('PreviousMonth').item.json.previousMonth }}\\n            AND bgd.cost_center = '{{ $json.CostCenter }}'\\n    ) AS budget_data\\n\\nLEFT JOIN (\\n    SELECT\\n        acc.budget_group AS budget_group,\\n        YEAR(gl.posting_date) AS fiscal_year,\\n        MONTH(gl.posting_date) AS budget_month,\\n        gl.cost_center,\\n        SUM(\\n            CASE \\n                WHEN acc.root_type = 'Income' THEN gl.credit - gl.debit\\n                WHEN acc.root_type = 'Expense' THEN gl.debit - gl.credit\\n                ELSE 0\\n            END\\n        ) AS actual_amount\\n    FROM\\n        `tabGL Entry` gl\\n    JOIN\\n        `tabAccount` acc ON gl.account = acc.name\\n    WHERE\\n        acc.budget_group IS NOT NULL\\n        AND acc.root_type IN ('Income', 'Expense')\\n        AND gl.docstatus = 1\\n        AND YEAR(gl.posting_date) = {{ $('PreviousMonth').item.json.year }}\\n        AND MONTH(gl.posting_date) <= {{ $('PreviousMonth').item.json.previousMonth }}\\n        AND gl.cost_center = '{{ $('Filter').item.json['Cost Center'] }}'\\n    GROUP BY\\n        acc.budget_group,\\n        YEAR(gl.posting_date),\\n        MONTH(gl.posting_date),\\n        gl.cost_center\\n) AS actual_data\\nON\\n    budget_data.budget_group = actual_data.budget_group AND\\n    budget_data.fiscal_year = actual_data.fiscal_year AND\\n    budget_data.budget_month = actual_data.budget_month AND\\n    budget_data.cost_center = actual_data.cost_center\\n\\nGROUP BY\\n    budget_data.fiscal_year,\\n    budget_data.cost_center,\\n    budget_data.budget_group,\\n    budget_data.sort_order\\n\\nORDER BY\\n    budget_data.cost_center,\\n    budget_data.sort_order,\\n    budget_data.budget_group;\\n\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"retryOnFail\": false,\n      \"typeVersion\": 2.4\n    },\n    {\n      \"id\": \"13102b1c-8a06-4a23-8174-75254bf783ac\",\n      \"name\": \"Loop Over Items\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        -40,\n        200\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"da2a0b30-3df4-430c-8cac-cd9d735ce759\",\n      \"name\": \"CostCentrs\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1100,\n        -240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"ac6bcf14-13e3-464d-b9cd-4adee56018d7\",\n              \"name\": \"Cost Center\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json['Cost Center'] }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"7891d71c-18f8-4e07-aa30-f50bec10cef6\",\n      \"name\": \"Date & Time\",\n      \"type\": \"n8n-nodes-base.dateTime\",\n      \"position\": [\n        260,\n        -240\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"3e69dc27-0850-4978-bf10-e81ff575ec60\",\n      \"name\": \"PreviousMonth\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        520,\n        -240\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Get the input date from the previous node\\nconst inputDateStr = $input.first().json.currentDate;\\nconst inputDate = new Date(inputDateStr);\\n\\n// Move to the first day of the current month\\ninputDate.setDate(1);\\n\\n// Step back one day to land in the previous month\\ninputDate.setDate(0);\\n\\n// Extract previous month and year\\nconst previousMonth = inputDate.getMonth() + 1; // Months are 0-based\\nconst year = inputDate.getFullYear(); // This will reflect the correct year, even in January\\n\\nreturn [\\n  {\\n    json: {\\n      previousMonth: previousMonth.toString().padStart(2, '0'), // e.g., \\\"01\\\", \\\"12\\\"\\n      year: year.toString()                                     // e.g., \\\"2024\\\"\\n    }\\n  }\\n];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"f6776225-39d2-4746-a90f-b4d1b12a66ee\",\n      \"name\": \"Selected Cost Center\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        260,\n        220\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"c4a6c71a-0df4-49df-9068-f039ddf7d507\",\n              \"name\": \"CostCenter\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json['Cost Center'] }}\"\n            },\n            {\n              \"id\": \"ade95f85-baa2-4f5d-a125-7360b17cf99b\",\n              \"name\": \"previousMonth\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('PreviousMonth').item.json.previousMonth }}\"\n            },\n            {\n              \"id\": \"36c1d772-5bb7-47a6-81f9-1b70208e558b\",\n              \"name\": \"year\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('PreviousMonth').item.json.year }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"1e23d876-21be-4d90-b5e4-38f3543a0c3b\",\n      \"name\": \"Get Cost Centers with Budgets\",\n      \"type\": \"n8n-nodes-base.mySql\",\n      \"position\": [\n        800,\n        -240\n      ],\n      \"parameters\": {\n        \"query\": \"SELECT DISTINCT\\n    budget_data.cost_center AS `Cost Center`\\nFROM\\n(\\n    SELECT\\n        bgd.cost_center,\\n        bgd.fiscal_year,\\n        bgd.budget_month\\n    FROM\\n        `tabBudget Group Detail` bgd\\n    JOIN\\n        `tabBudget Group` bg ON bg.name = bgd.parent\\n    WHERE\\n        bgd.fiscal_year = {{ $json.year }}\\n        AND bgd.budget_month <= {{ $json.previousMonth }}\\n) AS budget_data\\n\\nINNER JOIN\\n(\\n    SELECT DISTINCT\\n        gl.cost_center,\\n        YEAR(gl.posting_date) AS fiscal_year,\\n        MONTH(gl.posting_date) AS budget_month\\n    FROM\\n        `tabGL Entry` gl\\n    JOIN\\n        `tabAccount` acc ON gl.account = acc.name\\n    WHERE\\n        acc.budget_group IS NOT NULL\\n        AND acc.root_type IN ('Income', 'Expense')\\n        AND gl.docstatus = 1\\n        AND YEAR(gl.posting_date) = {{ $json.year }}\\n        AND MONTH(gl.posting_date) <= {{ $json.previousMonth }}\\n        AND gl.cost_center IS NOT NULL\\n) AS gl_data\\nON\\n    budget_data.cost_center = gl_data.cost_center\\n    AND budget_data.fiscal_year = gl_data.fiscal_year\\n    AND budget_data.budget_month = gl_data.budget_month\\n\\nORDER BY\\n    budget_data.cost_center;\\n\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"typeVersion\": 2.4\n    },\n    {\n      \"id\": \"d4429595-b1b9-4121-a612-24be11e6a36a\",\n      \"name\": \"Filter\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        1380,\n        -240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"d7a13ce7-24d3-406a-934b-97f9a47b206c\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json['Cost Center'] }}\",\n              \"rightValue\": \"AI DEPARTMENT\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"67bbe834-ae40-4aad-b468-6fa73c9dc6c6\",\n      \"name\": \"HTML\",\n      \"type\": \"n8n-nodes-base.html\",\n      \"position\": [\n        40,\n        920\n      ],\n      \"parameters\": {\n        \"html\": \"{{ $json.html }}\"\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"58d1dc63-9ba7-41b8-af39-b7c134ab3cea\",\n      \"name\": \"verticalPL\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        900,\n        220\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const rows = items;\\n\\n// Get column names from the first row\\nconst headers = Object.keys(rows[0].json);\\n\\n// Build header HTML\\nlet headerHtml = headers.map(col => `<th>${col}</th>`).join('');\\n\\n// Build rows\\nlet bodyHtml = rows.map(row => {\\n  return `<tr>${headers.map(col => `<td>${row.json[col]}</td>`).join('')}</tr>`;\\n}).join('');\\n\\n// Combine into one table\\nconst tableHtml = `\\n<table border=\\\"1\\\" cellpadding=\\\"6\\\" cellspacing=\\\"0\\\" style=\\\"border-collapse: collapse;\\\">\\n  <thead><tr>${headerHtml}</tr></thead>\\n  <tbody>${bodyHtml}</tbody>\\n</table>\\n`;\\n\\nreturn [{ json: { table: tableHtml } }];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"9a8bdb09-f9d4-4c4b-b1d5-dadb3c6ee567\",\n      \"name\": \"Merge\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        1380,\n        220\n      ],\n      \"parameters\": {\n        \"numberInputs\": 4\n      },\n      \"typeVersion\": 3.1\n    },\n    {\n      \"id\": \"d310db4d-183d-4f99-9bd0-863320d2db73\",\n      \"name\": \"Code\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1420,\n        580\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const table1 = $input.first().json.table; // From the first input node\\nconst table2 = $items(\\\"verticalPL\\\")[0].json.table; // From the node named 'verticalPL'\\nconst table3 = $items(\\\"WIP1\\\")[0].json.table; // From the node named 'WIP1'\\nconst table4 = $items(\\\"Employees1\\\")[0].json.table; // From the node named 'Employees1'\\n\\nconst htmlOutput = `\\n<!DOCTYPE html>\\n<html>\\n<head>\\n  <style>\\n    body { font-family: Arial, sans-serif; font-size: 14px; color: #333; }\\n    h2 { margin-top: 30px; }\\n    table { border-collapse: collapse; width: 100%; margin-top: 10px; }\\n    th, td { border: 1px solid #ccc; padding: 8px; text-align: right; }\\n    th:first-child, td:first-child { text-align: left; }\\n    thead { background-color: #f0f0f0; }\\n  </style>\\n</head>\\n<body>\\n  <h2>📊 Financial Overview – YTD & PM Summary</h2>\\n  ${table1}\\n\\n  <h2>📊 Financial Overview – Vertical Profit & Loss</h2>\\n  ${table2}\\n\\n  <h2>📊 Financial Overview – WIP Summary</h2>\\n  ${table3}\\n\\n  <h2>👥 Employees in the Business Unit</h2>\\n  ${table4}\\n</body>\\n</html>\\n`;\\n\\nreturn [{ json: { html: htmlOutput } }];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"ba5e60fb-d5cc-4a5f-9cb6-07808f7c7021\",\n      \"name\": \"Microsoft Outlook2\",\n      \"type\": \"n8n-nodes-base.microsoftOutlook\",\n      \"position\": [\n        1240,\n        920\n      ],\n      \"webhookId\": \"0cdef86a-9910-49aa-bdd3-1beecb260035\",\n      \"parameters\": {\n        \"subject\": \"=Business Performance Syncbricks\",\n        \"bodyContent\": \"={{ $json['Email Output'] }}\",\n        \"toRecipients\": \"amjid@amjidali.com\",\n        \"additionalFields\": {\n          \"bodyContentType\": \"html\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"c3cdf21d-417f-420b-98f9-dfca33119c5a\",\n      \"name\": \"CostCenter\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        920,\n        0\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const rows = items;\\n\\n// Get column names from the first row\\nconst headers = Object.keys(rows[0].json);\\n\\n// Build header HTML\\nlet headerHtml = headers.map(col => `<th>${col}</th>`).join('');\\n\\n// Build rows\\nlet bodyHtml = rows.map(row => {\\n  return `<tr>${headers.map(col => `<td>${row.json[col]}</td>`).join('')}</tr>`;\\n}).join('');\\n\\n// Combine into one table\\nconst tableHtml = `\\n<table border=\\\"1\\\" cellpadding=\\\"6\\\" cellspacing=\\\"0\\\" style=\\\"border-collapse: collapse;\\\">\\n  <thead><tr>${headerHtml}</tr></thead>\\n  <tbody>${bodyHtml}</tbody>\\n</table>\\n`;\\n\\nreturn [{ json: { table: tableHtml } }];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"9d9fb099-5fca-4777-a753-f6791f37fd37\",\n      \"name\": \"WIP1\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        900,\n        400\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const rows = items;\\n\\n// Get column names from the first row\\nconst headers = Object.keys(rows[0].json);\\n\\n// Build header HTML\\nlet headerHtml = headers.map(col => `<th>${col}</th>`).join('');\\n\\n// Build rows\\nlet bodyHtml = rows.map(row => {\\n  return `<tr>${headers.map(col => `<td>${row.json[col]}</td>`).join('')}</tr>`;\\n}).join('');\\n\\n// Combine into one table\\nconst tableHtml = `\\n<table border=\\\"1\\\" cellpadding=\\\"6\\\" cellspacing=\\\"0\\\" style=\\\"border-collapse: collapse;\\\">\\n  <thead><tr>${headerHtml}</tr></thead>\\n  <tbody>${bodyHtml}</tbody>\\n</table>\\n`;\\n\\nreturn [{ json: { table: tableHtml } }];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"5a6626ed-c841-4fd7-9111-f686fcacaa37\",\n      \"name\": \"Employees\",\n      \"type\": \"n8n-nodes-base.mySql\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        640,\n        600\n      ],\n      \"parameters\": {\n        \"query\": \"SELECT\\n   -- e.payroll_cost_center AS `Payroll Cost Center`,\\n    COUNT(*) AS `Total Employees`,\\n    COUNT(CASE WHEN YEAR(e.date_of_joining) = YEAR(CURDATE()) THEN 1 END) AS `Joined This Year`,\\n    COUNT(CASE WHEN YEAR(e.date_of_joining) = YEAR(CURDATE()) AND MONTH(e.date_of_joining) = MONTH(CURDATE()) THEN 1 END) AS `Joined This Month`\\nFROM\\n    `tabEmployee` e\\nWHERE\\n    e.status = 'Active'\\n    AND e.payroll_cost_center = '{{ $json.CostCenter }}'\\nGROUP BY\\n    e.payroll_cost_center;\\n\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"retryOnFail\": false,\n      \"typeVersion\": 2.4\n    },\n    {\n      \"id\": \"bbfd2c19-9538-4106-8931-f65f0261d43c\",\n      \"name\": \"Employees1\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        900,\n        600\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const rows = items;\\n\\n// Get column names from the first row\\nconst headers = Object.keys(rows[0].json);\\n\\n// Build header HTML\\nlet headerHtml = headers.map(col => `<th>${col}</th>`).join('');\\n\\n// Build rows\\nlet bodyHtml = rows.map(row => {\\n  return `<tr>${headers.map(col => `<td>${row.json[col]}</td>`).join('')}</tr>`;\\n}).join('');\\n\\n// Combine into one table\\nconst tableHtml = `\\n<table border=\\\"1\\\" cellpadding=\\\"6\\\" cellspacing=\\\"0\\\" style=\\\"border-collapse: collapse;\\\">\\n  <thead><tr>${headerHtml}</tr></thead>\\n  <tbody>${bodyHtml}</tbody>\\n</table>\\n`;\\n\\nreturn [{ json: { table: tableHtml } }];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"b425da91-2faa-4063-93dd-4d997f7cd7eb\",\n      \"name\": \"Wait\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        1480,\n        1180\n      ],\n      \"webhookId\": \"83d7ae9a-e309-4bac-a0b4-5ff651e3afe3\",\n      \"parameters\": {\n        \"unit\": \"minutes\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"5deead0c-d386-4b51-9b96-bd58e85244c0\",\n      \"name\": \"Financial Performance\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        700,\n        920\n      ],\n      \"parameters\": {\n        \"jsCode\": \"let html = $input.first().json.output || '';\\n\\n// Remove ```html at the start and ``` at the end (if present)\\nhtml = html.trim().replace(/^```html\\\\s*/i, '').replace(/```$/i, '');\\n\\nreturn [{\\n  json: {\\n    cleaned_html: html\\n  }\\n}];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"a472032f-42ba-4cb2-9bf7-55314083833e\",\n      \"name\": \"Email Data\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        940,\n        920\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"b227e25f-99ce-4147-b22d-c2a6cabfcafa\",\n              \"name\": \"CostCenter\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Selected Cost Center').first().json.CostCenter }}\\n\"\n            },\n            {\n              \"id\": \"94e5a360-cbff-4498-bd75-98cafe08557b\",\n              \"name\": \"Email Output\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.cleaned_html }}\"\n            },\n            {\n              \"id\": \"20cd6408-ab44-4632-8f0a-967604f16a1c\",\n              \"name\": \"For the Month\",\n              \"type\": \"string\",\n              \"value\": \"=Month : {{ $('PreviousMonth').first().json.previousMonth }} - {{ $('PreviousMonth').first().json.year }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"b7c1ae4d-cbe3-47fb-84fa-f34295f8dfee\",\n      \"name\": \"Calculator\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolCalculator\",\n      \"position\": [\n        620,\n        1220\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2e59b7b8-d8f6-4433-98c5-f637f6b5eaf4\",\n      \"name\": \"Business Performance AI Agent (Analyst)\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        300,\n        920\n      ],\n      \"parameters\": {\n        \"text\": \"=You are a Business Performance Analyst Expert in Financial Management of Syncbricks LLC,  you willbe given an input to Analyze the Financial Performance of syncbricks which is an AI and Automation Company.\\nThe sections Given to you will be below\\n\\n1. Financial Overview – YTD & PM Summary (whis is income and expense of the Company, this data doesn't include the calculation of Gross Profit and Net Profit that you must do. This should be used together in one section only don't seperate them)\\n2. Financial Overview – Vertical Profit & Loss (This containers the Verticials within the Cost Center, these are in fact the Sub Business Unit, you don't need to calculate anything but the information is for analysis to see how the Verticals within the Business Unit Perfored )\\n3. Financial Overview – WIP Summary (This is the Projects Summary about how many projects are currently open and work is the WIP - Work in Process of the Project, the WIP figure should be added for Profit and Loss Statement Under Proejct Reveneu as expected WIP)\\n4. Employees in the Business Unit (These will be the number of Employees who are directly working in this BU, which means these employees are only serving the Company, other staff which are in back office support are not included in this. )\\n*** Your Role ***\\n\\nYour Role is to Prepare a comprehensive Report : \\n1. Executive Summary : Tell how was the overall performance of the Business Unit.\\n2. Analayze the Financial Overview - YTD together with PM Summary (Which is Previous Month) which is previous month Income and Expenses you must use Proper Strcuture of Financial Statement with Budget Vs Actuals (follow same input already given). \\n\\nYou must use the Section that will be shared with you in detail that says \\\"Financial Overview – YTD & PM Summary \\\" and from there you must ensure to create sections based on best Practices of Performance Analysis that should include;\\n\\nSection: Revenue\\n-Projects - Revenue\\n-Trading - Revenue\\n-Service - Revenue\\nNet Sales (Total)\\nSection: Project Work in Process\\nWIP (Revenue to Book)\\nTotal: Gross Sale\\nSection: Cost of Sale\\nProjects - COGS\\nTrading - COGS\\nService - COGS\\nTotal Cost of Sales\\nGross Profit\\nOther Income\\nGross Income\\n\\nSection: Indirect Cost (here you must all the detail of expenses from \\\"Financial Overview – YTD & PM Summary\\\"\\nThen you must calculate\\nProfit / (Loss) before tax\\nNP % to Revenue\\n\\nUse the calculator tool to ensure precise calculations.\\n\\n\\n- Don't add decimals give format in currency but don't add symbol.\\nUse the standard P&L Format where you should first use Sale, then Cost of Sale and GP, then use Indirect Expenses and then Net Profile. Ensure to calculate the Perentages as well.\\n3. Provide the Summary of the Verticials Performance with their Profit and Loss and Percetage and Total of all Verticlals\\n4. Current Project Progress.\\n5. Employees Summary, Number of Employees, How many joined in this Year and what is per Eployee Revenue and Gross Profit \\n\\nAnalyze Overall Performance of the Company and provide the Business Managers an Overview of what should be done next. Calculate per employee profit as well and suggest what is the performance overall\\n\\n**Tools**\\nUse calculator tool to do all calculations for accurate calculations\\n\\n** Formatting and Output **\\n\\nGive output in html format fully responsive in with beauty added using CSS,  ready to be shared with all possible tables, in hightly attracrtive format, headings, add colors green for good, red for bad, organge for acceptable and so on, also add remarks to show how the performance was, enusre to response as if you were as an Expert in Analyzing the Bususiness Performance. Don't add any other infomration or symbols which are not part of html. Don't give additional message saying ok, I will do and so on.\\nAlign Text in table on left and numbers on right\\nNumber formatting : ##,###\\n\\n\\nHere is the data\\n\\nMonth : {{ $('PreviousMonth').first().json.previousMonth }}\\nYear  : {{ $('PreviousMonth').first().json.year }}\\n\\n{{ $json.html }}\\n\\n\",\n        \"options\": {},\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"3ac7b91e-ee61-4b40-9d2d-76d7916479ee\",\n      \"name\": \"Think\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",\n      \"position\": [\n        460,\n        1220\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"97bac1cb-8271-4169-98cf-6ea5b06ef5db\",\n      \"name\": \"Google Gemini Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"position\": [\n        220,\n        1220\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"modelName\": \"models/gemini-2.5-pro-exp-03-25\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"27f40dc7-61b9-4e09-9b6d-6bb9d16c38c3\",\n      \"name\": \"Departments \",\n      \"type\": \"n8n-nodes-base.mySql\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        640,\n        200\n      ],\n      \"parameters\": {\n        \"query\": \"SELECT\\n   -- gl.vertical AS `Vertical`,\\n\\n    -- Total Income (based on root_type)\\n    ROUND(SUM(CASE WHEN acc.root_type = 'Income' THEN gl.credit - gl.debit ELSE 0 END), 0) AS `Total Income`,\\n\\n    -- Total Expenses (based on root_type)\\n    ROUND(SUM(CASE WHEN acc.root_type = 'Expense' THEN gl.debit - gl.credit ELSE 0 END), 0) AS `Total Expenses`,\\n\\n    -- Profit or Loss = Income - Expenses\\n    ROUND(SUM(\\n        CASE \\n            WHEN acc.root_type = 'Income' THEN gl.credit - gl.debit\\n            WHEN acc.root_type = 'Expense' THEN -1 * (gl.debit - gl.credit)\\n            ELSE 0\\n        END\\n    ), 0) AS `Profit or Loss`\\n\\nFROM\\n    `tabGL Entry` gl\\nJOIN\\n    `tabAccount` acc ON gl.account = acc.name\\n\\nWHERE\\n    acc.root_type IN ('Income', 'Expense')\\n    AND gl.docstatus = 1\\n    AND gl.cost_center = '{{ $(\\\"Selected Cost Center\\\").item.json.CostCenter }}'\\n    AND MONTH(gl.posting_date) = {{ $(\\\"Selected Cost Center\\\").item.json.previousMonth }}\\n    AND YEAR(gl.posting_date) = {{ $(\\\"Selected Cost Center\\\").item.json.year }}\\n\\nGROUP BY\\n    gl.vertical\\n\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"retryOnFail\": false,\n      \"typeVersion\": 2.4\n    },\n    {\n      \"id\": \"b2a3ec7d-d400-4d1c-877d-f49f67ad742f\",\n      \"name\": \"Projects\",\n      \"type\": \"n8n-nodes-base.mySql\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        620,\n        380\n      ],\n      \"parameters\": {\n        \"query\": \"SELECT\\n   -- p.cost_center AS `Cost Center`,\\n    COUNT(DISTINCT p.name) AS `Projects`,\\n\\n    FORMAT(SUM(p.contract_value), 0) AS `Contract Value`,\\n    FORMAT(SUM(p.total_opening_revenue), 0) AS `Opening Revenue`,\\n    FORMAT(SUM(p.total_opening_cost), 0) AS `Opening Cost`,\\n\\n    -- New Revenue (GL)\\n    IFNULL((\\n        SELECT SUM(gl.credit - gl.debit)\\n        FROM `tabGL Entry` gl\\n        JOIN `tabAccount` acc ON acc.name = gl.account\\n        WHERE gl.docstatus = 1 AND acc.root_type = 'Income' AND acc.is_group = 0\\n          AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n          AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n    ), 0) AS `New Revenue`,\\n\\n    -- New Cost (GL)\\n    IFNULL((\\n        SELECT SUM(gl.debit - gl.credit)\\n        FROM `tabGL Entry` gl\\n        JOIN `tabAccount` acc ON acc.name = gl.account\\n        WHERE gl.docstatus = 1 AND acc.root_type = 'Expense' AND acc.is_group = 0\\n          AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n          AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n    ), 0) AS `New Cost`,\\n\\n    -- Actual Revenue\\n    FORMAT(\\n        SUM(p.total_opening_revenue) +\\n        IFNULL((\\n            SELECT SUM(gl.credit - gl.debit)\\n            FROM `tabGL Entry` gl\\n            JOIN `tabAccount` acc ON acc.name = gl.account\\n            WHERE gl.docstatus = 1 AND acc.root_type = 'Income' AND acc.is_group = 0\\n              AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n              AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n        ), 0), 0\\n    ) AS `Actual Revenue`,\\n\\n    -- Actual Cost\\n    FORMAT(\\n        SUM(p.total_opening_cost) +\\n        IFNULL((\\n            SELECT SUM(gl.debit - gl.credit)\\n            FROM `tabGL Entry` gl\\n            JOIN `tabAccount` acc ON acc.name = gl.account\\n            WHERE gl.docstatus = 1 AND acc.root_type = 'Expense' AND acc.is_group = 0\\n              AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n              AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n        ), 0), 0\\n    ) AS `Actual Cost`,\\n\\n    -- Invoice %\\n    CONCAT(ROUND((\\n        (\\n            SUM(p.total_opening_revenue) +\\n            IFNULL((\\n                SELECT SUM(gl.credit - gl.debit)\\n                FROM `tabGL Entry` gl\\n                JOIN `tabAccount` acc ON acc.name = gl.account\\n                WHERE gl.docstatus = 1 AND acc.root_type = 'Income' AND acc.is_group = 0\\n                  AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n                  AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n            ), 0)\\n        ) / NULLIF(SUM(p.contract_value), 0) * 100\\n    ), 0), '%') AS `Invoice %`,\\n\\n    -- Cost %\\n    CONCAT(ROUND((\\n        (\\n            SUM(p.total_opening_cost) +\\n            IFNULL((\\n                SELECT SUM(gl.debit - gl.credit)\\n                FROM `tabGL Entry` gl\\n                JOIN `tabAccount` acc ON acc.name = gl.account\\n                WHERE gl.docstatus = 1 AND acc.root_type = 'Expense' AND acc.is_group = 0\\n                  AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n                  AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n            ), 0)\\n        ) / NULLIF(SUM(p.budgeted_project_cost), 0) * 100\\n    ), 0), '%') AS `Cost %`,\\n\\n    -- WIP Calculation\\n    FORMAT(\\n        CASE\\n            WHEN SUM(p.budgeted_project_cost) = 0 THEN 0\\n            WHEN (\\n                SUM(p.total_opening_cost) +\\n                IFNULL((\\n                    SELECT SUM(gl.debit - gl.credit)\\n                    FROM `tabGL Entry` gl\\n                    JOIN `tabAccount` acc ON acc.name = gl.account\\n                    WHERE gl.docstatus = 1 AND acc.root_type = 'Expense' AND acc.is_group = 0\\n                      AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n                      AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n                ), 0)\\n            ) > SUM(p.budgeted_project_cost)\\n            THEN\\n                SUM(p.contract_value) -\\n                (SUM(p.total_opening_revenue) +\\n                IFNULL((\\n                    SELECT SUM(gl.credit - gl.debit)\\n                    FROM `tabGL Entry` gl\\n                    JOIN `tabAccount` acc ON acc.name = gl.account\\n                    WHERE gl.docstatus = 1 AND acc.root_type = 'Income' AND acc.is_group = 0\\n                      AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n                      AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n                ), 0))\\n            ELSE\\n                (SUM(p.contract_value) * (\\n                    (SUM(p.total_opening_cost) +\\n                    IFNULL((\\n                        SELECT SUM(gl.debit - gl.credit)\\n                        FROM `tabGL Entry` gl\\n                        JOIN `tabAccount` acc ON acc.name = gl.account\\n                        WHERE gl.docstatus = 1 AND acc.root_type = 'Expense' AND acc.is_group = 0\\n                          AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n                          AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n                    ), 0)) / NULLIF(SUM(p.budgeted_project_cost), 0)\\n                )) -\\n                (SUM(p.total_opening_revenue) +\\n                IFNULL((\\n                    SELECT SUM(gl.credit - gl.debit)\\n                    FROM `tabGL Entry` gl\\n                    JOIN `tabAccount` acc ON acc.name = gl.account\\n                    WHERE gl.docstatus = 1 AND acc.root_type = 'Income' AND acc.is_group = 0\\n                      AND gl.project IN (SELECT name FROM `tabProject` WHERE cost_center = p.cost_center AND status = 'Open')\\n                      AND gl.posting_date <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH)\\n                ), 0))\\n        END,\\n    0) AS `WIP`\\n\\nFROM\\n    `tabProject` p\\nWHERE\\n    p.cost_center = '{{ $json.CostCenter }}'\\n    AND p.status = 'Open'\\nGROUP BY\\n    p.cost_center;\\n\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"retryOnFail\": false,\n      \"typeVersion\": 2.4\n    },\n    {\n      \"id\": \"a1c5f474-dc92-47e7-bf59-9cca756245cf\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1260,\n        -20\n      ],\n      \"parameters\": {\n        \"width\": 1120,\n        \"height\": 1200,\n        \"content\": \"## n8n工作流核心模块说明\\n\\n**🟢 定时触发器**\\n- 每月5日自动触发流程\\n- 设定月度报告生成周期\\n\\n**📅 日期时间+ 🧮 上月份计算**\\n- 获取当前日期并推导上月/年度数据\\n- 为所有SQL查询提供动态时间筛选条件\\n\\n**📊 获取预算成本中心**\\n- 动态抓取含有效预算及总账数据的成本中心\\n- 确保仅处理活跃业务部门数据\\n\\n**🔍 数据筛选器**\\n- 测试阶段可限定特定成本中心（如\\\"AI部门\\\"）\\n\\n**🔁 项目循环器**\\n- 遍历所有成本中心生成独立业务单元报告\\n- 实现多部门自动化报表生成\\n\\n**🧾 年度累计vs上月对比1**\\n- 执行本年累计与上月财务数据对比\\n- 输出收入/支出/差异数值\\n\\n**🏢 部门数据+ 🧱 垂直业务线报表**\\n- 分析成本中心下属垂直业务线财务表现\\n- 数据转为HTML表格用于终版报告\\n\\n**🧱 项目数据+ 🧮 在建工程1**\\n- 采集项目状态与在建工程指标\\n- 计算开票进度/成本消耗率/收入确认数据\\n\\n**👥 员工数据+ 📊 员工统计1**\\n- 统计成本中心总人数/本月年度新增\\n- 用于计算人均效能指标\\n\\n**🔗 数据合并+ 🧾 代码处理**\\n- 整合所有HTML表格为响应式报告\\n- 生成整洁排版适合邮件发送\\n\\n**💡 业务表现AI分析官**\\n- 调用Gemini 2.5 Pro分析财务HTML数据\\n- 生成结构化分析/执行摘要/盈利建议\\n\\n**📩 邮件数据+ Outlook发送**\\n- 通过邮件发送最终HTML报告\\n- 附个性化说明供业务经理分发\\n\\n**⏳ 等待控制**\\n- 实现多成本中心循环批处理\\n- 防止系统过载或邮件轰炸\\n\\n**🧠 思考器+计算器**\\n- AI代理专用推理与财务计算模块\\n- 确保毛利/净利/百分比数据精确性\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"59500949-a8b9-4287-b6f7-be49e58e1842\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1960,\n        580\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 680,\n        \"height\": 560,\n        \"content\": \"## SQL查询节点\\n（例如：年初至今vs上月数据、项目、员工、部门）\\n这些节点直接从您的数据库（如基于MySQL的ERPNext系统）获取结构化财务数据（包括收入、支出、在制品、员工人数等）。\\n\\n支持任意数据库类型（MySQL/PostgreSQL/MSSQL等），只需完成相应的架构映射即可。\\n\\n使用ChatGPT等AI对话工具可加速查询生成：\\n👉 只需描述需求（如\\\"按成本中心分组的月度预算与实际对比\\\"），AI即可自动生成对应SQL语句。\\n\\n这些SQL节点也可替换为其他数据源：\\n\\nExcel/CSV文件（通过Google Drive或n8n二进制读取）\\n\\n谷歌表格\\n\\nAirtable数据库\\n\\nREST API接口\\n\\n内部应用程序\\n\\n✅ 核心要求是生成与后续工作流步骤匹配的标准数据结构格式。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"02f76680-0bbf-408f-826e-daef5e6e9b09\",\n      \"name\": \"Sticky Note11\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1960,\n        0\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 675,\n        \"height\": 536,\n        \"content\": \"## 由Amjid Ali开发\\n\\n感谢您使用此工作流模板。它凝聚了我无数小时的辛勤付出、深入研究与全心投入，衷心希望能为您的创作增添价值。\\n\\n若本模板对您有所帮助，恳请考虑支持我的持续创作。您的每一份支持都将助力我不断优化并产出更多优质资源。\\n\\n可通过PayPal进行赞助：\\nhttp://paypal.me/pmptraining\\n\\n获取ERPNext完整课程或AI自动化教程，请访问：\\nhttp://lms.syncbricks.com\\n\\n另请注意，在分享本模板时，若能保留原始作者信息以标明出处，我将不胜感激。\\n\\n衷心感谢您的慷慨支持！\\n联系邮箱：amjid@amjidali.com\\n领英主页：https://linkedin.com/in/amjidali\\n官方网站：https://syncbricks.com\\nYouTube频道：https://youtube.com/@syncbricks\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Code\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"HTML\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"HTML\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Business Performance AI Agent (Analyst)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"WIP1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 2\n          }\n        ]\n      ]\n    },\n    \"Wait\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Merge\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Think\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"Business Performance AI Agent (Analyst)\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filter\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Projects\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"WIP1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Employees\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Employees1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Calculator\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"Business Performance AI Agent (Analyst)\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"CostCenter\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"CostCentrs\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filter\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Email Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Microsoft Outlook2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Employees1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 3\n          }\n        ]\n      ]\n    },\n    \"verticalPL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Date & Time\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"PreviousMonth\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Departments \": {\n      \"main\": [\n        [\n          {\n            \"node\": \"verticalPL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"PreviousMonth\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Cost Centers with Budgets\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop Over Items\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"Selected Cost Center\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Schedule Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Date & Time\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Microsoft Outlook2\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Wait\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Selected Cost Center\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"YTD vs Prevoius Month1\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Departments \",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Projects\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Employees\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Financial Performance\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Email Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"YTD vs Prevoius Month1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"CostCenter\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Gemini Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Business Performance AI Agent (Analyst)\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Cost Centers with Budgets\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"CostCentrs\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Business Performance AI Agent (Analyst)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Financial Performance\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}