{
  "url": "https://n8n.io/workflows/2690-reusable-subworkflow-zip-multiple-files-dynamically-compress/",
  "title": "Reusable Subworkflow Zip Multiple Files Dynamically (Compress)",
  "author": "Simon",
  "publish_date": "Last update 5 months ago",
  "publish_date_absolute": "2024-12-26",
  "categories": [
    {
      "name": "Building Blocks"
    }
  ],
  "workflow_json": "{\"id\":\"r3qHlCVCczqTw3pP\",\"meta\":{\"instanceId\":\"1bc0f4fa5e7d17ac362404cbb49337e51e5061e019cfa24022a8667c1f1ce287\"},\"name\":\"Zip multiple files\",\"tags\":[],\"nodes\":[{\"id\":\"8de50ed2-b298-4701-8747-f6c7158fa15f\",\"name\":\"Execute Workflow Trigger\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[0,0],\"parameters\":{},\"typeVersion\":1},{\"id\":\"5e03dfdd-696e-4a04-99e9-4094ae4371ac\",\"name\":\"Compression\",\"type\":\"n8n-nodes-base.compression\",\"position\":[460,0],\"parameters\":{\"fileName\":\"=data{{$now.format('yyyy-MM-dd-tt')}}.zip\",\"operation\":\"compress\",\"binaryPropertyName\":\"={{ $json.binary_keys }}\"},\"typeVersion\":1.1},{\"id\":\"e25abf55-fb05-47d0-ba65-9b4e2f08d856\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-340,-100],\"parameters\":{\"height\":360,\"content\":\"## About\\nUse me as modular workflow. Instead of building me fixed in your workflow. Just call me when you need me.\\n\\n\\n## Input\\nInput can be multiple files \\n-imgaes\\n-pdfs\\n-xlsx,csv....\\n\\n## Output\\nSingle zip file\"},\"typeVersion\":1},{\"id\":\"db7b6475-25b5-44de-b37e-70b75c91455e\",\"name\":\"Prepare Output\",\"type\":\"n8n-nodes-base.set\",\"position\":[680,0],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"b0c3c3db-584a-48c9-b0ca-7f527d35f5a4\",\"name\":\"fileName\",\"type\":\"string\",\"value\":\"={{ $binary.data.fileName.replaceAll(\\\" \\\",\\\"\\\") }}\"}]},\"includeOtherFields\":true},\"typeVersion\":3.4},{\"id\":\"6cf6b9ba-e5a3-4d5f-a539-e84d839f7e99\",\"name\":\"Code Magic\",\"type\":\"n8n-nodes-base.code\",\"position\":[240,0],\"parameters\":{\"jsCode\":\"let binaries = {}, binary_keys = [];\\n\\nfor (const [index, inputItem] of Object.entries($input.all())) {\\n  binaries[`data_${index}`] = inputItem.binary.data;\\n  binary_keys.push(`data_${index}`);\\n}\\n\\nreturn [{\\n    json: {\\n        binary_keys: binary_keys.join(',')\\n    },\\n    binary: binaries\\n}];\\n\"},\"typeVersion\":2}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"16f64706-0a2a-4f9f-a96f-f149a4874ae4\",\"connections\":{\"Code Magic\":{\"main\":[[{\"node\":\"Compression\",\"type\":\"main\",\"index\":0}]]},\"Compression\":{\"main\":[[{\"node\":\"Prepare Output\",\"type\":\"main\",\"index\":0}]]},\"Execute Workflow Trigger\":{\"main\":[[{\"node\":\"Code Magic\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "# 📦 Zip Multiple Files Dynamically\n\nThis template enables you to dynamically bundle multiple files into a ZIP archive. Designed to be used as a **Subworkflow** , it’s modular, flexible, and easy to integrate into various workflows. The output is a single ZIP file with a name that includes the current date, time, and fileName.\n\nShoutout:  \nCode from: [Tom (mutedjam)](https://n8n.io/creators/mutedjam/)\n\n* * *\n\n### 👤 **Who is this for?**\n\nThis workflow is perfect for:\n\n  * 🚀 Businesses automating file archiving tasks.\n  * 💻 Developers managing files programmatically.\n  * 📂 Anyone needing a reusable solution for bundling files into ZIP archives.\n\n\n\n* * *\n\n### ❓ **What problem is this workflow solving?**\n\nManually zipping multiple files is:\n\n  * 🕒 Time-consuming.\n  * 🤔 Prone to errors.\n\n\n\nThis workflow automates the process and, as a **Subworkflow** , ensures:\n\n  * ⚡ Consistent file archiving across different workflows.\n  * 🛠️ Reduced manual effort.\n  * 📈 Streamlined integration into existing automation.\n\n\n\n* * *\n\n### 🔧 **What this workflow does**\n\n  1. 🗂️ Dynamically collects binary files from the input.\n  2. 📦 Bundles them into a single ZIP archive.\n  3. 🕒 Names the ZIP file with the current date, time, and a customizable `fileName`.\n  4. ✅ Outputs the ZIP file, ready for storage or further processing.\n\n\n\n* * *\n\n### ⚙️ **Setup**\n\n  1. 🔗 Add this Subworkflow to your existing workflows.\n  2. 📥 Pass the binary files as input to the Subworkflow.\n  3. ▶️ Call the Subworkflow to generate a ZIP file.\n\n\n\n* * *\n\n### 🛠️ **How to customize this workflow to your needs**\n\n  * **🌐 File Sources** : Adjust the input nodes in your parent workflow to connect to your preferred file sources.\n  * **📝 File Naming** : Customize the logic for the output `fileName` in the Subworkflow.\n  * **🚀 Additional Use Cases** : Use this Subworkflow in various scenarios, such as: \n    * ✉️ Sending ZIP files via email.\n    * ☁️ Uploading ZIP files to cloud storage.\n    * 🔄 Triggering further automation.\n\n\n\n* * *\n\n### 🎉 **Why use this as a Subworkflow?**\n\nInstead of building a fixed ZIP functionality for every workflow, this template offers a **reusable solution** that can be integrated into many different workflows effortlessly. Save time and ensure consistency across your automation projects! 💡\n",
  "crawled_at": "2025-05-26T01:42:32.062389",
  "readme_zh": "# 📦 Zip Multiple Files Dynamically\n\nThis template enables you to dynamically bundle multiple files into a ZIP archive. Designed to be used as a **Subworkflow** , it’s modular, flexible, and easy to integrate into various workflows. The output is a single ZIP file with a name that includes the current date, time, and fileName.\n\nShoutout:  \nCode from: [Tom (mutedjam)](https://n8n.io/creators/mutedjam/)\n\n* * *\n\n### 👤 **Who is this for?**\n\nThis workflow is perfect for:\n\n  * 🚀 Businesses automating file archiving tasks.\n  * 💻 Developers managing files programmatically.\n  * 📂 Anyone needing a reusable solution for bundling files into ZIP archives.\n\n\n\n* * *\n\n### ❓ **What problem is this workflow solving?**\n\nManually zipping multiple files is:\n\n  * 🕒 Time-consuming.\n  * 🤔 Prone to errors.\n\n\n\nThis workflow automates the process and, as a **Subworkflow** , ensures:\n\n  * ⚡ Consistent file archiving across different workflows.\n  * 🛠️ Reduced manual effort.\n  * 📈 Streamlined integration into existing automation.\n\n\n\n* * *\n\n### 🔧 **What this workflow does**\n\n  1. 🗂️ Dynamically collects binary files from the input.\n  2. 📦 Bundles them into a single ZIP archive.\n  3. 🕒 Names the ZIP file with the current date, time, and a customizable `fileName`.\n  4. ✅ Outputs the ZIP file, ready for storage or further processing.\n\n\n\n* * *\n\n### ⚙️ **Setup**\n\n  1. 🔗 Add this Subworkflow to your existing workflows.\n  2. 📥 Pass the binary files as input to the Subworkflow.\n  3. ▶️ Call the Subworkflow to generate a ZIP file.\n\n\n\n* * *\n\n### 🛠️ **How to customize this workflow to your needs**\n\n  * **🌐 File Sources** : Adjust the input nodes in your parent workflow to connect to your preferred file sources.\n  * **📝 File Naming** : Customize the logic for the output `fileName` in the Subworkflow.\n  * **🚀 Additional Use Cases** : Use this Subworkflow in various scenarios, such as: \n    * ✉️ Sending ZIP files via email.\n    * ☁️ Uploading ZIP files to cloud storage.\n    * 🔄 Triggering further automation.\n\n\n\n* * *\n\n### 🎉 **Why use this as a Subworkflow?**\n\nInstead of building a fixed ZIP functionality for every workflow, this template offers a **reusable solution** that can be integrated into many different workflows effortlessly. Save time and ensure consistency across your automation projects! 💡\n",
  "title_zh": "可重复使用的子工作流：动态压缩多个文件（打包）",
  "publish_date_zh": "最后更新于4个月前",
  "workflow_json_zh": "{\n  \"id\": \"r3qHlCVCczqTw3pP\",\n  \"meta\": {\n    \"instanceId\": \"1bc0f4fa5e7d17ac362404cbb49337e51e5061e019cfa24022a8667c1f1ce287\"\n  },\n  \"name\": \"Zip multiple files\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"8de50ed2-b298-4701-8747-f6c7158fa15f\",\n      \"name\": \"Execute Workflow Trigger\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        0,\n        0\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5e03dfdd-696e-4a04-99e9-4094ae4371ac\",\n      \"name\": \"Compression\",\n      \"type\": \"n8n-nodes-base.compression\",\n      \"position\": [\n        460,\n        0\n      ],\n      \"parameters\": {\n        \"fileName\": \"=data{{$now.format('yyyy-MM-dd-tt')}}.zip\",\n        \"operation\": \"compress\",\n        \"binaryPropertyName\": \"={{ $json.binary_keys }}\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"e25abf55-fb05-47d0-ba65-9b4e2f08d856\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -340,\n        -100\n      ],\n      \"parameters\": {\n        \"height\": 360,\n        \"content\": \"## 关于\\n将我作为模块化工作流使用。无需将我固定内置于您的工作流程中，只需在需要时调用即可。\\n\\n## 输入\\n支持多种文件格式输入：\\n- 图片\\n- PDF文档\\n- Excel表格（xlsx）、CSV文件...\\n\\n## 输出\\n生成单个压缩包（zip文件）\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"db7b6475-25b5-44de-b37e-70b75c91455e\",\n      \"name\": \"Prepare Output\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        680,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"b0c3c3db-584a-48c9-b0ca-7f527d35f5a4\",\n              \"name\": \"fileName\",\n              \"type\": \"string\",\n              \"value\": \"={{ $binary.data.fileName.replaceAll(\\\" \\\",\\\"\\\") }}\"\n            }\n          ]\n        },\n        \"includeOtherFields\": true\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"6cf6b9ba-e5a3-4d5f-a539-e84d839f7e99\",\n      \"name\": \"Code Magic\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        240,\n        0\n      ],\n      \"parameters\": {\n        \"jsCode\": \"let binaries = {}, binary_keys = [];\\n\\nfor (const [index, inputItem] of Object.entries($input.all())) {\\n  binaries[`data_${index}`] = inputItem.binary.data;\\n  binary_keys.push(`data_${index}`);\\n}\\n\\nreturn [{\\n    json: {\\n        binary_keys: binary_keys.join(',')\\n    },\\n    binary: binaries\\n}];\\n\"\n      },\n      \"typeVersion\": 2\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"16f64706-0a2a-4f9f-a96f-f149a4874ae4\",\n  \"connections\": {\n    \"Code Magic\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Compression\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Compression\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prepare Output\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Execute Workflow Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code Magic\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}