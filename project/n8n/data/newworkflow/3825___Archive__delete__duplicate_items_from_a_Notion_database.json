{
  "url": "https://n8n.io/workflows/3825-archive-delete-duplicate-items-from-a-notion-database/",
  "title": "🧹 Archive (delete) duplicate items from a Notion database",
  "author": "Lucía Maio Brioso",
  "publish_date": "Last update 20 days ago",
  "publish_date_absolute": "2025-05-06",
  "categories": [
    {
      "name": "IT Ops"
    }
  ],
  "workflow_json": "{\"id\":\"As8TxF3PjyXygc0o\",\"meta\":{\"instanceId\":\"a059b3dfdab56aa587cc6a2c8635f6f2700cf0c7064dbfb5981c26f7ad9eab88\"},\"name\":\"🧹 Archive (delete) duplicate items from a Notion database\",\"tags\":[],\"nodes\":[{\"id\":\"b758ce01-7f5e-4bdc-a4c3-6c00d6bc022a\",\"name\":\"Every day\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[-180,660],\"parameters\":{\"rule\":{\"interval\":[{}]}},\"typeVersion\":1.2},{\"id\":\"1ca45ba5-4635-4710-9807-26f22d535059\",\"name\":\"Get pages from database\",\"type\":\"n8n-nodes-base.notion\",\"position\":[60,560],\"parameters\":{\"options\":{},\"resource\":\"databasePage\",\"operation\":\"getAll\",\"returnAll\":true,\"databaseId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"\"}},\"typeVersion\":2.2},{\"id\":\"ef8c8cfa-12fb-4fb9-8552-09f69f1f358d\",\"name\":\"Aggregate all items\",\"type\":\"n8n-nodes-base.aggregate\",\"position\":[500,560],\"parameters\":{\"options\":{},\"aggregate\":\"aggregateAllItemData\",\"destinationFieldName\":\"pages\"},\"typeVersion\":1},{\"id\":\"f1c3c0ad-f904-4d63-a131-0b045a21ce04\",\"name\":\"Format items properly\",\"type\":\"n8n-nodes-base.set\",\"position\":[280,560],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"309a1e9b-f3e9-41a0-aadb-aa74bc993fe9\",\"name\":\"id\",\"type\":\"string\",\"value\":\"={{ $json.id }}\"},{\"id\":\"ad6e8fa9-9872-456d-971f-3cef940b7d8a\",\"name\":\"property_to_check\",\"type\":\"string\",\"value\":\"=\\\"SET YOUR PROPERTY HERE\\\"\"}]}},\"typeVersion\":3.4},{\"id\":\"5d39d3b7-604d-4aca-bf9a-3bb09bddad66\",\"name\":\"Filter duplicates\",\"type\":\"n8n-nodes-base.code\",\"position\":[720,560],\"parameters\":{\"jsCode\":\"const inputData = $input.first().json.pages;\\n\\nconst seen = new Set();\\nconst duplicates = new Map();\\n\\ninputData.forEach(item => {\\n  const propertyValue = item.property_to_check;\\n  if (seen.has(propertyValue)) {\\n    duplicates.set(propertyValue, item);\\n  } else {\\n    seen.add(propertyValue);\\n  }\\n});\\n\\nconst output = Array.from(duplicates.values()).map(item => ({ json: item }));\\n\\nreturn output;\"},\"typeVersion\":2},{\"id\":\"55a8f0eb-702b-4056-a28c-96a7ade7c2cd\",\"name\":\"Archive pages\",\"type\":\"n8n-nodes-base.notion\",\"position\":[920,560],\"parameters\":{\"pageId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $json.id }}\"},\"operation\":\"archive\"},\"typeVersion\":2.2},{\"id\":\"2c9655ea-401c-410b-a4b1-b001ae6dbe4b\",\"name\":\"When a page is added to the database\",\"type\":\"n8n-nodes-base.notionTrigger\",\"position\":[-180,460],\"parameters\":{\"pollTimes\":{\"item\":[{\"mode\":\"everyMinute\"}]},\"databaseId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"\"}},\"typeVersion\":1},{\"id\":\"672b647c-d009-45c3-b69e-6dfe85992e15\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[0,0],\"parameters\":{\"width\":860,\"height\":460,\"content\":\"## 🧹 Archive (delete) extra duplicate items from Notion database\\n### ABOUT THIS WORKFLOW\\nThis n8n workflow automatically gets duplicate database pages based on a property and \\\"archives\\\" them (equivalent to deleting them), leaving just one copy.\\n\\n### SETUP\\n1. Create a Notion credential.\\n2. Add it to the Notion nodes, selecting the appropriate database.\\n3. In the \\\"Set\\\" node (\\\"Format items properly\\\"), specify a reference to the property you want to check for duplicates and assign it to the field \\\"property_to_check\\\". I recommend using the n8n property drag-and-drop feature.\\n4. Enjoy!\\n\\n### ABOUT THE TRIGGERS\\nThis workflow offers two possible triggers by default:\\n- Run every time a page is added to the database.\\n- Run every day.\\n\\n\\nYou can enable, disable, or modify these triggers as you like.\"},\"typeVersion\":1},{\"id\":\"83881bd3-60e3-40be-a469-0b7acb21d2be\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-240,400],\"parameters\":{\"color\":5,\"width\":220,\"height\":420,\"content\":\"## TRIGGERS\"},\"typeVersion\":1},{\"id\":\"cd4b8717-19ae-42d6-ac87-bbdd071dd774\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[0,480],\"parameters\":{\"color\":6,\"width\":860,\"height\":340,\"content\":\"## GET DUPLICATE PAGES\"},\"typeVersion\":1},{\"id\":\"087fb844-2241-4ed9-976d-9bdc7ccd8aa5\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[880,400],\"parameters\":{\"color\":3,\"width\":180,\"height\":420,\"content\":\"## ARCHIVE (DELETE)\"},\"typeVersion\":1}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"fdd2e5ad-4ff5-4432-a5f9-ebbeb1a1a6cb\",\"connections\":{\"Every day\":{\"main\":[[{\"node\":\"Get pages from database\",\"type\":\"main\",\"index\":0}]]},\"Filter duplicates\":{\"main\":[[{\"node\":\"Archive pages\",\"type\":\"main\",\"index\":0}]]},\"Aggregate all items\":{\"main\":[[{\"node\":\"Filter duplicates\",\"type\":\"main\",\"index\":0}]]},\"Format items properly\":{\"main\":[[{\"node\":\"Aggregate all items\",\"type\":\"main\",\"index\":0}]]},\"Get pages from database\":{\"main\":[[{\"node\":\"Format items properly\",\"type\":\"main\",\"index\":0}]]},\"When a page is added to the database\":{\"main\":[[{\"node\":\"Get pages from database\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "### 🧑‍💼 Who is this for?\n\nIf you’re using **Notion** to manage a database (like saving links, tasks, notes, or anything really), and it’s starting to get messy with duplicate entries, this workflow is for you.\n\nIt’s especially useful if you want to keep things tidy _without_ doing any manual cleanup.\n\n### 🧠 What problem is this workflow solving?\n\nNotion doesn’t have a built-in way to find or remove duplicates, so you either clean them up manually 😩 or just let them pile up.\n\nThis workflow automatically finds entries that share the same property (like a URL or title) and archives the extra copies, keeping just one.\n\n### ⚙️ What this workflow does\n\n  * Pulls all pages from a Notion database.\n  * Identifies duplicates based on a property you choose.\n  * Archives the duplicate pages (which is like soft-deleting them).\n  * Keeps one version of each duplicate group.\n\n\n\nIt includes **two optional triggers** :\n\n  * Run it every day ⏰\n  * Or trigger it automatically when a new page is added to the database ⚡\n\n\n\n### 🛠️ Setup\n\n  1. Connect your Notion account in n8n.\n  2. Select your database in the Notion nodes.\n  3. In the **“Format items properly”** node, replace `\"SET YOUR PROPERTY HERE\"` with a reference to the property you want to use for detecting duplicates. I recommend using the n8n property drag-and-drop feature.\n  4. Enable whichever trigger you prefer — or both.\n\n\n\nAnd that’s it. It runs on its own after that.\n\n### 🧩 How to customize this workflow to your needs\n\n  * Use a different property for detecting duplicates by updating the `Set` node.\n  * Want to tag duplicates instead of archiving them? Just replace the last Notion node with an update operation.\n  * Adjust the schedule to run it hourly, weekly, or whenever suits your setup.\n\n\n",
  "crawled_at": "2025-05-26T05:40:46.559202",
  "readme_zh": "### 🧑‍💼 Who is this for?\n\nIf you’re using **Notion** to manage a database (like saving links, tasks, notes, or anything really), and it’s starting to get messy with duplicate entries, this workflow is for you.\n\nIt’s especially useful if you want to keep things tidy _without_ doing any manual cleanup.\n\n### 🧠 What problem is this workflow solving?\n\nNotion doesn’t have a built-in way to find or remove duplicates, so you either clean them up manually 😩 or just let them pile up.\n\nThis workflow automatically finds entries that share the same property (like a URL or title) and archives the extra copies, keeping just one.\n\n### ⚙️ What this workflow does\n\n  * Pulls all pages from a Notion database.\n  * Identifies duplicates based on a property you choose.\n  * Archives the duplicate pages (which is like soft-deleting them).\n  * Keeps one version of each duplicate group.\n\n\n\nIt includes **two optional triggers** :\n\n  * Run it every day ⏰\n  * Or trigger it automatically when a new page is added to the database ⚡\n\n\n\n### 🛠️ Setup\n\n  1. Connect your Notion account in n8n.\n  2. Select your database in the Notion nodes.\n  3. In the **“Format items properly”** node, replace `\"SET YOUR PROPERTY HERE\"` with a reference to the property you want to use for detecting duplicates. I recommend using the n8n property drag-and-drop feature.\n  4. Enable whichever trigger you prefer — or both.\n\n\n\nAnd that’s it. It runs on its own after that.\n\n### 🧩 How to customize this workflow to your needs\n\n  * Use a different property for detecting duplicates by updating the `Set` node.\n  * Want to tag duplicates instead of archiving them? Just replace the last Notion node with an update operation.\n  * Adjust the schedule to run it hourly, weekly, or whenever suits your setup.\n\n\n",
  "title_zh": "🧹 归档（删除）Notion数据库中的重复项",
  "publish_date_zh": "最后更新于6小时前",
  "workflow_json_zh": "{\n  \"id\": \"As8TxF3PjyXygc0o\",\n  \"meta\": {\n    \"instanceId\": \"a059b3dfdab56aa587cc6a2c8635f6f2700cf0c7064dbfb5981c26f7ad9eab88\"\n  },\n  \"name\": \"🧹 Archive (delete) duplicate items from a Notion database\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"b758ce01-7f5e-4bdc-a4c3-6c00d6bc022a\",\n      \"name\": \"Every day\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [\n        -180,\n        660\n      ],\n      \"parameters\": {\n        \"rule\": {\n          \"interval\": [\n            {}\n          ]\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"1ca45ba5-4635-4710-9807-26f22d535059\",\n      \"name\": \"Get pages from database\",\n      \"type\": \"n8n-nodes-base.notion\",\n      \"position\": [\n        60,\n        560\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"resource\": \"databasePage\",\n        \"operation\": \"getAll\",\n        \"returnAll\": true,\n        \"databaseId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"\"\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"ef8c8cfa-12fb-4fb9-8552-09f69f1f358d\",\n      \"name\": \"Aggregate all items\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        500,\n        560\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"aggregate\": \"aggregateAllItemData\",\n        \"destinationFieldName\": \"pages\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f1c3c0ad-f904-4d63-a131-0b045a21ce04\",\n      \"name\": \"Format items properly\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        280,\n        560\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"309a1e9b-f3e9-41a0-aadb-aa74bc993fe9\",\n              \"name\": \"id\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.id }}\"\n            },\n            {\n              \"id\": \"ad6e8fa9-9872-456d-971f-3cef940b7d8a\",\n              \"name\": \"property_to_check\",\n              \"type\": \"string\",\n              \"value\": \"=\\\"SET YOUR PROPERTY HERE\\\"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"5d39d3b7-604d-4aca-bf9a-3bb09bddad66\",\n      \"name\": \"Filter duplicates\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        720,\n        560\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const inputData = $input.first().json.pages;\\n\\nconst seen = new Set();\\nconst duplicates = new Map();\\n\\ninputData.forEach(item => {\\n  const propertyValue = item.property_to_check;\\n  if (seen.has(propertyValue)) {\\n    duplicates.set(propertyValue, item);\\n  } else {\\n    seen.add(propertyValue);\\n  }\\n});\\n\\nconst output = Array.from(duplicates.values()).map(item => ({ json: item }));\\n\\nreturn output;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"55a8f0eb-702b-4056-a28c-96a7ade7c2cd\",\n      \"name\": \"Archive pages\",\n      \"type\": \"n8n-nodes-base.notion\",\n      \"position\": [\n        920,\n        560\n      ],\n      \"parameters\": {\n        \"pageId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $json.id }}\"\n        },\n        \"operation\": \"archive\"\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"2c9655ea-401c-410b-a4b1-b001ae6dbe4b\",\n      \"name\": \"When a page is added to the database\",\n      \"type\": \"n8n-nodes-base.notionTrigger\",\n      \"position\": [\n        -180,\n        460\n      ],\n      \"parameters\": {\n        \"pollTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"everyMinute\"\n            }\n          ]\n        },\n        \"databaseId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"672b647c-d009-45c3-b69e-6dfe85992e15\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        0,\n        0\n      ],\n      \"parameters\": {\n        \"width\": 860,\n        \"height\": 460,\n        \"content\": \"## 🧹 归档（删除）Notion数据库中的重复项  \\n### 工作流说明  \\n该n8n工作流能自动识别数据库中指定属性的重复页面，并将其\\\"归档\\\"（相当于删除），仅保留唯一副本。  \\n\\n### 配置步骤  \\n1. 创建Notion凭证  \\n2. 将其添加至Notion节点中，并选择目标数据库  \\n3. 在\\\"Set\\\"节点（标注为\\\"格式化条目\\\"处）：  \\n   - 指定需要查重的属性字段  \\n   - 将其赋值给\\\"property_to_check\\\"字段  \\n   （推荐使用n8n的属性拖拽功能实现）  \\n4. 完成！  \\n\\n### 触发器说明  \\n默认提供两种触发方式：  \\n- 每当数据库新增页面时自动运行  \\n- 每日定时运行  \\n\\n可根据需求自由启用、禁用或修改这些触发器。  \\n\\n（注：译文在保持技术准确性的同时，采用更简洁的短句结构和符合中文技术文档习惯的术语，如\\\"查重\\\"替代\\\"check for duplicates\\\"，\\\"凭证\\\"替代\\\"credential\\\"。通过分段和项目符号优化可读性，并保留原文的Markdown格式与emoji符号。）\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"83881bd3-60e3-40be-a469-0b7acb21d2be\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -240,\n        400\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 220,\n        \"height\": 420,\n        \"content\": \"## 触发因素\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cd4b8717-19ae-42d6-ac87-bbdd071dd774\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        0,\n        480\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 860,\n        \"height\": 340,\n        \"content\": \"## 获取重复页面\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"087fb844-2241-4ed9-976d-9bdc7ccd8aa5\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        880,\n        400\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 180,\n        \"height\": 420,\n        \"content\": \"## 归档（删除）\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"fdd2e5ad-4ff5-4432-a5f9-ebbeb1a1a6cb\",\n  \"connections\": {\n    \"Every day\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get pages from database\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filter duplicates\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Archive pages\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Aggregate all items\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filter duplicates\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Format items properly\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate all items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get pages from database\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Format items properly\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When a page is added to the database\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get pages from database\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}