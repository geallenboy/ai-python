{
  "url": "https://blog.n8n.io/how-to-set-up-a-ci-cd-pipeline-with-no-code/",
  "title": "How to set up a no-code CI/CD pipeline with GitHub and TravisCI",
  "excerpt": "Learn how Continuous Integration, Continuous Delivery, and Continuous Development work, and how you can set up a CI/CD pipeline.",
  "thumbnail": "https://blog.n8n.io/content/images/size/w1200/2021/09/Template-blogpost-cover-1.svg",
  "tags": [
    "ITOps",
    "Guide"
  ],
  "html": "<p>If you work in software development teams, you’re probably familiar with the concepts of Continuous Integration (CI) and Continuous Delivery or Continuous Deployment (CD). These practices are commonly combined in a CI/CD pipeline, which is an important part of DevOps. Basically, CI/CD allows you to automatically build, test, and deploy code changes – helping your team work more efficiently.</p><p>The CI/CD pipeline consists of three different stages:</p><ol><li>Continuous Integration (CI)</li><li>Continuous Delivery (CD)</li><li>Continuous Development (CD)</li></ol><p>In this article, we’ll explain what are the advantages of CI/CD, what each of these three stages mean, and show you how to set up a CI/CD pipeline for your projects using n8n workflows with <a href=\"http://github.com/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">GitHub</a>, <a href=\"http://gitlab.com/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">GitLab</a>, <a href=\"https://travis-ci.org/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">TravisCI</a>, and <a href=\"https://circleci.com/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">CircleCI</a>.</p><h2 id=\"advantages-of-using-a-cicd-pipeline\">Advantages of using a CI/CD pipeline</h2><p>Using the CI/CD strategy in the software development life cycle has many advantages:</p><ul><li>Standardization of the code production and deployment process, helping to reduce errors and maintain code quality standards.</li><li>Reduction in time and effort spent on testing and deploying the application manually. The DevOps team can focus on delivering features for the end-users.</li><li>Ability to run tests on different platforms simultaneously and fix errors quickly</li><li>Faster shipment of new features faster.</li></ul><h2 id=\"what-is-continuous-integration-ci\">What is Continuous Integration (CI)?</h2><p>Software development is commonly a collective effort, where multiple developers work in parallel on different features and merge their code changes to the main (or development) branch frequently.</p><p>CI validates the changes to the code by automatically building the software and running tests. You can set up different tests to ensure that the code changes pass all the tests, guidelines, and code compliance standards you established. If the tests are successful, the changes get merged, otherwise an error message is returned, making it easier to fix the bugs quickly. This process helps developers integrate their changes more efficiently.</p><p>To understand CI better, consider the <a href=\"https://github.com/n8n-io/n8n?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">n8n repository</a>. Various developers contribute to the project by adding a new node, fixing a bug, or adding new functionality. When they push their code, instead of verifying each change manually, we set up automated tests that would build and test them. This strategy decreases the chances of introducing bugs and helps our team work more effectively.</p><h2 id=\"building-a-ci-pipeline-with-github-trigger-and-travis-ci\">Building a CI pipeline with GitHub Trigger and Travis CI</h2><p>Two of the most popular CI tools out there are TravisCI and CircleCI, which offer functionalities for testing projects hosted on GitHub. n8n has nodes for all of these platforms, which makes it fairly straightforward to build a CI workflow.</p><p>We built one that triggers a build in Travis CI when code changes are pushed to a GitHub repo or a pull request gets opened. To get started, you can copy this workflow from the <a href=\"https://n8n.io/workflows/1132?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">workflows page</a> and configure the <em>GitHub Trigger, IF, and TravisCI</em> nodes as explained below.<br>(Note that you can replace the GitHub Trigger node with GitLab Trigger and Travis CI with CircleCI, depending on your use case.)</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-08-at-16.37.45.png\" class=\"kg-image lightense-target\" alt=\"n8n workflow for CI with GitHub Trigger and Travis CI\" loading=\"lazy\" width=\"1122\" height=\"478\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-08-at-16.37.45.png 600w, https://blog.n8n.io/content/images/size/w1000/2022/09/Screenshot-2022-09-08-at-16.37.45.png 1000w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-08-at-16.37.45.png 1122w\" sizes=\"(min-width: 720px) 720px\"><figcaption>n8n workflow for CI with GitHub Trigger and Travis CI</figcaption></figure><h3 id=\"set-up-github-triggers\">Set up GitHub triggers</h3><p>First, you need to configure the <em>GitHub Trigger</em> node, which will trigger your workflow when new code changes get pushed to the project repository and when a new pull request is opened, updated, closed, or merged. In the <em>GitHub Trigger</em> node, configure these parameters:</p><ul><li><em>Github OAuth2 API</em>: Enter your credentials (read our <a href=\"https://docs.n8n.io/credentials/github/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"></a><a href=\"https://docs.n8n.io/credentials/github/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">d</a>ocs to learn how to get your credentials).</li><li><em>Authentication: </em>OAuth</li><li><em>Repository Owner: </em>the name of the owner of the repository you want to use (e.g. n8n-io)</li><li><em>Repository Name: </em>the name of the repository you want to use (e.g. n8n)</li><li><em>Events: </em>push, pull_request</li></ul><p>Note that you can use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.gitlabTrigger?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>GitLab Trigger</em> node</a> if you host your projects on GitLab, the configuration is similar to the <em>GitHub node</em>.</p><p><strong>2. Filter pushed changes / pull requests</strong></p><p>The tests should only run if new changes get pushed or a pull request gets opened. To filter out the event, add the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.if/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>IF</em> node</a> and configure three parameters:</p><ul><li>Add a first condition that checks if changes were pushed:<br><em>Value 1:</em> {{$json[\"headers\"][\"x-github-event\"]}}<br><em>Operation:</em> Equal<br><em>Value 2:</em> push</li><li>Add a second condition that checks if the action for a pull request is opened:<br><em>Value 1: </em>{{$json[\"body\"][\"action\"]}}<em> </em><br><em>Operation:</em> Equal<br><em>Value 2:</em> opened</li><li><em>Combine</em>: ANY<br>This option runs the test when either of the above conditions is true.</li></ul><p><strong>3. Connect to the CI platform</strong></p><p>The final step is connecting your CI platform of choice to integrate the changes. Add the <em>TravisCI node</em> and configure the parameters:</p><ul><li><em>Travis API:</em> Enter your credentials (read our <a href=\"https://docs.n8n.io/credentials/travisCi/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">documentation</a> to learn how to get your credentials).</li><li><em>Resource:</em> Build</li><li><em>Operation</em>: Trigger</li><li><em>Slug: </em>{{$json[\"body\"][\"repository\"][\"full_name\"]}} <br>You can select this expression by clicking on: Current Node &gt; Input Data &gt; JSON &gt; body &gt; repository &gt; full_name.</li><li><em>Branch:</em> the name of the branch you want to use</li></ul><p>You can also use the <em>CircleCI node</em>, which has a similar configuration to the <em>TravisCI node</em>.</p><p>That was it! Now you have a workflow that will build your project and run the tests you have written when code changes are pushed or when a pull request is opened.</p><h2 id=\"what-is-continuous-delivery-cd\">What is Continuous Delivery (CD)?</h2><p>With CI, your application is built and tested each time a code change gets pushed to the project repository. With CD, you automate the release process of the code changes. However, human intervention is needed to trigger the deployment.</p><p>In CD, all the stages involve automated tests and code release automation. At the end of this process, the operations team deploys the application to production. The goal of CD is to have a code base that is always ready for deployment.</p><p>To understand this better, let’s continue with the example of the n8n repository. After all the automated tests pass, the code is merged and is ready to be deployed.</p><p>However, the deployment is not automated. The new version release is processed manually. The deployment of the latest n8n version on <a href=\"https://n8n.io/cloud/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">n8n cloud</a> is also not completely automated, as an engineer from our team with the required access needs to press the <em><strong>Release to staging</strong></em> or <em><strong>Release to production</strong></em> button in <a href=\"https://mattermost.com/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Mattermost</a>. (You can <a href=\"https://blog.n8n.io/5-workflow-automations-for-mattermost-that-we-love-at-n8n/\">read here</a> how we created this Mattermost slash command, and other useful ones.) This interaction triggers an n8n workflow that deploys the latest n8n version on the staging or production environment, respectively.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-08-at-16.38.32.png\" class=\"kg-image lightense-target\" alt=\"Mattermost bot for version releases\" loading=\"lazy\" width=\"1116\" height=\"272\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-08-at-16.38.32.png 600w, https://blog.n8n.io/content/images/size/w1000/2022/09/Screenshot-2022-09-08-at-16.38.32.png 1000w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-08-at-16.38.32.png 1116w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Mattermost bot for version releases</figcaption></figure><h2 id=\"building-a-cd-pipeline-with-telegram-and-github\">Building a CD pipeline with Telegram and GitHub</h2><p>n8n can be used to deploy the application to the production environment. Once your CI pipeline returns a successful result, you can trigger your n8n workflow to release the changes.</p><p>The workflow can be triggered via a chat platform (e.g. <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.mattermost/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Mattermost</a>, <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.slack/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Slack</a>, <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.telegram?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Telegram</a>, etc.) and you can even schedule the trigger using the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.cron?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Cron</em> node</a> or the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.interval/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Interval</em> node</a>.</p><h3 id=\"create-a-new-release-on-github\">Create a new release on GitHub</h3><p>To help you get started, we created <a href=\"https://n8n.io/workflows/1134?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">a workflow</a> that allows you to release a new version via a Telegram bot command.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-08-at-16.38.54.png\" class=\"kg-image lightense-target\" alt=\"n8n workflow for CD with Telegram and GitHub\" loading=\"lazy\" width=\"1120\" height=\"480\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-08-at-16.38.54.png 600w, https://blog.n8n.io/content/images/size/w1000/2022/09/Screenshot-2022-09-08-at-16.38.54.png 1000w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-08-at-16.38.54.png 1120w\" sizes=\"(min-width: 720px) 720px\"><figcaption>n8n workflow for CD with Telegram and GitHub</figcaption></figure><p>Here’s how to set up this workflow:</p><h3 id=\"1-set-up-telegram-triggers\">1. Set up Telegram triggers</h3><p>Add a <em>Telegram Trigger</em> node to trigger the workflow when a message is sent to the bot.</p><ul><li><em>Telegram API</em>: Enter your credentials (follow the steps mentioned in the <a href=\"https://docs.n8n.io/credentials/telegram/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Telegram credential</a> documentation to get your Telegram credentials).<br>You also need to create a deploy command for your Telegram bot (refer to the <a href=\"https://core.telegram.org/bots?ref=blog.n8n.io#6-botfather\" target=\"_blank\" rel=\"noopener\">documentation</a> to learn how to create a Telegram bot command).</li><li><em>Updates</em>: message</li></ul><h3 id=\"2-if-node\">2. IF node</h3><p>Add an <em>IF</em> node that checks if the incoming message contains the /deploy command:</p><ul><li><em>Value 1</em>: {{$json[\"message\"][\"text\"]}}</li><li><em>Operation</em>: contains</li><li><em>Value 2</em>: /deploy</li></ul><h3 id=\"3-set-node\">3. Set node</h3><p>Connect a <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.set/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Set</em> node</a> to the true output of the <em>IF</em> node and configure the parameters:</p><ul><li><em>Keep Only Set</em>: Toggle to true<br>This option will return the values we configure in the <em>Set</em> node.</li><li><em>Name</em>: the name of your version</li><li><em>Value</em>: {{$json[\"message\"][\"text\"].split(' ')[1]}}</li></ul><h3 id=\"4-github-node\">4. GitHub node</h3><p>Add a <em>GitHub</em> node and configure the parameters:</p><ul><li><em>Github OAuth2 API</em>: Enter your credentials (follow the steps mentioned in the <a href=\"https://docs.n8n.io/credentials/github/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">documentation</a> to learn how to get your credentials).</li><li><em>Authentication:</em></li><li><em>Resource: </em>Release</li><li><em>Operation: </em>Create</li><li><em>Repository Owner: </em>the name of the repository owner (e.g. n8n-io)</li><li><em>Repository Name: </em>the name of the repository you want to use (e.g. n8n)</li><li><em>Tag: </em>{{$json[\"version\"]}}<br>You can select this expression by clicking on: Current Node &gt; Input Data &gt; JSON &gt; version</li></ul><h3 id=\"5-noop-node\">5. NoOp node</h3><p>This step is optional and only to show that you can continue the workflow in this direction. Connect a <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.noOp/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>No Operation, do nothing</em> node</a> to the false output of the IF node.</p><p>You can build a similar workflow for your repository hosted on GitLab by simply replacing the <em>GitHub</em> node with the <em>GitLab</em> node.</p><h3 id=\"trigger-github-actions\">Trigger GitHub Actions</h3><p>If you’re using <a href=\"https://github.com/features/actions?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">GitHub Actions</a> for deployment, you can trigger the GitHub Actions workflow. Your GitHub Action should have the trigger type <em>repository_dispatch</em>. You can learn more about the repository_dispatch type on the official <a href=\"https://docs.github.com/en/actions/reference/events-that-trigger-workflows?ref=blog.n8n.io#repository_dispatch\" target=\"_blank\" rel=\"noopener\">GitHub documentation</a> page.</p><p>To trigger this GitHub Action from n8n, you can use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.httpRequest?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>HTTP Request</em> node</a> configured like this:</p><ul><li><em>Authentication: </em>Header Auth<br>In the Authentication window, set:<br>- <em>Name</em>: Enter Authorization<br>- <em>Value</em>: Enter Bearer and paste your Access Token</li><li><em>Request Method: </em>POST</li><li><em>URL: </em>https://api.github.com/repos/&lt;USERNAME&gt;/&lt;REPO&gt;/<br>Replace &lt;USERNAME&gt; and &lt;REPO&gt; with the repository owner name and the repository name, respectively.</li><li>Click on <em>Add Parameter</em> under the <em>Body Parameters</em> section to add a parameter with:<br>- <em>Name</em>: event_type<br>- <em>Value</em>: the event type</li></ul><p>Though Continuous Delivery involves human intervention, you can automate the repetitive parts. This strategy will save you a lot of time and help your team focus on adding new features.</p><h2 id=\"what-is-continuous-deployment-cd\">What is Continuous Deployment (CD)?</h2><p>Just like Continuous Delivery, Continuous Deployment is another step after Continuous Integration. The difference between Continuous Delivery and Continuous Deployment is that in continuous delivery, human interaction is needed (you deploy the application manually), while in continuous deployment the application gets deployed automatically (assuming all the automated tests pass successfully).</p><p>Based on your CI/CD pipeline, you can build a workflow in n8n that can automatically deploy your application. Let’s say you want to deploy your application whenever a new version is released. You can use the GitHub Trigger node to trigger this workflow. In the Events dropdown list, select release.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-08-at-16.39.29.png\" class=\"kg-image lightense-target\" alt=\"GitHub Trigger node configuration for release\" loading=\"lazy\" width=\"1120\" height=\"480\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-08-at-16.39.29.png 600w, https://blog.n8n.io/content/images/size/w1000/2022/09/Screenshot-2022-09-08-at-16.39.29.png 1000w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-08-at-16.39.29.png 1120w\" sizes=\"(min-width: 720px) 720px\"><figcaption>GitHub Trigger node configuration for release</figcaption></figure><p>If you’re using GitHub Actions, you can trigger the GitHub Action workflow, as mentioned in the above section. The next node in this workflow depends on the platform you use to deploy your application. If you don’t find the node for your platform, you can use the <em>HTTP Request</em> node to make an API call.</p><h2 id=\"what%E2%80%99s-next\">What’s next?</h2><p>In this article, you learned what CI/CD is, what are the advantages of this DevOps practice, and how you can build a CI/CD pipeline in n8n.</p><p>Now it’s your turn: start by writing tests for your application (most of the programming languages have a testing framework for this), then implement the workflows presented in this article for your personal use case. You can extend and tweak them how you like. For example, you could:</p><ul><li>add the Slack node, Mattermost node, or the Telegram node that sends you a message whenever the pipeline starts).</li><li>use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.webhook/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Webhook</em> node</a> to trigger the workflow if the tests fail or pass. If the tests fail, your workflow can create a ticket on <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.jira/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Jira</a> and send a message to your team. If the tests pass, you can automate the release process of your application.</li></ul><p><em>Start automating!</em></p><p><em>The best part is, you can start automating for free with n8n. The easiest way to get started is to sign up for a <a href=\"https://n8n.io/cloud?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a>. Thanks to n8n’s fair-code license, you can also </em><a href=\"https://docs.n8n.io/hosting/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>self-host n8n for free</em></a><em>.</em></p><hr><p><em>I’d like to know how you are using CI/CD in your software development life cycle! Will you consider implementing a CI/CD pipeline in n8n, now that you know how? Feel free to message me on <a href=\"https://twitter.com/harshil1712?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Twitter</a> or discuss on our <a href=\"https://community.n8n.io/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">forum</a> 🧡 </em></p>\n\t\t<div class=\"newsletter-banner\">\n\t    <div class=\"newsletter-banner-content\">\n\t      <div class=\"section-header\">\n\t        <h2>Subscribe to <span>n8n newsletter</span></h2>\n\t        <div class=\"section-subheader--bottom\">\n\t          Get the best, coolest, and latest in automation and low-code delivered to your inbox each week.\n\t        </div>\n\t      </div>\n\t      <div class=\"newsletter-banner-form\">\n\t        <form autocomplete=\"off\" class=\"contact-form\" onsubmit=\"subscribeNewsletter(event)\">\n\t        \t<div id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB\" data-callback=\"submitSubscription\" data-size=\"invisible\"><div class=\"grecaptcha-badge\" data-style=\"bottomright\" style=\"width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;\"><div class=\"grecaptcha-logo\"><iframe title=\"reCAPTCHA\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-soqa0iplz74v\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB&amp;co=aHR0cHM6Ly9ibG9nLm44bi5pbzo0NDM.&amp;hl=en&amp;v=jt8Oh2-Ue1u7nEbJQUIdocyd&amp;size=invisible&amp;cb=2c4r9u2f73ek\"></iframe></div><div class=\"grecaptcha-error\"></div><textarea id=\"g-recaptcha-response\" name=\"g-recaptcha-response\" class=\"g-recaptcha-response\" style=\"width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;\"></textarea></div><iframe style=\"display: none;\"></iframe></div>\n\t          <div class=\"input-wrapper\">\n\t            <input placeholder=\"Email\" name=\"email\" type=\"email\" required=\"required\" class=\"\">\n\t            <div class=\"messages\">\n\t              <div class=\"message message--error\">Something went wrong. Please try again later.</div>\n\t              <div class=\"message message--success\">Subscribed!</div>\n\t            </div>\n\t          </div>\n\t          <button type=\"submit\" class=\"submit-btn\">Subscribe</button>\n\t        </form>\n\t      </div>\n\t    </div>\n    </div>\n\t\t<div class=\"post-share-section\">\n\t<div class=\"post-share-wrap\">\n\t\t<a href=\"https://twitter.com/intent/tweet?text=How%20to%20set%20up%20a%20no-code%20CI%2FCD%20pipeline%20with%20GitHub%20and%20TravisCI&amp;url=https://blog.n8n.io/how-to-set-up-a-ci-cd-pipeline-with-no-code/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\"></path></svg></a>\n\t\t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/how-to-set-up-a-ci-cd-pipeline-with-no-code/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z\"></path></svg></a>\n\t\t<!-- <a href=\"javascript:\" class=\"post-share-link\" id=\"copy\" data-clipboard-target=\"#copy-link\" aria-label=\"Copy link icon\"><svg role=\"img\" viewBox=\"0 0 33 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M27.3999996,13.4004128 L21.7999996,13.4004128 L21.7999996,19 L18.9999996,19 L18.9999996,13.4004128 L13.3999996,13.4004128 L13.3999996,10.6006192 L18.9999996,10.6006192 L18.9999996,5 L21.7999996,5 L21.7999996,10.6006192 L27.3999996,10.6006192 L27.3999996,13.4004128 Z M12,20.87 C7.101,20.87 3.13,16.898 3.13,12 C3.13,7.102 7.101,3.13 12,3.13 C12.091,3.13 12.181,3.139 12.272,3.142 C9.866,5.336 8.347,8.487 8.347,12 C8.347,15.512 9.866,18.662 12.271,20.857 C12.18,20.859 12.091,20.87 12,20.87 Z M20.347,0 C18.882,0 17.484,0.276 16.186,0.756 C14.882,0.271 13.473,0 12,0 C5.372,0 0,5.373 0,12 C0,18.628 5.372,24 12,24 C13.471,24 14.878,23.726 16.181,23.242 C17.481,23.724 18.88,24 20.347,24 C26.975,24 32.347,18.628 32.347,12 C32.347,5.373 26.975,0 20.347,0 Z\"/></svg></a>\n\t\t<small class=\"share-link-info\">The link has been copied!</small> -->\n\t</div>\n\t<input type=\"text\" value=\"https://blog.n8n.io/how-to-set-up-a-ci-cd-pipeline-with-no-code/\" id=\"copy-link\" aria-label=\"Copy link input\">\n</div>",
  "readme": "If you work in software development teams, you’re probably familiar with the concepts of Continuous Integration (CI) and Continuous Delivery or Continuous Deployment (CD). These practices are commonly combined in a CI/CD pipeline, which is an important part of DevOps. Basically, CI/CD allows you to automatically build, test, and deploy code changes – helping your team work more efficiently.\n\nThe CI/CD pipeline consists of three different stages:\n\n  1. Continuous Integration (CI)\n  2. Continuous Delivery (CD)\n  3. Continuous Development (CD)\n\n\n\nIn this article, we’ll explain what are the advantages of CI/CD, what each of these three stages mean, and show you how to set up a CI/CD pipeline for your projects using n8n workflows with [GitHub](http://github.com/?ref=blog.n8n.io), [GitLab](http://gitlab.com/?ref=blog.n8n.io), [TravisCI](https://travis-ci.org/?ref=blog.n8n.io), and [CircleCI](https://circleci.com/?ref=blog.n8n.io).\n\n## Advantages of using a CI/CD pipeline\n\nUsing the CI/CD strategy in the software development life cycle has many advantages:\n\n  * Standardization of the code production and deployment process, helping to reduce errors and maintain code quality standards.\n  * Reduction in time and effort spent on testing and deploying the application manually. The DevOps team can focus on delivering features for the end-users.\n  * Ability to run tests on different platforms simultaneously and fix errors quickly\n  * Faster shipment of new features faster.\n\n\n\n## What is Continuous Integration (CI)?\n\nSoftware development is commonly a collective effort, where multiple developers work in parallel on different features and merge their code changes to the main (or development) branch frequently.\n\nCI validates the changes to the code by automatically building the software and running tests. You can set up different tests to ensure that the code changes pass all the tests, guidelines, and code compliance standards you established. If the tests are successful, the changes get merged, otherwise an error message is returned, making it easier to fix the bugs quickly. This process helps developers integrate their changes more efficiently.\n\nTo understand CI better, consider the [n8n repository](https://github.com/n8n-io/n8n?ref=blog.n8n.io). Various developers contribute to the project by adding a new node, fixing a bug, or adding new functionality. When they push their code, instead of verifying each change manually, we set up automated tests that would build and test them. This strategy decreases the chances of introducing bugs and helps our team work more effectively.\n\n## Building a CI pipeline with GitHub Trigger and Travis CI\n\nTwo of the most popular CI tools out there are TravisCI and CircleCI, which offer functionalities for testing projects hosted on GitHub. n8n has nodes for all of these platforms, which makes it fairly straightforward to build a CI workflow.\n\nWe built one that triggers a build in Travis CI when code changes are pushed to a GitHub repo or a pull request gets opened. To get started, you can copy this workflow from the [workflows page](https://n8n.io/workflows/1132?ref=blog.n8n.io) and configure the _GitHub Trigger, IF, and TravisCI_ nodes as explained below.  \n(Note that you can replace the GitHub Trigger node with GitLab Trigger and Travis CI with CircleCI, depending on your use case.)\n\n![n8n workflow for CI with GitHub Trigger and Travis CI](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-08-at-16.37.45.png)n8n workflow for CI with GitHub Trigger and Travis CI\n\n### Set up GitHub triggers\n\nFirst, you need to configure the _GitHub Trigger_ node, which will trigger your workflow when new code changes get pushed to the project repository and when a new pull request is opened, updated, closed, or merged. In the _GitHub Trigger_ node, configure these parameters:\n\n  * _Github OAuth2 API_ : Enter your credentials (read our [](https://docs.n8n.io/credentials/github/?ref=blog.n8n.io)[d](https://docs.n8n.io/credentials/github/?ref=blog.n8n.io)ocs to learn how to get your credentials).\n  * _Authentication:_ OAuth\n  *  _Repository Owner:_ the name of the owner of the repository you want to use (e.g. n8n-io)\n  * _Repository Name:_ the name of the repository you want to use (e.g. n8n)\n  * _Events:_ push, pull_request\n\n\n\nNote that you can use the [_GitLab Trigger_ node](https://docs.n8n.io/nodes/n8n-nodes-base.gitlabTrigger?ref=blog.n8n.io) if you host your projects on GitLab, the configuration is similar to the _GitHub node_.\n\n**2\\. Filter pushed changes / pull requests**\n\nThe tests should only run if new changes get pushed or a pull request gets opened. To filter out the event, add the [_IF_ node](https://docs.n8n.io/nodes/n8n-nodes-base.if/?ref=blog.n8n.io) and configure three parameters:\n\n  * Add a first condition that checks if changes were pushed:  \n_Value 1:_ {{$json[\"headers\"][\"x-github-event\"]}}  \n_Operation:_ Equal  \n _Value 2:_ push\n  * Add a second condition that checks if the action for a pull request is opened:  \n_Value 1:_{{$json[\"body\"][\"action\"]}}__  \n_Operation:_ Equal  \n _Value 2:_ opened\n  *  _Combine_ : ANY  \nThis option runs the test when either of the above conditions is true.\n\n\n\n**3\\. Connect to the CI platform**\n\nThe final step is connecting your CI platform of choice to integrate the changes. Add the _TravisCI node_ and configure the parameters:\n\n  * _Travis API:_ Enter your credentials (read our [documentation](https://docs.n8n.io/credentials/travisCi/?ref=blog.n8n.io) to learn how to get your credentials).\n  * _Resource:_ Build\n  *  _Operation_ : Trigger\n  *  _Slug:_{{$json[\"body\"][\"repository\"][\"full_name\"]}}   \nYou can select this expression by clicking on: Current Node > Input Data > JSON > body > repository > full_name.\n  * _Branch:_ the name of the branch you want to use\n\n\n\nYou can also use the _CircleCI node_ , which has a similar configuration to the _TravisCI node_.\n\nThat was it! Now you have a workflow that will build your project and run the tests you have written when code changes are pushed or when a pull request is opened.\n\n## What is Continuous Delivery (CD)?\n\nWith CI, your application is built and tested each time a code change gets pushed to the project repository. With CD, you automate the release process of the code changes. However, human intervention is needed to trigger the deployment.\n\nIn CD, all the stages involve automated tests and code release automation. At the end of this process, the operations team deploys the application to production. The goal of CD is to have a code base that is always ready for deployment.\n\nTo understand this better, let’s continue with the example of the n8n repository. After all the automated tests pass, the code is merged and is ready to be deployed.\n\nHowever, the deployment is not automated. The new version release is processed manually. The deployment of the latest n8n version on [n8n cloud](https://n8n.io/cloud/?ref=blog.n8n.io) is also not completely automated, as an engineer from our team with the required access needs to press the _**Release to staging**_ or _**Release to production**_ button in [Mattermost](https://mattermost.com/?ref=blog.n8n.io). (You can [read here](https://blog.n8n.io/5-workflow-automations-for-mattermost-that-we-love-at-n8n/) how we created this Mattermost slash command, and other useful ones.) This interaction triggers an n8n workflow that deploys the latest n8n version on the staging or production environment, respectively.\n\n![Mattermost bot for version releases](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-08-at-16.38.32.png)Mattermost bot for version releases\n\n## Building a CD pipeline with Telegram and GitHub\n\nn8n can be used to deploy the application to the production environment. Once your CI pipeline returns a successful result, you can trigger your n8n workflow to release the changes.\n\nThe workflow can be triggered via a chat platform (e.g. [Mattermost](https://docs.n8n.io/nodes/n8n-nodes-base.mattermost/?ref=blog.n8n.io), [Slack](https://docs.n8n.io/nodes/n8n-nodes-base.slack/?ref=blog.n8n.io), [Telegram](https://docs.n8n.io/nodes/n8n-nodes-base.telegram?ref=blog.n8n.io), etc.) and you can even schedule the trigger using the [_Cron_ node](https://docs.n8n.io/nodes/n8n-nodes-base.cron?ref=blog.n8n.io) or the [_Interval_ node](https://docs.n8n.io/nodes/n8n-nodes-base.interval/?ref=blog.n8n.io).\n\n### Create a new release on GitHub\n\nTo help you get started, we created [a workflow](https://n8n.io/workflows/1134?ref=blog.n8n.io) that allows you to release a new version via a Telegram bot command.\n\n![n8n workflow for CD with Telegram and GitHub](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-08-at-16.38.54.png)n8n workflow for CD with Telegram and GitHub\n\nHere’s how to set up this workflow:\n\n### 1\\. Set up Telegram triggers\n\nAdd a _Telegram Trigger_ node to trigger the workflow when a message is sent to the bot.\n\n  * _Telegram API_ : Enter your credentials (follow the steps mentioned in the [Telegram credential](https://docs.n8n.io/credentials/telegram/?ref=blog.n8n.io) documentation to get your Telegram credentials).  \nYou also need to create a deploy command for your Telegram bot (refer to the [documentation](https://core.telegram.org/bots?ref=blog.n8n.io#6-botfather) to learn how to create a Telegram bot command).\n  * _Updates_ : message\n\n\n\n### 2\\. IF node\n\nAdd an _IF_ node that checks if the incoming message contains the /deploy command:\n\n  * _Value 1_ : {{$json[\"message\"][\"text\"]}}\n  * _Operation_ : contains\n  *  _Value 2_ : /deploy\n\n\n\n### 3\\. Set node\n\nConnect a [_Set_ node](https://docs.n8n.io/nodes/n8n-nodes-base.set/?ref=blog.n8n.io) to the true output of the _IF_ node and configure the parameters:\n\n  * _Keep Only Set_ : Toggle to true  \nThis option will return the values we configure in the _Set_ node.\n  * _Name_ : the name of your version\n  *  _Value_ : {{$json[\"message\"][\"text\"].split(' ')[1]}}\n\n\n\n### 4\\. GitHub node\n\nAdd a _GitHub_ node and configure the parameters:\n\n  * _Github OAuth2 API_ : Enter your credentials (follow the steps mentioned in the [documentation](https://docs.n8n.io/credentials/github/?ref=blog.n8n.io) to learn how to get your credentials).\n  * _Authentication:_\n  * _Resource:_ Release\n  *  _Operation:_ Create\n  *  _Repository Owner:_ the name of the repository owner (e.g. n8n-io)\n  * _Repository Name:_ the name of the repository you want to use (e.g. n8n)\n  * _Tag:_{{$json[\"version\"]}}  \nYou can select this expression by clicking on: Current Node > Input Data > JSON > version\n\n\n\n### 5\\. NoOp node\n\nThis step is optional and only to show that you can continue the workflow in this direction. Connect a [_No Operation, do nothing_ node](https://docs.n8n.io/nodes/n8n-nodes-base.noOp/?ref=blog.n8n.io) to the false output of the IF node.\n\nYou can build a similar workflow for your repository hosted on GitLab by simply replacing the _GitHub_ node with the _GitLab_ node.\n\n### Trigger GitHub Actions\n\nIf you’re using [GitHub Actions](https://github.com/features/actions?ref=blog.n8n.io) for deployment, you can trigger the GitHub Actions workflow. Your GitHub Action should have the trigger type _repository_dispatch_. You can learn more about the repository_dispatch type on the official [GitHub documentation](https://docs.github.com/en/actions/reference/events-that-trigger-workflows?ref=blog.n8n.io#repository_dispatch) page.\n\nTo trigger this GitHub Action from n8n, you can use the [_HTTP Request_ node](https://docs.n8n.io/nodes/n8n-nodes-base.httpRequest?ref=blog.n8n.io) configured like this:\n\n  * _Authentication:_ Header Auth  \nIn the Authentication window, set:  \n\\- _Name_ : Enter Authorization  \n\\- _Value_ : Enter Bearer and paste your Access Token\n  *  _Request Method:_ POST\n  *  _URL:_ https://api.github.com/repos/<USERNAME>/<REPO>/  \nReplace <USERNAME> and <REPO> with the repository owner name and the repository name, respectively.\n  * Click on _Add Parameter_ under the _Body Parameters_ section to add a parameter with:  \n\\- _Name_ : event_type  \n\\- _Value_ : the event type\n\n\n\nThough Continuous Delivery involves human intervention, you can automate the repetitive parts. This strategy will save you a lot of time and help your team focus on adding new features.\n\n## What is Continuous Deployment (CD)?\n\nJust like Continuous Delivery, Continuous Deployment is another step after Continuous Integration. The difference between Continuous Delivery and Continuous Deployment is that in continuous delivery, human interaction is needed (you deploy the application manually), while in continuous deployment the application gets deployed automatically (assuming all the automated tests pass successfully).\n\nBased on your CI/CD pipeline, you can build a workflow in n8n that can automatically deploy your application. Let’s say you want to deploy your application whenever a new version is released. You can use the GitHub Trigger node to trigger this workflow. In the Events dropdown list, select release.\n\n![GitHub Trigger node configuration for release](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-08-at-16.39.29.png)GitHub Trigger node configuration for release\n\nIf you’re using GitHub Actions, you can trigger the GitHub Action workflow, as mentioned in the above section. The next node in this workflow depends on the platform you use to deploy your application. If you don’t find the node for your platform, you can use the _HTTP Request_ node to make an API call.\n\n## What’s next?\n\nIn this article, you learned what CI/CD is, what are the advantages of this DevOps practice, and how you can build a CI/CD pipeline in n8n.\n\nNow it’s your turn: start by writing tests for your application (most of the programming languages have a testing framework for this), then implement the workflows presented in this article for your personal use case. You can extend and tweak them how you like. For example, you could:\n\n  * add the Slack node, Mattermost node, or the Telegram node that sends you a message whenever the pipeline starts).\n  * use the [_Webhook_ node](https://docs.n8n.io/nodes/n8n-nodes-base.webhook/?ref=blog.n8n.io) to trigger the workflow if the tests fail or pass. If the tests fail, your workflow can create a ticket on [Jira](https://docs.n8n.io/nodes/n8n-nodes-base.jira/?ref=blog.n8n.io) and send a message to your team. If the tests pass, you can automate the release process of your application.\n\n\n\n_Start automating!_\n\n_The best part is, you can start automating for free with n8n. The easiest way to get started is to sign up for a[free n8n cloud trial](https://n8n.io/cloud?ref=blog.n8n.io). Thanks to n8n’s fair-code license, you can also _[_self-host n8n for free_](https://docs.n8n.io/hosting/?ref=blog.n8n.io) _._\n\n* * *\n\n_I’d like to know how you are using CI/CD in your software development life cycle! Will you consider implementing a CI/CD pipeline in n8n, now that you know how? Feel free to message me on[Twitter](https://twitter.com/harshil1712?ref=blog.n8n.io) or discuss on our [forum](https://community.n8n.io/?ref=blog.n8n.io) 🧡 _\n\n## Subscribe to n8n newsletter\n\nGet the best, coolest, and latest in automation and low-code delivered to your inbox each week. \n\nSomething went wrong. Please try again later.\n\nSubscribed!\n\nSubscribe\n\n[](https://twitter.com/intent/tweet?text=How%20to%20set%20up%20a%20no-code%20CI%2FCD%20pipeline%20with%20GitHub%20and%20TravisCI&url=https://blog.n8n.io/how-to-set-up-a-ci-cd-pipeline-with-no-code/) [](https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/how-to-set-up-a-ci-cd-pipeline-with-no-code/)\n",
  "crawled_at": "2025-05-28T10:49:33.238023"
}