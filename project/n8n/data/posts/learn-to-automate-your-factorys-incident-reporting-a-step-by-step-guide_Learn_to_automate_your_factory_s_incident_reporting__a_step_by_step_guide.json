{
  "url": "https://blog.n8n.io/learn-to-automate-your-factorys-incident-reporting-a-step-by-step-guide/",
  "title": "Learn to automate your factory's incident reporting: a step-by-step guide",
  "excerpt": "In this tutorial, we will learn to build an automated incident reporting workflow for factories with n8n.",
  "thumbnail": "https://blog.n8n.io/content/images/size/w1200/2021/01/smart-cover.png",
  "tags": [
    "Tips"
  ],
  "html": "<p>The steam engine and electrification revolutionized entire sectors of the economy from the 18th century onward. Modern technologies, particularly automation, are beginning to dramatically alter today’s industries. Automation in industries has resulted in higher productivity, better quality of products, and a safer workplace.</p><p>Continuously monitoring machines’ health results in effective and efficient maintenance. Real-time monitoring can also help with predictive maintenance. Why have humans continuously monitor the health of machines when we can use an automated system? These automated systems monitor the machines’ health and also warns the staff when incidents are about to take place, even before they happen.</p><p>In this tutorial, we will learn to build the foundation of such automated systems. We will create a workflow that will log machine data coming from factory sensors in a database. The workflow will also generate an incident report on <a href=\"https://www.pagerduty.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>PagerDuty</em></a> and notify the responsible staff members when the temperature of a machine crosses the threshold value. We will also store this incident data into a database, so that it can be used for future reference.</p><p>We will build the workflow using <a href=\"https://n8n.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">n8n</a>, a <a href=\"https://faircode.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">fair-code</a> licensed tool that helps you automate tasks, sync data between various sources, and react to events all via a visual workflow editor. We will build two workflows:</p><ul><li>Workflow 1 — <a href=\"https://n8n.io/workflows/608?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Smart Factory Data Generator</a></li><li>Workflow 2 — <a href=\"https://n8n.io/workflows/609?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Smart Factory Incident Report and Data Ingestion</a></li></ul><h2 id=\"prerequisites\">Prerequisites</h2><p>To get started with the workflow you will need:</p><ul><li>n8n — You can find details on how to install n8n in the <a href=\"https://docs.n8n.io/try-it-out/quickstart/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Quickstart</a> page (this workflow was created using n8n@0.101.0).</li><li><a href=\"https://www.pagerduty.com/sign-up/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">PagerDuty</a> — You’ll need to obtain an Access Token for the PagerDuty API. You can find the instructions on how to obtain that <a href=\"https://docs.n8n.io/credentials/pagerDuty/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">here</a>.</li><li><a href=\"http://activemq.apache.org/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">ActiveMQ</a> — You’ll need to install ActiveMQ on your machine. You can find the instructions <a href=\"https://activemq.apache.org/getting-started?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">here</a>. You’ll also need to create a queue called <code>berlin_factory_01</code>. You can find instructions for that <a href=\"https://learn-it-with-examples.com/middleware/other/activemq/create-activemq-queue.html?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">here</a>.</li><li><a href=\"https://crate.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">CrateDB</a> — You’ll also require an instance of CrateDB running locally or on a server. You can find the instructions <a href=\"https://crate.io/docs/crate/tutorials/en/latest/install-run/index.html?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">here</a>.</li></ul><h3 id=\"install-n8n\">Install n8n</h3><p>You can install n8n with <a href=\"https://www.npmjs.com/get-npm?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">npm</a>, using the following command:</p><p><code>npm install n8n -g</code></p><p>You can also run n8n using <a href=\"https://docs.n8n.io/getting-started/quickstart.html?ref=blog.n8n.io#give-n8n-a-spin\" rel=\"noopener\" target=\"_blank\">Docker.</a></p><p>If you’ve installed n8n using npm, open up a terminal and run the following command:</p><p><code>n8n start</code></p><p>This will start n8n. Press “o” or navigate to the URL shown in the terminal.</p><p>You can also sign-up for a <a href=\"https://n8n.io/cloud?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a> to get access to our hosted service.</p><h2 id=\"workflow-1-smart-factory-data-generator\">Workflow 1: Smart Factory Data Generator</h2><p>In factories, machines run 24/7, and it becomes crucial to monitor their health to avoid failure. Data from the sensors can help keep an eye on the functioning of a factory. Using real sensors is out of the scope of this tutorial. However, this workflow will help you understand how to set up a workflow that queues sensor data using the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.amqp/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>AMQP Sender</em></a> node. For this workflow, we will use an <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.interval/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Interval</em></a><em> </em>node that will trigger the workflow every second. The <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.set/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Set</em></a><em> </em>node will set the values for the items we want to add to the queue, and the <em>AMQP Sender </em>node will send a raw message to add to the queue.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/01/workflow-1-1.png\" class=\"kg-image lightense-target\" alt=\"Smart Factory Data Generator workflow\" loading=\"lazy\" width=\"2000\" height=\"871\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/01/workflow-1-1.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/01/workflow-1-1.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/01/workflow-1-1.png 1600w, https://blog.n8n.io/content/images/size/w2400/2021/01/workflow-1-1.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Smart Factory Data Generator workflow</figcaption></figure><p>I have also submitted this <a href=\"https://n8n.io/workflows/608?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">workflow</a> on n8n.io, in case you’d like to skim through it. Please note that you will still need to configure credentials for the <em>AMQP Sender</em> node.</p><h3 id=\"1-interval-node-trigger-the-workflow-every-second\">1. Interval node: Trigger the workflow every second</h3><p>The workflow should execute every second, and to do that we will use the <em>Interval</em> node in n8n. The <em>Interval</em> node is used to trigger the workflow to run at regular intervals of time. To add the Interval node, click on the ‘<strong><em>+</em></strong>’ button on the top right corner. Under the <strong><em>Trigger</em></strong> Section, select the <em>Interval</em> node. Set the value to <code>1</code> for the <strong><em>Interval</em></strong> field and select ‘Seconds’ from the <strong><em>Unit</em></strong> dropdown menu.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/01/interval.png\" class=\"kg-image lightense-target\" alt=\"Setting up the Interval node\" loading=\"lazy\" width=\"2000\" height=\"871\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/01/interval.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/01/interval.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/01/interval.png 1600w, https://blog.n8n.io/content/images/size/w2400/2021/01/interval.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Setting up the Interval&nbsp;node</figcaption></figure><h3 id=\"2-set-node-set-values-for-sensor-data\">2. Set node: Set values for sensor data</h3><p>We need relevant data to monitor the health of the machines. The sensors might give a lot of information that may or may not be relevant. The <em>Set</em> node allows us to set the workflow data so that only the data we want passes through this node. For the scope of this tutorial, we will generate some random values for the machine uptime, and the temperature of the machine.</p><p>Click on the ‘<strong><em>+</em></strong>’ button on the top right corner and select the <em>Set</em> node. Click on ‘Add Value’, under the <strong><em>Values to Set</em></strong> section, and select ‘String’. Enter <code>machine_id.name</code> in the <strong><em>Name</em></strong> field and <code>n8n_cr8</code> for the <strong><em>Value</em></strong> field. To add a new value, click on ‘Add Value’ and select ‘String’. Name this as <code>temperature_celsius</code>. Click on the gears symbol next to the <strong><em>Value</em></strong> field and select <strong><em>Add Expression.</em></strong> Paste the following expression <code>{{Math.floor(Math.random()*100);}}</code>. This will create a random temperature value between 1 to 100.</p><p>We will also create a random uptime value. Click on ‘Add Value’ and select ‘String’. Enter <code>machine_id.uptime</code> in the <strong><em>Name</em></strong> field. Click on the gears symbol next to the <strong><em>Value</em></strong> field and select <strong><em>Add Expression.</em></strong> Paste the following expression <code>{{Math.floor(Math.random()*100)}}</code>. This will create a random value for machine uptime between 1 and 100. In case of real sensor data, this wouldn’t be a random value 😉</p><p>Click on ‘Add Value’ and select ‘String’. In the <strong><em>Name</em></strong> field enter <code>time_stamp</code>. Click on the gears symbol next to the <strong><em>Value</em></strong> field and select <strong><em>Add Expression.</em></strong> Paste the following expression <code>{{Date.now();}}</code>. This will return the timestamp of when the data was generated.</p><p>Toggle <strong><em>Keep Only Set</em></strong> to true. This will pass on only the information we have set in this node to the queue. We now have all the data that we need from the sensors.</p><blockquote><strong>NOTE</strong>: We are using String as the data type, but you can use number or boolean, as per your use case.</blockquote><p>Click on the<strong><em> Execute Node </em></strong>button to execute the workflow.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/01/set-node.png\" class=\"kg-image lightense-target\" alt=\"Output for the Set node\" loading=\"lazy\" width=\"2000\" height=\"871\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/01/set-node.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/01/set-node.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/01/set-node.png 1600w, https://blog.n8n.io/content/images/size/w2400/2021/01/set-node.png 2400w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Output for the Set&nbsp;node</figcaption></figure><h3 id=\"3-amqp-sender-node-add-messages-to-the-activemq-queue\">3. AMQP Sender node : Add messages to the ActiveMQ queue</h3><p><a href=\"https://www.amqp.org/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">AMQP</a> is an open standard application layer protocol for message-oriented middleware. We will use this node to send messages to the ActiveMQ queue that we created earlier.</p><p>To add the <em>AMQP Sender</em> node, click on the ‘<strong><em>+</em></strong>’ button. Select the <em>AMQP Sender</em> node to add it to the workflow. Under the <strong><em>Credentials</em></strong> section, select ‘Create New’ from the dropdown menu. Enter <code>localhost</code> as the <strong><em>Hostname</em></strong>. Make sure the port is <code>5672</code>. By default, the username and password for ActiveMQ are <code>admin</code> and <code>admin</code> respectively. If you have configured a different username and password for ActiveMQ, please use those credentials. Click on <strong><em>Save</em></strong> to save the credentials.</p><p>Enter <code>berlin_factory_01</code> in the <strong><em>Queue/Topic</em></strong> field. Click on <strong><em>Add Option</em></strong> and toggle <strong><em>Data as Object</em></strong> to <code>true</code>.</p><p>Save the workflow and on the top right corner toggle <strong><em>Active</em></strong> to true. Our workflow will now execute every second and produce the sensor data that will be pushed into the ActiveMQ queue.</p><p>Here’s a video of me following the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/Z0EtvWAaD98?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating the Interval node, Set node, and the AMQP node</figcaption></figure><h2 id=\"workflow-2-smart-factory-incident-report-and-sensor-data-ingestion\">Workflow 2: Smart Factory Incident Report and Sensor Data Ingestion</h2><p>In the previous section, we learnt to build a workflow that generates sensor data and pushes it into an ActiveMQ queue. In this section, we will build a workflow that generates an incident report if the temperature of the machine crosses the threshold value. This workflow will also store the sensor and the incident data into a database.</p><p>We will use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.amqpTrigger?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>AMQP Trigger</em></a><em> </em>node, which will listen to the incoming data from our ActiveMQ queue. We will use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.if/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>IF</em></a><em> </em>node to check for the threshold value. If the temperature crosses the threshold value, the workflow will create an incident report using the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.pagerDuty?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>PagerDuty</em></a><em> </em>node. We will store the incident information in CrateDB, using the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.crateDb?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>CrateDB</em></a><em> node</em>. If the temperature is below the threshold value, no action is required.</p><p>n8n has nodes for various databases. You can use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.questDb/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>QuestDB</em></a>, <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.mongoDb?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>MongoDB</em></a>, <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.postgres/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Postgres</em></a>, <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.microsoftSql?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Microsoft SQL</em></a>, or the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.mySql?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>MySQL</em></a><em> </em>node depending on your use-case.</p><p>In this tutorial we will use CrateDB, which is a time-series database. CrateDB gives the ability to have fast data ingestion for IIoT scale and comes with the flexibility of dynamic data structure. The ease of scaling and high availability makes it an ideal choice for such a use-case.</p><p>The temperature we currently have is in the Celsius unit. We will use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.function?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Function</em></a><em> </em>node to convert this temperature from Celsius to Fahrenheit. We will also store all the relevant machine information in CrateDB, that can be used in monitoring the machines’ health.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/01/workflow-2.png\" class=\"kg-image lightense-target\" alt=\"Smart Factory Incident Report and Sensor Data Ingestion workflow\" loading=\"lazy\" width=\"2000\" height=\"1133\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/01/workflow-2.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/01/workflow-2.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/01/workflow-2.png 1600w, https://blog.n8n.io/content/images/size/w2400/2021/01/workflow-2.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Smart Factory Incident Report and Sensor Data Ingestion workflow</figcaption></figure><p>I have also submitted this <a href=\"https://n8n.io/workflows/609?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">workflow</a> on n8n.io, in case you’d like to skim through it. Please note that you will still need to configure credentials for the <em>AMQP Trigger</em>, <em>PagerDuty, </em>and <em>CrateDB</em> nodes.</p><p>Create a new workflow in n8n. We will divide this workflow into two parts.</p><ol><li><strong>Part One — Storing Sensor Data in a Database</strong></li><li><strong>Part Two — Creating Incident Report and Storing Incident Data</strong></li></ol><h2 id=\"part-one-storing-sensor-data-in-a-database\">Part One — Storing Sensor Data in a Database</h2><p>In this section, we will create a workflow that converts the temperature from Celsius to Fahrenheit using the <em>Functio</em>n node. We will use the <em>Set</em> node to set the data we want to store in our database and the <em>CrateDB</em> node to store the data.</p><h3 id=\"1-amqp-trigger-node-trigger-workflow-with-data-from-activemq\">1. AMQP Trigger node: Trigger workflow with data from ActiveMQ</h3><p>The <em>AMQP Trigger</em> node listens to the messages in the ActiveMQ queue and gets triggered when a new message is added to the queue. To add the <em>AMQP Trigger</em> node in the workflow, click on the ‘<strong><em>+</em></strong>’ button. Under the <strong><em>Trigger</em></strong> section, select the <em>AMQP Trigger</em> node. Select the credentials that you created in the previous workflow. We are listening to the messages in the ‘berlin_factory_01’ queue. Hence, enter <code>berlin_factory_01</code> as the value for the <strong><em>Queue/Topic </em></strong>field.</p><p>Click on the <strong><em>Execute Node </em></strong>button.</p><p>Rename the node from “AMQP Trigger” to “Data from factory sensors” by clicking on the name, editing it, and clicking the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window. Save the workflow and click on the <strong><em>Execute Node </em></strong>button to execute the node.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/a9GLLIE1ewg?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating AMQP Trigger node that triggers the workflow</figcaption></figure><h3 id=\"2-function-node-convert-the-temperature-unit-from-celsius-to-fahrenheit\">2. Function node: Convert the temperature unit from Celsius to Fahrenheit</h3><p>The <em>Function </em>node in n8n can be used for data enrichment or transformation. We will use this node to convert the temperature from Celsius to Fahrenheit. Click on the ‘<strong><em>+</em></strong>’ button and select the <em>Function</em> node. Copy and paste the following code in the <strong><em>Edit Function</em></strong> field.</p><pre><code class=\"language-js\">temp_fahrenheit = (items[0].json.body.temperature_celsius * 1.8) + 32;\nitems[0].json.temperature_fahrenheit = temp_fahrenheit;\nreturn items;</code></pre><p>Click on the <strong><em>Execute Node </em></strong>button.</p><p>To rename the node from “Function” to “Data enrichment (°C to °F)” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.</p><p>Here’s a video of me following the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/m4Y9yqxEBuU?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating the Function node that converts temperature from Celsius to Fahrenheit</figcaption></figure><p>We now have the information coming from the sensors, as well as the temperature in Fahrenheit. The next step is to store this information in the database. We will first use the <em>Set</em> node to select the data we want to store in our database and then store this data in CrateDB.</p><h3 id=\"3-set-node-set-values-for-database\">3. Set node: Set values for database</h3><p>To add the <em>Set</em> node, click on the ‘<strong><em>+</em></strong>’ button, and select the <em>Set</em> node. The information we want to store is the machine name, the machine uptime, temperature in Celsius, the temperature in Fahrenheit, and the timestamp.</p><p>Click on the <strong><em>Add Value</em></strong> button and select ‘String’ from the dropdown menu. In the <strong><em>Name</em></strong> field enter <code>machine_name</code>. In the <strong><em>Value</em></strong> field, enter <code>n8n_cr8</code>.</p><p>To add the machine uptime, click on the <strong><em>Add Value</em></strong> button and select ‘String’ from the dropdown menu. Enter <code>machine_uptime</code> in the <strong><em>Name</em></strong> field. Click on the gears symbol next to the <strong><em>Value</em></strong> field and select <strong><em>Add Expression. </em></strong>Open the <strong><em>Edit Expression</em></strong> editor and under the <strong><em>Variable Selector</em></strong> section, select:</p><p><code>Current Node &gt; Input Data &gt; JSON &gt; body &gt; machine_id &gt; uptime</code></p><p>Similarly, add values for <code>temperature_fahrenheit</code>, <code>temperature_celsius</code> and the <code>time_stamp</code>. Toggle <strong><em>Keep Only Set</em></strong> to true. This will pass only the information we have set in this node.</p><p>Click on the <strong><em>Execute Node </em></strong>button.</p><p>To rename the node from “Set” to “Set sensor data” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.</p><blockquote><strong>NOTE:</strong> You can use the Function node to send the data to the CrateDB node directly.</blockquote><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/01/set-sensor-data.png\" class=\"kg-image lightense-target\" alt=\"Output of the Set node\" loading=\"lazy\" width=\"2000\" height=\"872\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/01/set-sensor-data.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/01/set-sensor-data.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/01/set-sensor-data.png 1600w, https://blog.n8n.io/content/images/size/w2400/2021/01/set-sensor-data.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Output of the Set&nbsp;node</figcaption></figure><h3 id=\"4-cratedb-node-insert-sensor-data-in-the-database\">4. CrateDB node: Insert sensor data in the database</h3><p>We have established all the data we want to store in our database. The next step is to add a database node to store this data. n8n has nodes for various databases.</p><p>To start CrateDB on your machine using Docker, run the following command (follow the link in the Prerequisites section if you’d like to explore other ways to run CrateDB):</p><p><code>docker run -p 4200:4200 -p 5432:5432 crate -Cdiscovery.type=single-node</code></p><blockquote><strong>NOTE:</strong> You can also use <a href=\"https://crate.io/products/cratedb-cloud/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">CrateDB Cloud</a> if you don’t want to set up CrateDB on your own.</blockquote><p>In the n8n workflow editor, click on the ‘<strong><em>+</em></strong>’ button and select the <em>CrateDB</em> node. Select ‘Create New’ from the dropdown menu in the <strong><em>Credentials</em></strong> section.</p><p>Give your credentials a name, in the <strong><em>Credentials Name</em></strong> field. We are running CrateDB locally on our machine. Enter ‘localhost’ as the value for the <strong><em>Hostname</em></strong> field.</p><p>This is how your CrateDB credentials should look like:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/01/crate-credentials.png\" class=\"kg-image lightense-target\" alt=\"CrateDB credentials configuration\" loading=\"lazy\" width=\"2000\" height=\"872\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/01/crate-credentials.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/01/crate-credentials.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/01/crate-credentials.png 1600w, https://blog.n8n.io/content/images/size/w2400/2021/01/crate-credentials.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>CrateDB credentials configuration</figcaption></figure><p>Select ‘Insert’ from the <strong><em>Operation</em></strong> dropdown menu. For the <strong><em>Schema</em></strong> field, enter <code>doc</code>. We will store the data in the table called <code>machine_data</code>, hence enter <code>machine_data</code> in the <strong><em>Table</em></strong> field. Enter <code>machine_name, machine_uptime, time_stamp, temperature_fahrenheit, temperature_celsius</code> in the <strong><em>Columns</em></strong> field.</p><p>In the <a href=\"https://crate.io/docs/crate/admin-ui/en/latest/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">CrateDB Admin UI</a>, open the <strong><em>Console</em></strong>. Enter the following SQL command to create a table for our machine data:</p><pre><code class=\"language-sql\">CREATE TABLE machine_data(machine_name STRING, machine_uptime INT, temperature_fahrenheit INT, temperature_celsius INT, time_stamp TIMESTAMP);</code></pre><p>Click on <strong><em>Execute Query</em></strong> to create the table:</p><blockquote><strong>NOTE:</strong> If you’re running CrateDB locally, you access the Admin UI at <a href=\"http://localhost:4200/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">http://localhost:4200</a></blockquote><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/01/cratedb-admin-ui.png\" class=\"kg-image lightense-target\" alt=\"Creating a table in CrateDB\" loading=\"lazy\" width=\"2000\" height=\"1119\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/01/cratedb-admin-ui.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/01/cratedb-admin-ui.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/01/cratedb-admin-ui.png 1600w, https://blog.n8n.io/content/images/size/w2400/2021/01/cratedb-admin-ui.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Creating a table in&nbsp;CrateDB</figcaption></figure><p>In n8n, click on <strong><em>Execute Node</em></strong> to execute the node.</p><p>To rename the node from “CrateDB” to “Ingest machine data” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.</p><blockquote><strong>NOTE</strong>: Make sure you have some messages in the ActiveMQ queue to trigger the workflow.</blockquote><p>Here’s a video of me following the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/1zbBds99S5k?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating CrateDB node to ingest machine data</figcaption></figure><h2 id=\"part-two-creating-incident-report-and-storing-incident-data\">Part Two — Creating Incident Report and Storing Incident Data</h2><p>The workflow will create an incident report and alert the factory staff whenever the temperature reaches more than 50℃. We will use the <em>IF</em> node that will check this condition. If the temperature is less than 50℃, the <em>No Operation, do nothing</em> node will execute. When the temperature crosses the threshold value, the incident report and alert will be created using the <em>PagerDuty</em> node. The details of the incident will then be stored in a table in CrateDB.</p><h3 id=\"1-if-node-check-if-the-temperature-is-greater-than-or-equal-to-the-threshold-value\">1. IF node: Check if the temperature is greater than or equal to the threshold value</h3><p>The <em>IF</em> node checks the value of the temperature which is passed on from the <em>AMQP Trigger</em> node. We will add an <em>IF</em> node that will be connected to the <em>AMQP Trigger</em> node. To add the <em>IF</em> node, click on the ‘<strong><em>+</em></strong>’ button, and select the <em>IF</em> node. Select ‘Number’ from the <strong><em>Add Condition</em></strong> dropdown menu. Open the <strong><em>Edit Expression</em></strong> editor for <strong><em>Value 1</em></strong>. Under the <strong><em>Variable Selector</em></strong> section, select <code>Current Node &gt; Input Data &gt; JSON &gt; body &gt; temperature_celsius</code>. Select ‘Larger Equal’ from the <strong><em>Operation</em></strong> dropdown menu and enter <code>50</code> for the <strong><em>Value 2</em></strong> field.</p><p>Click on the <strong><em>Execute Node </em></strong>button to execute the node.</p><p>To rename the node from “IF” to “Values higher than 50°C” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.</p><p>Here’s a video of me following the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/_pI2rlZd81g?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating IF node to check if the temperature is greater than or equal to the threshold value</figcaption></figure><h3 id=\"2-pagerduty-node-create-an-incident-report-and-alert-the-factory-staff\">2. PagerDuty node: Create an incident report and alert the factory staff</h3><p>An incident report and alert will be created whenever the value is greater than or equal to 50. Click on the ‘<strong><em>+</em></strong>’ button and select the <em>PagerDuty</em> node. Join the <em>PagerDuty</em> node to the <strong><em>true</em></strong> endpoint of the <em>IF</em> node. Select ‘API Token’ from the <strong><em>Authentication</em></strong> dropdown menu. Select ‘Create New’ from the <strong><em>PagerDuty API</em></strong> dropdown menu. Copy and paste the PagerDuty API token in the <strong><em>API Token</em></strong> field. Click on <strong><em>Save</em></strong> to save the credentials.</p><p>Select ‘Incident’ from the <strong><em>Resource</em></strong> dropdown menu and select ‘Create’ from the <strong><em>Operation</em></strong> dropdown menu. For the <strong><em>Title</em></strong> field click on the gear icon and select ‘Add Expression’. In the <strong><em>Expression</em></strong> editor copy and paste the following: <code>Incident with {{$json[\"body\"][\"machine_id\"][\"name\"]}}</code>. This will create an incident with a title that has a format similar to <code>Incident with n8n_cr8</code>.</p><p>From the <strong><em>Service ID</em></strong> dropdown menu, select the relevant service. Enter your (or the responsible person’s) email address in the <strong><em>Email</em></strong> field.</p><p>Click on the <strong><em>Execute Node </em></strong>button.</p><p>To rename the node from “PagerDuty” to “Create an incident” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.</p><p>Here’s a video of me following the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/wJHJf8JvzuY?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating PagerDuty node to create an incident report and alert the factory staff</figcaption></figure><p>Now that the workflow is creating the incident report, the next step is to store the data in the database. This data can be used for keeping a log of the incidents and making informed decisions in the future.</p><h3 id=\"3-set-node-select-incident-information\">3. Set node: Select incident information</h3><p>We will use the <em>Set</em> node to select the data we want to store in our database. To add the <em>Set</em> node in the workflow, click on the ‘<strong><em>+</em></strong>’ button. Click on <strong><em>Add Value</em></strong> and select ‘String’ from the dropdown menu. In the <strong><em>Name</em></strong> field, enter <code>incident_id</code>. Click on the gears icon for the <strong><em>Value </em></strong>field and select ‘Add Expression’. From the <strong><em>Variable Selector</em></strong> section select <code>Current Node &gt; Input Data &gt; JSON &gt; id</code>. From the <strong><em>Add Value</em></strong> dropdown menu, select <code>String</code>. Enter <code>html_url</code> for the <strong><em>Name</em></strong> field. Click on the gears icon for the <strong><em>Value </em></strong>field and select ‘Add Expression’. From the <strong><em>Variable Selector</em></strong> section select <code>Current Node &gt; Input Data &gt; JSON &gt; html_url</code>. Similarly, select <code>String</code> from the <strong><em>Add Value</em></strong> dropdown menu in the <em>Set</em> node. In the <strong><em>Name</em></strong> field, enter <code>incident_timestamp</code>. Click on the gears icon for the <strong><em>Value </em></strong>field and select ‘Add Expression’. From the <strong><em>Variable Selector</em></strong> section select <code>Current Node &gt; Input Data &gt; JSON &gt; created_at</code>.</p><p>Toggle <strong><em>Keep Only Set</em></strong> to true. This will pass only the information we have set in this node.</p><p>Click on the <strong><em>Execute Node </em></strong>button.</p><p>To rename the node from “Set” to “Set incident info” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/01/set-incident-info.png\" class=\"kg-image lightense-target\" alt=\"Output of Set node for incident information\" loading=\"lazy\" width=\"2000\" height=\"872\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/01/set-incident-info.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/01/set-incident-info.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/01/set-incident-info.png 1600w, https://blog.n8n.io/content/images/size/w2400/2021/01/set-incident-info.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Output of Set node for incident information</figcaption></figure><h3 id=\"4-cratedb-node-store-incident-information\">4. CrateDB node: Store incident information</h3><p>We will store this data in a separate table in CrateDB. In n8n, click on the ‘<strong><em>+</em></strong>’ button and select the <em>CrateDB</em> node. Select the credentials you created earlier from the <strong><em>CrateDB</em></strong> dropdown menu. Make sure the <strong><em>Operation</em></strong> is <code>insert</code> and the value for <strong><em>Schema </em></strong>is <code>doc</code>. In the <strong><em>Table</em></strong> field, enter the table name <code>incident_data</code>. Copy and paste <code>incident_id, html_url, incident_timestamp</code> in the <strong><em>Columns</em></strong> field.</p><p>To create the incident_table, open the <strong><em>Console</em></strong>, in the CrateDB Admin UI. In the terminal paste the following SQL command:</p><pre><code class=\"language-sql\">CREATE TABLE incident_data (incident_id TEXT, html_url TEXT, incident_timestamp TIMESTAMP);</code></pre><p>Click on <strong><em>Execute Query </em></strong>to create the table.</p><p>In n8n, click on <strong><em>Execute Node</em></strong> to execute the node.</p><p>To rename the node from “CrateDB” to “Ingest incident data” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.</p><p>The workflow now creates an incident report using PagerDuty and stores the information in the database.</p><p>Here’s a video of me following all the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/Hkyg9xAqVYw?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating CrateDB node to ingest incident data</figcaption></figure><h3 id=\"5-no-operation-do-nothing-node-do-nothing-\">5. No operation, do nothing node: Do nothing 😴</h3><p>Adding this node here is optional, as the absence of this node won’t make a difference to the functioning of the workflow.</p><p>Click on the ‘<strong><em>+</em></strong>’ button and select <em>No operation, do nothing</em> node. Connect this node with the <strong><em>false</em></strong> endpoint of the <em>IF</em> node. Now every time the temperature is less than the threshold, the No operation, do nothing node will execute and perform no action.</p><p>Here’s a video of me following the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/UTjj85KmS7o?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating No operation, do nothing node</figcaption></figure><p>Click on <strong><em>Execute Workflow</em></strong> button, in the n8n workflow editor, to run the workflow.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://cdn-images-1.medium.com/max/800/1*8pZVsXLsxSMiGesyfwYG1A.gif\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Output of the&nbsp;workflow</figcaption></figure><h2 id=\"what-s-next\">What’s Next?</h2><p>We created a workflow that gathers machine data from the sensors and stores the information in a database. With this workflow, we are also storing the incident information. We can use this historical time-series data to predict any future incidents and avoid any downtime. The predictions can also help us with the maintenance and proper functioning of the machines. We can use the database nodes to read the data from the database. We can pass on this data to a machine learning API using the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.httpRequest?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>HTTP Request</em></a> node.</p><p>Don’t forget to share the <a href=\"https://n8n.io/workflows?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">workflow</a> that you build with the community.</p><h2 id=\"conclusion\">Conclusion</h2><p>Congratulations! We built a workflow that generates incident reports and alerts the factory staff whenever a machine in a factory is malfunctioning. In the first workflow, we learned how to use the Interval node to trigger the workflow every second. We also learned how to use the <em>Set</em> node to set the data we want. Lastly, we saw how to use the <em>AMQP Sender</em> node to add messages to the Queue.</p><p>In the second workflow, we learned how the <em>AMQP Trigger</em> node is used. We also learnt to conditionally create incident reports and store this information in the database. We understood how the <em>Function</em> node can be utilized for data enrichment.</p><p>You can modify the workflow and adapt it for your use-case without much effort. We are using CrateDB in this tutorial, but you can use any database you want. You can use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.questDb/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>QuestDB</em></a>, <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.mongoDb?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>MongoDB</em></a>, <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.postgres?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Postgres</em></a>, <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.microsoftSql?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Microsoft SQL</em></a>, or the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.mySql?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>MySQL</em></a> node to store the data into the respective databases. You can also use a combination of these databases, depending on the use-case.</p><p>I’d be excited to check out what you’ve built using n8n! In case you’ve run into an issue while following the tutorial, feel free to reach out to me on <a href=\"https://twitter.com/harshil1712?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Twitter</a> or ask for help on our <a href=\"https://community.n8n.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">forum</a> 💙</p><p><em>Start automating!</em></p><p><em>The best part is, you can start automating for free with n8n. The easiest way to get started is to sign up for a <a href=\"https://n8n.io/pricing/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a>. Thanks to n8n’s fair-code license, you can also </em><a href=\"https://docs.n8n.io/hosting/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>self-host n8n for free</em></a><em>.</em></p>\n\t\t<div class=\"newsletter-banner\">\n\t    <div class=\"newsletter-banner-content\">\n\t      <div class=\"section-header\">\n\t        <h2>Subscribe to <span>n8n newsletter</span></h2>\n\t        <div class=\"section-subheader--bottom\">\n\t          Get the best, coolest, and latest in automation and low-code delivered to your inbox each week.\n\t        </div>\n\t      </div>\n\t      <div class=\"newsletter-banner-form\">\n\t        <form autocomplete=\"off\" class=\"contact-form\" onsubmit=\"subscribeNewsletter(event)\">\n\t        \t<div id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB\" data-callback=\"submitSubscription\" data-size=\"invisible\"><div class=\"grecaptcha-badge\" data-style=\"bottomright\" style=\"width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;\"><div class=\"grecaptcha-logo\"><iframe title=\"reCAPTCHA\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-por549mat9wr\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB&amp;co=aHR0cHM6Ly9ibG9nLm44bi5pbzo0NDM.&amp;hl=en&amp;v=jt8Oh2-Ue1u7nEbJQUIdocyd&amp;size=invisible&amp;cb=ylsps0ovh1j1\"></iframe></div><div class=\"grecaptcha-error\"></div><textarea id=\"g-recaptcha-response\" name=\"g-recaptcha-response\" class=\"g-recaptcha-response\" style=\"width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;\"></textarea></div><iframe style=\"display: none;\"></iframe></div>\n\t          <div class=\"input-wrapper\">\n\t            <input placeholder=\"Email\" name=\"email\" type=\"email\" required=\"required\" class=\"\">\n\t            <div class=\"messages\">\n\t              <div class=\"message message--error\">Something went wrong. Please try again later.</div>\n\t              <div class=\"message message--success\">Subscribed!</div>\n\t            </div>\n\t          </div>\n\t          <button type=\"submit\" class=\"submit-btn\">Subscribe</button>\n\t        </form>\n\t      </div>\n\t    </div>\n    </div>\n\t\t<div class=\"post-share-section\">\n\t<div class=\"post-share-wrap\">\n\t\t<a href=\"https://twitter.com/intent/tweet?text=Learn%20to%20automate%20your%20factory's%20incident%20reporting%3A%20a%20step-by-step%20guide&amp;url=https://blog.n8n.io/learn-to-automate-your-factorys-incident-reporting-a-step-by-step-guide/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\"></path></svg></a>\n\t\t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/learn-to-automate-your-factorys-incident-reporting-a-step-by-step-guide/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z\"></path></svg></a>\n\t\t<!-- <a href=\"javascript:\" class=\"post-share-link\" id=\"copy\" data-clipboard-target=\"#copy-link\" aria-label=\"Copy link icon\"><svg role=\"img\" viewBox=\"0 0 33 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M27.3999996,13.4004128 L21.7999996,13.4004128 L21.7999996,19 L18.9999996,19 L18.9999996,13.4004128 L13.3999996,13.4004128 L13.3999996,10.6006192 L18.9999996,10.6006192 L18.9999996,5 L21.7999996,5 L21.7999996,10.6006192 L27.3999996,10.6006192 L27.3999996,13.4004128 Z M12,20.87 C7.101,20.87 3.13,16.898 3.13,12 C3.13,7.102 7.101,3.13 12,3.13 C12.091,3.13 12.181,3.139 12.272,3.142 C9.866,5.336 8.347,8.487 8.347,12 C8.347,15.512 9.866,18.662 12.271,20.857 C12.18,20.859 12.091,20.87 12,20.87 Z M20.347,0 C18.882,0 17.484,0.276 16.186,0.756 C14.882,0.271 13.473,0 12,0 C5.372,0 0,5.373 0,12 C0,18.628 5.372,24 12,24 C13.471,24 14.878,23.726 16.181,23.242 C17.481,23.724 18.88,24 20.347,24 C26.975,24 32.347,18.628 32.347,12 C32.347,5.373 26.975,0 20.347,0 Z\"/></svg></a>\n\t\t<small class=\"share-link-info\">The link has been copied!</small> -->\n\t</div>\n\t<input type=\"text\" value=\"https://blog.n8n.io/learn-to-automate-your-factorys-incident-reporting-a-step-by-step-guide/\" id=\"copy-link\" aria-label=\"Copy link input\">\n</div>",
  "readme": "The steam engine and electrification revolutionized entire sectors of the economy from the 18th century onward. Modern technologies, particularly automation, are beginning to dramatically alter today’s industries. Automation in industries has resulted in higher productivity, better quality of products, and a safer workplace.\n\nContinuously monitoring machines’ health results in effective and efficient maintenance. Real-time monitoring can also help with predictive maintenance. Why have humans continuously monitor the health of machines when we can use an automated system? These automated systems monitor the machines’ health and also warns the staff when incidents are about to take place, even before they happen.\n\nIn this tutorial, we will learn to build the foundation of such automated systems. We will create a workflow that will log machine data coming from factory sensors in a database. The workflow will also generate an incident report on [_PagerDuty_](https://www.pagerduty.com/?ref=blog.n8n.io) and notify the responsible staff members when the temperature of a machine crosses the threshold value. We will also store this incident data into a database, so that it can be used for future reference.\n\nWe will build the workflow using [n8n](https://n8n.io/?ref=blog.n8n.io), a [fair-code](https://faircode.io/?ref=blog.n8n.io) licensed tool that helps you automate tasks, sync data between various sources, and react to events all via a visual workflow editor. We will build two workflows:\n\n  * Workflow 1 — [Smart Factory Data Generator](https://n8n.io/workflows/608?ref=blog.n8n.io)\n  * Workflow 2 — [Smart Factory Incident Report and Data Ingestion](https://n8n.io/workflows/609?ref=blog.n8n.io)\n\n\n\n## Prerequisites\n\nTo get started with the workflow you will need:\n\n  * n8n — You can find details on how to install n8n in the [Quickstart](https://docs.n8n.io/try-it-out/quickstart/?ref=blog.n8n.io) page (this workflow was created using n8n@0.101.0).\n  * [PagerDuty](https://www.pagerduty.com/sign-up/?ref=blog.n8n.io) — You’ll need to obtain an Access Token for the PagerDuty API. You can find the instructions on how to obtain that [here](https://docs.n8n.io/credentials/pagerDuty/?ref=blog.n8n.io).\n  * [ActiveMQ](http://activemq.apache.org/?ref=blog.n8n.io) — You’ll need to install ActiveMQ on your machine. You can find the instructions [here](https://activemq.apache.org/getting-started?ref=blog.n8n.io). You’ll also need to create a queue called `berlin_factory_01`. You can find instructions for that [here](https://learn-it-with-examples.com/middleware/other/activemq/create-activemq-queue.html?ref=blog.n8n.io).\n  * [CrateDB](https://crate.io/?ref=blog.n8n.io) — You’ll also require an instance of CrateDB running locally or on a server. You can find the instructions [here](https://crate.io/docs/crate/tutorials/en/latest/install-run/index.html?ref=blog.n8n.io).\n\n\n\n### Install n8n\n\nYou can install n8n with [npm](https://www.npmjs.com/get-npm?ref=blog.n8n.io), using the following command:\n\n`npm install n8n -g`\n\nYou can also run n8n using [Docker.](https://docs.n8n.io/getting-started/quickstart.html?ref=blog.n8n.io#give-n8n-a-spin)\n\nIf you’ve installed n8n using npm, open up a terminal and run the following command:\n\n`n8n start`\n\nThis will start n8n. Press “o” or navigate to the URL shown in the terminal.\n\nYou can also sign-up for a [free n8n cloud trial](https://n8n.io/cloud?ref=blog.n8n.io) to get access to our hosted service.\n\n## Workflow 1: Smart Factory Data Generator\n\nIn factories, machines run 24/7, and it becomes crucial to monitor their health to avoid failure. Data from the sensors can help keep an eye on the functioning of a factory. Using real sensors is out of the scope of this tutorial. However, this workflow will help you understand how to set up a workflow that queues sensor data using the [_AMQP Sender_](https://docs.n8n.io/nodes/n8n-nodes-base.amqp/?ref=blog.n8n.io) node. For this workflow, we will use an [_Interval_](https://docs.n8n.io/nodes/n8n-nodes-base.interval/?ref=blog.n8n.io) __ node that will trigger the workflow every second. The [_Set_](https://docs.n8n.io/nodes/n8n-nodes-base.set/?ref=blog.n8n.io) __ node will set the values for the items we want to add to the queue, and the _AMQP Sender_ node will send a raw message to add to the queue.\n\n![Smart Factory Data Generator workflow](https://blog.n8n.io/content/images/2021/01/workflow-1-1.png)Smart Factory Data Generator workflow\n\nI have also submitted this [workflow](https://n8n.io/workflows/608?ref=blog.n8n.io) on n8n.io, in case you’d like to skim through it. Please note that you will still need to configure credentials for the _AMQP Sender_ node.\n\n### 1\\. Interval node: Trigger the workflow every second\n\nThe workflow should execute every second, and to do that we will use the _Interval_ node in n8n. The _Interval_ node is used to trigger the workflow to run at regular intervals of time. To add the Interval node, click on the ‘** _+_** ’ button on the top right corner. Under the **_Trigger_** Section, select the _Interval_ node. Set the value to `1` for the **_Interval_** field and select ‘Seconds’ from the **_Unit_** dropdown menu.\n\n![Setting up the Interval node](https://blog.n8n.io/content/images/2021/01/interval.png)Setting up the Interval node\n\n### 2\\. Set node: Set values for sensor data\n\nWe need relevant data to monitor the health of the machines. The sensors might give a lot of information that may or may not be relevant. The _Set_ node allows us to set the workflow data so that only the data we want passes through this node. For the scope of this tutorial, we will generate some random values for the machine uptime, and the temperature of the machine.\n\nClick on the ‘** _+_** ’ button on the top right corner and select the _Set_ node. Click on ‘Add Value’, under the **_Values to Set_** section, and select ‘String’. Enter `machine_id.name` in the **_Name_** field and `n8n_cr8` for the **_Value_** field. To add a new value, click on ‘Add Value’ and select ‘String’. Name this as `temperature_celsius`. Click on the gears symbol next to the **_Value_** field and select **_Add Expression._** Paste the following expression `{{Math.floor(Math.random()*100);}}`. This will create a random temperature value between 1 to 100.\n\nWe will also create a random uptime value. Click on ‘Add Value’ and select ‘String’. Enter `machine_id.uptime` in the **_Name_** field. Click on the gears symbol next to the **_Value_** field and select **_Add Expression._** Paste the following expression `{{Math.floor(Math.random()*100)}}`. This will create a random value for machine uptime between 1 and 100. In case of real sensor data, this wouldn’t be a random value 😉\n\nClick on ‘Add Value’ and select ‘String’. In the **_Name_** field enter `time_stamp`. Click on the gears symbol next to the **_Value_** field and select **_Add Expression._** Paste the following expression `{{Date.now();}}`. This will return the timestamp of when the data was generated.\n\nToggle **_Keep Only Set_** to true. This will pass on only the information we have set in this node to the queue. We now have all the data that we need from the sensors.\n\n> **NOTE** : We are using String as the data type, but you can use number or boolean, as per your use case.\n\nClick on the** _Execute Node_** button to execute the workflow.\n\n![Output for the Set node](https://blog.n8n.io/content/images/2021/01/set-node.png)Output for the Set node\n\n### 3\\. AMQP Sender node : Add messages to the ActiveMQ queue\n\n[AMQP](https://www.amqp.org/?ref=blog.n8n.io) is an open standard application layer protocol for message-oriented middleware. We will use this node to send messages to the ActiveMQ queue that we created earlier.\n\nTo add the _AMQP Sender_ node, click on the ‘** _+_** ’ button. Select the _AMQP Sender_ node to add it to the workflow. Under the **_Credentials_** section, select ‘Create New’ from the dropdown menu. Enter `localhost` as the **_Hostname_**. Make sure the port is `5672`. By default, the username and password for ActiveMQ are `admin` and `admin` respectively. If you have configured a different username and password for ActiveMQ, please use those credentials. Click on **_Save_** to save the credentials.\n\nEnter `berlin_factory_01` in the **_Queue/Topic_** field. Click on **_Add Option_** and toggle **_Data as Object_** to `true`.\n\nSave the workflow and on the top right corner toggle **_Active_** to true. Our workflow will now execute every second and produce the sensor data that will be pushed into the ActiveMQ queue.\n\nHere’s a video of me following the steps mentioned above.\n\nCreating the Interval node, Set node, and the AMQP node\n\n## Workflow 2: Smart Factory Incident Report and Sensor Data Ingestion\n\nIn the previous section, we learnt to build a workflow that generates sensor data and pushes it into an ActiveMQ queue. In this section, we will build a workflow that generates an incident report if the temperature of the machine crosses the threshold value. This workflow will also store the sensor and the incident data into a database.\n\nWe will use the [_AMQP Trigger_](https://docs.n8n.io/nodes/n8n-nodes-base.amqpTrigger?ref=blog.n8n.io) __ node, which will listen to the incoming data from our ActiveMQ queue. We will use the [_IF_](https://docs.n8n.io/nodes/n8n-nodes-base.if/?ref=blog.n8n.io) __ node to check for the threshold value. If the temperature crosses the threshold value, the workflow will create an incident report using the [_PagerDuty_](https://docs.n8n.io/nodes/n8n-nodes-base.pagerDuty?ref=blog.n8n.io) __ node. We will store the incident information in CrateDB, using the [_CrateDB_](https://docs.n8n.io/nodes/n8n-nodes-base.crateDb?ref=blog.n8n.io) _node_. If the temperature is below the threshold value, no action is required.\n\nn8n has nodes for various databases. You can use the [_QuestDB_](https://docs.n8n.io/nodes/n8n-nodes-base.questDb/?ref=blog.n8n.io), [_MongoDB_](https://docs.n8n.io/nodes/n8n-nodes-base.mongoDb?ref=blog.n8n.io), [_Postgres_](https://docs.n8n.io/nodes/n8n-nodes-base.postgres/?ref=blog.n8n.io), [_Microsoft SQL_](https://docs.n8n.io/nodes/n8n-nodes-base.microsoftSql?ref=blog.n8n.io), or the [_MySQL_](https://docs.n8n.io/nodes/n8n-nodes-base.mySql?ref=blog.n8n.io) __ node depending on your use-case.\n\nIn this tutorial we will use CrateDB, which is a time-series database. CrateDB gives the ability to have fast data ingestion for IIoT scale and comes with the flexibility of dynamic data structure. The ease of scaling and high availability makes it an ideal choice for such a use-case.\n\nThe temperature we currently have is in the Celsius unit. We will use the [_Function_](https://docs.n8n.io/nodes/n8n-nodes-base.function?ref=blog.n8n.io) __ node to convert this temperature from Celsius to Fahrenheit. We will also store all the relevant machine information in CrateDB, that can be used in monitoring the machines’ health.\n\n![Smart Factory Incident Report and Sensor Data Ingestion workflow](https://blog.n8n.io/content/images/2021/01/workflow-2.png)Smart Factory Incident Report and Sensor Data Ingestion workflow\n\nI have also submitted this [workflow](https://n8n.io/workflows/609?ref=blog.n8n.io) on n8n.io, in case you’d like to skim through it. Please note that you will still need to configure credentials for the _AMQP Trigger_ , _PagerDuty,_ and _CrateDB_ nodes.\n\nCreate a new workflow in n8n. We will divide this workflow into two parts.\n\n  1. **Part One — Storing Sensor Data in a Database**\n  2. **Part Two — Creating Incident Report and Storing Incident Data**\n\n\n\n## Part One — Storing Sensor Data in a Database\n\nIn this section, we will create a workflow that converts the temperature from Celsius to Fahrenheit using the _Functio_ n node. We will use the _Set_ node to set the data we want to store in our database and the _CrateDB_ node to store the data.\n\n### 1\\. AMQP Trigger node: Trigger workflow with data from ActiveMQ\n\nThe _AMQP Trigger_ node listens to the messages in the ActiveMQ queue and gets triggered when a new message is added to the queue. To add the _AMQP Trigger_ node in the workflow, click on the ‘** _+_** ’ button. Under the **_Trigger_** section, select the _AMQP Trigger_ node. Select the credentials that you created in the previous workflow. We are listening to the messages in the ‘berlin_factory_01’ queue. Hence, enter `berlin_factory_01` as the value for the **_Queue/Topic_** field.\n\nClick on the **_Execute Node_** button.\n\nRename the node from “AMQP Trigger” to “Data from factory sensors” by clicking on the name, editing it, and clicking the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window. Save the workflow and click on the **_Execute Node_** button to execute the node.\n\nCreating AMQP Trigger node that triggers the workflow\n\n### 2\\. Function node: Convert the temperature unit from Celsius to Fahrenheit\n\nThe _Function_ node in n8n can be used for data enrichment or transformation. We will use this node to convert the temperature from Celsius to Fahrenheit. Click on the ‘** _+_** ’ button and select the _Function_ node. Copy and paste the following code in the **_Edit Function_** field.\n    \n    \n    temp_fahrenheit = (items[0].json.body.temperature_celsius * 1.8) + 32;\n    items[0].json.temperature_fahrenheit = temp_fahrenheit;\n    return items;\n\nClick on the **_Execute Node_** button.\n\nTo rename the node from “Function” to “Data enrichment (°C to °F)” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.\n\nHere’s a video of me following the steps mentioned above.\n\nCreating the Function node that converts temperature from Celsius to Fahrenheit\n\nWe now have the information coming from the sensors, as well as the temperature in Fahrenheit. The next step is to store this information in the database. We will first use the _Set_ node to select the data we want to store in our database and then store this data in CrateDB.\n\n### 3\\. Set node: Set values for database\n\nTo add the _Set_ node, click on the ‘** _+_** ’ button, and select the _Set_ node. The information we want to store is the machine name, the machine uptime, temperature in Celsius, the temperature in Fahrenheit, and the timestamp.\n\nClick on the **_Add Value_** button and select ‘String’ from the dropdown menu. In the **_Name_** field enter `machine_name`. In the **_Value_** field, enter `n8n_cr8`.\n\nTo add the machine uptime, click on the **_Add Value_** button and select ‘String’ from the dropdown menu. Enter `machine_uptime` in the **_Name_** field. Click on the gears symbol next to the **_Value_** field and select **_Add Expression._** Open the **_Edit Expression_** editor and under the **_Variable Selector_** section, select:\n\n`Current Node > Input Data > JSON > body > machine_id > uptime`\n\nSimilarly, add values for `temperature_fahrenheit`, `temperature_celsius` and the `time_stamp`. Toggle **_Keep Only Set_** to true. This will pass only the information we have set in this node.\n\nClick on the **_Execute Node_** button.\n\nTo rename the node from “Set” to “Set sensor data” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.\n\n> **NOTE:** You can use the Function node to send the data to the CrateDB node directly.\n\n![Output of the Set node](https://blog.n8n.io/content/images/2021/01/set-sensor-data.png)Output of the Set node\n\n### 4\\. CrateDB node: Insert sensor data in the database\n\nWe have established all the data we want to store in our database. The next step is to add a database node to store this data. n8n has nodes for various databases.\n\nTo start CrateDB on your machine using Docker, run the following command (follow the link in the Prerequisites section if you’d like to explore other ways to run CrateDB):\n\n`docker run -p 4200:4200 -p 5432:5432 crate -Cdiscovery.type=single-node`\n\n> **NOTE:** You can also use [CrateDB Cloud](https://crate.io/products/cratedb-cloud/?ref=blog.n8n.io) if you don’t want to set up CrateDB on your own.\n\nIn the n8n workflow editor, click on the ‘** _+_** ’ button and select the _CrateDB_ node. Select ‘Create New’ from the dropdown menu in the **_Credentials_** section.\n\nGive your credentials a name, in the **_Credentials Name_** field. We are running CrateDB locally on our machine. Enter ‘localhost’ as the value for the **_Hostname_** field.\n\nThis is how your CrateDB credentials should look like:\n\n![CrateDB credentials configuration](https://blog.n8n.io/content/images/2021/01/crate-credentials.png)CrateDB credentials configuration\n\nSelect ‘Insert’ from the **_Operation_** dropdown menu. For the **_Schema_** field, enter `doc`. We will store the data in the table called `machine_data`, hence enter `machine_data` in the **_Table_** field. Enter `machine_name, machine_uptime, time_stamp, temperature_fahrenheit, temperature_celsius` in the **_Columns_** field.\n\nIn the [CrateDB Admin UI](https://crate.io/docs/crate/admin-ui/en/latest/?ref=blog.n8n.io), open the **_Console_**. Enter the following SQL command to create a table for our machine data:\n    \n    \n    CREATE TABLE machine_data(machine_name STRING, machine_uptime INT, temperature_fahrenheit INT, temperature_celsius INT, time_stamp TIMESTAMP);\n\nClick on **_Execute Query_** to create the table:\n\n> **NOTE:** If you’re running CrateDB locally, you access the Admin UI at [http://localhost:4200](http://localhost:4200/?ref=blog.n8n.io)\n\n![Creating a table in CrateDB](https://blog.n8n.io/content/images/2021/01/cratedb-admin-ui.png)Creating a table in CrateDB\n\nIn n8n, click on **_Execute Node_** to execute the node.\n\nTo rename the node from “CrateDB” to “Ingest machine data” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.\n\n> **NOTE** : Make sure you have some messages in the ActiveMQ queue to trigger the workflow.\n\nHere’s a video of me following the steps mentioned above.\n\nCreating CrateDB node to ingest machine data\n\n## Part Two — Creating Incident Report and Storing Incident Data\n\nThe workflow will create an incident report and alert the factory staff whenever the temperature reaches more than 50℃. We will use the _IF_ node that will check this condition. If the temperature is less than 50℃, the _No Operation, do nothing_ node will execute. When the temperature crosses the threshold value, the incident report and alert will be created using the _PagerDuty_ node. The details of the incident will then be stored in a table in CrateDB.\n\n### 1\\. IF node: Check if the temperature is greater than or equal to the threshold value\n\nThe _IF_ node checks the value of the temperature which is passed on from the _AMQP Trigger_ node. We will add an _IF_ node that will be connected to the _AMQP Trigger_ node. To add the _IF_ node, click on the ‘** _+_** ’ button, and select the _IF_ node. Select ‘Number’ from the **_Add Condition_** dropdown menu. Open the **_Edit Expression_** editor for **_Value 1_**. Under the **_Variable Selector_** section, select `Current Node > Input Data > JSON > body > temperature_celsius`. Select ‘Larger Equal’ from the **_Operation_** dropdown menu and enter `50` for the **_Value 2_** field.\n\nClick on the **_Execute Node_** button to execute the node.\n\nTo rename the node from “IF” to “Values higher than 50°C” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.\n\nHere’s a video of me following the steps mentioned above.\n\nCreating IF node to check if the temperature is greater than or equal to the threshold value\n\n### 2\\. PagerDuty node: Create an incident report and alert the factory staff\n\nAn incident report and alert will be created whenever the value is greater than or equal to 50. Click on the ‘** _+_** ’ button and select the _PagerDuty_ node. Join the _PagerDuty_ node to the **_true_** endpoint of the _IF_ node. Select ‘API Token’ from the **_Authentication_** dropdown menu. Select ‘Create New’ from the **_PagerDuty API_** dropdown menu. Copy and paste the PagerDuty API token in the **_API Token_** field. Click on **_Save_** to save the credentials.\n\nSelect ‘Incident’ from the **_Resource_** dropdown menu and select ‘Create’ from the **_Operation_** dropdown menu. For the **_Title_** field click on the gear icon and select ‘Add Expression’. In the **_Expression_** editor copy and paste the following: `Incident with {{$json[\"body\"][\"machine_id\"][\"name\"]}}`. This will create an incident with a title that has a format similar to `Incident with n8n_cr8`.\n\nFrom the **_Service ID_** dropdown menu, select the relevant service. Enter your (or the responsible person’s) email address in the **_Email_** field.\n\nClick on the **_Execute Node_** button.\n\nTo rename the node from “PagerDuty” to “Create an incident” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.\n\nHere’s a video of me following the steps mentioned above.\n\nCreating PagerDuty node to create an incident report and alert the factory staff\n\nNow that the workflow is creating the incident report, the next step is to store the data in the database. This data can be used for keeping a log of the incidents and making informed decisions in the future.\n\n### 3\\. Set node: Select incident information\n\nWe will use the _Set_ node to select the data we want to store in our database. To add the _Set_ node in the workflow, click on the ‘** _+_** ’ button. Click on **_Add Value_** and select ‘String’ from the dropdown menu. In the **_Name_** field, enter `incident_id`. Click on the gears icon for the **_Value_** field and select ‘Add Expression’. From the **_Variable Selector_** section select `Current Node > Input Data > JSON > id`. From the **_Add Value_** dropdown menu, select `String`. Enter `html_url` for the **_Name_** field. Click on the gears icon for the **_Value_** field and select ‘Add Expression’. From the **_Variable Selector_** section select `Current Node > Input Data > JSON > html_url`. Similarly, select `String` from the **_Add Value_** dropdown menu in the _Set_ node. In the **_Name_** field, enter `incident_timestamp`. Click on the gears icon for the **_Value_** field and select ‘Add Expression’. From the **_Variable Selector_** section select `Current Node > Input Data > JSON > created_at`.\n\nToggle **_Keep Only Set_** to true. This will pass only the information we have set in this node.\n\nClick on the **_Execute Node_** button.\n\nTo rename the node from “Set” to “Set incident info” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.\n\n![Output of Set node for incident information](https://blog.n8n.io/content/images/2021/01/set-incident-info.png)Output of Set node for incident information\n\n### 4\\. CrateDB node: Store incident information\n\nWe will store this data in a separate table in CrateDB. In n8n, click on the ‘** _+_** ’ button and select the _CrateDB_ node. Select the credentials you created earlier from the **_CrateDB_** dropdown menu. Make sure the **_Operation_** is `insert` and the value for **_Schema_** is `doc`. In the **_Table_** field, enter the table name `incident_data`. Copy and paste `incident_id, html_url, incident_timestamp` in the **_Columns_** field.\n\nTo create the incident_table, open the **_Console_** , in the CrateDB Admin UI. In the terminal paste the following SQL command:\n    \n    \n    CREATE TABLE incident_data (incident_id TEXT, html_url TEXT, incident_timestamp TIMESTAMP);\n\nClick on **_Execute Query_** to create the table.\n\nIn n8n, click on **_Execute Node_** to execute the node.\n\nTo rename the node from “CrateDB” to “Ingest incident data” click on the name, edit it, and click the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window.\n\nThe workflow now creates an incident report using PagerDuty and stores the information in the database.\n\nHere’s a video of me following all the steps mentioned above.\n\nCreating CrateDB node to ingest incident data\n\n### 5\\. No operation, do nothing node: Do nothing 😴\n\nAdding this node here is optional, as the absence of this node won’t make a difference to the functioning of the workflow.\n\nClick on the ‘** _+_** ’ button and select _No operation, do nothing_ node. Connect this node with the **_false_** endpoint of the _IF_ node. Now every time the temperature is less than the threshold, the No operation, do nothing node will execute and perform no action.\n\nHere’s a video of me following the steps mentioned above.\n\nCreating No operation, do nothing node\n\nClick on **_Execute Workflow_** button, in the n8n workflow editor, to run the workflow.\n\n![](https://cdn-images-1.medium.com/max/800/1*8pZVsXLsxSMiGesyfwYG1A.gif)Output of the workflow\n\n## What’s Next?\n\nWe created a workflow that gathers machine data from the sensors and stores the information in a database. With this workflow, we are also storing the incident information. We can use this historical time-series data to predict any future incidents and avoid any downtime. The predictions can also help us with the maintenance and proper functioning of the machines. We can use the database nodes to read the data from the database. We can pass on this data to a machine learning API using the [_HTTP Request_](https://docs.n8n.io/nodes/n8n-nodes-base.httpRequest?ref=blog.n8n.io) node.\n\nDon’t forget to share the [workflow](https://n8n.io/workflows?ref=blog.n8n.io) that you build with the community.\n\n## Conclusion\n\nCongratulations! We built a workflow that generates incident reports and alerts the factory staff whenever a machine in a factory is malfunctioning. In the first workflow, we learned how to use the Interval node to trigger the workflow every second. We also learned how to use the _Set_ node to set the data we want. Lastly, we saw how to use the _AMQP Sender_ node to add messages to the Queue.\n\nIn the second workflow, we learned how the _AMQP Trigger_ node is used. We also learnt to conditionally create incident reports and store this information in the database. We understood how the _Function_ node can be utilized for data enrichment.\n\nYou can modify the workflow and adapt it for your use-case without much effort. We are using CrateDB in this tutorial, but you can use any database you want. You can use the [_QuestDB_](https://docs.n8n.io/nodes/n8n-nodes-base.questDb/?ref=blog.n8n.io), [_MongoDB_](https://docs.n8n.io/nodes/n8n-nodes-base.mongoDb?ref=blog.n8n.io), [_Postgres_](https://docs.n8n.io/nodes/n8n-nodes-base.postgres?ref=blog.n8n.io), [_Microsoft SQL_](https://docs.n8n.io/nodes/n8n-nodes-base.microsoftSql?ref=blog.n8n.io), or the [_MySQL_](https://docs.n8n.io/nodes/n8n-nodes-base.mySql?ref=blog.n8n.io) node to store the data into the respective databases. You can also use a combination of these databases, depending on the use-case.\n\nI’d be excited to check out what you’ve built using n8n! In case you’ve run into an issue while following the tutorial, feel free to reach out to me on [Twitter](https://twitter.com/harshil1712?ref=blog.n8n.io) or ask for help on our [forum](https://community.n8n.io/?ref=blog.n8n.io) 💙\n\n _Start automating!_\n\n_The best part is, you can start automating for free with n8n. The easiest way to get started is to sign up for a[free n8n cloud trial](https://n8n.io/pricing/?ref=blog.n8n.io). Thanks to n8n’s fair-code license, you can also _[_self-host n8n for free_](https://docs.n8n.io/hosting/?ref=blog.n8n.io) _._\n\n## Subscribe to n8n newsletter\n\nGet the best, coolest, and latest in automation and low-code delivered to your inbox each week. \n\nSomething went wrong. Please try again later.\n\nSubscribed!\n\nSubscribe\n\n[](https://twitter.com/intent/tweet?text=Learn%20to%20automate%20your%20factory's%20incident%20reporting%3A%20a%20step-by-step%20guide&url=https://blog.n8n.io/learn-to-automate-your-factorys-incident-reporting-a-step-by-step-guide/) [](https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/learn-to-automate-your-factorys-incident-reporting-a-step-by-step-guide/)\n",
  "crawled_at": "2025-05-28T10:54:28.732752"
}