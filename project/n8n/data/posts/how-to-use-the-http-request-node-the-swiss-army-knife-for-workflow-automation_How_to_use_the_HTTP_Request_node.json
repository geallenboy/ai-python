{
  "url": "https://blog.n8n.io/how-to-use-the-http-request-node-the-swiss-army-knife-for-workflow-automation/",
  "title": "How to use the HTTP Request node",
  "excerpt": "The HTTP Request node is like the Swiss Army Knife of workflow automation. Learn how to use it when there's no node yet for an app that you need.",
  "thumbnail": "https://blog.n8n.io/content/images/size/w1200/2021/03/cover-5.png",
  "tags": [
    "News"
  ],
  "html": "<p>With hundreds of <a href=\"https://n8n.io/integrations/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">integrations</a>, n8n saves you countless hours by making it possible to combine and automate different apps and services. But what happens when there’s no node for a tool you need?</p><p>Enter the<a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.httpRequest?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"> <em><strong>HTTP Request</strong></em></a><em><strong> node</strong></em>––one of the most versatile and powerful nodes in the n8n ecosystem. This node can send any type of<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"> HTTP request</a>, allowing you to talk to the<a href=\"https://docs.n8n.io/reference/glossary.html?ref=blog.n8n.io#api\" target=\"_blank\" rel=\"noopener\"> RESTful API</a>s of the apps you need.</p><p>In this article, I’ll show you how to configure the HTTP Request node for three simple use cases:</p><ol><li>Scraping a webpage</li><li>Creating a DigitalOcean droplet</li><li>Converting speech-to-text</li></ol><!--kg-card-begin: markdown--><h4 id=\"tableofcontents\">Table of contents</h4>\n<p><a href=\"#prerequisites\">Prerequisites</a><br>\n<a href=\"#workflow-1-scraping-data-from-hackernoon\">Workflow 1: Scraping data from HackerNoon</a><br>\n<a href=\"#workflow-2-creating-a-cloud-instance-on-digitalocean\">Workflow 2: Creating a cloud instance on DigitalOcean</a><br>\n<a href=\"#workflow-3-converting-speech-to-text-with-wit-ai\">Workflow 3 : Converting speech to text with Wit.ai</a><br>\n<a href=\"#what-s-next\">What's next?</a></p>\n<!--kg-card-end: markdown--><h2 id=\"prerequisites\">Prerequisites</h2><p>To follow along these short tutorials, you need to have:</p><ul><li><strong>n8n setup</strong>: You can either <a href=\"https://docs.n8n.io/getting-started/installation/?ref=blog.n8n.io#self-hosting-n8n\" target=\"_blank\" rel=\"noopener\">install n8n</a> locally, or use the <a href=\"https://n8n.io/pricing/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">cloud</a> instance.</li><li><strong>DigitalOcean credentials </strong>(only for workflow 2): You need to sign up for an account on DigitalOcean and generate your Personal Access Token from the<a href=\"https://cloud.digitalocean.com/account/api/tokens?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"> API section</a>.</li><li><strong>Wit.ai credentials </strong>(only for workflow 3)<strong>: </strong>You need to sign up for an account on<a href=\"https://wit.ai/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"> Wit.ai</a>, create a new App, then go to Settings and get your Server Access Token.</li></ul><h2 id=\"workflow-1-scraping-data-from-hackernoon\"><strong>Workflow 1 : Scraping data from HackerNoon</strong></h2><p>Wouldn’t it be great to automatically get a list of the most recent HackerNoon articles? That’s what this first workflow is about. We’ll use the <em>HTTP Request node</em> with the GET method to retrieve the homepage of<a href=\"https://hackernoon.com/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"> Hackernoon</a> and extract the names and URLs of all the articles.</p><p>To get started, copy <a href=\"https://n8n.io/workflows/434?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">this workflow</a> and paste it into your Editor UI. The workflow consists of <strong>three nodes</strong>:</p><ol><li><em>HTTP Request node </em>to get the source code of the webpage</li><li><em>HTML Extract 1 node </em>to extract the article headings</li><li><em>HTML Extract node 2 </em>to extract specific information from webpage</li></ol><p>Now let’s see how to configure each node.</p><h3 id=\"1-http-request-node\">1. HTTP Request Node</h3><p>In the <em>HTTP Request </em>node, configure the following parameters:</p><ul><li><em>Request Method:</em> GET</li><li><em>URL</em>: https://hackernoon.com</li><li><em>Response Format:</em> String</li></ul><p>When you execute the node, you’ll see the retrieved source code of the page.</p><h3 id=\"2-html-extract-1-node\">2. HTML Extract 1 node</h3><p>In the <em>HTML Extract node</em>, configure the following parameters:</p><ul><li><em>Source Data: JSON</em></li><li><em><em><em>JSON Property: data</em></em></em></li></ul><p>Add a value with the following properties:</p><ul><li><em>Key</em>: item<br>This is the name under which the extracted titles will be saved. You can choose any name you want.</li><li><em>CSS Selector:</em> h2<br>This is the class name of the element you want to extract data from. In our case, all the blog titles are h2 elements<em>.</em></li><li><em>Return Value: </em>HTML</li><li><em>Return Array</em>: Toggle to True</li></ul><h3 id=\"3-html-extract-2-node\">3. HTML Extract 2 node</h3><p>In the <em>HTML Extract 2 node</em>, configure the following parameters:</p><ul><li><em>Source Data:</em> JSON</li><li><em>JSON Property:</em> item</li></ul><p>Add two values with the following properties:</p><ul><li>Value 1:</li><li><em> Key</em>: Title</li><li><em> CSS Selector</em>: a</li><li><em> Return Value</em>: Text</li></ul><p></p><ul><li>Value 2:</li><li><em> Key</em>: url</li><li><em> CSS Selector</em>: a</li><li><em> Return Value</em>: Attribute</li><li><em> Attribute</em>: href</li></ul><p>Now when you execute the node, you’ll see the titles and URLs of each article from HackerNoon.</p><p>Here’s a video illustrating the steps described above:</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/4gx8XR6scyE?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Extracting data from a webpage using n8n</figcaption></figure><p><strong>Follow-up idea:</strong> Use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.googleSheets/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Google Sheets node</em></a> or <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.airtable/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Airtable node</em></a><em> </em>to save the scraped titles in a spreadsheet. For more inspiration, check out uProc’s complex <a href=\"https://blog.n8n.io/how-uproc-scraped-a-multi-page-website-with-a-low-code-workflow/\">web-scraping workflow</a>.</p><h2 id=\"workflow-2-creating-a-cloud-instance-on-digitalocean\"><strong>Workflow 2 :  Creating a cloud instance on DigitalOcean</strong></h2><p><a href=\"https://digitalocean.com/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">DigitalOcean</a> is a leading web hosting provider. In this use case, we’ll use the <em>HTTP Request node </em>with the <em>POST</em> method to create a cloud virtual machine on DigitalOcean.</p><p><a href=\"https://n8n.io/workflows/435?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">This workflow</a> consists of only one node – the HTTP node, with the following parameters:</p><ul><li><em>Request Method:</em> POST</li><li><em>URL</em>: <a href=\"https://api.digitalocean.com/v2/droplets?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">https://api.digitalocean.com/v2/droplets</a></li><li><em>Response Format:</em> JSON</li></ul><p>Next, add an option <em>Body Content Type:<strong> </strong>JSON</em>.</p><p>Now add <em><strong>Body Parameters,</strong> </em>which tell DigitalOcean what kind of a droplet to create. I chose to add four basic parameters, but you can add several different parameters (refer to the <a href=\"https://docs.digitalocean.com/reference/api/api-reference/?ref=blog.n8n.io#operation/create_droplet\" target=\"_blank\" rel=\"noopener\">DigitalOcean docs</a>).</p><ul><li><em>Name</em>: name<br><em>Value</em>: API-creation-test</li><li><em>Name</em>: region<br><em>Value</em>: blr1</li><li><em>Name</em>: size<br><em>Value</em>: s-1vcpu-1gb</li><li><em>Name</em>: image<br><em>Value</em>: ubuntu-20-04-x64</li></ul><p>Next, we need to add the authorization header with the following values:</p><ul><li><em>Name: </em>Authorization</li><li><em><em><em>Value:</em> Bearer {your_personal_access_token}</em></em></li></ul><p>Execute the node, then head over to your DigitalOcean console. You should see that a new droplet with the name<em> API-creation-test</em> has been created.</p><p>Here’s a video illustrating the steps described above:</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/SUF4pt9CIjs?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating a cloud instance on DigitalOcean using n8n</figcaption></figure><h2 id=\"workflow-3-converting-speech-to-text-with-wit-ai\"><strong>Workflow 3 : Converting speech to text with Wit.ai</strong></h2><p><a href=\"https://wit.ai/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Wit.ai</a> is a natural language processing (NLP) interface for applications capable of turning sentences into structured data and building chatbots. Doesn’t that sound fun? In <a href=\"https://n8n.io/workflows/437?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">this workflow</a>, we’ll use Wit.ai’s API in the HTTP Request node to convert speech from an <a href=\"https://drive.google.com/uc?export=download&amp;id=1xK7Pv5WaupVWihUQXVfMwzwhwHzlNX48&amp;ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">audio file</a> to text. The workflow consists of two nodes:</p><ol><li><a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.readBinaryFile/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Read Binary</em> <em>File node</em></a> to read the audio recording</li><li><em><em><em>HTTP Request node </em>to access the Wit.ai API</em></em></li></ol><h3 id=\"1-read-binary-file-node\">1. Read Binary File node</h3><p>In the <em>Read Binary File node </em>configure the following parameters:</p><ul><li><em>File Path</em>: /data/demo1.wav<br>This is the audio file we want to convert into text.</li><li><em>Property Name:</em> data<br>You can choose any name you want.</li></ul><h3 id=\"2-http-request-node\">2. HTTP Request node</h3><p>In the <em>HTTP Request node </em>configure the following parameters:</p><ul><li><em>Request Method</em>: POST</li><li><em>URL</em>: https://api.wit.ai/speech?v=20200513</li><li><em>Response Format</em>: JSON</li><li><em>JSON/RAW Parameters</em>: Toggle to True</li></ul><p>Next, add an option <em>Body Content Type:<strong> </strong>RAW/Custom. </em>Below, add the following information:</p><ul><li><em>Send Binary Data: </em>Toggle to True</li><li><em>Binary Property:</em> data</li><li><em>Headers</em>: {{JSON.parse('{\"Authorization\":\"Bearer {your_token_goes_here}\", \"Content-Type\":\"audio/wav\"}')}}</li></ul><p>Execute the node<em> </em>and in a couple of seconds you should see the detected text returned from Wit.ai.</p><p>Here’s a video illustrating the steps described above:</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/BGz8FXM4TAM?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Speech to text conversion using Wit.ai and n8n</figcaption></figure><p><strong>Follow-up idea: </strong>Translate the text message into another language with the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.googleTranslate/?ref=blog.n8n.io#example-usage\" target=\"_blank\" rel=\"noopener\"><em>Google Translate node</em></a> or <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.lingvaNex/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>LingvaNex node</em></a> (like in this <a href=\"https://blog.n8n.io/world-poetry-day-workflow/\">poetry workflow</a>). Moreover, you can analyze the sentiment of the message with the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.googleTranslate/?ref=blog.n8n.io#example-usage\" target=\"_blank\" rel=\"noopener\"><em>Google Cloud Natural Language node</em></a> or<em> </em><a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.awsComprehend/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>AWS Comprehend node</em></a>.</p><h2 id=\"what-s-next\"><strong>What’s next?</strong></h2><p>In this tutorial, you learned to use the <em>HTTP Request</em> <em>node</em> to extract information from the web, create a cloud server, and convert speech to text. Since most of the internet functions on HTTP requests, you can use n8n to integrate any platform that supports a RESTful API and automate cross-platform tasks.</p><p>Much like people, the technology works better as a collective. Now that you know how to use the HTTP Request node, the possibilities for automation are endless.</p><p>In case you run into issues following the tutorial, feel free to reach out to me on<a href=\"https://www.linkedin.com/in/amudhan-manivasagam-4aba86167/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"> LinkedIn</a> or ask for help on our<a href=\"https://community.n8n.io/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"> forum</a> 💙</p><p><em>Start automating!</em></p>\n\t\t<div class=\"newsletter-banner\">\n\t    <div class=\"newsletter-banner-content\">\n\t      <div class=\"section-header\">\n\t        <h2>Subscribe to <span>n8n newsletter</span></h2>\n\t        <div class=\"section-subheader--bottom\">\n\t          Get the best, coolest, and latest in automation and low-code delivered to your inbox each week.\n\t        </div>\n\t      </div>\n\t      <div class=\"newsletter-banner-form\">\n\t        <form autocomplete=\"off\" class=\"contact-form\" onsubmit=\"subscribeNewsletter(event)\">\n\t        \t<div id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB\" data-callback=\"submitSubscription\" data-size=\"invisible\"><div class=\"grecaptcha-badge\" data-style=\"bottomright\" style=\"width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;\"><div class=\"grecaptcha-logo\"><iframe title=\"reCAPTCHA\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-c6xpn9606ela\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB&amp;co=aHR0cHM6Ly9ibG9nLm44bi5pbzo0NDM.&amp;hl=en&amp;v=jt8Oh2-Ue1u7nEbJQUIdocyd&amp;size=invisible&amp;cb=m32qeav0ckpp\"></iframe></div><div class=\"grecaptcha-error\"></div><textarea id=\"g-recaptcha-response\" name=\"g-recaptcha-response\" class=\"g-recaptcha-response\" style=\"width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;\"></textarea></div><iframe style=\"display: none;\"></iframe></div>\n\t          <div class=\"input-wrapper\">\n\t            <input placeholder=\"Email\" name=\"email\" type=\"email\" required=\"required\" class=\"\">\n\t            <div class=\"messages\">\n\t              <div class=\"message message--error\">Something went wrong. Please try again later.</div>\n\t              <div class=\"message message--success\">Subscribed!</div>\n\t            </div>\n\t          </div>\n\t          <button type=\"submit\" class=\"submit-btn\">Subscribe</button>\n\t        </form>\n\t      </div>\n\t    </div>\n    </div>\n\t\t<div class=\"post-share-section\">\n\t<div class=\"post-share-wrap\">\n\t\t<a href=\"https://twitter.com/intent/tweet?text=How%20to%20use%20the%20HTTP%20Request%20node&amp;url=https://blog.n8n.io/how-to-use-the-http-request-node-the-swiss-army-knife-for-workflow-automation/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\"></path></svg></a>\n\t\t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/how-to-use-the-http-request-node-the-swiss-army-knife-for-workflow-automation/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z\"></path></svg></a>\n\t\t<!-- <a href=\"javascript:\" class=\"post-share-link\" id=\"copy\" data-clipboard-target=\"#copy-link\" aria-label=\"Copy link icon\"><svg role=\"img\" viewBox=\"0 0 33 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M27.3999996,13.4004128 L21.7999996,13.4004128 L21.7999996,19 L18.9999996,19 L18.9999996,13.4004128 L13.3999996,13.4004128 L13.3999996,10.6006192 L18.9999996,10.6006192 L18.9999996,5 L21.7999996,5 L21.7999996,10.6006192 L27.3999996,10.6006192 L27.3999996,13.4004128 Z M12,20.87 C7.101,20.87 3.13,16.898 3.13,12 C3.13,7.102 7.101,3.13 12,3.13 C12.091,3.13 12.181,3.139 12.272,3.142 C9.866,5.336 8.347,8.487 8.347,12 C8.347,15.512 9.866,18.662 12.271,20.857 C12.18,20.859 12.091,20.87 12,20.87 Z M20.347,0 C18.882,0 17.484,0.276 16.186,0.756 C14.882,0.271 13.473,0 12,0 C5.372,0 0,5.373 0,12 C0,18.628 5.372,24 12,24 C13.471,24 14.878,23.726 16.181,23.242 C17.481,23.724 18.88,24 20.347,24 C26.975,24 32.347,18.628 32.347,12 C32.347,5.373 26.975,0 20.347,0 Z\"/></svg></a>\n\t\t<small class=\"share-link-info\">The link has been copied!</small> -->\n\t</div>\n\t<input type=\"text\" value=\"https://blog.n8n.io/how-to-use-the-http-request-node-the-swiss-army-knife-for-workflow-automation/\" id=\"copy-link\" aria-label=\"Copy link input\">\n</div>",
  "readme": "With hundreds of [integrations](https://n8n.io/integrations/?ref=blog.n8n.io), n8n saves you countless hours by making it possible to combine and automate different apps and services. But what happens when there’s no node for a tool you need?\n\nEnter the[ _**HTTP Request**_](https://docs.n8n.io/nodes/n8n-nodes-base.httpRequest?ref=blog.n8n.io) _**node**_ ––one of the most versatile and powerful nodes in the n8n ecosystem. This node can send any type of[ HTTP request](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods?ref=blog.n8n.io), allowing you to talk to the[ RESTful API](https://docs.n8n.io/reference/glossary.html?ref=blog.n8n.io#api)s of the apps you need.\n\nIn this article, I’ll show you how to configure the HTTP Request node for three simple use cases:\n\n  1. Scraping a webpage\n  2. Creating a DigitalOcean droplet\n  3. Converting speech-to-text\n\n\n\n#### Table of contents\n\nPrerequisites  \nWorkflow 1: Scraping data from HackerNoon  \nWorkflow 2: Creating a cloud instance on DigitalOcean  \nWorkflow 3 : Converting speech to text with Wit.ai  \nWhat's next?\n\n## Prerequisites\n\nTo follow along these short tutorials, you need to have:\n\n  * **n8n setup** : You can either [install n8n](https://docs.n8n.io/getting-started/installation/?ref=blog.n8n.io#self-hosting-n8n) locally, or use the [cloud](https://n8n.io/pricing/?ref=blog.n8n.io) instance.\n  * **DigitalOcean credentials**(only for workflow 2): You need to sign up for an account on DigitalOcean and generate your Personal Access Token from the[ API section](https://cloud.digitalocean.com/account/api/tokens?ref=blog.n8n.io).\n  * **Wit.ai credentials**(only for workflow 3)**:** You need to sign up for an account on[ Wit.ai](https://wit.ai/?ref=blog.n8n.io), create a new App, then go to Settings and get your Server Access Token.\n\n\n\n## **Workflow 1 : Scraping data from HackerNoon**\n\nWouldn’t it be great to automatically get a list of the most recent HackerNoon articles? That’s what this first workflow is about. We’ll use the _HTTP Request node_ with the GET method to retrieve the homepage of[ Hackernoon](https://hackernoon.com/?ref=blog.n8n.io) and extract the names and URLs of all the articles.\n\nTo get started, copy [this workflow](https://n8n.io/workflows/434?ref=blog.n8n.io) and paste it into your Editor UI. The workflow consists of **three nodes** :\n\n  1. _HTTP Request node_ to get the source code of the webpage\n  2.  _HTML Extract 1 node_ to extract the article headings\n  3.  _HTML Extract node 2_ to extract specific information from webpage\n\n\n\nNow let’s see how to configure each node.\n\n### 1\\. HTTP Request Node\n\nIn the _HTTP Request_ node, configure the following parameters:\n\n  * _Request Method:_ GET\n  *  _URL_ : https://hackernoon.com\n  *  _Response Format:_ String\n\n\n\nWhen you execute the node, you’ll see the retrieved source code of the page.\n\n### 2\\. HTML Extract 1 node\n\nIn the _HTML Extract node_ , configure the following parameters:\n\n  * _Source Data: JSON_\n  *  ___JSON Property: data___\n\n\n\nAdd a value with the following properties:\n\n  * _Key_ : item  \nThis is the name under which the extracted titles will be saved. You can choose any name you want.\n  * _CSS Selector:_ h2  \nThis is the class name of the element you want to extract data from. In our case, all the blog titles are h2 elements _._\n  * _Return Value:_ HTML\n  *  _Return Array_ : Toggle to True\n\n\n\n### 3\\. HTML Extract 2 node\n\nIn the _HTML Extract 2 node_ , configure the following parameters:\n\n  * _Source Data:_ JSON\n  *  _JSON Property:_ item\n\n\n\nAdd two values with the following properties:\n\n  * Value 1:\n  * _Key_ : Title\n  *  _CSS Selector_ : a\n  *  _Return Value_ : Text\n\n\n\n  * Value 2:\n  * _Key_ : url\n  *  _CSS Selector_ : a\n  *  _Return Value_ : Attribute\n  *  _Attribute_ : href\n\n\n\nNow when you execute the node, you’ll see the titles and URLs of each article from HackerNoon.\n\nHere’s a video illustrating the steps described above:\n\nExtracting data from a webpage using n8n\n\n**Follow-up idea:** Use the [_Google Sheets node_](https://docs.n8n.io/nodes/n8n-nodes-base.googleSheets/?ref=blog.n8n.io) or [_Airtable node_](https://docs.n8n.io/nodes/n8n-nodes-base.airtable/?ref=blog.n8n.io) __ to save the scraped titles in a spreadsheet. For more inspiration, check out uProc’s complex [web-scraping workflow](https://blog.n8n.io/how-uproc-scraped-a-multi-page-website-with-a-low-code-workflow/).\n\n## **Workflow 2 : Creating a cloud instance on DigitalOcean**\n\n[DigitalOcean](https://digitalocean.com/?ref=blog.n8n.io) is a leading web hosting provider. In this use case, we’ll use the _HTTP Request node_ with the _POST_ method to create a cloud virtual machine on DigitalOcean.\n\n[This workflow](https://n8n.io/workflows/435?ref=blog.n8n.io) consists of only one node – the HTTP node, with the following parameters:\n\n  * _Request Method:_ POST\n  *  _URL_ : [https://api.digitalocean.com/v2/droplets](https://api.digitalocean.com/v2/droplets?ref=blog.n8n.io)\n  *  _Response Format:_ JSON\n\n\n\nNext, add an option _Body Content Type:**** JSON_.\n\nNow add _**Body Parameters,** _which tell DigitalOcean what kind of a droplet to create. I chose to add four basic parameters, but you can add several different parameters (refer to the [DigitalOcean docs](https://docs.digitalocean.com/reference/api/api-reference/?ref=blog.n8n.io#operation/create_droplet)).\n\n  * _Name_ : name  \n _Value_ : API-creation-test\n  *  _Name_ : region  \n _Value_ : blr1\n  *  _Name_ : size  \n _Value_ : s-1vcpu-1gb\n  *  _Name_ : image  \n _Value_ : ubuntu-20-04-x64\n\n\n\nNext, we need to add the authorization header with the following values:\n\n  * _Name:_ Authorization\n  *  ___Value:_ Bearer {your_personal_access_token}__\n\n\n\nExecute the node, then head over to your DigitalOcean console. You should see that a new droplet with the name _API-creation-test_ has been created.\n\nHere’s a video illustrating the steps described above:\n\nCreating a cloud instance on DigitalOcean using n8n\n\n## **Workflow 3 : Converting speech to text with Wit.ai**\n\n[Wit.ai](https://wit.ai/?ref=blog.n8n.io) is a natural language processing (NLP) interface for applications capable of turning sentences into structured data and building chatbots. Doesn’t that sound fun? In [this workflow](https://n8n.io/workflows/437?ref=blog.n8n.io), we’ll use Wit.ai’s API in the HTTP Request node to convert speech from an [audio file](https://drive.google.com/uc?export=download&id=1xK7Pv5WaupVWihUQXVfMwzwhwHzlNX48&ref=blog.n8n.io) to text. The workflow consists of two nodes:\n\n  1. [_Read Binary_ _File node_](https://docs.n8n.io/nodes/n8n-nodes-base.readBinaryFile/?ref=blog.n8n.io) to read the audio recording\n  2.  ___HTTP Request node_ to access the Wit.ai API__\n\n\n\n### 1\\. Read Binary File node\n\nIn the _Read Binary File node_ configure the following parameters:\n\n  * _File Path_ : /data/demo1.wav  \nThis is the audio file we want to convert into text.\n  * _Property Name:_ data  \nYou can choose any name you want.\n\n\n\n### 2\\. HTTP Request node\n\nIn the _HTTP Request node_ configure the following parameters:\n\n  * _Request Method_ : POST\n  *  _URL_ : https://api.wit.ai/speech?v=20200513\n  *  _Response Format_ : JSON\n  *  _JSON/RAW Parameters_ : Toggle to True\n\n\n\nNext, add an option _Body Content Type:**** RAW/Custom. _Below, add the following information:\n\n  * _Send Binary Data:_ Toggle to True\n  *  _Binary Property:_ data\n  *  _Headers_ : {{JSON.parse('{\"Authorization\":\"Bearer {your_token_goes_here}\", \"Content-Type\":\"audio/wav\"}')}}\n\n\n\nExecute the node __ and in a couple of seconds you should see the detected text returned from Wit.ai.\n\nHere’s a video illustrating the steps described above:\n\nSpeech to text conversion using Wit.ai and n8n\n\n**Follow-up idea:** Translate the text message into another language with the [_Google Translate node_](https://docs.n8n.io/nodes/n8n-nodes-base.googleTranslate/?ref=blog.n8n.io#example-usage) or [_LingvaNex node_](https://docs.n8n.io/nodes/n8n-nodes-base.lingvaNex/?ref=blog.n8n.io) (like in this [poetry workflow](https://blog.n8n.io/world-poetry-day-workflow/)). Moreover, you can analyze the sentiment of the message with the [_Google Cloud Natural Language node_](https://docs.n8n.io/nodes/n8n-nodes-base.googleTranslate/?ref=blog.n8n.io#example-usage) or __[_AWS Comprehend node_](https://docs.n8n.io/nodes/n8n-nodes-base.awsComprehend/?ref=blog.n8n.io).\n\n## **What’s next?**\n\nIn this tutorial, you learned to use the _HTTP Request_ _node_ to extract information from the web, create a cloud server, and convert speech to text. Since most of the internet functions on HTTP requests, you can use n8n to integrate any platform that supports a RESTful API and automate cross-platform tasks.\n\nMuch like people, the technology works better as a collective. Now that you know how to use the HTTP Request node, the possibilities for automation are endless.\n\nIn case you run into issues following the tutorial, feel free to reach out to me on[ LinkedIn](https://www.linkedin.com/in/amudhan-manivasagam-4aba86167/?ref=blog.n8n.io) or ask for help on our[ forum](https://community.n8n.io/?ref=blog.n8n.io) 💙\n\n _Start automating!_\n\n## Subscribe to n8n newsletter\n\nGet the best, coolest, and latest in automation and low-code delivered to your inbox each week. \n\nSomething went wrong. Please try again later.\n\nSubscribed!\n\nSubscribe\n\n[](https://twitter.com/intent/tweet?text=How%20to%20use%20the%20HTTP%20Request%20node&url=https://blog.n8n.io/how-to-use-the-http-request-node-the-swiss-army-knife-for-workflow-automation/) [](https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/how-to-use-the-http-request-node-the-swiss-army-knife-for-workflow-automation/)\n",
  "crawled_at": "2025-05-28T10:54:42.424032"
}