{
  "url": "https://blog.n8n.io/api-integration/",
  "title": "Definitive guide to API integration for engineers",
  "excerpt": "Our guide covers the fundamentals of API integration and provides essential tips and tricks to help engineers get up to speed quickly!",
  "thumbnail": "https://blog.n8n.io/content/images/size/w1200/2023/02/api0--1-.jpg",
  "tags": [
    "Guide"
  ],
  "html": "<p>Engineers are often faced with the challenge of integrating two or more applications, via their APIs, to let those systems exchange data.</p><p>As APIs become increasingly complex and more widely used, it is essential for engineers to have an understanding of how to integrate them properly.</p><p>This guide will provide an overview of what API integration is and how it works. We'll also discuss the <a href=\"https://blog.n8n.io/what-are-apis-how-to-use-them-with-no-code/\">different types of APIs</a> that you can use to build your own applications. Finally, we'll look at some tips on how to get started with API integration <a href=\"https://n8n.io/engineering-resources/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">for engineers using the n8n automation tool.</a></p><!--kg-card-begin: markdown--><h2 id=\"table-of-contents\">Table of contents</h2>\n<ol>\n<li><a href=\"#what-is-api-integration\">What is API Integration?</a>\n<ul>\n<li><a href=\"#what-is-an-api\">What is an API?</a></li>\n<li><a href=\"#how-does-api-work\">How does API work?</a></li>\n</ul>\n</li>\n<li><a href=\"#how-many-types-of-api-are-there\">How many types of API are there?</a>\n<ul>\n<li><a href=\"#web-apis\">Web APIs</a></li>\n<li><a href=\"#rest-apis-and-how-they-work\">REST APIs and how they work</a></li>\n</ul>\n</li>\n<li><a href=\"#how-to-build-an-api-integration\">How to build an API integration?</a>\n<ul>\n<li><a href=\"#creating-custom-api-integrations-with-written-code\">Creating custom API integrations with written code</a></li>\n<li><a href=\"#using-api-integration-platforms\">Using API integration platforms</a></li>\n</ul>\n</li>\n<li><a href=\"#api-integration-with-n8n\">API integration with n8n</a></li>\n<li><a href=\"#wrap-up\">Wrap up</a></li>\n</ol>\n<!--kg-card-end: markdown--><h2 id=\"what-is-api-integration\">What is API Integration?</h2><p>To understand API integration, letâ€™s start from the top and first of all answer an obvious question.</p><h3 id=\"what-is-an-api\">What is an API?</h3><p>An API sits between two systems allowing them to exchange data seamlessly whilst abstracting the low-level details of the interacting systems from each other.</p><p>Following our definition of APIs, itâ€™s easy to think that an API is a standalone system that is separate from the two systems, but no, itâ€™s not. APIs usually come built into the systems that expose them. Not clear?</p><p><em><strong>Okay, for example, letâ€™s take Twitter APIs.</strong></em></p><p>When we talk about Twitterâ€™s APIs we are talking about the different interfaces that Twitter exposes, through which other applications can send data to or receive data from Twitter.</p><p>So, when we talk about Twitterâ€™s API, we are not referring to an entirely separate system that sits between Twitter and other applications needing to communicate with it. Instead, we are referring to a component of Twitter that provides some service to other applications. â€˜Serviceâ€™ here is any task that Twitter performs which is of utility to another application or user. For example, an application might want to access Twitterâ€™s trending tweets from its API.</p><p>Stretch the above example to other software systems and you have your definition of an API â€“ the set of functions that allow an application to interact with other external systems. The interaction here implies sending or receiving data as well as requesting the external system to execute some task.</p><h3 id=\"how-does-api-work\">How does API work?</h3><p>Recall that APIs essentially allow two systems to communicate â€“ the communication between these two systems each having its API usually happens in the following order:</p><ol><li>Youâ€™d have a system, system A, that connects to the API of another system, system B.</li><li>System A makes a request to the API of system B.</li><li>The API of system B passes the request to some business logic in the system that then processes the request.</li><li>Finally, the API of system B then returns the result of that processing to system A.</li></ol><p>In the API parlance, the system making the request is called <strong>the client,</strong> the system serving the request is called <strong>the server, </strong>and the result returned to the client is called a <strong>response.</strong></p><h2 id=\"how-many-types-of-api-are-there\">How many types of API are there?</h2><p>The different categories we put APIs into would depend on the intent. For example, if the intent is to categorize these APIs based on who the API is intended for, then we can tag an API as either being <strong>public(available to everyone), private, partner, etc.</strong></p><p>However, if we are categorizing these APIs based on their architectural style and protocol then we can put APIs into two broad categories: <strong>web APIs and non-web APIs.</strong></p><p>Web APIs require some sort of network, for example, the internet to be interacted with. Most times when we talk about APIs, we are referring to web APIs â€“ they are the most common. Non-web APIs on other hand do not require the internet â€“ think browser APIs.</p><p>In this piece, we are particularly interested in web APIs, so letâ€™s explore the concept further.</p><h3 id=\"web-apis\">Web APIs</h3><p>Recall we mentioned that an API is the component of an application through which that application talks or provides some service to other applications. An API is considered a web API if it talks to or provides service to other applications over the internet.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2023/02/api-chart-1-8.png\" class=\"kg-image lightense-target\" alt=\"How web APIs work â€“ n8n\" loading=\"lazy\" width=\"1920\" height=\"1080\" srcset=\"https://blog.n8n.io/content/images/size/w600/2023/02/api-chart-1-8.png 600w, https://blog.n8n.io/content/images/size/w1000/2023/02/api-chart-1-8.png 1000w, https://blog.n8n.io/content/images/size/w1600/2023/02/api-chart-1-8.png 1600w, https://blog.n8n.io/content/images/2023/02/api-chart-1-8.png 1920w\" sizes=\"(min-width: 720px) 720px\"><figcaption><em>How web APIs work â€“ n8n</em></figcaption></figure><div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-emoji\">ðŸ’¡</div><div class=\"kg-callout-text\">There are different types of web APIs: REST API, SOAP API, GraphQL API, gRPC API etc. Here we will only be looking at REST APIs, but weâ€™ve written an article that gives an overview of <a href=\"https://blog.n8n.io/what-are-apis-how-to-use-them-with-no-code/\">the different types of web APIs</a>.</div></div><h3 id=\"rest-apis-and-how-they-work\">REST APIs and how they work</h3><p>REST stands for Representational State Transfer. It is an architectural style that defines the set of guidelines, formerly called constraints, for designing an API. Essentially, APIs that are designed within the <a href=\"https://medium.com/extend/what-is-rest-a-simple-explanation-for-beginners-part-2-rest-constraints-129a4b69a582?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">bounds of these constraints</a> are considered RESTFUL. </p><p>At the core of the REST architecture are <strong>clients, servers, </strong>and <strong>resources. </strong>Clients and servers had already been explained in one of the previous sections but what is a resource? </p><p>A resource is any object that the API provides some information about. For example, in Twitterâ€™s API, the user is a resource, and a tweet is also a resource. </p><p>Essentially, in the REST architecture, clients call the API and the server that owns the API sends to the client a representation of the state of the requested resource.</p><p><em><strong>Letâ€™s take an example.</strong></em></p><p>When a client calls Twitterâ€™s API to fetch a specific user (the resource), the API will return the state of that user, including their name, their tweets, how many followers they have, and more.</p><p>Even though the example above showed an instance where the client only needs to retrieve some information about a resource(the user), the client could actually do more than just retrieve information about a resource.</p><p>What a server (in this case Twitter) does when a client calls one of its APIs would depend on two things provided by the client in its request:</p><ol><li>A unique identifier for the resource the client is interested in. This unique identifier is formally called the Uniform Resource Locator(URL) - the URL points to the location of a resource on a given server. </li></ol><p>In the REST parlance, youâ€™d often see the URL of a resource referred to as an â€ƒ<strong>endpoint. </strong> For example, the endpoint that returns information about a user with the username, nyior, could look like something like this: <a href=\"http://www.twitter.com/nyior?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">www.twitter.com/nyior</a></p><p>â€ƒ2. The operation you want the server to perform on that resource, in the form of â€ƒan <strong>HTTP method</strong>, or <strong>verb.</strong></p><p>GET - tells the server to retrieve a resource and return it to the client</p><p>POST - tells the server to create a resource on the server</p><p>PUT - tells the server to update the specified resource</p><p>DELETE - tells the server to delete the specified resource from the server</p><p>There are other http methods but these are the common ones.<br></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2023/02/api-chart-2-8.png\" class=\"kg-image lightense-target\" alt=\"Calling a REST API â€“ n8n\" loading=\"lazy\" width=\"1920\" height=\"1080\" srcset=\"https://blog.n8n.io/content/images/size/w600/2023/02/api-chart-2-8.png 600w, https://blog.n8n.io/content/images/size/w1000/2023/02/api-chart-2-8.png 1000w, https://blog.n8n.io/content/images/size/w1600/2023/02/api-chart-2-8.png 1600w, https://blog.n8n.io/content/images/2023/02/api-chart-2-8.png 1920w\" sizes=\"(min-width: 720px) 720px\"><figcaption><em>Calling a REST API â€“ n8n</em></figcaption></figure><p>Thus, as seen in the image above, the fundamental requirement for calling an API is that the request from the client to the server must specify an endpoint/URL(that signifies the resource of interest) and the HTTP verb that tells the server what action to perform.</p><p>For example, an API call with curl &nbsp;to Twitterâ€™s endpoint for grabbing a user would look like this:</p><p>curl -u &lt;API key&gt;:X -H \"Content-type: application/json\" -X GET \"<a href=\"https://www.twitter/api/nyior?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">https://www.twitter/api/nyior</a>\"</p><p>In addition to the usual endpoint and HTTP verb, a typical REST API request from a client would also carry some extra metadata in the headers. In the case of a POST request where some resource is created, the request must also carry the new data to be created - the payload.</p><h2 id=\"how-to-build-an-api-integration\">How to build an API integration?</h2><p>There are two ways to build an API integration:</p><ol><li>Creating custom integrations with written code</li><li>Using API integration platforms</li></ol><h3 id=\"creating-custom-api-integrations-with-written-code\">Creating custom API integrations with written code</h3><p>As its name implies, this requires manually writing code that stitches two or more applications via their APIs to allow them to communicate. </p><p>While integrating applications this way works, it is fraught with a myriad of issues.</p><p>First, it is generally time-consuming â€“ &nbsp;developers would spend time implementing this custom code and maintaining the code over time. Secondly, this approach is not easily scalable â€“ it is easy to do when connecting letâ€™s say, just two applications, but things quickly get complex when connecting there is the need to set up a more complex integration that spans across multiple applications.</p><p>In the beginning, this was how APIs were integrated, but recognizing the inefficiency of this approach, <strong>API integration platforms </strong>were created.</p><p>Letâ€™s quickly look at implementing API integrations using these platforms!</p><h3 id=\"using-api-integration-platforms\">Using API integration platforms</h3><p>Generally speaking, API integration platforms exist to eliminate the need to write lots of code to tie applications together via their APIs. In other words, these platforms allow the setting up of an API integration via a graphical user interface with very little or no code at all.</p><p>Youâ€™d find two classes of API integration platforms:</p><ul><li><strong>Lightweight API integration tools for small and medium businesses (SMB): </strong>These are tools with graphical user interfaces, which can be easily operated by non-technical individuals. The tools in this category are designed to often meet the needs of small and mid-sized businesses. As a result, they may not be suitable for advanced workflows and more complex integrations. Examples are Zapier, IFTTT.<br></li><li><strong>Advanced &nbsp;API integration tools for complex workflows: </strong>The tools in this category usually have a more comprehensive set of features, but they often require programming skills. This can be problematic for non-technical persons whereas being a flexible solution for technical people who want to build customizable integrations. An example is <a href=\"https://n8n.io/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">n8n</a>.</li></ul><h2 id=\"api-integration-with-n8n\">API integration with n8n</h2><p>To begin, letâ€™s quickly look at how n8n works in the context of API integration.</p><p>n8n is a workflow automation tool. Think of a <a href=\"https://docs.n8n.io/workflows/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">workflow</a> as some major process you would want to automate. At the core of every n8n workflow are <a href=\"https://docs.n8n.io/workflows/components/nodes/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">nodes</a>. Think of a node as a sub-task or step in the larger process.</p><p>For example, think of a scenario where you need to set up a <a href=\"https://n8n.io/workflows/1822-two-way-sync-pipedrive-and-mysql/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">two-way data sync between Pipedrive and MySQL</a>.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2023/02/Screenshot-2023-02-28-at-11.28.24.png\" class=\"kg-image lightense-target\" alt=\"Two-way data sync between Pipedrive and MySQL in n8n\" loading=\"lazy\" width=\"1187\" height=\"609\" srcset=\"https://blog.n8n.io/content/images/size/w600/2023/02/Screenshot-2023-02-28-at-11.28.24.png 600w, https://blog.n8n.io/content/images/size/w1000/2023/02/Screenshot-2023-02-28-at-11.28.24.png 1000w, https://blog.n8n.io/content/images/2023/02/Screenshot-2023-02-28-at-11.28.24.png 1187w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Two-way data sync between Pipedrive and MySQL in n8n</figcaption></figure><p>If as we have mentioned, each sub-process in a workflow is represented by an n8n node, then we are going to have several nodes linked to each other in our Pipedrive and MySQL workflow. For example, we will have the MySQL and Pipedrive nodes in our workflow amongst others.</p><p>From a more technical standpoint, these nodes serve as an entry point for retrieving data, a function to process data, or an exit for sending data. The data process performed by nodes can include filtering, recomposing, and changing data.</p><p>This begs the question, how do these nodes retrieve data?</p><p>Well, the <a href=\"https://n8n.io/integrations/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">nodes (integrations)</a> that you see use APIs provided by different services to allow you to interact with these services within your workflows.</p><p>Thus, in our case, our workflow will interface with the APIs of Pipedrive and MySQL via the <a href=\"https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.pipedrive/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Pipedrive node</a> and the <a href=\"https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.mysql/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">MySQL node</a> respectively. Keep in mind that to work with this workflow you need to configure the <a href=\"https://docs.n8n.io/integrations/builtin/credentials/pipedrive/?_gl=1*1jbdfj8*_ga*MTY5Mjg5MzY0OS4xNjczNjAzMDM0*_ga_0SC4FF2FH9*MTY3NTg0NzY4My41LjEuMTY3NTg0NzczMS4wLjAuMA..&amp;ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">credentials for the Pipedrive node</a> and the <a href=\"https://docs.n8n.io/integrations/builtin/credentials/mysql/?_gl=1*1u6t5c4*_ga*MTY5Mjg5MzY0OS4xNjczNjAzMDM0*_ga_0SC4FF2FH9*MTY3NTg0NzY4My41LjEuMTY3NTg0NzY5MC4wLjAuMA..&amp;ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">credentials of the MySQL node</a>.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2023/02/Screenshot-2023-02-28-at-11.25.54.png\" class=\"kg-image lightense-target\" alt=\"Pipedrive credentials for n8n\" loading=\"lazy\" width=\"621\" height=\"317\" srcset=\"https://blog.n8n.io/content/images/size/w600/2023/02/Screenshot-2023-02-28-at-11.25.54.png 600w, https://blog.n8n.io/content/images/2023/02/Screenshot-2023-02-28-at-11.25.54.png 621w\"><figcaption>Pipedrive credentials for n8n</figcaption></figure><p>With this Pipedrive to MySQL integration you can keep data in sync â€“ meaning, when you update shared data in one of the platforms, it automatically gets updated on the other platforms. It demonstrates an obvious benefit of API integration with n8n.</p><p>This bidirectional data sync powered by API integration also helps to preserve data integrity - this is true because data has to be updated in only one location.</p><div class=\"kg-card kg-button-card kg-align-center\"><a href=\"https://n8n.io/workflows/1822-two-way-sync-pipedrive-and-mysql/?ref=blog.n8n.io\" class=\"kg-btn kg-btn-accent\" target=\"_blank\" rel=\"noopener\">Use this workflow for free</a></div><h2 id=\"wrap-up\">Wrap up</h2><p>API integration is an essential part of modern software development. By integrating APIs into your software, you can quickly connect to other applications and services, enabling tasks automation, data access from third-party sources, and creating a more efficient workflow.</p><p>In this article, you've recapped what API-based integration means, what API types are available, and how to set up API integration using the n8n workflow automation tool.</p><h2 id=\"what%E2%80%99s-next\">Whatâ€™s next?</h2><p>In the example of API integration with n8n, we focused on the Pipedrive and MySQL workflow, but there is a lot more you can build using <a href=\"https://n8n.io/integrations/pipedrive/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Pipedrive API integration</a> or <a href=\"https://n8n.io/integrations/mysql/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">MySQL API integration</a>! For example, you can implement a <a href=\"https://n8n.io/integrations/paypal/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">PayPal integration</a> or a<a href=\"https://n8n.io/integrations/quickbooks-online/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"> QuickBooks integration</a>.</p><p>Ready to turn your routine tasks into automated workflows?</p><p><a href=\"https://n8n.io/cloud/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Sign up for the n8n cloud account</a> to easily get started and start automating processes with n8n!</p><p>The platform also offers <a href=\"https://n8n.io/integrations/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">hundreds of pre-built integrations</a> and <a href=\"https://n8n.io/workflows?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">hundreds of automation templates</a>, allowing your team to design the custom workflows you need.<br></p>\n\t\t<div class=\"newsletter-banner\">\n\t    <div class=\"newsletter-banner-content\">\n\t      <div class=\"section-header\">\n\t        <h2>Subscribe to <span>n8n newsletter</span></h2>\n\t        <div class=\"section-subheader--bottom\">\n\t          Get the best, coolest, and latest in automation and low-code delivered to your inbox each week.\n\t        </div>\n\t      </div>\n\t      <div class=\"newsletter-banner-form\">\n\t        <form autocomplete=\"off\" class=\"contact-form\" onsubmit=\"subscribeNewsletter(event)\">\n\t        \t<div id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB\" data-callback=\"submitSubscription\" data-size=\"invisible\"><div class=\"grecaptcha-badge\" data-style=\"bottomright\" style=\"width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;\"><div class=\"grecaptcha-logo\"><iframe title=\"reCAPTCHA\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-83gfsr327bks\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB&amp;co=aHR0cHM6Ly9ibG9nLm44bi5pbzo0NDM.&amp;hl=en&amp;v=jt8Oh2-Ue1u7nEbJQUIdocyd&amp;size=invisible&amp;cb=11r6bpoldkr6\"></iframe></div><div class=\"grecaptcha-error\"></div><textarea id=\"g-recaptcha-response\" name=\"g-recaptcha-response\" class=\"g-recaptcha-response\" style=\"width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;\"></textarea></div><iframe style=\"display: none;\"></iframe></div>\n\t          <div class=\"input-wrapper\">\n\t            <input placeholder=\"Email\" name=\"email\" type=\"email\" required=\"required\" class=\"\">\n\t            <div class=\"messages\">\n\t              <div class=\"message message--error\">Something went wrong. Please try again later.</div>\n\t              <div class=\"message message--success\">Subscribed!</div>\n\t            </div>\n\t          </div>\n\t          <button type=\"submit\" class=\"submit-btn\">Subscribe</button>\n\t        </form>\n\t      </div>\n\t    </div>\n    </div>\n\t\t<div class=\"post-share-section\">\n\t<div class=\"post-share-wrap\">\n\t\t<a href=\"https://twitter.com/intent/tweet?text=Definitive%20guide%20to%20API%20integration%20for%20engineers&amp;url=https://blog.n8n.io/api-integration/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\"></path></svg></a>\n\t\t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/api-integration/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z\"></path></svg></a>\n\t\t<!-- <a href=\"javascript:\" class=\"post-share-link\" id=\"copy\" data-clipboard-target=\"#copy-link\" aria-label=\"Copy link icon\"><svg role=\"img\" viewBox=\"0 0 33 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M27.3999996,13.4004128 L21.7999996,13.4004128 L21.7999996,19 L18.9999996,19 L18.9999996,13.4004128 L13.3999996,13.4004128 L13.3999996,10.6006192 L18.9999996,10.6006192 L18.9999996,5 L21.7999996,5 L21.7999996,10.6006192 L27.3999996,10.6006192 L27.3999996,13.4004128 Z M12,20.87 C7.101,20.87 3.13,16.898 3.13,12 C3.13,7.102 7.101,3.13 12,3.13 C12.091,3.13 12.181,3.139 12.272,3.142 C9.866,5.336 8.347,8.487 8.347,12 C8.347,15.512 9.866,18.662 12.271,20.857 C12.18,20.859 12.091,20.87 12,20.87 Z M20.347,0 C18.882,0 17.484,0.276 16.186,0.756 C14.882,0.271 13.473,0 12,0 C5.372,0 0,5.373 0,12 C0,18.628 5.372,24 12,24 C13.471,24 14.878,23.726 16.181,23.242 C17.481,23.724 18.88,24 20.347,24 C26.975,24 32.347,18.628 32.347,12 C32.347,5.373 26.975,0 20.347,0 Z\"/></svg></a>\n\t\t<small class=\"share-link-info\">The link has been copied!</small> -->\n\t</div>\n\t<input type=\"text\" value=\"https://blog.n8n.io/api-integration/\" id=\"copy-link\" aria-label=\"Copy link input\">\n</div>",
  "readme": "Engineers are often faced with the challenge of integrating two or more applications, via their APIs, to let those systems exchange data.\n\nAs APIs become increasingly complex and more widely used, it is essential for engineers to have an understanding of how to integrate them properly.\n\nThis guide will provide an overview of what API integration is and how it works. We'll also discuss the [different types of APIs](https://blog.n8n.io/what-are-apis-how-to-use-them-with-no-code/) that you can use to build your own applications. Finally, we'll look at some tips on how to get started with API integration [for engineers using the n8n automation tool.](https://n8n.io/engineering-resources/?ref=blog.n8n.io)\n\n## Table of contents\n\n  1. What is API Integration?\n     * What is an API?\n     * How does API work?\n  2. How many types of API are there?\n     * Web APIs\n     * REST APIs and how they work\n  3. How to build an API integration?\n     * Creating custom API integrations with written code\n     * Using API integration platforms\n  4. API integration with n8n\n  5. Wrap up\n\n\n\n## What is API Integration?\n\nTo understand API integration, letâ€™s start from the top and first of all answer an obvious question.\n\n### What is an API?\n\nAn API sits between two systems allowing them to exchange data seamlessly whilst abstracting the low-level details of the interacting systems from each other.\n\nFollowing our definition of APIs, itâ€™s easy to think that an API is a standalone system that is separate from the two systems, but no, itâ€™s not. APIs usually come built into the systems that expose them. Not clear?\n\n_**Okay, for example, letâ€™s take Twitter APIs.**_\n\nWhen we talk about Twitterâ€™s APIs we are talking about the different interfaces that Twitter exposes, through which other applications can send data to or receive data from Twitter.\n\nSo, when we talk about Twitterâ€™s API, we are not referring to an entirely separate system that sits between Twitter and other applications needing to communicate with it. Instead, we are referring to a component of Twitter that provides some service to other applications. â€˜Serviceâ€™ here is any task that Twitter performs which is of utility to another application or user. For example, an application might want to access Twitterâ€™s trending tweets from its API.\n\nStretch the above example to other software systems and you have your definition of an API â€“ the set of functions that allow an application to interact with other external systems. The interaction here implies sending or receiving data as well as requesting the external system to execute some task.\n\n### How does API work?\n\nRecall that APIs essentially allow two systems to communicate â€“ the communication between these two systems each having its API usually happens in the following order:\n\n  1. Youâ€™d have a system, system A, that connects to the API of another system, system B.\n  2. System A makes a request to the API of system B.\n  3. The API of system B passes the request to some business logic in the system that then processes the request.\n  4. Finally, the API of system B then returns the result of that processing to system A.\n\n\n\nIn the API parlance, the system making the request is called **the client,** the system serving the request is called **the server,** and the result returned to the client is called a **response.**\n\n## How many types of API are there?\n\nThe different categories we put APIs into would depend on the intent. For example, if the intent is to categorize these APIs based on who the API is intended for, then we can tag an API as either being **public(available to everyone), private, partner, etc.**\n\nHowever, if we are categorizing these APIs based on their architectural style and protocol then we can put APIs into two broad categories: **web APIs and non-web APIs.**\n\nWeb APIs require some sort of network, for example, the internet to be interacted with. Most times when we talk about APIs, we are referring to web APIs â€“ they are the most common. Non-web APIs on other hand do not require the internet â€“ think browser APIs.\n\nIn this piece, we are particularly interested in web APIs, so letâ€™s explore the concept further.\n\n### Web APIs\n\nRecall we mentioned that an API is the component of an application through which that application talks or provides some service to other applications. An API is considered a web API if it talks to or provides service to other applications over the internet.\n\n![How web APIs work â€“ n8n](https://blog.n8n.io/content/images/2023/02/api-chart-1-8.png)_How web APIs work â€“ n8n_\n\nðŸ’¡\n\nThere are different types of web APIs: REST API, SOAP API, GraphQL API, gRPC API etc. Here we will only be looking at REST APIs, but weâ€™ve written an article that gives an overview of [the different types of web APIs](https://blog.n8n.io/what-are-apis-how-to-use-them-with-no-code/).\n\n### REST APIs and how they work\n\nREST stands for Representational State Transfer. It is an architectural style that defines the set of guidelines, formerly called constraints, for designing an API. Essentially, APIs that are designed within the [bounds of these constraints](https://medium.com/extend/what-is-rest-a-simple-explanation-for-beginners-part-2-rest-constraints-129a4b69a582?ref=blog.n8n.io) are considered RESTFUL. \n\nAt the core of the REST architecture are **clients, servers,** and **resources.** Clients and servers had already been explained in one of the previous sections but what is a resource? \n\nA resource is any object that the API provides some information about. For example, in Twitterâ€™s API, the user is a resource, and a tweet is also a resource. \n\nEssentially, in the REST architecture, clients call the API and the server that owns the API sends to the client a representation of the state of the requested resource.\n\n_**Letâ€™s take an example.**_\n\nWhen a client calls Twitterâ€™s API to fetch a specific user (the resource), the API will return the state of that user, including their name, their tweets, how many followers they have, and more.\n\nEven though the example above showed an instance where the client only needs to retrieve some information about a resource(the user), the client could actually do more than just retrieve information about a resource.\n\nWhat a server (in this case Twitter) does when a client calls one of its APIs would depend on two things provided by the client in its request:\n\n  1. A unique identifier for the resource the client is interested in. This unique identifier is formally called the Uniform Resource Locator(URL) - the URL points to the location of a resource on a given server. \n\n\n\nIn the REST parlance, youâ€™d often see the URL of a resource referred to as an **endpoint.** For example, the endpoint that returns information about a user with the username, nyior, could look like something like this: [www.twitter.com/nyior](http://www.twitter.com/nyior?ref=blog.n8n.io)\n\n2\\. The operation you want the server to perform on that resource, in the form of an **HTTP method** , or **verb.**\n\nGET - tells the server to retrieve a resource and return it to the client\n\nPOST - tells the server to create a resource on the server\n\nPUT - tells the server to update the specified resource\n\nDELETE - tells the server to delete the specified resource from the server\n\nThere are other http methods but these are the common ones.  \n\n\n![Calling a REST API â€“ n8n](https://blog.n8n.io/content/images/2023/02/api-chart-2-8.png)_Calling a REST API â€“ n8n_\n\nThus, as seen in the image above, the fundamental requirement for calling an API is that the request from the client to the server must specify an endpoint/URL(that signifies the resource of interest) and the HTTP verb that tells the server what action to perform.\n\nFor example, an API call with curl  to Twitterâ€™s endpoint for grabbing a user would look like this:\n\ncurl -u <API key>:X -H \"Content-type: application/json\" -X GET \"[https://www.twitter/api/nyior](https://www.twitter/api/nyior?ref=blog.n8n.io)\"\n\nIn addition to the usual endpoint and HTTP verb, a typical REST API request from a client would also carry some extra metadata in the headers. In the case of a POST request where some resource is created, the request must also carry the new data to be created - the payload.\n\n## How to build an API integration?\n\nThere are two ways to build an API integration:\n\n  1. Creating custom integrations with written code\n  2. Using API integration platforms\n\n\n\n### Creating custom API integrations with written code\n\nAs its name implies, this requires manually writing code that stitches two or more applications via their APIs to allow them to communicate. \n\nWhile integrating applications this way works, it is fraught with a myriad of issues.\n\nFirst, it is generally time-consuming â€“  developers would spend time implementing this custom code and maintaining the code over time. Secondly, this approach is not easily scalable â€“ it is easy to do when connecting letâ€™s say, just two applications, but things quickly get complex when connecting there is the need to set up a more complex integration that spans across multiple applications.\n\nIn the beginning, this was how APIs were integrated, but recognizing the inefficiency of this approach, **API integration platforms** were created.\n\nLetâ€™s quickly look at implementing API integrations using these platforms!\n\n### Using API integration platforms\n\nGenerally speaking, API integration platforms exist to eliminate the need to write lots of code to tie applications together via their APIs. In other words, these platforms allow the setting up of an API integration via a graphical user interface with very little or no code at all.\n\nYouâ€™d find two classes of API integration platforms:\n\n  * **Lightweight API integration tools for small and medium businesses (SMB):** These are tools with graphical user interfaces, which can be easily operated by non-technical individuals. The tools in this category are designed to often meet the needs of small and mid-sized businesses. As a result, they may not be suitable for advanced workflows and more complex integrations. Examples are Zapier, IFTTT.  \n\n  * **Advanced  API integration tools for complex workflows: **The tools in this category usually have a more comprehensive set of features, but they often require programming skills. This can be problematic for non-technical persons whereas being a flexible solution for technical people who want to build customizable integrations. An example is [n8n](https://n8n.io/?ref=blog.n8n.io).\n\n\n\n## API integration with n8n\n\nTo begin, letâ€™s quickly look at how n8n works in the context of API integration.\n\nn8n is a workflow automation tool. Think of a [workflow](https://docs.n8n.io/workflows/?ref=blog.n8n.io) as some major process you would want to automate. At the core of every n8n workflow are [nodes](https://docs.n8n.io/workflows/components/nodes/?ref=blog.n8n.io). Think of a node as a sub-task or step in the larger process.\n\nFor example, think of a scenario where you need to set up a [two-way data sync between Pipedrive and MySQL](https://n8n.io/workflows/1822-two-way-sync-pipedrive-and-mysql/?ref=blog.n8n.io).\n\n![Two-way data sync between Pipedrive and MySQL in n8n](https://blog.n8n.io/content/images/2023/02/Screenshot-2023-02-28-at-11.28.24.png)Two-way data sync between Pipedrive and MySQL in n8n\n\nIf as we have mentioned, each sub-process in a workflow is represented by an n8n node, then we are going to have several nodes linked to each other in our Pipedrive and MySQL workflow. For example, we will have the MySQL and Pipedrive nodes in our workflow amongst others.\n\nFrom a more technical standpoint, these nodes serve as an entry point for retrieving data, a function to process data, or an exit for sending data. The data process performed by nodes can include filtering, recomposing, and changing data.\n\nThis begs the question, how do these nodes retrieve data?\n\nWell, the [nodes (integrations)](https://n8n.io/integrations/?ref=blog.n8n.io) that you see use APIs provided by different services to allow you to interact with these services within your workflows.\n\nThus, in our case, our workflow will interface with the APIs of Pipedrive and MySQL via the [Pipedrive node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.pipedrive/?ref=blog.n8n.io) and the [MySQL node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.mysql/?ref=blog.n8n.io) respectively. Keep in mind that to work with this workflow you need to configure the [credentials for the Pipedrive node](https://docs.n8n.io/integrations/builtin/credentials/pipedrive/?_gl=1*1jbdfj8*_ga*MTY5Mjg5MzY0OS4xNjczNjAzMDM0*_ga_0SC4FF2FH9*MTY3NTg0NzY4My41LjEuMTY3NTg0NzczMS4wLjAuMA..&ref=blog.n8n.io) and the [credentials of the MySQL node](https://docs.n8n.io/integrations/builtin/credentials/mysql/?_gl=1*1u6t5c4*_ga*MTY5Mjg5MzY0OS4xNjczNjAzMDM0*_ga_0SC4FF2FH9*MTY3NTg0NzY4My41LjEuMTY3NTg0NzY5MC4wLjAuMA..&ref=blog.n8n.io).\n\n![Pipedrive credentials for n8n](https://blog.n8n.io/content/images/2023/02/Screenshot-2023-02-28-at-11.25.54.png)Pipedrive credentials for n8n\n\nWith this Pipedrive to MySQL integration you can keep data in sync â€“ meaning, when you update shared data in one of the platforms, it automatically gets updated on the other platforms. It demonstrates an obvious benefit of API integration with n8n.\n\nThis bidirectional data sync powered by API integration also helps to preserve data integrity - this is true because data has to be updated in only one location.\n\n[Use this workflow for free](https://n8n.io/workflows/1822-two-way-sync-pipedrive-and-mysql/?ref=blog.n8n.io)\n\n## Wrap up\n\nAPI integration is an essential part of modern software development. By integrating APIs into your software, you can quickly connect to other applications and services, enabling tasks automation, data access from third-party sources, and creating a more efficient workflow.\n\nIn this article, you've recapped what API-based integration means, what API types are available, and how to set up API integration using the n8n workflow automation tool.\n\n## Whatâ€™s next?\n\nIn the example of API integration with n8n, we focused on the Pipedrive and MySQL workflow, but there is a lot more you can build using [Pipedrive API integration](https://n8n.io/integrations/pipedrive/?ref=blog.n8n.io) or [MySQL API integration](https://n8n.io/integrations/mysql/?ref=blog.n8n.io)! For example, you can implement a [PayPal integration](https://n8n.io/integrations/paypal/?ref=blog.n8n.io) or a[ QuickBooks integration](https://n8n.io/integrations/quickbooks-online/?ref=blog.n8n.io).\n\nReady to turn your routine tasks into automated workflows?\n\n[Sign up for the n8n cloud account](https://n8n.io/cloud/?ref=blog.n8n.io) to easily get started and start automating processes with n8n!\n\nThe platform also offers [hundreds of pre-built integrations](https://n8n.io/integrations/?ref=blog.n8n.io) and [hundreds of automation templates](https://n8n.io/workflows?ref=blog.n8n.io), allowing your team to design the custom workflows you need.  \n\n\n## Subscribe to n8n newsletter\n\nGet the best, coolest, and latest in automation and low-code delivered to your inbox each week. \n\nSomething went wrong. Please try again later.\n\nSubscribed!\n\nSubscribe\n\n[](https://twitter.com/intent/tweet?text=Definitive%20guide%20to%20API%20integration%20for%20engineers&url=https://blog.n8n.io/api-integration/) [](https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/api-integration/)\n",
  "crawled_at": "2025-05-28T10:53:55.151768"
}