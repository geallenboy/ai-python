{
  "url": "https://blog.n8n.io/how-to-automatically-give-kudos-to-contributors-with-github-slack-and-n8n/",
  "title": "How to automatically give kudos to GitHub contributors",
  "excerpt": "Create a workflow that sends Slack notifications about GitHub contributors to celebrate their valuable contributions.",
  "thumbnail": "https://blog.n8n.io/content/images/size/w1200/2021/02/cover.png",
  "tags": [
    "Tutorial"
  ],
  "html": "<p>People are the heart of a community. Celebrating their contributions is a way to show them that we value them and appreciate all their hard work. We can give them a shoutout in our community’s <a href=\"https://slack.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Slack</a> workspace and also in our newsletters. And what could be a better way to appreciate their work by sending them some cool swag! Motivated by this idea, I created a workflow with <a href=\"https://n8n.io/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">n8n</a>, which gives us the contributors’ <a href=\"https://github.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">GitHub</a> information in the Slack workspace.</p><p>We will accomplish this through these four nodes:</p><ol><li><a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.webhook?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Webhook</em> node</a> — Triggers the workflow when the slash command is issued</li><li><a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.graphql?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>GraphQL</em> node</a> — Gets information using GitHub’s <a href=\"https://docs.github.com/en/graphql?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">GraphQL API</a></li><li><a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.function?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Function</em> node</a> — Filters and extracts the contributor’s email address</li><li><a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.slack/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Slack</em> node</a> — Posts the information back in Slack</li></ol><p>When we issue a slash command in the Slack channel, the <em>Webhook</em> node gets triggered, and our workflow starts. The <em>GraphQL</em> node then executes a query to get the contributor’s information. The <em>Function</em> node extracts the email address of the contributor, and the <em>Slack</em> node posts this information in the Slack channel from where the information was requested.</p><h2 id=\"prerequisites\">Prerequisites</h2><p>To get started with the workflow in n8n, you will need:</p><ul><li><a href=\"https://nodejs.org/en/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Node.js</a> or <a href=\"https://www.docker.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Docker</a> installed on your machine to run n8n. You can also sign-up for <a href=\"https://n8n.cloud/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">n8n.cloud</a> to get access to our hosted service (in beta).</li><li>A <a href=\"https://api.slack.com/apps?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Slack app</a> for your workspace</li><li>GitHub <a href=\"https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Personal Access Token</a> for the GraphQL API</li></ul><p>This workflow was created using n8n@105.0.</p><h2 id=\"install-n8n\">Install n8n</h2><blockquote><strong>Note</strong>: If you're using n8n.cloud, you can skip this section.</blockquote><p>In case, you don’t already have n8n installed, you can do so with<a href=\"https://www.npmjs.com/get-npm?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"> npm</a> by issuing the following command:</p><p><code>npm install n8n -g</code></p><p>You can also run n8n using <a href=\"https://github.com/n8n-io/n8n/blob/master/docker/images/n8n/README.md?ref=hackernoon.com#start-n8n-in-docker\" rel=\"noopener\" target=\"_blank\">Docker</a>. Once you have installed n8n, you can start it using the following command:</p><p><code>n8n start — tunnel</code></p><blockquote><strong>Note:</strong> Make sure that you don’t forget to add the -- tunnel parameter.</blockquote><p>n8n has to be reachable from the web as the triggers of external services rely on that to be able to send data to the webhooks. To make that easy, n8n has a special tunnel service that redirects requests from n8n’s servers to your local n8n instance (uses<a href=\"https://github.com/localtunnel/localtunnel?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"> localtunnel</a>).</p><p>Typing “o” in the terminal will open the Editor UI for us.</p><p>Another option is to get a managed instance of n8n with <a href=\"https://n8n.io/cloud?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">n8n cloud</a>: hosting, security, and maintenance by n8n.</p><p>Let’s get started with the workflow. I have also submitted this <a href=\"https://n8n.io/workflows/563?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">workflow</a> on n8n.io, in case you’d like to skim through it. Please note that you will still need to configure credentials for Slack and GitHub.</p><h2 id=\"1-webhook-node\">1. Webhook node</h2><p>n8n has a <em>Webhook</em> trigger node which will get triggered when we issue the <code>/github</code> slash command in a Slack channel.</p><h3 id=\"adding-the-webhook-node\">Adding the Webhook node</h3><p>To add the <em>Webhook</em> node in the workflow, click on the '<strong><em>+</em></strong>' button. Under the <strong><em>Trigger</em></strong> section, select the <em>Webhook</em> node. This creates the <em>Webhook</em> node with the default parameters.</p><p>Leave the default parameters as they are, we will only change the HTTP Method. Select the ‘POST’ option from the <strong><em>HTTP Method</em></strong> dropdown list.</p><p>Here’s a video of me following the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/jxnzqf0ocnM?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating a Webhook node to receive slash commands from Slack</figcaption></figure><h3 id=\"adding-slash-command-to-the-slack-app\">Adding slash command to the Slack app</h3><p>To create a Slack app, go to the <a href=\"https://api.slack.com/apps?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Applications</a> page, click on ‘Create New App’. Enter a name for your app a name and select the workspace where you want to add the app.</p><p>Under the <strong>Add Features and Functionality</strong> section, select <em>Slash Commands</em> and click on <strong>Create New Command</strong>. Enter ‘github’ as the command for the <strong>Command</strong> field. Get the test webhook URL from the <em>Webhook</em> node and paste it in the <strong>Request URL</strong> field. Since we are building the workflow, make sure to use the test webhook URL.</p><p>The data that is sent to the test webhook URL is displayed in the Editor UI. The test webhook stays active for 120 seconds and then gets deactivated. The Production URL is only registered when the workflow has been activated, but the data that is sent is not displayed in the Editor UI.</p><p>To give our app permission to post messages, select 'OAuth &amp; Permissions' under the <strong>Features</strong> section. In <em>Scopes</em>, under the <strong>Bot Token Scopes</strong>, click on <strong>Add an OAuth Scope</strong> and select the ‘chat:write’ scope from the menu. Similarly, add the ‘chat:write.public’ scope.</p><p>Install the app in your workspace. Click on <strong>Execute Workflow<em> </em></strong>button at the bottom of the n8n workflow editor, and issue the <code>/github harshil1712</code> (here ‘harshil1712’ is my GitHub username) command to trigger the <em>Webhook</em> node.</p><p>Here’s a video of me following the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/mTLvtPdtqCI?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating a Slack app with a slash command</figcaption></figure><p>Go back to the n8n workflow editor and check the <em>Webhook</em> node. You’ll see the response from our newly created slash command. Congratulations, your first n8n node is up and running!</p><h2 id=\"2-graphql-node\">2. GraphQL Node</h2><p>n8n has a <em>GraphQL</em> node which can be used to execute GraphQL queries. We will use GitHub’s <a href=\"https://docs.github.com/en/graphql?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">GraphQL API</a> in this node to get the contributor’s information.</p><h3 id=\"creating-a-graphql-node-to-get-contributors-information\">Creating a GraphQL node to get contributors information</h3><p>In the n8n workflow editor, click on '<strong><em>+</em></strong><em>'</em> and select the <em>GraphQL</em> node. We will have to specify the endpoint for the GraphQL API. We will also have to change the Request and Response Formats and add headers.</p><p>Enter the following link in the <strong>Endpoint</strong> field: <a href=\"https://api.github.com/graphql?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">https://api.github.com/graphql</a>. This is the link to GitHub’s GraphQL API. Select JSON from the dropdown menu, for the <strong>Request Format<em> </em></strong>field.</p><p>The GitHub GraphQL API requires two headers for running any queries. The first header we will add is the User-Agent header. Click on <strong>Add Header</strong> in the <strong>Header</strong> section. Enter <code>User-Agent</code> in the <strong>Name</strong> field, and <code>n8n</code> in the <strong>Value</strong> field. Add another header for Authorization. Enter <code>Authorization</code> in the <strong>Name</strong> field. The value for this header will be in the following format:<code>bearer &lt;GitHub-Personal-Access-Token&gt;</code></p><p>Replace <code>&lt;GitHub-Personal-Access-Token&gt;</code> with your GitHub Personal Access Token. The Headers should look like in the following image.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/header-1.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"720\" height=\"634\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/header-1.png 600w, https://blog.n8n.io/content/images/2021/02/header-1.png 720w\"><figcaption>Headers for the GraphQL node</figcaption></figure><blockquote><strong>Note:</strong> While generating the GitHub Personal Access token, make sure to select repo and user under the Select scopes section.</blockquote><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/scopes-1.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"1384\" height=\"1582\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/scopes-1.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/02/scopes-1.png 1000w, https://blog.n8n.io/content/images/2021/02/scopes-1.png 1384w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Selecting repo and user scope for GitHub Access Token</figcaption></figure><p>Copy and paste the following query in the Edit Query editor and click on the <strong>Execute Node</strong> button to execute the node. On successful execution, it returns the name of the contributor whose username you have passed.</p><pre><code class=\"language-graphql\">query { \n    user(login:\"harshil1712\") { \n        name\n    }\n}</code></pre><p>Here’s a video of me following the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/mAVD70bUR18?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating the GraphQL node to get contributors information</figcaption></figure><h3 id=\"getting-more-contributor-s-information-like-company-email-and-location\">Getting more contributor’s information like company, email and location</h3><p>In the query above, we are passing the username statically, which will give us the information about only that contributor, for every slash command we issue. To make the query dynamic, we will fetch the username returned by the <em>Webhook</em> node.</p><p>Connect the <em>Webhook</em> node with the <em>GraphQL</em> node. Open the <strong>Edit Expression</strong> editor for the <strong><em>Query</em></strong> field, and replace the username with <code>{{$json[“body”][“text”]}}</code>. You can also do this by selecting:<code>Current Node &gt; Input Data &gt; JSON &gt; body &gt; text</code></p><p>Here’s a video of me following the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/9Fxn00v7VoY?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Connecting Webhook node with GraphQL node to get username from the Webhook node</figcaption></figure><p>We are now getting the name of the contributor we want. Let’s get more information about them. We will update our query to get additional information like their email address, location, the company they work for, and their profile picture.</p><p>Copy and paste the below query in the <strong>Edit Query</strong> editor.</p><pre><code class=\"language-graphql\">query {\n    user(login:\"{{$json[\"body\"][\"text\"]}}\") {\n        name\n        company\n        location\n        avatarUrl\n        email\n    }\n}</code></pre><p>On executing the workflow, you will get output similar to the following image.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/graphql-output-1.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"872\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/graphql-output-1.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/02/graphql-output-1.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/02/graphql-output-1.png 1600w, https://blog.n8n.io/content/images/size/w2400/2021/02/graphql-output-1.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Output from the GraphQL node</figcaption></figure><h2 id=\"3-function-node\">3. Function Node</h2><p>Some of the contributors on GitHub might have their email addresses private, and so we don’t get this information. But what if we want to get in touch with them, and thank them personally?</p><p>To get their email address, we will query their commits. The commit object contains information about the author like their name and email address. Let’s go ahead and update our GraphQL query so that we get at least 25 of their commits.</p><h3 id=\"update-the-graphql-query\">Update the GraphQL query</h3><p>In the <em>GraphQL</em> node, open the <strong>Edit Expression</strong> editor for the <strong>Query</strong> field. Copy and paste the query below in the editor.</p><pre><code class=\"language-graphql\">query {\n    user(login:\"{{$json[\"body\"][\"text\"]}}\") {\n        name\n        company\n        location\n        avatarUrl\n        email\n        pullRequests(last: 25) {\n            edges {\n                node {\n                    commits(last: 25) {\n                        nodes {\n                            commit {\n                                author {\n                                    email\n                                    name\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}</code></pre><p>Execute the node to see the changes in effect. The output now contains the email addresses and names of the authors who made the commits as well.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/Final-Graphql-Output-1.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"872\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/Final-Graphql-Output-1.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/02/Final-Graphql-Output-1.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/02/Final-Graphql-Output-1.png 1600w, https://blog.n8n.io/content/images/size/w2400/2021/02/Final-Graphql-Output-1.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Output from the updated GraphQL node</figcaption></figure><h3 id=\"using-function-node-to-filter-the-information\">Using Function node to filter the information</h3><p>One can observe from the output that we are getting a lot of repeated values for the email addresses. Also, some email addresses belong to different users. We will write a function to solve this and get the email address of our contributor.</p><p>n8n has a <em>Function</em> node where we can add custom snippets to JavaScript code to transform data from the other nodes or if you want to implement some custom functionality. Click on the '<strong>+</strong>' button and select the <em>Function</em> node. Replace the code in the <em>Function</em> node, with the following code.</p><pre><code class=\"language-js\">let emails = [];\nlet tempEmails = [];\nconst name = $json[\"data\"][\"user\"][\"name\"];\nconst publicEmail = $json[\"data\"][\"user\"][\"email\"];\nconst username = $node[\"Webhook\"].json[\"body\"][\"text\"];\nconst nameRegex = new RegExp(name,\"g\");\n\n// if public email address exists, push it to the tempEmails array\n\nif(publicEmail){\n    tempEmails.push(publicEmail)\n}\n// looping through the pull requests\n\nfor(const edge of $json.data.user.pullRequests.edges){\n\n    // looping through the commits\n\n    for(node of edge.node.commits.nodes){\n        \n        // Checks the name associated with the email address\n        \n        if(nameRegex.test(node.commit.author.name)|| node.commit.author.name == username) {\n            \n            // if name equals to contributors name or username, push the email address in tempEmails\n            tempEmails.push(node.commit.author.email)\n        }\n    }\n}\n\n// Remove duplicates\n\nemails = [...new Set(tempEmails)]\n\n// RegEx Pattern for email address generated by GitHub\n\nlet re = /^\\w+(.)*@users.noreply.github.com/\n\n// Remove the email addresses Generated by GitHub\n\nemails = emails.filter(email =&gt; !re.test(email));\n\nreturn [{json:{emails,}}];</code></pre><p>The above code takes the name and the public email address of the contributor from the <em>GraphQL</em> node. It also gets the username from the <em>Webhook</em> node. The code then verifies if the email address belongs to the contributor, and if it does, it pushes it to a temporary array. It then removes any duplicate values for the email addresses and stores them in the emails array. And lastly, it removes email addresses generated by GitHub and returns the emails array.</p><p>An important thing to keep in mind while using the <em>Function</em> node is that it returns an array. So make sure you’re returning an array, rather than an object.</p><p>Here’s a video of me following the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/kVymFzAErhE?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating the Function node to filter and extract email addresses</figcaption></figure><p>We are now getting the email address of the contributor along with all the other information. Let’s post this in Slack.</p><h2 id=\"4-slack-node\">4. Slack Node</h2><p>In n8n, you can perform a lot of operations with the <em>Slack</em> node. You can create or archive channels, upload or get files from the workspace, add or delete stars from an item, and post or update messages in the Slack channels.</p><p>To add the <em>Slack</em> node in the workflow, click on the '<strong>+</strong>' button, and select Slack. Select “OAuth2” from the <strong>Authentication</strong> dropdown menu. Add your Slack app credentials to the node by selecting \"Create New\" from the dropdown menu in the <strong><em>Credentials</em></strong> section.</p><p>Head back to the Slack App dashboard, and copy the Client ID and Client Secret from the <strong>App Credentials</strong> section. Paste them in the <strong>Create Credentials: “Slack OAuth2 API”<em> </em></strong>editor in the n8n workflow editor. Copy the OAuth Callback URL from the editor. In the Slack App dashboard, select “OAuth and Permissions” and click on <strong>Add New Redirect URL</strong> under the <strong>Redirect URLs</strong> section. Paste the URL and click on <strong>Add</strong>. The last step is to connect the OAuth Credentials. Click on the <strong>OAuth</strong> button to connect the credentials and select “Allow”.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/slack-app-outh.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"1119\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/slack-app-outh.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/02/slack-app-outh.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/02/slack-app-outh.png 1600w, https://blog.n8n.io/content/images/size/w2400/2021/02/slack-app-outh.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Adding Redirect URL to Slack App</figcaption></figure><p>By default, the <em>Slack</em> node has Message as the Resource and Post as the Operation. If the setting is different for you, make sure to change them. To post a message on the Slack channel where the slash command was issued, we will add the channel id to the Channel field, which is returned by the Webhook node.</p><p>Copy and paste <code>{{$node[“Webhook”].json[“body”][“channel_id”]}}</code> in the <strong>Channel</strong> field. Alternatively you can use the Variable Selector to get this information. Open the Editor Expression editor, and under <strong>Variable Selector</strong> select: <code>Nodes &gt; Webhook &gt; Output Data &gt; JSON &gt; body &gt; channel_id</code>.</p><p>Let us now add some styling and formatting to our message. Our message will contain a title, some text and a thumbnail.</p><p>In the <strong>Attachment</strong> section, click on <strong>Add Attachment</strong>, and select <strong>Title</strong> from the Add Attachment Item dropdown menu. Open the Expression editor, and type “GitHub Details for:” in the editor and from the <strong>Variable Selector</strong> select <code>Nodes &gt; Webhook &gt; Output Data &gt; JSON &gt; body &gt; text</code>.</p><p>From the <strong>Add Attachment Item</strong>, select <strong>Text</strong>, to add the Text attachment. Open the Expression editor, and copy and paste the following text:</p><pre><code>*Name:* {{$node[\"GraphQL\"].json[\"data\"][\"user\"][\"name\"]}}\n*Email:* {{$json[\"emails\"].join(', ')}}\n*Company:* {{$node[\"GraphQL\"].json[\"data\"][\"user\"][\"company\"]}}\n*Location:* {{$node[\"GraphQL\"].json[\"data\"][\"user\"][\"location\"]}}</code></pre><p>To display the profile picture of the contributor, create Thumbnail attachment, by selecting the <strong>Thumbnail URL</strong> option from the <strong>Add Attachment Item</strong> menu. Open the Edit Expression editor and from the Variable Selector select <code>Nodes &gt; GraphQL &gt; Output Data &gt; JSON &gt; data &gt; user &gt; avatarURL</code>.</p><p>Here’s a video showing how to create the <em>Slack</em> node, and get information from the Webhook node, the GraphQL node, and the Function node.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/SkW-E9iCNaU?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating a Slack node to post the contributor information to the Slack channel</figcaption></figure><blockquote><strong>Note:</strong> Since the <em>Function</em> node gives an array of email addresses, we will select <strong><em>Values</em></strong> from the menu, while adding the email from the node.</blockquote><p>Execute the node, and your app will post a message to the Slack channel.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/slack-output.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"1133\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/slack-output.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/02/slack-output.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/02/slack-output.png 1600w, https://blog.n8n.io/content/images/size/w2400/2021/02/slack-output.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Output from the Slack node</figcaption></figure><p>The following video shows our workflow in action.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/pyxHqNsOA8M?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Executing the finished workflow</figcaption></figure><p>To use the workflow in production, follow the instructions provided in the <a href=\"https://docs.n8n.io/reference/server-setup.html?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">documentation</a>. Make sure to use the production webhook URL for the slash command.</p><h2 id=\"conclusion\">Conclusion</h2><p>Congratulations! You built a workflow that gives you the information of a contributor. You learned how to get started with n8n and how to add nodes to your workflow. You learned how to use the <em>Webhook</em> node for capturing event triggers, the <em>GraphQL</em> node to query information, the <em>Function</em> node to write custom functions, and the <em>Slack </em>node to post a message on Slack.</p><p>You can use this workflow to gather the information about your contributors, celebrate their successes, and appreciate them for their contributions! Using the GitHub API, you can also get their Twitter username. You can use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.if/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>IF</em></a><em> </em>node to check for that, and use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.twitter/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Twitter</em></a> node to tweet about them. You can even use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.mailgun/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Mailgun</em></a> node to send them a personalized thank you message.</p><p>I’d be excited to check out what you’ve built using n8n! In case you’ve run into an issue while following the tutorial, feel free to reach out to me on <a href=\"https://twitter.com/harshil1712?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Twitter</a> or ask for help on our <a href=\"https://community.n8n.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">forum</a> 🧡</p><p><em>Start automating!</em></p><p><em>The best part is, you can start automating for free with n8n. The easiest way to get started is to sign up for a <a href=\"https://n8n.io/cloud?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a>. Thanks to n8n’s fair-code license, you can also </em><a href=\"https://docs.n8n.io/hosting/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>self-host n8n for free</em></a><em>.</em></p>\n\t\t<div class=\"newsletter-banner\">\n\t    <div class=\"newsletter-banner-content\">\n\t      <div class=\"section-header\">\n\t        <h2>Subscribe to <span>n8n newsletter</span></h2>\n\t        <div class=\"section-subheader--bottom\">\n\t          Get the best, coolest, and latest in automation and low-code delivered to your inbox each week.\n\t        </div>\n\t      </div>\n\t      <div class=\"newsletter-banner-form\">\n\t        <form autocomplete=\"off\" class=\"contact-form\" onsubmit=\"subscribeNewsletter(event)\">\n\t        \t<div id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB\" data-callback=\"submitSubscription\" data-size=\"invisible\"><div class=\"grecaptcha-badge\" data-style=\"bottomright\" style=\"width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;\"><div class=\"grecaptcha-logo\"><iframe title=\"reCAPTCHA\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-9m0v8lw2l2jg\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB&amp;co=aHR0cHM6Ly9ibG9nLm44bi5pbzo0NDM.&amp;hl=en&amp;v=jt8Oh2-Ue1u7nEbJQUIdocyd&amp;size=invisible&amp;cb=5gy4pow7bsh9\"></iframe></div><div class=\"grecaptcha-error\"></div><textarea id=\"g-recaptcha-response\" name=\"g-recaptcha-response\" class=\"g-recaptcha-response\" style=\"width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;\"></textarea></div><iframe style=\"display: none;\"></iframe></div>\n\t          <div class=\"input-wrapper\">\n\t            <input placeholder=\"Email\" name=\"email\" type=\"email\" required=\"required\" class=\"\">\n\t            <div class=\"messages\">\n\t              <div class=\"message message--error\">Something went wrong. Please try again later.</div>\n\t              <div class=\"message message--success\">Subscribed!</div>\n\t            </div>\n\t          </div>\n\t          <button type=\"submit\" class=\"submit-btn\">Subscribe</button>\n\t        </form>\n\t      </div>\n\t    </div>\n    </div>\n\t\t<div class=\"post-share-section\">\n\t<div class=\"post-share-wrap\">\n\t\t<a href=\"https://twitter.com/intent/tweet?text=How%20to%20automatically%20give%20kudos%20to%20GitHub%20contributors&amp;url=https://blog.n8n.io/how-to-automatically-give-kudos-to-contributors-with-github-slack-and-n8n/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\"></path></svg></a>\n\t\t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/how-to-automatically-give-kudos-to-contributors-with-github-slack-and-n8n/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z\"></path></svg></a>\n\t\t<!-- <a href=\"javascript:\" class=\"post-share-link\" id=\"copy\" data-clipboard-target=\"#copy-link\" aria-label=\"Copy link icon\"><svg role=\"img\" viewBox=\"0 0 33 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M27.3999996,13.4004128 L21.7999996,13.4004128 L21.7999996,19 L18.9999996,19 L18.9999996,13.4004128 L13.3999996,13.4004128 L13.3999996,10.6006192 L18.9999996,10.6006192 L18.9999996,5 L21.7999996,5 L21.7999996,10.6006192 L27.3999996,10.6006192 L27.3999996,13.4004128 Z M12,20.87 C7.101,20.87 3.13,16.898 3.13,12 C3.13,7.102 7.101,3.13 12,3.13 C12.091,3.13 12.181,3.139 12.272,3.142 C9.866,5.336 8.347,8.487 8.347,12 C8.347,15.512 9.866,18.662 12.271,20.857 C12.18,20.859 12.091,20.87 12,20.87 Z M20.347,0 C18.882,0 17.484,0.276 16.186,0.756 C14.882,0.271 13.473,0 12,0 C5.372,0 0,5.373 0,12 C0,18.628 5.372,24 12,24 C13.471,24 14.878,23.726 16.181,23.242 C17.481,23.724 18.88,24 20.347,24 C26.975,24 32.347,18.628 32.347,12 C32.347,5.373 26.975,0 20.347,0 Z\"/></svg></a>\n\t\t<small class=\"share-link-info\">The link has been copied!</small> -->\n\t</div>\n\t<input type=\"text\" value=\"https://blog.n8n.io/how-to-automatically-give-kudos-to-contributors-with-github-slack-and-n8n/\" id=\"copy-link\" aria-label=\"Copy link input\">\n</div>",
  "readme": "People are the heart of a community. Celebrating their contributions is a way to show them that we value them and appreciate all their hard work. We can give them a shoutout in our community’s [Slack](https://slack.com/?ref=blog.n8n.io) workspace and also in our newsletters. And what could be a better way to appreciate their work by sending them some cool swag! Motivated by this idea, I created a workflow with [n8n](https://n8n.io/?ref=blog.n8n.io), which gives us the contributors’ [GitHub](https://github.com/?ref=blog.n8n.io) information in the Slack workspace.\n\nWe will accomplish this through these four nodes:\n\n  1. [_Webhook_ node](https://docs.n8n.io/nodes/n8n-nodes-base.webhook?ref=blog.n8n.io) — Triggers the workflow when the slash command is issued\n  2. [ _GraphQL_ node](https://docs.n8n.io/nodes/n8n-nodes-base.graphql?ref=blog.n8n.io) — Gets information using GitHub’s [GraphQL API](https://docs.github.com/en/graphql?ref=blog.n8n.io)\n  3. [ _Function_ node](https://docs.n8n.io/nodes/n8n-nodes-base.function?ref=blog.n8n.io) — Filters and extracts the contributor’s email address\n  4. [ _Slack_ node](https://docs.n8n.io/nodes/n8n-nodes-base.slack/?ref=blog.n8n.io) — Posts the information back in Slack\n\n\n\nWhen we issue a slash command in the Slack channel, the _Webhook_ node gets triggered, and our workflow starts. The _GraphQL_ node then executes a query to get the contributor’s information. The _Function_ node extracts the email address of the contributor, and the _Slack_ node posts this information in the Slack channel from where the information was requested.\n\n## Prerequisites\n\nTo get started with the workflow in n8n, you will need:\n\n  * [Node.js](https://nodejs.org/en/?ref=blog.n8n.io) or [Docker](https://www.docker.com/?ref=blog.n8n.io) installed on your machine to run n8n. You can also sign-up for [n8n.cloud](https://n8n.cloud/?ref=blog.n8n.io) to get access to our hosted service (in beta).\n  * A [Slack app](https://api.slack.com/apps?ref=blog.n8n.io) for your workspace\n  * GitHub [Personal Access Token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token?ref=blog.n8n.io) for the GraphQL API\n\n\n\nThis workflow was created using n8n@105.0.\n\n## Install n8n\n\n> **Note** : If you're using n8n.cloud, you can skip this section.\n\nIn case, you don’t already have n8n installed, you can do so with[ npm](https://www.npmjs.com/get-npm?ref=blog.n8n.io) by issuing the following command:\n\n`npm install n8n -g`\n\nYou can also run n8n using [Docker](https://github.com/n8n-io/n8n/blob/master/docker/images/n8n/README.md?ref=hackernoon.com#start-n8n-in-docker). Once you have installed n8n, you can start it using the following command:\n\n`n8n start — tunnel`\n\n> **Note:** Make sure that you don’t forget to add the -- tunnel parameter.\n\nn8n has to be reachable from the web as the triggers of external services rely on that to be able to send data to the webhooks. To make that easy, n8n has a special tunnel service that redirects requests from n8n’s servers to your local n8n instance (uses[ localtunnel](https://github.com/localtunnel/localtunnel?ref=blog.n8n.io)).\n\nTyping “o” in the terminal will open the Editor UI for us.\n\nAnother option is to get a managed instance of n8n with [n8n cloud](https://n8n.io/cloud?ref=blog.n8n.io): hosting, security, and maintenance by n8n.\n\nLet’s get started with the workflow. I have also submitted this [workflow](https://n8n.io/workflows/563?ref=blog.n8n.io) on n8n.io, in case you’d like to skim through it. Please note that you will still need to configure credentials for Slack and GitHub.\n\n## 1\\. Webhook node\n\nn8n has a _Webhook_ trigger node which will get triggered when we issue the `/github` slash command in a Slack channel.\n\n### Adding the Webhook node\n\nTo add the _Webhook_ node in the workflow, click on the '**_+_** ' button. Under the **_Trigger_** section, select the _Webhook_ node. This creates the _Webhook_ node with the default parameters.\n\nLeave the default parameters as they are, we will only change the HTTP Method. Select the ‘POST’ option from the **_HTTP Method_** dropdown list.\n\nHere’s a video of me following the steps mentioned above.\n\nCreating a Webhook node to receive slash commands from Slack\n\n### Adding slash command to the Slack app\n\nTo create a Slack app, go to the [Applications](https://api.slack.com/apps?ref=blog.n8n.io) page, click on ‘Create New App’. Enter a name for your app a name and select the workspace where you want to add the app.\n\nUnder the **Add Features and Functionality** section, select _Slash Commands_ and click on **Create New Command**. Enter ‘github’ as the command for the **Command** field. Get the test webhook URL from the _Webhook_ node and paste it in the **Request URL** field. Since we are building the workflow, make sure to use the test webhook URL.\n\nThe data that is sent to the test webhook URL is displayed in the Editor UI. The test webhook stays active for 120 seconds and then gets deactivated. The Production URL is only registered when the workflow has been activated, but the data that is sent is not displayed in the Editor UI.\n\nTo give our app permission to post messages, select 'OAuth & Permissions' under the **Features** section. In _Scopes_ , under the **Bot Token Scopes** , click on **Add an OAuth Scope** and select the ‘chat:write’ scope from the menu. Similarly, add the ‘chat:write.public’ scope.\n\nInstall the app in your workspace. Click on **Execute Workflow __** button at the bottom of the n8n workflow editor, and issue the `/github harshil1712` (here ‘harshil1712’ is my GitHub username) command to trigger the _Webhook_ node.\n\nHere’s a video of me following the steps mentioned above.\n\nCreating a Slack app with a slash command\n\nGo back to the n8n workflow editor and check the _Webhook_ node. You’ll see the response from our newly created slash command. Congratulations, your first n8n node is up and running!\n\n## 2\\. GraphQL Node\n\nn8n has a _GraphQL_ node which can be used to execute GraphQL queries. We will use GitHub’s [GraphQL API](https://docs.github.com/en/graphql?ref=blog.n8n.io) in this node to get the contributor’s information.\n\n### Creating a GraphQL node to get contributors information\n\nIn the n8n workflow editor, click on '**_+_**_'_ and select the _GraphQL_ node. We will have to specify the endpoint for the GraphQL API. We will also have to change the Request and Response Formats and add headers.\n\nEnter the following link in the **Endpoint** field: [https://api.github.com/graphql](https://api.github.com/graphql?ref=blog.n8n.io). This is the link to GitHub’s GraphQL API. Select JSON from the dropdown menu, for the **Request Format __** field.\n\nThe GitHub GraphQL API requires two headers for running any queries. The first header we will add is the User-Agent header. Click on **Add Header** in the **Header** section. Enter `User-Agent` in the **Name** field, and `n8n` in the **Value** field. Add another header for Authorization. Enter `Authorization` in the **Name** field. The value for this header will be in the following format:`bearer <GitHub-Personal-Access-Token>`\n\nReplace `<GitHub-Personal-Access-Token>` with your GitHub Personal Access Token. The Headers should look like in the following image.\n\n![](https://blog.n8n.io/content/images/2021/02/header-1.png)Headers for the GraphQL node\n\n> **Note:** While generating the GitHub Personal Access token, make sure to select repo and user under the Select scopes section.\n\n![](https://blog.n8n.io/content/images/2021/02/scopes-1.png)Selecting repo and user scope for GitHub Access Token\n\nCopy and paste the following query in the Edit Query editor and click on the **Execute Node** button to execute the node. On successful execution, it returns the name of the contributor whose username you have passed.\n    \n    \n    query { \n        user(login:\"harshil1712\") { \n            name\n        }\n    }\n\nHere’s a video of me following the steps mentioned above.\n\nCreating the GraphQL node to get contributors information\n\n### Getting more contributor’s information like company, email and location\n\nIn the query above, we are passing the username statically, which will give us the information about only that contributor, for every slash command we issue. To make the query dynamic, we will fetch the username returned by the _Webhook_ node.\n\nConnect the _Webhook_ node with the _GraphQL_ node. Open the **Edit Expression** editor for the **_Query_** field, and replace the username with `{{$json[“body”][“text”]}}`. You can also do this by selecting:`Current Node > Input Data > JSON > body > text`\n\nHere’s a video of me following the steps mentioned above.\n\nConnecting Webhook node with GraphQL node to get username from the Webhook node\n\nWe are now getting the name of the contributor we want. Let’s get more information about them. We will update our query to get additional information like their email address, location, the company they work for, and their profile picture.\n\nCopy and paste the below query in the **Edit Query** editor.\n    \n    \n    query {\n        user(login:\"{{$json[\"body\"][\"text\"]}}\") {\n            name\n            company\n            location\n            avatarUrl\n            email\n        }\n    }\n\nOn executing the workflow, you will get output similar to the following image.\n\n![](https://blog.n8n.io/content/images/2021/02/graphql-output-1.png)Output from the GraphQL node\n\n## 3\\. Function Node\n\nSome of the contributors on GitHub might have their email addresses private, and so we don’t get this information. But what if we want to get in touch with them, and thank them personally?\n\nTo get their email address, we will query their commits. The commit object contains information about the author like their name and email address. Let’s go ahead and update our GraphQL query so that we get at least 25 of their commits.\n\n### Update the GraphQL query\n\nIn the _GraphQL_ node, open the **Edit Expression** editor for the **Query** field. Copy and paste the query below in the editor.\n    \n    \n    query {\n        user(login:\"{{$json[\"body\"][\"text\"]}}\") {\n            name\n            company\n            location\n            avatarUrl\n            email\n            pullRequests(last: 25) {\n                edges {\n                    node {\n                        commits(last: 25) {\n                            nodes {\n                                commit {\n                                    author {\n                                        email\n                                        name\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\nExecute the node to see the changes in effect. The output now contains the email addresses and names of the authors who made the commits as well.\n\n![](https://blog.n8n.io/content/images/2021/02/Final-Graphql-Output-1.png)Output from the updated GraphQL node\n\n### Using Function node to filter the information\n\nOne can observe from the output that we are getting a lot of repeated values for the email addresses. Also, some email addresses belong to different users. We will write a function to solve this and get the email address of our contributor.\n\nn8n has a _Function_ node where we can add custom snippets to JavaScript code to transform data from the other nodes or if you want to implement some custom functionality. Click on the '**+** ' button and select the _Function_ node. Replace the code in the _Function_ node, with the following code.\n    \n    \n    let emails = [];\n    let tempEmails = [];\n    const name = $json[\"data\"][\"user\"][\"name\"];\n    const publicEmail = $json[\"data\"][\"user\"][\"email\"];\n    const username = $node[\"Webhook\"].json[\"body\"][\"text\"];\n    const nameRegex = new RegExp(name,\"g\");\n    \n    // if public email address exists, push it to the tempEmails array\n    \n    if(publicEmail){\n        tempEmails.push(publicEmail)\n    }\n    // looping through the pull requests\n    \n    for(const edge of $json.data.user.pullRequests.edges){\n    \n        // looping through the commits\n    \n        for(node of edge.node.commits.nodes){\n            \n            // Checks the name associated with the email address\n            \n            if(nameRegex.test(node.commit.author.name)|| node.commit.author.name == username) {\n                \n                // if name equals to contributors name or username, push the email address in tempEmails\n                tempEmails.push(node.commit.author.email)\n            }\n        }\n    }\n    \n    // Remove duplicates\n    \n    emails = [...new Set(tempEmails)]\n    \n    // RegEx Pattern for email address generated by GitHub\n    \n    let re = /^\\w+(.)*@users.noreply.github.com/\n    \n    // Remove the email addresses Generated by GitHub\n    \n    emails = emails.filter(email => !re.test(email));\n    \n    return [{json:{emails,}}];\n\nThe above code takes the name and the public email address of the contributor from the _GraphQL_ node. It also gets the username from the _Webhook_ node. The code then verifies if the email address belongs to the contributor, and if it does, it pushes it to a temporary array. It then removes any duplicate values for the email addresses and stores them in the emails array. And lastly, it removes email addresses generated by GitHub and returns the emails array.\n\nAn important thing to keep in mind while using the _Function_ node is that it returns an array. So make sure you’re returning an array, rather than an object.\n\nHere’s a video of me following the steps mentioned above.\n\nCreating the Function node to filter and extract email addresses\n\nWe are now getting the email address of the contributor along with all the other information. Let’s post this in Slack.\n\n## 4\\. Slack Node\n\nIn n8n, you can perform a lot of operations with the _Slack_ node. You can create or archive channels, upload or get files from the workspace, add or delete stars from an item, and post or update messages in the Slack channels.\n\nTo add the _Slack_ node in the workflow, click on the '**+** ' button, and select Slack. Select “OAuth2” from the **Authentication** dropdown menu. Add your Slack app credentials to the node by selecting \"Create New\" from the dropdown menu in the **_Credentials_** section.\n\nHead back to the Slack App dashboard, and copy the Client ID and Client Secret from the **App Credentials** section. Paste them in the **Create Credentials: “Slack OAuth2 API” __** editor in the n8n workflow editor. Copy the OAuth Callback URL from the editor. In the Slack App dashboard, select “OAuth and Permissions” and click on **Add New Redirect URL** under the **Redirect URLs** section. Paste the URL and click on **Add**. The last step is to connect the OAuth Credentials. Click on the **OAuth** button to connect the credentials and select “Allow”.\n\n![](https://blog.n8n.io/content/images/2021/02/slack-app-outh.png)Adding Redirect URL to Slack App\n\nBy default, the _Slack_ node has Message as the Resource and Post as the Operation. If the setting is different for you, make sure to change them. To post a message on the Slack channel where the slash command was issued, we will add the channel id to the Channel field, which is returned by the Webhook node.\n\nCopy and paste `{{$node[“Webhook”].json[“body”][“channel_id”]}}` in the **Channel** field. Alternatively you can use the Variable Selector to get this information. Open the Editor Expression editor, and under **Variable Selector** select: `Nodes > Webhook > Output Data > JSON > body > channel_id`.\n\nLet us now add some styling and formatting to our message. Our message will contain a title, some text and a thumbnail.\n\nIn the **Attachment** section, click on **Add Attachment** , and select **Title** from the Add Attachment Item dropdown menu. Open the Expression editor, and type “GitHub Details for:” in the editor and from the **Variable Selector** select `Nodes > Webhook > Output Data > JSON > body > text`.\n\nFrom the **Add Attachment Item** , select **Text** , to add the Text attachment. Open the Expression editor, and copy and paste the following text:\n    \n    \n    *Name:* {{$node[\"GraphQL\"].json[\"data\"][\"user\"][\"name\"]}}\n    *Email:* {{$json[\"emails\"].join(', ')}}\n    *Company:* {{$node[\"GraphQL\"].json[\"data\"][\"user\"][\"company\"]}}\n    *Location:* {{$node[\"GraphQL\"].json[\"data\"][\"user\"][\"location\"]}}\n\nTo display the profile picture of the contributor, create Thumbnail attachment, by selecting the **Thumbnail URL** option from the **Add Attachment Item** menu. Open the Edit Expression editor and from the Variable Selector select `Nodes > GraphQL > Output Data > JSON > data > user > avatarURL`.\n\nHere’s a video showing how to create the _Slack_ node, and get information from the Webhook node, the GraphQL node, and the Function node.\n\nCreating a Slack node to post the contributor information to the Slack channel\n\n> **Note:** Since the _Function_ node gives an array of email addresses, we will select **_Values_** from the menu, while adding the email from the node.\n\nExecute the node, and your app will post a message to the Slack channel.\n\n![](https://blog.n8n.io/content/images/2021/02/slack-output.png)Output from the Slack node\n\nThe following video shows our workflow in action.\n\nExecuting the finished workflow\n\nTo use the workflow in production, follow the instructions provided in the [documentation](https://docs.n8n.io/reference/server-setup.html?ref=blog.n8n.io). Make sure to use the production webhook URL for the slash command.\n\n## Conclusion\n\nCongratulations! You built a workflow that gives you the information of a contributor. You learned how to get started with n8n and how to add nodes to your workflow. You learned how to use the _Webhook_ node for capturing event triggers, the _GraphQL_ node to query information, the _Function_ node to write custom functions, and the _Slack_ node to post a message on Slack.\n\nYou can use this workflow to gather the information about your contributors, celebrate their successes, and appreciate them for their contributions! Using the GitHub API, you can also get their Twitter username. You can use the [_IF_](https://docs.n8n.io/nodes/n8n-nodes-base.if/?ref=blog.n8n.io) __ node to check for that, and use the [_Twitter_](https://docs.n8n.io/nodes/n8n-nodes-base.twitter/?ref=blog.n8n.io) node to tweet about them. You can even use the [_Mailgun_](https://docs.n8n.io/nodes/n8n-nodes-base.mailgun/?ref=blog.n8n.io) node to send them a personalized thank you message.\n\nI’d be excited to check out what you’ve built using n8n! In case you’ve run into an issue while following the tutorial, feel free to reach out to me on [Twitter](https://twitter.com/harshil1712?ref=blog.n8n.io) or ask for help on our [forum](https://community.n8n.io/?ref=blog.n8n.io) 🧡\n\n _Start automating!_\n\n_The best part is, you can start automating for free with n8n. The easiest way to get started is to sign up for a[free n8n cloud trial](https://n8n.io/cloud?ref=blog.n8n.io). Thanks to n8n’s fair-code license, you can also _[_self-host n8n for free_](https://docs.n8n.io/hosting/?ref=blog.n8n.io) _._\n\n## Subscribe to n8n newsletter\n\nGet the best, coolest, and latest in automation and low-code delivered to your inbox each week. \n\nSomething went wrong. Please try again later.\n\nSubscribed!\n\nSubscribe\n\n[](https://twitter.com/intent/tweet?text=How%20to%20automatically%20give%20kudos%20to%20GitHub%20contributors&url=https://blog.n8n.io/how-to-automatically-give-kudos-to-contributors-with-github-slack-and-n8n/) [](https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/how-to-automatically-give-kudos-to-contributors-with-github-slack-and-n8n/)\n",
  "crawled_at": "2025-05-28T10:55:26.803507"
}