{
  "url": "https://blog.n8n.io/lowcode-multilingual-telegram-bot/",
  "title": "How to build a multilingual Telegram bot with low code",
  "excerpt": "Learn how to build a multilingual bot for Telegram with a few lines of JavaScript code, a NocoDB database, and conditional logic in an automated workflow.",
  "thumbnail": "https://blog.n8n.io/content/images/size/w1200/2022/05/cover_multilingbot.svg",
  "tags": [
    "Bot",
    "Tutorial"
  ],
  "html": "<p>During the last several months I was discovering no-code tools. <a href=\"https://n8n.io/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">n8n</a> was not the first one &nbsp;I tried, but I immediately liked it because of its high flexibility, <a href=\"https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.function/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Function</em> node</a> and helpful <a href=\"https://community.n8n.io/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">community</a>.</p><p>Even though I consider myself experienced in certain areas of programming, there are still plenty of technologies where my knowledge is very limited. I found out that n8n helps fill many gaps, allows me to build products very fast, and saves a tremendous amount of time.</p><p>One of the pet projects I created is a <strong>Telegram bot that extracts text from images</strong>. This bot is also able to communicate to users in several languages. In this tutorial, I'll share my approach to creating multilingual Telegram bots in n8n.</p><!--kg-card-begin: markdown--><h4 id=\"table-of-contents\">Table of contents</h4>\n<p><a href=\"#the-use-case\">The use case</a><br>\n<a href=\"#prerequisites\">Prerequisites</a><br>\n<a href=\"#building-the-workflow\">Building the workflow</a><br>\n<a href=\"#whats-next\">What's next?</a></p>\n<!--kg-card-end: markdown--><h2 id=\"the-use-case\">The use case</h2><p>It's possible to create a simple multilingual Telegram bot in n8n with only a few lines of JavaScript and some core nodes. But when the project gets bigger, it becomes challenging to find a balance between the complexity of the workflow and the possibility to communicate with users in their preferred language.</p><p>One solution is to ask the user about their language preference, i.e. create a special button in a bot and add many workflow branches in n8n for each language.</p><p>But what if I tell you it doesn’t matter how many languages are supported, the bot workflow can stay the same? I made it possible in <a href=\"https://n8n.io/workflows/1583?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">this workflow</a>, and below I'll walk you through the setup process. Feel free to copy-paste the workflow into your Editor UI and follow along this tutorial.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.03.52.png\" class=\"kg-image lightense-target\" alt=\"Workflow for a multilingual Telegram bot\" loading=\"lazy\" width=\"1204\" height=\"596\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-01-at-13.03.52.png 600w, https://blog.n8n.io/content/images/size/w1000/2022/09/Screenshot-2022-09-01-at-13.03.52.png 1000w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.03.52.png 1204w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Workflow for a multilingual Telegram bot</figcaption></figure><h2 id=\"prerequisites\">Prerequisites</h2><ul><li><strong><a href=\"https://docs.n8n.io/quickstart/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">n8n</a></strong>: this is a fair-code licensed automation tool. What I personally like in n8n as a programmer is its flexibility. n8n can be installed in Docker on my PVS server.</li><li><a href=\"https://nocodb.com/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><strong>NocoDB</strong></a>: this is an open source no-code database management tool. It can be installed on your VPS via <a href=\"https://docs.nocodb.com/getting-started/installation?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Docker-compose</a> along with an n8n instance.</li><li><strong>Telegram bot</strong>. If you have never created Telegram bots before, here is a <a href=\"https://blog.n8n.io/creating-telegram-bots-with-n8n-a-no-code-platform/\">tutorial</a> for that.</li><li>Basic knowledge of <strong>JavaScript</strong>: Please note that this article contains a bit of JavaScript code, so it would be helpful to understand what the provided code snippets do or if you want to tweak the code.</li></ul><h2 id=\"building-the-workflow\">Building the workflow</h2><p>First of all, let’s have a general overview of a simplified <a href=\"https://n8n.io/workflows/1583?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">workflow</a>. I have created a skeleton of a multilingual bot that can reply to simple commands in several languages.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.04.20.png\" class=\"kg-image lightense-target\" alt=\"Workflow for a multilingual Telegram bot\" loading=\"lazy\" width=\"1216\" height=\"530\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-01-at-13.04.20.png 600w, https://blog.n8n.io/content/images/size/w1000/2022/09/Screenshot-2022-09-01-at-13.04.20.png 1000w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.04.20.png 1216w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Workflow for a multilingual Telegram bot</figcaption></figure><p>There are two sections of the bot:</p><ol><li>Initialization.</li><li>Processing of bot commands (like /help or /start).</li></ol><p>Before looking into the initialization process we need to create a <strong>bot dictionary</strong>.</p><h3 id=\"bot-dictionary\">Bot dictionary</h3><p>I created a dictionary that contains all possible phrases using NocoDB. Later on, specific messages are selected dynamically from the dictionary. This approach allows me to add many languages with virtually zero changes in a bot workflow. Here’s how the dictionary for several languages looks like:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.04.27.png\" class=\"kg-image lightense-target\" alt=\"Dictionary for the Telegram bot\" loading=\"lazy\" width=\"1212\" height=\"428\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-01-at-13.04.27.png 600w, https://blog.n8n.io/content/images/size/w1000/2022/09/Screenshot-2022-09-01-at-13.04.27.png 1000w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.04.27.png 1212w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Dictionary for the Telegram bot</figcaption></figure><h3 id=\"bot-initialization\">Bot initialization</h3><p>Each time the <a href=\"https://docs.n8n.io/integrations/trigger-nodes/n8n-nodes-base.telegramtrigger/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Telegram Trigger node</a> is activated, an <strong>initialization process</strong> begins.</p><p>First, the user's language is detected and if it is not supported yet, then the default language is assigned:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// Telegram uses the following language codes: https://en.wikipedia.org/wiki/IETF_language_tag\n\n// Check user and assign the default language if the translation is not yet ready\n\nvar data = $node[\"Telegram Trigger\"].json; const botlang = [\"ru\", \"en\"];\n// Update this after adding new language in the dictionary\n\nvar curlang = botlang.includes(data.message.from.language_code) ? data.message.from.language_code : \"en\";\nreturn [{json:\n    {chatID : data.message.chat.id,\n    lang : curlang}\n    }];\n</code></pre>\n<!--kg-card-end: markdown--><p>Don’t forget to update the <strong>botlang</strong> variable after adding a new language to the bot dictionary!</p><p><strong>Second</strong>, the dictionary is loaded via the <a href=\"https://docs.n8n.io/integrations/nodes/n8n-nodes-base.nocodb/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">NocoDB node</a>. Some additional processing of the dictionary is needed via a Function node.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">let data = {};\nfor (item of items) {  data[item.json.botmessage]=item.json;}\nreturn data;\n</code></pre>\n<!--kg-card-end: markdown--><p>Each bot message can be reached now by its name, languages are nested inside each message. The resulting dictionary structure looks like this:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.04.39.png\" class=\"kg-image lightense-target\" alt=\"Function node configuration for bot messages\" loading=\"lazy\" width=\"1328\" height=\"566\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-01-at-13.04.39.png 600w, https://blog.n8n.io/content/images/size/w1000/2022/09/Screenshot-2022-09-01-at-13.04.39.png 1000w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.04.39.png 1328w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Function node configuration for bot messages</figcaption></figure><p><strong>Finally</strong>, the bot has very simple user management: each new user is greeted, known users are welcomed back, and the original user language is stored in a NocoDB database.</p><p>After the initialization process is completed, I placed a <a href=\"https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.merge/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Merge node</a>. It is configured in a <em><strong>Pass-through</strong></em> mode and waits for the initialization to finish before actually processing the Telegram message.</p><h2 id=\"commands-processor\"><strong>Commands processor</strong></h2><p>Next section of the bot is a <strong>command processor</strong>.</p><p>Since the bot supports only a few commands, one <a href=\"https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.switch/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Switch node</a> is enough.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.04.56.png\" class=\"kg-image lightense-target\" alt=\"Switch node configuration\" loading=\"lazy\" width=\"422\" height=\"1078\"><figcaption>Switch node configuration</figcaption></figure><p>The bot supports only two commands right now: /start and /help. Every other text goes to the third output and is treated as an incorrect command.</p><p>There are several <a href=\"https://docs.n8n.io/integrations/nodes/n8n-nodes-base.telegram/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Telegram nodes</a> at the end of the workflow, all configured in a similar way.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.05.05.png\" class=\"kg-image lightense-target\" alt=\"Telegram node configuration\" loading=\"lazy\" width=\"444\" height=\"816\"><figcaption>Telegram node configuration</figcaption></figure><p>The<em><strong> Parse Mode</strong></em> is set to Markdown, because the help message contains a link to the n8n website.</p><p>Let’s take a closer look at the <em><strong>Text</strong></em> field, which is based on the dictionary and a user's language. </p><!--kg-card-begin: markdown--><pre><code class=\"language-json\">{{$evaluateExpression($node[\"botmessages\"].json[\"help\"][$node[\"chatID\"].json[\"lang\"]])}}\n</code></pre>\n<!--kg-card-end: markdown--><p>The bot looks for a message called “help” that is stored in a <em>Function</em> node “botmessages”. The user language is stored in another <em>Function</em> node called “ChatID”. Both of them were created at the initialization step.</p><p>When a new language is added into a dictionary, it will be automatically loaded and correctly applied in the Telegram node. No big changes in the workflow are required!</p><p>Of course, if you would like to extend the bot and support new commands, then an additional “botmessage” record should be added into a dictionary and some n8n workflow changes are also needed.</p><p>Last but not least, <strong>$evaluateExpression() </strong>is important, because some text messages can have dynamic parts, like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-json\">Nice to meet you, {{$node[\"Telegram Trigger\"].json[\"message\"][\"from\"][\"first_name\"]}}. I am n8n-powered test bot, I can reply in several languages. Your current language seems to be: {{$node[\"Telegram Trigger\"].json[\"message\"][\"from\"][\"language_code\"]}}.\n\n</code></pre>\n<!--kg-card-end: markdown--><p>Adding <strong>$evaluateExpression()</strong> allows n8n to correctly parse the user name and language code.</p><h2 id=\"what%E2%80%99s-next\">What’s next?</h2><p>Though the Telegram bot is functional in this form, there are several things that could be improved or optimized:</p><ul><li>Loading the whole dictionary from the NocoDB database each time a user sends the Telegram message is not optimal. It increases both the server load and the response time. The bot performance could be improved by storing the bot dictionary on the server in a JSON format. For my own bots I use a separate workflow which is activated every time the dictionary is updated:</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.05.16.png\" class=\"kg-image lightense-target\" alt=\"Workflow part for storing bot dictionary\" loading=\"lazy\" width=\"804\" height=\"306\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-01-at-13.05.16.png 600w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.05.16.png 804w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Workflow part for storing bot dictionary</figcaption></figure><ul><li>The dictionary is stored on the server as a JSON file and is loaded during the bot initialization phase. Two different nodes are used for that: <a href=\"https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.readbinaryfile/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Read Binary File</a> and <a href=\"https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.movebinarydata/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Move Binary Data</a>, so the initialization phase should be slightly changed as follows:</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.05.22.png\" class=\"kg-image lightense-target\" alt=\"Workflow part for loading bot dictionary\" loading=\"lazy\" width=\"782\" height=\"180\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-01-at-13.05.22.png 600w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.05.22.png 782w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Workflow part for loading bot dictionary</figcaption></figure><ul><li>Finally, it is also possible to update the <strong>botlang</strong> variable from the ChatID Function node and detect all bot languages fully automatically. But this task requires some extra knowledge of JavaScript or an additional table in NocoDB database, which stores all known translations in a single variable.</li></ul><p>Feel free to take on some of these tweaks and build your own multilingual Telegram bot! If you have any questions or automation ideas, you can contact me on <a href=\"https://www.linkedin.com/in/parsadanyan/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">LinkedIn</a> or write in the <a href=\"https://community.n8n.io/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">n8n forum</a>.</p><p><em>Start automating!</em></p><p><em>The best part is, you can start automating for free with n8n. The easiest way to get started is to sign up for a <a href=\"https://n8n.io/pricing/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a>. Thanks to n8n’s fair-code license, you can also </em><a href=\"https://docs.n8n.io/hosting/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>self-host n8n for free</em></a><em>.</em></p>\n\t\t<div class=\"newsletter-banner\">\n\t    <div class=\"newsletter-banner-content\">\n\t      <div class=\"section-header\">\n\t        <h2>Subscribe to <span>n8n newsletter</span></h2>\n\t        <div class=\"section-subheader--bottom\">\n\t          Get the best, coolest, and latest in automation and low-code delivered to your inbox each week.\n\t        </div>\n\t      </div>\n\t      <div class=\"newsletter-banner-form\">\n\t        <form autocomplete=\"off\" class=\"contact-form\" onsubmit=\"subscribeNewsletter(event)\">\n\t        \t<div id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB\" data-callback=\"submitSubscription\" data-size=\"invisible\"><div class=\"grecaptcha-badge\" data-style=\"bottomright\" style=\"width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;\"><div class=\"grecaptcha-logo\"><iframe title=\"reCAPTCHA\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-hzi84z39a8ml\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB&amp;co=aHR0cHM6Ly9ibG9nLm44bi5pbzo0NDM.&amp;hl=en&amp;v=jt8Oh2-Ue1u7nEbJQUIdocyd&amp;size=invisible&amp;cb=k07vrsaz2659\"></iframe></div><div class=\"grecaptcha-error\"></div><textarea id=\"g-recaptcha-response\" name=\"g-recaptcha-response\" class=\"g-recaptcha-response\" style=\"width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;\"></textarea></div><iframe style=\"display: none;\"></iframe></div>\n\t          <div class=\"input-wrapper\">\n\t            <input placeholder=\"Email\" name=\"email\" type=\"email\" required=\"required\" class=\"\">\n\t            <div class=\"messages\">\n\t              <div class=\"message message--error\">Something went wrong. Please try again later.</div>\n\t              <div class=\"message message--success\">Subscribed!</div>\n\t            </div>\n\t          </div>\n\t          <button type=\"submit\" class=\"submit-btn\">Subscribe</button>\n\t        </form>\n\t      </div>\n\t    </div>\n    </div>\n\t\t<div class=\"post-share-section\">\n\t<div class=\"post-share-wrap\">\n\t\t<a href=\"https://twitter.com/intent/tweet?text=How%20to%20build%20a%20multilingual%20Telegram%20bot%20with%20low%20code&amp;url=https://blog.n8n.io/lowcode-multilingual-telegram-bot/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\"></path></svg></a>\n\t\t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/lowcode-multilingual-telegram-bot/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z\"></path></svg></a>\n\t\t<!-- <a href=\"javascript:\" class=\"post-share-link\" id=\"copy\" data-clipboard-target=\"#copy-link\" aria-label=\"Copy link icon\"><svg role=\"img\" viewBox=\"0 0 33 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M27.3999996,13.4004128 L21.7999996,13.4004128 L21.7999996,19 L18.9999996,19 L18.9999996,13.4004128 L13.3999996,13.4004128 L13.3999996,10.6006192 L18.9999996,10.6006192 L18.9999996,5 L21.7999996,5 L21.7999996,10.6006192 L27.3999996,10.6006192 L27.3999996,13.4004128 Z M12,20.87 C7.101,20.87 3.13,16.898 3.13,12 C3.13,7.102 7.101,3.13 12,3.13 C12.091,3.13 12.181,3.139 12.272,3.142 C9.866,5.336 8.347,8.487 8.347,12 C8.347,15.512 9.866,18.662 12.271,20.857 C12.18,20.859 12.091,20.87 12,20.87 Z M20.347,0 C18.882,0 17.484,0.276 16.186,0.756 C14.882,0.271 13.473,0 12,0 C5.372,0 0,5.373 0,12 C0,18.628 5.372,24 12,24 C13.471,24 14.878,23.726 16.181,23.242 C17.481,23.724 18.88,24 20.347,24 C26.975,24 32.347,18.628 32.347,12 C32.347,5.373 26.975,0 20.347,0 Z\"/></svg></a>\n\t\t<small class=\"share-link-info\">The link has been copied!</small> -->\n\t</div>\n\t<input type=\"text\" value=\"https://blog.n8n.io/lowcode-multilingual-telegram-bot/\" id=\"copy-link\" aria-label=\"Copy link input\">\n</div>",
  "readme": "During the last several months I was discovering no-code tools. [n8n](https://n8n.io/?ref=blog.n8n.io) was not the first one  I tried, but I immediately liked it because of its high flexibility, [_Function_ node](https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.function/?ref=blog.n8n.io) and helpful [community](https://community.n8n.io/?ref=blog.n8n.io).\n\nEven though I consider myself experienced in certain areas of programming, there are still plenty of technologies where my knowledge is very limited. I found out that n8n helps fill many gaps, allows me to build products very fast, and saves a tremendous amount of time.\n\nOne of the pet projects I created is a **Telegram bot that extracts text from images**. This bot is also able to communicate to users in several languages. In this tutorial, I'll share my approach to creating multilingual Telegram bots in n8n.\n\n#### Table of contents\n\nThe use case  \nPrerequisites  \nBuilding the workflow  \nWhat's next?\n\n## The use case\n\nIt's possible to create a simple multilingual Telegram bot in n8n with only a few lines of JavaScript and some core nodes. But when the project gets bigger, it becomes challenging to find a balance between the complexity of the workflow and the possibility to communicate with users in their preferred language.\n\nOne solution is to ask the user about their language preference, i.e. create a special button in a bot and add many workflow branches in n8n for each language.\n\nBut what if I tell you it doesn’t matter how many languages are supported, the bot workflow can stay the same? I made it possible in [this workflow](https://n8n.io/workflows/1583?ref=blog.n8n.io), and below I'll walk you through the setup process. Feel free to copy-paste the workflow into your Editor UI and follow along this tutorial.\n\n![Workflow for a multilingual Telegram bot](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.03.52.png)Workflow for a multilingual Telegram bot\n\n## Prerequisites\n\n  * **[n8n](https://docs.n8n.io/quickstart/?ref=blog.n8n.io)** : this is a fair-code licensed automation tool. What I personally like in n8n as a programmer is its flexibility. n8n can be installed in Docker on my PVS server.\n  * [**NocoDB**](https://nocodb.com/?ref=blog.n8n.io): this is an open source no-code database management tool. It can be installed on your VPS via [Docker-compose](https://docs.nocodb.com/getting-started/installation?ref=blog.n8n.io) along with an n8n instance.\n  * **Telegram bot**. If you have never created Telegram bots before, here is a [tutorial](https://blog.n8n.io/creating-telegram-bots-with-n8n-a-no-code-platform/) for that.\n  * Basic knowledge of **JavaScript** : Please note that this article contains a bit of JavaScript code, so it would be helpful to understand what the provided code snippets do or if you want to tweak the code.\n\n\n\n## Building the workflow\n\nFirst of all, let’s have a general overview of a simplified [workflow](https://n8n.io/workflows/1583?ref=blog.n8n.io). I have created a skeleton of a multilingual bot that can reply to simple commands in several languages.\n\n![Workflow for a multilingual Telegram bot](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.04.20.png)Workflow for a multilingual Telegram bot\n\nThere are two sections of the bot:\n\n  1. Initialization.\n  2. Processing of bot commands (like /help or /start).\n\n\n\nBefore looking into the initialization process we need to create a **bot dictionary**.\n\n### Bot dictionary\n\nI created a dictionary that contains all possible phrases using NocoDB. Later on, specific messages are selected dynamically from the dictionary. This approach allows me to add many languages with virtually zero changes in a bot workflow. Here’s how the dictionary for several languages looks like:\n\n![Dictionary for the Telegram bot](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.04.27.png)Dictionary for the Telegram bot\n\n### Bot initialization\n\nEach time the [Telegram Trigger node](https://docs.n8n.io/integrations/trigger-nodes/n8n-nodes-base.telegramtrigger/?ref=blog.n8n.io) is activated, an **initialization process** begins.\n\nFirst, the user's language is detected and if it is not supported yet, then the default language is assigned:\n    \n    \n    // Telegram uses the following language codes: https://en.wikipedia.org/wiki/IETF_language_tag\n    \n    // Check user and assign the default language if the translation is not yet ready\n    \n    var data = $node[\"Telegram Trigger\"].json; const botlang = [\"ru\", \"en\"];\n    // Update this after adding new language in the dictionary\n    \n    var curlang = botlang.includes(data.message.from.language_code) ? data.message.from.language_code : \"en\";\n    return [{json:\n        {chatID : data.message.chat.id,\n        lang : curlang}\n        }];\n    \n\nDon’t forget to update the **botlang** variable after adding a new language to the bot dictionary!\n\n**Second** , the dictionary is loaded via the [NocoDB node](https://docs.n8n.io/integrations/nodes/n8n-nodes-base.nocodb/?ref=blog.n8n.io). Some additional processing of the dictionary is needed via a Function node.\n    \n    \n    let data = {};\n    for (item of items) {  data[item.json.botmessage]=item.json;}\n    return data;\n    \n\nEach bot message can be reached now by its name, languages are nested inside each message. The resulting dictionary structure looks like this:\n\n![Function node configuration for bot messages](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.04.39.png)Function node configuration for bot messages\n\n**Finally** , the bot has very simple user management: each new user is greeted, known users are welcomed back, and the original user language is stored in a NocoDB database.\n\nAfter the initialization process is completed, I placed a [Merge node](https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.merge/?ref=blog.n8n.io). It is configured in a _**Pass-through**_ mode and waits for the initialization to finish before actually processing the Telegram message.\n\n## **Commands processor**\n\nNext section of the bot is a **command processor**.\n\nSince the bot supports only a few commands, one [Switch node](https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.switch/?ref=blog.n8n.io) is enough.\n\n![Switch node configuration](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.04.56.png)Switch node configuration\n\nThe bot supports only two commands right now: /start and /help. Every other text goes to the third output and is treated as an incorrect command.\n\nThere are several [Telegram nodes](https://docs.n8n.io/integrations/nodes/n8n-nodes-base.telegram/?ref=blog.n8n.io) at the end of the workflow, all configured in a similar way.\n\n![Telegram node configuration](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.05.05.png)Telegram node configuration\n\nThe _**Parse Mode**_ is set to Markdown, because the help message contains a link to the n8n website.\n\nLet’s take a closer look at the _**Text**_ field, which is based on the dictionary and a user's language. \n    \n    \n    {{$evaluateExpression($node[\"botmessages\"].json[\"help\"][$node[\"chatID\"].json[\"lang\"]])}}\n    \n\nThe bot looks for a message called “help” that is stored in a _Function_ node “botmessages”. The user language is stored in another _Function_ node called “ChatID”. Both of them were created at the initialization step.\n\nWhen a new language is added into a dictionary, it will be automatically loaded and correctly applied in the Telegram node. No big changes in the workflow are required!\n\nOf course, if you would like to extend the bot and support new commands, then an additional “botmessage” record should be added into a dictionary and some n8n workflow changes are also needed.\n\nLast but not least, **$evaluateExpression()** is important, because some text messages can have dynamic parts, like this:\n    \n    \n    Nice to meet you, {{$node[\"Telegram Trigger\"].json[\"message\"][\"from\"][\"first_name\"]}}. I am n8n-powered test bot, I can reply in several languages. Your current language seems to be: {{$node[\"Telegram Trigger\"].json[\"message\"][\"from\"][\"language_code\"]}}.\n    \n    \n\nAdding **$evaluateExpression()** allows n8n to correctly parse the user name and language code.\n\n## What’s next?\n\nThough the Telegram bot is functional in this form, there are several things that could be improved or optimized:\n\n  * Loading the whole dictionary from the NocoDB database each time a user sends the Telegram message is not optimal. It increases both the server load and the response time. The bot performance could be improved by storing the bot dictionary on the server in a JSON format. For my own bots I use a separate workflow which is activated every time the dictionary is updated:\n\n![Workflow part for storing bot dictionary](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.05.16.png)Workflow part for storing bot dictionary\n\n  * The dictionary is stored on the server as a JSON file and is loaded during the bot initialization phase. Two different nodes are used for that: [Read Binary File](https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.readbinaryfile/?ref=blog.n8n.io) and [Move Binary Data](https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.movebinarydata/?ref=blog.n8n.io), so the initialization phase should be slightly changed as follows:\n\n![Workflow part for loading bot dictionary](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-13.05.22.png)Workflow part for loading bot dictionary\n\n  * Finally, it is also possible to update the **botlang** variable from the ChatID Function node and detect all bot languages fully automatically. But this task requires some extra knowledge of JavaScript or an additional table in NocoDB database, which stores all known translations in a single variable.\n\n\n\nFeel free to take on some of these tweaks and build your own multilingual Telegram bot! If you have any questions or automation ideas, you can contact me on [LinkedIn](https://www.linkedin.com/in/parsadanyan/?ref=blog.n8n.io) or write in the [n8n forum](https://community.n8n.io/?ref=blog.n8n.io).\n\n_Start automating!_\n\n_The best part is, you can start automating for free with n8n. The easiest way to get started is to sign up for a[free n8n cloud trial](https://n8n.io/pricing/?ref=blog.n8n.io). Thanks to n8n’s fair-code license, you can also _[_self-host n8n for free_](https://docs.n8n.io/hosting/?ref=blog.n8n.io) _._\n\n## Subscribe to n8n newsletter\n\nGet the best, coolest, and latest in automation and low-code delivered to your inbox each week. \n\nSomething went wrong. Please try again later.\n\nSubscribed!\n\nSubscribe\n\n[](https://twitter.com/intent/tweet?text=How%20to%20build%20a%20multilingual%20Telegram%20bot%20with%20low%20code&url=https://blog.n8n.io/lowcode-multilingual-telegram-bot/) [](https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/lowcode-multilingual-telegram-bot/)\n",
  "crawled_at": "2025-05-28T10:50:00.992941"
}