{
  "url": "https://blog.n8n.io/build-your-own-virtual-assistant-with-n8n-a-step-by-step-guide/",
  "title": "Build your own virtual assistant with n8n: A step by step guide",
  "excerpt": "In this article, we are going to show you how to build your very own virtual assistant using many of the services that you already use.",
  "thumbnail": "https://blog.n8n.io/content/images/size/w1200/2021/01/cover.jpg",
  "tags": [
    "Tips"
  ],
  "html": "<p>There is a lot to do for the average person living in the 21st century. Between work, family, and personal obligations, it is not uncommon for someone to get up early in the morning and run hard all day long just to collapse in bed that night with a list of tasks still unfinished.</p><p>Many people will turn to a virtual assistant to help them with these daily tasks. This can take the form of someone who works remotely for you, receiving direction through the internet. But, more recently, a new type of virtual assistant has emerged.</p><p>This is the electronic virtual assistant. They are not people at all. Rather, they are programs on our computer/phone or devices that sit on our kitchen counter at home. Two well known examples of these virtual assistants are the <a href=\"https://en.wikipedia.org/wiki/Amazon_Alexa?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Amazon Alexa</a> and the <a href=\"https://en.wikipedia.org/wiki/Google_Assistant?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Google Assistant</a>. They can find details about your day or retrieve information for you quickly and (sometimes) easily.</p><p>The one challenge with these virtual assistants is that, at their core, they have a number of basic abilities that can be augmented with different skills created by either the manufacturer or a 3rd party. Because of this model, the majority of the abilities available from your personal assistant do not apply to you and, even worse, they may not have the ability to actually perform the tasks that you want them to do.</p><h2 id=\"a-lesson-from-suits\">A Lesson from Suits</h2><p>If you’ve watched even just one episode of the television series <a href=\"https://www.usanetwork.com/suits?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Suits</a>, it becomes pretty apparent almost immediately that, despite all of his self confidence, the main character <a href=\"https://suits.fandom.com/wiki/Harvey_Specter?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Harvey</a> would not be where he is today without his personal assistant <a href=\"https://suits.fandom.com/wiki/Donna_Paulsen?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Donna</a>.</p><p>Donna knows what Harvey wants before Harvey does. Donna anticipates Harvey’s needs and acts on them so that by time Harvey realizes he needs something, Donna has already done it. She is the glue that holds his life together.</p><p>Wouldn’t it be wonderful if our virtual assistants were more like Donna?</p><p>Well, I may have some good news for you!</p><h2 id=\"nathan-is-here-to-help\">Nathan is Here to Help</h2><p>While it would be impossible to completely recreate the <a href=\"https://www.youtube.com/watch?v=3TMNcCquWhg&amp;ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">awesome that is Donna</a>, we can definitely put together a useful virtual assistant who can deal with some of the day to day details that somehow find a way to consume our lives!</p><p>In this article, we are going to show you how to build your very own virtual assistant using many of the services that you already use today and connecting them all together with <a href=\"https://n8n.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">n8n</a>. To add a personal touch to our virtual assistant we are going to call him Nathan.</p><p>Throughout this article, I’m going to use a Suits analogy. If you haven’t watched Suits, that’s OK! Everything will still make sense so feel free to ignore it! 😄</p><h2 id=\"goals\">Goals</h2><p>We are going to set some specific short term goals which we will complete during this article and then some long term goals which are ideas we can add-on at a later date once we build this initial framework.</p><ul><li>Give Nathan the ability to perform basic email management</li><li>Set up a way to communicate with Nathan behind the scenes</li><li>Give Nathan some sass!</li></ul><h2 id=\"prerequisites\">Prerequisites</h2><p>In order to get Nathan up and running, we need to have the following in place:</p><ol><li><a href=\"https://n8n.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><strong>n8n </strong></a>— You can get this up and running by checking out the <a href=\"https://docs.n8n.io/try-it-out/quickstart/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Quickstart</a> page. You should have a fresh install without any workflows. You can also sign-up for a <a href=\"https://n8n.io/cloud?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a> to get access to our hosted service. This workflow was created in n8n version 0.104.2.</li><li><a href=\"https://slack.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><strong>Slack</strong></a> — You will need a Slack workspace set up with at least one account for the person who is being assisted. You can find information about your Slack requirements <a href=\"https://docs.n8n.io/credentials/slack/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">here</a>.</li><li><a href=\"https://mail.yahoo.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><strong>Yahoo Mail</strong></a> — This is used for communication between our users. (Please note that I have decided to use Yahoo mail but most other mail providers will work as well. For example, <a href=\"https://docs.n8n.io/credentials/imap/?ref=blog.n8n.io#using-gmail\" target=\"_blank\" rel=\"noopener\">Gmail</a>, <a href=\"https://support.microsoft.com/en-us/office/pop-imap-and-smtp-settings-for-outlook-com-d088b986-291d-42b8-9564-9c414e2aa040?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Outlook.com</a>, <a href=\"https://www.zoho.com/mail/help/zoho-smtp.html?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Zoho</a> and others are fine to use.) Set up the Yahoo mail credentials following the instructions mentioned <a href=\"https://docs.n8n.io/credentials/imap/?ref=blog.n8n.io#using-yahoo-mail\" target=\"_blank\" rel=\"noopener\">here</a>.</li></ol><h2 id=\"n8n\">n8n</h2><p>The core of our Nathan is the <a href=\"https://n8n.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">n8n</a> system. It has two primary purposes:</p><ol><li>Connect services together that do not presently talk with each other</li><li>Provide the logic for how these services interact</li></ol><h2 id=\"a-note-about-screenshots-and-the-start-node\">A Note About Screenshots and the Start Node</h2><p>The Start node is the default node for a workflow and can’t be removed. It’s used to initiate processing in a workflow that doesn’t begin with a trigger node (something you’ll learn about next). In the screenshots, the Start node has been omitted for clarity. You can also get <a href=\"https://n8n.io/workflows/632?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">your own copy of the workflow</a> to help you follow along as we go.</p><p>Okay, enough of the preamble. Let’s get this project started!</p><h2 id=\"you-ve-got-mail-\">You’ve Got Mail!</h2><p>The first ability that we want to give Nathan is to work with Harvey’s email. We are going to accomplish this using two integrations:</p><ol><li><a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.emailReadImap?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>EmailReadImap</em></a><em> </em>— reads email from an IMAP enabled mailbox and executes a workflow. This node is sometimes referred to as <em>IMAP Email</em>.</li><li><a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.emailSend/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Send Email</em></a> — sends emails using information received by the node from a workflow.</li></ol><h3 id=\"reading-email\">Reading Email</h3><p>The first node we are going to configure is the <em>EmailReadImap </em>node. This node will allow Nathan to monitor Harvey’s email and then perform actions based on the email.</p><h3 id=\"add-the-emailreadimap-node\">Add the EmailReadImap Node</h3><p>The first step is to add the node into the workflow. To do this, follow these steps:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/imap.png\" class=\"kg-image lightense-target\" alt=\"Image for post\" loading=\"lazy\" width=\"364\" height=\"462\"><figcaption>EmailReadImap node parameters</figcaption></figure><ol><li>Click on the '<strong>+</strong>' button in the top right corner</li><li>Under the <strong>All</strong> tab, find the <em>EmailReadImap</em> node and click on it to open up the node parameters</li><li>In the <strong>Parameters</strong> tab, under <strong>Credentials &gt; IMAP</strong> select 'Create New<em>'</em> and enter the credentials you created earlier.</li><li>I’ve also chosen to change the name of the node to <em>Read Harvey’s Email</em> so that we will know exactly what this node does when looking at the workflow (Trust me, this helps later on when things get really complicated). We rename nodes by opening the node, clicking on the title of the node at the top left corner to enable renaming the node, edit the name and then click on the ✔ to set the new node name.</li><li>You can leave the rest of the options as defaults</li></ol><h3 id=\"test-the-emailreadimap-node\">Test the EmailReadImap Node</h3><p>Before we move on, let’s test the <em>EmailReadImap </em>node to ensure that it is working properly.</p><p><strong>Pro Tip:</strong> Save any changes you made to your workflow before you test it. This way, you will not lose your work if you run into any problems.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/test.png\" class=\"kg-image lightense-target\" alt=\"Image for post\" loading=\"lazy\" width=\"1085\" height=\"556\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/test.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/02/test.png 1000w, https://blog.n8n.io/content/images/2021/02/test.png 1085w\"><figcaption>Email waiting for Harvey</figcaption></figure><ol><li>Make sure that there is an unread email for the node to read. As it turns out, it appears that Louis has plans for him and Harvey after court this evening</li><li>In the open <em>EmailReadImap </em>node, click on the <strong>Execute Node</strong> button in the top right corner. This will get the node to reach out and read Harvey’s email.</li><li>If everything works right, you should get a table of information in the right hand pane with the following information:<br>• <strong>textHTML</strong>: The message body in HTML format<br>• <strong>textPlain</strong>: The message body in plain text format<br>• <strong>metadata</strong>: All of the information that is needed for the mail client to read the message (mainly looks like gibberish)<br>• <strong>date</strong>: Time and date that the message was sent<br>• <strong>from</strong>: Name and email address of the person who sent the message<br>• <strong>to</strong>: Name and email address of the person who sent the message<br>• <strong>subject</strong>: The subject line of the email</li></ol><p>If we go back into Harvey’s email, we will also see that the email from Louis is now marked as read compared to the unread message from Mike that came in after we tested the node:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/read-email.png\" class=\"kg-image lightense-target\" alt=\"Image for post\" loading=\"lazy\" width=\"668\" height=\"62\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/read-email.png 600w, https://blog.n8n.io/content/images/2021/02/read-email.png 668w\"><figcaption>Email after executing node and new mail has come in</figcaption></figure><p>You can now close the node and your workflow should look something like this:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/saved-workflow.png\" class=\"kg-image lightense-target\" alt=\"Image for post\" loading=\"lazy\" width=\"1400\" height=\"581\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/saved-workflow.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/02/saved-workflow.png 1000w, https://blog.n8n.io/content/images/2021/02/saved-workflow.png 1400w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Workflow after adding <em class=\"nn\">EmailReadImap node</em></figcaption></figure><p>Because the <em>EmailReadImap </em>node is a trigger node, it does not have an input but it is triggered each time a new email is detected so that the email can be processed.</p><hr><h2 id=\"making-a-decision\">Making a Decision</h2><p>Now that we have the email, what do we do with it? Well, Harvey has given Nathan explicit instructions that he does not want to waste time on any of Louis’s emails. So, Nathan is going to check who sent the email.</p><p>There are a couple of ways to do this in n8n:</p><ol><li><a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.if/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><strong><em>IF</em> node</strong></a>: Checks a parameter and performs one action if it results in a true result and performs another if it results in a false result</li><li><strong><a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.switch?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Switch</em> node</a></strong>: Checks a parameter and performs one of many actions, depending upon the value of the parameter.</li></ol><p>While either would work for Nathan, we are going to use the <em>Switch </em>node because it allows us more flexibility for further expansion later.</p><p>Once you have added the <em>Switch </em>node and made sure that the output from the <em>EmailReadImap </em>node is connected to the input of the new <em>Switch </em>node, this is how we are going to configure it:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/switch-node.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"364\" height=\"557\"><figcaption>Final Switch node Parameters</figcaption></figure><ol><li>Set the following parameters in the <strong>Parameters</strong> section:<br><strong>• Mode</strong>: Rules<br>• <strong>Data Type</strong>: String</li><li>For <strong>Value 1</strong>, click on the gears icon to the right of the field and click on <em>Add Expression</em> in the dropdown menu to open up the variable selector windows</li><li>Click on <strong>Current Node &gt; Input Data &gt; JSON &gt; from</strong>. You should see the expression display <code>{{$json[“from”]}}</code> and the result below it read <em>Louis Litt &lt;louis_litt_1970@yahoo.com&gt;</em>. This displays the expression that you need to look for and what it is presently based on the information provided by the previous node.</li><li>Close the <strong>Edit Expression</strong> window</li><li>Under <strong>Routing Rules:</strong>, click the <strong>Add Routing Rule</strong> button. Three new labels and fields appear</li><li>Fill in the rule fields as follows:<br>• <strong>Operation</strong>: Equal<br><strong>• Value 2</strong>: Louis Litt &lt;louis_litt_1970@yahoo.com&gt;<br>• <strong>Output</strong>: 0</li><li>Beneath the <strong>Add Routing Rule</strong> button, select <em>3</em> for the <strong>Fallback Output</strong></li></ol><p>That completes the configuration of the <em>Switch </em>node. What we have told it to do is this:</p><p>If the unread email is from Louis, send it for further processing. Otherwise, let it go through.</p><p>I’ve also taken the liberty of renaming the node <em>Who Is The Email From?</em>.</p><h3 id=\"test-the-switch-node\">Test the Switch Node</h3><p>To test the <em>Switch </em>node, simply click on the <strong>Execute Node</strong> button at the top right corner of the node. If we have configured everything correctly, you should see an indicator above the output side of the node windows.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/test-switch.png\" class=\"kg-image lightense-target\" alt=\"Image for post\" loading=\"lazy\" width=\"270\" height=\"52\"><figcaption>Switch Node Output Indicator</figcaption></figure><p>This is telling me that we are seeing the results for <strong>Output 0</strong>. It is also telling me that the <em>Switch </em>node sent information out of <strong>Output 0</strong> and this information is displayed below. In this case, it is the JSON data that was received in the input sent from the <em>EmailReadImap </em>node (i.e. the contents of the email).</p><p>If you were to click on the dropdown field beside the <strong>Output</strong> label, the <strong>Results</strong> would change and the output information below would also change to reflect the results and the output from the selected <strong>Output</strong>.</p><p>You can now close the <em>Switch </em>node. The workflow now looks like this:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/after-switch-workflow.png\" class=\"kg-image lightense-target\" alt=\"Image for post\" loading=\"lazy\" width=\"1514\" height=\"629\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/after-switch-workflow.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/02/after-switch-workflow.png 1000w, https://blog.n8n.io/content/images/2021/02/after-switch-workflow.png 1514w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Workflow after Switch node added</figcaption></figure><hr><h2 id=\"making-up-excuses\">Making Up Excuses</h2><p>Since Harvey doesn’t want to do anything with Louis, Nathan needs to make up a good excuse for Harvey. Fortunately, he has several (13,800 to be exact) excuses ready to go. We just need to build the excuse generator for him.</p><p>There are three separate nodes to this part of the system:</p><ol><li><a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.readBinaryFile/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Read Binary File</em></a></li><li><a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.spreadsheetFile/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Spreadsheet File</em></a></li><li><a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.function/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Function</em></a></li></ol><h3 id=\"spreadsheet-node-note\">Spreadsheet Node Note</h3><p>While I chose to create a copy of the Google Sheet as an Excel spreadsheet and then access it from the <em>Read Binary File</em> node, I could have just as easily accessed the information directly from Google Sheets using the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.googleSheets?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Google Sheets</em> node</a>. For bonus points, see if you can replace the <em>Read Binary File</em> and <em>Spreadsheet File</em> nodes with a <em>Google Sheets</em> node.</p><h3 id=\"create-a-spreadsheet\">Create a Spreadsheet</h3><p>The raw data for the generator is stored in an Excel spreadsheet. You can see the Google Sheets version yourself <a href=\"https://docs.google.com/spreadsheets/d/1mZXiALzjpcGhtDzpweJmQ1jYJBhkv92x855lumoLqi8/edit?usp=sharing&amp;ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">here</a>. Download the file as an Excel spreadsheet and then save it in the same folder where you have installed n8n.</p><p>This spreadsheet acts like a database and stores each separate part of the excuse in the file. This spreadsheet should be installed somewhere that the n8n server can get access to; either on the n8n server itself or a remotely mounted network share.</p><h3 id=\"read-data-as-binary-information\">Read Data as Binary Information</h3><p>Next, we have to load the binary file into the system. This is done using a <em>Read Binary File</em> node. There are only two parameters for this node:</p><ol><li><strong>File Path</strong>: The full file path to the spreadsheet</li><li><strong>Property Name</strong>: The property which will contain the binary data. This can be left as the default <em>data</em></li></ol><p>Once they are set, the node can be closed.</p><h3 id=\"retrieve-information-from-spreadsheet\">Retrieve Information from Spreadsheet</h3><p>We can now actually view the information stored in the spreadsheet. Using the <em>Spreadsheet File</em> node, we can retrieve the binary data output from the previous node.</p><p>The two parameters to set are:</p><ol><li><strong>Operation</strong>: Since we are reading from the file, we set the value to <em>Read from file</em></li><li><strong>Binary Property</strong>: This needs to match the <strong>Property Name</strong> value entered in the <em>Read Binary File</em> node previously</li></ol><h3 id=\"create-the-excuse\">Create the Excuse</h3><p>The final node in our excuse generator workflow is a <em>Function </em>node. The <em>Function </em>node is a bit special because it gives you the freedom to do pretty much anything you want with the data that it receives and spit out whatever you want on the other side as long as it follows the proper data structure (See <a href=\"https://docs.n8n.io/data/data-structure/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Data Structure</a> for more information).</p><p>This is the code that runs in the <em>Function </em>node:</p><pre><code class=\"language-js\">var leadinmax = 24;\nvar perpmax = 25;\nvar delaymax = 23;\nvar leadin = Math.floor((Math.random() * leadinmax ) + 1);\nvar perp = Math.floor((Math.random() * perpmax ) + 1);\nvar delay = Math.floor((Math.random() * delaymax) + 1);\n\nvar excuse = items[leadin].json.Leadin + “ “ + items[perp].json.Perpetrator + “ “ + items[delay].json.Delay;\n\nitems = [{json:{}}];\nitems[0].json.excuse = excuse;\n\nreturn items;</code></pre><p>And this is what it does:</p><ul><li><strong>Lines 1–3</strong>: The number of entries that are available for each of the three portions of the excuse</li><li><strong>Lines 4–6</strong>: Generates a random number to retrieve a random excuse portion</li><li><strong>Line 8</strong>: Creates the excuse from the three randomly selected portions pulled from the Spreadsheet node</li><li><strong>Line 10</strong>: Clears all the data originally retrieved from the Spreadsheet node so there isn’t any unused data consuming resources</li><li><strong>Line 12</strong>: Adds the excuse to the JSON data</li><li><strong>Line 13</strong>: Sends the data to the next node</li></ul><p>When done, our workflow now looks like this:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/function-workflow.png\" class=\"kg-image lightense-target\" alt=\"Image for post\" loading=\"lazy\" width=\"1514\" height=\"629\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/function-workflow.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/02/function-workflow.png 1000w, https://blog.n8n.io/content/images/2021/02/function-workflow.png 1514w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Workflow with Excuse Nodes Added</figcaption></figure><p>Next, Nathan is going to make sure that Harvey is not stuck with Louis in a vat of mud this evening.</p><h2 id=\"not-tonight-\">Not Tonight!</h2><p>Now that Nathan has the perfect excuse to get Harvey out of that appointment with Louis, he will email Louis (as Harvey) and let him know that Harvey will not be there.</p><p>To do this, we need to use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.merge?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Merge </em>node</a> to combine the excuse with the mail information and then feed that data into the <em>Send Email</em> node which will send the reply to Louis.</p><h3 id=\"merging-the-information\">Merging the Information</h3><p>Some nodes do not forward the information they received along to the nodes that follow so the <em>Merge</em> node is useful to retrieve that information and add it to other information for processing together. So, we are going to add a <em>Merge </em>node to the workflow and connect the output from the Generate Excuse Function node to Input 1 of the <em>Merge </em>node.</p><p>Next we are going to take a second connector from <strong>Output 0</strong> of the <em>Switch </em>node (this contains the email information) and attach it to <strong>Input 2</strong> of the <em>Merge </em>node.</p><p>Inside the <em>Merge </em>node, there are two parameters that we are going to set:</p><ol><li><strong>Mode</strong>: <em>Merge By Index</em></li><li><strong>Join</strong>: <em>Left Join</em></li></ol><p>By setting these parameters, we are going to merge the data into a single JSON array and then send it on its way to the <em>Send Email</em> node.</p><h3 id=\"send-the-email\">Send the Email</h3><p>The <em>Send Email</em> node now has all of the information that it needs to send an email back to Louis. This does take a bit of configuring to get it set up right:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/send-email.png\" class=\"kg-image lightense-target\" alt=\"Image for post\" loading=\"lazy\" width=\"352\" height=\"685\"><figcaption>Parameters for the Send Email node</figcaption></figure><ul><li><strong>Credentials — SMTP</strong>: This is a new credential set that was created to connect to Harvey’s email and send email on his behalf. Much of this information is available in <a href=\"https://help.yahoo.com/kb/sln4075.html?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">this handy help article</a>.</li><li><strong>From Email</strong>: This is filled in from the <em>To</em> field supplied by the email by using the expression <code>{{$json[“to”]}}</code></li><li><strong>To Email</strong>: This is filled in from the <em>From</em> field supplied by the email by using the expression <code>{{$json[“from”]}}</code></li><li><strong>Subject</strong>: This is the same subject that the email used except it is prepended with <em>RE:</em>. This is generated using the expression <em>RE: </em><code>{{$json[“subject”]}}</code></li><li><strong>Text</strong>: This is where we put in the excuse (generated by the expression <code>{{$json[“excuse”]}}</code>) followed by “Maybe next time. Harvey”</li></ul><p>The rest of the parameters can be left empty for the time being or if you want to get fancy, you can fill in the <strong>HTML </strong>field with the same message but format the text using HTML and CSS.</p><p>You can now close the <em>Send Email</em> node.</p><p>The workflow should now look like this:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/send-email-workflow.png\" class=\"kg-image lightense-target\" alt=\"Image for post\" loading=\"lazy\" width=\"1514\" height=\"629\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/send-email-workflow.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/02/send-email-workflow.png 1000w, https://blog.n8n.io/content/images/2021/02/send-email-workflow.png 1514w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Workflow with Merge and Send Email nodes added.</figcaption></figure><h2 id=\"take-up-the-slack\">Take Up the Slack</h2><p>Now, the last thing that Harvey needs is for Louis to come in the next day and start talking about the excuse Nathan made up if Harvey knows nothing about it. This is why we are creating a “back channel” for Harvey and Nathan to communicate with each other while everyone else is none the wiser.</p><p>To accomplish this, we have set up Slack accounts for everyone in the team and set up Nathan Slack app with the proper permissions to access the Pearson Specter LLC Slack workspace. We have also created a private channel which only Harvey and Nathan have access to and added Nathan app to that channel. (While I would love to go into all the fine details about how we set up Slack, it is quite simply beyond the scope of this article. But this could turn into a future article so stay tuned! For now, check out <a href=\"https://medium.com/n8n-io/giving-kudos-to-contributors-with-github-slack-and-n8n-b3f5f4a653a6?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Giving kudos to contributors with GitHub, Slack, and n8n</a> another example.)</p><p>Now that all of that preliminary information is out of the way, here is how Nathan is configured to send Harvey a message. The first thing that we need to do is add the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.slack/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Slack</em></a><em> </em>node to the workflow and connect the output of the <em>Merge </em>node to the input of the <em>Slack </em>node.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/slack-config-1.png\" class=\"kg-image lightense-target\" alt=\"Image for post\" loading=\"lazy\" width=\"708\" height=\"860\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/slack-config-1.png 600w, https://blog.n8n.io/content/images/2021/02/slack-config-1.png 708w\"><figcaption>Parameters for Slack node</figcaption></figure><p>Next, open up the <em>Slack </em>node so we can set up the parameters. The Slack API credential is the first item we need to fill out. This is critical because if it is done incorrectly, then the node will fail.</p><p>The reset of the parameters are as follows:</p><ul><li><strong>Authentication</strong>: <em>Access Token</em></li><li><strong>Resource</strong>: <em>Message</em></li><li><strong>Operation</strong>: <em>Post</em></li><li><strong>Channel</strong>: This is the name of the private channel that we created in Slack. For Nathan, this is called <em>private</em> (Yes, unique, I know!)</li><li><strong>Text</strong>: The is the content of the actual message (we will talk a bit more about this in a bit)</li></ul><p>One of the other things that we would like to do is give our messages a bit more punch by being able to style them. We are going to accomplish this using <a href=\"https://www.markdownguide.org/tools/slack/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Markdown language</a>. To enable Markdown language, simply click on the <strong>Add option</strong> button near the bottom of the <strong>Parameters</strong> tab and click on <strong>Markdown</strong> on the pop-up menu. This will add a <strong>Markdown</strong> option which will, by default, be on.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/markdown-option.png\" class=\"kg-image lightense-target\" alt=\"Image for post\" loading=\"lazy\" width=\"346\" height=\"136\"><figcaption>Markdown Option in Slack Node</figcaption></figure><p>Now, you can style the text using Markdown language. If you are not familiar with Markdown language, it is a quick way to format text. There is an excellent tutorial on Markdown available <a href=\"https://www.markdowntutorial.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">here</a>.</p><p>The final piece to this puzzle is to generate the message to Harvey using the excuse that Nathan sent to Louis. For the <strong>Text</strong> field, we are going to create an expression that looks like this:Here is what Louis emailed you:</p><pre><code>Here is what Louis emailed you:\n\n```\n{{$json[“textPlain”]}}\n```\n\nHere is how “you” responded:\n\n&gt; {{$json[“excuse”]}}\n\n:+1: *You’re Welcome!* :smirk:</code></pre><p>This code tells the node to put into a text box the contents of Louis’s email and then add the excuse that Nathan made up. He then finishes off the message with a sassy “You’re Welcome!” with a couple of emojis for good measure.</p><p>The final message that will be posted to the private Slack channel will look like this:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/slack-message.png\" class=\"kg-image lightense-target\" alt=\"Image for post\" loading=\"lazy\" width=\"563\" height=\"205\"><figcaption>Stylized message sent by Slack node</figcaption></figure><h2 id=\"more-mail-\">More Mail!?</h2><p>Now that we have taken care of all the email from Louis, Harvey needs to be notified when he gets an email from anyone else. To accomplish this, we are going to make a copy of the <em>Slack </em>node that we just finished creating and connect the <em>Switch </em>node’s <strong>Output 3</strong> to the input of this copied node.</p><p>Next, we will reset the value of the <strong>Text</strong> field and enter <em>You’ve just received an email. You may wish to check it out.</em> into that field.</p><p>Now, whenever a non-Louis email comes in, Harvey will get a notification.</p><h2 id=\"what-else-could-nathan-do\">What Else Could Nathan Do?</h2><p>Because Nathan’s abilities are only limited by the services that are available through the internet, there are a lot of things that we could get Nathan to do for us. Some ideas include:</p><ul><li>Buy and sell items online</li><li>Speak and be spoken to</li><li>Make dinner reservations or order food</li><li>Oversee our smart homes</li><li>Manage our communications (text messages, email, phone calls, etc.)</li><li>Make recommendations (movies, recipes, etc.)</li><li>Direct employees and customers</li><li>Whatever else comes to mind!</li></ul><h2 id=\"everyone-introducing-nathan-\">Everyone, Introducing Nathan!</h2><p>That concludes the first steps in creating Nathan! Let’s do a brief review of what Nathan does so far:</p><ol><li>Check Harvey’s Email</li><li>If there is new email check if it is from Louis</li><li>If it is from Louis:</li><li>Make-up an excuse</li><li>Email the excuse to Louis</li><li>Send Harvey a message on Slack with the excuse</li><li>If it is not from Louis:</li><li>Send a Slack message to Harvey that there is a new email</li></ol><p>The final workflow looks like this:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/02/workflow.png\" class=\"kg-image lightense-target\" alt=\"Image for post\" loading=\"lazy\" width=\"1514\" height=\"629\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/02/workflow.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/02/workflow.png 1000w, https://blog.n8n.io/content/images/2021/02/workflow.png 1514w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Final Workflow for Nathan</figcaption></figure><p>I’d be excited to check out what you’ve built using n8n! In case you’ve run into an issue while following the tutorial, feel free to reach out to me on <a href=\"https://twitter.com/tephlondude?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Twitter</a> or ask for help on our <a href=\"https://community.n8n.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">forum</a> 💙</p><p><em>Start automating!</em></p><p><em>The best part is, you can start automating for free with n8n. The easiest way to get started is to </em><a href=\"https://n8n.io/pricing?cloud=false&amp;ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>download the desktop app,</em></a><em> or sign up for a <a href=\"https://n8n.io/cloud?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a>. Thanks to n8n’s fair-code license, you can also </em><a href=\"https://docs.n8n.io/hosting/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>self-host n8n for free</em></a><em>.</em></p>\n\t\t<div class=\"newsletter-banner\">\n\t    <div class=\"newsletter-banner-content\">\n\t      <div class=\"section-header\">\n\t        <h2>Subscribe to <span>n8n newsletter</span></h2>\n\t        <div class=\"section-subheader--bottom\">\n\t          Get the best, coolest, and latest in automation and low-code delivered to your inbox each week.\n\t        </div>\n\t      </div>\n\t      <div class=\"newsletter-banner-form\">\n\t        <form autocomplete=\"off\" class=\"contact-form\" onsubmit=\"subscribeNewsletter(event)\">\n\t        \t<div id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB\" data-callback=\"submitSubscription\" data-size=\"invisible\"><div class=\"grecaptcha-badge\" data-style=\"bottomright\" style=\"width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;\"><div class=\"grecaptcha-logo\"><iframe title=\"reCAPTCHA\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-xt5u0t1t25ik\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB&amp;co=aHR0cHM6Ly9ibG9nLm44bi5pbzo0NDM.&amp;hl=en&amp;v=jt8Oh2-Ue1u7nEbJQUIdocyd&amp;size=invisible&amp;cb=q7jp7tlvzx1r\"></iframe></div><div class=\"grecaptcha-error\"></div><textarea id=\"g-recaptcha-response\" name=\"g-recaptcha-response\" class=\"g-recaptcha-response\" style=\"width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;\"></textarea></div><iframe style=\"display: none;\"></iframe></div>\n\t          <div class=\"input-wrapper\">\n\t            <input placeholder=\"Email\" name=\"email\" type=\"email\" required=\"required\" class=\"\">\n\t            <div class=\"messages\">\n\t              <div class=\"message message--error\">Something went wrong. Please try again later.</div>\n\t              <div class=\"message message--success\">Subscribed!</div>\n\t            </div>\n\t          </div>\n\t          <button type=\"submit\" class=\"submit-btn\">Subscribe</button>\n\t        </form>\n\t      </div>\n\t    </div>\n    </div>\n\t\t<div class=\"post-share-section\">\n\t<div class=\"post-share-wrap\">\n\t\t<a href=\"https://twitter.com/intent/tweet?text=Build%20your%20own%20virtual%20assistant%20with%20n8n%3A%20A%20step%20by%20step%20guide&amp;url=https://blog.n8n.io/build-your-own-virtual-assistant-with-n8n-a-step-by-step-guide/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\"></path></svg></a>\n\t\t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/build-your-own-virtual-assistant-with-n8n-a-step-by-step-guide/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z\"></path></svg></a>\n\t\t<!-- <a href=\"javascript:\" class=\"post-share-link\" id=\"copy\" data-clipboard-target=\"#copy-link\" aria-label=\"Copy link icon\"><svg role=\"img\" viewBox=\"0 0 33 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M27.3999996,13.4004128 L21.7999996,13.4004128 L21.7999996,19 L18.9999996,19 L18.9999996,13.4004128 L13.3999996,13.4004128 L13.3999996,10.6006192 L18.9999996,10.6006192 L18.9999996,5 L21.7999996,5 L21.7999996,10.6006192 L27.3999996,10.6006192 L27.3999996,13.4004128 Z M12,20.87 C7.101,20.87 3.13,16.898 3.13,12 C3.13,7.102 7.101,3.13 12,3.13 C12.091,3.13 12.181,3.139 12.272,3.142 C9.866,5.336 8.347,8.487 8.347,12 C8.347,15.512 9.866,18.662 12.271,20.857 C12.18,20.859 12.091,20.87 12,20.87 Z M20.347,0 C18.882,0 17.484,0.276 16.186,0.756 C14.882,0.271 13.473,0 12,0 C5.372,0 0,5.373 0,12 C0,18.628 5.372,24 12,24 C13.471,24 14.878,23.726 16.181,23.242 C17.481,23.724 18.88,24 20.347,24 C26.975,24 32.347,18.628 32.347,12 C32.347,5.373 26.975,0 20.347,0 Z\"/></svg></a>\n\t\t<small class=\"share-link-info\">The link has been copied!</small> -->\n\t</div>\n\t<input type=\"text\" value=\"https://blog.n8n.io/build-your-own-virtual-assistant-with-n8n-a-step-by-step-guide/\" id=\"copy-link\" aria-label=\"Copy link input\">\n</div>",
  "readme": "There is a lot to do for the average person living in the 21st century. Between work, family, and personal obligations, it is not uncommon for someone to get up early in the morning and run hard all day long just to collapse in bed that night with a list of tasks still unfinished.\n\nMany people will turn to a virtual assistant to help them with these daily tasks. This can take the form of someone who works remotely for you, receiving direction through the internet. But, more recently, a new type of virtual assistant has emerged.\n\nThis is the electronic virtual assistant. They are not people at all. Rather, they are programs on our computer/phone or devices that sit on our kitchen counter at home. Two well known examples of these virtual assistants are the [Amazon Alexa](https://en.wikipedia.org/wiki/Amazon_Alexa?ref=blog.n8n.io) and the [Google Assistant](https://en.wikipedia.org/wiki/Google_Assistant?ref=blog.n8n.io). They can find details about your day or retrieve information for you quickly and (sometimes) easily.\n\nThe one challenge with these virtual assistants is that, at their core, they have a number of basic abilities that can be augmented with different skills created by either the manufacturer or a 3rd party. Because of this model, the majority of the abilities available from your personal assistant do not apply to you and, even worse, they may not have the ability to actually perform the tasks that you want them to do.\n\n## A Lesson from Suits\n\nIf you’ve watched even just one episode of the television series [Suits](https://www.usanetwork.com/suits?ref=blog.n8n.io), it becomes pretty apparent almost immediately that, despite all of his self confidence, the main character [Harvey](https://suits.fandom.com/wiki/Harvey_Specter?ref=blog.n8n.io) would not be where he is today without his personal assistant [Donna](https://suits.fandom.com/wiki/Donna_Paulsen?ref=blog.n8n.io).\n\nDonna knows what Harvey wants before Harvey does. Donna anticipates Harvey’s needs and acts on them so that by time Harvey realizes he needs something, Donna has already done it. She is the glue that holds his life together.\n\nWouldn’t it be wonderful if our virtual assistants were more like Donna?\n\nWell, I may have some good news for you!\n\n## Nathan is Here to Help\n\nWhile it would be impossible to completely recreate the [awesome that is Donna](https://www.youtube.com/watch?v=3TMNcCquWhg&ref=blog.n8n.io), we can definitely put together a useful virtual assistant who can deal with some of the day to day details that somehow find a way to consume our lives!\n\nIn this article, we are going to show you how to build your very own virtual assistant using many of the services that you already use today and connecting them all together with [n8n](https://n8n.io/?ref=blog.n8n.io). To add a personal touch to our virtual assistant we are going to call him Nathan.\n\nThroughout this article, I’m going to use a Suits analogy. If you haven’t watched Suits, that’s OK! Everything will still make sense so feel free to ignore it! 😄\n\n## Goals\n\nWe are going to set some specific short term goals which we will complete during this article and then some long term goals which are ideas we can add-on at a later date once we build this initial framework.\n\n  * Give Nathan the ability to perform basic email management\n  * Set up a way to communicate with Nathan behind the scenes\n  * Give Nathan some sass!\n\n\n\n## Prerequisites\n\nIn order to get Nathan up and running, we need to have the following in place:\n\n  1. [**n8n**](https://n8n.io/?ref=blog.n8n.io)— You can get this up and running by checking out the [Quickstart](https://docs.n8n.io/try-it-out/quickstart/?ref=blog.n8n.io) page. You should have a fresh install without any workflows. You can also sign-up for a [free n8n cloud trial](https://n8n.io/cloud?ref=blog.n8n.io) to get access to our hosted service. This workflow was created in n8n version 0.104.2.\n  2. [**Slack**](https://slack.com/?ref=blog.n8n.io) — You will need a Slack workspace set up with at least one account for the person who is being assisted. You can find information about your Slack requirements [here](https://docs.n8n.io/credentials/slack/?ref=blog.n8n.io).\n  3. [**Yahoo Mail**](https://mail.yahoo.com/?ref=blog.n8n.io) — This is used for communication between our users. (Please note that I have decided to use Yahoo mail but most other mail providers will work as well. For example, [Gmail](https://docs.n8n.io/credentials/imap/?ref=blog.n8n.io#using-gmail), [Outlook.com](https://support.microsoft.com/en-us/office/pop-imap-and-smtp-settings-for-outlook-com-d088b986-291d-42b8-9564-9c414e2aa040?ref=blog.n8n.io), [Zoho](https://www.zoho.com/mail/help/zoho-smtp.html?ref=blog.n8n.io) and others are fine to use.) Set up the Yahoo mail credentials following the instructions mentioned [here](https://docs.n8n.io/credentials/imap/?ref=blog.n8n.io#using-yahoo-mail).\n\n\n\n## n8n\n\nThe core of our Nathan is the [n8n](https://n8n.io/?ref=blog.n8n.io) system. It has two primary purposes:\n\n  1. Connect services together that do not presently talk with each other\n  2. Provide the logic for how these services interact\n\n\n\n## A Note About Screenshots and the Start Node\n\nThe Start node is the default node for a workflow and can’t be removed. It’s used to initiate processing in a workflow that doesn’t begin with a trigger node (something you’ll learn about next). In the screenshots, the Start node has been omitted for clarity. You can also get [your own copy of the workflow](https://n8n.io/workflows/632?ref=blog.n8n.io) to help you follow along as we go.\n\nOkay, enough of the preamble. Let’s get this project started!\n\n## You’ve Got Mail!\n\nThe first ability that we want to give Nathan is to work with Harvey’s email. We are going to accomplish this using two integrations:\n\n  1. [_EmailReadImap_](https://docs.n8n.io/nodes/n8n-nodes-base.emailReadImap?ref=blog.n8n.io) __ — reads email from an IMAP enabled mailbox and executes a workflow. This node is sometimes referred to as _IMAP Email_.\n  2. [_Send Email_](https://docs.n8n.io/nodes/n8n-nodes-base.emailSend/?ref=blog.n8n.io) — sends emails using information received by the node from a workflow.\n\n\n\n### Reading Email\n\nThe first node we are going to configure is the _EmailReadImap_ node. This node will allow Nathan to monitor Harvey’s email and then perform actions based on the email.\n\n### Add the EmailReadImap Node\n\nThe first step is to add the node into the workflow. To do this, follow these steps:\n\n![Image for post](https://blog.n8n.io/content/images/2021/02/imap.png)EmailReadImap node parameters\n\n  1. Click on the '**+** ' button in the top right corner\n  2. Under the **All** tab, find the _EmailReadImap_ node and click on it to open up the node parameters\n  3. In the **Parameters** tab, under **Credentials > IMAP** select 'Create New _'_ and enter the credentials you created earlier.\n  4. I’ve also chosen to change the name of the node to _Read Harvey’s Email_ so that we will know exactly what this node does when looking at the workflow (Trust me, this helps later on when things get really complicated). We rename nodes by opening the node, clicking on the title of the node at the top left corner to enable renaming the node, edit the name and then click on the ✔ to set the new node name.\n  5. You can leave the rest of the options as defaults\n\n\n\n### Test the EmailReadImap Node\n\nBefore we move on, let’s test the _EmailReadImap_ node to ensure that it is working properly.\n\n**Pro Tip:** Save any changes you made to your workflow before you test it. This way, you will not lose your work if you run into any problems.\n\n![Image for post](https://blog.n8n.io/content/images/2021/02/test.png)Email waiting for Harvey\n\n  1. Make sure that there is an unread email for the node to read. As it turns out, it appears that Louis has plans for him and Harvey after court this evening\n  2. In the open _EmailReadImap_ node, click on the **Execute Node** button in the top right corner. This will get the node to reach out and read Harvey’s email.\n  3. If everything works right, you should get a table of information in the right hand pane with the following information:  \n• **textHTML** : The message body in HTML format  \n• **textPlain** : The message body in plain text format  \n• **metadata** : All of the information that is needed for the mail client to read the message (mainly looks like gibberish)  \n• **date** : Time and date that the message was sent  \n• **from** : Name and email address of the person who sent the message  \n• **to** : Name and email address of the person who sent the message  \n• **subject** : The subject line of the email\n\n\n\nIf we go back into Harvey’s email, we will also see that the email from Louis is now marked as read compared to the unread message from Mike that came in after we tested the node:\n\n![Image for post](https://blog.n8n.io/content/images/2021/02/read-email.png)Email after executing node and new mail has come in\n\nYou can now close the node and your workflow should look something like this:\n\n![Image for post](https://blog.n8n.io/content/images/2021/02/saved-workflow.png)Workflow after adding _EmailReadImap node_\n\nBecause the _EmailReadImap_ node is a trigger node, it does not have an input but it is triggered each time a new email is detected so that the email can be processed.\n\n* * *\n\n## Making a Decision\n\nNow that we have the email, what do we do with it? Well, Harvey has given Nathan explicit instructions that he does not want to waste time on any of Louis’s emails. So, Nathan is going to check who sent the email.\n\nThere are a couple of ways to do this in n8n:\n\n  1. [**_IF_ node**](https://docs.n8n.io/nodes/n8n-nodes-base.if/?ref=blog.n8n.io): Checks a parameter and performs one action if it results in a true result and performs another if it results in a false result\n  2. **[ _Switch_ node](https://docs.n8n.io/nodes/n8n-nodes-base.switch?ref=blog.n8n.io)**: Checks a parameter and performs one of many actions, depending upon the value of the parameter.\n\n\n\nWhile either would work for Nathan, we are going to use the _Switch_ node because it allows us more flexibility for further expansion later.\n\nOnce you have added the _Switch_ node and made sure that the output from the _EmailReadImap_ node is connected to the input of the new _Switch_ node, this is how we are going to configure it:\n\n![](https://blog.n8n.io/content/images/2021/02/switch-node.png)Final Switch node Parameters\n\n  1. Set the following parameters in the **Parameters** section:  \n**• Mode** : Rules  \n• **Data Type** : String\n  2. For **Value 1** , click on the gears icon to the right of the field and click on _Add Expression_ in the dropdown menu to open up the variable selector windows\n  3. Click on **Current Node > Input Data > JSON > from**. You should see the expression display `{{$json[“from”]}}` and the result below it read _Louis Litt <louis_litt_1970@yahoo.com>_. This displays the expression that you need to look for and what it is presently based on the information provided by the previous node.\n  4. Close the **Edit Expression** window\n  5. Under **Routing Rules:** , click the **Add Routing Rule** button. Three new labels and fields appear\n  6. Fill in the rule fields as follows:  \n• **Operation** : Equal  \n**• Value 2** : Louis Litt <louis_litt_1970@yahoo.com>  \n• **Output** : 0\n  7. Beneath the **Add Routing Rule** button, select _3_ for the **Fallback Output**\n\n\n\nThat completes the configuration of the _Switch_ node. What we have told it to do is this:\n\nIf the unread email is from Louis, send it for further processing. Otherwise, let it go through.\n\nI’ve also taken the liberty of renaming the node _Who Is The Email From?_.\n\n### Test the Switch Node\n\nTo test the _Switch_ node, simply click on the **Execute Node** button at the top right corner of the node. If we have configured everything correctly, you should see an indicator above the output side of the node windows.\n\n![Image for post](https://blog.n8n.io/content/images/2021/02/test-switch.png)Switch Node Output Indicator\n\nThis is telling me that we are seeing the results for **Output 0**. It is also telling me that the _Switch_ node sent information out of **Output 0** and this information is displayed below. In this case, it is the JSON data that was received in the input sent from the _EmailReadImap_ node (i.e. the contents of the email).\n\nIf you were to click on the dropdown field beside the **Output** label, the **Results** would change and the output information below would also change to reflect the results and the output from the selected **Output**.\n\nYou can now close the _Switch_ node. The workflow now looks like this:\n\n![Image for post](https://blog.n8n.io/content/images/2021/02/after-switch-workflow.png)Workflow after Switch node added\n\n* * *\n\n## Making Up Excuses\n\nSince Harvey doesn’t want to do anything with Louis, Nathan needs to make up a good excuse for Harvey. Fortunately, he has several (13,800 to be exact) excuses ready to go. We just need to build the excuse generator for him.\n\nThere are three separate nodes to this part of the system:\n\n  1. [_Read Binary File_](https://docs.n8n.io/nodes/n8n-nodes-base.readBinaryFile/?ref=blog.n8n.io)\n  2. [ _Spreadsheet File_](https://docs.n8n.io/nodes/n8n-nodes-base.spreadsheetFile/?ref=blog.n8n.io)\n  3. [ _Function_](https://docs.n8n.io/nodes/n8n-nodes-base.function/?ref=blog.n8n.io)\n\n\n\n### Spreadsheet Node Note\n\nWhile I chose to create a copy of the Google Sheet as an Excel spreadsheet and then access it from the _Read Binary File_ node, I could have just as easily accessed the information directly from Google Sheets using the [_Google Sheets_ node](https://docs.n8n.io/nodes/n8n-nodes-base.googleSheets?ref=blog.n8n.io). For bonus points, see if you can replace the _Read Binary File_ and _Spreadsheet File_ nodes with a _Google Sheets_ node.\n\n### Create a Spreadsheet\n\nThe raw data for the generator is stored in an Excel spreadsheet. You can see the Google Sheets version yourself [here](https://docs.google.com/spreadsheets/d/1mZXiALzjpcGhtDzpweJmQ1jYJBhkv92x855lumoLqi8/edit?usp=sharing&ref=blog.n8n.io). Download the file as an Excel spreadsheet and then save it in the same folder where you have installed n8n.\n\nThis spreadsheet acts like a database and stores each separate part of the excuse in the file. This spreadsheet should be installed somewhere that the n8n server can get access to; either on the n8n server itself or a remotely mounted network share.\n\n### Read Data as Binary Information\n\nNext, we have to load the binary file into the system. This is done using a _Read Binary File_ node. There are only two parameters for this node:\n\n  1. **File Path** : The full file path to the spreadsheet\n  2. **Property Name** : The property which will contain the binary data. This can be left as the default _data_\n\n\n\nOnce they are set, the node can be closed.\n\n### Retrieve Information from Spreadsheet\n\nWe can now actually view the information stored in the spreadsheet. Using the _Spreadsheet File_ node, we can retrieve the binary data output from the previous node.\n\nThe two parameters to set are:\n\n  1. **Operation** : Since we are reading from the file, we set the value to _Read from file_\n  2. **Binary Property** : This needs to match the **Property Name** value entered in the _Read Binary File_ node previously\n\n\n\n### Create the Excuse\n\nThe final node in our excuse generator workflow is a _Function_ node. The _Function_ node is a bit special because it gives you the freedom to do pretty much anything you want with the data that it receives and spit out whatever you want on the other side as long as it follows the proper data structure (See [Data Structure](https://docs.n8n.io/data/data-structure/?ref=blog.n8n.io) for more information).\n\nThis is the code that runs in the _Function_ node:\n    \n    \n    var leadinmax = 24;\n    var perpmax = 25;\n    var delaymax = 23;\n    var leadin = Math.floor((Math.random() * leadinmax ) + 1);\n    var perp = Math.floor((Math.random() * perpmax ) + 1);\n    var delay = Math.floor((Math.random() * delaymax) + 1);\n    \n    var excuse = items[leadin].json.Leadin + “ “ + items[perp].json.Perpetrator + “ “ + items[delay].json.Delay;\n    \n    items = [{json:{}}];\n    items[0].json.excuse = excuse;\n    \n    return items;\n\nAnd this is what it does:\n\n  * **Lines 1–3** : The number of entries that are available for each of the three portions of the excuse\n  * **Lines 4–6** : Generates a random number to retrieve a random excuse portion\n  * **Line 8** : Creates the excuse from the three randomly selected portions pulled from the Spreadsheet node\n  * **Line 10** : Clears all the data originally retrieved from the Spreadsheet node so there isn’t any unused data consuming resources\n  * **Line 12** : Adds the excuse to the JSON data\n  * **Line 13** : Sends the data to the next node\n\n\n\nWhen done, our workflow now looks like this:\n\n![Image for post](https://blog.n8n.io/content/images/2021/02/function-workflow.png)Workflow with Excuse Nodes Added\n\nNext, Nathan is going to make sure that Harvey is not stuck with Louis in a vat of mud this evening.\n\n## Not Tonight!\n\nNow that Nathan has the perfect excuse to get Harvey out of that appointment with Louis, he will email Louis (as Harvey) and let him know that Harvey will not be there.\n\nTo do this, we need to use the [_Merge_ node](https://docs.n8n.io/nodes/n8n-nodes-base.merge?ref=blog.n8n.io) to combine the excuse with the mail information and then feed that data into the _Send Email_ node which will send the reply to Louis.\n\n### Merging the Information\n\nSome nodes do not forward the information they received along to the nodes that follow so the _Merge_ node is useful to retrieve that information and add it to other information for processing together. So, we are going to add a _Merge_ node to the workflow and connect the output from the Generate Excuse Function node to Input 1 of the _Merge_ node.\n\nNext we are going to take a second connector from **Output 0** of the _Switch_ node (this contains the email information) and attach it to **Input 2** of the _Merge_ node.\n\nInside the _Merge_ node, there are two parameters that we are going to set:\n\n  1. **Mode** : _Merge By Index_\n  2. **Join** : _Left Join_\n\n\n\nBy setting these parameters, we are going to merge the data into a single JSON array and then send it on its way to the _Send Email_ node.\n\n### Send the Email\n\nThe _Send Email_ node now has all of the information that it needs to send an email back to Louis. This does take a bit of configuring to get it set up right:\n\n![Image for post](https://blog.n8n.io/content/images/2021/02/send-email.png)Parameters for the Send Email node\n\n  * **Credentials — SMTP** : This is a new credential set that was created to connect to Harvey’s email and send email on his behalf. Much of this information is available in [this handy help article](https://help.yahoo.com/kb/sln4075.html?ref=blog.n8n.io).\n  * **From Email** : This is filled in from the _To_ field supplied by the email by using the expression `{{$json[“to”]}}`\n  * **To Email** : This is filled in from the _From_ field supplied by the email by using the expression `{{$json[“from”]}}`\n  * **Subject** : This is the same subject that the email used except it is prepended with _RE:_. This is generated using the expression _RE:_`{{$json[“subject”]}}`\n  * **Text** : This is where we put in the excuse (generated by the expression `{{$json[“excuse”]}}`) followed by “Maybe next time. Harvey”\n\n\n\nThe rest of the parameters can be left empty for the time being or if you want to get fancy, you can fill in the **HTML** field with the same message but format the text using HTML and CSS.\n\nYou can now close the _Send Email_ node.\n\nThe workflow should now look like this:\n\n![Image for post](https://blog.n8n.io/content/images/2021/02/send-email-workflow.png)Workflow with Merge and Send Email nodes added.\n\n## Take Up the Slack\n\nNow, the last thing that Harvey needs is for Louis to come in the next day and start talking about the excuse Nathan made up if Harvey knows nothing about it. This is why we are creating a “back channel” for Harvey and Nathan to communicate with each other while everyone else is none the wiser.\n\nTo accomplish this, we have set up Slack accounts for everyone in the team and set up Nathan Slack app with the proper permissions to access the Pearson Specter LLC Slack workspace. We have also created a private channel which only Harvey and Nathan have access to and added Nathan app to that channel. (While I would love to go into all the fine details about how we set up Slack, it is quite simply beyond the scope of this article. But this could turn into a future article so stay tuned! For now, check out [Giving kudos to contributors with GitHub, Slack, and n8n](https://medium.com/n8n-io/giving-kudos-to-contributors-with-github-slack-and-n8n-b3f5f4a653a6?ref=blog.n8n.io) another example.)\n\nNow that all of that preliminary information is out of the way, here is how Nathan is configured to send Harvey a message. The first thing that we need to do is add the [_Slack_](https://docs.n8n.io/nodes/n8n-nodes-base.slack/?ref=blog.n8n.io) __ node to the workflow and connect the output of the _Merge_ node to the input of the _Slack_ node.\n\n![Image for post](https://blog.n8n.io/content/images/2021/02/slack-config-1.png)Parameters for Slack node\n\nNext, open up the _Slack_ node so we can set up the parameters. The Slack API credential is the first item we need to fill out. This is critical because if it is done incorrectly, then the node will fail.\n\nThe reset of the parameters are as follows:\n\n  * **Authentication** : _Access Token_\n  * **Resource** : _Message_\n  * **Operation** : _Post_\n  * **Channel** : This is the name of the private channel that we created in Slack. For Nathan, this is called _private_ (Yes, unique, I know!)\n  * **Text** : The is the content of the actual message (we will talk a bit more about this in a bit)\n\n\n\nOne of the other things that we would like to do is give our messages a bit more punch by being able to style them. We are going to accomplish this using [Markdown language](https://www.markdownguide.org/tools/slack/?ref=blog.n8n.io). To enable Markdown language, simply click on the **Add option** button near the bottom of the **Parameters** tab and click on **Markdown** on the pop-up menu. This will add a **Markdown** option which will, by default, be on.\n\n![Image for post](https://blog.n8n.io/content/images/2021/02/markdown-option.png)Markdown Option in Slack Node\n\nNow, you can style the text using Markdown language. If you are not familiar with Markdown language, it is a quick way to format text. There is an excellent tutorial on Markdown available [here](https://www.markdowntutorial.com/?ref=blog.n8n.io).\n\nThe final piece to this puzzle is to generate the message to Harvey using the excuse that Nathan sent to Louis. For the **Text** field, we are going to create an expression that looks like this:Here is what Louis emailed you:\n    \n    \n    Here is what Louis emailed you:\n    \n    ```\n    {{$json[“textPlain”]}}\n    ```\n    \n    Here is how “you” responded:\n    \n    > {{$json[“excuse”]}}\n    \n    :+1: *You’re Welcome!* :smirk:\n\nThis code tells the node to put into a text box the contents of Louis’s email and then add the excuse that Nathan made up. He then finishes off the message with a sassy “You’re Welcome!” with a couple of emojis for good measure.\n\nThe final message that will be posted to the private Slack channel will look like this:\n\n![Image for post](https://blog.n8n.io/content/images/2021/02/slack-message.png)Stylized message sent by Slack node\n\n## More Mail!?\n\nNow that we have taken care of all the email from Louis, Harvey needs to be notified when he gets an email from anyone else. To accomplish this, we are going to make a copy of the _Slack_ node that we just finished creating and connect the _Switch_ node’s **Output 3** to the input of this copied node.\n\nNext, we will reset the value of the **Text** field and enter _You’ve just received an email. You may wish to check it out._ into that field.\n\nNow, whenever a non-Louis email comes in, Harvey will get a notification.\n\n## What Else Could Nathan Do?\n\nBecause Nathan’s abilities are only limited by the services that are available through the internet, there are a lot of things that we could get Nathan to do for us. Some ideas include:\n\n  * Buy and sell items online\n  * Speak and be spoken to\n  * Make dinner reservations or order food\n  * Oversee our smart homes\n  * Manage our communications (text messages, email, phone calls, etc.)\n  * Make recommendations (movies, recipes, etc.)\n  * Direct employees and customers\n  * Whatever else comes to mind!\n\n\n\n## Everyone, Introducing Nathan!\n\nThat concludes the first steps in creating Nathan! Let’s do a brief review of what Nathan does so far:\n\n  1. Check Harvey’s Email\n  2. If there is new email check if it is from Louis\n  3. If it is from Louis:\n  4. Make-up an excuse\n  5. Email the excuse to Louis\n  6. Send Harvey a message on Slack with the excuse\n  7. If it is not from Louis:\n  8. Send a Slack message to Harvey that there is a new email\n\n\n\nThe final workflow looks like this:\n\n![Image for post](https://blog.n8n.io/content/images/2021/02/workflow.png)Final Workflow for Nathan\n\nI’d be excited to check out what you’ve built using n8n! In case you’ve run into an issue while following the tutorial, feel free to reach out to me on [Twitter](https://twitter.com/tephlondude?ref=blog.n8n.io) or ask for help on our [forum](https://community.n8n.io/?ref=blog.n8n.io) 💙\n\n _Start automating!_\n\n_The best part is, you can start automating for free with n8n. The easiest way to get started is to_[ _download the desktop app,_](https://n8n.io/pricing?cloud=false&ref=blog.n8n.io)_or sign up for a[free n8n cloud trial](https://n8n.io/cloud?ref=blog.n8n.io). Thanks to n8n’s fair-code license, you can also _[_self-host n8n for free_](https://docs.n8n.io/hosting/?ref=blog.n8n.io) _._\n\n## Subscribe to n8n newsletter\n\nGet the best, coolest, and latest in automation and low-code delivered to your inbox each week. \n\nSomething went wrong. Please try again later.\n\nSubscribed!\n\nSubscribe\n\n[](https://twitter.com/intent/tweet?text=Build%20your%20own%20virtual%20assistant%20with%20n8n%3A%20A%20step%20by%20step%20guide&url=https://blog.n8n.io/build-your-own-virtual-assistant-with-n8n-a-step-by-step-guide/) [](https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/build-your-own-virtual-assistant-with-n8n-a-step-by-step-guide/)\n",
  "crawled_at": "2025-05-28T11:00:46.287506"
}