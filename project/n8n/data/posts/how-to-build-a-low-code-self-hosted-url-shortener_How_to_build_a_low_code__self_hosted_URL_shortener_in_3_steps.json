{
  "url": "https://blog.n8n.io/how-to-build-a-low-code-self-hosted-url-shortener/",
  "title": "How to build a low-code, self-hosted URL shortener in 3 steps",
  "excerpt": "The currently available URL shorteners can be limiting. That's why I built my own–here I show you how!",
  "thumbnail": "https://blog.n8n.io/content/images/size/w1200/2021/09/URL-shortener-blogpost-cover.svg",
  "tags": [
    "Tutorial"
  ],
  "html": "<p>When choosing software, I always consider privacy as a make-or-break factor. One tool that I needed recently for a project was a URL shortener. There are many openly available apps out there, but using them is not the best option for me for two main reasons: I can lose control over my data and get frustrated with their limitations. </p><p>The alternative is to build my own app. Thankfully, n8n offers the needed capabilities to rapidly build web applications, without going through long coding nights. In this post, I will show you how I built my self-hosted URL shortener that can be customized and extended to fulfill different use cases. The final <a href=\"https://n8n.io/workflows/1093?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">n8n workflow</a> looks like this:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh4.googleusercontent.com/wA4jLYlLBgC5QC91-4OsZH3Nqf7VW8nuLjbAh8Ug4LmbR2sP2nkehgdHMMOHxP9AJIbTUudb3yil821LJi8uYw9c89dAXnSvjDlcrjyq3ONVOeWGo4la6puawXfCHVyCDeX5Mu1X\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>URL Shortener Workflow</figcaption></figure><h2 id=\"the-idea\">The Idea</h2><p>n8n hosts monthly community meetups, where members can present their workflows. At the <a href=\"https://www.youtube.com/watch?v=mWZD8JPuCvE&amp;ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">April meetup</a>, I was inspired by <a href=\"https://twitter.com/tephlondude?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Jason</a>'s presentation of a newsletter sign-up workflow and his unique approach of using n8n as a full-fledged, highly extensible back-end. I decided to use that same approach to build a personal, self-hosted URL shortener that serves three functions:</p><ul><li>Creating the short URL</li><li>Redirecting to the long URL</li><li>Generating statistics on a dashboard</li></ul><h2 id=\"requirements\">Requirements</h2><p>This project was created using n8n and nginx docker images, so before starting, I needed <a href=\"https://docs.docker.com/engine/install/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Docker</a> and <a href=\"https://docs.docker.com/compose/install/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Docker-Compose</a> installed. Also, I used <a href=\"https://airtable.com/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><strong>Airtable</strong></a> as my database, which requires an Airtable<em> </em>account. To follow this tutorial, you need to have some basic experience with n8n and know how to configure nodes and expressions. Now let's get started!</p><h2 id=\"quickstart\">Quickstart</h2><p>To have a re-deployable infrastructure, I relied on a docker-compose file, in which I specified the necessary information about the docker containers.</p><p>First, I created an <code>nginx.conf</code> file to configure my nginx instance as a proxy. That way I could listen on port 80 of the localhost.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-nginx\">events {}\nhttp {\n    server {\n        listen 80;\n        location / {\n            proxy_pass http://n8n;\n            # enabling EventSource\n            proxy_set_header Connection '';\n            proxy_http_version 1.1;\n            chunked_transfer_encoding off;\n        }\n        location /w/ {\n            proxy_pass http://n8n/webhook/;\n        }\n    }\n}</code></pre><figcaption>nginx.conf file content</figcaption></figure><p>Second, I configured the default <strong>n8n</strong> docker image to enable basic authentication. Also, I initiated the <code>N8N_HOST</code> and <code>VUE_APP_URL_BASE_API</code> environment variables with my preferred short URL base: <strong>n8n.ly</strong>.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-yaml\">version: '3.1'\n\nservices:\n\n  n8n:\n    image: n8nio/n8n\n    container_name: n8n\n    restart: always\n    environment:\n      - N8N_BASIC_AUTH_ACTIVE=true\n      - N8N_BASIC_AUTH_USER=user\n      - N8N_BASIC_AUTH_PASSWORD=secret\n      - N8N_PROTOCOL=http\n      - N8N_HOST=n8n.ly\n      - N8N_PORT=80\n      - VUE_APP_URL_BASE_API=http://n8n.ly\n    volumes:\n    # data persistence\n      - ./n8nData:/home/node/.n8n\n    networks:\n      - shared-network\n    command: /bin/sh -c \"n8n start\"\n\n  nginx:\n    image: nginx\n    container_name: nginx\n    restart: always\n    ports:\n      - 80:80\n    volumes:\n    # edited config\n      - ./nginx.conf:/etc/nginx/nginx.conf\n    networks:\n      - shared-network\n\nnetworks:\n  shared-network:</code></pre><figcaption>docker-compose file content</figcaption></figure><p>Third, I registered the short URL base into my local DNS, by appending the next line to the <code>/etc/hosts</code> file:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-/etc/hosts\">127.0.0.1       n8n.ly</code></pre><figcaption>/etc/hosts last line</figcaption></figure><p>Now I could reference the <strong>n8n.ly</strong> domain locally and get redirected to my n8n instance.</p><h2 id=\"the-workflow\">The Workflow</h2><p>The URL shortener is powered by a workflow containing 29 nodes. The workflow is split into three lines:</p><h3 id=\"1-short-url-creation-line-with-12-nodes\">1. Short URL creation line with 12 nodes</h3><p>In this line, I used a combination of <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.webhook/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Webhook</em> node</a>, <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.set/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Set</em> node</a>, and <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.if/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>IF</em> node</a> to validate the request, then a combination of <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.crypto/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Crypto</em> node</a>, <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.airtable/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Airtable</em> node</a>, and <em>Set</em> node to create the short URL and append it to the database. Finally, I used the <em>Set</em> node to return the result.</p><h3 id=\"2-redirection-line-with-12-nodes\">2. Redirection line with 12 nodes</h3><p>In this line, I used a combination of <em>Webhook</em> node, <em>Set</em> node, and <em>IF</em> node to receive the request, then the <em>Airtable</em> node, <em>IF</em> node, and <em>Set</em> node to retrieve the long URL. Finally, I used a <em>Set node </em>to prepare the result.</p><h3 id=\"3-dashboard-line-with-5-nodes\">3. Dashboard line with 5 nodes</h3><p>In this line, I handled the request using a <em>Webhook</em> node and used the <em>Airtable</em> node to retrieve all records. Then I converted those records into embedded statistics using a combination of <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.function/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Function</em> node</a> and <em>Set</em> node.</p><p>Now let’s go through each workflow line.</p><h3 id=\"1-short-url-creation\">1. Short URL creation</h3><p>I started by building the short URL creation line. In it, I generated a unique ID for the provided long URL and saved a record containing the generated ID, the long URL, the short URL, the number of clicks, and the hostname to a database. This is what the workflow line looks like:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh5.googleusercontent.com/WI5vSc40aRkk-KafZ2qU0z536LwcCFwzgNIUuQg8H2GXpa2tbspdp_80C4KRNs_yMKMshVMqycynCSY1NNHV_nxp78on_T_Ki-rxiKw3wpoMv4Pi5O-zfoxAGuGoldm1DAtn3swt\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Short URL creation workflow</figcaption></figure><p>Initially, I configured my <em>Webhook</em> node to accept requests on http://n8n.ly/w/sh and to return the last JSON object as HTTP response.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh4.googleusercontent.com/lfR3mLUiac0yVNji-lT_wbY6Uel9fBOHjcjfoPdn--94YoQuiNfRqK34-X7kisMvKJdSSHSVyJb14zXaIX6ADxufqgT4YK1-NbqIwO07dvvR_06UmxwDrJzp2aGLSUQrDzsau-JI\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>The first Webhook node configuration</figcaption></figure><p>Then, using the <em>IF</em> node, I checked the existence of the <code>?url</code> query parameter. If the URL existed (true branch), I used the <em>Set</em> node to extract it. Else (false branch), I set an error value using a <em>Set</em> node.</p><p>After extracting the URL from the <em>Webhook</em> node output, I relied on hash functions to generate its unique ID. To calculate the URL HASH value, I used the <em>Crypto</em> node to generate a SHA256 hash.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh4.googleusercontent.com/uf8rlYjBwmU3hQwIWPJvGW0nIoxJfpXunK-TdLeyjoMANhjgokI6gTrccE2yHt6080S-n7_Y4Y7e2iW3YADepEV15Fmu8DTa9F6BIEi1wWPdmP-On9Uq7sum5oT8euxZBRNDnbVd\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Crypto node configuration</figcaption></figure><p>After calculating the HASH, I used a <em>Set</em> node to prepare the database record, which contains the Id, longUrl, and shortUrl fields.</p><p>After preparing the record, I verified if the generated ID already existed in my database. To do that, I used the <em>Airtable </em>node<em> </em>to retrieve the record by ID.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh5.googleusercontent.com/0wFavcm-7xWEekrMOoqiSQs92XPI7dukUBfh7JOIoxSfyyVfWCBg9lUpGFDY-GeELyCBmCoShXNhGmS0UEeKv_NhUAW6FXIU-HXEPxJI6tmA-ydZ80nwuWc9xl_skJqMZsAj8A3e\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Airtable node (List) configuration</figcaption></figure><p>Then, I used an <em>IF</em> node to check whether the record already existed. If the record was found in the database (true branch), I used a <em>Set</em> node to set the shortUrl as the output. Else (false branch), I used a <em>Set</em> node to append a host and click fields to the prepared record.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh4.googleusercontent.com/92YVy5r_PW8kAlOpiGjZ_WaeYgWVEWLC-vkl-LCB_-tzEJRHUv4EfO0aa9TmGNBXzDfCCvlXRlEzRnPiDZTSeDDqPiUr_uBfSB9wSlKhMQ4WFE8hRlXyGpff3_K6t5H3-duY9gvE\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Set node configuration</figcaption></figure><p>Then I used the <em>Airtable</em> node to append the record to the database and another <em>Set</em> node to set the created shortUrl as the output.</p><h3 id=\"2-redirection\">2. Redirection</h3><p>Now with the redirection line, I aimed to redirect the user's web browser to the right long URL. To do that, I needed to retrieve the record using the provided ID, update the number of clicks for later statistics, and return a redirection page. The second workflow line looks like this:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh4.googleusercontent.com/vgs65IqoeAhnGdWbVTpRlyDqbRp9p3pTCUf0qTaoOr5WwEg-hLOUOaZbymmSVO6Qajhayr0DPPsaaiAmJQyw_Lau3NO_I5ha5HQMi3eNXJ3s0oswRm3HisUTsq4i8LjwnwXeafsn\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Redirection workflow</figcaption></figure><p>Initially, I configured the <em>Webhook</em> node to listen on http://n8n.ly/w/go and to return the first JSON entry:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh4.googleusercontent.com/RclK1-Tq_HP-Ac8HyDWifVrjWo1JI_vZb_w2MmKaLHQf93TUf6W3nfRkbf9Ogh0GtnbARIJVv2XuKWm9DdvBRE2byzmppnGv6LLik6eZLeyRqXOZJCZb2zpZtb8BK4fSLXVpS8l1\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Webhook node configuration</figcaption></figure><p>Then I used the <em>IF</em> node to check the existence of the <code>?id</code> query parameter. If the id query field existed (true branch), I used a <em>Set</em> node to extract it. Else (false branch), I returned an error page by using a <em>Set</em> node to set the error message.</p><p>Now that I had extracted the id parameter, I could verify if it existed in the database. If the record was not found, I used a <em>Set</em> node to create the correspondent error message. If the record existed (true branch), I used a <em>Set</em> node to increment the clicks counter, then an <em>Airtable</em> node to update the record in the database.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh6.googleusercontent.com/OiJMyl5tj_3OmIYU5dHVuDqtnIhbFGD9RswRv80rpce1F2ZemWLDs-6IKISkCNU3SGTmVyZLBkdpBHqTr9sMnG7TvKCxL9W8V0xje-9Hcpen9uXcF2JDwhWQDT2UjDugByubsGbJ\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Airtable node configuration</figcaption></figure><p>After updating the database record, I used a <em>Set</em> node to prepare the HTML output. The secret here was embedding a piece of JavaScript code that would redirect the user to the long URL:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Redirection&lt;/title&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;\n\n&lt;script&gt;\nconst load = function (){\n    window.location.replace('{{$node\\[\"Find by ID1\"\\].json.fields\\[\"longUrl\"\\]}}');\n};\n\nwindow.onload = load;\n&lt;/script&gt;\n\n&lt;/html&gt;</code></pre><figcaption>Redirection page content</figcaption></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://lh5.googleusercontent.com/EEOYG4fdPQII0pMSijPEO5anz0dhdaymKIEaaDnIJ3vYtbzhxF9ExX08QcA8euRBWm2KQcFDxf2UfIXxquWLdp9t0OK5kzBll5JtrlWdiFXAtdxoKnAGVZ0tykFMLgAvoYP_aaUN\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"></figure><h3 id=\"3-dashboard\">3. Dashboard</h3><p>Now I have reached the most exciting part of the post: creating a dashboard. After designing my dashboard using <a href=\"https://www.figma.com/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Figma</a> and implementing it using HTML and CSS<strong>,</strong> I could serve it to users. The workflow line for this step looks like this:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh4.googleusercontent.com/OLO7GYWdGKiTReZw6rL-LAR5NYFGhPhiXK7gseu7-oBHC-SkGwFfwgTE-xR4vOCHJGOxVTrxBn-U-hXrxG5BWwMKFmVdSc350lBfWkAxtmA8R5hME8gTRFwcFPQ8ZLDOUAyKfEBJ\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Dashboard workflow</figcaption></figure><p>I started by configuring a <em>Webhook</em> node to handle requests for http://n8n.ly/w/dashboard and return the first JSON entry to the user. The configuration for the Webhook node is similar to the previous one.</p><p>Then, I used an <em>Airtable</em> node to retrieve all the records from my database. Once I got the database result, I applied some magic to convert the record into statistics by using one of the most powerful nodes in n8n: the <em>Function</em> node, with the following code:</p><pre><code class=\"language-javascript\">items = items.map(item =&gt; item.json.fields);\nconst totalLinks = items.length;\nconst totalClick = items.map(item =&gt; item.clicks).reduce((acc,val) =&gt; acc+=val);\nconst hostsMap = new Map();\nconst hosts = items.map(item =&gt; item.host);\nhosts.forEach(host =&gt; {\n\thostsMap.set(host,hostsMap.get(host)!==undefined?hostsMap.get(host)+1:1)\n});\n\nconst totalHosts = [...hostsMap.keys()].length;\n\nreturn [{\n    json:{\n        totalLinks,\n        totalClick,\n        totalHosts\n    }\n}];</code></pre><p>After calculating the total links, total clicks, and total hosts numbers, I used a <em>Set</em> node to embed those statistics in my dashboard code:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh4.googleusercontent.com/2vstkN3hVvwhuqlBB2AqZLjfeYizzmHfduzqBPqusSEGQFONB9EN3H1wpBlfbqMY5znO-YzyPmSEaFc2aXk5vfCClNiIBPYwSV3deLrHbl7qEB7w20x_pDaEafYg-AAbml_rV5UX\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Set node configuration</figcaption></figure><p>This is the full code in the expression:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n &lt;meta charset=\"UTF-8\"&gt;\n &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n &lt;title&gt;Dashboard&lt;/title&gt;\n&lt;/head&gt;\n&lt;style&gt;\n *{\n     padding: 0;\n     margin: 0;\n     border: none;\n     box-sizing: border-box;\n }\n body{\n     font-family: Roboto;\n     font-style: normal;\n }\n .main{\n     padding: 3rem 15rem;\n     width: 70vw;\n     min-height: 100vh;\n     display: flex;\n     flex-direction: column;\n     margin: 0 auto;\n }\n .header{\n     display: flex;\n     flex-direction: row;\n     justify-content: space-between;\n     align-items: center;\n     padding: 1rem 0.5rem;\n\n }\n .dashboard{\n     display: grid;\n     grid-template-rows: repeat(2, 1fr);\n     grid-template-columns: repeat(2, 1fr);\n     column-gap: 50px;\n     row-gap: 50px;\n     min-height: 70vh;\n     min-width: calc(100vw-5rem);\n }\n .primary-text{\n     color: #FF6D5A;\n     font-family: Roboto;\n     font-style: initial;\n     font-weight: 500;\n     font-size: 18px;\n     line-height: 28px;\n     /* center */\n     display: flex;\n     align-items: center;\n     justify-content: center;\n }\n .main-box{\n     min-height: 100%;\n     min-width: 100%;\n     background-color: #FF6D5A;\n     grid-column: 1 / span 2;\n     /* center */\n     display: flex;\n     flex-direction: rows;\n     align-items: center;\n     justify-content: center;\n     /* font style */\n     font-weight: bold;\n     font-size: 96px;\n     line-height: 169px;\n     color: #F5F5F5;\n\n }\n .secondary-box{\n     min-height: 100%;\n     min-width: 100%;\n     background-color: #384D5B;\n     /* center */\n     display: flex;\n     flex-direction: row;\n     align-items: center;\n     justify-content: center;\n     /* font style */\n     font-weight: bold;\n     font-size: 72px;\n     line-height: 112px;\n     color: #F5F5F5;\n }\n .info-text{\n     position: absolute;\n     align-self: flex-start;\n     margin-top: 0.51rem;\n     font-weight: 400;\n     font-size: 16px;\n     line-height: 21px;\n     color: #F5F5F5;\n \n }\n&lt;/style&gt;\n\n&lt;body&gt;\n \n &lt;main class=\"main\"&gt;\n     &lt;header class=\"header\"&gt;\n         &lt;a href=\"https://n8n.io\"&gt;\n             &lt;svg width=\"124px\" height=\"28px\" viewBox=\"0 0 124 28\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;&lt;g id=\"nav-menu-(V1)\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\"&gt;\n                 --[SNIP n8n logo svg]--\n             &lt;/svg&gt;\n         &lt;/a&gt;\n         &lt;h4 class=\"primary-text\"&gt;Dashboard&lt;/h4&gt;\n     &lt;/header&gt;\n \n &lt;section class=\"dashboard\"&gt;\n \n \t&lt;div class=\"main-box\"&gt;\n         &lt;h5 class=\"info-text\"&gt;Total Clicks&lt;/h5&gt;\n        {{$node[\"Extract stats\"].json[\"totalClick\"]}}\n     &lt;/div&gt;\n \n     &lt;div class=\"secondary-box\"&gt;\n         &lt;h5 class=\"info-text\"&gt;Total Links&lt;/h5&gt;\n        {{$node[\"Extract stats\"].json[\"totalLinks\"]}}\n     &lt;/div&gt;\n \n     &lt;div class=\"secondary-box\"&gt;\n         &lt;h5 class=\"info-text\"&gt;Total Hosts&lt;/h5&gt;\n        {{$node[\"Extract stats\"].json[\"totalHosts\"]}}\n     &lt;/div&gt;\n \n &lt;/section&gt;\n &lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n```\n</code></pre><figcaption>Dashboard HTML content</figcaption></figure><p>Now I could finally access the dashboard at http://n8n.ly/w/dashboard, which displays the total number of clicks, link, and hosts:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh6.googleusercontent.com/4Xl7NpQlYmtf0A8ncKCju63D1XxFMXykgrWTNexq6TeLqZpJWRzQqimpDn35NmZq54PKGJvB1yi1LG4_SoJI19XtRvCeFa_BSOUItyD-xiVyUEkvsCCeC49ueYA1rRLLmF9tksGB\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>URL shortener dashboard</figcaption></figure><h2 id=\"next-steps\">Next steps</h2><p>In this post, I showed you how I used n8n to build a highly extensible, self-hosted URL shortener. I relied on a few core nodes like <em>Webhook</em>, <em>IF</em>, <em>Set</em>, <em>Crypto</em>, and <em>Function </em>to build three workflow lines that combined allowed me to create an app for my purposes. You can find the workflow <a href=\"https://n8n.io/workflows/1093?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">here</a>, feel free to use it and let me know what you think.</p><p>The workflow can be extended and customized to:</p><ul><li>Use a different database node and make it 100% self-hosted</li><li>Offer a customized short URL where the user provides a slug instead of using an ID</li><li>Enrich the statistics returned in the dashboard to include more details</li></ul><p><em>Start automating!</em></p><p><em>The best part is, you can start automating for free with n8n. The easiest way to get started is to </em><a href=\"https://n8n.io/pricing?cloud=false&amp;ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>download the desktop app,</em></a><em> or sign up for a <a href=\"https://n8n.io/cloud?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a>. Thanks to n8n’s fair-code license, you can also </em><a href=\"https://docs.n8n.io/hosting/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>self-host n8n for free</em></a><em>.</em></p><p><em>Did you find this article useful or inspiring? Share it on </em><a href=\"http://twitter.com/n8n_io?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Twitter</em></a><em> or discuss it in the </em><a href=\"https://community.n8n.io/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>community forum</em></a><em> </em>🧡<em> </em></p>\n\t\t<div class=\"newsletter-banner\">\n\t    <div class=\"newsletter-banner-content\">\n\t      <div class=\"section-header\">\n\t        <h2>Subscribe to <span>n8n newsletter</span></h2>\n\t        <div class=\"section-subheader--bottom\">\n\t          Get the best, coolest, and latest in automation and low-code delivered to your inbox each week.\n\t        </div>\n\t      </div>\n\t      <div class=\"newsletter-banner-form\">\n\t        <form autocomplete=\"off\" class=\"contact-form\" onsubmit=\"subscribeNewsletter(event)\">\n\t        \t<div id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB\" data-callback=\"submitSubscription\" data-size=\"invisible\"><div class=\"grecaptcha-badge\" data-style=\"bottomright\" style=\"width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;\"><div class=\"grecaptcha-logo\"><iframe title=\"reCAPTCHA\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-d124qddsnnes\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB&amp;co=aHR0cHM6Ly9ibG9nLm44bi5pbzo0NDM.&amp;hl=en&amp;v=jt8Oh2-Ue1u7nEbJQUIdocyd&amp;size=invisible&amp;cb=bihocpjp6p6e\"></iframe></div><div class=\"grecaptcha-error\"></div><textarea id=\"g-recaptcha-response\" name=\"g-recaptcha-response\" class=\"g-recaptcha-response\" style=\"width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;\"></textarea></div><iframe style=\"display: none;\"></iframe></div>\n\t          <div class=\"input-wrapper\">\n\t            <input placeholder=\"Email\" name=\"email\" type=\"email\" required=\"required\" class=\"\">\n\t            <div class=\"messages\">\n\t              <div class=\"message message--error\">Something went wrong. Please try again later.</div>\n\t              <div class=\"message message--success\">Subscribed!</div>\n\t            </div>\n\t          </div>\n\t          <button type=\"submit\" class=\"submit-btn\">Subscribe</button>\n\t        </form>\n\t      </div>\n\t    </div>\n    </div>\n\t\t<div class=\"post-share-section\">\n\t<div class=\"post-share-wrap\">\n\t\t<a href=\"https://twitter.com/intent/tweet?text=How%20to%20build%20a%20low-code%2C%20self-hosted%20URL%20shortener%20in%203%20steps&amp;url=https://blog.n8n.io/how-to-build-a-low-code-self-hosted-url-shortener/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\"></path></svg></a>\n\t\t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/how-to-build-a-low-code-self-hosted-url-shortener/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z\"></path></svg></a>\n\t\t<!-- <a href=\"javascript:\" class=\"post-share-link\" id=\"copy\" data-clipboard-target=\"#copy-link\" aria-label=\"Copy link icon\"><svg role=\"img\" viewBox=\"0 0 33 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M27.3999996,13.4004128 L21.7999996,13.4004128 L21.7999996,19 L18.9999996,19 L18.9999996,13.4004128 L13.3999996,13.4004128 L13.3999996,10.6006192 L18.9999996,10.6006192 L18.9999996,5 L21.7999996,5 L21.7999996,10.6006192 L27.3999996,10.6006192 L27.3999996,13.4004128 Z M12,20.87 C7.101,20.87 3.13,16.898 3.13,12 C3.13,7.102 7.101,3.13 12,3.13 C12.091,3.13 12.181,3.139 12.272,3.142 C9.866,5.336 8.347,8.487 8.347,12 C8.347,15.512 9.866,18.662 12.271,20.857 C12.18,20.859 12.091,20.87 12,20.87 Z M20.347,0 C18.882,0 17.484,0.276 16.186,0.756 C14.882,0.271 13.473,0 12,0 C5.372,0 0,5.373 0,12 C0,18.628 5.372,24 12,24 C13.471,24 14.878,23.726 16.181,23.242 C17.481,23.724 18.88,24 20.347,24 C26.975,24 32.347,18.628 32.347,12 C32.347,5.373 26.975,0 20.347,0 Z\"/></svg></a>\n\t\t<small class=\"share-link-info\">The link has been copied!</small> -->\n\t</div>\n\t<input type=\"text\" value=\"https://blog.n8n.io/how-to-build-a-low-code-self-hosted-url-shortener/\" id=\"copy-link\" aria-label=\"Copy link input\">\n</div>",
  "readme": "When choosing software, I always consider privacy as a make-or-break factor. One tool that I needed recently for a project was a URL shortener. There are many openly available apps out there, but using them is not the best option for me for two main reasons: I can lose control over my data and get frustrated with their limitations. \n\nThe alternative is to build my own app. Thankfully, n8n offers the needed capabilities to rapidly build web applications, without going through long coding nights. In this post, I will show you how I built my self-hosted URL shortener that can be customized and extended to fulfill different use cases. The final [n8n workflow](https://n8n.io/workflows/1093?ref=blog.n8n.io) looks like this:\n\n![](https://lh4.googleusercontent.com/wA4jLYlLBgC5QC91-4OsZH3Nqf7VW8nuLjbAh8Ug4LmbR2sP2nkehgdHMMOHxP9AJIbTUudb3yil821LJi8uYw9c89dAXnSvjDlcrjyq3ONVOeWGo4la6puawXfCHVyCDeX5Mu1X)URL Shortener Workflow\n\n## The Idea\n\nn8n hosts monthly community meetups, where members can present their workflows. At the [April meetup](https://www.youtube.com/watch?v=mWZD8JPuCvE&ref=blog.n8n.io), I was inspired by [Jason](https://twitter.com/tephlondude?ref=blog.n8n.io)'s presentation of a newsletter sign-up workflow and his unique approach of using n8n as a full-fledged, highly extensible back-end. I decided to use that same approach to build a personal, self-hosted URL shortener that serves three functions:\n\n  * Creating the short URL\n  * Redirecting to the long URL\n  * Generating statistics on a dashboard\n\n\n\n## Requirements\n\nThis project was created using n8n and nginx docker images, so before starting, I needed [Docker](https://docs.docker.com/engine/install/?ref=blog.n8n.io) and [Docker-Compose](https://docs.docker.com/compose/install/?ref=blog.n8n.io) installed. Also, I used [**Airtable**](https://airtable.com/?ref=blog.n8n.io) as my database, which requires an Airtable __ account. To follow this tutorial, you need to have some basic experience with n8n and know how to configure nodes and expressions. Now let's get started!\n\n## Quickstart\n\nTo have a re-deployable infrastructure, I relied on a docker-compose file, in which I specified the necessary information about the docker containers.\n\nFirst, I created an `nginx.conf` file to configure my nginx instance as a proxy. That way I could listen on port 80 of the localhost.\n    \n    \n    events {}\n    http {\n        server {\n            listen 80;\n            location / {\n                proxy_pass http://n8n;\n                # enabling EventSource\n                proxy_set_header Connection '';\n                proxy_http_version 1.1;\n                chunked_transfer_encoding off;\n            }\n            location /w/ {\n                proxy_pass http://n8n/webhook/;\n            }\n        }\n    }\n\nnginx.conf file content\n\nSecond, I configured the default **n8n** docker image to enable basic authentication. Also, I initiated the `N8N_HOST` and `VUE_APP_URL_BASE_API` environment variables with my preferred short URL base: **n8n.ly**.\n    \n    \n    version: '3.1'\n    \n    services:\n    \n      n8n:\n        image: n8nio/n8n\n        container_name: n8n\n        restart: always\n        environment:\n          - N8N_BASIC_AUTH_ACTIVE=true\n          - N8N_BASIC_AUTH_USER=user\n          - N8N_BASIC_AUTH_PASSWORD=secret\n          - N8N_PROTOCOL=http\n          - N8N_HOST=n8n.ly\n          - N8N_PORT=80\n          - VUE_APP_URL_BASE_API=http://n8n.ly\n        volumes:\n        # data persistence\n          - ./n8nData:/home/node/.n8n\n        networks:\n          - shared-network\n        command: /bin/sh -c \"n8n start\"\n    \n      nginx:\n        image: nginx\n        container_name: nginx\n        restart: always\n        ports:\n          - 80:80\n        volumes:\n        # edited config\n          - ./nginx.conf:/etc/nginx/nginx.conf\n        networks:\n          - shared-network\n    \n    networks:\n      shared-network:\n\ndocker-compose file content\n\nThird, I registered the short URL base into my local DNS, by appending the next line to the `/etc/hosts` file:\n    \n    \n    127.0.0.1       n8n.ly\n\n/etc/hosts last line\n\nNow I could reference the **n8n.ly** domain locally and get redirected to my n8n instance.\n\n## The Workflow\n\nThe URL shortener is powered by a workflow containing 29 nodes. The workflow is split into three lines:\n\n### 1\\. Short URL creation line with 12 nodes\n\nIn this line, I used a combination of [_Webhook_ node](https://docs.n8n.io/nodes/n8n-nodes-base.webhook/?ref=blog.n8n.io), [_Set_ node](https://docs.n8n.io/nodes/n8n-nodes-base.set/?ref=blog.n8n.io), and [_IF_ node](https://docs.n8n.io/nodes/n8n-nodes-base.if/?ref=blog.n8n.io) to validate the request, then a combination of [_Crypto_ node](https://docs.n8n.io/nodes/n8n-nodes-base.crypto/?ref=blog.n8n.io), [_Airtable_ node](https://docs.n8n.io/nodes/n8n-nodes-base.airtable/?ref=blog.n8n.io), and _Set_ node to create the short URL and append it to the database. Finally, I used the _Set_ node to return the result.\n\n### 2\\. Redirection line with 12 nodes\n\nIn this line, I used a combination of _Webhook_ node, _Set_ node, and _IF_ node to receive the request, then the _Airtable_ node, _IF_ node, and _Set_ node to retrieve the long URL. Finally, I used a _Set node_ to prepare the result.\n\n### 3\\. Dashboard line with 5 nodes\n\nIn this line, I handled the request using a _Webhook_ node and used the _Airtable_ node to retrieve all records. Then I converted those records into embedded statistics using a combination of [_Function_ node](https://docs.n8n.io/nodes/n8n-nodes-base.function/?ref=blog.n8n.io) and _Set_ node.\n\nNow let’s go through each workflow line.\n\n### 1\\. Short URL creation\n\nI started by building the short URL creation line. In it, I generated a unique ID for the provided long URL and saved a record containing the generated ID, the long URL, the short URL, the number of clicks, and the hostname to a database. This is what the workflow line looks like:\n\n![](https://lh5.googleusercontent.com/WI5vSc40aRkk-KafZ2qU0z536LwcCFwzgNIUuQg8H2GXpa2tbspdp_80C4KRNs_yMKMshVMqycynCSY1NNHV_nxp78on_T_Ki-rxiKw3wpoMv4Pi5O-zfoxAGuGoldm1DAtn3swt)Short URL creation workflow\n\nInitially, I configured my _Webhook_ node to accept requests on http://n8n.ly/w/sh and to return the last JSON object as HTTP response.\n\n![](https://lh4.googleusercontent.com/lfR3mLUiac0yVNji-lT_wbY6Uel9fBOHjcjfoPdn--94YoQuiNfRqK34-X7kisMvKJdSSHSVyJb14zXaIX6ADxufqgT4YK1-NbqIwO07dvvR_06UmxwDrJzp2aGLSUQrDzsau-JI)The first Webhook node configuration\n\nThen, using the _IF_ node, I checked the existence of the `?url` query parameter. If the URL existed (true branch), I used the _Set_ node to extract it. Else (false branch), I set an error value using a _Set_ node.\n\nAfter extracting the URL from the _Webhook_ node output, I relied on hash functions to generate its unique ID. To calculate the URL HASH value, I used the _Crypto_ node to generate a SHA256 hash.\n\n![](https://lh4.googleusercontent.com/uf8rlYjBwmU3hQwIWPJvGW0nIoxJfpXunK-TdLeyjoMANhjgokI6gTrccE2yHt6080S-n7_Y4Y7e2iW3YADepEV15Fmu8DTa9F6BIEi1wWPdmP-On9Uq7sum5oT8euxZBRNDnbVd)Crypto node configuration\n\nAfter calculating the HASH, I used a _Set_ node to prepare the database record, which contains the Id, longUrl, and shortUrl fields.\n\nAfter preparing the record, I verified if the generated ID already existed in my database. To do that, I used the _Airtable_ node __ to retrieve the record by ID.\n\n![](https://lh5.googleusercontent.com/0wFavcm-7xWEekrMOoqiSQs92XPI7dukUBfh7JOIoxSfyyVfWCBg9lUpGFDY-GeELyCBmCoShXNhGmS0UEeKv_NhUAW6FXIU-HXEPxJI6tmA-ydZ80nwuWc9xl_skJqMZsAj8A3e)Airtable node (List) configuration\n\nThen, I used an _IF_ node to check whether the record already existed. If the record was found in the database (true branch), I used a _Set_ node to set the shortUrl as the output. Else (false branch), I used a _Set_ node to append a host and click fields to the prepared record.\n\n![](https://lh4.googleusercontent.com/92YVy5r_PW8kAlOpiGjZ_WaeYgWVEWLC-vkl-LCB_-tzEJRHUv4EfO0aa9TmGNBXzDfCCvlXRlEzRnPiDZTSeDDqPiUr_uBfSB9wSlKhMQ4WFE8hRlXyGpff3_K6t5H3-duY9gvE)Set node configuration\n\nThen I used the _Airtable_ node to append the record to the database and another _Set_ node to set the created shortUrl as the output.\n\n### 2\\. Redirection\n\nNow with the redirection line, I aimed to redirect the user's web browser to the right long URL. To do that, I needed to retrieve the record using the provided ID, update the number of clicks for later statistics, and return a redirection page. The second workflow line looks like this:\n\n![](https://lh4.googleusercontent.com/vgs65IqoeAhnGdWbVTpRlyDqbRp9p3pTCUf0qTaoOr5WwEg-hLOUOaZbymmSVO6Qajhayr0DPPsaaiAmJQyw_Lau3NO_I5ha5HQMi3eNXJ3s0oswRm3HisUTsq4i8LjwnwXeafsn)Redirection workflow\n\nInitially, I configured the _Webhook_ node to listen on http://n8n.ly/w/go and to return the first JSON entry:\n\n![](https://lh4.googleusercontent.com/RclK1-Tq_HP-Ac8HyDWifVrjWo1JI_vZb_w2MmKaLHQf93TUf6W3nfRkbf9Ogh0GtnbARIJVv2XuKWm9DdvBRE2byzmppnGv6LLik6eZLeyRqXOZJCZb2zpZtb8BK4fSLXVpS8l1)Webhook node configuration\n\nThen I used the _IF_ node to check the existence of the `?id` query parameter. If the id query field existed (true branch), I used a _Set_ node to extract it. Else (false branch), I returned an error page by using a _Set_ node to set the error message.\n\nNow that I had extracted the id parameter, I could verify if it existed in the database. If the record was not found, I used a _Set_ node to create the correspondent error message. If the record existed (true branch), I used a _Set_ node to increment the clicks counter, then an _Airtable_ node to update the record in the database.\n\n![](https://lh6.googleusercontent.com/OiJMyl5tj_3OmIYU5dHVuDqtnIhbFGD9RswRv80rpce1F2ZemWLDs-6IKISkCNU3SGTmVyZLBkdpBHqTr9sMnG7TvKCxL9W8V0xje-9Hcpen9uXcF2JDwhWQDT2UjDugByubsGbJ)Airtable node configuration\n\nAfter updating the database record, I used a _Set_ node to prepare the HTML output. The secret here was embedding a piece of JavaScript code that would redirect the user to the long URL:\n    \n    \n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Redirection</title>\n    \n    </head>\n    <body>\n    </body>\n    \n    <script>\n    const load = function (){\n        window.location.replace('{{$node\\[\"Find by ID1\"\\].json.fields\\[\"longUrl\"\\]}}');\n    };\n    \n    window.onload = load;\n    </script>\n    \n    </html>\n\nRedirection page content![](https://lh5.googleusercontent.com/EEOYG4fdPQII0pMSijPEO5anz0dhdaymKIEaaDnIJ3vYtbzhxF9ExX08QcA8euRBWm2KQcFDxf2UfIXxquWLdp9t0OK5kzBll5JtrlWdiFXAtdxoKnAGVZ0tykFMLgAvoYP_aaUN)\n\n### 3\\. Dashboard\n\nNow I have reached the most exciting part of the post: creating a dashboard. After designing my dashboard using [Figma](https://www.figma.com/?ref=blog.n8n.io) and implementing it using HTML and CSS**,** I could serve it to users. The workflow line for this step looks like this:\n\n![](https://lh4.googleusercontent.com/OLO7GYWdGKiTReZw6rL-LAR5NYFGhPhiXK7gseu7-oBHC-SkGwFfwgTE-xR4vOCHJGOxVTrxBn-U-hXrxG5BWwMKFmVdSc350lBfWkAxtmA8R5hME8gTRFwcFPQ8ZLDOUAyKfEBJ)Dashboard workflow\n\nI started by configuring a _Webhook_ node to handle requests for http://n8n.ly/w/dashboard and return the first JSON entry to the user. The configuration for the Webhook node is similar to the previous one.\n\nThen, I used an _Airtable_ node to retrieve all the records from my database. Once I got the database result, I applied some magic to convert the record into statistics by using one of the most powerful nodes in n8n: the _Function_ node, with the following code:\n    \n    \n    items = items.map(item => item.json.fields);\n    const totalLinks = items.length;\n    const totalClick = items.map(item => item.clicks).reduce((acc,val) => acc+=val);\n    const hostsMap = new Map();\n    const hosts = items.map(item => item.host);\n    hosts.forEach(host => {\n    \thostsMap.set(host,hostsMap.get(host)!==undefined?hostsMap.get(host)+1:1)\n    });\n    \n    const totalHosts = [...hostsMap.keys()].length;\n    \n    return [{\n        json:{\n            totalLinks,\n            totalClick,\n            totalHosts\n        }\n    }];\n\nAfter calculating the total links, total clicks, and total hosts numbers, I used a _Set_ node to embed those statistics in my dashboard code:\n\n![](https://lh4.googleusercontent.com/2vstkN3hVvwhuqlBB2AqZLjfeYizzmHfduzqBPqusSEGQFONB9EN3H1wpBlfbqMY5znO-YzyPmSEaFc2aXk5vfCClNiIBPYwSV3deLrHbl7qEB7w20x_pDaEafYg-AAbml_rV5UX)Set node configuration\n\nThis is the full code in the expression:\n    \n    \n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n     <meta charset=\"UTF-8\">\n     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n     <title>Dashboard</title>\n    </head>\n    <style>\n     *{\n         padding: 0;\n         margin: 0;\n         border: none;\n         box-sizing: border-box;\n     }\n     body{\n         font-family: Roboto;\n         font-style: normal;\n     }\n     .main{\n         padding: 3rem 15rem;\n         width: 70vw;\n         min-height: 100vh;\n         display: flex;\n         flex-direction: column;\n         margin: 0 auto;\n     }\n     .header{\n         display: flex;\n         flex-direction: row;\n         justify-content: space-between;\n         align-items: center;\n         padding: 1rem 0.5rem;\n    \n     }\n     .dashboard{\n         display: grid;\n         grid-template-rows: repeat(2, 1fr);\n         grid-template-columns: repeat(2, 1fr);\n         column-gap: 50px;\n         row-gap: 50px;\n         min-height: 70vh;\n         min-width: calc(100vw-5rem);\n     }\n     .primary-text{\n         color: #FF6D5A;\n         font-family: Roboto;\n         font-style: initial;\n         font-weight: 500;\n         font-size: 18px;\n         line-height: 28px;\n         /* center */\n         display: flex;\n         align-items: center;\n         justify-content: center;\n     }\n     .main-box{\n         min-height: 100%;\n         min-width: 100%;\n         background-color: #FF6D5A;\n         grid-column: 1 / span 2;\n         /* center */\n         display: flex;\n         flex-direction: rows;\n         align-items: center;\n         justify-content: center;\n         /* font style */\n         font-weight: bold;\n         font-size: 96px;\n         line-height: 169px;\n         color: #F5F5F5;\n    \n     }\n     .secondary-box{\n         min-height: 100%;\n         min-width: 100%;\n         background-color: #384D5B;\n         /* center */\n         display: flex;\n         flex-direction: row;\n         align-items: center;\n         justify-content: center;\n         /* font style */\n         font-weight: bold;\n         font-size: 72px;\n         line-height: 112px;\n         color: #F5F5F5;\n     }\n     .info-text{\n         position: absolute;\n         align-self: flex-start;\n         margin-top: 0.51rem;\n         font-weight: 400;\n         font-size: 16px;\n         line-height: 21px;\n         color: #F5F5F5;\n     \n     }\n    </style>\n    \n    <body>\n     \n     <main class=\"main\">\n         <header class=\"header\">\n             <a href=\"https://n8n.io\">\n                 <svg width=\"124px\" height=\"28px\" viewBox=\"0 0 124 28\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><g id=\"nav-menu-(V1)\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                     --[SNIP n8n logo svg]--\n                 </svg>\n             </a>\n             <h4 class=\"primary-text\">Dashboard</h4>\n         </header>\n     \n     <section class=\"dashboard\">\n     \n     \t<div class=\"main-box\">\n             <h5 class=\"info-text\">Total Clicks</h5>\n            {{$node[\"Extract stats\"].json[\"totalClick\"]}}\n         </div>\n     \n         <div class=\"secondary-box\">\n             <h5 class=\"info-text\">Total Links</h5>\n            {{$node[\"Extract stats\"].json[\"totalLinks\"]}}\n         </div>\n     \n         <div class=\"secondary-box\">\n             <h5 class=\"info-text\">Total Hosts</h5>\n            {{$node[\"Extract stats\"].json[\"totalHosts\"]}}\n         </div>\n     \n     </section>\n     </main>\n    </body>\n    </html>\n    ```\n    \n\nDashboard HTML content\n\nNow I could finally access the dashboard at http://n8n.ly/w/dashboard, which displays the total number of clicks, link, and hosts:\n\n![](https://lh6.googleusercontent.com/4Xl7NpQlYmtf0A8ncKCju63D1XxFMXykgrWTNexq6TeLqZpJWRzQqimpDn35NmZq54PKGJvB1yi1LG4_SoJI19XtRvCeFa_BSOUItyD-xiVyUEkvsCCeC49ueYA1rRLLmF9tksGB)URL shortener dashboard\n\n## Next steps\n\nIn this post, I showed you how I used n8n to build a highly extensible, self-hosted URL shortener. I relied on a few core nodes like _Webhook_ , _IF_ , _Set_ , _Crypto_ , and _Function_ to build three workflow lines that combined allowed me to create an app for my purposes. You can find the workflow [here](https://n8n.io/workflows/1093?ref=blog.n8n.io), feel free to use it and let me know what you think.\n\nThe workflow can be extended and customized to:\n\n  * Use a different database node and make it 100% self-hosted\n  * Offer a customized short URL where the user provides a slug instead of using an ID\n  * Enrich the statistics returned in the dashboard to include more details\n\n\n\n _Start automating!_\n\n_The best part is, you can start automating for free with n8n. The easiest way to get started is to_[ _download the desktop app,_](https://n8n.io/pricing?cloud=false&ref=blog.n8n.io)_or sign up for a[free n8n cloud trial](https://n8n.io/cloud?ref=blog.n8n.io). Thanks to n8n’s fair-code license, you can also _[_self-host n8n for free_](https://docs.n8n.io/hosting/?ref=blog.n8n.io) _._\n\n_Did you find this article useful or inspiring? Share it on_[ _Twitter_](http://twitter.com/n8n_io?ref=blog.n8n.io) _or discuss it in the_[ _community forum_](https://community.n8n.io/?ref=blog.n8n.io) __ 🧡 __\n\n## Subscribe to n8n newsletter\n\nGet the best, coolest, and latest in automation and low-code delivered to your inbox each week. \n\nSomething went wrong. Please try again later.\n\nSubscribed!\n\nSubscribe\n\n[](https://twitter.com/intent/tweet?text=How%20to%20build%20a%20low-code%2C%20self-hosted%20URL%20shortener%20in%203%20steps&url=https://blog.n8n.io/how-to-build-a-low-code-self-hosted-url-shortener/) [](https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/how-to-build-a-low-code-self-hosted-url-shortener/)\n",
  "crawled_at": "2025-05-28T11:02:07.259649"
}