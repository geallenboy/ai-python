{
  "url": "https://blog.n8n.io/creating-triggers-for-n8n-workflows-using-polling/",
  "title": "Creating triggers for n8n workflows using polling",
  "excerpt": "Learn to use polling to monitor changes and execute workflows for services that do not support webhooks and don’t have Trigger nodes in n8n.",
  "thumbnail": "https://blog.n8n.io/content/images/size/w1200/2021/01/age-barros-rBPOfVqROzY-unsplash.jpg",
  "tags": [
    "Tutorial"
  ],
  "html": "<p>One of the key features of n8n is the ability to use <a href=\"https://docs.n8n.io/integrations/builtin/trigger-nodes/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Trigger nodes</a>. Trigger nodes are special nodes that listen for events and then start a workflow. For example, you can build a workflow using the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.clickUpTrigger/?ref=blog.n8n.io#clickup-trigger\" target=\"_blank\" rel=\"noopener\"><em>ClickUp Trigger</em></a> node and a <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.googleSheets/?ref=blog.n8n.io#google-sheets\" target=\"_blank\" rel=\"noopener\"><em>Google Sheets</em></a> node. Whenever a new task gets created in ClickUp, the workflow would execute, and the data gets added to the Google Sheet. This makes Trigger nodes extremely useful, as you can monitor events across different services using them.</p><p>Once you start using several of these different Trigger nodes, you wonder what happens when you want to listen for an event from a service that does not have a Trigger node. For example, Google Sheets and Twitter (at the time of writing this tutorial - n8n@0.101.0) don't have a Trigger node.</p><p>In this article, we are going to discuss how you can monitor changes and execute workflows for services that do not support <a href=\"https://docs.n8n.io/reference/glossary.html?ref=blog.n8n.io#webhook\" target=\"_blank\" rel=\"noopener\">webhooks</a> and don’t have Trigger nodes in n8n.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://lh3.googleusercontent.com/iZWQdnTKxd6XvYUzM9sG0XvMD6lZOh7deIF1RE7PcWWSFxN9puT7RYhfA00xHd2qZysj5lqjQgwfNc2hWIFVe0Pg25NpsYIxaN2nAyRxdsuJMHp9PQisstAf1xPcUKYux_1yS-YK\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Monitoring changes in Google Sheets every 45 mins</figcaption></figure><h2 id=\"introduction-to-polling\">Introduction to polling</h2><p>In a conventional n8n Trigger node, the node listens for events using a webhook. In this method, the service sends an update to the Trigger node when an event occurs. While polling works by periodically checking for new data by connecting to the server.</p><p>In this process, n8n will connect to the server every X time (every second/minute, etc) and check if there is any new data.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://lh4.googleusercontent.com/JGY3VDKmkDRfwNrKfWy1xgfvFAxUKAAeMtDNH8PoVgI06mrsJhHE1g4kBNM_kdyG8OD4mRyl78soICFvAf8byfuu81x4g4_76wVETgcyaiMGQsRTBZyBeXfbP-oi9cq-jxYpwHhl\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Difference between polling and webhook</figcaption></figure><p>Not every platform supports sending updates via a webhook and this is where polling comes to the rescue. Using polling we can check for updates and execute our workflow if data gets added or updated.</p><h2 id=\"how-to-poll-using-n8n\">How to poll using n8n?</h2><p>If you break down the polling process, as described in the image above, you realize that it is possible to replicate the same functionality in n8n. The <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.interval/?ref=blog.n8n.io#interval\" target=\"_blank\" rel=\"noopener\"><em>Interval</em></a> node or the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.cron/?ref=blog.n8n.io#cron\" target=\"_blank\" rel=\"noopener\"><em>Cron</em></a> node triggers the workflow periodically to fetch data from a service. We pass this data to the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.function/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Function</em></a> node, where all the magic happens.</p><p>In n8n, the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.function/?ref=blog.n8n.io#method-getworkflowstaticdata-type\" target=\"_blank\" rel=\"noopener\">getWorkflowStaticData()</a> method allows access to the static workflow data. We can save the data directly with the workflow, but this data has to be small. On every execution, the Function node compares the incoming data with the data from the previous execution. If the data got changed, we pass it to the next node in the workflow. We also update the static data with this new data so that the next execution knows what data gets stored in the previous node. If the data did not get changed, you may return a message based on our use-case.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://lh6.googleusercontent.com/7DGyN1xIE7PzMzS3sFpgnuomzlQerDc6M7hafseXGgol3IKVmNLY1ObznTHywLBJrYlb4jsbOcpgADPWU_mLoEaLJAyA0hglO2sIR1Uj_iAluNvqdEKClgWTXZyuKSP9VGhAFl_5\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Polling in n8n</figcaption></figure><h2 id=\"trigger-a-workflow-when-new-data-gets-added-to-your-google-sheets\">Trigger a workflow when new data gets added to your Google Sheets</h2><p>I wanted to run a workflow every time there was new data added in Google Sheets, so I created a polling workflow. Follow along the steps mentioned below to learn to create a polling workflow.</p><h2 id=\"prerequisites\">Prerequisites</h2><h3 id=\"set-up-n8n\">Set up n8n</h3><p>Follow the instructions mentioned in the<a href=\"https://docs.n8n.io/try-it-out/quickstart/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"> documentation</a> to install and spin-up an n8n instance on your machine. You can also sign-up for a <a href=\"https://n8n.io/cloud?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a> to get access to our hosted service.</p><h3 id=\"set-up-a-google-sheet\">Set up a Google Sheet</h3><p>Create a Google Sheet like <a href=\"https://docs.google.com/spreadsheets/d/1PyC-U1lXSCbxVmHuwFbkKDF9e3PW_iUn8T-iAd_MYjQ/edit?usp=sharing&amp;ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">this Google Sheet</a>. We will monitor this sheet for new data that gets added. Feel free to make a copy of my Sheet.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://lh3.googleusercontent.com/PPYxhPc9RUXv02nCFWK5xN6O1AfU3pRr7XjbJ0_rKdzPRkRIl7agGuzgUiW9TWV-YWbQ-trUx0HYlsO2d54rie_huwZKcdzmkyI1TOlNkP_kQzdWS3FhjuIOxhpztZU6yMQy5m-r\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Google Sheet used in this tutorial</figcaption></figure><p>We will also need to configure credentials for the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.googleSheets/?ref=blog.n8n.io#google-sheets\" target=\"_blank\" rel=\"noopener\"><em>Google Sheets</em></a> node. For this tutorial, we will use the OAuth authentication method. You can learn to configure the OAuth credentials by following the steps mentioned in the <a href=\"https://docs.n8n.io/credentials/google/?ref=blog.n8n.io#using-oauth\" target=\"_blank\" rel=\"noopener\">documentation</a>.</p><h3 id=\"set-up-mattermost\">Set up Mattermost</h3><p>We will send a message to a channel in a Mattermost team if new data gets added. Create a Mattermost team if you don’t have one already.</p><p>You will also have to configure the credentials for the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.mattermost?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>Mattermost</em></a> node. Follow the instructions mentioned in the <a href=\"https://docs.n8n.io/credentials/mattermost/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">documentation</a> to configure the credentials.</p><h2 id=\"quick-start\">Quick Start</h2><p>If you don’t want to get into the details and have experience building workflows in n8n, you can follow the quick-start instructions below. If something is unclear or you want to learn more about how it works, feel free to dig deeper into the sections that follow.</p><p>Access your n8n instance, and copy and paste the workflow from the <a href=\"https://n8n.io/workflows/864?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">workflow</a> page. Configure the following nodes:</p><ol><li><strong>Google Sheets node</strong></li></ol><ul><li>Use the credentials that you configured earlier.</li><li>Enter the Sheet ID of your Sheet in the <em><strong>Sheet ID</strong></em> field. If you’re not sure how to find the Sheet ID, refer to the section Google Sheets section below.</li></ul><p><strong>Note</strong>: If you change a column name in your Google Sheet, make sure to configure the <em>Function</em> node accordingly.</p><p>2.<strong> Mattermost node</strong></p><ul><li>Use the credentials that you configured earlier.</li><li>If you’re not the system administrator, enter the channel ID where you want the app to send the message in the <em><strong>Channel ID</strong></em> field. Otherwise, select the channel from the <em><strong>Channel ID</strong></em> dropdown list. Refer to the Mattermost section below, to learn more about the steps.</li></ul><p>Save and execute the workflow!</p><p><strong>Note</strong>: Activate the workflow to run it in production.</p><h2 id=\"the-workflow\">The Workflow</h2><p>This workflow can be divided into three stages, as it progresses from start to finish:</p><ul><li>Read Data</li><li>Extract New Data</li><li>Communication</li></ul><h2 id=\"stage-1-read-data\">Stage 1 - Read Data</h2><h3 id=\"interval-node-execute-every-45-mins-\">Interval node (Execute every 45 mins)</h3><p>The <em>Interval</em> node triggers the workflow at a regular interval of time. For this tutorial, we want to execute the workflow every 45 minutes.</p><p>Click on the ‘<em><strong>+</strong></em>’ button on the top right corner and click on the <em><strong>Trigger</strong></em> tab. Select the <em>Interval</em> node from the list to add the node.</p><p>Select ‘Minutes’ from the <em><strong>Unit</strong></em> dropdown list and set the value of <em><strong>Interval</strong></em> to 45.</p><p>Rename the node’s headline from “Interval” to “Execute every 45 mins” by clicking the name, editing it, and clicking the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window. Select ‘Save As’ from the <em><strong>Workflow</strong></em> menu on the left sidebar. Once you save the workflow, click on the <em><strong>Execute Node</strong></em> button to execute the node.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/QRz57ZNmOps?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Adding the Interval node for Monitor changes in Google Sheets every 45 mins workflow</figcaption></figure><h3 id=\"google-sheets-node-read-data-\">Google Sheets node (Read data)</h3><p>The <em>Google Sheets</em> node in n8n allows you to create new sheets and read, lookup, append, delete, and update data from a sheet. Our workflow will read the data from a Google Sheet every 45 minutes.</p><p>To add the <em>Google Sheets</em> node, click on the ‘<em><strong>+</strong></em>’ button, and select the <em>Google Sheets</em> node from the <em><strong>Regular</strong></em> section. Use the credentials that you configured earlier.</p><p>Copy the string of characters located between <code>/d/</code> and <code>/edit</code> in your spreadsheet URL. This string is the Sheet ID. For example, for the URL <code>https://docs.google.com/spreadsheets/d/1PyCgaglXSCbxVmHuwFbkKDF9e3PW_iUn8T-iAd_MYjQ/edit#gid=0</code> the Sheet ID is <code>1PyCgaglXSCbxVmHuwFbkKDF9e3PW_iUn8T-iAd_MYjQ</code>. Enter this Sheet ID in the <em><strong>Sheet ID</strong></em> field in the <em>Google Sheet</em> node. Enter the range of the columns in the <em><strong>Range</strong></em> field. The range contains the column references corresponding to those on the spreadsheet. The range tells the <em>Google Sheets</em> node from which columns to read the data.</p><p>Rename the node to <em><strong>Read data</strong></em> and click on the <em><strong>Execute Node</strong></em> button. The node will return the data from the Google Sheet.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/AbgqDJzaybk?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Adding the Google Sheets node to read data from the Google Sheets</figcaption></figure><h2 id=\"stage-2-extract-new-data\">Stage 2- Extract new data</h2><h3 id=\"function-node-check-if-new-data-\">Function node (Check if new data)</h3><p>Our workflow reads the data from a Google Sheet and returns all the data. However, we only want the data that was recently added. We will use the <em>Function</em> node to return only the data that was added after the previous execution.</p><p>To help you understand this better, let us take a look at an example. Our workflow ran at 1:00 PM and returned the following data:</p><pre><code class=\"language-js\">[\n\t{\n\t\t\"id\": 0,\n\t\t\"name\": \"Sam\",\n\t\t\"email\": \"sam@testmail.com\"\n\t},\n\t{\n\t\t\"id\": 1,\n\t\t\"name\": \"Ram\",\n\t\t\"email\": \"ram@testmail.com\"\n\t}\n]</code></pre><p>New data was added to our Google Sheet at 1:20 PM. When your workflow will execute next, we only want this new data. Using the <em>Function</em> node we will return this new data. n8n has a <code>getWorkflowStaticData()</code> method that gives access to the static workflow data. We can save data directly with the workflow, however, this data should be very small. When the workflow execution succeeds, n8n will check automatically if the data has changed and will save it, if necessary.</p><p>Click on the ‘<em><strong>+</strong></em>’ icon and select the <em>Function</em> node from the list. In the <em><strong>Javascript Code</strong></em> editor, paste the following code snippet.</p><pre><code class=\"language-js\">const new_items = [];\n\n// Get static data stored with the workflow\nconst data = $getWorkflowStaticData(\"node\");\n\ndata.ids = data.ids || [];\n\nfor (let i = items.length - 1; i &gt;= 0; i--) {\n\n\t// Check if data is already present\n\tif (data.ids.includes(items[i].json.ID)) {\n\t\tbreak;\n\t} else {\n\n\t\t// if new data then add it to an array\n\t\tnew_items.push({\n\t\t\tjson: {\n\t\t\t\tid: items[i].json.ID,\n\t\t\t\tname: items[i].json.Name,\n\t\t\t\temail: items[i].json.Email\n\t\t\t},\n\t\t});\n\t}\n}\n\ndata.ids = items.map((item) =&gt; item.json.ID);\n\n// return new items\nreturn new_items;</code></pre><p>The above code snippet gets the static workflow data and checks for new items. If new items are found, it is added to an array and gets returned by the node. If the data remains unchanged, an empty array is returned by the node.</p><p>Rename the node to <em><strong>Check if new data</strong></em> and click on the <em><strong>Execute Node</strong></em> button.</p><p><strong>Note</strong>: The static data can not be read and written when we’re building the workflow. Hence, on every execution, the node will return all the data. When the workflow is set to active and triggered by a Trigger node, the node will save the static data and return only the new data that was added (if any).</p><p>The following image shows the output returned by the node when the workflow is not active.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://lh6.googleusercontent.com/aQeHOImWAlKlcgk4c4nDwnb6vRHt48znW2pXlLkAmC4tuqeTcDODLhlmtT1RttCsBnkQuq3jfDhQ7D93U_86VNYxKA1RObii5BXCv0FJoS6sSF1UAPRWWZjCsRbkMidBuDPJsh83\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Output returned by the Function node when the workflow is not active</figcaption></figure><p>The following image shows the output returned by the node when the workflow is active.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://lh5.googleusercontent.com/65v5IkfgAYFXwq3a8CR6Wi_4zQrMkRY5tGAi45r_jQcn5lC2nWXL0RzXZf9Ja7IvrXPBvFa0mCB5YMtRO1BhOOohIZ_R4Qky1vXRxpl98HZAiZ4IpbUjbQi0gYAw9_GTGGCFQU0x\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Output returned by the Function node when the workflow is active</figcaption></figure><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/TUyzzWRNYr4?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Adding the Function node to get new or updated data (if any)</figcaption></figure><h2 id=\"stage-3-communication\">Stage 3- Communication</h2><h3 id=\"mattermost-node-send-message-\">Mattermost node (Send message)</h3><p>If new data was added to the Google Sheet we will send a message to Mattermost along with the new data. We will send a message to the <code>updates</code> channel. But you can select a different channel to send the message.</p><p>Click on the ‘<em><strong>+</strong></em>’ button and select the <em>Mattermost</em> node. Connect the node to the <em><strong>true</strong></em> branch of the <em>Is new item?</em> node. Use the credentials you configured earlier.</p><p>If you are not the system administrator of the Mattermost team, navigate to Mattermost and select the ‘updates’ channel from the left sidebar. Click on the caret next to ‘updates’ and select ‘View Info’ from the dropdown list. Copy and paste the displayed ID in the <em><strong>Channel ID</strong></em> field in the Mattermost node.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://lh3.googleusercontent.com/djMaFXc-FELMgNoxo7Hv4L4TM7yU_UU8L0QGTIb-_ekqBp0UxFb73fesNId3Nf0hWPmEOIWC7zqw3VCm3w9kDckHL_2Vtf9AZalo7QCANZOcxrqY3woUqxHA2vHYUnXpa5sgtBC6\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\"><figcaption>Finding channel ID of a Mattermost channel</figcaption></figure><p>If you’re the system administrator, select the ‘updates’ channel from the <em><strong>Channel ID</strong></em> dropdown list.</p><p>Click on the gears icon next to the <em><strong>Message</strong></em> field and select ‘Add Expression’. Enter the following expression in the <em><strong>Expression Editor</strong></em>.</p><pre><code>New information was added to your Google Sheet.\nID: {{$json[\"id\"]}}\nName: {{$json[\"name\"]}}\nEmail: {{$json[\"email\"]}}</code></pre><p>Rename the node to <em><strong>Send message</strong></em> and click on <em><strong>Execute Node</strong></em> to run the node.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/txflaaQbjZE?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Adding the Mattermost node to a send message if data was added or updated</figcaption></figure><h2 id=\"what-s-next\">What’s next?</h2><p>Currently, the <em>Check if new data</em> node in our workflow returns all the items since the static data is not getting saved. Save the workflow and toggle the Active, on the top right, to true. This will set our workflow to active and our workflow will execute every 45 mins. Add new data to the Google Sheets, and after 45 mins (for testing you can set the time to 2 mins!) you will receive a message on Mattermost.</p><p>Such polling workflows can be used for various use-cases. If you’re using Google Forms to collect data, and if the form adds the data to a Google Sheet, you can build a workflow that will trigger the workflow whenever there is a new form response.</p><p>Another interesting use-case can be for Twitter. You can build a polling workflow that executes every 10 mins. This workflow would fetch Tweets for your search criteria using the Twitter node and return the most recent tweets. At n8n, we use a similar workflow that sends a message to Mattermost with the recent Tweets. You can find the workflow on the <a href=\"https://n8n.io/workflows/875?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">workflow page</a>.</p><p>A few more examples where polling can help:</p><ul><li>Trigger a workflow when an event gets added to your Google Calendar using the Google Calendar node</li><li>Trigger a workflow when price changes for a cryptocurrency using the CoinGecko node</li><li>Trigger a workflow when new data gets added to your database (MongoDB, Postgres, etc.)</li></ul><h2 id=\"summary\">Summary</h2><p>In this tutorial, we learned how polling can help us overcome a barrier for the nodes that do not have a Trigger node. We can use polling with the nodes that do not have a default Trigger node and build a workflow based to trigger actions when new data is added or updated.</p><p>We built a polling workflow that executes every 45 mins and reads data from a Google Sheet. If the data has been updated or new data has been added, the workflow sends a message to Mattermost.</p><p>I’d like to know about how you are using the concept of polling and building workflows with n8n! If you run into any issues while following the tutorial, feel free to message me on<a href=\"https://twitter.com/harshil1712?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"> Twitter</a> or ask for help on our<a href=\"https://community.n8n.io/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"> forum</a> 🧡</p><p><em>Start automating!</em></p><p><em>The best part is, you can start automating for free with n8n. The easiest way to get started is to sign up for a <a href=\"https://n8n.io/pricing/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a>. Thanks to n8n’s fair-code license, you can also </em><a href=\"https://docs.n8n.io/hosting/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>self-host n8n for free</em></a><em>.</em></p>\n\t\t<div class=\"newsletter-banner\">\n\t    <div class=\"newsletter-banner-content\">\n\t      <div class=\"section-header\">\n\t        <h2>Subscribe to <span>n8n newsletter</span></h2>\n\t        <div class=\"section-subheader--bottom\">\n\t          Get the best, coolest, and latest in automation and low-code delivered to your inbox each week.\n\t        </div>\n\t      </div>\n\t      <div class=\"newsletter-banner-form\">\n\t        <form autocomplete=\"off\" class=\"contact-form\" onsubmit=\"subscribeNewsletter(event)\">\n\t        \t<div id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB\" data-callback=\"submitSubscription\" data-size=\"invisible\"><div class=\"grecaptcha-badge\" data-style=\"bottomright\" style=\"width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;\"><div class=\"grecaptcha-logo\"><iframe title=\"reCAPTCHA\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-hvrg40ggn8mp\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB&amp;co=aHR0cHM6Ly9ibG9nLm44bi5pbzo0NDM.&amp;hl=en&amp;v=jt8Oh2-Ue1u7nEbJQUIdocyd&amp;size=invisible&amp;cb=jmpmyi65scjq\"></iframe></div><div class=\"grecaptcha-error\"></div><textarea id=\"g-recaptcha-response\" name=\"g-recaptcha-response\" class=\"g-recaptcha-response\" style=\"width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;\"></textarea></div><iframe style=\"display: none;\"></iframe></div>\n\t          <div class=\"input-wrapper\">\n\t            <input placeholder=\"Email\" name=\"email\" type=\"email\" required=\"required\" class=\"\">\n\t            <div class=\"messages\">\n\t              <div class=\"message message--error\">Something went wrong. Please try again later.</div>\n\t              <div class=\"message message--success\">Subscribed!</div>\n\t            </div>\n\t          </div>\n\t          <button type=\"submit\" class=\"submit-btn\">Subscribe</button>\n\t        </form>\n\t      </div>\n\t    </div>\n    </div>\n\t\t<div class=\"post-share-section\">\n\t<div class=\"post-share-wrap\">\n\t\t<a href=\"https://twitter.com/intent/tweet?text=Creating%20triggers%20for%20n8n%20workflows%20using%20polling&amp;url=https://blog.n8n.io/creating-triggers-for-n8n-workflows-using-polling/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\"></path></svg></a>\n\t\t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/creating-triggers-for-n8n-workflows-using-polling/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z\"></path></svg></a>\n\t\t<!-- <a href=\"javascript:\" class=\"post-share-link\" id=\"copy\" data-clipboard-target=\"#copy-link\" aria-label=\"Copy link icon\"><svg role=\"img\" viewBox=\"0 0 33 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M27.3999996,13.4004128 L21.7999996,13.4004128 L21.7999996,19 L18.9999996,19 L18.9999996,13.4004128 L13.3999996,13.4004128 L13.3999996,10.6006192 L18.9999996,10.6006192 L18.9999996,5 L21.7999996,5 L21.7999996,10.6006192 L27.3999996,10.6006192 L27.3999996,13.4004128 Z M12,20.87 C7.101,20.87 3.13,16.898 3.13,12 C3.13,7.102 7.101,3.13 12,3.13 C12.091,3.13 12.181,3.139 12.272,3.142 C9.866,5.336 8.347,8.487 8.347,12 C8.347,15.512 9.866,18.662 12.271,20.857 C12.18,20.859 12.091,20.87 12,20.87 Z M20.347,0 C18.882,0 17.484,0.276 16.186,0.756 C14.882,0.271 13.473,0 12,0 C5.372,0 0,5.373 0,12 C0,18.628 5.372,24 12,24 C13.471,24 14.878,23.726 16.181,23.242 C17.481,23.724 18.88,24 20.347,24 C26.975,24 32.347,18.628 32.347,12 C32.347,5.373 26.975,0 20.347,0 Z\"/></svg></a>\n\t\t<small class=\"share-link-info\">The link has been copied!</small> -->\n\t</div>\n\t<input type=\"text\" value=\"https://blog.n8n.io/creating-triggers-for-n8n-workflows-using-polling/\" id=\"copy-link\" aria-label=\"Copy link input\">\n</div>",
  "readme": "One of the key features of n8n is the ability to use [Trigger nodes](https://docs.n8n.io/integrations/builtin/trigger-nodes/?ref=blog.n8n.io). Trigger nodes are special nodes that listen for events and then start a workflow. For example, you can build a workflow using the [_ClickUp Trigger_](https://docs.n8n.io/nodes/n8n-nodes-base.clickUpTrigger/?ref=blog.n8n.io#clickup-trigger) node and a [_Google Sheets_](https://docs.n8n.io/nodes/n8n-nodes-base.googleSheets/?ref=blog.n8n.io#google-sheets) node. Whenever a new task gets created in ClickUp, the workflow would execute, and the data gets added to the Google Sheet. This makes Trigger nodes extremely useful, as you can monitor events across different services using them.\n\nOnce you start using several of these different Trigger nodes, you wonder what happens when you want to listen for an event from a service that does not have a Trigger node. For example, Google Sheets and Twitter (at the time of writing this tutorial - n8n@0.101.0) don't have a Trigger node.\n\nIn this article, we are going to discuss how you can monitor changes and execute workflows for services that do not support [webhooks](https://docs.n8n.io/reference/glossary.html?ref=blog.n8n.io#webhook) and don’t have Trigger nodes in n8n.\n\n![](https://lh3.googleusercontent.com/iZWQdnTKxd6XvYUzM9sG0XvMD6lZOh7deIF1RE7PcWWSFxN9puT7RYhfA00xHd2qZysj5lqjQgwfNc2hWIFVe0Pg25NpsYIxaN2nAyRxdsuJMHp9PQisstAf1xPcUKYux_1yS-YK)Monitoring changes in Google Sheets every 45 mins\n\n## Introduction to polling\n\nIn a conventional n8n Trigger node, the node listens for events using a webhook. In this method, the service sends an update to the Trigger node when an event occurs. While polling works by periodically checking for new data by connecting to the server.\n\nIn this process, n8n will connect to the server every X time (every second/minute, etc) and check if there is any new data.\n\n![](https://lh4.googleusercontent.com/JGY3VDKmkDRfwNrKfWy1xgfvFAxUKAAeMtDNH8PoVgI06mrsJhHE1g4kBNM_kdyG8OD4mRyl78soICFvAf8byfuu81x4g4_76wVETgcyaiMGQsRTBZyBeXfbP-oi9cq-jxYpwHhl)Difference between polling and webhook\n\nNot every platform supports sending updates via a webhook and this is where polling comes to the rescue. Using polling we can check for updates and execute our workflow if data gets added or updated.\n\n## How to poll using n8n?\n\nIf you break down the polling process, as described in the image above, you realize that it is possible to replicate the same functionality in n8n. The [_Interval_](https://docs.n8n.io/nodes/n8n-nodes-base.interval/?ref=blog.n8n.io#interval) node or the [_Cron_](https://docs.n8n.io/nodes/n8n-nodes-base.cron/?ref=blog.n8n.io#cron) node triggers the workflow periodically to fetch data from a service. We pass this data to the [_Function_](https://docs.n8n.io/nodes/n8n-nodes-base.function/?ref=blog.n8n.io) node, where all the magic happens.\n\nIn n8n, the [getWorkflowStaticData()](https://docs.n8n.io/nodes/n8n-nodes-base.function/?ref=blog.n8n.io#method-getworkflowstaticdata-type) method allows access to the static workflow data. We can save the data directly with the workflow, but this data has to be small. On every execution, the Function node compares the incoming data with the data from the previous execution. If the data got changed, we pass it to the next node in the workflow. We also update the static data with this new data so that the next execution knows what data gets stored in the previous node. If the data did not get changed, you may return a message based on our use-case.\n\n![](https://lh6.googleusercontent.com/7DGyN1xIE7PzMzS3sFpgnuomzlQerDc6M7hafseXGgol3IKVmNLY1ObznTHywLBJrYlb4jsbOcpgADPWU_mLoEaLJAyA0hglO2sIR1Uj_iAluNvqdEKClgWTXZyuKSP9VGhAFl_5)Polling in n8n\n\n## Trigger a workflow when new data gets added to your Google Sheets\n\nI wanted to run a workflow every time there was new data added in Google Sheets, so I created a polling workflow. Follow along the steps mentioned below to learn to create a polling workflow.\n\n## Prerequisites\n\n### Set up n8n\n\nFollow the instructions mentioned in the[ documentation](https://docs.n8n.io/try-it-out/quickstart/?ref=blog.n8n.io) to install and spin-up an n8n instance on your machine. You can also sign-up for a [free n8n cloud trial](https://n8n.io/cloud?ref=blog.n8n.io) to get access to our hosted service.\n\n### Set up a Google Sheet\n\nCreate a Google Sheet like [this Google Sheet](https://docs.google.com/spreadsheets/d/1PyC-U1lXSCbxVmHuwFbkKDF9e3PW_iUn8T-iAd_MYjQ/edit?usp=sharing&ref=blog.n8n.io). We will monitor this sheet for new data that gets added. Feel free to make a copy of my Sheet.\n\n![](https://lh3.googleusercontent.com/PPYxhPc9RUXv02nCFWK5xN6O1AfU3pRr7XjbJ0_rKdzPRkRIl7agGuzgUiW9TWV-YWbQ-trUx0HYlsO2d54rie_huwZKcdzmkyI1TOlNkP_kQzdWS3FhjuIOxhpztZU6yMQy5m-r)Google Sheet used in this tutorial\n\nWe will also need to configure credentials for the [_Google Sheets_](https://docs.n8n.io/nodes/n8n-nodes-base.googleSheets/?ref=blog.n8n.io#google-sheets) node. For this tutorial, we will use the OAuth authentication method. You can learn to configure the OAuth credentials by following the steps mentioned in the [documentation](https://docs.n8n.io/credentials/google/?ref=blog.n8n.io#using-oauth).\n\n### Set up Mattermost\n\nWe will send a message to a channel in a Mattermost team if new data gets added. Create a Mattermost team if you don’t have one already.\n\nYou will also have to configure the credentials for the [_Mattermost_](https://docs.n8n.io/nodes/n8n-nodes-base.mattermost?ref=blog.n8n.io) node. Follow the instructions mentioned in the [documentation](https://docs.n8n.io/credentials/mattermost/?ref=blog.n8n.io) to configure the credentials.\n\n## Quick Start\n\nIf you don’t want to get into the details and have experience building workflows in n8n, you can follow the quick-start instructions below. If something is unclear or you want to learn more about how it works, feel free to dig deeper into the sections that follow.\n\nAccess your n8n instance, and copy and paste the workflow from the [workflow](https://n8n.io/workflows/864?ref=blog.n8n.io) page. Configure the following nodes:\n\n  1. **Google Sheets node**\n\n\n  * Use the credentials that you configured earlier.\n  * Enter the Sheet ID of your Sheet in the _**Sheet ID**_ field. If you’re not sure how to find the Sheet ID, refer to the section Google Sheets section below.\n\n\n\n**Note** : If you change a column name in your Google Sheet, make sure to configure the _Function_ node accordingly.\n\n2.**Mattermost node**\n\n  * Use the credentials that you configured earlier.\n  * If you’re not the system administrator, enter the channel ID where you want the app to send the message in the _**Channel ID**_ field. Otherwise, select the channel from the _**Channel ID**_ dropdown list. Refer to the Mattermost section below, to learn more about the steps.\n\n\n\nSave and execute the workflow!\n\n**Note** : Activate the workflow to run it in production.\n\n## The Workflow\n\nThis workflow can be divided into three stages, as it progresses from start to finish:\n\n  * Read Data\n  * Extract New Data\n  * Communication\n\n\n\n## Stage 1 - Read Data\n\n### Interval node (Execute every 45 mins)\n\nThe _Interval_ node triggers the workflow at a regular interval of time. For this tutorial, we want to execute the workflow every 45 minutes.\n\nClick on the ‘ _**+**_ ’ button on the top right corner and click on the _**Trigger**_ tab. Select the _Interval_ node from the list to add the node.\n\nSelect ‘Minutes’ from the _**Unit**_ dropdown list and set the value of _**Interval**_ to 45.\n\nRename the node’s headline from “Interval” to “Execute every 45 mins” by clicking the name, editing it, and clicking the ✔ (checkmark) to the right of the name. This will finish the configuration of the node and close the parameters window. Select ‘Save As’ from the _**Workflow**_ menu on the left sidebar. Once you save the workflow, click on the _**Execute Node**_ button to execute the node.\n\nAdding the Interval node for Monitor changes in Google Sheets every 45 mins workflow\n\n### Google Sheets node (Read data)\n\nThe _Google Sheets_ node in n8n allows you to create new sheets and read, lookup, append, delete, and update data from a sheet. Our workflow will read the data from a Google Sheet every 45 minutes.\n\nTo add the _Google Sheets_ node, click on the ‘ _**+**_ ’ button, and select the _Google Sheets_ node from the _**Regular**_ section. Use the credentials that you configured earlier.\n\nCopy the string of characters located between `/d/` and `/edit` in your spreadsheet URL. This string is the Sheet ID. For example, for the URL `https://docs.google.com/spreadsheets/d/1PyCgaglXSCbxVmHuwFbkKDF9e3PW_iUn8T-iAd_MYjQ/edit#gid=0` the Sheet ID is `1PyCgaglXSCbxVmHuwFbkKDF9e3PW_iUn8T-iAd_MYjQ`. Enter this Sheet ID in the _**Sheet ID**_ field in the _Google Sheet_ node. Enter the range of the columns in the _**Range**_ field. The range contains the column references corresponding to those on the spreadsheet. The range tells the _Google Sheets_ node from which columns to read the data.\n\nRename the node to _**Read data**_ and click on the _**Execute Node**_ button. The node will return the data from the Google Sheet.\n\nAdding the Google Sheets node to read data from the Google Sheets\n\n## Stage 2- Extract new data\n\n### Function node (Check if new data)\n\nOur workflow reads the data from a Google Sheet and returns all the data. However, we only want the data that was recently added. We will use the _Function_ node to return only the data that was added after the previous execution.\n\nTo help you understand this better, let us take a look at an example. Our workflow ran at 1:00 PM and returned the following data:\n    \n    \n    [\n    \t{\n    \t\t\"id\": 0,\n    \t\t\"name\": \"Sam\",\n    \t\t\"email\": \"sam@testmail.com\"\n    \t},\n    \t{\n    \t\t\"id\": 1,\n    \t\t\"name\": \"Ram\",\n    \t\t\"email\": \"ram@testmail.com\"\n    \t}\n    ]\n\nNew data was added to our Google Sheet at 1:20 PM. When your workflow will execute next, we only want this new data. Using the _Function_ node we will return this new data. n8n has a `getWorkflowStaticData()` method that gives access to the static workflow data. We can save data directly with the workflow, however, this data should be very small. When the workflow execution succeeds, n8n will check automatically if the data has changed and will save it, if necessary.\n\nClick on the ‘ _**+**_ ’ icon and select the _Function_ node from the list. In the _**Javascript Code**_ editor, paste the following code snippet.\n    \n    \n    const new_items = [];\n    \n    // Get static data stored with the workflow\n    const data = $getWorkflowStaticData(\"node\");\n    \n    data.ids = data.ids || [];\n    \n    for (let i = items.length - 1; i >= 0; i--) {\n    \n    \t// Check if data is already present\n    \tif (data.ids.includes(items[i].json.ID)) {\n    \t\tbreak;\n    \t} else {\n    \n    \t\t// if new data then add it to an array\n    \t\tnew_items.push({\n    \t\t\tjson: {\n    \t\t\t\tid: items[i].json.ID,\n    \t\t\t\tname: items[i].json.Name,\n    \t\t\t\temail: items[i].json.Email\n    \t\t\t},\n    \t\t});\n    \t}\n    }\n    \n    data.ids = items.map((item) => item.json.ID);\n    \n    // return new items\n    return new_items;\n\nThe above code snippet gets the static workflow data and checks for new items. If new items are found, it is added to an array and gets returned by the node. If the data remains unchanged, an empty array is returned by the node.\n\nRename the node to _**Check if new data**_ and click on the _**Execute Node**_ button.\n\n**Note** : The static data can not be read and written when we’re building the workflow. Hence, on every execution, the node will return all the data. When the workflow is set to active and triggered by a Trigger node, the node will save the static data and return only the new data that was added (if any).\n\nThe following image shows the output returned by the node when the workflow is not active.\n\n![](https://lh6.googleusercontent.com/aQeHOImWAlKlcgk4c4nDwnb6vRHt48znW2pXlLkAmC4tuqeTcDODLhlmtT1RttCsBnkQuq3jfDhQ7D93U_86VNYxKA1RObii5BXCv0FJoS6sSF1UAPRWWZjCsRbkMidBuDPJsh83)Output returned by the Function node when the workflow is not active\n\nThe following image shows the output returned by the node when the workflow is active.\n\n![](https://lh5.googleusercontent.com/65v5IkfgAYFXwq3a8CR6Wi_4zQrMkRY5tGAi45r_jQcn5lC2nWXL0RzXZf9Ja7IvrXPBvFa0mCB5YMtRO1BhOOohIZ_R4Qky1vXRxpl98HZAiZ4IpbUjbQi0gYAw9_GTGGCFQU0x)Output returned by the Function node when the workflow is active\n\nAdding the Function node to get new or updated data (if any)\n\n## Stage 3- Communication\n\n### Mattermost node (Send message)\n\nIf new data was added to the Google Sheet we will send a message to Mattermost along with the new data. We will send a message to the `updates` channel. But you can select a different channel to send the message.\n\nClick on the ‘ _**+**_ ’ button and select the _Mattermost_ node. Connect the node to the _**true**_ branch of the _Is new item?_ node. Use the credentials you configured earlier.\n\nIf you are not the system administrator of the Mattermost team, navigate to Mattermost and select the ‘updates’ channel from the left sidebar. Click on the caret next to ‘updates’ and select ‘View Info’ from the dropdown list. Copy and paste the displayed ID in the _**Channel ID**_ field in the Mattermost node.\n\n![](https://lh3.googleusercontent.com/djMaFXc-FELMgNoxo7Hv4L4TM7yU_UU8L0QGTIb-_ekqBp0UxFb73fesNId3Nf0hWPmEOIWC7zqw3VCm3w9kDckHL_2Vtf9AZalo7QCANZOcxrqY3woUqxHA2vHYUnXpa5sgtBC6)Finding channel ID of a Mattermost channel\n\nIf you’re the system administrator, select the ‘updates’ channel from the _**Channel ID**_ dropdown list.\n\nClick on the gears icon next to the _**Message**_ field and select ‘Add Expression’. Enter the following expression in the _**Expression Editor**_.\n    \n    \n    New information was added to your Google Sheet.\n    ID: {{$json[\"id\"]}}\n    Name: {{$json[\"name\"]}}\n    Email: {{$json[\"email\"]}}\n\nRename the node to _**Send message**_ and click on _**Execute Node**_ to run the node.\n\nAdding the Mattermost node to a send message if data was added or updated\n\n## What’s next?\n\nCurrently, the _Check if new data_ node in our workflow returns all the items since the static data is not getting saved. Save the workflow and toggle the Active, on the top right, to true. This will set our workflow to active and our workflow will execute every 45 mins. Add new data to the Google Sheets, and after 45 mins (for testing you can set the time to 2 mins!) you will receive a message on Mattermost.\n\nSuch polling workflows can be used for various use-cases. If you’re using Google Forms to collect data, and if the form adds the data to a Google Sheet, you can build a workflow that will trigger the workflow whenever there is a new form response.\n\nAnother interesting use-case can be for Twitter. You can build a polling workflow that executes every 10 mins. This workflow would fetch Tweets for your search criteria using the Twitter node and return the most recent tweets. At n8n, we use a similar workflow that sends a message to Mattermost with the recent Tweets. You can find the workflow on the [workflow page](https://n8n.io/workflows/875?ref=blog.n8n.io).\n\nA few more examples where polling can help:\n\n  * Trigger a workflow when an event gets added to your Google Calendar using the Google Calendar node\n  * Trigger a workflow when price changes for a cryptocurrency using the CoinGecko node\n  * Trigger a workflow when new data gets added to your database (MongoDB, Postgres, etc.)\n\n\n\n## Summary\n\nIn this tutorial, we learned how polling can help us overcome a barrier for the nodes that do not have a Trigger node. We can use polling with the nodes that do not have a default Trigger node and build a workflow based to trigger actions when new data is added or updated.\n\nWe built a polling workflow that executes every 45 mins and reads data from a Google Sheet. If the data has been updated or new data has been added, the workflow sends a message to Mattermost.\n\nI’d like to know about how you are using the concept of polling and building workflows with n8n! If you run into any issues while following the tutorial, feel free to message me on[ Twitter](https://twitter.com/harshil1712?ref=blog.n8n.io) or ask for help on our[ forum](https://community.n8n.io/?ref=blog.n8n.io) 🧡\n\n _Start automating!_\n\n_The best part is, you can start automating for free with n8n. The easiest way to get started is to sign up for a[free n8n cloud trial](https://n8n.io/pricing/?ref=blog.n8n.io). Thanks to n8n’s fair-code license, you can also _[_self-host n8n for free_](https://docs.n8n.io/hosting/?ref=blog.n8n.io) _._\n\n## Subscribe to n8n newsletter\n\nGet the best, coolest, and latest in automation and low-code delivered to your inbox each week. \n\nSomething went wrong. Please try again later.\n\nSubscribed!\n\nSubscribe\n\n[](https://twitter.com/intent/tweet?text=Creating%20triggers%20for%20n8n%20workflows%20using%20polling&url=https://blog.n8n.io/creating-triggers-for-n8n-workflows-using-polling/) [](https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/creating-triggers-for-n8n-workflows-using-polling/)\n",
  "crawled_at": "2025-05-28T10:54:49.972255"
}