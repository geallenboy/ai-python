{
  "url": "https://blog.n8n.io/how-to-make-timesheet-reports-via-markdown-node/",
  "title": "How to generate timesheet reports using the Markdown Node",
  "excerpt": "Learn how to automatically create timesheet reports in HTML format from scratch, using the Markdown node and basic JavaScript in n8n workflows.",
  "thumbnail": "https://blog.n8n.io/content/images/size/w1200/2022/06/markdown.png",
  "tags": [
    "Tutorial"
  ],
  "html": "<p>I am an experienced statistical programmer and I‚Äôve been working as a freelancer for several years already. I‚Äôve been using <a href=\"https://n8n.io/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">n8n</a> for both personal and work use cases, for example to <a href=\"https://blog.n8n.io/lowcode-multilingual-telegram-bot/\">build a multilingual Telegram bot</a> and <a href=\"https://blog.n8n.io/how-to-extend-n8n-with-additional-tools/\">generate data visualizations with ggplot2</a>.</p><p>In my work, I use OnlyOffice cloud software for most of the admin activities: project management, personal knowledge base, time tracking, invoicing, and much more. While OnlyOffice is a great universal ‚Äúswiss knife‚Äù for many companies, its integration between different modules is not optimal, and the possibilities for custom reporting are limited.</p><p>As an alternative, recently I have started to generate custom timesheets using the <a href=\"https://api.onlyoffice.com/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">OnlyOffice API</a> and n8n. It‚Äôs a great tool for moving data between different services, but it can also be used to generate reports from scratch, thanks to the recently added <a href=\"https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.markdown/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><strong>Markdown node</strong></a>.</p><p>In this tutorial, I will walk you through a <a href=\"https://n8n.io/workflows/1692-markdown-timesheet-report-generation/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">workflow that prepares a markdown document and converts it to a nice HTML timesheet report</a>, using the <em>Markdown</em> node and a bit of JavaScript.</p><p>We will not be using OnlyOffice for that, because it's a specific SAAS tool, but the general principles of creating markdown files are the same.</p><!--kg-card-begin: markdown--><h4 id=\"table-of-contents\">Table of contents</h4>\n<p><a href=\"#the-use-case-generate-markdown-html-report\">The use case: generate markdown HTML report</a><br>\n<a href=\"#prerequisites-for-building-the-workflow\">Prerequisites for building the workflow</a><br>\n<a href=\"#building-the-workflow-for-generating-markdown-html-reports\">Building the workflow for generating markdown HTML reports</a><br>\n&nbsp; &nbsp; &nbsp; <a href=\"#getting-and-processing-raw-data\">Getting and processing raw data</a><br>\n&nbsp; &nbsp; &nbsp; <a href=\"#creating-a-markdown-file\">Creating a markdown file</a><br>\n&nbsp; &nbsp; &nbsp; <a href=\"#generating-an-html-report\">Generating an HTML report</a><br>\n<a href=\"#whats-next\">What's next?</a></p>\n<!--kg-card-end: markdown--><h2 id=\"the-use-case-generate-markdown-html-report\">The use case<strong><strong>: generate markdown HTML report</strong></strong></h2><p>The workflow for generating Markdown HTML reports consists of eight core nodes that accomplish the following tasks:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/06/mdworkflow.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"1165\" height=\"552\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/06/mdworkflow.png 600w, https://blog.n8n.io/content/images/size/w1000/2022/06/mdworkflow.png 1000w, https://blog.n8n.io/content/images/2022/06/mdworkflow.png 1165w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Workflow for generating markdown report and converting it into an HTML file</figcaption></figure><ol><li>First<strong><strong> <a href=\"https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.function/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><strong>Function node</strong></a> </strong></strong>contains the mock data for the tutorial. In real-life scenarios you can put a different node for your timesheet system or an HTTP Request node to retrieve the data if the custom node is not yet available.</li><li><a href=\"https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.itemlists/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><strong>ItemList node</strong></a> (SortElements) sorts the records by User, Task and due date.</li><li><strong>ItemList node</strong> (GetImg) gets unique URLs of the user avatars (since we are building an HTML report, I thought it would be an interesting exercise to learn how to insert images into the report).</li><li><a href=\"https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.httprequest/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><strong>HTTP Request node</strong></a> downloads these images, after this list is created. The results will be available in the binary section of the node.</li><li><a href=\"https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.merge/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><strong>Merge node</strong></a><strong> </strong>with Outer Join and &nbsp;Merge by Index mode combines our original timesheet table with the binary data for easier processing.</li><li>Second<strong><strong> <strong>Function node</strong></strong></strong> contains a JavaScript code that creates a long character variable in a markdown format (more on that below).</li><li><strong><strong><a href=\"https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.markdown/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><strong>Markdown node</strong></a></strong></strong> with the Markdown to HTML mode converts the character string into a standalone HTML page.</li><li><a href=\"https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.movebinarydata/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><strong>Move Binary Data</strong></a> node converts the HTML page into a binary object, so that you can directly download the report from an n8n UI or attach it to an email.</li></ol><h2 id=\"prerequisites-for-building-the-workflow\">Prerequisites for building the workflow</h2><ul><li><strong>n8n </strong><a href=\"https://docs.n8n.io/hosting/installation/docker/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">in Docker</a>: n8n is a fair-code licensed automation tool. What I personally like about this tool as a programmer is its flexibility. In this tutorial we will write a JavaScript code to create a custom timesheet report.</li><li>Some <strong>JavaScript</strong> knowledge. Please note that this article contains a bit of JavaScript code, so it would be helpful to understand what the provided code snippets do if you want to tweak the code.</li><li>Basic <strong>HTML/CSS</strong> knowledge. If you are not familiar with this, all snippets with comments will be provided during this tutorial.</li></ul><h2 id=\"building-the-workflow-for-generating-markdown-html-reports\">Building the workflow <strong>for generating markdown HTML reports</strong></h2><p>This workflow consists of three main parts that accomplish the following tasks:</p><ol><li>Getting and processing raw data, which is a ready-made timesheet records table</li><li>Creating a markdown file out of the records table using the <em>Function</em> node</li><li>Converting the markdown file &nbsp;to an HTML report using the <em>Markdown</em> node<br></li></ol><p>In the following sections, I‚Äôll walk you through the setup process of the nodes in this workflow. Let‚Äôs get started!</p><h3 id=\"getting-and-processing-raw-data\">Getting and processing raw data</h3><p>You can obtain raw timesheet data from different SAAS tools. For <a href=\"https://n8n.io/workflows/1692?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">this workflow</a> I used the Function node to create &nbsp;a table, which contains user information (Name, Avatar URL) and task details (Title, due date, note and hours spent). When you execute the Function node, the table looks like this:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/06/image1.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"899\" height=\"443\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/06/image1.png 600w, https://blog.n8n.io/content/images/2022/06/image1.png 899w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Example of the raw timesheet data</figcaption></figure><h3 id=\"creating-a-markdown-file\">Creating a markdown file</h3><p>Before we start creating a markdown document, let‚Äôs recap what it is.</p><div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-emoji\">üí°</div><div class=\"kg-callout-text\">A markdown document is a text file that has additional markup symbols, like words wrapped with *asterisks* or a line starting with #hash sign. These symbols instruct a markdown parser how the final text should look like. In addition to text, markdown format also supports tables and images.</div></div><p>In n8n, you can use the Markdown node, which uses the <a href=\"http://demo.showdownjs.com/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Showdown</a> library, to process markdown files.</p><p>Now we are ready to create a markdown document from scratch. In our case the markdown is just a long string variable. I have prepared a code example in a <em>Function</em> node:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// create report header and custom table style\nvar md_reporthead=\"#Timesheet report\\n\";\nvar md_style =  (`\n&lt;style&gt; table {border: 0.5px solid; border-spacing: 0px;}\n        table th {border-bottom: 0.5px solid;}\n        table thead {background: #D0E4F5;}\n        table tr:nth-child(even) { background: #D8D8D8;}\n&lt;/style&gt;\\n\\n`);\nvar md_reportbody=md_style+md_reporthead;\n\n//declare several variables that are used for report generation\nvar tablehead = \"| Date | Hours | Task Description |\\n|:---|:---:|---|\\n\";\nvar cur_user=\"\";\nvar cur_usernum=0;\nvar cur_task=\"\";\nvar cur_tasktotal=0;\n \nfor (item of items) {\n   // Check if new user\n  if (item.json.UserName != cur_user) {\n    // Close previous user's task\n    md_reportbody += (cur_tasktotal) ? `\\n*${cur_tasktotal.toFixed(2)} - Total hours for this task*\\n` : \"\";\n    cur_tasktotal = 0; cur_task=\"\";\n    // add new user and embed avatar as base64 image\n    cur_user = item.json.UserName;\n    md_reportbody += `\\n##![img](data:image/png;base64,${items[cur_usernum].binary.data.data}) ${cur_user}\\n`;\n    cur_usernum   += 1;\n  } // Check for new user - ENDIF\n \n  // Check if new task\n  if (item.json.TaskTitle != cur_task) {\n    // if not empty task - add total amount of hours for *previous* task\n    md_reportbody += (cur_tasktotal) ? `\\n*${cur_tasktotal.toFixed(2)} - Total hours for this task*\\n` : \"\";\n    // Add new task header and reset total hours counter\n    cur_task = item.json.TaskTitle;\n    md_reportbody += `\\n###${cur_task}\\n${tablehead}`;\n    cur_tasktotal = 0;\n  } // Check for new task - ENDIF\n \n  // Add current task + update total hours\n   md_reportbody += `| ${item.json.date.split('T',1)} | ${item.json.hours.toFixed(2)} | ${item.json.note} |\\n`;\n   cur_tasktotal += item.json.hours;\n}\n \n// Let's not forget the last task's total hours:\nmd_reportbody += (cur_tasktotal) ? `\\n*${cur_tasktotal.toFixed(2)} - Total hours for this task*\\n` : \"\";\n \n// Finalise the report\nmd_reportbody += `\\n*Timesheet report generated on: ${$now.toISODate()}*`;\nreturn [{mdreport: md_reportbody}];\n</code></pre>\n<!--kg-card-end: markdown--><p>Here is a visual explanation of what‚Äôs going on in the JavaScript code:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/06/image4.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"1500\" height=\"700\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/06/image4.png 600w, https://blog.n8n.io/content/images/size/w1000/2022/06/image4.png 1000w, https://blog.n8n.io/content/images/2022/06/image4.png 1500w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Report generation schematic</figcaption></figure><ol><li>We create a report head and add a custom HTML style. This style makes tables look nice: it adds table borders, blue header, and applies different background colors to the table lines.</li><li>We declare a few variables which are needed during report generation: user name, task name, total hours per task.</li><li>In the main for loop we iterate over each task in a table and populate the report according to the schematic image shown above.</li></ol><p>There are several important things to notice.</p><p>First, take a look at these two lines:</p><!--kg-card-begin: markdown--><p><code>var tablehead = \"| Date | Hours | Task Description |\\n|:---|:---:|---|\\n\";</code></p>\n<!--kg-card-end: markdown--><p>creates a table head according to the GFM (GitHub Flavored Markdown Spec). Tables aren't part of the core Markdown spec, but they are supported in the GFM, and the Showdown markdown parser knows about them.</p><p>Second, let‚Äôs take a look how user avatars are added:</p><!--kg-card-begin: markdown--><pre><code>md_reportbody += `\\n##![img](data:image/png;base64,${items[cur_usernum].binary.data.data}) ${cur_user}\\n`;\n</code></pre>\n<!--kg-card-end: markdown--><p>Here they are embedded into the markdown document directly as a base64 string. Of course, it is always possible to provide a direct link to an image. However, direct links don‚Äôt always work, especially if you want to put an image from your CRM system or a cloud storage which access could be restricted.</p><p>Another option is to provide a relative link, but this requires you to send several files along with the HTML report, which is not convenient. That‚Äôs why embedding images seems to be an optimal solution here.</p><h3 id=\"generating-an-html-report\">Generating an HTML report</h3><p>Once you have prepared a markdown document, it is possible to convert it via the <em>Markdown</em> node. To do this, configure the following parameters in the Markdown node:<br></p><ul><li><em><strong>Mode</strong></em>: <em>Markdown to HTML</em>.</li><li><em><strong>Markdown</strong></em>: `{{$json[\"mdreport\"]}}`.<br>This is an expression which contains the text variable from the <em>Function</em> node.</li><li><em><strong>Complete HTML Document</strong></em>: toggle to true<br>This option returns a full HTML page.</li><li><em><strong>No Header ID: </strong></em>toggle to true<br>The header ID<em><strong> </strong></em>is provided, as we don‚Äôt use them in this example.</li><li><em><strong>Simple Line Breaks</strong></em>: toggle to true,<br>so that only one new line symbol is sufficient to separate the lines.</li><li><em><strong>Table Support</strong></em>: toggle to true<br>This option will display the tables in our report.</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/06/image2.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"345\" height=\"570\"><figcaption>Markdown node settings</figcaption></figure><p>After the markdown document is converted to HTML report, you need to use the <em>Move Binary Data</em> node with the following options:</p><ul><li><em><strong>Use Raw Data</strong></em>: toggle to true<br>This option saves the HTML report without any further transformations.</li><li><em><strong>Mime Type</strong></em>: <em>text/html</em><br>This option can be set for convenience, so that the final output can be viewed directly in the workflow canvas.</li></ul><p>When you execute the Move Binary Data node, the result looks like this:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/06/image5.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"1600\" height=\"635\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/06/image5.png 600w, https://blog.n8n.io/content/images/size/w1000/2022/06/image5.png 1000w, https://blog.n8n.io/content/images/2022/06/image5.png 1600w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Markdown and HTML source code (left), final result (right)</figcaption></figure><p>Once the report is ready, you can send it via an email as an attachment or upload it into a cloud storage.</p><p><strong>Important note!</strong> If you want to send the report directly in the email body, then the <em>Markdown</em> node option <em><strong>Complete HTML Document</strong></em> should be switched off. It can also happen that an email service will alter the HTML code for better security. This can lead to some unwanted results, such as loss of table styling or images becoming unavailable.</p><h2 id=\"what%E2%80%99s-next\">What‚Äôs next?</h2><p>In this tutorial sample data was provided. You can try to connect your favorite CRM or Timesheet system with n8n and update the <em>Function</em> node to create a similar report with your own data.</p><p>If you want to test your JavaScript skills, feel free to update the code and calculate the total amount of hours per user, for example.</p><p>If you want to dive deeper into n8n, you can:</p><ul><li>Try out <strong><a href=\"https://n8n.io/pricing/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">other n8n setups</a>: </strong><a href=\"https://docs.n8n.io/hosting/installation/desktop-app/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">download the free desktop app</a>, <a href=\"https://docs.n8n.io/hosting/installation/cloud/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">sign up for n8n.cloud</a> or<a href=\"https://docs.n8n.io/hosting/installation/docker/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"> self-host n8n</a>.</li><li><strong>Read more <a href=\"https://blog.n8n.io/tag/tutorial/\">tutorials</a></strong> and <strong>check out the <a href=\"https://n8n.io/workflows/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">workflows page</a></strong> to get inspiration for your next projects.</li><li><a href=\"https://github.com/n8n-io/n8n/blob/master/CONTRIBUTING.md?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><strong>Contribute to the code</strong></a>, as n8n is source-available. But there are <a href=\"https://docs.n8n.io/contributing/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">other ways you can contribute</a> as well, depending on your skills.</li></ul>\n\t\t<div class=\"newsletter-banner\">\n\t    <div class=\"newsletter-banner-content\">\n\t      <div class=\"section-header\">\n\t        <h2>Subscribe to <span>n8n newsletter</span></h2>\n\t        <div class=\"section-subheader--bottom\">\n\t          Get the best, coolest, and latest in automation and low-code delivered to your inbox each week.\n\t        </div>\n\t      </div>\n\t      <div class=\"newsletter-banner-form\">\n\t        <form autocomplete=\"off\" class=\"contact-form\" onsubmit=\"subscribeNewsletter(event)\">\n\t        \t<div id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB\" data-callback=\"submitSubscription\" data-size=\"invisible\"><div class=\"grecaptcha-badge\" data-style=\"bottomright\" style=\"width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;\"><div class=\"grecaptcha-logo\"><iframe title=\"reCAPTCHA\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-9kuw8un41ht9\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB&amp;co=aHR0cHM6Ly9ibG9nLm44bi5pbzo0NDM.&amp;hl=en&amp;v=jt8Oh2-Ue1u7nEbJQUIdocyd&amp;size=invisible&amp;cb=jd5i4ywol7vd\"></iframe></div><div class=\"grecaptcha-error\"></div><textarea id=\"g-recaptcha-response\" name=\"g-recaptcha-response\" class=\"g-recaptcha-response\" style=\"width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;\"></textarea></div><iframe style=\"display: none;\"></iframe></div>\n\t          <div class=\"input-wrapper\">\n\t            <input placeholder=\"Email\" name=\"email\" type=\"email\" required=\"required\" class=\"\">\n\t            <div class=\"messages\">\n\t              <div class=\"message message--error\">Something went wrong. Please try again later.</div>\n\t              <div class=\"message message--success\">Subscribed!</div>\n\t            </div>\n\t          </div>\n\t          <button type=\"submit\" class=\"submit-btn\">Subscribe</button>\n\t        </form>\n\t      </div>\n\t    </div>\n    </div>\n\t\t<div class=\"post-share-section\">\n\t<div class=\"post-share-wrap\">\n\t\t<a href=\"https://twitter.com/intent/tweet?text=How%20to%20generate%20timesheet%20reports%20using%20the%20Markdown%20Node&amp;url=https://blog.n8n.io/how-to-make-timesheet-reports-via-markdown-node/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\"></path></svg></a>\n\t\t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/how-to-make-timesheet-reports-via-markdown-node/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z\"></path></svg></a>\n\t\t<!-- <a href=\"javascript:\" class=\"post-share-link\" id=\"copy\" data-clipboard-target=\"#copy-link\" aria-label=\"Copy link icon\"><svg role=\"img\" viewBox=\"0 0 33 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M27.3999996,13.4004128 L21.7999996,13.4004128 L21.7999996,19 L18.9999996,19 L18.9999996,13.4004128 L13.3999996,13.4004128 L13.3999996,10.6006192 L18.9999996,10.6006192 L18.9999996,5 L21.7999996,5 L21.7999996,10.6006192 L27.3999996,10.6006192 L27.3999996,13.4004128 Z M12,20.87 C7.101,20.87 3.13,16.898 3.13,12 C3.13,7.102 7.101,3.13 12,3.13 C12.091,3.13 12.181,3.139 12.272,3.142 C9.866,5.336 8.347,8.487 8.347,12 C8.347,15.512 9.866,18.662 12.271,20.857 C12.18,20.859 12.091,20.87 12,20.87 Z M20.347,0 C18.882,0 17.484,0.276 16.186,0.756 C14.882,0.271 13.473,0 12,0 C5.372,0 0,5.373 0,12 C0,18.628 5.372,24 12,24 C13.471,24 14.878,23.726 16.181,23.242 C17.481,23.724 18.88,24 20.347,24 C26.975,24 32.347,18.628 32.347,12 C32.347,5.373 26.975,0 20.347,0 Z\"/></svg></a>\n\t\t<small class=\"share-link-info\">The link has been copied!</small> -->\n\t</div>\n\t<input type=\"text\" value=\"https://blog.n8n.io/how-to-make-timesheet-reports-via-markdown-node/\" id=\"copy-link\" aria-label=\"Copy link input\">\n</div>",
  "readme": "I am an experienced statistical programmer and I‚Äôve been working as a freelancer for several years already. I‚Äôve been using [n8n](https://n8n.io/?ref=blog.n8n.io) for both personal and work use cases, for example to [build a multilingual Telegram bot](https://blog.n8n.io/lowcode-multilingual-telegram-bot/) and [generate data visualizations with ggplot2](https://blog.n8n.io/how-to-extend-n8n-with-additional-tools/).\n\nIn my work, I use OnlyOffice cloud software for most of the admin activities: project management, personal knowledge base, time tracking, invoicing, and much more. While OnlyOffice is a great universal ‚Äúswiss knife‚Äù for many companies, its integration between different modules is not optimal, and the possibilities for custom reporting are limited.\n\nAs an alternative, recently I have started to generate custom timesheets using the [OnlyOffice API](https://api.onlyoffice.com/?ref=blog.n8n.io) and n8n. It‚Äôs a great tool for moving data between different services, but it can also be used to generate reports from scratch, thanks to the recently added [**Markdown node**](https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.markdown/?ref=blog.n8n.io).\n\nIn this tutorial, I will walk you through a [workflow that prepares a markdown document and converts it to a nice HTML timesheet report](https://n8n.io/workflows/1692-markdown-timesheet-report-generation/?ref=blog.n8n.io), using the _Markdown_ node and a bit of JavaScript.\n\nWe will not be using OnlyOffice for that, because it's a specific SAAS tool, but the general principles of creating markdown files are the same.\n\n#### Table of contents\n\nThe use case: generate markdown HTML report  \nPrerequisites for building the workflow  \nBuilding the workflow for generating markdown HTML reports  \n      Getting and processing raw data  \n      Creating a markdown file  \n      Generating an HTML report  \nWhat's next?\n\n## The use case****: generate markdown HTML report****\n\nThe workflow for generating Markdown HTML reports consists of eight core nodes that accomplish the following tasks:\n\n![](https://blog.n8n.io/content/images/2022/06/mdworkflow.png)Workflow for generating markdown report and converting it into an HTML file\n\n  1. First****[**Function node**](https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.function/?ref=blog.n8n.io) ****contains the mock data for the tutorial. In real-life scenarios you can put a different node for your timesheet system or an HTTP Request node to retrieve the data if the custom node is not yet available.\n  2. [**ItemList node**](https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.itemlists/?ref=blog.n8n.io) (SortElements) sorts the records by User, Task and due date.\n  3. **ItemList node** (GetImg) gets unique URLs of the user avatars (since we are building an HTML report, I thought it would be an interesting exercise to learn how to insert images into the report).\n  4. [**HTTP Request node**](https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.httprequest/?ref=blog.n8n.io) downloads these images, after this list is created. The results will be available in the binary section of the node.\n  5. [**Merge node**](https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.merge/?ref=blog.n8n.io)**** with Outer Join and  Merge by Index mode combines our original timesheet table with the binary data for easier processing.\n  6. Second******Function node****** contains a JavaScript code that creates a long character variable in a markdown format (more on that below).\n  7. ****[**Markdown node**](https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.markdown/?ref=blog.n8n.io)**** with the Markdown to HTML mode converts the character string into a standalone HTML page.\n  8. [**Move Binary Data**](https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.movebinarydata/?ref=blog.n8n.io) node converts the HTML page into a binary object, so that you can directly download the report from an n8n UI or attach it to an email.\n\n\n\n## Prerequisites for building the workflow\n\n  * **n8n**[in Docker](https://docs.n8n.io/hosting/installation/docker/?ref=blog.n8n.io): n8n is a fair-code licensed automation tool. What I personally like about this tool as a programmer is its flexibility. In this tutorial we will write a JavaScript code to create a custom timesheet report.\n  * Some **JavaScript** knowledge. Please note that this article contains a bit of JavaScript code, so it would be helpful to understand what the provided code snippets do if you want to tweak the code.\n  * Basic **HTML/CSS** knowledge. If you are not familiar with this, all snippets with comments will be provided during this tutorial.\n\n\n\n## Building the workflow **for generating markdown HTML reports**\n\nThis workflow consists of three main parts that accomplish the following tasks:\n\n  1. Getting and processing raw data, which is a ready-made timesheet records table\n  2. Creating a markdown file out of the records table using the _Function_ node\n  3. Converting the markdown file  to an HTML report using the _Markdown_ node  \n\n\n\n\nIn the following sections, I‚Äôll walk you through the setup process of the nodes in this workflow. Let‚Äôs get started!\n\n### Getting and processing raw data\n\nYou can obtain raw timesheet data from different SAAS tools. For [this workflow](https://n8n.io/workflows/1692?ref=blog.n8n.io) I used the Function node to create  a table, which contains user information (Name, Avatar URL) and task details (Title, due date, note and hours spent). When you execute the Function node, the table looks like this:\n\n![](https://blog.n8n.io/content/images/2022/06/image1.png)Example of the raw timesheet data\n\n### Creating a markdown file\n\nBefore we start creating a markdown document, let‚Äôs recap what it is.\n\nüí°\n\nA markdown document is a text file that has additional markup symbols, like words wrapped with *asterisks* or a line starting with #hash sign. These symbols instruct a markdown parser how the final text should look like. In addition to text, markdown format also supports tables and images.\n\nIn n8n, you can use the Markdown node, which uses the [Showdown](http://demo.showdownjs.com/?ref=blog.n8n.io) library, to process markdown files.\n\nNow we are ready to create a markdown document from scratch. In our case the markdown is just a long string variable. I have prepared a code example in a _Function_ node:\n    \n    \n    // create report header and custom table style\n    var md_reporthead=\"#Timesheet report\\n\";\n    var md_style =  (`\n    <style> table {border: 0.5px solid; border-spacing: 0px;}\n            table th {border-bottom: 0.5px solid;}\n            table thead {background: #D0E4F5;}\n            table tr:nth-child(even) { background: #D8D8D8;}\n    </style>\\n\\n`);\n    var md_reportbody=md_style+md_reporthead;\n    \n    //declare several variables that are used for report generation\n    var tablehead = \"| Date | Hours | Task Description |\\n|:---|:---:|---|\\n\";\n    var cur_user=\"\";\n    var cur_usernum=0;\n    var cur_task=\"\";\n    var cur_tasktotal=0;\n     \n    for (item of items) {\n       // Check if new user\n      if (item.json.UserName != cur_user) {\n        // Close previous user's task\n        md_reportbody += (cur_tasktotal) ? `\\n*${cur_tasktotal.toFixed(2)} - Total hours for this task*\\n` : \"\";\n        cur_tasktotal = 0; cur_task=\"\";\n        // add new user and embed avatar as base64 image\n        cur_user = item.json.UserName;\n        md_reportbody += `\\n##![img](data:image/png;base64,${items[cur_usernum].binary.data.data}) ${cur_user}\\n`;\n        cur_usernum   += 1;\n      } // Check for new user - ENDIF\n     \n      // Check if new task\n      if (item.json.TaskTitle != cur_task) {\n        // if not empty task - add total amount of hours for *previous* task\n        md_reportbody += (cur_tasktotal) ? `\\n*${cur_tasktotal.toFixed(2)} - Total hours for this task*\\n` : \"\";\n        // Add new task header and reset total hours counter\n        cur_task = item.json.TaskTitle;\n        md_reportbody += `\\n###${cur_task}\\n${tablehead}`;\n        cur_tasktotal = 0;\n      } // Check for new task - ENDIF\n     \n      // Add current task + update total hours\n       md_reportbody += `| ${item.json.date.split('T',1)} | ${item.json.hours.toFixed(2)} | ${item.json.note} |\\n`;\n       cur_tasktotal += item.json.hours;\n    }\n     \n    // Let's not forget the last task's total hours:\n    md_reportbody += (cur_tasktotal) ? `\\n*${cur_tasktotal.toFixed(2)} - Total hours for this task*\\n` : \"\";\n     \n    // Finalise the report\n    md_reportbody += `\\n*Timesheet report generated on: ${$now.toISODate()}*`;\n    return [{mdreport: md_reportbody}];\n    \n\nHere is a visual explanation of what‚Äôs going on in the JavaScript code:\n\n![](https://blog.n8n.io/content/images/2022/06/image4.png)Report generation schematic\n\n  1. We create a report head and add a custom HTML style. This style makes tables look nice: it adds table borders, blue header, and applies different background colors to the table lines.\n  2. We declare a few variables which are needed during report generation: user name, task name, total hours per task.\n  3. In the main for loop we iterate over each task in a table and populate the report according to the schematic image shown above.\n\n\n\nThere are several important things to notice.\n\nFirst, take a look at these two lines:\n\n`var tablehead = \"| Date | Hours | Task Description |\\n|:---|:---:|---|\\n\";`\n\ncreates a table head according to the GFM (GitHub Flavored Markdown Spec). Tables aren't part of the core Markdown spec, but they are supported in the GFM, and the Showdown markdown parser knows about them.\n\nSecond, let‚Äôs take a look how user avatars are added:\n    \n    \n    md_reportbody += `\\n##![img](data:image/png;base64,${items[cur_usernum].binary.data.data}) ${cur_user}\\n`;\n    \n\nHere they are embedded into the markdown document directly as a base64 string. Of course, it is always possible to provide a direct link to an image. However, direct links don‚Äôt always work, especially if you want to put an image from your CRM system or a cloud storage which access could be restricted.\n\nAnother option is to provide a relative link, but this requires you to send several files along with the HTML report, which is not convenient. That‚Äôs why embedding images seems to be an optimal solution here.\n\n### Generating an HTML report\n\nOnce you have prepared a markdown document, it is possible to convert it via the _Markdown_ node. To do this, configure the following parameters in the Markdown node:  \n\n\n  * _**Mode**_ : _Markdown to HTML_.\n  * _**Markdown**_ : `{{$json[\"mdreport\"]}}`.  \nThis is an expression which contains the text variable from the _Function_ node.\n  * _**Complete HTML Document**_ : toggle to true  \nThis option returns a full HTML page.\n  * _**No Header ID:**_ toggle to true  \nThe header ID _****_ is provided, as we don‚Äôt use them in this example.\n  * _**Simple Line Breaks**_ : toggle to true,  \nso that only one new line symbol is sufficient to separate the lines.\n  * _**Table Support**_ : toggle to true  \nThis option will display the tables in our report.\n\n![](https://blog.n8n.io/content/images/2022/06/image2.png)Markdown node settings\n\nAfter the markdown document is converted to HTML report, you need to use the _Move Binary Data_ node with the following options:\n\n  * _**Use Raw Data**_ : toggle to true  \nThis option saves the HTML report without any further transformations.\n  * _**Mime Type**_ : _text/html_  \nThis option can be set for convenience, so that the final output can be viewed directly in the workflow canvas.\n\n\n\nWhen you execute the Move Binary Data node, the result looks like this:\n\n![](https://blog.n8n.io/content/images/2022/06/image5.png)Markdown and HTML source code (left), final result (right)\n\nOnce the report is ready, you can send it via an email as an attachment or upload it into a cloud storage.\n\n**Important note!** If you want to send the report directly in the email body, then the _Markdown_ node option _**Complete HTML Document**_ should be switched off. It can also happen that an email service will alter the HTML code for better security. This can lead to some unwanted results, such as loss of table styling or images becoming unavailable.\n\n## What‚Äôs next?\n\nIn this tutorial sample data was provided. You can try to connect your favorite CRM or Timesheet system with n8n and update the _Function_ node to create a similar report with your own data.\n\nIf you want to test your JavaScript skills, feel free to update the code and calculate the total amount of hours per user, for example.\n\nIf you want to dive deeper into n8n, you can:\n\n  * Try out **[other n8n setups](https://n8n.io/pricing/?ref=blog.n8n.io): **[download the free desktop app](https://docs.n8n.io/hosting/installation/desktop-app/?ref=blog.n8n.io), [sign up for n8n.cloud](https://docs.n8n.io/hosting/installation/cloud/?ref=blog.n8n.io) or[ self-host n8n](https://docs.n8n.io/hosting/installation/docker/?ref=blog.n8n.io).\n  * **Read more[tutorials](https://blog.n8n.io/tag/tutorial/)** and **check out the[workflows page](https://n8n.io/workflows/?ref=blog.n8n.io)** to get inspiration for your next projects.\n  * [**Contribute to the code**](https://github.com/n8n-io/n8n/blob/master/CONTRIBUTING.md?ref=blog.n8n.io), as n8n is source-available. But there are [other ways you can contribute](https://docs.n8n.io/contributing/?ref=blog.n8n.io) as well, depending on your skills.\n\n\n\n## Subscribe to n8n newsletter\n\nGet the best, coolest, and latest in automation and low-code delivered to your inbox each week. \n\nSomething went wrong. Please try again later.\n\nSubscribed!\n\nSubscribe\n\n[](https://twitter.com/intent/tweet?text=How%20to%20generate%20timesheet%20reports%20using%20the%20Markdown%20Node&url=https://blog.n8n.io/how-to-make-timesheet-reports-via-markdown-node/) [](https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/how-to-make-timesheet-reports-via-markdown-node/)\n",
  "crawled_at": "2025-05-28T11:01:01.286298"
}