{
  "url": "https://blog.n8n.io/automatically-pulling-and-visualizing-data-with-n8n/",
  "title": "Automatically pulling and visualizing data with n8n",
  "excerpt": "Learn to pull info from sources like  GitHub, Docker, npm, and Product Hunt about a project like n8n and display it using a dashboard.",
  "thumbnail": "https://blog.n8n.io/content/images/size/w1200/2021/01/cover-1.jpg",
  "tags": [
    "Tips"
  ],
  "html": "<p>I use information from all over the internet. I visit hundreds of new web pages every day, both for personal and professional projects. It‚Äôs part of the process, and I‚Äôm happy to do it.</p><p>But, every day, I also waste precious time checking the same old websites for other vital information; weather, news, stock portfolio, email, Twitter, work alerts, and so on. And we all have a list like this. And you may find yours just as frustrating.</p><p>What annoys me the most is that the second I leave the site, I instantly wonder if the information has changed, and I stress out until I check it out again.</p><p>I finally got so fed up with all this chasing after information! Instead of me going to look up information in twenty different places, why can‚Äôt this information come to me in one single spot?</p><p>And that‚Äôs when it hit me ü•ä</p><h2 id=\"i-need-a-dashboard-\">I Need a Dashboard!</h2><p>A dashboard makes so much sense! It can contain any information that I want! It can be updated several times a day and can be permanently displayed on a monitor. All I need to do is glance at it for a few seconds, and I know what is going on.</p><p>What sealed the deal for me was that most web services can be easily queried with <a href=\"https://n8n.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">n8n</a>, which can then talk to <a href=\"https://smashing.github.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Smashing</a>, a dashboarding system. Combining these three technologies (web services, n8n and Smashing) would save me significant time every day and keep me better in the loop with what is going on in other areas of my life.</p><p>And the best part? You can build your custom dashboard as well!</p><p>In this article, we will pull information from <a href=\"https://github.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">GitHub</a>, <a href=\"https://www.docker.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Docker</a>, <a href=\"https://www.npmjs.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">npm</a>, and <a href=\"https://www.producthunt.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Product Hunt</a> about the n8n project and then display it using a Smashing dashboard. Since this information is constantly changing, n8n will perform this every minute. The workflow for this project looks something like this:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/01/dig.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"1542\" height=\"774\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/01/dig.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/01/dig.png 1000w, https://blog.n8n.io/content/images/2021/01/dig.png 1542w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>n8n Dashboard Data Workflow</figcaption></figure><h2 id=\"n8n-and-smashing\">n8n and Smashing</h2><p>The two essential pieces of this project are <a href=\"https://n8n.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">n8n</a> and <a href=\"https://smashing.github.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Smashing</a>. They make up the core of the project and are very well suited to working together.</p><p>Every minute, n8n gathers the data from the four data sources using their <a href=\"https://docs.n8n.io/reference/glossary.html?ref=blog.n8n.io#api\" target=\"_blank\" rel=\"noopener\">API</a> interfaces. It then takes this data and extracts the pieces which are useful and then pushes it to the Smashing dashboard.</p><p>At this point, Smashing takes over and displays the information it receives from n8n based on how the dashboard was built inside the Docker container and which Smashing API endpoint receives the information.</p><h2 id=\"how-smashing-works\">How Smashing Works</h2><p>While it is outside of the scope of this article to go into detail on how Smashing works, it is important for you to understand some of the fundamentals of Smashing.</p><p>Each Smashing dashboard is made up of a series of widgets. Each widget displays a piece of information. This information is fed to the widget through the Smashing API. Each widget has its own unique API endpoint. When the endpoint receives information, the widget displays that information.</p><p>These are the endpoints that have been created for this project and where their information originates:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/01/widgets.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"1199\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/01/widgets.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/01/widgets.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/01/widgets.png 1600w, https://blog.n8n.io/content/images/2021/01/widgets.png 2112w\" sizes=\"(min-width: 1200px) 1200px\"><figcaption>Dashboard Widgets and Their Data Origins</figcaption></figure><p>This dashboard API interface along with the widget types are defined in the <em>n8n_overview.erb</em> file located in the docker container. (If you are interested in seeing how this file creates the dashboard, it is available <a href=\"https://gist.github.com/TephlonDude/bb3d3b713af97b8e8d3c67d559048b0b?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">here</a>.)</p><h2 id=\"prerequisites\">Prerequisites</h2><p>If you want to build this project yourself, you will need a couple of things ready to go before you start:</p><ol><li><a href=\"https://n8n.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><strong>n8n</strong></a> ‚Äî You can get this up and running by checking out the <a href=\"https://docs.n8n.io/try-it-out/quickstart/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Quickstart</a> page. You should have a fresh install without any workflows. You can also sign-up for<a href=\"https://n8n.io/cloud?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"> </a>a <a href=\"https://n8n.io/cloud?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a> to get access to our hosted service. This workflow was created in n8n version 0.104.2.</li><li><a href=\"https://www.docker.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><strong>Docker</strong></a> ‚Äî To save you time, we have built a Docker container with all of the Smashing pieces pre-configured. This way, you can have this piece running quickly and easily. For more information on setting up a Docker environment, please check out one of these <a href=\"https://docker-curriculum.com/?ref=blog.n8n.io#setting-up-your-computer\" rel=\"noopener\" target=\"_blank\">tutorials</a>.</li><li><a href=\"https://github.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><strong>GitHub Account</strong></a> ‚Äî In order to ensure that you do not run into issues accessing the GitHub API, you can use your account to increase how frequently you can retrieve information from the API. If you do not have a GitHub account, you can <a href=\"https://github.com/join?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">join here</a> and you can learn how to set up your credentials for GitHub in n8n <a href=\"https://docs.n8n.io/credentials/github/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">here</a>.</li><li><a href=\"https://www.producthunt.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><strong>Product Hunt Account</strong></a> ‚Äî To use the Product Hunt API, you are required to authenticate with them using your account and a developer token (see ‚ÄúBut‚Ä¶ I just wanted to run a simple script?‚Äù in the <a href=\"https://api.producthunt.com/v1/docs?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Product Hunt API documentation</a>). If you do not have an account with Product Hunt, you can <a href=\"https://www.producthunt.com/login?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">sign up here</a>.</li></ol><h2 id=\"quick-start\">Quick Start</h2><p>Many of you want to experience the result before committing to a project or already know the majority of what you will be learning in this article. For you, I have put together this <strong>Quick Start</strong> option. Follow these steps to get up and running quickly. If something is unclear or you want to learn more about how it works, feel free to dig deeper into the sections that follow.</p><p>Here are the quick start steps:</p><ul><li>Install the docker container with the following two commands:</li></ul><pre><code class=\"language-sh\">docker pull tephlon/n8n_dashboard\n\ndocker pull tephlon/n8n_dashboarddocker run --name n8n_dashboard -d -p 8080:3030 --rm tephlon/n8n_dashboard:latest</code></pre><ul><li>Copy the n8n workflow from <a href=\"https://n8n.io/workflows/693?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">here</a> and paste it into your n8n installation</li><li>Modify the following nodes with your information. I have highlighted them in red in the workflow for easy identification:</li><li><strong>Dashboard Configuration</strong> ‚Äî set value of <em>dashboardHostname</em> to your docker install</li><li><strong>Retrieve Product Hunt Data</strong> ‚Äî set your <em>token </em>value based on your <a href=\"https://www.producthunt.com/v2/oauth/applications?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">developer token</a></li><li>Set up your <a href=\"https://docs.n8n.io/credentials/github/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">GitHub credentials</a></li><li>Save and activate workflow</li><li>Browse to port <code>8080</code> of your docker installation</li></ul><p>Now that you have a fully functioning dashboard, let‚Äôs take a look at what everything does, and maybe inspire you to tweak this workflow to suit your needs.</p><h2 id=\"the-five-stages-of-an-n8n-workflow\">The Five Stages of an n8n Workflow</h2><p>I have noticed in many of the workflows that I create there are five distinct stages that the workflow goes through from start to finish and this workflow is no exception.</p><ol><li>Trigger</li><li>Configuration</li><li>Data Retrieval</li><li>Data Processing</li><li>Action</li></ol><p>This is how the dashboard workflow looks broken up into these different stages:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/03/stages.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"600\" height=\"644\" srcset=\"https://blog.n8n.io/content/images/2022/03/stages.png 600w\"><figcaption>The Five Stages of the n8n Dashboard Workflow</figcaption></figure><p>Let‚Äôs work through setting up these five stages as they pertain to the dashboard project.</p><h3 id=\"stage-1-trigger\">Stage 1 ‚Äî Trigger</h3><p>Every workflow has to be told how to start, and this is referred to as the trigger. In this project, we want to update the dashboard with new information every minute. We‚Äôll use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.cron/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Cron</em></a> node for that.</p><p>Set the <strong>Mode </strong>parameter to <em>Every Minute</em>. Doing this will run the workflow (you guessed it) every minute.</p><p>Now, the workflow knows how and when to run.</p><h3 id=\"stage-2-configuration\">Stage 2 ‚Äî Configuration</h3><p>The configuration stage is generally a little more defined in my workflows than they are for others. I like to create a <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.set/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Set</em></a> node with the majority of the configuration options so that they are all in one place (although there are exceptions to this rule which we will cover in a minute). For those of you who have developed in other tools before, you can think of this node as <a href=\"https://en.wikipedia.org/wiki/Global_variable?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">global variables</a> that are available to all other nodes within the workflow.</p><p>Not all configuration settings are set at this time for two reasons:</p><ol><li>The value is retrieved in a later stage</li><li><em>Set </em>node values get copied when exported. If you have sensitive data such as API tokens in a <em>Set</em> node, they would also get exported (which would be bad)</li></ol><p>As a convention for myself, I like to color the borders of my nodes red that require configuration, and you will see that I have done this as well for this workflow.</p><p>For the configuration of this workflow, we have created a <em>Set</em> node called <em>Dashboard Configuration,</em> which contains several string values. Most of these values can be ignored at this point, but if you want to customize the dashboard to monitor your project, this is where you would make these changes. (More on this later.)</p><p>As described in the quick start section, the only change you need to add to the <em>Dashboard Configuration</em> node is to set the <em><code>dashboardHostnam</code>e</em> value so that it matches your docker container deployment. This is very specific to your docker installation and deployment of the tephlon/n8n_dashboard container. If your n8n installation is on the same system as your docker installation, this will be <em><code>localhost:8080</code></em>.</p><p>If docker is on a different system than your n8n installation, this value will be either <em><code>&lt;docker IP address&gt;:8080</code></em> or <em><code>&lt;docker hostname&gt;:8080</code></em>. So, if your docker installation is on <code>192.168.4.25</code>, this value would be <em><code>192.168.4.25:8080</code></em>. You should be able to get this information from your docker admin. (If it turns out that this person is you and you are uncertain about what this value is, I have found a handy <a href=\"https://www.youtube.com/watch?v=mPEM557bMR4&amp;ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">YouTube video</a> which may point you in the right direction.)</p><p>This node is connected to the previous <em>Cron</em> node so that these values are loaded every time that the workflow runs, and the values are reset if one of them gets accidentally changed by a different node.</p><h3 id=\"stage-3-data-retrieval\">Stage 3 ‚Äî Data Retrieval</h3><p>In this stage, we are collecting all of the data from the different data sources, often using settings from the configuration stage.</p><p>We are using two different types of nodes to collect data, depending on the service. n8n has a built-in <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.github?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>GitHub</em></a> node, so it makes sense to use it for gathering the GitHub data. But, there are no custom nodes for the other three services, so we will use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.httpRequest/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>HTTP Request</em></a> node to pull information from each service‚Äôs API.</p><p>The output of the <em>Dashboard Configuration</em> node connects into these four nodes. They then use these settings to know which project to be monitoring.</p><p>You will need to change the settings in two nodes for this stage. The <em>GitHub</em> node will need your <a href=\"https://docs.n8n.io/credentials/github/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">GitHub credentials</a> to work, and the <em>Retrieve Product Hunt Data</em> node will need your <a href=\"https://www.producthunt.com/v2/oauth/applications?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">developer token</a>.</p><p>You should now have the ability to retrieve all of the raw data provided by these services.</p><h3 id=\"stage-4-data-processing\">Stage 4 ‚Äî Data Processing</h3><p>Now that we have this data, we need to make sure that it is in the proper format. The two challenges that need to be overcome are:</p><ol><li>Large numbers are difficult to read</li><li>Decimal numbers are too long to display properly</li></ol><p>To transform these values into something more usable, we will use the <a href=\"https://docs.n8n.io/nodes/n8n-nodes-base.function/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>Function</em></a> node. The <em>Function</em> node allows us to write our custom code when a pre-built node may not exist.</p><p>A single <em>Function</em> node is added for each service and connected to the output of the nodes created to retrieve the service data.</p><p>To add the thousands separator to a value, you reassign the original value with the updated value. The updated value is created by appending the value name with <code>.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g,\",\")</code>. This tells the system to convert the number to a string and replace every third space between characters with a comma.</p><p>For example, to reformat the <em>pull_count </em>from the Docker service, you would enter the following code:</p><pre><code class=\"language-js\">items[0].json.pull_count = items[0].json.pull_count.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ‚Äú,‚Äù);</code></pre><p>To round a value to two decimal places, we perform a similar action using the <a href=\"https://www.w3schools.com/jsref/jsref_parsefloat.asp?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>parseFloat</em></a> function and <a href=\"https://www.w3schools.com/jsref/jsref_tofixed.asp?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\"><em>toFixed()</em></a> method.</p><p>So, to round the <em>score.final</em> value from the npm service, use the following code:</p><pre><code class=\"language-js\">items[0].json.score.final = parseFloat(items[0].json.score.final.toFixed(2));</code></pre><p>Each value that needs to be changed has the appropriate line of code added to its <em>Function </em>node.</p><h3 id=\"stage-5-action\">Stage 5 ‚Äî Action</h3><p>The final stage is the action. This is where the n8n workflow performs an action on something. In this case, the workflow posts a value to the dashboard API for a specific dashboard widget.</p><p>For example, to update the number of GitHub Stars on the dashboard, the workflow needs to post the <em>stargazers_count </em>value from the formatted data originally generated by the <em>GitHub </em>node. This is performed using the <em>HTTP Request</em> node, one for each widget.</p><p>And that is the final piece! Once the workflow is activated, it will update all of the dashboard widgets every minute with the information it pulls from each service.</p><h2 id=\"monitoring-your-own-project\">Monitoring Your Own Project</h2><p>The one thing that most people will want to do is modify this workflow to monitor their own project. I have tried to make this easy by putting all of the changes in one the <em>Dashboard Configuration</em> node.</p><ul><li><strong>dashboardHostname (default <em>http://192.168.1.14:8080</em>)</strong>: This should be the hostname and port of your docker installation. See <em>Stage 2 ‚Äî Configuration</em> for more details.</li><li><strong>dashboardAuthToken (default <em>n8n-rocks!</em>)</strong>: Used to authenticate with the Smashing dashboard. There should be no need to change this unless you are playing around with the docker image.</li><li><strong>product_hunt_post_id (default <em>170391</em>)</strong>: The post_id of the product that is being monitored at Product Hunt. You can find this number by going to your product page on Product Hunt and clicking on the <em><strong>Embed</strong></em> button. In the embed code, look for <em><code>https://cards.producthunt.com/cards/posts/</code></em>. The number immediately follows this string.</li><li><strong>npm_package (default <em>n8n</em>)</strong>: Name of the n8n package that is being monitored. You can find your project name by searching for your product at <a href=\"https://www.npmjs.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">https://www.npmjs.com/</a> and copying the name exactly as it is on the webpage.</li><li><strong>docker_name (default <em>n8nio</em>)</strong>: Name of the user or organization who owns the docker repo being monitored. Find the repository that you are using at <a href=\"https://hub.docker.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">https://hub.docker.com</a> (e.g. <em>jim/nasium</em>). This is the portion of the string before the ‚Äú/‚Äù (e.g. <em>jim</em>)</li><li><strong>docker_repository (default <em>n8n</em>)</strong>: Name of the docker repo being monitored. Find the repository that you are using at <a href=\"https://hub.docker.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">https://hub.docker.com</a> (e.g. <em>jim/nasium</em>). This is the portion of the string after the ‚Äú/‚Äù (e.g. <em>nasium</em>)</li><li><strong>github_owner (default <em>n8n-io</em>)</strong>: Name of the user or organization who owns the GitHub repo being monitored. Find the repo that you will be monitoring at <a href=\"https://github.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">https://github.com</a> (e.g. <em>jim/nasium</em>). This is the portion of the string before the ‚Äú/‚Äù (e.g. <em>jim</em>)</li><li><strong>github_repo (default <em>n8n</em>)</strong>: Name of the GitHub repo being monitored. Find the repo that you will be monitoring at <a href=\"https://github.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">https://github.com</a> (e.g. <em>jim/nasium</em>). This is the portion of the string after the ‚Äú/‚Äù (e.g. <em>nasium</em>)</li></ul><p>If there are any of these services which you do not wish to monitor, delete the link between that services‚Äô data retrieval node and the <em>Cron</em> node. This will prevent the node from capturing the data and the widgets on the dashboard will remain unchanged.</p><h2 id=\"what-s-next\">What‚Äôs Next?</h2><p>We have just touched the tip of the iceberg when it comes to dashboarding. Some other ideas that are possible include:</p><ul><li>Charting stock prices</li><li>Displaying weather</li><li>Aggregating RSS feeds</li><li>Monitoring Twitter feeds</li><li>Showing videos from a YouTube channel</li><li>Company phone activity</li><li>Personnel in/out board</li><li>Fleet vehicle tracking</li></ul><h2 id=\"our-journey\">Our Journey</h2><p>We‚Äôve covered a lot of ground today. Let‚Äôs review what we have accomplished:</p><ol><li>Installed the custom dashboard in Docker</li><li>Set the workflow to run every minute</li><li>Designed a global configuration node to easily manage common variables</li><li>Gathered data from four different online services</li><li>Modified the data so that is displays properly</li><li>Pushed the information for display in the dashboard using its API</li></ol><p>I‚Äôd love to hear about what you‚Äôve built using n8n! Or if you‚Äôve run into an issue while following the tutorial, feel free to reach out to me on <a href=\"https://twitter.com/tephlondude?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Twitter</a> or ask for help on our <a href=\"https://community.n8n.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">forum</a> üíô</p><p><em>Start automating!</em></p><p><em>The best part is, you can start automating for free with n8n. The easiest way to get started is to </em><a href=\"https://n8n.io/pricing?cloud=false&amp;ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>download the desktop app,</em></a><em> or sign up for a <a href=\"https://n8n.io/cloud?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a>. Thanks to n8n‚Äôs fair-code license, you can also </em><a href=\"https://docs.n8n.io/hosting/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>self-host n8n for free</em></a><em>.</em></p>\n\t\t<div class=\"newsletter-banner\">\n\t    <div class=\"newsletter-banner-content\">\n\t      <div class=\"section-header\">\n\t        <h2>Subscribe to <span>n8n newsletter</span></h2>\n\t        <div class=\"section-subheader--bottom\">\n\t          Get the best, coolest, and latest in automation and low-code delivered to your inbox each week.\n\t        </div>\n\t      </div>\n\t      <div class=\"newsletter-banner-form\">\n\t        <form autocomplete=\"off\" class=\"contact-form\" onsubmit=\"subscribeNewsletter(event)\">\n\t        \t<div id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB\" data-callback=\"submitSubscription\" data-size=\"invisible\"><div class=\"grecaptcha-badge\" data-style=\"bottomright\" style=\"width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;\"><div class=\"grecaptcha-logo\"><iframe title=\"reCAPTCHA\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-b35ctd7lbwf9\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB&amp;co=aHR0cHM6Ly9ibG9nLm44bi5pbzo0NDM.&amp;hl=en&amp;v=jt8Oh2-Ue1u7nEbJQUIdocyd&amp;size=invisible&amp;cb=wstdw7rxu98q\"></iframe></div><div class=\"grecaptcha-error\"></div><textarea id=\"g-recaptcha-response\" name=\"g-recaptcha-response\" class=\"g-recaptcha-response\" style=\"width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;\"></textarea></div><iframe style=\"display: none;\"></iframe></div>\n\t          <div class=\"input-wrapper\">\n\t            <input placeholder=\"Email\" name=\"email\" type=\"email\" required=\"required\" class=\"\">\n\t            <div class=\"messages\">\n\t              <div class=\"message message--error\">Something went wrong. Please try again later.</div>\n\t              <div class=\"message message--success\">Subscribed!</div>\n\t            </div>\n\t          </div>\n\t          <button type=\"submit\" class=\"submit-btn\">Subscribe</button>\n\t        </form>\n\t      </div>\n\t    </div>\n    </div>\n\t\t<div class=\"post-share-section\">\n\t<div class=\"post-share-wrap\">\n\t\t<a href=\"https://twitter.com/intent/tweet?text=Automatically%20pulling%20and%20visualizing%20data%20with%20n8n&amp;url=https://blog.n8n.io/automatically-pulling-and-visualizing-data-with-n8n/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\"></path></svg></a>\n\t\t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/automatically-pulling-and-visualizing-data-with-n8n/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z\"></path></svg></a>\n\t\t<!-- <a href=\"javascript:\" class=\"post-share-link\" id=\"copy\" data-clipboard-target=\"#copy-link\" aria-label=\"Copy link icon\"><svg role=\"img\" viewBox=\"0 0 33 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M27.3999996,13.4004128 L21.7999996,13.4004128 L21.7999996,19 L18.9999996,19 L18.9999996,13.4004128 L13.3999996,13.4004128 L13.3999996,10.6006192 L18.9999996,10.6006192 L18.9999996,5 L21.7999996,5 L21.7999996,10.6006192 L27.3999996,10.6006192 L27.3999996,13.4004128 Z M12,20.87 C7.101,20.87 3.13,16.898 3.13,12 C3.13,7.102 7.101,3.13 12,3.13 C12.091,3.13 12.181,3.139 12.272,3.142 C9.866,5.336 8.347,8.487 8.347,12 C8.347,15.512 9.866,18.662 12.271,20.857 C12.18,20.859 12.091,20.87 12,20.87 Z M20.347,0 C18.882,0 17.484,0.276 16.186,0.756 C14.882,0.271 13.473,0 12,0 C5.372,0 0,5.373 0,12 C0,18.628 5.372,24 12,24 C13.471,24 14.878,23.726 16.181,23.242 C17.481,23.724 18.88,24 20.347,24 C26.975,24 32.347,18.628 32.347,12 C32.347,5.373 26.975,0 20.347,0 Z\"/></svg></a>\n\t\t<small class=\"share-link-info\">The link has been copied!</small> -->\n\t</div>\n\t<input type=\"text\" value=\"https://blog.n8n.io/automatically-pulling-and-visualizing-data-with-n8n/\" id=\"copy-link\" aria-label=\"Copy link input\">\n</div>",
  "readme": "I use information from all over the internet. I visit hundreds of new web pages every day, both for personal and professional projects. It‚Äôs part of the process, and I‚Äôm happy to do it.\n\nBut, every day, I also waste precious time checking the same old websites for other vital information; weather, news, stock portfolio, email, Twitter, work alerts, and so on. And we all have a list like this. And you may find yours just as frustrating.\n\nWhat annoys me the most is that the second I leave the site, I instantly wonder if the information has changed, and I stress out until I check it out again.\n\nI finally got so fed up with all this chasing after information! Instead of me going to look up information in twenty different places, why can‚Äôt this information come to me in one single spot?\n\nAnd that‚Äôs when it hit me ü•ä\n\n## I Need a Dashboard!\n\nA dashboard makes so much sense! It can contain any information that I want! It can be updated several times a day and can be permanently displayed on a monitor. All I need to do is glance at it for a few seconds, and I know what is going on.\n\nWhat sealed the deal for me was that most web services can be easily queried with [n8n](https://n8n.io/?ref=blog.n8n.io), which can then talk to [Smashing](https://smashing.github.io/?ref=blog.n8n.io), a dashboarding system. Combining these three technologies (web services, n8n and Smashing) would save me significant time every day and keep me better in the loop with what is going on in other areas of my life.\n\nAnd the best part? You can build your custom dashboard as well!\n\nIn this article, we will pull information from [GitHub](https://github.com/?ref=blog.n8n.io), [Docker](https://www.docker.com/?ref=blog.n8n.io), [npm](https://www.npmjs.com/?ref=blog.n8n.io), and [Product Hunt](https://www.producthunt.com/?ref=blog.n8n.io) about the n8n project and then display it using a Smashing dashboard. Since this information is constantly changing, n8n will perform this every minute. The workflow for this project looks something like this:\n\n![](https://blog.n8n.io/content/images/2021/01/dig.png)n8n Dashboard Data Workflow\n\n## n8n and Smashing\n\nThe two essential pieces of this project are [n8n](https://n8n.io/?ref=blog.n8n.io) and [Smashing](https://smashing.github.io/?ref=blog.n8n.io). They make up the core of the project and are very well suited to working together.\n\nEvery minute, n8n gathers the data from the four data sources using their [API](https://docs.n8n.io/reference/glossary.html?ref=blog.n8n.io#api) interfaces. It then takes this data and extracts the pieces which are useful and then pushes it to the Smashing dashboard.\n\nAt this point, Smashing takes over and displays the information it receives from n8n based on how the dashboard was built inside the Docker container and which Smashing API endpoint receives the information.\n\n## How Smashing Works\n\nWhile it is outside of the scope of this article to go into detail on how Smashing works, it is important for you to understand some of the fundamentals of Smashing.\n\nEach Smashing dashboard is made up of a series of widgets. Each widget displays a piece of information. This information is fed to the widget through the Smashing API. Each widget has its own unique API endpoint. When the endpoint receives information, the widget displays that information.\n\nThese are the endpoints that have been created for this project and where their information originates:\n\n![](https://blog.n8n.io/content/images/2021/01/widgets.png)Dashboard Widgets and Their Data Origins\n\nThis dashboard API interface along with the widget types are defined in the _n8n_overview.erb_ file located in the docker container. (If you are interested in seeing how this file creates the dashboard, it is available [here](https://gist.github.com/TephlonDude/bb3d3b713af97b8e8d3c67d559048b0b?ref=blog.n8n.io).)\n\n## Prerequisites\n\nIf you want to build this project yourself, you will need a couple of things ready to go before you start:\n\n  1. [**n8n**](https://n8n.io/?ref=blog.n8n.io) ‚Äî You can get this up and running by checking out the [Quickstart](https://docs.n8n.io/try-it-out/quickstart/?ref=blog.n8n.io) page. You should have a fresh install without any workflows. You can also sign-up for[ ](https://n8n.io/cloud?ref=blog.n8n.io)a [free n8n cloud trial](https://n8n.io/cloud?ref=blog.n8n.io) to get access to our hosted service. This workflow was created in n8n version 0.104.2.\n  2. [**Docker**](https://www.docker.com/?ref=blog.n8n.io) ‚Äî To save you time, we have built a Docker container with all of the Smashing pieces pre-configured. This way, you can have this piece running quickly and easily. For more information on setting up a Docker environment, please check out one of these [tutorials](https://docker-curriculum.com/?ref=blog.n8n.io#setting-up-your-computer).\n  3. [**GitHub Account**](https://github.com/?ref=blog.n8n.io) ‚Äî In order to ensure that you do not run into issues accessing the GitHub API, you can use your account to increase how frequently you can retrieve information from the API. If you do not have a GitHub account, you can [join here](https://github.com/join?ref=blog.n8n.io) and you can learn how to set up your credentials for GitHub in n8n [here](https://docs.n8n.io/credentials/github/?ref=blog.n8n.io).\n  4. [**Product Hunt Account**](https://www.producthunt.com/?ref=blog.n8n.io) ‚Äî To use the Product Hunt API, you are required to authenticate with them using your account and a developer token (see ‚ÄúBut‚Ä¶ I just wanted to run a simple script?‚Äù in the [Product Hunt API documentation](https://api.producthunt.com/v1/docs?ref=blog.n8n.io)). If you do not have an account with Product Hunt, you can [sign up here](https://www.producthunt.com/login?ref=blog.n8n.io).\n\n\n\n## Quick Start\n\nMany of you want to experience the result before committing to a project or already know the majority of what you will be learning in this article. For you, I have put together this **Quick Start** option. Follow these steps to get up and running quickly. If something is unclear or you want to learn more about how it works, feel free to dig deeper into the sections that follow.\n\nHere are the quick start steps:\n\n  * Install the docker container with the following two commands:\n\n\n    \n    \n    docker pull tephlon/n8n_dashboard\n    \n    docker pull tephlon/n8n_dashboarddocker run --name n8n_dashboard -d -p 8080:3030 --rm tephlon/n8n_dashboard:latest\n\n  * Copy the n8n workflow from [here](https://n8n.io/workflows/693?ref=blog.n8n.io) and paste it into your n8n installation\n  * Modify the following nodes with your information. I have highlighted them in red in the workflow for easy identification:\n  * **Dashboard Configuration** ‚Äî set value of _dashboardHostname_ to your docker install\n  * **Retrieve Product Hunt Data** ‚Äî set your _token_ value based on your [developer token](https://www.producthunt.com/v2/oauth/applications?ref=blog.n8n.io)\n  * Set up your [GitHub credentials](https://docs.n8n.io/credentials/github/?ref=blog.n8n.io)\n  * Save and activate workflow\n  * Browse to port `8080` of your docker installation\n\n\n\nNow that you have a fully functioning dashboard, let‚Äôs take a look at what everything does, and maybe inspire you to tweak this workflow to suit your needs.\n\n## The Five Stages of an n8n Workflow\n\nI have noticed in many of the workflows that I create there are five distinct stages that the workflow goes through from start to finish and this workflow is no exception.\n\n  1. Trigger\n  2. Configuration\n  3. Data Retrieval\n  4. Data Processing\n  5. Action\n\n\n\nThis is how the dashboard workflow looks broken up into these different stages:\n\n![](https://blog.n8n.io/content/images/2022/03/stages.png)The Five Stages of the n8n Dashboard Workflow\n\nLet‚Äôs work through setting up these five stages as they pertain to the dashboard project.\n\n### Stage 1 ‚Äî Trigger\n\nEvery workflow has to be told how to start, and this is referred to as the trigger. In this project, we want to update the dashboard with new information every minute. We‚Äôll use the [_Cron_](https://docs.n8n.io/nodes/n8n-nodes-base.cron/?ref=blog.n8n.io) node for that.\n\nSet the **Mode** parameter to _Every Minute_. Doing this will run the workflow (you guessed it) every minute.\n\nNow, the workflow knows how and when to run.\n\n### Stage 2 ‚Äî Configuration\n\nThe configuration stage is generally a little more defined in my workflows than they are for others. I like to create a [_Set_](https://docs.n8n.io/nodes/n8n-nodes-base.set/?ref=blog.n8n.io) node with the majority of the configuration options so that they are all in one place (although there are exceptions to this rule which we will cover in a minute). For those of you who have developed in other tools before, you can think of this node as [global variables](https://en.wikipedia.org/wiki/Global_variable?ref=blog.n8n.io) that are available to all other nodes within the workflow.\n\nNot all configuration settings are set at this time for two reasons:\n\n  1. The value is retrieved in a later stage\n  2.  _Set_ node values get copied when exported. If you have sensitive data such as API tokens in a _Set_ node, they would also get exported (which would be bad)\n\n\n\nAs a convention for myself, I like to color the borders of my nodes red that require configuration, and you will see that I have done this as well for this workflow.\n\nFor the configuration of this workflow, we have created a _Set_ node called _Dashboard Configuration,_ which contains several string values. Most of these values can be ignored at this point, but if you want to customize the dashboard to monitor your project, this is where you would make these changes. (More on this later.)\n\nAs described in the quick start section, the only change you need to add to the _Dashboard Configuration_ node is to set the _`dashboardHostnam`e_ value so that it matches your docker container deployment. This is very specific to your docker installation and deployment of the tephlon/n8n_dashboard container. If your n8n installation is on the same system as your docker installation, this will be _`localhost:8080`_.\n\nIf docker is on a different system than your n8n installation, this value will be either _`<docker IP address>:8080`_ or _`<docker hostname>:8080`_. So, if your docker installation is on `192.168.4.25`, this value would be _`192.168.4.25:8080`_. You should be able to get this information from your docker admin. (If it turns out that this person is you and you are uncertain about what this value is, I have found a handy [YouTube video](https://www.youtube.com/watch?v=mPEM557bMR4&ref=blog.n8n.io) which may point you in the right direction.)\n\nThis node is connected to the previous _Cron_ node so that these values are loaded every time that the workflow runs, and the values are reset if one of them gets accidentally changed by a different node.\n\n### Stage 3 ‚Äî Data Retrieval\n\nIn this stage, we are collecting all of the data from the different data sources, often using settings from the configuration stage.\n\nWe are using two different types of nodes to collect data, depending on the service. n8n has a built-in [_GitHub_](https://docs.n8n.io/nodes/n8n-nodes-base.github?ref=blog.n8n.io) node, so it makes sense to use it for gathering the GitHub data. But, there are no custom nodes for the other three services, so we will use the [_HTTP Request_](https://docs.n8n.io/nodes/n8n-nodes-base.httpRequest/?ref=blog.n8n.io) node to pull information from each service‚Äôs API.\n\nThe output of the _Dashboard Configuration_ node connects into these four nodes. They then use these settings to know which project to be monitoring.\n\nYou will need to change the settings in two nodes for this stage. The _GitHub_ node will need your [GitHub credentials](https://docs.n8n.io/credentials/github/?ref=blog.n8n.io) to work, and the _Retrieve Product Hunt Data_ node will need your [developer token](https://www.producthunt.com/v2/oauth/applications?ref=blog.n8n.io).\n\nYou should now have the ability to retrieve all of the raw data provided by these services.\n\n### Stage 4 ‚Äî Data Processing\n\nNow that we have this data, we need to make sure that it is in the proper format. The two challenges that need to be overcome are:\n\n  1. Large numbers are difficult to read\n  2. Decimal numbers are too long to display properly\n\n\n\nTo transform these values into something more usable, we will use the [_Function_](https://docs.n8n.io/nodes/n8n-nodes-base.function/?ref=blog.n8n.io) node. The _Function_ node allows us to write our custom code when a pre-built node may not exist.\n\nA single _Function_ node is added for each service and connected to the output of the nodes created to retrieve the service data.\n\nTo add the thousands separator to a value, you reassign the original value with the updated value. The updated value is created by appending the value name with `.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g,\",\")`. This tells the system to convert the number to a string and replace every third space between characters with a comma.\n\nFor example, to reformat the _pull_count_ from the Docker service, you would enter the following code:\n    \n    \n    items[0].json.pull_count = items[0].json.pull_count.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ‚Äú,‚Äù);\n\nTo round a value to two decimal places, we perform a similar action using the [_parseFloat_](https://www.w3schools.com/jsref/jsref_parsefloat.asp?ref=blog.n8n.io) function and [_toFixed()_](https://www.w3schools.com/jsref/jsref_tofixed.asp?ref=blog.n8n.io) method.\n\nSo, to round the _score.final_ value from the npm service, use the following code:\n    \n    \n    items[0].json.score.final = parseFloat(items[0].json.score.final.toFixed(2));\n\nEach value that needs to be changed has the appropriate line of code added to its _Function_ node.\n\n### Stage 5 ‚Äî Action\n\nThe final stage is the action. This is where the n8n workflow performs an action on something. In this case, the workflow posts a value to the dashboard API for a specific dashboard widget.\n\nFor example, to update the number of GitHub Stars on the dashboard, the workflow needs to post the _stargazers_count_ value from the formatted data originally generated by the _GitHub_ node. This is performed using the _HTTP Request_ node, one for each widget.\n\nAnd that is the final piece! Once the workflow is activated, it will update all of the dashboard widgets every minute with the information it pulls from each service.\n\n## Monitoring Your Own Project\n\nThe one thing that most people will want to do is modify this workflow to monitor their own project. I have tried to make this easy by putting all of the changes in one the _Dashboard Configuration_ node.\n\n  * **dashboardHostname (default _http://192.168.1.14:8080_)**: This should be the hostname and port of your docker installation. See _Stage 2 ‚Äî Configuration_ for more details.\n  * **dashboardAuthToken (default _n8n-rocks!_)**: Used to authenticate with the Smashing dashboard. There should be no need to change this unless you are playing around with the docker image.\n  * **product_hunt_post_id (default _170391_)**: The post_id of the product that is being monitored at Product Hunt. You can find this number by going to your product page on Product Hunt and clicking on the _**Embed**_ button. In the embed code, look for _`https://cards.producthunt.com/cards/posts/`_. The number immediately follows this string.\n  * **npm_package (default _n8n_)**: Name of the n8n package that is being monitored. You can find your project name by searching for your product at [https://www.npmjs.com/](https://www.npmjs.com/?ref=blog.n8n.io) and copying the name exactly as it is on the webpage.\n  * **docker_name (default _n8nio_)**: Name of the user or organization who owns the docker repo being monitored. Find the repository that you are using at [https://hub.docker.com](https://hub.docker.com/?ref=blog.n8n.io) (e.g. _jim/nasium_). This is the portion of the string before the ‚Äú/‚Äù (e.g. _jim_)\n  * **docker_repository (default _n8n_)**: Name of the docker repo being monitored. Find the repository that you are using at [https://hub.docker.com](https://hub.docker.com/?ref=blog.n8n.io) (e.g. _jim/nasium_). This is the portion of the string after the ‚Äú/‚Äù (e.g. _nasium_)\n  * **github_owner (default _n8n-io_)**: Name of the user or organization who owns the GitHub repo being monitored. Find the repo that you will be monitoring at [https://github.com](https://github.com/?ref=blog.n8n.io) (e.g. _jim/nasium_). This is the portion of the string before the ‚Äú/‚Äù (e.g. _jim_)\n  * **github_repo (default _n8n_)**: Name of the GitHub repo being monitored. Find the repo that you will be monitoring at [https://github.com](https://github.com/?ref=blog.n8n.io) (e.g. _jim/nasium_). This is the portion of the string after the ‚Äú/‚Äù (e.g. _nasium_)\n\n\n\nIf there are any of these services which you do not wish to monitor, delete the link between that services‚Äô data retrieval node and the _Cron_ node. This will prevent the node from capturing the data and the widgets on the dashboard will remain unchanged.\n\n## What‚Äôs Next?\n\nWe have just touched the tip of the iceberg when it comes to dashboarding. Some other ideas that are possible include:\n\n  * Charting stock prices\n  * Displaying weather\n  * Aggregating RSS feeds\n  * Monitoring Twitter feeds\n  * Showing videos from a YouTube channel\n  * Company phone activity\n  * Personnel in/out board\n  * Fleet vehicle tracking\n\n\n\n## Our Journey\n\nWe‚Äôve covered a lot of ground today. Let‚Äôs review what we have accomplished:\n\n  1. Installed the custom dashboard in Docker\n  2. Set the workflow to run every minute\n  3. Designed a global configuration node to easily manage common variables\n  4. Gathered data from four different online services\n  5. Modified the data so that is displays properly\n  6. Pushed the information for display in the dashboard using its API\n\n\n\nI‚Äôd love to hear about what you‚Äôve built using n8n! Or if you‚Äôve run into an issue while following the tutorial, feel free to reach out to me on [Twitter](https://twitter.com/tephlondude?ref=blog.n8n.io) or ask for help on our [forum](https://community.n8n.io/?ref=blog.n8n.io) üíô\n\n _Start automating!_\n\n_The best part is, you can start automating for free with n8n. The easiest way to get started is to_[ _download the desktop app,_](https://n8n.io/pricing?cloud=false&ref=blog.n8n.io)_or sign up for a[free n8n cloud trial](https://n8n.io/cloud?ref=blog.n8n.io). Thanks to n8n‚Äôs fair-code license, you can also _[_self-host n8n for free_](https://docs.n8n.io/hosting/?ref=blog.n8n.io) _._\n\n## Subscribe to n8n newsletter\n\nGet the best, coolest, and latest in automation and low-code delivered to your inbox each week. \n\nSomething went wrong. Please try again later.\n\nSubscribed!\n\nSubscribe\n\n[](https://twitter.com/intent/tweet?text=Automatically%20pulling%20and%20visualizing%20data%20with%20n8n&url=https://blog.n8n.io/automatically-pulling-and-visualizing-data-with-n8n/) [](https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/automatically-pulling-and-visualizing-data-with-n8n/)\n",
  "crawled_at": "2025-05-28T11:00:38.813636"
}