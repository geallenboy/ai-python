{
  "url": "https://blog.n8n.io/learn-how-to-use-webhooks-with-mattermost-slash-commands/",
  "title": "Learn how to use webhooks with Mattermost slash commands",
  "excerpt": "Let's take a look at how we can utilize webhooks with n8n and make our personalized slash command on Mattermost powered by n8n.",
  "thumbnail": "https://blog.n8n.io/content/images/size/w1200/2021/03/cover-1.png",
  "tags": [
    "Tutorial"
  ],
  "html": "<p>Recently, I have been working a lot with <a href=\"https://docs.n8n.io/reference/glossary.html?ref=blog.n8n.io#webhook\" target=\"_blank\" rel=\"noopener\">webhooks</a> and <a href=\"https://n8n.io/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">n8n</a>. Webhooks have first-class support in n8n and can be used to enable powerful workflows. n8n is a <a href=\"https://faircode.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">fair-code</a> licensed tool that helps you automate tasks, sync data between various sources, and react to events all via a visual workflow editor. In case you are not familiar with <a href=\"https://mattermost.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Mattermost</a>, it is an open-source messaging alternative to <a href=\"https://slack.com/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">Slack</a>.</p><p>Before moving forward, let’s quickly talk about what webhooks are. Webhooks are used to send automated messages from applications such as Mattermost, <a href=\"https://www.pagerduty.com/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">PagerDuty</a>, and essentially any product or service that supports them. The messages that are sent by webhooks are triggered when an event happens in the application. For instance, a <a href=\"https://docs.mattermost.com/developer/slash-commands.html?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">slash command</a> (<code>/remind</code>) was issued on Mattermost or maybe an incident was created on PagerDuty.</p><p>n8n has a webhook trigger <a href=\"https://docs.n8n.io/?ref=blog.n8n.io#/nodes\" rel=\"noopener\" target=\"_blank\">node</a> which allows us to create webhook integrations with ease. Let’s take a look at how we can utilize webhooks with n8n and make our personalized slash command on Mattermost powered by n8n.</p><h3 id=\"install-n8n\">Install n8n</h3><p>Sign-up for <a href=\"https://n8n.cloud/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">n8n.cloud</a> to get early access to our hosted service. Alternatively, you can do so with <a href=\"https://www.npmjs.com/get-npm?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">npm</a> by issuing the following command:</p><p><code>npm install n8n -g</code></p><p>You can also run n8n using <a href=\"https://github.com/n8n-io/n8n/blob/master/docker/images/n8n/README.md?ref=hackernoon.com#start-n8n-in-docker\" rel=\"noopener\" target=\"_blank\">Docker</a>. Once you have installed n8n, you can start it using the following command:</p><p><code>n8n start --tunnel</code></p><blockquote><strong>Note:</strong> Make sure that you don’t forget to add the <code>--tunnel </code>parameter.</blockquote><p>n8n has to be reachable from the web as the triggers of external services rely on that to be able to send data to the webhooks. To make that easy, n8n has a special tunnel service that redirects requests from n8n’s servers to your local n8n instance (uses <a href=\"https://github.com/localtunnel/localtunnel?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">localtunnel</a>). If you're following the article with n8n.cloud</p><p>Typing “o” in the terminal will open the Editor UI for us.</p><h3 id=\"the-webhook-node-in-n8n\">The Webhook node in n8n</h3><p>To create a workflow node, click on the '<strong>+</strong>' button on the top right. Select the <em>Webhook</em> node under the <strong><em>Triggers</em></strong> section. This adds a new <em>Webhook</em> node. Here’s a video of me creating the <em>Webhook</em> node.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/xIR3VyBfOT8?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating a Webhook node in n8n</figcaption></figure><p>Before trying to pull in some data with cool applications, let’s take a quick look at the configuration options of the node.</p><h3 id=\"configuration-options-for-the-webhook-node\">Configuration options for the Webhook node</h3><p>First of all, in the parameters section, we have the Webhook URLs. Clicking on that will reveal the URLs for the webhook. Here you have two options, let’s understand the difference between them.</p><ol><li><strong>Production:</strong> A Production webhook is only registered when a workflow has been activated (via the switch on the top right of the page). You will never see its data in the Editor UI. To save the executions, you can either set that as a <a href=\"https://docs.n8n.io/?ref=blog.n8n.io#/configuration?id=execution-data-errorsuccess\" rel=\"noopener\" target=\"_blank\">global default</a> or you can specify that on a <a href=\"https://docs.n8n.io/?ref=blog.n8n.io#/workflow?id=save-data-success-execution\" rel=\"noopener\" target=\"_blank\">per-workflow basis</a> in the workflow settings. You will then see the data from the workflow under ‘Past Executions’.</li><li><strong>Test:</strong> A Test webhook is only registered in the time between executing a workflow via the UI and until the first call gets made (when it displays “waiting for Webhook call”). After the Test webhook gets called for the first time, it displays the data in the Editor UI, and then gets deactivated.</li></ol><blockquote>If you feel that the rest of the configuration details of the node are too dry for you, feel free to skip to the next section where we start playing around with this node. You can always return here to learn more about the node configuration.</blockquote><p><strong>Authentication:</strong> Here we have the option to add authentication. You can set the authentication to None, Basic Auth (username and password) or Header Auth (name and value).</p><p><strong>HTTP Method:</strong> You can define whether the request will use the GET, HEAD, or the POST HTTP method.</p><p><strong>Path:</strong> You can enter a path for your webhook. This is the path that the webhook will listen to. If you are not sure what to include here, just type in <code>webhook</code>.</p><p><strong>Response Code:</strong> Here you can specify the HTTP response code to return. You’ll probably want to keep it set at <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">200</a>.</p><p><strong>Response Mode:</strong> This defines when and how to respond to the webhook. Here we have two options:</p><ol><li><strong>On Received:</strong> This option sends the defined response code back as soon as it receives data from the webhook.</li><li><strong>Last Node:</strong> This option returns the data of the node that was executed before the Webhook node. If the <em>Webhook</em> node is the only node (or the first node) in the workflow, this option would just return its own data as it itself would be the node that was last executed.</li></ol><p><strong>Response Data:</strong> This option becomes visible if you selected the Last Node for the Response Mode. Here you have three configuration options:</p><ol><li><strong>All Entries:</strong> This returns all the entries of the last executed node and always returns an array.</li><li><strong>First Entry JSON:</strong> This returns the JSON data of the first entry of the last executed node. This option always returns a JSON object.</li><li><strong>First Entry Binary:</strong> This returns the Binary data of the first entry of the last executed node. This option always returns a binary file.</li></ol><h3 id=\"cocktail-suggestion-workflow\">Cocktail suggestion workflow</h3><p>I am always looking to make my colleagues laugh and in my pursuit, I created a Mattermost slash command that when called, sends out a random recipe for a cocktail. This is very useful for Friday evenings. Let me show you how you can do that too (the workflow was built using n8n@0.111.0).</p><h3 id=\"1-webhook-node\">1. Webhook Node</h3><p>First of all, we’ll create a <em>Webhook</em> node on n8n using the same steps that we followed above. In the configuration, I set the <strong><em>HTTP Method</em></strong> to 'POST' as I will be sending a POST request later on to this node. Always ensure that you are using the correct HTTP method for the <em>Webhook</em> node. For path, I have entered <code>webhook</code>. Feel free to change that to something else according to your preferred naming convention.</p><p>After configuring the node, I clicked on Webhook URLs, selected the Test tab, and clicked on the URL to copy it. We’ll be using the Test webhook for the tutorial.</p><p>Here’s a video of me following the steps mentioned above. I have also shown how you can save and activate the workflow.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/wb1ytuYZXO4?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating and configuring a Webhook node in n8n</figcaption></figure><p>Now we need to create a slash command in Mattermost, which will trigger our workflow using the <em>Webhook</em> node.</p><p>Go to your Mattermost instance and click on <strong><em>Integrations</em></strong> in the hamburger menu next to your name on the top left. In the <strong><em>Integrations</em></strong> menu, click on the <strong><em>Slash Commands</em></strong> option and then click on the button marked <strong><em>Add Slash Command</em></strong> on the top right.</p><p>This will then show you a menu to configure the slash command. For the settings, the most important options are the <strong><em>Command Trigger Word</em></strong> and the <strong><em>Request URL</em></strong>. I added <code>cocktail</code> as the <strong><em>Command Trigger Word</em></strong> and I added the Test webhook URL that I copied from the node.</p><p>You can also click on the <strong><em>Autocomplete</em></strong> button and fill out the <strong><em>Autocomplete Hint</em></strong> or <strong><em>Autocomplete Description</em></strong> to make it easier to discover and use the slash command.</p><p>Once you are done with the settings, you can go back to your Mattermost instance and issue the <code>/cocktail</code> command.</p><blockquote><strong>Note:</strong> Make sure that you click on the ‘Execute Workflow’ button at the bottom of your n8n workflow editor to register the webhook.</blockquote><p>Here’s a video of me following the steps above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/bvB5xJmjVXU?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Adding a slash command in Mattermost</figcaption></figure><p>Now, if we go back to n8n and check the <em>Webhook</em> node, you’ll see the response from our newly created slash command. Congratulations, you got your first webhook working with n8n!</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2021/03/response-slash-command.png\" class=\"kg-image lightense-target\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"871\" srcset=\"https://blog.n8n.io/content/images/size/w600/2021/03/response-slash-command.png 600w, https://blog.n8n.io/content/images/size/w1000/2021/03/response-slash-command.png 1000w, https://blog.n8n.io/content/images/size/w1600/2021/03/response-slash-command.png 1600w, https://blog.n8n.io/content/images/size/w2400/2021/03/response-slash-command.png 2400w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Response from the slash command in the Webhook node</figcaption></figure><h3 id=\"2-http-request-node\">2. HTTP Request Node</h3><p>Now that we have a working <em>Webhook</em> node, let us add an <em>HTTP Request</em> node that queries an API, so that we can send a random cocktail recipe when somebody triggers the webhook with the <code>/cocktail</code> command on Mattermost.</p><p>We’ll use <a href=\"https://www.thecocktaildb.com/api.php?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">TheCocktailDB</a> to get information about a random cocktail recipe. There are multiple endpoints to the API as well as a test API key which will be perfect for our use case. Create the <em>HTTP Request</em> node by clicking on the '<strong><em>+</em></strong>' button on the top right of the Editor UI. In the node configuration view, enter the following URL:</p><p><a href=\"https://www.thecocktaildb.com/api/json/v1/1/random.php?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">https://www.thecocktaildb.com/api/json/v1/1/random.php</a></p><p>When you click on the <strong><em>Execute Node</em></strong> button, you’ll see that the node pull in the details of a random cocktail for you. Here’s a video of me following the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/M97HrN1ec2s?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating and configuring the HTTP Request node</figcaption></figure><h3 id=\"3-mattermost-node\">3. Mattermost Node</h3><p>The last step of this workflow is to pass on this information to the channel from which the <code>/cocktail</code> command was queried. Create a <em>Mattermost</em> node by clicking on the '<strong><em>+</em></strong>' button on the top right of the screen.</p><p>You’ll need to add the credentials from your Mattermost instance to get the node to work. Here’s some detailed <a href=\"https://docs.n8n.io/credentials/mattermost?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">information</a> on how to create an access token. I have used an access token from a bot account, but you can just use the access token from your account.</p><blockquote><strong>Note:</strong> Made sure that all your nodes are connected in the following order to properly access the data from the other nodes: Webhook node &gt; HTTP Request node &gt; Mattermost node.</blockquote><p>Once you have that, we’ll need to enter a Channel ID to specify which channel should the message be sent to. Since this will be a dynamic piece of information, we’ll click on the gears icon next to the field and select ‘Add Expression’. Once you have the editor open, select the following in the variable selector:</p><p><code>Nodes &gt; Webhook &gt; Output Data &gt; JSON &gt; body &gt; channel_id</code></p><p>Perfect, now go back to the node configuration and fill in the information that you’d like to send to the channel in the Message field. Add the information that you’d like using ‘Add Expression’. You can find the different pieces of information that you are looking for in the variable selector under:</p><p><code>Current Node &gt; Input Data &gt; JSON &gt; drinks &gt; [Item: 0]</code></p><p>This is what I ended up selecting for the Message field:</p><pre><code>Why not try {{$json[\"drinks\"][0][\"strDrink\"]}}?\n{{$json[\"drinks\"][0][\"strInstructions\"]}} Serve in {{$json[\"drinks\"][0][\"strGlass\"]}}.</code></pre><p>And finally, we can send a picture of the delicious cocktail by clicking on <strong><em>Add Attachment</em></strong> under <strong><em>Attachments</em></strong>. Click on <strong><em>Add Attachment Item</em></strong> and select ‘Image URL’. To fill the <strong><em>Image URL</em></strong> field, select the 'Add Expression' option again. Once you have the editor open, select the following in the variable selector:</p><p><code>Current Node &gt; Input Data &gt; JSON &gt; drinks &gt; [Item: 0] &gt; strDrinkThumb</code></p><p>Here’s a video of me following the steps mentioned above.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/o5fSf0vrKX0?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>Creating and configuring the Mattermost node</figcaption></figure><p>Now if you click on <strong><em>Execute Node</em></strong>, this should send a message to your Mattermost channel where you issued the <code>/cocktail</code> command.</p><blockquote><strong>Note:</strong> Make sure to click on the <strong><em>Execute Workflow</em></strong> button before trying out the complete workflow.</blockquote><p>Here’s a video of me issuing the command on Mattermost and getting a lovely cocktail suggestion 🍹</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><div class=\"js-reframe\" style=\"position: relative; width: 100%; padding-top: 56.1798%;\"><iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/dCpblRUu6ow?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;\"></iframe></div><figcaption>End result of the ‘Cocktail Suggestion Workflow’</figcaption></figure><p>Congratulations, you have successfully created the Cocktail Suggestion Workflow! Now, to make sure that the workflow runs permanently without you having to press the <strong><em>Execute Workflow</em></strong> button before every slash command on Mattermost, we’ll need to use the Production webhook.</p><p>To do that, you’ll just need to get the Production webhook URL from the Webhook node, update the URL for the slash command on Mattermost, and finally activate the workflow. This will make your workflow ready to use.</p><blockquote><strong>Note:</strong> When working with a Production webhook, please ensure that you have saved and activated the workflow. Don’t forget that the data flowing through the webhook won’t be visible in the Editor UI with the Production webhook.</blockquote><p>Don’t forget to tell your colleagues about the new slash command 🙂</p><h3 id=\"next-steps\">Next Steps</h3><p>As the next steps, you can try using webhooks from other products/services such as <a href=\"https://www.pagerduty.com/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">PagerDuty</a>, so that a workflow gets triggered every time an incident report is created. You can also try enriching the cocktail information that is sent to the channel and check out what other functionalities the Mattermost node has.</p><p>Did you decide to use different services, APIs, or used other nodes? Don’t forget to submit your workflow <a href=\"https://n8n.io/workflows?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">here</a>. You can find the workflow that I created for this tutorial <a href=\"https://n8n.io/workflows/351?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">here</a>.</p><h3 id=\"summary\">Summary</h3><p>n8n provides a powerful platform to create workflows. The <em>Webhook</em> node provides an easy-to-use interface which enables us to connect to a variety of services and unlocks many possibilities. I am currently working on a group of workflows to automate incident response playbooks and am using a lot of webhooks in it. Stay tuned for a detailed tutorial on that very soon!</p><p>I’d be excited to check out what you’ve built using n8n! In case you’ve run into an issue while following the tutorial, feel free to reach out to me on <a href=\"https://twitter.com/tanay1337?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">Twitter</a> or ask for help on our <a href=\"https://community.n8n.io/?ref=blog.n8n.io\" rel=\"noopener\" target=\"_blank\">forum</a> 💙</p><p><em>Start automating!</em></p><p><em>The best part is, you can start automating for free with n8n. The easiest way to get started is to sign up for a <a href=\"https://n8n.io/pricing/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a>. Thanks to n8n’s fair-code license, you can also <a href=\"https://docs.n8n.io/hosting/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">self-host n8n for free</a>.</em></p>\n\t\t<div class=\"newsletter-banner\">\n\t    <div class=\"newsletter-banner-content\">\n\t      <div class=\"section-header\">\n\t        <h2>Subscribe to <span>n8n newsletter</span></h2>\n\t        <div class=\"section-subheader--bottom\">\n\t          Get the best, coolest, and latest in automation and low-code delivered to your inbox each week.\n\t        </div>\n\t      </div>\n\t      <div class=\"newsletter-banner-form\">\n\t        <form autocomplete=\"off\" class=\"contact-form\" onsubmit=\"subscribeNewsletter(event)\">\n\t        \t<div id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB\" data-callback=\"submitSubscription\" data-size=\"invisible\"><div class=\"grecaptcha-badge\" data-style=\"bottomright\" style=\"width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;\"><div class=\"grecaptcha-logo\"><iframe title=\"reCAPTCHA\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-1ei3x2p3m9li\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB&amp;co=aHR0cHM6Ly9ibG9nLm44bi5pbzo0NDM.&amp;hl=en&amp;v=jt8Oh2-Ue1u7nEbJQUIdocyd&amp;size=invisible&amp;cb=yxplli5a3m6j\"></iframe></div><div class=\"grecaptcha-error\"></div><textarea id=\"g-recaptcha-response\" name=\"g-recaptcha-response\" class=\"g-recaptcha-response\" style=\"width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;\"></textarea></div><iframe style=\"display: none;\"></iframe></div>\n\t          <div class=\"input-wrapper\">\n\t            <input placeholder=\"Email\" name=\"email\" type=\"email\" required=\"required\" class=\"\">\n\t            <div class=\"messages\">\n\t              <div class=\"message message--error\">Something went wrong. Please try again later.</div>\n\t              <div class=\"message message--success\">Subscribed!</div>\n\t            </div>\n\t          </div>\n\t          <button type=\"submit\" class=\"submit-btn\">Subscribe</button>\n\t        </form>\n\t      </div>\n\t    </div>\n    </div>\n\t\t<div class=\"post-share-section\">\n\t<div class=\"post-share-wrap\">\n\t\t<a href=\"https://twitter.com/intent/tweet?text=Learn%20how%20to%20use%20webhooks%20with%20Mattermost%20slash%20commands&amp;url=https://blog.n8n.io/learn-how-to-use-webhooks-with-mattermost-slash-commands/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\"></path></svg></a>\n\t\t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/learn-how-to-use-webhooks-with-mattermost-slash-commands/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z\"></path></svg></a>\n\t\t<!-- <a href=\"javascript:\" class=\"post-share-link\" id=\"copy\" data-clipboard-target=\"#copy-link\" aria-label=\"Copy link icon\"><svg role=\"img\" viewBox=\"0 0 33 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M27.3999996,13.4004128 L21.7999996,13.4004128 L21.7999996,19 L18.9999996,19 L18.9999996,13.4004128 L13.3999996,13.4004128 L13.3999996,10.6006192 L18.9999996,10.6006192 L18.9999996,5 L21.7999996,5 L21.7999996,10.6006192 L27.3999996,10.6006192 L27.3999996,13.4004128 Z M12,20.87 C7.101,20.87 3.13,16.898 3.13,12 C3.13,7.102 7.101,3.13 12,3.13 C12.091,3.13 12.181,3.139 12.272,3.142 C9.866,5.336 8.347,8.487 8.347,12 C8.347,15.512 9.866,18.662 12.271,20.857 C12.18,20.859 12.091,20.87 12,20.87 Z M20.347,0 C18.882,0 17.484,0.276 16.186,0.756 C14.882,0.271 13.473,0 12,0 C5.372,0 0,5.373 0,12 C0,18.628 5.372,24 12,24 C13.471,24 14.878,23.726 16.181,23.242 C17.481,23.724 18.88,24 20.347,24 C26.975,24 32.347,18.628 32.347,12 C32.347,5.373 26.975,0 20.347,0 Z\"/></svg></a>\n\t\t<small class=\"share-link-info\">The link has been copied!</small> -->\n\t</div>\n\t<input type=\"text\" value=\"https://blog.n8n.io/learn-how-to-use-webhooks-with-mattermost-slash-commands/\" id=\"copy-link\" aria-label=\"Copy link input\">\n</div>",
  "readme": "Recently, I have been working a lot with [webhooks](https://docs.n8n.io/reference/glossary.html?ref=blog.n8n.io#webhook) and [n8n](https://n8n.io/?ref=blog.n8n.io). Webhooks have first-class support in n8n and can be used to enable powerful workflows. n8n is a [fair-code](https://faircode.io/?ref=blog.n8n.io) licensed tool that helps you automate tasks, sync data between various sources, and react to events all via a visual workflow editor. In case you are not familiar with [Mattermost](https://mattermost.com/?ref=blog.n8n.io), it is an open-source messaging alternative to [Slack](https://slack.com/?ref=blog.n8n.io).\n\nBefore moving forward, let’s quickly talk about what webhooks are. Webhooks are used to send automated messages from applications such as Mattermost, [PagerDuty](https://www.pagerduty.com/?ref=blog.n8n.io), and essentially any product or service that supports them. The messages that are sent by webhooks are triggered when an event happens in the application. For instance, a [slash command](https://docs.mattermost.com/developer/slash-commands.html?ref=blog.n8n.io) (`/remind`) was issued on Mattermost or maybe an incident was created on PagerDuty.\n\nn8n has a webhook trigger [node](https://docs.n8n.io/?ref=blog.n8n.io#/nodes) which allows us to create webhook integrations with ease. Let’s take a look at how we can utilize webhooks with n8n and make our personalized slash command on Mattermost powered by n8n.\n\n### Install n8n\n\nSign-up for [n8n.cloud](https://n8n.cloud/?ref=blog.n8n.io) to get early access to our hosted service. Alternatively, you can do so with [npm](https://www.npmjs.com/get-npm?ref=blog.n8n.io) by issuing the following command:\n\n`npm install n8n -g`\n\nYou can also run n8n using [Docker](https://github.com/n8n-io/n8n/blob/master/docker/images/n8n/README.md?ref=hackernoon.com#start-n8n-in-docker). Once you have installed n8n, you can start it using the following command:\n\n`n8n start --tunnel`\n\n> **Note:** Make sure that you don’t forget to add the `--tunnel `parameter.\n\nn8n has to be reachable from the web as the triggers of external services rely on that to be able to send data to the webhooks. To make that easy, n8n has a special tunnel service that redirects requests from n8n’s servers to your local n8n instance (uses [localtunnel](https://github.com/localtunnel/localtunnel?ref=blog.n8n.io)). If you're following the article with n8n.cloud\n\nTyping “o” in the terminal will open the Editor UI for us.\n\n### The Webhook node in n8n\n\nTo create a workflow node, click on the '**+** ' button on the top right. Select the _Webhook_ node under the **_Triggers_** section. This adds a new _Webhook_ node. Here’s a video of me creating the _Webhook_ node.\n\nCreating a Webhook node in n8n\n\nBefore trying to pull in some data with cool applications, let’s take a quick look at the configuration options of the node.\n\n### Configuration options for the Webhook node\n\nFirst of all, in the parameters section, we have the Webhook URLs. Clicking on that will reveal the URLs for the webhook. Here you have two options, let’s understand the difference between them.\n\n  1. **Production:** A Production webhook is only registered when a workflow has been activated (via the switch on the top right of the page). You will never see its data in the Editor UI. To save the executions, you can either set that as a [global default](https://docs.n8n.io/?ref=blog.n8n.io#/configuration?id=execution-data-errorsuccess) or you can specify that on a [per-workflow basis](https://docs.n8n.io/?ref=blog.n8n.io#/workflow?id=save-data-success-execution) in the workflow settings. You will then see the data from the workflow under ‘Past Executions’.\n  2. **Test:** A Test webhook is only registered in the time between executing a workflow via the UI and until the first call gets made (when it displays “waiting for Webhook call”). After the Test webhook gets called for the first time, it displays the data in the Editor UI, and then gets deactivated.\n\n\n\n> If you feel that the rest of the configuration details of the node are too dry for you, feel free to skip to the next section where we start playing around with this node. You can always return here to learn more about the node configuration.\n\n**Authentication:** Here we have the option to add authentication. You can set the authentication to None, Basic Auth (username and password) or Header Auth (name and value).\n\n**HTTP Method:** You can define whether the request will use the GET, HEAD, or the POST HTTP method.\n\n**Path:** You can enter a path for your webhook. This is the path that the webhook will listen to. If you are not sure what to include here, just type in `webhook`.\n\n**Response Code:** Here you can specify the HTTP response code to return. You’ll probably want to keep it set at [200](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200?ref=blog.n8n.io).\n\n**Response Mode:** This defines when and how to respond to the webhook. Here we have two options:\n\n  1. **On Received:** This option sends the defined response code back as soon as it receives data from the webhook.\n  2. **Last Node:** This option returns the data of the node that was executed before the Webhook node. If the _Webhook_ node is the only node (or the first node) in the workflow, this option would just return its own data as it itself would be the node that was last executed.\n\n\n\n**Response Data:** This option becomes visible if you selected the Last Node for the Response Mode. Here you have three configuration options:\n\n  1. **All Entries:** This returns all the entries of the last executed node and always returns an array.\n  2. **First Entry JSON:** This returns the JSON data of the first entry of the last executed node. This option always returns a JSON object.\n  3. **First Entry Binary:** This returns the Binary data of the first entry of the last executed node. This option always returns a binary file.\n\n\n\n### Cocktail suggestion workflow\n\nI am always looking to make my colleagues laugh and in my pursuit, I created a Mattermost slash command that when called, sends out a random recipe for a cocktail. This is very useful for Friday evenings. Let me show you how you can do that too (the workflow was built using n8n@0.111.0).\n\n### 1\\. Webhook Node\n\nFirst of all, we’ll create a _Webhook_ node on n8n using the same steps that we followed above. In the configuration, I set the **_HTTP Method_** to 'POST' as I will be sending a POST request later on to this node. Always ensure that you are using the correct HTTP method for the _Webhook_ node. For path, I have entered `webhook`. Feel free to change that to something else according to your preferred naming convention.\n\nAfter configuring the node, I clicked on Webhook URLs, selected the Test tab, and clicked on the URL to copy it. We’ll be using the Test webhook for the tutorial.\n\nHere’s a video of me following the steps mentioned above. I have also shown how you can save and activate the workflow.\n\nCreating and configuring a Webhook node in n8n\n\nNow we need to create a slash command in Mattermost, which will trigger our workflow using the _Webhook_ node.\n\nGo to your Mattermost instance and click on **_Integrations_** in the hamburger menu next to your name on the top left. In the **_Integrations_** menu, click on the **_Slash Commands_** option and then click on the button marked **_Add Slash Command_** on the top right.\n\nThis will then show you a menu to configure the slash command. For the settings, the most important options are the **_Command Trigger Word_** and the **_Request URL_**. I added `cocktail` as the **_Command Trigger Word_** and I added the Test webhook URL that I copied from the node.\n\nYou can also click on the **_Autocomplete_** button and fill out the **_Autocomplete Hint_** or **_Autocomplete Description_** to make it easier to discover and use the slash command.\n\nOnce you are done with the settings, you can go back to your Mattermost instance and issue the `/cocktail` command.\n\n> **Note:** Make sure that you click on the ‘Execute Workflow’ button at the bottom of your n8n workflow editor to register the webhook.\n\nHere’s a video of me following the steps above.\n\nAdding a slash command in Mattermost\n\nNow, if we go back to n8n and check the _Webhook_ node, you’ll see the response from our newly created slash command. Congratulations, you got your first webhook working with n8n!\n\n![](https://blog.n8n.io/content/images/2021/03/response-slash-command.png)Response from the slash command in the Webhook node\n\n### 2\\. HTTP Request Node\n\nNow that we have a working _Webhook_ node, let us add an _HTTP Request_ node that queries an API, so that we can send a random cocktail recipe when somebody triggers the webhook with the `/cocktail` command on Mattermost.\n\nWe’ll use [TheCocktailDB](https://www.thecocktaildb.com/api.php?ref=blog.n8n.io) to get information about a random cocktail recipe. There are multiple endpoints to the API as well as a test API key which will be perfect for our use case. Create the _HTTP Request_ node by clicking on the '**_+_** ' button on the top right of the Editor UI. In the node configuration view, enter the following URL:\n\n[https://www.thecocktaildb.com/api/json/v1/1/random.php](https://www.thecocktaildb.com/api/json/v1/1/random.php?ref=blog.n8n.io)\n\nWhen you click on the **_Execute Node_** button, you’ll see that the node pull in the details of a random cocktail for you. Here’s a video of me following the steps mentioned above.\n\nCreating and configuring the HTTP Request node\n\n### 3\\. Mattermost Node\n\nThe last step of this workflow is to pass on this information to the channel from which the `/cocktail` command was queried. Create a _Mattermost_ node by clicking on the '**_+_** ' button on the top right of the screen.\n\nYou’ll need to add the credentials from your Mattermost instance to get the node to work. Here’s some detailed [information](https://docs.n8n.io/credentials/mattermost?ref=blog.n8n.io) on how to create an access token. I have used an access token from a bot account, but you can just use the access token from your account.\n\n> **Note:** Made sure that all your nodes are connected in the following order to properly access the data from the other nodes: Webhook node > HTTP Request node > Mattermost node.\n\nOnce you have that, we’ll need to enter a Channel ID to specify which channel should the message be sent to. Since this will be a dynamic piece of information, we’ll click on the gears icon next to the field and select ‘Add Expression’. Once you have the editor open, select the following in the variable selector:\n\n`Nodes > Webhook > Output Data > JSON > body > channel_id`\n\nPerfect, now go back to the node configuration and fill in the information that you’d like to send to the channel in the Message field. Add the information that you’d like using ‘Add Expression’. You can find the different pieces of information that you are looking for in the variable selector under:\n\n`Current Node > Input Data > JSON > drinks > [Item: 0]`\n\nThis is what I ended up selecting for the Message field:\n    \n    \n    Why not try {{$json[\"drinks\"][0][\"strDrink\"]}}?\n    {{$json[\"drinks\"][0][\"strInstructions\"]}} Serve in {{$json[\"drinks\"][0][\"strGlass\"]}}.\n\nAnd finally, we can send a picture of the delicious cocktail by clicking on **_Add Attachment_** under **_Attachments_**. Click on **_Add Attachment Item_** and select ‘Image URL’. To fill the **_Image URL_** field, select the 'Add Expression' option again. Once you have the editor open, select the following in the variable selector:\n\n`Current Node > Input Data > JSON > drinks > [Item: 0] > strDrinkThumb`\n\nHere’s a video of me following the steps mentioned above.\n\nCreating and configuring the Mattermost node\n\nNow if you click on **_Execute Node_** , this should send a message to your Mattermost channel where you issued the `/cocktail` command.\n\n> **Note:** Make sure to click on the **_Execute Workflow_** button before trying out the complete workflow.\n\nHere’s a video of me issuing the command on Mattermost and getting a lovely cocktail suggestion 🍹\n\nEnd result of the ‘Cocktail Suggestion Workflow’\n\nCongratulations, you have successfully created the Cocktail Suggestion Workflow! Now, to make sure that the workflow runs permanently without you having to press the **_Execute Workflow_** button before every slash command on Mattermost, we’ll need to use the Production webhook.\n\nTo do that, you’ll just need to get the Production webhook URL from the Webhook node, update the URL for the slash command on Mattermost, and finally activate the workflow. This will make your workflow ready to use.\n\n> **Note:** When working with a Production webhook, please ensure that you have saved and activated the workflow. Don’t forget that the data flowing through the webhook won’t be visible in the Editor UI with the Production webhook.\n\nDon’t forget to tell your colleagues about the new slash command 🙂\n\n### Next Steps\n\nAs the next steps, you can try using webhooks from other products/services such as [PagerDuty](https://www.pagerduty.com/?ref=blog.n8n.io), so that a workflow gets triggered every time an incident report is created. You can also try enriching the cocktail information that is sent to the channel and check out what other functionalities the Mattermost node has.\n\nDid you decide to use different services, APIs, or used other nodes? Don’t forget to submit your workflow [here](https://n8n.io/workflows?ref=blog.n8n.io). You can find the workflow that I created for this tutorial [here](https://n8n.io/workflows/351?ref=blog.n8n.io).\n\n### Summary\n\nn8n provides a powerful platform to create workflows. The _Webhook_ node provides an easy-to-use interface which enables us to connect to a variety of services and unlocks many possibilities. I am currently working on a group of workflows to automate incident response playbooks and am using a lot of webhooks in it. Stay tuned for a detailed tutorial on that very soon!\n\nI’d be excited to check out what you’ve built using n8n! In case you’ve run into an issue while following the tutorial, feel free to reach out to me on [Twitter](https://twitter.com/tanay1337?ref=blog.n8n.io) or ask for help on our [forum](https://community.n8n.io/?ref=blog.n8n.io) 💙\n\n _Start automating!_\n\n_The best part is, you can start automating for free with n8n. The easiest way to get started is to sign up for a[free n8n cloud trial](https://n8n.io/pricing/?ref=blog.n8n.io). Thanks to n8n’s fair-code license, you can also [self-host n8n for free](https://docs.n8n.io/hosting/?ref=blog.n8n.io)._\n\n## Subscribe to n8n newsletter\n\nGet the best, coolest, and latest in automation and low-code delivered to your inbox each week. \n\nSomething went wrong. Please try again later.\n\nSubscribed!\n\nSubscribe\n\n[](https://twitter.com/intent/tweet?text=Learn%20how%20to%20use%20webhooks%20with%20Mattermost%20slash%20commands&url=https://blog.n8n.io/learn-how-to-use-webhooks-with-mattermost-slash-commands/) [](https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/learn-how-to-use-webhooks-with-mattermost-slash-commands/)\n",
  "crawled_at": "2025-05-28T10:54:35.490173"
}