{
  "url": "https://blog.n8n.io/how-to-extend-n8n-with-additional-tools/",
  "title": "How to automatically generate ggplot2 visualizations",
  "excerpt": "Learn how to extend n8n to use the R language and its packages in your workflows, and how low-code automation can make data analysts' work easier.",
  "thumbnail": "https://blog.n8n.io/content/images/size/w1200/2022/05/cover_ggplot.svg",
  "tags": [
    "Tutorial"
  ],
  "html": "<p>As an experienced statistical programmer, I regularly use <a href=\"https://www.r-project.org/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">R</a> for data analysis and reporting in my work. R is a popular programming language among data analysts and statisticians across the world. One of the features that distinguish R from many other programming languages is its impressive graphics package called <a href=\"https://ggplot2.tidyverse.org/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">ggplot2</a>, which helps you create data visualizations.</p><p>Recently, I explored how R and ggplot2 can be used in n8n: I built a <a href=\"https://n8n.io/workflows/1605?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">workflow</a> that automatically generates plots with ggplot2 and sends them in a Telegram chat. In this tutorial, I'll walk you through my workflow and show you how it's possible to run R scripts in n8n.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.54.37.png\" class=\"kg-image lightense-target\" alt=\"a workflow that automatically generates plots with ggplot2 and sends them in a Telegram chat\" loading=\"lazy\" width=\"1082\" height=\"534\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-01-at-12.54.37.png 600w, https://blog.n8n.io/content/images/size/w1000/2022/09/Screenshot-2022-09-01-at-12.54.37.png 1000w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.54.37.png 1082w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Automatically generate plots with ggplot2 and send them in a Telegram chat</figcaption></figure><!--kg-card-begin: markdown--><h4 id=\"table-of-contents\">Table of contents</h4>\n<p><a href=\"#the-use-case\">The use case</a><br>\n<a href=\"#prerequisites\">Prerequisites</a><br>\n<a href=\"#building-the-workflow\">Building the workflow</a><br>\n<a href=\"#whats-next\">What’s next?</a></p>\n<!--kg-card-end: markdown--><h2 id=\"the-use-case\">The use case</h2><p>I wanted to combine my experience in R with my interest in <a href=\"https://n8n.io/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">low-code tools like n8n</a> to automatically generate data visualizations. For testing, I decided to create a workflow that automatically fetches weather information of different cities from the OpenWeather API, generates a plot in R illustrating the data, and sends this plot as an image with a Telegram bot.</p><p>This workflow demonstrates how n8n can remove many hurdles of data analysts who use R in their daily work, but are not familiar with server configuration, API calls, or Telegram bots.</p><h2 id=\"prerequisites\">Prerequisites</h2><p>Before building the n8n workflow, make sure you meet the following prerequisites set up:</p><ul><li><strong>n8n </strong>in Docker: We will extend the Docker version of n8n and use <em>Execute Command</em> node to run an R script.</li><li>A <strong>Telegram bot</strong>. If you have never created Telegram bots before, here is a <a href=\"https://blog.n8n.io/creating-telegram-bots-with-n8n-a-no-code-platform/\">tutorial</a> for that.</li><li>An <strong>API key</strong> from <a href=\"https://openweathermap.org/price?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">OpenWeather</a>. The free tier is enough for this tutorial. Note that it might take a couple of hours before your API key is activated.</li><li><strong>R</strong>. Don’t worry if you are not familiar with the it, I will explain the installation process and provide a code example.</li><li>Basic <strong>JavaScript</strong> knowledge. It would be helpful to understand what the provided code snippets do.</li></ul><h2 id=\"building-the-workflow\">Building the workflow</h2><p>Before building the workflow, we need to install the R language along with n8n.</p><h3 id=\"installing-n8n-with-r\">Installing n8n with R</h3><p>n8n can be installed as a Docker image. let’s take a look at the docker-compose.yml<strong> </strong>file first:</p><!--kg-card-begin: markdown--><pre><code>  n8n:\n    build:\n      context: .\n      dockerfile: Dockerfile-n8n\n      args:\n        tag: latest\n    restart: always\n    environment:\n      - NODE_ENV=production\n      - DB_SQLITE_VACUUM_ON_STARTUP=true\n      - N8N_USER_MANAGEMENT_DISABLED=true\n      - N8N_BASIC_AUTH_ACTIVE=true\n      - N8N_BASIC_AUTH_USER\n      - N8N_BASIC_AUTH_PASSWORD\n      - N8N_HOST\n      - N8N_PROTOCOL\n      - N8N_PORT\n      - GENERIC_TIMEZONE\n      - VUE_APP_URL_BASE_API=${N8N_PROTOCOL}://${N8N_HOST}/\n      - WEBHOOK_TUNNEL_URL=${N8N_PROTOCOL}://${N8N_HOST}/\n      - WEBHOOK_URL=${N8N_PROTOCOL}://${N8N_HOST}/\n    volumes:\n      - './.n8n:/home/node/.n8n'\n      - './n8n-local-files:/files'\n</code></pre>\n<!--kg-card-end: markdown--><p>Here we are defining a single-user n8n instance with a default SQLite database and some additional <a href=\"https://docs.n8n.io/hosting/environment-variables/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">environmental variables</a> that are stored in the .env file in the same directory as docker-compose.yml. There is also a custom dockerfile for n8n, which installs necessary R packages:</p><!--kg-card-begin: markdown--><pre><code>ARG tag=latest\nFROM n8nio/n8n:$tag\n\n# install several Linux packages\nRUN apk --update add curl curl-dev libcurl linux-headers g++ gfortran libxml2 libxml2-dev R R-dev\n\n# install a custom package manager\nRUN R -e \"install.packages('pak', repos = 'http://cran.us.r-project.org')\"\n\n#install several packages for this tutorial\nRUN R -e \"pak::pkg_install(c('ggplot2','ggthemes','dplyr','magrittr', 'tidyr', 'lubridate'))\"\n</code></pre>\n<!--kg-card-end: markdown--><p>After these configuration files are ready, we need to run several commands on the server:</p><!--kg-card-begin: markdown--><pre><code>sudo docker-compose build --no-cache n8n\nsudo docker-compose stop\nsudo docker-compose up -d\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"configuring-the-workflow-nodes\">Configuring the workflow nodes</h3><p>Once you have extended the n8n Docker image and obtained the &nbsp;API key, it's time to create the workflow!</p><p>First, we place a <em>Telegram trigger</em> Node to catch the incoming messages. Then, we use a <em>Switch</em> Node to filter the incoming text from the <strong>{{$json[\"message\"][\"text\"]}} </strong>variable. In this bot we will process only three cases: <strong>/start</strong> command will trigger a welcome text, <strong>/getweather</strong> will do the main functionality and everything else is considered as an invalid command.</p><p>After the <strong>/getweather</strong> command is submitted we will first set up a few variables using the <em>Set</em> Node.</p><ul><li><em><strong>filename</strong></em> is an expression which concatenates Telegram ID and a timestamp, and will be used to save the csv file and log.</li><li><em><strong>Foldername</strong></em> depends on your VPS setup.</li><li><em><strong>Imgname</strong></em> is the filename of the outcome image. It only defines a Telegram user ID, because we don’t want to store all the images that were sent to the user.<br></li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/1-1.png\" class=\"kg-image lightense-target\" alt=\"Set node configuration\" loading=\"lazy\" width=\"520\" height=\"1128\"><figcaption>Set node configuration</figcaption></figure><p>Next, a <em>Function</em> Node contains a list of European capital cities:</p><!--kg-card-begin: markdown--><pre><code class=\"language-json\">return [{Cityid: 2643743, Cityname:\"London\",    Country: \"GB\"},\n{Cityid: 2950159, Cityname:\"Berlin\",    Country: \"DE\"},\n{Cityid: 3117735, Cityname:\"Madrid\",    Country: \"ES\"},\n{Cityid: 3169070, Cityname:\"Rome\",      Country: \"IT\"},\n{Cityid: 683506,  Cityname:\"Bucharest\", Country: \"RO\"},\n{Cityid: 2968815, Cityname:\"Paris\",     Country: \"FR\"},\n{Cityid: 2761369, Cityname:\"Vienna\",    Country: \"AT\"},\n{Cityid: 756135,  Cityname:\"Warsaw\",    Country: \"PL\"},\n{Cityid: 3054638, Cityname:\"Budapest\",  Country: \"HU\"},\n{Cityid: 792680,  Cityname:\"Belgrade\",  Country: \"RS\"}];\n</code></pre>\n<!--kg-card-end: markdown--><p>The Cityid is taken from the OpenWeather documentation. You can create your own list of cities.</p><p>Now, we are ready to fetch the weather data!</p><p>Since n8n does not have a special Node for the OpenWeather service, we use the <em>HTTP Request</em> Node.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.52.49.png\" class=\"kg-image lightense-target\" alt=\"HTTP Request node configuration\" loading=\"lazy\" width=\"518\" height=\"1122\"><figcaption>HTTP Request node configuration</figcaption></figure><p>This call will trigger ten API requests (because we have configured ten cities) and the result will look like this:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.52.56.png\" class=\"kg-image lightense-target\" alt=\"HTTP Request output\" loading=\"lazy\" width=\"908\" height=\"480\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-01-at-12.52.56.png 600w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.52.56.png 908w\" sizes=\"(min-width: 720px) 720px\"><figcaption>HTTP Request output</figcaption></figure><p>The result is a nested JSON file. To make it more readable and get the data we need, we have to process the JSON output using JavaScript in the <em>Function</em> Node, so the data looks like this:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.53.02.png\" class=\"kg-image lightense-target\" alt=\"Output view\" loading=\"lazy\" width=\"904\" height=\"358\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-01-at-12.53.02.png 600w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.53.02.png 904w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Output view</figcaption></figure><p>Now we can save the table in CSV format and put the file on the server.</p><p>After this is completed we can run an R script that will create an image. For this we need to run an <em>Execute Command</em> Node. The <em><strong>command</strong></em> option is also an expression: </p><!--kg-card-begin: markdown--><pre><code>Rscript --vanilla '{{$node[\"Filename\"].json[\"foldername\"]}}dumbbell_plot.R' '{{$node[\"Filename\"].json[\"foldername\"]}}{{$node[\"Filename\"].json[\"filename\"]}}.csv' '{{$node[\"Filename\"].json[\"foldername\"]}}{{$node[\"Filename\"].json[\"imgname\"]}}.png' &gt;&amp; {{$node[\"Filename\"].json[\"foldername\"]}}{{$node[\"Filename\"].json[\"filename\"]}}.log\n</code></pre>\n<!--kg-card-end: markdown--><p>Here we call an R script called dumbbell_plot.R and pass two parameters: path to a csv file and an output name. After that we also create a log file. The R script can be found <a href=\"https://gist.github.com/ed-parsadanyan/0561cd12d545e642fcef17dcb0872b00?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">here</a>.</p><p>Running the R script generates the following image:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.53.16.png\" class=\"kg-image lightense-target\" alt=\"Graph image for the weather of different cities\" loading=\"lazy\" width=\"1096\" height=\"548\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-01-at-12.53.16.png 600w, https://blog.n8n.io/content/images/size/w1000/2022/09/Screenshot-2022-09-01-at-12.53.16.png 1000w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.53.16.png 1096w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Graph image for the weather of different cities</figcaption></figure><p>Now we can send the image in a Telegram channel using the <em>Telegram</em> Node.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.53.28.png\" class=\"kg-image lightense-target\" alt=\"Telegram node configuration\" loading=\"lazy\" width=\"610\" height=\"1154\" srcset=\"https://blog.n8n.io/content/images/size/w600/2022/09/Screenshot-2022-09-01-at-12.53.28.png 600w, https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.53.28.png 610w\"><figcaption>Telegram node configuration</figcaption></figure><p>Finally, executing the workflow will run all the nodes and if everything is configured properly, you should get a message from your Telegram bot with the weather plot.</p><p>You can test the bot I built <a href=\"https://t.me/n8n_Rtest_bot?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">here</a>.</p><h2 id=\"what%E2%80%99s-next\">What’s next?</h2><p>Installing the R programming language into the n8n Docker image is not always an optimal solution. First of all, the image takes time to create (around 20 mins depending on the VPS settings). Second, R consumes a significant amount of system resources. It could be better to separate n8n workflow from the the R script and run it either:</p><ul><li>as an API call. Experienced programmers can set up an R server with <a href=\"https://www.rplumber.io/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">plumber</a> package; or</li><li>via the <em>SSH</em> Node. It is possible to install R in a separate more powerful VPS which is idle most of the time and is activated via SSH command. Once the image is created it can be downloaded and then delivered to the end user with the <em>Telegram</em> Node.</li></ul><p><em>Start automating!</em></p><p><em>The best part is, you can start automating for free with n8n. The easiest way to get started is to </em><a href=\"https://n8n.io/pricing?cloud=false&amp;ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>download the desktop app,</em></a><em> or sign up for a <a href=\"https://n8n.io/cloud/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\">free n8n cloud trial</a>. Thanks to n8n’s fair-code license, you can also </em><a href=\"https://docs.n8n.io/hosting/?ref=blog.n8n.io\" target=\"_blank\" rel=\"noopener\"><em>self-host n8n for free</em></a><em>.</em></p>\n\t\t<div class=\"newsletter-banner\">\n\t    <div class=\"newsletter-banner-content\">\n\t      <div class=\"section-header\">\n\t        <h2>Subscribe to <span>n8n newsletter</span></h2>\n\t        <div class=\"section-subheader--bottom\">\n\t          Get the best, coolest, and latest in automation and low-code delivered to your inbox each week.\n\t        </div>\n\t      </div>\n\t      <div class=\"newsletter-banner-form\">\n\t        <form autocomplete=\"off\" class=\"contact-form\" onsubmit=\"subscribeNewsletter(event)\">\n\t        \t<div id=\"recaptcha\" class=\"g-recaptcha\" data-sitekey=\"6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB\" data-callback=\"submitSubscription\" data-size=\"invisible\"><div class=\"grecaptcha-badge\" data-style=\"bottomright\" style=\"width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;\"><div class=\"grecaptcha-logo\"><iframe title=\"reCAPTCHA\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-5am5ryu085xw\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LeAQeopAAAAAKlLsRb1weWm6T_vijoQBkGkbHzB&amp;co=aHR0cHM6Ly9ibG9nLm44bi5pbzo0NDM.&amp;hl=en&amp;v=jt8Oh2-Ue1u7nEbJQUIdocyd&amp;size=invisible&amp;cb=9rtntih8unlb\"></iframe></div><div class=\"grecaptcha-error\"></div><textarea id=\"g-recaptcha-response\" name=\"g-recaptcha-response\" class=\"g-recaptcha-response\" style=\"width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;\"></textarea></div><iframe style=\"display: none;\"></iframe></div>\n\t          <div class=\"input-wrapper\">\n\t            <input placeholder=\"Email\" name=\"email\" type=\"email\" required=\"required\" class=\"\">\n\t            <div class=\"messages\">\n\t              <div class=\"message message--error\">Something went wrong. Please try again later.</div>\n\t              <div class=\"message message--success\">Subscribed!</div>\n\t            </div>\n\t          </div>\n\t          <button type=\"submit\" class=\"submit-btn\">Subscribe</button>\n\t        </form>\n\t      </div>\n\t    </div>\n    </div>\n\t\t<div class=\"post-share-section\">\n\t<div class=\"post-share-wrap\">\n\t\t<a href=\"https://twitter.com/intent/tweet?text=How%20to%20automatically%20generate%20ggplot2%20visualizations&amp;url=https://blog.n8n.io/how-to-extend-n8n-with-additional-tools/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\"></path></svg></a>\n\t\t<a href=\"https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/how-to-extend-n8n-with-additional-tools/\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook share icon\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z\"></path></svg></a>\n\t\t<!-- <a href=\"javascript:\" class=\"post-share-link\" id=\"copy\" data-clipboard-target=\"#copy-link\" aria-label=\"Copy link icon\"><svg role=\"img\" viewBox=\"0 0 33 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M27.3999996,13.4004128 L21.7999996,13.4004128 L21.7999996,19 L18.9999996,19 L18.9999996,13.4004128 L13.3999996,13.4004128 L13.3999996,10.6006192 L18.9999996,10.6006192 L18.9999996,5 L21.7999996,5 L21.7999996,10.6006192 L27.3999996,10.6006192 L27.3999996,13.4004128 Z M12,20.87 C7.101,20.87 3.13,16.898 3.13,12 C3.13,7.102 7.101,3.13 12,3.13 C12.091,3.13 12.181,3.139 12.272,3.142 C9.866,5.336 8.347,8.487 8.347,12 C8.347,15.512 9.866,18.662 12.271,20.857 C12.18,20.859 12.091,20.87 12,20.87 Z M20.347,0 C18.882,0 17.484,0.276 16.186,0.756 C14.882,0.271 13.473,0 12,0 C5.372,0 0,5.373 0,12 C0,18.628 5.372,24 12,24 C13.471,24 14.878,23.726 16.181,23.242 C17.481,23.724 18.88,24 20.347,24 C26.975,24 32.347,18.628 32.347,12 C32.347,5.373 26.975,0 20.347,0 Z\"/></svg></a>\n\t\t<small class=\"share-link-info\">The link has been copied!</small> -->\n\t</div>\n\t<input type=\"text\" value=\"https://blog.n8n.io/how-to-extend-n8n-with-additional-tools/\" id=\"copy-link\" aria-label=\"Copy link input\">\n</div>",
  "readme": "As an experienced statistical programmer, I regularly use [R](https://www.r-project.org/?ref=blog.n8n.io) for data analysis and reporting in my work. R is a popular programming language among data analysts and statisticians across the world. One of the features that distinguish R from many other programming languages is its impressive graphics package called [ggplot2](https://ggplot2.tidyverse.org/?ref=blog.n8n.io), which helps you create data visualizations.\n\nRecently, I explored how R and ggplot2 can be used in n8n: I built a [workflow](https://n8n.io/workflows/1605?ref=blog.n8n.io) that automatically generates plots with ggplot2 and sends them in a Telegram chat. In this tutorial, I'll walk you through my workflow and show you how it's possible to run R scripts in n8n.\n\n![a workflow that automatically generates plots with ggplot2 and sends them in a Telegram chat](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.54.37.png)Automatically generate plots with ggplot2 and send them in a Telegram chat\n\n#### Table of contents\n\nThe use case  \nPrerequisites  \nBuilding the workflow  \nWhat’s next?\n\n## The use case\n\nI wanted to combine my experience in R with my interest in [low-code tools like n8n](https://n8n.io/?ref=blog.n8n.io) to automatically generate data visualizations. For testing, I decided to create a workflow that automatically fetches weather information of different cities from the OpenWeather API, generates a plot in R illustrating the data, and sends this plot as an image with a Telegram bot.\n\nThis workflow demonstrates how n8n can remove many hurdles of data analysts who use R in their daily work, but are not familiar with server configuration, API calls, or Telegram bots.\n\n## Prerequisites\n\nBefore building the n8n workflow, make sure you meet the following prerequisites set up:\n\n  * **n8n** in Docker: We will extend the Docker version of n8n and use _Execute Command_ node to run an R script.\n  * A **Telegram bot**. If you have never created Telegram bots before, here is a [tutorial](https://blog.n8n.io/creating-telegram-bots-with-n8n-a-no-code-platform/) for that.\n  * An **API key** from [OpenWeather](https://openweathermap.org/price?ref=blog.n8n.io). The free tier is enough for this tutorial. Note that it might take a couple of hours before your API key is activated.\n  * **R**. Don’t worry if you are not familiar with the it, I will explain the installation process and provide a code example.\n  * Basic **JavaScript** knowledge. It would be helpful to understand what the provided code snippets do.\n\n\n\n## Building the workflow\n\nBefore building the workflow, we need to install the R language along with n8n.\n\n### Installing n8n with R\n\nn8n can be installed as a Docker image. let’s take a look at the docker-compose.yml**** file first:\n    \n    \n      n8n:\n        build:\n          context: .\n          dockerfile: Dockerfile-n8n\n          args:\n            tag: latest\n        restart: always\n        environment:\n          - NODE_ENV=production\n          - DB_SQLITE_VACUUM_ON_STARTUP=true\n          - N8N_USER_MANAGEMENT_DISABLED=true\n          - N8N_BASIC_AUTH_ACTIVE=true\n          - N8N_BASIC_AUTH_USER\n          - N8N_BASIC_AUTH_PASSWORD\n          - N8N_HOST\n          - N8N_PROTOCOL\n          - N8N_PORT\n          - GENERIC_TIMEZONE\n          - VUE_APP_URL_BASE_API=${N8N_PROTOCOL}://${N8N_HOST}/\n          - WEBHOOK_TUNNEL_URL=${N8N_PROTOCOL}://${N8N_HOST}/\n          - WEBHOOK_URL=${N8N_PROTOCOL}://${N8N_HOST}/\n        volumes:\n          - './.n8n:/home/node/.n8n'\n          - './n8n-local-files:/files'\n    \n\nHere we are defining a single-user n8n instance with a default SQLite database and some additional [environmental variables](https://docs.n8n.io/hosting/environment-variables/?ref=blog.n8n.io) that are stored in the .env file in the same directory as docker-compose.yml. There is also a custom dockerfile for n8n, which installs necessary R packages:\n    \n    \n    ARG tag=latest\n    FROM n8nio/n8n:$tag\n    \n    # install several Linux packages\n    RUN apk --update add curl curl-dev libcurl linux-headers g++ gfortran libxml2 libxml2-dev R R-dev\n    \n    # install a custom package manager\n    RUN R -e \"install.packages('pak', repos = 'http://cran.us.r-project.org')\"\n    \n    #install several packages for this tutorial\n    RUN R -e \"pak::pkg_install(c('ggplot2','ggthemes','dplyr','magrittr', 'tidyr', 'lubridate'))\"\n    \n\nAfter these configuration files are ready, we need to run several commands on the server:\n    \n    \n    sudo docker-compose build --no-cache n8n\n    sudo docker-compose stop\n    sudo docker-compose up -d\n    \n\n### Configuring the workflow nodes\n\nOnce you have extended the n8n Docker image and obtained the  API key, it's time to create the workflow!\n\nFirst, we place a _Telegram trigger_ Node to catch the incoming messages. Then, we use a _Switch_ Node to filter the incoming text from the **{{$json[\"message\"][\"text\"]}}** variable. In this bot we will process only three cases: **/start** command will trigger a welcome text, **/getweather** will do the main functionality and everything else is considered as an invalid command.\n\nAfter the **/getweather** command is submitted we will first set up a few variables using the _Set_ Node.\n\n  * _**filename**_ is an expression which concatenates Telegram ID and a timestamp, and will be used to save the csv file and log.\n  * _**Foldername**_ depends on your VPS setup.\n  * _**Imgname**_ is the filename of the outcome image. It only defines a Telegram user ID, because we don’t want to store all the images that were sent to the user.  \n\n\n![Set node configuration](https://blog.n8n.io/content/images/2022/09/1-1.png)Set node configuration\n\nNext, a _Function_ Node contains a list of European capital cities:\n    \n    \n    return [{Cityid: 2643743, Cityname:\"London\",    Country: \"GB\"},\n    {Cityid: 2950159, Cityname:\"Berlin\",    Country: \"DE\"},\n    {Cityid: 3117735, Cityname:\"Madrid\",    Country: \"ES\"},\n    {Cityid: 3169070, Cityname:\"Rome\",      Country: \"IT\"},\n    {Cityid: 683506,  Cityname:\"Bucharest\", Country: \"RO\"},\n    {Cityid: 2968815, Cityname:\"Paris\",     Country: \"FR\"},\n    {Cityid: 2761369, Cityname:\"Vienna\",    Country: \"AT\"},\n    {Cityid: 756135,  Cityname:\"Warsaw\",    Country: \"PL\"},\n    {Cityid: 3054638, Cityname:\"Budapest\",  Country: \"HU\"},\n    {Cityid: 792680,  Cityname:\"Belgrade\",  Country: \"RS\"}];\n    \n\nThe Cityid is taken from the OpenWeather documentation. You can create your own list of cities.\n\nNow, we are ready to fetch the weather data!\n\nSince n8n does not have a special Node for the OpenWeather service, we use the _HTTP Request_ Node.\n\n![HTTP Request node configuration](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.52.49.png)HTTP Request node configuration\n\nThis call will trigger ten API requests (because we have configured ten cities) and the result will look like this:\n\n![HTTP Request output](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.52.56.png)HTTP Request output\n\nThe result is a nested JSON file. To make it more readable and get the data we need, we have to process the JSON output using JavaScript in the _Function_ Node, so the data looks like this:\n\n![Output view](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.53.02.png)Output view\n\nNow we can save the table in CSV format and put the file on the server.\n\nAfter this is completed we can run an R script that will create an image. For this we need to run an _Execute Command_ Node. The _**command**_ option is also an expression: \n    \n    \n    Rscript --vanilla '{{$node[\"Filename\"].json[\"foldername\"]}}dumbbell_plot.R' '{{$node[\"Filename\"].json[\"foldername\"]}}{{$node[\"Filename\"].json[\"filename\"]}}.csv' '{{$node[\"Filename\"].json[\"foldername\"]}}{{$node[\"Filename\"].json[\"imgname\"]}}.png' >& {{$node[\"Filename\"].json[\"foldername\"]}}{{$node[\"Filename\"].json[\"filename\"]}}.log\n    \n\nHere we call an R script called dumbbell_plot.R and pass two parameters: path to a csv file and an output name. After that we also create a log file. The R script can be found [here](https://gist.github.com/ed-parsadanyan/0561cd12d545e642fcef17dcb0872b00?ref=blog.n8n.io).\n\nRunning the R script generates the following image:\n\n![Graph image for the weather of different cities](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.53.16.png)Graph image for the weather of different cities\n\nNow we can send the image in a Telegram channel using the _Telegram_ Node.\n\n![Telegram node configuration](https://blog.n8n.io/content/images/2022/09/Screenshot-2022-09-01-at-12.53.28.png)Telegram node configuration\n\nFinally, executing the workflow will run all the nodes and if everything is configured properly, you should get a message from your Telegram bot with the weather plot.\n\nYou can test the bot I built [here](https://t.me/n8n_Rtest_bot?ref=blog.n8n.io).\n\n## What’s next?\n\nInstalling the R programming language into the n8n Docker image is not always an optimal solution. First of all, the image takes time to create (around 20 mins depending on the VPS settings). Second, R consumes a significant amount of system resources. It could be better to separate n8n workflow from the the R script and run it either:\n\n  * as an API call. Experienced programmers can set up an R server with [plumber](https://www.rplumber.io/?ref=blog.n8n.io) package; or\n  * via the _SSH_ Node. It is possible to install R in a separate more powerful VPS which is idle most of the time and is activated via SSH command. Once the image is created it can be downloaded and then delivered to the end user with the _Telegram_ Node.\n\n\n\n_Start automating!_\n\n_The best part is, you can start automating for free with n8n. The easiest way to get started is to_[ _download the desktop app,_](https://n8n.io/pricing?cloud=false&ref=blog.n8n.io)_or sign up for a[free n8n cloud trial](https://n8n.io/cloud/?ref=blog.n8n.io). Thanks to n8n’s fair-code license, you can also _[_self-host n8n for free_](https://docs.n8n.io/hosting/?ref=blog.n8n.io) _._\n\n## Subscribe to n8n newsletter\n\nGet the best, coolest, and latest in automation and low-code delivered to your inbox each week. \n\nSomething went wrong. Please try again later.\n\nSubscribed!\n\nSubscribe\n\n[](https://twitter.com/intent/tweet?text=How%20to%20automatically%20generate%20ggplot2%20visualizations&url=https://blog.n8n.io/how-to-extend-n8n-with-additional-tools/) [](https://www.facebook.com/sharer/sharer.php?u=https://blog.n8n.io/how-to-extend-n8n-with-additional-tools/)\n",
  "crawled_at": "2025-05-28T11:02:27.287684"
}