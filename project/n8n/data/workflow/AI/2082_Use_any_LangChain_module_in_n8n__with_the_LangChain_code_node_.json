{
  "title": "Use any LangChain module in n8n (with the LangChain code node)",
  "url": "https://n8n.io/workflows/2082-use-any-langchain-module-in-n8n-with-the-langchain-code-node/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/?count=20",
  "author": "David Roberts",
  "publish_date": "Last update a month ago",
  "content": "",
  "workflow_json": "{\"meta\":{\"instanceId\":\"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\",\"templateCredsSetupCompleted\":true},\"nodes\":[{\"id\":\"b7e2de27-e52c-46d1-aaa9-a67c11c48a8f\",\"name\":\"Sticky Note7\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-420,-60],\"parameters\":{\"width\":328.41313484548044,\"height\":211.30313955500145,\"content\":\"Before executing, replace `YOUR_API_KEY` with an API key for searchapi.io\"},\"typeVersion\":1},{\"id\":\"fd2ac655-73fd-434a-bba4-e460af8dfa8a\",\"name\":\"When clicking \\\"Execute Workflow\\\"\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[-820,20],\"parameters\":{},\"typeVersion\":1},{\"id\":\"e1bd87f7-283b-496d-910d-b92d1cb19237\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1140,-20],\"parameters\":{\"color\":7,\"height\":220.82906011310624,\"content\":\"## About\\nThis workflow shows how you can write LangChain code in n8n (and import its modules if required).\\n\\nThe workflow fetches a video from YouTube and produces a textual summary of it.\"},\"typeVersion\":1},{\"id\":\"a43bb1c5-dd90-4331-930c-128ef0ecb38a\",\"name\":\"LangChain Code\",\"type\":\"@n8n/n8n-nodes-langchain.code\",\"position\":[-380,20],\"parameters\":{\"code\":{\"execute\":{\"code\":\"// IMPORTANT: add in your API key for searchapi.io below\\nconst searchApiKey = \\\"<YOUR API KEY>\\\"\\n\\nconst { loadSummarizationChain } = require(\\\"langchain/chains\\\");\\nconst { SearchApiLoader } = require(\\\"@n8n/n8n-nodes-langchain/node_modules/@langchain/community/document_loaders/web/searchapi.cjs\\\");\\nconst { PromptTemplate } = require(\\\"@langchain/core/prompts\\\");\\nconst { TokenTextSplitter } = require(\\\"langchain/text_splitter\\\");\\nconst loader = new SearchApiLoader({\\n  engine: \\\"youtube_transcripts\\\",\\n  video_id: $input.item.json.videoId,\\n  apiKey: searchApiKey,\\n});\\n\\nif (searchApiKey == \\\"<YOUR API KEY>\\\") {\\n  throw new Error(\\\"Please add your API key for searchapi.io to this node\\\")\\n}\\n\\nconst docs = await loader.load();\\n\\nconst splitter = new TokenTextSplitter({\\n  chunkSize: 10000,\\n  chunkOverlap: 250,\\n});\\n\\nconst docsSummary = await splitter.splitDocuments(docs);\\n\\nconst llmSummary = await this.getInputConnectionData('ai_languageModel', 0);\\n\\nconst summaryTemplate = `\\nYou are an expert in summarizing YouTube videos.\\nYour goal is to create a summary of a podcast.\\nBelow you find the transcript of a podcast:\\n--------\\n{text}\\n--------\\n\\nThe transcript of the podcast will also be used as the basis for a question and answer bot.\\nProvide some examples questions and answers that could be asked about the podcast. Make these questions very specific.\\n\\nTotal output will be a summary of the video and a list of example questions the user could ask of the video.\\n\\nSUMMARY AND QUESTIONS:\\n`;\\n\\nconst SUMMARY_PROMPT = PromptTemplate.fromTemplate(summaryTemplate);\\n\\nconst summaryRefineTemplate = `\\nYou are an expert in summarizing YouTube videos.\\nYour goal is to create a summary of a podcast.\\nWe have provided an existing summary up to a certain point: {existing_answer}\\n\\nBelow you find the transcript of a podcast:\\n--------\\n{text}\\n--------\\n\\nGiven the new context, refine the summary and example questions.\\nThe transcript of the podcast will also be used as the basis for a question and answer bot.\\nProvide some examples questions and answers that could be asked about the podcast. Make\\nthese questions very specific.\\nIf the context isn't useful, return the original summary and questions.\\nTotal output will be a summary of the video and a list of example questions the user could ask of the video.\\n\\nSUMMARY AND QUESTIONS:\\n`;\\n\\nconst SUMMARY_REFINE_PROMPT = PromptTemplate.fromTemplate(\\n  summaryRefineTemplate\\n);\\n\\nconst summarizeChain = loadSummarizationChain(llmSummary, {\\n  type: \\\"refine\\\",\\n  verbose: true,\\n  questionPrompt: SUMMARY_PROMPT,\\n  refinePrompt: SUMMARY_REFINE_PROMPT,\\n});\\n\\nconst summary = await summarizeChain.run(docsSummary);\\n\\nreturn [{json: { summary } } ];\"}},\"inputs\":{\"input\":[{\"type\":\"main\",\"required\":true,\"maxConnections\":1},{\"type\":\"ai_languageModel\",\"required\":true,\"maxConnections\":1}]},\"outputs\":{\"output\":[{\"type\":\"main\"}]}},\"typeVersion\":1},{\"id\":\"a36440c5-402e-44e6-819c-2a19dc9e3e1e\",\"name\":\"Set YouTube video ID\",\"type\":\"n8n-nodes-base.set\",\"position\":[-600,20],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"c2dc2944-a7c7-44c3-a805-27a55baa452a\",\"name\":\"videoId\",\"type\":\"string\",\"value\":\"OsMVtuuwOXc\"}]}},\"typeVersion\":3.4},{\"id\":\"02386530-9aef-4732-9972-5624b78431a6\",\"name\":\"OpenAI Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[-340,220],\"parameters\":{\"model\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gpt-4o-mini\"},\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"8gccIjcuf3gvaoEr\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.2}],\"pinData\":{},\"connections\":{\"OpenAI Chat Model\":{\"ai_languageModel\":[[{\"node\":\"LangChain Code\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Set YouTube video ID\":{\"main\":[[{\"node\":\"LangChain Code\",\"type\":\"main\",\"index\":0}]]},\"When clicking \\\"Execute Workflow\\\"\":{\"main\":[[{\"node\":\"Set YouTube video ID\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "[LangChain](https://www.langchain.com/) is a framework for building AI functionality that users large language models. By leveraging the functionality of LangChain, you can write even more powerful workflows.\n\nThis workflow shows how you can write LangChain code within n8n, including importing LangChain modules.\n\nThe workflow itself produces a summary of a YouTube video, when given the video's ID.\n\nNote that to use this template, you need to be on n8n version 1.19.4 or later.\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><p><a href=\"https://www.langchain.com/\" rel=\"ugc nofollow\" target=\"_blank\">LangChain</a> is a framework for building AI functionality that users large language models. By leveraging the functionality of LangChain, you can write even more powerful workflows.</p>\n<p>This workflow shows how you can write LangChain code within n8n, including importing LangChain modules.</p>\n<p>The workflow itself produces a summary of a YouTube video, when given the video's ID.</p>\n<p>Note that to use this template, you need to be on n8n version 1.19.4 or later.</p>\n</div><!--]-->",
  "readme_zh": "[LangChain](https://www.langchain.com/) 是一个用于构建人工智能功能的框架，它利用大型语言模型的能力。通过运用LangChain的功能，你可以编写出更强大的工作流程。\n\n此工作流程展示了如何在n8n中编写LangChain代码，包括导入LangChain模块。\n\n该工作流程本身的功能是：当输入YouTube视频ID时，生成该视频的摘要。\n\n请注意，使用此模板需要n8n版本为1.19.4或更高。",
  "title_zh": "在n8n中使用任何LangChain模块（通过LangChain代码节点）",
  "publish_date_absolute": "",
  "publish_date_zh": "上次更新于一个月前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"b7e2de27-e52c-46d1-aaa9-a67c11c48a8f\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -420,\n        -60\n      ],\n      \"parameters\": {\n        \"width\": 328.41313484548044,\n        \"height\": 211.30313955500145,\n        \"content\": \"在执行前，请将`YOUR_API_KEY`替换为searchapi.io提供的API密钥。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fd2ac655-73fd-434a-bba4-e460af8dfa8a\",\n      \"name\": \"When clicking \\\"Execute Workflow\\\"\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -820,\n        20\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e1bd87f7-283b-496d-910d-b92d1cb19237\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1140,\n        -20\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"height\": 220.82906011310624,\n        \"content\": \"## 关于\\n此工作流展示了如何在n8n中编写LangChain代码（并在需要时导入其模块）。\\n\\n该工作流从YouTube获取视频并生成其文本摘要。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a43bb1c5-dd90-4331-930c-128ef0ecb38a\",\n      \"name\": \"LangChain Code\",\n      \"type\": \"@n8n/n8n-nodes-langchain.code\",\n      \"position\": [\n        -380,\n        20\n      ],\n      \"parameters\": {\n        \"code\": {\n          \"execute\": {\n            \"code\": \"// IMPORTANT: add in your API key for searchapi.io below\\nconst searchApiKey = \\\"<YOUR API KEY>\\\"\\n\\nconst { loadSummarizationChain } = require(\\\"langchain/chains\\\");\\nconst { SearchApiLoader } = require(\\\"@n8n/n8n-nodes-langchain/node_modules/@langchain/community/document_loaders/web/searchapi.cjs\\\");\\nconst { PromptTemplate } = require(\\\"@langchain/core/prompts\\\");\\nconst { TokenTextSplitter } = require(\\\"langchain/text_splitter\\\");\\nconst loader = new SearchApiLoader({\\n  engine: \\\"youtube_transcripts\\\",\\n  video_id: $input.item.json.videoId,\\n  apiKey: searchApiKey,\\n});\\n\\nif (searchApiKey == \\\"<YOUR API KEY>\\\") {\\n  throw new Error(\\\"Please add your API key for searchapi.io to this node\\\")\\n}\\n\\nconst docs = await loader.load();\\n\\nconst splitter = new TokenTextSplitter({\\n  chunkSize: 10000,\\n  chunkOverlap: 250,\\n});\\n\\nconst docsSummary = await splitter.splitDocuments(docs);\\n\\nconst llmSummary = await this.getInputConnectionData('ai_languageModel', 0);\\n\\nconst summaryTemplate = `\\nYou are an expert in summarizing YouTube videos.\\nYour goal is to create a summary of a podcast.\\nBelow you find the transcript of a podcast:\\n--------\\n{text}\\n--------\\n\\nThe transcript of the podcast will also be used as the basis for a question and answer bot.\\nProvide some examples questions and answers that could be asked about the podcast. Make these questions very specific.\\n\\nTotal output will be a summary of the video and a list of example questions the user could ask of the video.\\n\\nSUMMARY AND QUESTIONS:\\n`;\\n\\nconst SUMMARY_PROMPT = PromptTemplate.fromTemplate(summaryTemplate);\\n\\nconst summaryRefineTemplate = `\\nYou are an expert in summarizing YouTube videos.\\nYour goal is to create a summary of a podcast.\\nWe have provided an existing summary up to a certain point: {existing_answer}\\n\\nBelow you find the transcript of a podcast:\\n--------\\n{text}\\n--------\\n\\nGiven the new context, refine the summary and example questions.\\nThe transcript of the podcast will also be used as the basis for a question and answer bot.\\nProvide some examples questions and answers that could be asked about the podcast. Make\\nthese questions very specific.\\nIf the context isn't useful, return the original summary and questions.\\nTotal output will be a summary of the video and a list of example questions the user could ask of the video.\\n\\nSUMMARY AND QUESTIONS:\\n`;\\n\\nconst SUMMARY_REFINE_PROMPT = PromptTemplate.fromTemplate(\\n  summaryRefineTemplate\\n);\\n\\nconst summarizeChain = loadSummarizationChain(llmSummary, {\\n  type: \\\"refine\\\",\\n  verbose: true,\\n  questionPrompt: SUMMARY_PROMPT,\\n  refinePrompt: SUMMARY_REFINE_PROMPT,\\n});\\n\\nconst summary = await summarizeChain.run(docsSummary);\\n\\nreturn [{json: { summary } } ];\"\n          }\n        },\n        \"inputs\": {\n          \"input\": [\n            {\n              \"type\": \"main\",\n              \"required\": true,\n              \"maxConnections\": 1\n            },\n            {\n              \"type\": \"ai_languageModel\",\n              \"required\": true,\n              \"maxConnections\": 1\n            }\n          ]\n        },\n        \"outputs\": {\n          \"output\": [\n            {\n              \"type\": \"main\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a36440c5-402e-44e6-819c-2a19dc9e3e1e\",\n      \"name\": \"Set YouTube video ID\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -600,\n        20\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"c2dc2944-a7c7-44c3-a805-27a55baa452a\",\n              \"name\": \"videoId\",\n              \"type\": \"string\",\n              \"value\": \"OsMVtuuwOXc\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"02386530-9aef-4732-9972-5624b78431a6\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        -340,\n        220\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"8gccIjcuf3gvaoEr\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"LangChain Code\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set YouTube video ID\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"LangChain Code\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking \\\"Execute Workflow\\\"\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set YouTube video ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}