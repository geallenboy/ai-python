{
  "title": "Youtube RAG search with Frontend using Apify, Qdrant and AI",
  "url": "https://n8n.io/workflows/3288-youtube-rag-search-with-frontend-using-apify-qdrant-and-ai/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/?count=20",
  "author": "Jimleuk",
  "publish_date": "Last update a month ago",
  "content": "",
  "workflow_json": "{\"meta\":{\"instanceId\":\"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\",\"templateCredsSetupCompleted\":true},\"nodes\":[{\"id\":\"c8221e91-9a9c-489e-a770-7c3cf2cb3328\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[-1100,-460],\"parameters\":{},\"typeVersion\":1},{\"id\":\"111eccd7-51e5-4b4a-9c30-a69f90397df7\",\"name\":\"Get Video Subtitles\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[540,-360],\"parameters\":{\"url\":\"https://api.apify.com/v2/acts/streamers~youtube-channel-scraper/run-sync-get-dataset-items\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"downloadSubtitles\\\": true,\\n  \\\"hasCC\\\": false,\\n  \\\"hasLocation\\\": false,\\n  \\\"hasSubtitles\\\": false,\\n  \\\"is360\\\": false,\\n  \\\"is3D\\\": false,\\n  \\\"is4K\\\": false,\\n  \\\"isBought\\\": false,\\n  \\\"isHD\\\": false,\\n  \\\"isHDR\\\": false,\\n  \\\"isLive\\\": false,\\n  \\\"isVR180\\\": false,\\n  \\\"maxResultStreams\\\": 0,\\n  \\\"maxResults\\\": 1,\\n  \\\"maxResultsShorts\\\": 0,\\n  \\\"preferAutoGeneratedSubtitles\\\": false,\\n  \\\"saveSubsToKVS\\\": false,\\n  \\\"startUrls\\\": [\\n    {\\n      \\\"url\\\": $json.url,\\n      \\\"method\\\": \\\"GET\\\"\\n    }\\n  ],\\n  \\\"subtitlesFormat\\\": \\\"vtt\\\",\\n  \\\"subtitlesLanguage\\\": \\\"en\\\"\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\"},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"SV9BDKc1cRbZBeoL\",\"name\":\"Apify.com (personal token)\"}},\"typeVersion\":4.2},{\"id\":\"6dcd5497-89cf-4591-ae79-bd12bbde6256\",\"name\":\"Chunk Subtitles\",\"type\":\"n8n-nodes-base.set\",\"position\":[740,-360],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"fa613ce2-3a2f-42e4-9add-88df00efdb85\",\"name\":\"vtt\",\"type\":\"array\",\"value\":\"={{\\nArray(\\n  Math.ceil($json.subtitles[0].vtt.length/30_000)\\n).fill(0)\\n  .map((_,idx) => $json.subtitles[0].vtt.substr(idx*30_000,(idx * 30_000) + 30_000))\\n}}\"}]}},\"typeVersion\":3.4},{\"id\":\"689fc39e-21d9-4222-9cda-858f21cacc97\",\"name\":\"Qdrant Vector Store\",\"type\":\"@n8n/n8n-nodes-langchain.vectorStoreQdrant\",\"position\":[1480,-520],\"parameters\":{\"mode\":\"insert\",\"options\":{},\"qdrantCollection\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"n8n_videos\",\"cachedResultName\":\"n8n_videos\"}},\"credentials\":{\"qdrantApi\":{\"id\":\"AhUP2CNvcQDRd5au\",\"name\":\"clients-dev\"}},\"typeVersion\":1},{\"id\":\"ee57ffe2-e3f8-409a-a87a-b69902494598\",\"name\":\"Default Data Loader\",\"type\":\"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\",\"position\":[1580,-360],\"parameters\":{\"options\":{\"metadata\":{\"metadataValues\":[{\"name\":\"videoId\",\"value\":\"={{ $('Video Ref').item.json.id }}\"},{\"name\":\"title\",\"value\":\"={{ $('Video Ref').item.json.title }}\"},{\"name\":\"channelId\",\"value\":\"={{ $('Video Ref').item.json.channelId }}\"},{\"name\":\"url\",\"value\":\"={{ $('Video Ref').item.json.url }}\"},{\"name\":\"type\",\"value\":\"={{ $('Video Ref').item.json.type }}\"}]}},\"jsonData\":\"={{ $json.vtt.replaceAll('\\\\n\\\\n', '\\\\n') }}\",\"jsonMode\":\"expressionData\"},\"typeVersion\":1},{\"id\":\"4ce56ce3-73fc-4ba3-abbf-0401d44ce748\",\"name\":\"Embeddings\",\"type\":\"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\"position\":[1460,-360],\"parameters\":{\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"8gccIjcuf3gvaoEr\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.2},{\"id\":\"a910822d-073f-42a6-8f6d-5c04dc59fba2\",\"name\":\"Text Splitter\",\"type\":\"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter\",\"position\":[1660,-240],\"parameters\":{\"options\":{},\"chunkSize\":3000},\"typeVersion\":1},{\"id\":\"0361055c-8fc2-488a-9c43-8e0492648756\",\"name\":\"For Each Video\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[-400,-360],\"parameters\":{\"options\":{}},\"typeVersion\":3},{\"id\":\"77243da4-38cb-430b-b8f3-2698ec6dd022\",\"name\":\"Video Ref\",\"type\":\"n8n-nodes-base.noOp\",\"position\":[340,-360],\"parameters\":{},\"typeVersion\":1},{\"id\":\"fe63938a-8c17-4191-8fdc-cd044f5de080\",\"name\":\"For Each Chunk\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[1240,-400],\"parameters\":{\"options\":{}},\"typeVersion\":3},{\"id\":\"4bbbc54a-30b6-4395-bb06-0145dde9abd9\",\"name\":\"Wait\",\"type\":\"n8n-nodes-base.wait\",\"position\":[1920,-400],\"webhookId\":\"45ae600a-d26f-444b-bbe0-792c5602fe8d\",\"parameters\":{\"amount\":1},\"executeOnce\":true,\"typeVersion\":1.1},{\"id\":\"6f581ad9-abc5-4ef7-b2ce-1267ba67999d\",\"name\":\"Clean Up Output\",\"type\":\"n8n-nodes-base.set\",\"position\":[2100,160],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"e9a68e02-1559-4ce5-b338-5259f1030d25\",\"name\":\"title\",\"type\":\"string\",\"value\":\"={{ $json.title }}\"},{\"id\":\"3fb553d6-79a1-41f2-8b72-581d667adcea\",\"name\":\"url\",\"type\":\"string\",\"value\":\"=https://www.youtube.com/watch?v={{ $json.videoId }}\"},{\"id\":\"9f435790-5b84-4a23-ac39-561c87d0eea1\",\"name\":\"extract\",\"type\":\"string\",\"value\":\"={{ $json.extract.replaceAll('\\\\n', ' ') }}\"},{\"id\":\"f3d63c6e-d5c9-40b6-a9a7-ebfe7c6c9a41\",\"name\":\"timestamp\",\"type\":\"string\",\"value\":\"={{\\n(function(str){\\n  return str.length === 3\\n  ? str[1] + ':' + str[2]\\n  : str.join(':');\\n})($json.timestamp.split(':'))\\n}}\"},{\"id\":\"f937c492-ddbe-40fe-8e12-a21c21832e4a\",\"name\":\"videoId\",\"type\":\"string\",\"value\":\"={{ $json.videoId }}\"},{\"id\":\"2245a7b6-cf9e-4c39-875b-5bf80b1353bc\",\"name\":\"video_ts\",\"type\":\"string\",\"value\":\"={{\\n(function(timestamp){\\n  const buffer = 5;\\n  let [hr,min,sec] = timestamp.map(x => Number(x));\\n  if (sec === undefined){ sec = min; min = hr; hr = 0 }\\n  return Math.max((hr * 60 * 60) + (min * 60) + sec - buffer, 0);\\n})($json.timestamp.split(':'))\\n}}\"}]}},\"typeVersion\":3.4},{\"id\":\"27c19284-1ce6-4756-b385-6433096d4b84\",\"name\":\"Sort By Video ID\",\"type\":\"n8n-nodes-base.sort\",\"position\":[2280,160],\"parameters\":{\"options\":{},\"sortFieldsUi\":{\"sortField\":[{\"fieldName\":\"videoId\"}]}},\"typeVersion\":1},{\"id\":\"dc70ab23-8fb0-4f7f-9833-5d6b01407b69\",\"name\":\"Respond to Webhook\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"position\":[3620,220],\"parameters\":{\"options\":{\"responseCode\":200,\"responseHeaders\":{\"entries\":[{\"name\":\"Content-Type\",\"value\":\"text/html\"}]}},\"respondWith\":\"text\",\"responseBody\":\"=<div id=\\\"answer\\\">\\n  <div id=\\\"answer-legend\\\">AI Summary</div>\\n  {{ $json.text }}\\n</div>\\n{{ $json.results }}\"},\"executeOnce\":false,\"typeVersion\":1.1},{\"id\":\"1c4eac3a-1412-4e24-85fd-359aa065e3db\",\"name\":\"Extract Results\",\"type\":\"@n8n/n8n-nodes-langchain.informationExtractor\",\"position\":[1080,300],\"parameters\":{\"text\":\"=<transcripts>\\n{{ $json.hits\\n  .map(item => `<transcript>${item.toJsonString()}</transcript>`).join('\\\\n')\\n}}\\n</transcripts>\\n<user_query>\\n{{ $('Get Query').first().json.query }}\\n</user_query>\",\"options\":{\"systemPromptTemplate\":\"=Your task is to analyse the collection of video transcripts and extract the parts relevant to the user's query.\\n* When returning your response, provide from 3 and up to 10 results as extracts of the transcript combined with their timestamps (MM:SS) and include the video title and url.\\n* When getting the extract for the results, as this will be read by the user, return only the text of the transcript and remove any vtt tags, annotations, markers.\\n* Refer to the metadata for video title and video url.\"},\"schemaType\":\"manual\",\"inputSchema\":\"{\\n  \\\"type\\\": \\\"array\\\",\\n  \\\"items\\\": {\\n    \\\"type\\\":\\\"object\\\",\\n    \\\"required\\\": [\\n      \\\"title\\\",\\\"url\\\",\\\"extract\\\",\\\"timestamp\\\",\\\"videoId\\\"\\n    ],\\n    \\\"properties\\\": {\\n      \\\"title\\\": { \\\"type\\\": \\\"string\\\" },\\n       \\\"extract\\\": {\\n         \\\"type\\\": \\\"string\\\",\\n         \\\"description\\\": \\\"extract and transcribe the relevant parts of the transcript removing vtt annotations and markers.\\\"\\n       },\\n       \\\"timestamp\\\": { \\\"type\\\": \\\"string\\\" },\\n       \\\"videoId\\\": { \\\"type\\\": \\\"string\\\" }\\n    }\\n  }\\n}\"},\"executeOnce\":false,\"typeVersion\":1},{\"id\":\"cc2d88f7-065d-489a-bfc4-cbc13268b59a\",\"name\":\"SEARCH API\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[-1100,360],\"webhookId\":\"e2768373-66ad-4ad2-948f-c5e278d39595\",\"parameters\":{\"path\":\"n8n_videos/api/search\",\"options\":{\"ignoreBots\":false},\"responseMode\":\"responseNode\"},\"typeVersion\":2},{\"id\":\"ae2fb16b-2a31-4616-a2b9-6cd634b64647\",\"name\":\"Get Query\",\"type\":\"n8n-nodes-base.set\",\"position\":[-360,240],\"parameters\":{\"mode\":\"raw\",\"options\":{},\"jsonOutput\":\"={{\\n{\\n  query: ((($('SEARCH API').first().json.query?.q\\n      .removeTags())\\n      .removeTags())\\n      .replaceSpecialChars()).substr(0,128),\\n  type: ['video', 'stream'].includes($('SEARCH API').first().json.query.type)\\n    ? $('SEARCH API').first().json.query.type\\n    : undefined\\n}\\n}}\"},\"typeVersion\":3.4},{\"id\":\"6d14cd25-f65a-4162-bcfc-cc2e7e547c23\",\"name\":\"Generate Template\",\"type\":\"n8n-nodes-base.set\",\"position\":[2460,160],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"3e4daf29-906b-4469-b107-6cbc142dab44\",\"name\":\"results\",\"type\":\"string\",\"value\":\"={{\\n(function(items) {\\n  const groupByVideoId = items.reduce((acc, item) => {\\n    if (!acc[item.videoId]) acc[item.videoId] = [];\\n    acc[item.videoId].push(item);\\n    return acc;\\n  }, {});\\n  \\n  const results = Object.keys(groupByVideoId).map(key => {\\n    const parts = groupByVideoId[key]\\n      .toSorted((a,b) => Number(a.video_ts) - Number(b.video_ts));\\n    const {title,url} = parts[0];\\n    return `<li video-id=\\\"${key}\\\">\\n      <div class=\\\"resultSource\\\">\\n        <a\\n          href=\\\"${url}\\\"\\n          target=\\\"_blank\\\"\\n          hx-on:click=\\\"loadVideo('${key}',0); event.preventDefault()\\\"\\n        >\\n          <div class=\\\"resultSourceTitle\\\">${title}</div>\\n          <div class=\\\"resultSourceUrl\\\">${url}</div>\\n        </a>\\n      </div>\\n      ${parts.map(item => `\\n        <div class=\\\"resultContent\\\">\\n          <a\\n            class=\\\"resultTimestamp\\\"\\n            href=\\\"${item.url}&t=${item.video_ts}\\n            \\\"target=\\\"_blank\\\"\\n            hx-on:click=\\\"loadVideo('${item.videoId}',${item.video_ts}); event.preventDefault()\\\"\\n          >\\n            [${item.timestamp}]\\n            <span>...${item.extract}...</span>\\n          </a>\\n        </div>`).join('\\\\n')}\\n    </li>`\\n  }).join('\\\\n')\\n\\n  return `<div id=\\\"resultsCount\\\">${Object.keys(groupByVideoId).length} Video Result${Object.keys(groupByVideoId).length === 1 ? '' : 's'}</div>${results}`;\\n})(\\n  $input.all().map(item => item.json).filter(item => item.videoId)\\n)\\n}}\"}]}},\"executeOnce\":true,\"typeVersion\":3.4},{\"id\":\"ccf2744d-3678-40b8-b7a1-2fda1d820dd0\",\"name\":\"Answer Query\",\"type\":\"@n8n/n8n-nodes-langchain.chainLlm\",\"position\":[2760,180],\"parameters\":{\"text\":\"=<results>{{ $json.results }}</results>\\n<user_query>\\n{{ $('Get Query').first().json.query }}\\n</user_query>\",\"messages\":{\"messageValues\":[{\"message\":\"=Using the available results, generate a 1 or 2 sentence answer for the user's query. You may format your answer using markdown.\"}]},\"promptType\":\"define\"},\"executeOnce\":true,\"typeVersion\":1.5},{\"id\":\"5c9a1091-1c68-4b83-a002-638236044599\",\"name\":\"Has Results?\",\"type\":\"n8n-nodes-base.if\",\"position\":[1720,260],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"81f8ec3e-be33-469c-8bf5-c3d3575e3764\",\"operator\":{\"type\":\"object\",\"operation\":\"notEmpty\",\"singleValue\":true},\"leftValue\":\"={{ $json }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"97e6fdf0-db16-4957-bc4f-ce96a8ccc944\",\"name\":\"Generate Empty Response\",\"type\":\"n8n-nodes-base.set\",\"position\":[1920,360],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"7c4bd999-49b1-4532-89ca-c53e98da6b17\",\"name\":\"text\",\"type\":\"string\",\"value\":\"={{ '' }}\"},{\"id\":\"916221de-2ec9-4fd9-8029-d7a3de88f395\",\"name\":\"results\",\"type\":\"string\",\"value\":\"=<div id=\\\"resultsCount\\\">0 Video Results</div>\"}]}},\"typeVersion\":3.4},{\"id\":\"160933f5-ae39-407d-9124-f24d193f1153\",\"name\":\"Map Fields\",\"type\":\"n8n-nodes-base.set\",\"position\":[3400,220],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"36bb30ce-6baf-492a-ad8c-4bec175e85a0\",\"name\":\"text\",\"type\":\"string\",\"value\":\"={{ $json.data }}\"},{\"id\":\"60fb3d9d-0342-41c2-80bb-1899773f4bd7\",\"name\":\"results\",\"type\":\"string\",\"value\":\"={{ $('Generate Template').first().json.results }}\"}]}},\"typeVersion\":3.4},{\"id\":\"ac4881ee-e200-48b9-8339-0a21647cc1c4\",\"name\":\"Incr Rate Limit\",\"type\":\"n8n-nodes-base.redis\",\"position\":[-900,360],\"parameters\":{\"key\":\"=n8n_videos_session_{{ $json.headers['x-forwarded-for'] }}\",\"expire\":true,\"operation\":\"incr\"},\"credentials\":{\"redis\":{\"id\":\"zU4DA70qSDrZM1El\",\"name\":\"Redis account (localhost)\"}},\"typeVersion\":1},{\"id\":\"5aa5880a-d9c4-4263-877c-b7c8b3f36916\",\"name\":\"10req/min\",\"type\":\"n8n-nodes-base.if\",\"position\":[-720,360],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"032093e1-b223-45f4-b1bc-5603134acfe8\",\"operator\":{\"type\":\"number\",\"operation\":\"lt\"},\"leftValue\":\"={{ Object.values($json)[0] }}\",\"rightValue\":11}]}},\"typeVersion\":2.2},{\"id\":\"7eb4a8e8-ba35-4a55-98cc-f85395a90604\",\"name\":\"Vectorise Subworkflow\",\"type\":\"n8n-nodes-base.executeWorkflow\",\"position\":[-180,-360],\"parameters\":{\"mode\":\"each\",\"options\":{\"waitForSubWorkflow\":true},\"workflowId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $workflow.id }}\"},\"workflowInputs\":{\"value\":{},\"schema\":[],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[],\"attemptToConvertTypes\":false,\"convertFieldsToString\":true}},\"typeVersion\":1.2},{\"id\":\"dd76b922-8522-4d5b-a49b-e3e4cdca333f\",\"name\":\"Vectorise Subworkflow1\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[140,-360],\"parameters\":{\"inputSource\":\"passthrough\"},\"typeVersion\":1.1},{\"id\":\"7b7c5773-9eac-4356-8d66-793dd9bcc008\",\"name\":\"WEB UI\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[-1120,920],\"webhookId\":\"8b531d97-c5d7-4a98-8ef0-f19e59cf886f\",\"parameters\":{\"path\":\"n8n_videos/\",\"options\":{\"ignoreBots\":true},\"responseMode\":\"responseNode\"},\"typeVersion\":2},{\"id\":\"32a0fb68-1b6f-4d65-8591-f370d0307eb4\",\"name\":\"Qdrant Groups Search\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[0,240],\"parameters\":{\"url\":\"=http://qdrant:6333/collections/n8n_videos/points/search/groups\",\"method\":\"POST\",\"options\":{},\"sendBody\":true,\"authentication\":\"predefinedCredentialType\",\"bodyParameters\":{\"parameters\":[{\"name\":\"limit\",\"value\":\"={{ 4 }}\"},{\"name\":\"filter\",\"value\":\"={{\\n$('Get Query').first().json.type\\n  ? {\\n    \\\"must\\\": [\\n      {\\n        \\\"key\\\": \\\"metadata.type\\\",\\n        \\\"match\\\": {\\n          \\\"any\\\": [].concat($('Get Query').first().json.type)\\n        }\\n      }\\n    ]\\n  }\\n  : undefined\\n}}\"},{\"name\":\"with_payload\",\"value\":\"={{ true }}\"},{\"name\":\"group_by\",\"value\":\"metadata.videoId\"},{\"name\":\"group_size\",\"value\":\"={{ 3 }}\"},{\"name\":\"vector\",\"value\":\"={{ $json.data[0].embedding }}\"}]},\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"AhUP2CNvcQDRd5au\",\"name\":\"clients-dev\"}},\"typeVersion\":4.2},{\"id\":\"0ddf6e63-d0db-499d-873c-ea7d82bf1ef6\",\"name\":\"Get Embeddings\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-180,240],\"parameters\":{\"url\":\"https://api.openai.com/v1/embeddings\",\"method\":\"POST\",\"options\":{},\"sendBody\":true,\"authentication\":\"predefinedCredentialType\",\"bodyParameters\":{\"parameters\":[{\"name\":\"input\",\"value\":\"={{ $json.query }}\"},{\"name\":\"model\",\"value\":\"text-embedding-3-small\"}]},\"nodeCredentialType\":\"openAiApi\"},\"credentials\":{\"openAiApi\":{\"id\":\"8gccIjcuf3gvaoEr\",\"name\":\"OpenAi account\"}},\"typeVersion\":4.2},{\"id\":\"a2fc2329-79be-49ac-923a-63affdefe464\",\"name\":\"For Each Group\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[740,220],\"parameters\":{\"options\":{}},\"typeVersion\":3},{\"id\":\"ed300a5f-7eca-4f15-bcc3-7855afed0a9e\",\"name\":\"Group Ref\",\"type\":\"n8n-nodes-base.noOp\",\"position\":[900,300],\"parameters\":{},\"typeVersion\":1},{\"id\":\"4e3b33f6-6274-43f1-8206-adeac3220113\",\"name\":\"Combine Results\",\"type\":\"n8n-nodes-base.set\",\"position\":[1540,260],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"f797071b-f722-4273-a672-932370123fc0\",\"name\":\"output\",\"type\":\"array\",\"value\":\"={{ $input.all().flatMap(item => item.json.output) }}\"}]}},\"executeOnce\":true,\"typeVersion\":3.4},{\"id\":\"da36d896-3187-40f6-82a5-953ae0fde867\",\"name\":\"Transcripts to Items\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[1920,160],\"parameters\":{\"options\":{},\"fieldToSplitOut\":\"output\"},\"typeVersion\":1},{\"id\":\"e297fd2c-a551-4efe-8240-26522de4cec3\",\"name\":\"Respond to Webhook2\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"position\":[-180,460],\"parameters\":{\"options\":{\"responseCode\":200},\"respondWith\":\"text\",\"responseBody\":\"=<div id=\\\"answer\\\">{{ $json.text }}</div>\\n{{ $json.results }}\"},\"executeOnce\":false,\"typeVersion\":1.1},{\"id\":\"1cc6136e-b60d-4dc3-aeb7-30efb09b24f1\",\"name\":\"Respond to Webhook3\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"position\":[2100,360],\"parameters\":{\"options\":{\"responseCode\":200},\"respondWith\":\"text\",\"responseBody\":\"=<div id=\\\"answer\\\">{{ $json.text }}</div>\\n{{ $json.results }}\"},\"executeOnce\":false,\"typeVersion\":1.1},{\"id\":\"143115aa-5754-4e43-9bda-332b38cce4ae\",\"name\":\"Schedule Trigger\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[-1100,-280],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"weeks\",\"triggerAtDay\":[6],\"triggerAtHour\":6}]}},\"typeVersion\":1.2},{\"id\":\"154adf7a-8390-425c-b96c-641c02c92072\",\"name\":\"Ignore Already Seen\",\"type\":\"n8n-nodes-base.removeDuplicates\",\"position\":[-620,-360],\"parameters\":{\"options\":{},\"operation\":\"removeItemsSeenInPreviousExecutions\",\"dedupeValue\":\"={{ $json.id }}\"},\"typeVersion\":2},{\"id\":\"c488a718-8c27-4d52-a891-bb875c7b8615\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1180,-640],\"parameters\":{\"color\":7,\"width\":1200,\"height\":560,\"content\":\"## 1. Fetch Latest Videos with [Apify.com](https://www.apify.com?fpr=414q6)\\n[Learn more about Apify.com](https://www.apify.com?fpr=414q6) - [Youtube Scraper](https://apify.com/streamers/youtube-scraper?fpr=414q6)\\n\\nIf you want to save serious time and effort and avoid the low usage limits of the official Youtube API, then you probably want to sign-up for a third-party youtube scraper like the ones found on Apify. Here, I'm using a Youtube Scraper to get the latest videos and livestream recordings from the official n8n channel. Running them through a \\\"remove duplicates\\\" node ensures they aren't processed more than once.\"},\"typeVersion\":1},{\"id\":\"09fc0bc7-1efc-495f-b57b-3d62edbe09a6\",\"name\":\"Get Latest Youtube Videos\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-820,-360],\"parameters\":{\"url\":\"https://api.apify.com/v2/acts/streamers~youtube-channel-scraper/run-sync-get-dataset-items\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"maxResultStreams\\\": 10,\\n  \\\"maxResults\\\": 10,\\n  \\\"maxResultsShorts\\\": 0,\\n  \\\"oldestPostDate\\\": \\\"2025-01-01\\\",\\n  \\\"startUrls\\\": [\\n    {\\n      \\\"url\\\": \\\"https://www.youtube.com/@n8n-io\\\",\\n      \\\"method\\\": \\\"GET\\\"\\n    }\\n  ]\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\"},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"SV9BDKc1cRbZBeoL\",\"name\":\"Apify.com (personal token)\"}},\"typeVersion\":4.2},{\"id\":\"06384b2c-c30f-457e-94d8-976b187ff633\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[60,-640],\"parameters\":{\"color\":7,\"width\":860,\"height\":560,\"content\":\"## 2. Get Video Transcript with [Apify.com](https://www.apify.com?fpr=414q6)\\n[Learn more about subworkflows](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflowtrigger)\\n\\n**Note: You won't see this run in editor mode! It runs in the background - see executions tab!**\\nI've chosen to use a subworkflow to help with performance as processing transcripts into embeddings tends to accumulate a lot of data client side if done otherwise. Here, we're once again using a Youtube scraper on Apify to download the video transcripts - note that technically, these are auto-generated subtitles but are good enough to serve our needs.\"},\"typeVersion\":1},{\"id\":\"7a22fa36-955a-4586-8022-bcaa07950621\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[940,-740],\"parameters\":{\"color\":7,\"width\":1200,\"height\":660,\"content\":\"## 3. Populate Qdrant Vector Store to Build a Search Index\\n[Learn more about Qdrant Vector Store](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreqdrant)\\n\\nUsing Qdrant is a usually my personal preference but for this template, I saw a great use-case for its advanced search APIs which we'll get to later.\\nDue to the size of the transcripts, we're forced to break them down into smaller chunks to populate our vector store. Note the metadata will be super important for later filtering so best practice, always spend some time to design how you will use your metadata upfront!\"},\"typeVersion\":1},{\"id\":\"063c6f34-0972-4c2e-a3db-d3e3158015b7\",\"name\":\"Chunks to Items\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[1020,-400],\"parameters\":{\"options\":{},\"fieldToSplitOut\":\"vtt\"},\"typeVersion\":1},{\"id\":\"a088b16e-d518-4746-9f03-6ab0a2a46fc0\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1180,80],\"parameters\":{\"color\":7,\"width\":680,\"height\":520,\"content\":\"## 4. Search API with Rate Limiting\\n[Learn more about Redis](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.redis)\\n\\nWebhooks are a great feature to build simple APIs with n8n. This particular webhook will serve as your search API which takes user queries as input, searches our vector store of n8n videos and returns a list of matching results as output. A Redis counter can be used as a simple rate limiter to manage resources through feel free to remove if you're publishing the webUI to the public. \"},\"typeVersion\":1},{\"id\":\"3a9d011d-fa8f-4dc0-8e7b-d7e9990f9485\",\"name\":\"429 Response\",\"type\":\"n8n-nodes-base.set\",\"position\":[-360,460],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"7c4bd999-49b1-4532-89ca-c53e98da6b17\",\"name\":\"text\",\"type\":\"string\",\"value\":\"={{ '' }}\"},{\"id\":\"916221de-2ec9-4fd9-8029-d7a3de88f395\",\"name\":\"results\",\"type\":\"string\",\"value\":\"=<div id=\\\"resultsCount\\\">Search Limit Reached!</div>\\n<div>\\nSearch requests are limited to 3 per minute.\\n<br/>Need more? Download the free template and run it yourself!\\n</div>\"}]}},\"typeVersion\":3.4},{\"id\":\"c4263da3-bc5f-470b-8ace-b03a88b650af\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-480,-20],\"parameters\":{\"color\":7,\"width\":1080,\"height\":680,\"content\":\"## 5. Qdrant Advanced Search - Point Groups\\n[Learn more about Qdrant's Search Groups API](https://qdrant.tech/documentation/concepts/search/#search-groups)\\n\\nOur goal is to return videos and timestamps within them which are relevant to our user's query. We could using simple similarity search but the problem is your results might be too in-depth on the first and second videos. If we want to increase the breadth ie. cover more videos, then we can use something like Qdrant's Search Group API. This search API uses metadata to group results allowing you to specify a max results limit per video. Unfortunately, as this API is not supported by n8n, we'll have to use the HTTP request node - **Be sure to configure the node's credentials before use!**\"},\"typeVersion\":1},{\"id\":\"5c655b2c-1986-499b-b89d-563e2f755986\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[640,-20],\"parameters\":{\"color\":7,\"width\":800,\"height\":640,\"content\":\"## 6. Contextually Understanding Transcripts with AI\\n[Read more about the Information Extractor](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor)\\n\\nOne of the great use-cases for AI/LLM data extraction is that it can save a lot of parsing effort traditional done via code. Here, we provide the raw transcript blocks and the AI will help us pick out only the relevant parts with timestamps which answer our user's query.\"},\"typeVersion\":1},{\"id\":\"f825ab4a-b88d-46af-b2f2-271c6b22665c\",\"name\":\"Sticky Note6\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1460,-20],\"parameters\":{\"color\":7,\"width\":1180,\"height\":620,\"content\":\"## 7. Generate Results HTML Template\\n[Learn more about the Edit Fields node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set)\\n\\nOnce we have our extracted transcript parts, we just need to re-group the results and build the results list HTML to be rendered back to the user.\\nI'm using the excellent **htmx** (htmx.org) framework for the Web UI which is perfect for single page applications. The results HTML template generated is heavily influenced by this so it may look strange if you're unfamiliar. Feel free to use whatever is comfortable!\"},\"typeVersion\":1},{\"id\":\"1ed3a232-6c03-4cef-806b-7030615b1e98\",\"name\":\"Sticky Note7\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2660,-20],\"parameters\":{\"color\":7,\"width\":600,\"height\":560,\"content\":\"## 8. Summarise Results to Generate Answer\\n[Read more about the Basic LLM node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\\n\\nThis is a nice extra bit of UX to try and answer the user's query based on the search results. A basic LLM node is perfect for this simple prompt.\"},\"typeVersion\":1},{\"id\":\"4d5b1466-8bb8-42e7-9cee-275aa4c905df\",\"name\":\"Sticky Note8\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[3280,-20],\"parameters\":{\"color\":7,\"width\":600,\"height\":560,\"content\":\"## 9. Return Answer & Search Results\\n[Learn more about the webhook node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.respondtowebhook/)\\n\\nFinally, we combine the AI answer and results list as a HTML response for the Web UI.\\nPhew, that was a lot to get through! Beyond this template, you can play with different search parameters or approaches to reduce latency, include other content types etc.\"},\"typeVersion\":1},{\"id\":\"07edb5ea-a4ad-4b06-91f2-9bdc2d5150a4\",\"name\":\"Sticky Note9\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1180,700],\"parameters\":{\"color\":7,\"width\":840,\"height\":480,\"content\":\"## 10. N8N Video Search Frontend using Web UI\\n[Learn more about the HTML node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html/)\\n\\nBuilding and deploying simple webpages using n8n is quite easy and great if you don't want to worry too much about the technical details. Once the n8n template is set to active, you can visit [https://<n8n_url>/webhook/n8n_video](/webhook/n8n_video) to use it.\"},\"typeVersion\":1},{\"id\":\"8a9593fc-5a7a-4da9-b7d4-a128c0d36e8e\",\"name\":\"Render Page\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"position\":[-760,920],\"parameters\":{\"options\":{\"responseCode\":200,\"responseHeaders\":{\"entries\":[{\"name\":\"Content-Type\",\"value\":\"text/html\"}]}},\"respondWith\":\"text\",\"responseBody\":\"={{ $json.html }}\"},\"typeVersion\":1.1},{\"id\":\"8fbdd941-fba7-4f89-b216-489a6e80cef9\",\"name\":\"Generate Webpage\",\"type\":\"n8n-nodes-base.html\",\"position\":[-940,920],\"parameters\":{\"html\":\"<!DOCTYPE html>\\n\\n<html>\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <title>N8N Videos Search</title>\\n  <link rel=\\\"stylesheet\\\" href=\\\"https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/pure-min.css\\\" integrity=\\\"sha384-X38yfunGUhNzHpBaEBsWLO+A0HDYOQi8ufWDkZ0k9e0eXz/tH3II7uKZ9msv++Ls\\\" crossorigin=\\\"anonymous\\\">\\n  <link rel=\\\"stylesheet\\\" href=\\\"https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/grids-responsive-min.css\\\" />\\n  <script src=\\\"https://unpkg.com/htmx.org@2.0.4\\\" integrity=\\\"sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+\\\" crossorigin=\\\"anonymous\\\"></script>\\n  <style>\\n    body { font-family: sans-serif;}\\n    .header { padding: 1rem 2rem; }\\n    .title { color:#000; text-decoration:none}\\n    .title-main { display:block; font-weight: 700; }\\n    .title-sub { font-size: 0.9rem; }\\n    .container { max-width: 1280px; @media screen and (min-width: 80em) { margin-left: 10rem; } }\\n    \\n    #search-panel { padding: 0 2rem 1rem; }\\n    \\n    #results-panel { padding: 0 4rem 4rem 2rem; }\\n    #results { margin: 0; padding: 0; }\\n    #results li { padding: 1rem 0 0 0; margin-left: 1rem; }\\n    .resultSource { display:inline-block; margin-bottom:0.5rem; a { text-decoration: none } }\\n    .resultSourceTitle { font-size: 0.8rem; font-weight: 700; color: #000}\\n    .resultSourceUrl { font-size: 0.8rem;}\\n    .resultContent { font-size: 0.9rem; margin-bottom:0.5rem; a { text-decoration: none; span { color: #000; } &:hover { text-decoration: underline;} } }\\n    #resultsCount { font-weight: 700;padding: 1rem 0;}\\n    #answer-legend {font-size: 0.8rem; font-weight: 700;color: blue;margin-bottom: 0.5rem;}\\n    #answer { margin-bottom: 1rem; border-left: 5px solid blue; padding-left: 1rem;  p { margin:0}}\\n    \\n    #video-panel { position:sticky;top:0; padding: 0 0 2rem; }\\n    \\n    #about-panel { padding: 1rem 0 0; border-top:1px solid #eee; h2 {font-size:1rem;;margin-bottom:1rem; } p {font-size: 0.8rem;margin-bottom:1rem;} }\\n    #about-services { font-size: 0.8rem;margin: 0;padding-left: 1rem;margin-bottom: 1rem; li { margin-bottom: 0.5rem;} }\\n  </style>\\n</head>\\n<body>\\n  <div class=\\\"container\\\">\\n      <div class=\\\"header\\\">\\n        <div class=\\\"home-menu pure-menu pure-menu-horizontal\\\">\\n          <a class=\\\"title\\\" href=\\\"/webhook/n8n_videos\\\">\\n            <span class=\\\"title-main\\\">Search the Official N8N Youtube Channel</span>\\n            <span class=\\\"title-sub\\\">Cover a wide range of videos in seconds!</span>\\n          </a>\\n        </div>\\n      </div>\\n    \\n      <div class=\\\"pure-g\\\">\\n        <div class=\\\"pure-u-1-2 pure-u-lg-3-5\\\">\\n          <div id=\\\"search-panel\\\">\\n            <form\\n              id=\\\"search-form\\\"\\n              class=\\\"pure-form\\\"\\n              hx-get=\\\"/webhook/n8n_videos/api/search\\\"\\n              hx-target=\\\"#results\\\"\\n            >\\n              <fieldset>\\n                <input\\n                  type=\\\"text\\\"\\n                  name=\\\"q\\\"\\n                  placeholder=\\\"Eg. When is the next n8n meetup?\\\"\\n                  class=\\\"pure-input-1-2\\\"\\n                  required\\n                />\\n                <select name=\\\"type\\\">\\n                  <option value=\\\"all\\\">All</option>\\n                  <option value=\\\"video\\\">Videos</option>\\n                  <option value=\\\"stream\\\">LiveStreams</option>\\n                </select>\\n                <button\\n                  type=\\\"submit\\\"\\n                  class=\\\"pure-button pure-button-primary\\\"\\n                  style=\\\"width:100px\\\"\\n                >\\n                  Search\\n                </button>\\n              </fieldset>\\n            </form>\\n          </div>\\n          <div id=\\\"results-panel\\\">\\n            <ul id=\\\"results\\\"></ul>\\n          </div>\\n        </div>\\n        <div class=\\\"pure-u-1-2 pure-u-lg-2-5\\\">\\n          <div id=\\\"video-panel\\\">\\n            <div\\n              id=\\\"ytplayer\\\"\\n              style=\\\"display:flex;align-items:center;justify-content:center;width:100%;height:320px;background-color:#eee;color:#999;font-size:0.9rem\\\"\\n            >\\n              <div>Video will show here.</div>\\n            </div>\\n          </div>\\n          <div id=\\\"about-panel\\\">\\n            <h2>About N8N Video Search</h2>\\n            <img\\n              class=\\\"logo\\\"\\n              src=\\\"https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/dscioipkxomw8gnj3h2v\\\"\\n              width=\\\"70%\\\"\\n            />\\n            <p>\\n              This demo has the ability to search recent video and livestream recordings from the official n8n.io Youtube channel.\\n              The results are picked out of the transcripts allowing users to jump to the exact timestamp relevant to their query.\\n              This application was built with the following services:\\n            </p>\\n            <ul id=\\\"about-services\\\">\\n              <li>\\n                <a href=\\\"https://www.apify.com?fpr=414q6\\\">Apify.com</a> - \\n                Searches for \\\"n8n @ scale\\\" Youtube livestream recordings and downloads the transcripts. \\n                Use my code <strong>\\\"20JIMLEUK\\\"</strong> at checkout for 20% OFF an Apify subscription (*expires May 2025).\\n              </li>\\n              <li>\\n                <a href=\\\"https://qdrant.tech\\\">Qdrant.tech</a> - \\n                Video transcripts are chunked and vectorised into a Qdrant Vector Store. Qdrant is super fast and have a robust search and filtering capabilities.\\n              </li>\\n              <li>\\n                <a href=\\\"https://n8n.partnerlinks.io/ee7izbliiw0n\\\">n8n.io</a> - \\n                n8n serves as our automation platform, backend API and frontend Interface for this demo! Really easy to put together quick AI projects like this one.\\n                <a href=\\\"https://n8n.io/creators/jimleuk/\\\">Also be sure to checkout my other free n8n x AI templates here!</a>\\n              </li>\\n            </ul>\\n            <p>\\n              <strong>Questions or Comments?</strong> Check out my forum post here!\\n            </p>\\n            <p>\\n              {{ $now.format('yyyy') }} &copy; Jim Le. \\n              If you've enjoyed this demo, connect and follow me on \\n              <a href=\\\"https://linkedin.com/in/jimleuk\\\">linkedin.com/in/jimleuk</a> and \\n              <a href=\\\"https://x.com/jimle_uk\\\">x.com/jimle_uk</a>.\\n            </p>\\n          </div>\\n        </div>\\n    </div>\\n  </div>\\n  \\n  <script>\\n    const form = document.getElementById('search-form');\\n    const button = form.querySelector('button[type=submit]');\\n\\n    document.body.addEventListener('htmx:beforeRequest', function(evt) {\\n      form.disabled = true;\\n      button.innerHTML = `<img\\n        width=\\\"16px\\\"\\n        height=\\\"16px\\\"\\n        src=\\\"https://samherbert.net/svg-loaders/svg-loaders/oval.svg\\\"\\n      />`;\\n      button.disabled = true;\\n    });\\n  \\n    document.body.addEventListener('htmx:afterRequest', function(evt) {\\n      form.disabled = false;\\n      button.innerHTML = 'Search';\\n      button.disabled = false;\\n    });\\n  </script>\\n  <script>\\n    let player;\\n\\n    function loadVideo(id,ts) {\\n      if (!player) {\\n        player = new YT.Player('ytplayer', {\\n          height: '390',\\n          width: '640',\\n          videoId: id,\\n          playerVars: {\\n            'playsinline': 1,\\n            'origin': window.location.origin,\\n            'start': ts\\n          },\\n          events: {\\n            'onReady': (event) => { event.target.playVideo(); },\\n            'onError': (event) => { console.error('onError', event) }\\n          }\\n        });\\n        return;\\n      }\\n      \\n      if (player && player.loadVideoById) {\\n        player.loadVideoById(id, ts);\\n      }\\n    }\\n\\n    // Load the YouTube API asynchronously\\n    const tag = document.createElement('script');\\n    tag.src = \\\"https://www.youtube.com/iframe_api\\\";\\n    document.body.appendChild(tag);\\n  \\n    // Create the player when API is ready\\n    function onYouTubeIframeAPIReady() {\\n      console.log('Youtube Player Ready!');\\n    }\\n  </script>\\n</body>\\n</html>\"},\"typeVersion\":1.2},{\"id\":\"054feb14-d740-4d05-9ef5-d5c584e07eb6\",\"name\":\"Markdown\",\"type\":\"n8n-nodes-base.markdown\",\"position\":[3080,180],\"parameters\":{\"mode\":\"markdownToHtml\",\"options\":{},\"markdown\":\"={{ $json.text }}\"},\"typeVersion\":1},{\"id\":\"76c6fb4b-5b82-4115-8be4-63b6ce652793\",\"name\":\"Sticky Note10\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-540,880],\"parameters\":{\"color\":7,\"width\":540,\"height\":420,\"content\":\"**Fig 1. N8N Video Search Frontend**\\n![screenshot of web frontend](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/lqd2giei1ap2owjgbuth#full-width)\"},\"typeVersion\":1},{\"id\":\"b8ad1b2b-ff05-46a3-a817-951d02d69b01\",\"name\":\"Sticky Note11\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2160,-740],\"parameters\":{\"color\":5,\"width\":400,\"height\":240,\"content\":\"**Create Qdrant Collection**\\nYou may need to create the qdrant collection manually. Run this in the qdrant dashboard's console.\\n```\\nPUT collections/n8n_videos\\n{\\n  \\\"vectors\\\": {\\n      \\\"distance\\\": \\\"Cosine\\\",\\n      \\\"size\\\": 1536\\n  }\\n}\\n```\"},\"typeVersion\":1},{\"id\":\"189d6973-cd09-4176-b04b-4c8feea2e653\",\"name\":\"Sticky Note12\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1660,-1160],\"parameters\":{\"width\":440,\"height\":1080,\"content\":\"## Try It Out!\\n### Ever wanted to build your own RAG search over Youtube videos? Well, now you can! This n8n template shows how you can build a very capable Youtube search engine powered by Apify, Qdrant and your LLM of choice to quickly and efficiently browse over many videos for research or viewing pleasure.\\n\\nI originally started to template to ask questions on the \\\"n8n @ scale office-hours\\\" livestream videos but then extended it to include the latest videos on the official channel.\\n\\n**Check out a demo here**: [https://jimleuk.app.n8n.cloud/webhook/n8n_videos](https://jimleuk.app.n8n.cloud/webhook/n8n_videos)\\n\\n### How it works\\n* Stage 1 is to collect the Youtube video transcripts into a vector database. For this, I've used Apify to scrape and Qdrant to store.\\n* Transcripts are broken down into smaller chunks and carefully tagged with metadata to assist in later search and filtering.\\n* Stage 2 is to build a web frontend for the user to query the vectorised transcripts. I'm using a webhook to serve a simple web app and API to dynamically fetch the results.\\n* When searching for a video, I've opted to use Qdrant's search groups API which in this use-case, performs better as it returns a wider range of videos results.\\n* In the web frontend, when the user clicks on the results, the matching Youtube video plays in an embedded video player.\\n\\n### How to use\\n* Once credentials are all set, first run steps 1 - 3 to populate your vector store.\\n* Next, set the workflow to active to expose the web frontend. Visit the webhook  [https://<n8n_url>/webhook/n8n_videos](/webhook/n8n_videos) in your browser to use it.\\n* If only for personal use, you may want to remove. the rate limiting mechanism in step 4.\\n\\n### Customising the template\\n* Not interested in official n8n videos? Swap to a different channel.\\n* Google Gemini may perform better when extracting from transcripts.\\n\\n### Need Help?\\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\"},\"typeVersion\":1},{\"id\":\"a39f0990-6638-4b07-82ca-e91a9a289dfc\",\"name\":\"Has Results?1\",\"type\":\"n8n-nodes-base.if\",\"position\":[180,240],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"0eb32753-8fd7-4266-a32f-a8f51bf77e93\",\"operator\":{\"type\":\"array\",\"operation\":\"notEmpty\",\"singleValue\":true},\"leftValue\":\"={{ $json.result.groups }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"2552bce4-587f-45ee-8702-7c919978c87e\",\"name\":\"Generate Empty Response1\",\"type\":\"n8n-nodes-base.set\",\"position\":[180,460],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"7c4bd999-49b1-4532-89ca-c53e98da6b17\",\"name\":\"text\",\"type\":\"string\",\"value\":\"={{ '' }}\"},{\"id\":\"916221de-2ec9-4fd9-8029-d7a3de88f395\",\"name\":\"results\",\"type\":\"string\",\"value\":\"=<div id=\\\"resultsCount\\\">0 Video Results</div>\"}]}},\"typeVersion\":3.4},{\"id\":\"9e9d74c0-3693-4f6f-b406-0ad9a8592c09\",\"name\":\"Respond to Webhook4\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"position\":[380,460],\"parameters\":{\"options\":{\"responseCode\":200},\"respondWith\":\"text\",\"responseBody\":\"=<div id=\\\"answer\\\">{{ $json.text }}</div>\\n{{ $json.results }}\"},\"executeOnce\":false,\"typeVersion\":1.1},{\"id\":\"e39b205e-1574-4ce6-a87a-a0e090ca3e33\",\"name\":\"Groups to Items1\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[380,240],\"parameters\":{\"options\":{},\"fieldToSplitOut\":\"result.groups\"},\"typeVersion\":1},{\"id\":\"96e5844a-090b-4e1d-b40a-e0ccf58eac13\",\"name\":\"OpenAI Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[1080,460],\"parameters\":{\"model\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gpt-4o-mini\"},\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"8gccIjcuf3gvaoEr\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.2},{\"id\":\"03c3b930-c677-45e1-974c-8e6fc43acd56\",\"name\":\"OpenAI Chat Model1\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[2760,340],\"parameters\":{\"model\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gpt-4o-mini\"},\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"8gccIjcuf3gvaoEr\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.2}],\"pinData\":{},\"connections\":{\"Wait\":{\"main\":[[{\"node\":\"For Each Chunk\",\"type\":\"main\",\"index\":0}]]},\"WEB UI\":{\"main\":[[{\"node\":\"Generate Webpage\",\"type\":\"main\",\"index\":0}]]},\"Markdown\":{\"main\":[[{\"node\":\"Map Fields\",\"type\":\"main\",\"index\":0}]]},\"10req/min\":{\"main\":[[{\"node\":\"Get Query\",\"type\":\"main\",\"index\":0}],[{\"node\":\"429 Response\",\"type\":\"main\",\"index\":0}]]},\"Get Query\":{\"main\":[[{\"node\":\"Get Embeddings\",\"type\":\"main\",\"index\":0}]]},\"Group Ref\":{\"main\":[[{\"node\":\"Extract Results\",\"type\":\"main\",\"index\":0}]]},\"Video Ref\":{\"main\":[[{\"node\":\"Get Video Subtitles\",\"type\":\"main\",\"index\":0}]]},\"Embeddings\":{\"ai_embedding\":[[{\"node\":\"Qdrant Vector Store\",\"type\":\"ai_embedding\",\"index\":0}]]},\"Map Fields\":{\"main\":[[{\"node\":\"Respond to Webhook\",\"type\":\"main\",\"index\":0}]]},\"SEARCH API\":{\"main\":[[{\"node\":\"Incr Rate Limit\",\"type\":\"main\",\"index\":0}]]},\"429 Response\":{\"main\":[[{\"node\":\"Respond to Webhook2\",\"type\":\"main\",\"index\":0}]]},\"Answer Query\":{\"main\":[[{\"node\":\"Markdown\",\"type\":\"main\",\"index\":0}]]},\"Has Results?\":{\"main\":[[{\"node\":\"Transcripts to Items\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Generate Empty Response\",\"type\":\"main\",\"index\":0}]]},\"Has Results?1\":{\"main\":[[{\"node\":\"Groups to Items1\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Generate Empty Response1\",\"type\":\"main\",\"index\":0}]]},\"Text Splitter\":{\"ai_textSplitter\":[[{\"node\":\"Default Data Loader\",\"type\":\"ai_textSplitter\",\"index\":0}]]},\"For Each Chunk\":{\"main\":[[],[{\"node\":\"Qdrant Vector Store\",\"type\":\"main\",\"index\":0}]]},\"For Each Group\":{\"main\":[[{\"node\":\"Combine Results\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Group Ref\",\"type\":\"main\",\"index\":0}]]},\"For Each Video\":{\"main\":[[],[{\"node\":\"Vectorise Subworkflow\",\"type\":\"main\",\"index\":0}]]},\"Get Embeddings\":{\"main\":[[{\"node\":\"Qdrant Groups Search\",\"type\":\"main\",\"index\":0}]]},\"Chunk Subtitles\":{\"main\":[[{\"node\":\"Chunks to Items\",\"type\":\"main\",\"index\":0}]]},\"Chunks to Items\":{\"main\":[[{\"node\":\"For Each Chunk\",\"type\":\"main\",\"index\":0}]]},\"Clean Up Output\":{\"main\":[[{\"node\":\"Sort By Video ID\",\"type\":\"main\",\"index\":0}]]},\"Combine Results\":{\"main\":[[{\"node\":\"Has Results?\",\"type\":\"main\",\"index\":0}]]},\"Extract Results\":{\"main\":[[{\"node\":\"For Each Group\",\"type\":\"main\",\"index\":0}]]},\"Incr Rate Limit\":{\"main\":[[{\"node\":\"10req/min\",\"type\":\"main\",\"index\":0}]]},\"Generate Webpage\":{\"main\":[[{\"node\":\"Render Page\",\"type\":\"main\",\"index\":0}]]},\"Groups to Items1\":{\"main\":[[{\"node\":\"For Each Group\",\"type\":\"main\",\"index\":0}]]},\"Schedule Trigger\":{\"main\":[[{\"node\":\"Get Latest Youtube Videos\",\"type\":\"main\",\"index\":0}]]},\"Sort By Video ID\":{\"main\":[[{\"node\":\"Generate Template\",\"type\":\"main\",\"index\":0}]]},\"Generate Template\":{\"main\":[[{\"node\":\"Answer Query\",\"type\":\"main\",\"index\":0}]]},\"OpenAI Chat Model\":{\"ai_languageModel\":[[{\"node\":\"Extract Results\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"OpenAI Chat Model1\":{\"ai_languageModel\":[[{\"node\":\"Answer Query\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Default Data Loader\":{\"ai_document\":[[{\"node\":\"Qdrant Vector Store\",\"type\":\"ai_document\",\"index\":0}]]},\"Get Video Subtitles\":{\"main\":[[{\"node\":\"Chunk Subtitles\",\"type\":\"main\",\"index\":0}]]},\"Ignore Already Seen\":{\"main\":[[{\"node\":\"For Each Video\",\"type\":\"main\",\"index\":0}]]},\"Qdrant Vector Store\":{\"main\":[[{\"node\":\"Wait\",\"type\":\"main\",\"index\":0}]]},\"Qdrant Groups Search\":{\"main\":[[{\"node\":\"Has Results?1\",\"type\":\"main\",\"index\":0}]]},\"Transcripts to Items\":{\"main\":[[{\"node\":\"Clean Up Output\",\"type\":\"main\",\"index\":0}]]},\"Vectorise Subworkflow\":{\"main\":[[{\"node\":\"For Each Video\",\"type\":\"main\",\"index\":0}]]},\"Vectorise Subworkflow1\":{\"main\":[[{\"node\":\"Video Ref\",\"type\":\"main\",\"index\":0}]]},\"Generate Empty Response\":{\"main\":[[{\"node\":\"Respond to Webhook3\",\"type\":\"main\",\"index\":0}]]},\"Generate Empty Response1\":{\"main\":[[{\"node\":\"Respond to Webhook4\",\"type\":\"main\",\"index\":0}]]},\"Get Latest Youtube Videos\":{\"main\":[[{\"node\":\"Ignore Already Seen\",\"type\":\"main\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"Get Latest Youtube Videos\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "### Ever wanted to build your own RAG search over Youtube videos? Well, now you can! This n8n template shows how you can build a very capable Youtube search engine powered by Apify, Qdrant and your LLM of choice to quickly and efficiently browse over many videos for research.\n\nI originally started to template to ask questions on the \"n8n @ scale office-hours\" livestream videos but then extended it to include the latest videos on the official channel.\n\n**Check out a demo here** : <https://jimleuk.app.n8n.cloud/webhook/n8n_videos>\n\n## How it works\n\n  * Stage 1 is to collect the Youtube video transcripts and push them into a vector database. For this, I've used Apify to scrape Youtube and Qdrant to store the embeddings.\n  * Transcripts are broken down into smaller chunks and carefully tagged with metadata to assist in later search and filtering.\n  * Stage 2 is to build a web frontend for the user to query the vectorised transcripts. I'm using a webhook to serve a simple web app and API to dynamically fetch the results.\n  * When searching for a video, I've opted to use Qdrant's search groups API which in this use-case, performs better as it returns a wider range of videos results.\n  * In the web frontend, when the user clicks on the results, the matching Youtube video plays in an embedded video player.\n\n\n\n## How to use\n\n  * Once credentials are all set, first run steps 1 - 3 to populate your vector store.\n  * Next, set the workflow to active to expose the web frontend. Visit the webhook URL in your browser to use it.\n  * If only for personal use, you may want to remove the rate limiting mechanism in step 4.\n\n\n\n## Requirements\n\n  * Apify for Youtube Channel and Video Scraping\n  * Qdrant for Vector store\n  * OpenAI for LLM and Embeddings\n\n\n\n## Customising the template\n\n  * Not interested in official n8n videos? Swap to a different channel - this template will work on many as long as videos are not private or set to prevent embeds.\n  * Technically any vector store should work but may not have the same grouping API. Use the simple vector store node and revert back to basic searching instead.\n\n\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><h3>Ever wanted to build your own RAG search over Youtube videos? Well, now you can! This n8n template shows how you can build a very capable Youtube search engine powered by Apify, Qdrant and your LLM of choice to quickly and efficiently browse over many videos for research.</h3>\n<p>I originally started to template to ask questions on the \"n8n @ scale office-hours\" livestream videos but then extended it to include the latest videos on the official channel.</p>\n<p><strong>Check out a demo here</strong>: <a href=\"https://jimleuk.app.n8n.cloud/webhook/n8n_videos\" rel=\"ugc nofollow\" target=\"_blank\">https://jimleuk.app.n8n.cloud/webhook/n8n_videos</a></p>\n<h2>How it works</h2>\n<ul>\n<li>Stage 1 is to collect the Youtube video transcripts and push them into a vector database. For this, I've used Apify to scrape Youtube and Qdrant to store the embeddings.</li>\n<li>Transcripts are broken down into smaller chunks and carefully tagged with metadata to assist in later search and filtering.</li>\n<li>Stage 2 is to build a web frontend for the user to query the vectorised transcripts. I'm using a webhook to serve a simple web app and API to dynamically fetch the results.</li>\n<li>When searching for a video, I've opted to use Qdrant's search groups API which in this use-case, performs better as it returns a wider range of videos results.</li>\n<li>In the web frontend, when the user clicks on the results, the matching Youtube video plays in an embedded video player.</li>\n</ul>\n<h2>How to use</h2>\n<ul>\n<li>Once credentials are all set, first run steps 1 - 3 to populate your vector store.</li>\n<li>Next, set the workflow to active to expose the web frontend. Visit the webhook URL in your browser to use it.</li>\n<li>If only for personal use, you may want to remove the rate limiting mechanism in step 4.</li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>Apify for Youtube Channel and Video Scraping</li>\n<li>Qdrant for Vector store</li>\n<li>OpenAI for LLM and Embeddings</li>\n</ul>\n<h2>Customising the template</h2>\n<ul>\n<li>Not interested in official n8n videos? Swap to a different channel - this template will work on many as long as videos are not private or set to prevent embeds.</li>\n<li>Technically any vector store should work but may not have the same grouping API. Use the simple vector store node and revert back to basic searching instead.</li>\n</ul>\n</div><!--]-->",
  "readme_zh": "### 一直想为YouTube视频打造专属的RAG搜索引擎？现在机会来了！这个n8n模板将展示如何利用Apify、Qdrant和你选择的大语言模型，构建一个高效的YouTube视频搜索引擎，助你快速检索海量视频内容进行研究。\n\n最初我设计这个模板是为了在\"n8n规模化办公时间\"直播视频中提问，后来将其扩展至官方频道的最新视频。\n\n**点击这里查看演示**：<https://jimleuk.app.n8n.cloud/webhook/n8n_videos>\n\n## 工作原理\n\n* **第一阶段**：收集YouTube视频字幕并存入向量数据库。这里使用Apify抓取YouTube内容，Qdrant存储向量嵌入。\n* 字幕会被分割成小片段，并添加详尽的元数据标签，便于后续搜索筛选。\n* **第二阶段**：构建用户查询向量化字幕的网页前端。通过webhook提供简易网页应用和动态获取结果的API。\n* 视频搜索采用Qdrant的搜索分组API，在此场景下表现更优，能返回更广泛的视频结果。\n* 用户在前端点击结果时，匹配的YouTube视频会直接在嵌入式播放器中打开。\n\n## 使用指南\n\n* 完成凭证配置后，首先运行步骤1-3来填充向量数据库。\n* 接着激活工作流以启用网页前端。在浏览器访问webhook网址即可使用。\n* 若仅供个人使用，可移除步骤4中的速率限制机制。\n\n## 系统要求\n\n* Apify（用于YouTube频道和视频抓取）\n* Qdrant（向量数据库）\n* OpenAI（大语言模型和嵌入）\n\n## 模板定制\n\n* 对n8n官方视频不感兴趣？可切换其他频道——只要视频非私密或禁止嵌入，本模板适用于多数频道。\n* 理论上任何向量数据库都适用，但可能不具备相同的分组API功能。可使用简易向量存储节点，切换回基础搜索模式。",
  "title_zh": "使用Apify、Qdrant和AI实现带前端的YouTube RAG搜索",
  "publish_date_absolute": "",
  "publish_date_zh": "最后一次更新于一个月前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"c8221e91-9a9c-489e-a770-7c3cf2cb3328\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -1100,\n        -460\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"111eccd7-51e5-4b4a-9c30-a69f90397df7\",\n      \"name\": \"Get Video Subtitles\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        540,\n        -360\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.apify.com/v2/acts/streamers~youtube-channel-scraper/run-sync-get-dataset-items\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n  \\\"downloadSubtitles\\\": true,\\n  \\\"hasCC\\\": false,\\n  \\\"hasLocation\\\": false,\\n  \\\"hasSubtitles\\\": false,\\n  \\\"is360\\\": false,\\n  \\\"is3D\\\": false,\\n  \\\"is4K\\\": false,\\n  \\\"isBought\\\": false,\\n  \\\"isHD\\\": false,\\n  \\\"isHDR\\\": false,\\n  \\\"isLive\\\": false,\\n  \\\"isVR180\\\": false,\\n  \\\"maxResultStreams\\\": 0,\\n  \\\"maxResults\\\": 1,\\n  \\\"maxResultsShorts\\\": 0,\\n  \\\"preferAutoGeneratedSubtitles\\\": false,\\n  \\\"saveSubsToKVS\\\": false,\\n  \\\"startUrls\\\": [\\n    {\\n      \\\"url\\\": $json.url,\\n      \\\"method\\\": \\\"GET\\\"\\n    }\\n  ],\\n  \\\"subtitlesFormat\\\": \\\"vtt\\\",\\n  \\\"subtitlesLanguage\\\": \\\"en\\\"\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"SV9BDKc1cRbZBeoL\",\n          \"name\": \"Apify.com (personal token)\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"6dcd5497-89cf-4591-ae79-bd12bbde6256\",\n      \"name\": \"Chunk Subtitles\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        740,\n        -360\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"fa613ce2-3a2f-42e4-9add-88df00efdb85\",\n              \"name\": \"vtt\",\n              \"type\": \"array\",\n              \"value\": \"={{\\nArray(\\n  Math.ceil($json.subtitles[0].vtt.length/30_000)\\n).fill(0)\\n  .map((_,idx) => $json.subtitles[0].vtt.substr(idx*30_000,(idx * 30_000) + 30_000))\\n}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"689fc39e-21d9-4222-9cda-858f21cacc97\",\n      \"name\": \"Qdrant Vector Store\",\n      \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreQdrant\",\n      \"position\": [\n        1480,\n        -520\n      ],\n      \"parameters\": {\n        \"mode\": \"insert\",\n        \"options\": {},\n        \"qdrantCollection\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"n8n_videos\",\n          \"cachedResultName\": \"n8n_videos\"\n        }\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"AhUP2CNvcQDRd5au\",\n          \"name\": \"clients-dev\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ee57ffe2-e3f8-409a-a87a-b69902494598\",\n      \"name\": \"Default Data Loader\",\n      \"type\": \"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\",\n      \"position\": [\n        1580,\n        -360\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"metadata\": {\n            \"metadataValues\": [\n              {\n                \"name\": \"videoId\",\n                \"value\": \"={{ $('Video Ref').item.json.id }}\"\n              },\n              {\n                \"name\": \"title\",\n                \"value\": \"={{ $('Video Ref').item.json.title }}\"\n              },\n              {\n                \"name\": \"channelId\",\n                \"value\": \"={{ $('Video Ref').item.json.channelId }}\"\n              },\n              {\n                \"name\": \"url\",\n                \"value\": \"={{ $('Video Ref').item.json.url }}\"\n              },\n              {\n                \"name\": \"type\",\n                \"value\": \"={{ $('Video Ref').item.json.type }}\"\n              }\n            ]\n          }\n        },\n        \"jsonData\": \"={{ $json.vtt.replaceAll('\\\\n\\\\n', '\\\\n') }}\",\n        \"jsonMode\": \"expressionData\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4ce56ce3-73fc-4ba3-abbf-0401d44ce748\",\n      \"name\": \"Embeddings\",\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\n      \"position\": [\n        1460,\n        -360\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"8gccIjcuf3gvaoEr\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"a910822d-073f-42a6-8f6d-5c04dc59fba2\",\n      \"name\": \"Text Splitter\",\n      \"type\": \"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter\",\n      \"position\": [\n        1660,\n        -240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"chunkSize\": 3000\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0361055c-8fc2-488a-9c43-8e0492648756\",\n      \"name\": \"For Each Video\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        -400,\n        -360\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"77243da4-38cb-430b-b8f3-2698ec6dd022\",\n      \"name\": \"Video Ref\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        340,\n        -360\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fe63938a-8c17-4191-8fdc-cd044f5de080\",\n      \"name\": \"For Each Chunk\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        1240,\n        -400\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"4bbbc54a-30b6-4395-bb06-0145dde9abd9\",\n      \"name\": \"Wait\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        1920,\n        -400\n      ],\n      \"webhookId\": \"45ae600a-d26f-444b-bbe0-792c5602fe8d\",\n      \"parameters\": {\n        \"amount\": 1\n      },\n      \"executeOnce\": true,\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"6f581ad9-abc5-4ef7-b2ce-1267ba67999d\",\n      \"name\": \"Clean Up Output\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        2100,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"e9a68e02-1559-4ce5-b338-5259f1030d25\",\n              \"name\": \"title\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.title }}\"\n            },\n            {\n              \"id\": \"3fb553d6-79a1-41f2-8b72-581d667adcea\",\n              \"name\": \"url\",\n              \"type\": \"string\",\n              \"value\": \"=https://www.youtube.com/watch?v={{ $json.videoId }}\"\n            },\n            {\n              \"id\": \"9f435790-5b84-4a23-ac39-561c87d0eea1\",\n              \"name\": \"extract\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.extract.replaceAll('\\\\n', ' ') }}\"\n            },\n            {\n              \"id\": \"f3d63c6e-d5c9-40b6-a9a7-ebfe7c6c9a41\",\n              \"name\": \"timestamp\",\n              \"type\": \"string\",\n              \"value\": \"={{\\n(function(str){\\n  return str.length === 3\\n  ? str[1] + ':' + str[2]\\n  : str.join(':');\\n})($json.timestamp.split(':'))\\n}}\"\n            },\n            {\n              \"id\": \"f937c492-ddbe-40fe-8e12-a21c21832e4a\",\n              \"name\": \"videoId\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.videoId }}\"\n            },\n            {\n              \"id\": \"2245a7b6-cf9e-4c39-875b-5bf80b1353bc\",\n              \"name\": \"video_ts\",\n              \"type\": \"string\",\n              \"value\": \"={{\\n(function(timestamp){\\n  const buffer = 5;\\n  let [hr,min,sec] = timestamp.map(x => Number(x));\\n  if (sec === undefined){ sec = min; min = hr; hr = 0 }\\n  return Math.max((hr * 60 * 60) + (min * 60) + sec - buffer, 0);\\n})($json.timestamp.split(':'))\\n}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"27c19284-1ce6-4756-b385-6433096d4b84\",\n      \"name\": \"Sort By Video ID\",\n      \"type\": \"n8n-nodes-base.sort\",\n      \"position\": [\n        2280,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"sortFieldsUi\": {\n          \"sortField\": [\n            {\n              \"fieldName\": \"videoId\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"dc70ab23-8fb0-4f7f-9833-5d6b01407b69\",\n      \"name\": \"Respond to Webhook\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        3620,\n        220\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 200,\n          \"responseHeaders\": {\n            \"entries\": [\n              {\n                \"name\": \"Content-Type\",\n                \"value\": \"text/html\"\n              }\n            ]\n          }\n        },\n        \"respondWith\": \"text\",\n        \"responseBody\": \"=<div id=\\\"answer\\\">\\n  <div id=\\\"answer-legend\\\">AI Summary</div>\\n  {{ $json.text }}\\n</div>\\n{{ $json.results }}\"\n      },\n      \"executeOnce\": false,\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"1c4eac3a-1412-4e24-85fd-359aa065e3db\",\n      \"name\": \"Extract Results\",\n      \"type\": \"@n8n/n8n-nodes-langchain.informationExtractor\",\n      \"position\": [\n        1080,\n        300\n      ],\n      \"parameters\": {\n        \"text\": \"=<transcripts>\\n{{ $json.hits\\n  .map(item => `<transcript>${item.toJsonString()}</transcript>`).join('\\\\n')\\n}}\\n</transcripts>\\n<user_query>\\n{{ $('Get Query').first().json.query }}\\n</user_query>\",\n        \"options\": {\n          \"systemPromptTemplate\": \"=Your task is to analyse the collection of video transcripts and extract the parts relevant to the user's query.\\n* When returning your response, provide from 3 and up to 10 results as extracts of the transcript combined with their timestamps (MM:SS) and include the video title and url.\\n* When getting the extract for the results, as this will be read by the user, return only the text of the transcript and remove any vtt tags, annotations, markers.\\n* Refer to the metadata for video title and video url.\"\n        },\n        \"schemaType\": \"manual\",\n        \"inputSchema\": \"{\\n  \\\"type\\\": \\\"array\\\",\\n  \\\"items\\\": {\\n    \\\"type\\\":\\\"object\\\",\\n    \\\"required\\\": [\\n      \\\"title\\\",\\\"url\\\",\\\"extract\\\",\\\"timestamp\\\",\\\"videoId\\\"\\n    ],\\n    \\\"properties\\\": {\\n      \\\"title\\\": { \\\"type\\\": \\\"string\\\" },\\n       \\\"extract\\\": {\\n         \\\"type\\\": \\\"string\\\",\\n         \\\"description\\\": \\\"extract and transcribe the relevant parts of the transcript removing vtt annotations and markers.\\\"\\n       },\\n       \\\"timestamp\\\": { \\\"type\\\": \\\"string\\\" },\\n       \\\"videoId\\\": { \\\"type\\\": \\\"string\\\" }\\n    }\\n  }\\n}\"\n      },\n      \"executeOnce\": false,\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cc2d88f7-065d-489a-bfc4-cbc13268b59a\",\n      \"name\": \"SEARCH API\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -1100,\n        360\n      ],\n      \"webhookId\": \"e2768373-66ad-4ad2-948f-c5e278d39595\",\n      \"parameters\": {\n        \"path\": \"n8n_videos/api/search\",\n        \"options\": {\n          \"ignoreBots\": false\n        },\n        \"responseMode\": \"responseNode\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"ae2fb16b-2a31-4616-a2b9-6cd634b64647\",\n      \"name\": \"Get Query\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -360,\n        240\n      ],\n      \"parameters\": {\n        \"mode\": \"raw\",\n        \"options\": {},\n        \"jsonOutput\": \"={{\\n{\\n  query: ((($('SEARCH API').first().json.query?.q\\n      .removeTags())\\n      .removeTags())\\n      .replaceSpecialChars()).substr(0,128),\\n  type: ['video', 'stream'].includes($('SEARCH API').first().json.query.type)\\n    ? $('SEARCH API').first().json.query.type\\n    : undefined\\n}\\n}}\"\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"6d14cd25-f65a-4162-bcfc-cc2e7e547c23\",\n      \"name\": \"Generate Template\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        2460,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"3e4daf29-906b-4469-b107-6cbc142dab44\",\n              \"name\": \"results\",\n              \"type\": \"string\",\n              \"value\": \"={{\\n(function(items) {\\n  const groupByVideoId = items.reduce((acc, item) => {\\n    if (!acc[item.videoId]) acc[item.videoId] = [];\\n    acc[item.videoId].push(item);\\n    return acc;\\n  }, {});\\n  \\n  const results = Object.keys(groupByVideoId).map(key => {\\n    const parts = groupByVideoId[key]\\n      .toSorted((a,b) => Number(a.video_ts) - Number(b.video_ts));\\n    const {title,url} = parts[0];\\n    return `<li video-id=\\\"${key}\\\">\\n      <div class=\\\"resultSource\\\">\\n        <a\\n          href=\\\"${url}\\\"\\n          target=\\\"_blank\\\"\\n          hx-on:click=\\\"loadVideo('${key}',0); event.preventDefault()\\\"\\n        >\\n          <div class=\\\"resultSourceTitle\\\">${title}</div>\\n          <div class=\\\"resultSourceUrl\\\">${url}</div>\\n        </a>\\n      </div>\\n      ${parts.map(item => `\\n        <div class=\\\"resultContent\\\">\\n          <a\\n            class=\\\"resultTimestamp\\\"\\n            href=\\\"${item.url}&t=${item.video_ts}\\n            \\\"target=\\\"_blank\\\"\\n            hx-on:click=\\\"loadVideo('${item.videoId}',${item.video_ts}); event.preventDefault()\\\"\\n          >\\n            [${item.timestamp}]\\n            <span>...${item.extract}...</span>\\n          </a>\\n        </div>`).join('\\\\n')}\\n    </li>`\\n  }).join('\\\\n')\\n\\n  return `<div id=\\\"resultsCount\\\">${Object.keys(groupByVideoId).length} Video Result${Object.keys(groupByVideoId).length === 1 ? '' : 's'}</div>${results}`;\\n})(\\n  $input.all().map(item => item.json).filter(item => item.videoId)\\n)\\n}}\"\n            }\n          ]\n        }\n      },\n      \"executeOnce\": true,\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"ccf2744d-3678-40b8-b7a1-2fda1d820dd0\",\n      \"name\": \"Answer Query\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        2760,\n        180\n      ],\n      \"parameters\": {\n        \"text\": \"=<results>{{ $json.results }}</results>\\n<user_query>\\n{{ $('Get Query').first().json.query }}\\n</user_query>\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"=Using the available results, generate a 1 or 2 sentence answer for the user's query. You may format your answer using markdown.\"\n            }\n          ]\n        },\n        \"promptType\": \"define\"\n      },\n      \"executeOnce\": true,\n      \"typeVersion\": 1.5\n    },\n    {\n      \"id\": \"5c9a1091-1c68-4b83-a002-638236044599\",\n      \"name\": \"Has Results?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        1720,\n        260\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"81f8ec3e-be33-469c-8bf5-c3d3575e3764\",\n              \"operator\": {\n                \"type\": \"object\",\n                \"operation\": \"notEmpty\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"97e6fdf0-db16-4957-bc4f-ce96a8ccc944\",\n      \"name\": \"Generate Empty Response\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1920,\n        360\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"7c4bd999-49b1-4532-89ca-c53e98da6b17\",\n              \"name\": \"text\",\n              \"type\": \"string\",\n              \"value\": \"={{ '' }}\"\n            },\n            {\n              \"id\": \"916221de-2ec9-4fd9-8029-d7a3de88f395\",\n              \"name\": \"results\",\n              \"type\": \"string\",\n              \"value\": \"=<div id=\\\"resultsCount\\\">0 Video Results</div>\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"160933f5-ae39-407d-9124-f24d193f1153\",\n      \"name\": \"Map Fields\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        3400,\n        220\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"36bb30ce-6baf-492a-ad8c-4bec175e85a0\",\n              \"name\": \"text\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.data }}\"\n            },\n            {\n              \"id\": \"60fb3d9d-0342-41c2-80bb-1899773f4bd7\",\n              \"name\": \"results\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Generate Template').first().json.results }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"ac4881ee-e200-48b9-8339-0a21647cc1c4\",\n      \"name\": \"Incr Rate Limit\",\n      \"type\": \"n8n-nodes-base.redis\",\n      \"position\": [\n        -900,\n        360\n      ],\n      \"parameters\": {\n        \"key\": \"=n8n_videos_session_{{ $json.headers['x-forwarded-for'] }}\",\n        \"expire\": true,\n        \"operation\": \"incr\"\n      },\n      \"credentials\": {\n        \"redis\": {\n          \"id\": \"zU4DA70qSDrZM1El\",\n          \"name\": \"Redis account (localhost)\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5aa5880a-d9c4-4263-877c-b7c8b3f36916\",\n      \"name\": \"10req/min\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        -720,\n        360\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"032093e1-b223-45f4-b1bc-5603134acfe8\",\n              \"operator\": {\n                \"type\": \"number\",\n                \"operation\": \"lt\"\n              },\n              \"leftValue\": \"={{ Object.values($json)[0] }}\",\n              \"rightValue\": 11\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"7eb4a8e8-ba35-4a55-98cc-f85395a90604\",\n      \"name\": \"Vectorise Subworkflow\",\n      \"type\": \"n8n-nodes-base.executeWorkflow\",\n      \"position\": [\n        -180,\n        -360\n      ],\n      \"parameters\": {\n        \"mode\": \"each\",\n        \"options\": {\n          \"waitForSubWorkflow\": true\n        },\n        \"workflowId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $workflow.id }}\"\n        },\n        \"workflowInputs\": {\n          \"value\": {},\n          \"schema\": [],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": true\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"dd76b922-8522-4d5b-a49b-e3e4cdca333f\",\n      \"name\": \"Vectorise Subworkflow1\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        140,\n        -360\n      ],\n      \"parameters\": {\n        \"inputSource\": \"passthrough\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"7b7c5773-9eac-4356-8d66-793dd9bcc008\",\n      \"name\": \"WEB UI\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -1120,\n        920\n      ],\n      \"webhookId\": \"8b531d97-c5d7-4a98-8ef0-f19e59cf886f\",\n      \"parameters\": {\n        \"path\": \"n8n_videos/\",\n        \"options\": {\n          \"ignoreBots\": true\n        },\n        \"responseMode\": \"responseNode\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"32a0fb68-1b6f-4d65-8591-f370d0307eb4\",\n      \"name\": \"Qdrant Groups Search\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        0,\n        240\n      ],\n      \"parameters\": {\n        \"url\": \"=http://qdrant:6333/collections/n8n_videos/points/search/groups\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"authentication\": \"predefinedCredentialType\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"limit\",\n              \"value\": \"={{ 4 }}\"\n            },\n            {\n              \"name\": \"filter\",\n              \"value\": \"={{\\n$('Get Query').first().json.type\\n  ? {\\n    \\\"must\\\": [\\n      {\\n        \\\"key\\\": \\\"metadata.type\\\",\\n        \\\"match\\\": {\\n          \\\"any\\\": [].concat($('Get Query').first().json.type)\\n        }\\n      }\\n    ]\\n  }\\n  : undefined\\n}}\"\n            },\n            {\n              \"name\": \"with_payload\",\n              \"value\": \"={{ true }}\"\n            },\n            {\n              \"name\": \"group_by\",\n              \"value\": \"metadata.videoId\"\n            },\n            {\n              \"name\": \"group_size\",\n              \"value\": \"={{ 3 }}\"\n            },\n            {\n              \"name\": \"vector\",\n              \"value\": \"={{ $json.data[0].embedding }}\"\n            }\n          ]\n        },\n        \"nodeCredentialType\": \"qdrantApi\"\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"AhUP2CNvcQDRd5au\",\n          \"name\": \"clients-dev\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"0ddf6e63-d0db-499d-873c-ea7d82bf1ef6\",\n      \"name\": \"Get Embeddings\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -180,\n        240\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.openai.com/v1/embeddings\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"authentication\": \"predefinedCredentialType\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"input\",\n              \"value\": \"={{ $json.query }}\"\n            },\n            {\n              \"name\": \"model\",\n              \"value\": \"text-embedding-3-small\"\n            }\n          ]\n        },\n        \"nodeCredentialType\": \"openAiApi\"\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"8gccIjcuf3gvaoEr\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"a2fc2329-79be-49ac-923a-63affdefe464\",\n      \"name\": \"For Each Group\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        740,\n        220\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"ed300a5f-7eca-4f15-bcc3-7855afed0a9e\",\n      \"name\": \"Group Ref\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        900,\n        300\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4e3b33f6-6274-43f1-8206-adeac3220113\",\n      \"name\": \"Combine Results\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1540,\n        260\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"f797071b-f722-4273-a672-932370123fc0\",\n              \"name\": \"output\",\n              \"type\": \"array\",\n              \"value\": \"={{ $input.all().flatMap(item => item.json.output) }}\"\n            }\n          ]\n        }\n      },\n      \"executeOnce\": true,\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"da36d896-3187-40f6-82a5-953ae0fde867\",\n      \"name\": \"Transcripts to Items\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        1920,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldToSplitOut\": \"output\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e297fd2c-a551-4efe-8240-26522de4cec3\",\n      \"name\": \"Respond to Webhook2\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        -180,\n        460\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 200\n        },\n        \"respondWith\": \"text\",\n        \"responseBody\": \"=<div id=\\\"answer\\\">{{ $json.text }}</div>\\n{{ $json.results }}\"\n      },\n      \"executeOnce\": false,\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"1cc6136e-b60d-4dc3-aeb7-30efb09b24f1\",\n      \"name\": \"Respond to Webhook3\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        2100,\n        360\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 200\n        },\n        \"respondWith\": \"text\",\n        \"responseBody\": \"=<div id=\\\"answer\\\">{{ $json.text }}</div>\\n{{ $json.results }}\"\n      },\n      \"executeOnce\": false,\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"143115aa-5754-4e43-9bda-332b38cce4ae\",\n      \"name\": \"Schedule Trigger\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [\n        -1100,\n        -280\n      ],\n      \"parameters\": {\n        \"rule\": {\n          \"interval\": [\n            {\n              \"field\": \"weeks\",\n              \"triggerAtDay\": [\n                6\n              ],\n              \"triggerAtHour\": 6\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"154adf7a-8390-425c-b96c-641c02c92072\",\n      \"name\": \"Ignore Already Seen\",\n      \"type\": \"n8n-nodes-base.removeDuplicates\",\n      \"position\": [\n        -620,\n        -360\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"operation\": \"removeItemsSeenInPreviousExecutions\",\n        \"dedupeValue\": \"={{ $json.id }}\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"c488a718-8c27-4d52-a891-bb875c7b8615\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1180,\n        -640\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 1200,\n        \"height\": 560,\n        \"content\": \"## 1. 使用[Apify.com](https://www.apify.com?fpr=414q6)获取最新视频  \\n[了解更多关于Apify.com的信息](https://www.apify.com?fpr=414q6) - [Youtube数据爬取工具](https://apify.com/streamers/youtube-scraper?fpr=414q6)  \\n\\n若您希望大幅节省时间精力，并规避官方Youtube API的低使用限额，注册第三方Youtube数据爬取服务（如Apify平台提供的工具）将是理想选择。此处，我正使用Youtube爬虫工具从n8n官方频道抓取最新视频及直播录像。通过\\\"去重节点\\\"处理可确保内容仅被单次处理。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"09fc0bc7-1efc-495f-b57b-3d62edbe09a6\",\n      \"name\": \"Get Latest Youtube Videos\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -820,\n        -360\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.apify.com/v2/acts/streamers~youtube-channel-scraper/run-sync-get-dataset-items\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n  \\\"maxResultStreams\\\": 10,\\n  \\\"maxResults\\\": 10,\\n  \\\"maxResultsShorts\\\": 0,\\n  \\\"oldestPostDate\\\": \\\"2025-01-01\\\",\\n  \\\"startUrls\\\": [\\n    {\\n      \\\"url\\\": \\\"https://www.youtube.com/@n8n-io\\\",\\n      \\\"method\\\": \\\"GET\\\"\\n    }\\n  ]\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"SV9BDKc1cRbZBeoL\",\n          \"name\": \"Apify.com (personal token)\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"06384b2c-c30f-457e-94d8-976b187ff633\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        60,\n        -640\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 860,\n        \"height\": 560,\n        \"content\": \"## 2. 使用[Apify.com](https://www.apify.com?fpr=414q6)获取视频字幕\\n[详细了解子工作流](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflowtrigger)\\n\\n**注意：在编辑模式下您不会看到此步骤运行！它会在后台执行——请查看执行记录选项卡！**\\n我选择使用子工作流来提升性能，因为若采用其他方式将字幕处理成嵌入向量，往往会在客户端积累大量数据。这里我们再次通过Apify的Youtube爬虫下载视频字幕——需说明的是，严格来说这些是自动生成的字幕，但完全能满足我们的需求。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7a22fa36-955a-4586-8022-bcaa07950621\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        940,\n        -740\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 1200,\n        \"height\": 660,\n        \"content\": \"## 3. 填充Qdrant向量存储以构建搜索索引\\n[了解更多关于Qdrant向量存储的信息](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreqdrant)\\n\\n使用Qdrant通常是我的个人偏好，但在这个模板中，我发现其高级搜索API有一个绝佳的应用场景，这一点我们稍后会讲到。由于文本记录的大小限制，我们不得不将其分解成更小的块来填充向量存储。请注意，元数据对于后续的过滤将极为重要，因此最佳实践是，始终提前花些时间设计如何利用元数据！\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"063c6f34-0972-4c2e-a3db-d3e3158015b7\",\n      \"name\": \"Chunks to Items\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        1020,\n        -400\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldToSplitOut\": \"vtt\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a088b16e-d518-4746-9f03-6ab0a2a46fc0\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1180,\n        80\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 680,\n        \"height\": 520,\n        \"content\": \"## 4. 带速率限制的搜索API\\n[了解更多Redis信息](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.redis)\\n\\nWebhook是使用n8n构建简单API的绝佳功能。这个特定的Webhook将作为您的搜索API，接收用户查询作为输入，搜索我们的n8n视频向量存储库，并返回匹配结果列表作为输出。Redis计数器可用作简单的速率限制器来管理资源——但如果您要将WebUI公开发布，可以放心移除该功能。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3a9d011d-fa8f-4dc0-8e7b-d7e9990f9485\",\n      \"name\": \"429 Response\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -360,\n        460\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"7c4bd999-49b1-4532-89ca-c53e98da6b17\",\n              \"name\": \"text\",\n              \"type\": \"string\",\n              \"value\": \"={{ '' }}\"\n            },\n            {\n              \"id\": \"916221de-2ec9-4fd9-8029-d7a3de88f395\",\n              \"name\": \"results\",\n              \"type\": \"string\",\n              \"value\": \"=<div id=\\\"resultsCount\\\">Search Limit Reached!</div>\\n<div>\\nSearch requests are limited to 3 per minute.\\n<br/>Need more? Download the free template and run it yourself!\\n</div>\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"c4263da3-bc5f-470b-8ace-b03a88b650af\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -480,\n        -20\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 1080,\n        \"height\": 680,\n        \"content\": \"## 5. Qdrant高级搜索 - 点组功能  \\n[详细了解Qdrant的搜索分组API](https://qdrant.tech/documentation/concepts/search/#search-groups)  \\n\\n我们的目标是返回与用户查询相关的视频及其对应时间戳。虽然可以使用简单的相似性搜索，但问题在于搜索结果可能会过度集中在第一、第二个视频上。若想增加覆盖广度（即展示更多视频），则可使用Qdrant的搜索分组API。该API通过元数据对结果进行分组，允许您设定每个视频返回结果数的上限。需要注意的是，由于n8n暂不支持此API，我们将使用HTTP请求节点——**请务必提前配置该节点的鉴权信息！**\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5c655b2c-1986-499b-b89d-563e2f755986\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        640,\n        -20\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 800,\n        \"height\": 640,\n        \"content\": \"## 6. 利用AI实现上下文感知的转录本理解\\n[了解更多关于信息提取器的内容](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor)\\n\\nAI/LLM数据提取的一大应用亮点在于，它能大幅节省传统上需通过编码实现的解析工作量。在此场景中，我们提供原始转录文本块，AI将协助我们仅筛选出带有时间戳的相关部分，以回应用户的查询。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f825ab4a-b88d-46af-b2f2-271c6b22665c\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1460,\n        -20\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 1180,\n        \"height\": 620,\n        \"content\": \"## 7. 生成结果HTML模板\\n[了解更多关于编辑字段节点的信息](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set)\\n\\n当我们获取到提取的文本片段后，只需重新整合结果并构建要呈现给用户的结果列表HTML。我采用了优秀的**htmx**（htmx.org）框架来构建Web界面，它特别适合单页应用程序。生成的结果HTML模板深受其影响，因此如果您不熟悉可能会觉得有些陌生。请随意使用您习惯的任何方式！\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"1ed3a232-6c03-4cef-806b-7030615b1e98\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2660,\n        -20\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 600,\n        \"height\": 560,\n        \"content\": \"## 8. 汇总结果生成答案\\n[详细了解基础LLM节点](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\\n\\n这是基于搜索结果尝试回答用户查询的贴心附加用户体验环节。对于这种简单提示任务，基础LLM节点再合适不过。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4d5b1466-8bb8-42e7-9cee-275aa4c905df\",\n      \"name\": \"Sticky Note8\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        3280,\n        -20\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 600,\n        \"height\": 560,\n        \"content\": \"## 9. 返回答案与搜索结果\\n[了解更多关于webhook节点的信息](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.respondtowebhook/)\\n\\n最后，我们将AI生成的答案和结果列表组合成HTML格式的响应，返回给网页界面。\\n呼——这一路走来可真不容易！除了这个模板外，你还可以尝试不同的搜索参数或方法来降低延迟、包含其他内容类型等等。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"07edb5ea-a4ad-4b06-91f2-9bdc2d5150a4\",\n      \"name\": \"Sticky Note9\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1180,\n        700\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 840,\n        \"height\": 480,\n        \"content\": \"## 10. 使用Web UI的N8N视频搜索前端\\n[了解更多关于HTML节点的信息](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html/)\\n\\n使用n8n构建和部署简单网页非常容易，特别适合不想过多操心技术细节的用户。当n8n模板设置为激活状态后，您只需访问[https://<n8n_url>/webhook/n8n_video](/webhook/n8n_video)即可使用该功能。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8a9593fc-5a7a-4da9-b7d4-a128c0d36e8e\",\n      \"name\": \"Render Page\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        -760,\n        920\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 200,\n          \"responseHeaders\": {\n            \"entries\": [\n              {\n                \"name\": \"Content-Type\",\n                \"value\": \"text/html\"\n              }\n            ]\n          }\n        },\n        \"respondWith\": \"text\",\n        \"responseBody\": \"={{ $json.html }}\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"8fbdd941-fba7-4f89-b216-489a6e80cef9\",\n      \"name\": \"Generate Webpage\",\n      \"type\": \"n8n-nodes-base.html\",\n      \"position\": [\n        -940,\n        920\n      ],\n      \"parameters\": {\n        \"html\": \"<!DOCTYPE html>\\n\\n<html>\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <title>N8N Videos Search</title>\\n  <link rel=\\\"stylesheet\\\" href=\\\"https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/pure-min.css\\\" integrity=\\\"sha384-X38yfunGUhNzHpBaEBsWLO+A0HDYOQi8ufWDkZ0k9e0eXz/tH3II7uKZ9msv++Ls\\\" crossorigin=\\\"anonymous\\\">\\n  <link rel=\\\"stylesheet\\\" href=\\\"https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/grids-responsive-min.css\\\" />\\n  <script src=\\\"https://unpkg.com/htmx.org@2.0.4\\\" integrity=\\\"sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+\\\" crossorigin=\\\"anonymous\\\"></script>\\n  <style>\\n    body { font-family: sans-serif;}\\n    .header { padding: 1rem 2rem; }\\n    .title { color:#000; text-decoration:none}\\n    .title-main { display:block; font-weight: 700; }\\n    .title-sub { font-size: 0.9rem; }\\n    .container { max-width: 1280px; @media screen and (min-width: 80em) { margin-left: 10rem; } }\\n    \\n    #search-panel { padding: 0 2rem 1rem; }\\n    \\n    #results-panel { padding: 0 4rem 4rem 2rem; }\\n    #results { margin: 0; padding: 0; }\\n    #results li { padding: 1rem 0 0 0; margin-left: 1rem; }\\n    .resultSource { display:inline-block; margin-bottom:0.5rem; a { text-decoration: none } }\\n    .resultSourceTitle { font-size: 0.8rem; font-weight: 700; color: #000}\\n    .resultSourceUrl { font-size: 0.8rem;}\\n    .resultContent { font-size: 0.9rem; margin-bottom:0.5rem; a { text-decoration: none; span { color: #000; } &:hover { text-decoration: underline;} } }\\n    #resultsCount { font-weight: 700;padding: 1rem 0;}\\n    #answer-legend {font-size: 0.8rem; font-weight: 700;color: blue;margin-bottom: 0.5rem;}\\n    #answer { margin-bottom: 1rem; border-left: 5px solid blue; padding-left: 1rem;  p { margin:0}}\\n    \\n    #video-panel { position:sticky;top:0; padding: 0 0 2rem; }\\n    \\n    #about-panel { padding: 1rem 0 0; border-top:1px solid #eee; h2 {font-size:1rem;;margin-bottom:1rem; } p {font-size: 0.8rem;margin-bottom:1rem;} }\\n    #about-services { font-size: 0.8rem;margin: 0;padding-left: 1rem;margin-bottom: 1rem; li { margin-bottom: 0.5rem;} }\\n  </style>\\n</head>\\n<body>\\n  <div class=\\\"container\\\">\\n      <div class=\\\"header\\\">\\n        <div class=\\\"home-menu pure-menu pure-menu-horizontal\\\">\\n          <a class=\\\"title\\\" href=\\\"/webhook/n8n_videos\\\">\\n            <span class=\\\"title-main\\\">Search the Official N8N Youtube Channel</span>\\n            <span class=\\\"title-sub\\\">Cover a wide range of videos in seconds!</span>\\n          </a>\\n        </div>\\n      </div>\\n    \\n      <div class=\\\"pure-g\\\">\\n        <div class=\\\"pure-u-1-2 pure-u-lg-3-5\\\">\\n          <div id=\\\"search-panel\\\">\\n            <form\\n              id=\\\"search-form\\\"\\n              class=\\\"pure-form\\\"\\n              hx-get=\\\"/webhook/n8n_videos/api/search\\\"\\n              hx-target=\\\"#results\\\"\\n            >\\n              <fieldset>\\n                <input\\n                  type=\\\"text\\\"\\n                  name=\\\"q\\\"\\n                  placeholder=\\\"Eg. When is the next n8n meetup?\\\"\\n                  class=\\\"pure-input-1-2\\\"\\n                  required\\n                />\\n                <select name=\\\"type\\\">\\n                  <option value=\\\"all\\\">All</option>\\n                  <option value=\\\"video\\\">Videos</option>\\n                  <option value=\\\"stream\\\">LiveStreams</option>\\n                </select>\\n                <button\\n                  type=\\\"submit\\\"\\n                  class=\\\"pure-button pure-button-primary\\\"\\n                  style=\\\"width:100px\\\"\\n                >\\n                  Search\\n                </button>\\n              </fieldset>\\n            </form>\\n          </div>\\n          <div id=\\\"results-panel\\\">\\n            <ul id=\\\"results\\\"></ul>\\n          </div>\\n        </div>\\n        <div class=\\\"pure-u-1-2 pure-u-lg-2-5\\\">\\n          <div id=\\\"video-panel\\\">\\n            <div\\n              id=\\\"ytplayer\\\"\\n              style=\\\"display:flex;align-items:center;justify-content:center;width:100%;height:320px;background-color:#eee;color:#999;font-size:0.9rem\\\"\\n            >\\n              <div>Video will show here.</div>\\n            </div>\\n          </div>\\n          <div id=\\\"about-panel\\\">\\n            <h2>About N8N Video Search</h2>\\n            <img\\n              class=\\\"logo\\\"\\n              src=\\\"https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/dscioipkxomw8gnj3h2v\\\"\\n              width=\\\"70%\\\"\\n            />\\n            <p>\\n              This demo has the ability to search recent video and livestream recordings from the official n8n.io Youtube channel.\\n              The results are picked out of the transcripts allowing users to jump to the exact timestamp relevant to their query.\\n              This application was built with the following services:\\n            </p>\\n            <ul id=\\\"about-services\\\">\\n              <li>\\n                <a href=\\\"https://www.apify.com?fpr=414q6\\\">Apify.com</a> - \\n                Searches for \\\"n8n @ scale\\\" Youtube livestream recordings and downloads the transcripts. \\n                Use my code <strong>\\\"20JIMLEUK\\\"</strong> at checkout for 20% OFF an Apify subscription (*expires May 2025).\\n              </li>\\n              <li>\\n                <a href=\\\"https://qdrant.tech\\\">Qdrant.tech</a> - \\n                Video transcripts are chunked and vectorised into a Qdrant Vector Store. Qdrant is super fast and have a robust search and filtering capabilities.\\n              </li>\\n              <li>\\n                <a href=\\\"https://n8n.partnerlinks.io/ee7izbliiw0n\\\">n8n.io</a> - \\n                n8n serves as our automation platform, backend API and frontend Interface for this demo! Really easy to put together quick AI projects like this one.\\n                <a href=\\\"https://n8n.io/creators/jimleuk/\\\">Also be sure to checkout my other free n8n x AI templates here!</a>\\n              </li>\\n            </ul>\\n            <p>\\n              <strong>Questions or Comments?</strong> Check out my forum post here!\\n            </p>\\n            <p>\\n              {{ $now.format('yyyy') }} &copy; Jim Le. \\n              If you've enjoyed this demo, connect and follow me on \\n              <a href=\\\"https://linkedin.com/in/jimleuk\\\">linkedin.com/in/jimleuk</a> and \\n              <a href=\\\"https://x.com/jimle_uk\\\">x.com/jimle_uk</a>.\\n            </p>\\n          </div>\\n        </div>\\n    </div>\\n  </div>\\n  \\n  <script>\\n    const form = document.getElementById('search-form');\\n    const button = form.querySelector('button[type=submit]');\\n\\n    document.body.addEventListener('htmx:beforeRequest', function(evt) {\\n      form.disabled = true;\\n      button.innerHTML = `<img\\n        width=\\\"16px\\\"\\n        height=\\\"16px\\\"\\n        src=\\\"https://samherbert.net/svg-loaders/svg-loaders/oval.svg\\\"\\n      />`;\\n      button.disabled = true;\\n    });\\n  \\n    document.body.addEventListener('htmx:afterRequest', function(evt) {\\n      form.disabled = false;\\n      button.innerHTML = 'Search';\\n      button.disabled = false;\\n    });\\n  </script>\\n  <script>\\n    let player;\\n\\n    function loadVideo(id,ts) {\\n      if (!player) {\\n        player = new YT.Player('ytplayer', {\\n          height: '390',\\n          width: '640',\\n          videoId: id,\\n          playerVars: {\\n            'playsinline': 1,\\n            'origin': window.location.origin,\\n            'start': ts\\n          },\\n          events: {\\n            'onReady': (event) => { event.target.playVideo(); },\\n            'onError': (event) => { console.error('onError', event) }\\n          }\\n        });\\n        return;\\n      }\\n      \\n      if (player && player.loadVideoById) {\\n        player.loadVideoById(id, ts);\\n      }\\n    }\\n\\n    // Load the YouTube API asynchronously\\n    const tag = document.createElement('script');\\n    tag.src = \\\"https://www.youtube.com/iframe_api\\\";\\n    document.body.appendChild(tag);\\n  \\n    // Create the player when API is ready\\n    function onYouTubeIframeAPIReady() {\\n      console.log('Youtube Player Ready!');\\n    }\\n  </script>\\n</body>\\n</html>\"\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"054feb14-d740-4d05-9ef5-d5c584e07eb6\",\n      \"name\": \"Markdown\",\n      \"type\": \"n8n-nodes-base.markdown\",\n      \"position\": [\n        3080,\n        180\n      ],\n      \"parameters\": {\n        \"mode\": \"markdownToHtml\",\n        \"options\": {},\n        \"markdown\": \"={{ $json.text }}\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"76c6fb4b-5b82-4115-8be4-63b6ce652793\",\n      \"name\": \"Sticky Note10\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -540,\n        880\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 540,\n        \"height\": 420,\n        \"content\": \"**图1. N8N视频搜索前端界面**\\n![网页前端截图](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/lqd2giei1ap2owjgbuth#full-width)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b8ad1b2b-ff05-46a3-a817-951d02d69b01\",\n      \"name\": \"Sticky Note11\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2160,\n        -740\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 400,\n        \"height\": 240,\n        \"content\": \"**创建Qdrant集合**\\n您可能需要手动创建qdrant集合。在qdrant仪表板的控制台中运行以下命令：\\n```\\nPUT collections/n8n_videos\\n{\\n  \\\"vectors\\\": {\\n      \\\"distance\\\": \\\"Cosine\\\",\\n      \\\"size\\\": 1536\\n  }\\n}\\n```\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"189d6973-cd09-4176-b04b-4c8feea2e653\",\n      \"name\": \"Sticky Note12\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1660,\n        -1160\n      ],\n      \"parameters\": {\n        \"width\": 440,\n        \"height\": 1080,\n        \"content\": \"## 试试看吧！\\n### 一直想为YouTube视频打造专属的RAG搜索引擎？现在机会来了！这个n8n模板将展示如何利用Apify、Qdrant和你选择的大语言模型，构建一个高效的YouTube搜索引擎，无论是学术研究还是休闲观影，都能快速浏览海量视频内容。\\n\\n最初我创建这个模板是为了在\\\"n8n规模化办公时间\\\"直播视频中提问，后来扩展至支持官方频道最新视频检索。\\n\\n**点击体验演示**：[https://jimleuk.app.n8n.cloud/webhook/n8n_videos](https://jimleuk.app.n8n.cloud/webhook/n8n_videos)\\n\\n### 工作原理\\n* **第一阶段**：通过Apify爬取YouTube视频字幕并存储至Qdrant向量数据库\\n* 字幕文本被智能分块处理，并标注丰富的元数据以优化后续搜索筛选\\n* **第二阶段**：构建可查询向量化字幕的Web前端，通过webhook提供动态响应的简易应用界面\\n* 采用Qdrant的搜索分组API，能返回更广泛的视频结果，显著提升本场景下的搜索体验\\n* 用户点击结果时，前端会通过嵌入式播放器直接跳转至对应视频时段\\n\\n### 使用指南\\n* 完成凭证配置后，首先运行1-3节点填充向量数据库\\n* 激活工作流以启用Web前端，浏览器访问[https://<n8n_url>/webhook/n8n_videos](/webhook/n8n_videos)即可使用\\n* 若仅供个人使用，可移除第4节点的速率限制机制\\n\\n### 定制建议\\n* 对n8n官方视频不感兴趣？轻松替换为其他频道\\n* 处理字幕文本时，Google Gemini模型可能表现更优\\n\\n### 需要帮助？\\n加入[Discord社区](https://discord.com/invite/XPKeKXeB7d)或访问[官方论坛](https://community.n8n.io/)提问！\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a39f0990-6638-4b07-82ca-e91a9a289dfc\",\n      \"name\": \"Has Results?1\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        180,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"0eb32753-8fd7-4266-a32f-a8f51bf77e93\",\n              \"operator\": {\n                \"type\": \"array\",\n                \"operation\": \"notEmpty\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.result.groups }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"2552bce4-587f-45ee-8702-7c919978c87e\",\n      \"name\": \"Generate Empty Response1\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        180,\n        460\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"7c4bd999-49b1-4532-89ca-c53e98da6b17\",\n              \"name\": \"text\",\n              \"type\": \"string\",\n              \"value\": \"={{ '' }}\"\n            },\n            {\n              \"id\": \"916221de-2ec9-4fd9-8029-d7a3de88f395\",\n              \"name\": \"results\",\n              \"type\": \"string\",\n              \"value\": \"=<div id=\\\"resultsCount\\\">0 Video Results</div>\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"9e9d74c0-3693-4f6f-b406-0ad9a8592c09\",\n      \"name\": \"Respond to Webhook4\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        380,\n        460\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 200\n        },\n        \"respondWith\": \"text\",\n        \"responseBody\": \"=<div id=\\\"answer\\\">{{ $json.text }}</div>\\n{{ $json.results }}\"\n      },\n      \"executeOnce\": false,\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"e39b205e-1574-4ce6-a87a-a0e090ca3e33\",\n      \"name\": \"Groups to Items1\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        380,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldToSplitOut\": \"result.groups\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"96e5844a-090b-4e1d-b40a-e0ccf58eac13\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        1080,\n        460\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"8gccIjcuf3gvaoEr\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"03c3b930-c677-45e1-974c-8e6fc43acd56\",\n      \"name\": \"OpenAI Chat Model1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        2760,\n        340\n      ],\n      \"parameters\": {\n        \"model\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\"\n        },\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"8gccIjcuf3gvaoEr\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Wait\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"For Each Chunk\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"WEB UI\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate Webpage\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Markdown\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Map Fields\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"10req/min\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Query\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"429 Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Query\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Embeddings\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Group Ref\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract Results\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Video Ref\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Video Subtitles\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Embeddings\": {\n      \"ai_embedding\": [\n        [\n          {\n            \"node\": \"Qdrant Vector Store\",\n            \"type\": \"ai_embedding\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Map Fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"SEARCH API\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Incr Rate Limit\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"429 Response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Answer Query\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Markdown\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Has Results?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Transcripts to Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Generate Empty Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Has Results?1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Groups to Items1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Generate Empty Response1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Text Splitter\": {\n      \"ai_textSplitter\": [\n        [\n          {\n            \"node\": \"Default Data Loader\",\n            \"type\": \"ai_textSplitter\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"For Each Chunk\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"Qdrant Vector Store\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"For Each Group\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Combine Results\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Group Ref\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"For Each Video\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"Vectorise Subworkflow\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Embeddings\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Qdrant Groups Search\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Chunk Subtitles\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Chunks to Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Chunks to Items\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"For Each Chunk\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Clean Up Output\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Sort By Video ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Combine Results\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Has Results?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract Results\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"For Each Group\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Incr Rate Limit\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"10req/min\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate Webpage\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Render Page\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Groups to Items1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"For Each Group\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Schedule Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Latest Youtube Videos\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Sort By Video ID\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate Template\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate Template\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Answer Query\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Extract Results\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model1\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Answer Query\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Default Data Loader\": {\n      \"ai_document\": [\n        [\n          {\n            \"node\": \"Qdrant Vector Store\",\n            \"type\": \"ai_document\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Video Subtitles\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Chunk Subtitles\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Ignore Already Seen\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"For Each Video\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Qdrant Vector Store\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Wait\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Qdrant Groups Search\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Has Results?1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Transcripts to Items\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Clean Up Output\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Vectorise Subworkflow\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"For Each Video\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Vectorise Subworkflow1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Video Ref\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate Empty Response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate Empty Response1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook4\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Latest Youtube Videos\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Ignore Already Seen\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Latest Youtube Videos\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}