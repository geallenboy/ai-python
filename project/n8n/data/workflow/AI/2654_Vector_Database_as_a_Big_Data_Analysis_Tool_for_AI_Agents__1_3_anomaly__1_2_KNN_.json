{
  "title": "Vector Database as a Big Data Analysis Tool for AI Agents [1/3 anomaly][1/2 KNN]",
  "url": "https://n8n.io/workflows/2654-vector-database-as-a-big-data-analysis-tool-for-ai-agents-13-anomaly12-knn/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/?count=20",
  "author": "Jenny",
  "publish_date": "Last update 4 months ago",
  "content": "",
  "workflow_json": "{\"id\":\"pPtCy6qPfEv1qNRn\",\"meta\":{\"instanceId\":\"205b3bc06c96f2dc835b4f00e1cbf9a937a74eeb3b47c99d0c30b0586dbf85aa\"},\"name\":\"[1/3 - anomaly detection] [1/2 - KNN classification] Batch upload dataset to Qdrant (crops dataset)\",\"tags\":[{\"id\":\"n3zAUYFhdqtjhcLf\",\"name\":\"qdrant\",\"createdAt\":\"2024-12-10T11:56:59.987Z\",\"updatedAt\":\"2024-12-10T11:56:59.987Z\"}],\"nodes\":[{\"id\":\"53831410-b4f3-4374-8bdd-c2a33cd873cb\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[-640,0],\"parameters\":{},\"typeVersion\":1},{\"id\":\"e303ccea-c0e0-4fe5-bd31-48380a0e438f\",\"name\":\"Google Cloud Storage\",\"type\":\"n8n-nodes-base.googleCloudStorage\",\"position\":[820,160],\"parameters\":{\"resource\":\"object\",\"returnAll\":true,\"bucketName\":\"n8n-qdrant-demo\",\"listFilters\":{\"prefix\":\"agricultural-crops\"},\"requestOptions\":{}},\"credentials\":{\"googleCloudStorageOAuth2Api\":{\"id\":\"fn0sr7grtfprVQvL\",\"name\":\"Google Cloud Storage account\"}},\"typeVersion\":1},{\"id\":\"737bdb15-61cf-48eb-96af-569eb5986ee8\",\"name\":\"Get fields for Qdrant\",\"type\":\"n8n-nodes-base.set\",\"position\":[1080,160],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"10d9147f-1c0c-4357-8413-3130829c2e24\",\"name\":\"=publicLink\",\"type\":\"string\",\"value\":\"=https://storage.googleapis.com/{{ $json.bucket }}/{{ $json.selfLink.split('/').splice(-1) }}\"},{\"id\":\"ff9e6a0b-e47a-4550-a13b-465507c75f8f\",\"name\":\"cropName\",\"type\":\"string\",\"value\":\"={{ $json.id.split('/').slice(-3, -2)[0].toLowerCase()}}\"}]}},\"typeVersion\":3.4},{\"id\":\"2b18ed0c-38d3-49e9-be3d-4f7b35f4d9e5\",\"name\":\"Qdrant cluster variables\",\"type\":\"n8n-nodes-base.set\",\"position\":[-360,0],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"58b7384d-fd0c-44aa-9f8e-0306a99be431\",\"name\":\"qdrantCloudURL\",\"type\":\"string\",\"value\":\"=https://152bc6e2-832a-415c-a1aa-fb529f8baf8d.eu-central-1-0.aws.cloud.qdrant.io\"},{\"id\":\"e34c4d88-b102-43cc-a09e-e0553f2da23a\",\"name\":\"collectionName\",\"type\":\"string\",\"value\":\"=agricultural-crops\"},{\"id\":\"33581e0a-307f-4380-9533-615791096de7\",\"name\":\"VoyageEmbeddingsDim\",\"type\":\"number\",\"value\":1024},{\"id\":\"6e390343-2cd2-4559-aba9-82b13acb7f52\",\"name\":\"batchSize\",\"type\":\"number\",\"value\":4}]}},\"typeVersion\":3.4},{\"id\":\"f88d290e-3311-4322-b2a5-1350fc1f8768\",\"name\":\"Embed crop image\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2120,160],\"parameters\":{\"url\":\"https://api.voyageai.com/v1/multimodalembeddings\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"inputs\\\": $json.batchVoyage,\\n  \\\"model\\\": \\\"voyage-multimodal-3\\\",\\n  \\\"input_type\\\": \\\"document\\\"\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\"},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"Vb0RNVDnIHmgnZOP\",\"name\":\"Voyage API\"}},\"typeVersion\":4.2},{\"id\":\"250c6a8d-f545-4037-8069-c834437bbe15\",\"name\":\"Create Qdrant Collection\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[320,160],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}\",\"method\":\"PUT\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"vectors\\\": {\\n    \\\"voyage\\\": { \\n      \\\"size\\\": $('Qdrant cluster variables').first().json.VoyageEmbeddingsDim, \\n      \\\"distance\\\": \\\"Cosine\\\" \\n    } \\n  }\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"20b612ff-4794-43ef-bf45-008a16a2f30f\",\"name\":\"Check Qdrant Collection Existence\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-100,0],\"parameters\":{\"url\":\"={{ $json.qdrantCloudURL }}/collections/{{ $json.collectionName }}/exists\",\"options\":{},\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"c067740b-5de3-452e-a614-bf14985a73a0\",\"name\":\"Batches in the API's format\",\"type\":\"n8n-nodes-base.set\",\"position\":[1860,160],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"f14db112-6f15-4405-aa47-8cb56bb8ae7a\",\"name\":\"=batchVoyage\",\"type\":\"array\",\"value\":\"={{ $json.batch.map(item => ({ \\\"content\\\": ([{\\\"type\\\": \\\"image_url\\\", \\\"image_url\\\": item[\\\"publicLink\\\"]}])}))}}\"},{\"id\":\"3885fd69-66f5-4435-86a4-b80eaa568ac1\",\"name\":\"=batchPayloadQdrant\",\"type\":\"array\",\"value\":\"={{ $json.batch.map(item => ({\\\"crop_name\\\":item[\\\"cropName\\\"], \\\"image_path\\\":item[\\\"publicLink\\\"]})) }}\"},{\"id\":\"8ea7a91e-af27-49cb-9a29-41dae15c4e33\",\"name\":\"uuids\",\"type\":\"array\",\"value\":\"={{ $json.uuids }}\"}]}},\"typeVersion\":3.4},{\"id\":\"bf9a9532-db64-4c02-b91d-47e708ded4d3\",\"name\":\"Batch Upload to Qdrant\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2320,160],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points\",\"method\":\"PUT\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"batch\\\": {\\n      \\\"ids\\\" : $('Batches in the API\\\\'s format').item.json.uuids,\\n      \\\"vectors\\\": {\\\"voyage\\\": $json.data.map(item => item[\\\"embedding\\\"]) },\\n      \\\"payloads\\\": $('Batches in the API\\\\'s format').item.json.batchPayloadQdrant\\n  }\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"3c30373f-c84c-405f-bb84-ec8b4c7419f4\",\"name\":\"Split in batches, generate uuids for Qdrant points\",\"type\":\"n8n-nodes-base.code\",\"position\":[1600,160],\"parameters\":{\"language\":\"python\",\"pythonCode\":\"import uuid\\n\\ncrops = [item.json for item in _input.all()]\\nbatch_size = int(_('Qdrant cluster variables').first()['json']['batchSize'])\\n\\ndef split_into_batches_add_uuids(array, batch_size):\\n    return [\\n      {\\n        \\\"batch\\\": array[i:i + batch_size],\\n        \\\"uuids\\\": [str(uuid.uuid4()) for j in range(len(array[i:i + batch_size]))]\\n      }\\n       for i in range(0, len(array), batch_size)\\n    ]\\n\\n# Split crops into batches\\nbatched_crops = split_into_batches_add_uuids(crops, batch_size)\\n\\nreturn batched_crops\"},\"typeVersion\":2},{\"id\":\"2b028f8c-0a4c-4a3a-9e2b-14b1c2401c6d\",\"name\":\"If collection exists\",\"type\":\"n8n-nodes-base.if\",\"position\":[120,0],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"2104b862-667c-4a34-8888-9cb81a2e10f8\",\"operator\":{\"type\":\"boolean\",\"operation\":\"true\",\"singleValue\":true},\"leftValue\":\"={{ $json.result.exists }}\",\"rightValue\":\"true\"}]}},\"typeVersion\":2.2},{\"id\":\"768793f6-391e-4cc9-b637-f32ee2f77156\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[500,340],\"parameters\":{\"width\":280,\"height\":200,\"content\":\"In the next workflow, we're going to use Qdrant to get the number of images belonging to each crop type defined by `crop_name` (for example, *\\\"cucumber\\\"*). \\nTo get this information about counts in payload fields, we need to create an index on that field to optimise the resources (it needs to be done once). That's what is happening here\"},\"typeVersion\":1},{\"id\":\"0c8896f7-8c57-4add-bc4d-03c4a774bdf1\",\"name\":\"Payload index on crop_name\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[500,160],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/index\",\"method\":\"PUT\",\"options\":{},\"jsonBody\":\"={\\n  \\\"field_name\\\": \\\"crop_name\\\",\\n  \\\"field_schema\\\": \\\"keyword\\\"\\n}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"342186f6-41bf-46be-9be8-a9b1ca290d55\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-360,-360],\"parameters\":{\"height\":300,\"content\":\"Setting up variables\\n1) Cloud URL - to connect to Qdrant Cloud (your personal cluster URL)\\n2) Collection name in Qdrant\\n3) Size of Voyage embeddings (needed for collection creation in Qdrant) <this one should not be changed unless the embedding model is changed>\\n4) Batch size for batch embedding/batch uploading to Qdrant \"},\"typeVersion\":1},{\"id\":\"fae9248c-dbcc-4b6d-b977-0047f120a587\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-100,-220],\"parameters\":{\"content\":\"In Qdrant, you can create a collection once; if you try to create it two times with the same name, you'll get an error, so I am adding here a check if a collection with this name exists already\"},\"typeVersion\":1},{\"id\":\"f7aea242-3d98-4a1c-a98a-986ac2b4928b\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[180,340],\"parameters\":{\"height\":280,\"content\":\"If a collection with the name set up in variables doesn't exist yet, I create an empty one; \\n\\nCollection will contain [named vectors](https://qdrant.tech/documentation/concepts/vectors/#named-vectors), with a name *\\\"voyage\\\"*\\nFor these named vectors, I define two parameters:\\n1) Vectors size (in our case, Voyage embeddings size)\\n2) Similarity metric to compare embeddings: in our case, **\\\"Cosine\\\"**.\\n\"},\"typeVersion\":1},{\"id\":\"b84045c1-f66a-4543-8d42-1e76de0b6e91\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[800,-280],\"parameters\":{\"height\":400,\"content\":\"Now it's time to embed & upload to Qdrant  our image datasets;\\nBoth of them, [crops](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification) and [lands](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification) were uploaded to our Google Cloud Storage bucket, and in this workflow we're fetching **the crops dataset** (for lands it will be a nearly identical workflow, up to variable names)\\n(you should replace it with your image datasets)\\n\\nDatasets consist of **image URLs**; images are grouped by folders based on their class. For example, we have a system of subfolders like *\\\"tomato\\\"* and *\\\"cucumber\\\"* for the crops dataset with image URLs of the respective class.\\n\"},\"typeVersion\":1},{\"id\":\"255dfad8-c545-4d75-bc9c-529aa50447a9\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1080,-140],\"parameters\":{\"height\":240,\"content\":\"Google Storage node returns **mediaLink**, which can be used directly for downloading images; however, we just need a public image URL so that Voyage API can process it; so here we construct this public link and extract a crop name from the folder in which image was stored (for example, *\\\"cucumber\\\"*)\\n\"},\"typeVersion\":1},{\"id\":\"a6acce75-cce0-4de3-bc64-37592c97359b\",\"name\":\"Sticky Note6\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1600,-80],\"parameters\":{\"height\":180,\"content\":\"I regroup images into batches of `batchSize` size and, to make batch upload to Qdrant possible, generate UUIDs to use them as batch [point IDs](https://qdrant.tech/documentation/concepts/points/#point-ids) (Qdrant doesn't set up id's for the user; users have to choose them themselves)\"},\"typeVersion\":1},{\"id\":\"cab3cc83-b50c-41f4-8d51-59e04bba5556\",\"name\":\"Sticky Note7\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1340,-60],\"parameters\":{\"content\":\"Since we build anomaly detection based on the crops dataset, to test it properly, I didn't upload to Qdrant pictures of tomatoes at all; I filter them out here\"},\"typeVersion\":1},{\"id\":\"e5cdcce5-efdc-41f2-9796-656bd345f783\",\"name\":\"Sticky Note9\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1860,-100],\"parameters\":{\"height\":200,\"content\":\"Since Voyage API requires a [specific json structure](https://docs.voyageai.com/reference/multimodal-embeddings-api) for batch embeddings, as does [Qdrant's API for uploading points in batches](https://api.qdrant.tech/api-reference/points/upsert-points), I am adapting the structure of jsons\\n\\n[NB] - [payload = meta data in Qdrant]\"},\"typeVersion\":1},{\"id\":\"a7f15c44-3d5c-4b43-bfb2-94fe27a32071\",\"name\":\"Sticky Note11\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2120,20],\"parameters\":{\"width\":180,\"height\":80,\"content\":\"Embedding images with Voyage model (mind `input_type`)\"},\"typeVersion\":1},{\"id\":\"01b92e7e-d954-4d58-85b1-109c336546c4\",\"name\":\"Filtering out tomato to test anomalies\",\"type\":\"n8n-nodes-base.filter\",\"position\":[1340,160],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"f7953ae2-5333-4805-abe5-abf6da645c5e\",\"operator\":{\"type\":\"string\",\"operation\":\"notEquals\"},\"leftValue\":\"={{ $json.cropName }}\",\"rightValue\":\"tomato\"}]}},\"typeVersion\":2.2},{\"id\":\"8d564817-885e-453a-a087-900b34b84d9c\",\"name\":\"Sticky Note8\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1160,-280],\"parameters\":{\"width\":440,\"height\":460,\"content\":\"## Batch Uploading Dataset to Qdrant \\n### This template imports dataset images from storage, creates embeddings for them in batches, and uploads them to Qdrant in batches. In this particular template, we work with [crops dataset](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification). However, it's analogous to [lands dataset](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification), and in general, it's adaptable to any dataset consisting of image URLs (as the following pipelines are).\\n\\n* First, check for an existing Qdrant collection to use; otherwise, create it here. Additionally, when creating the collection, we'll create a [payload index](https://qdrant.tech/documentation/concepts/indexing/#payload-index), which is required for a particular type of Qdrant requests we will use later.\\n* Next, import all (dataset) images from Google Storage but keep only non-tomato-related ones (for anomaly detection testing).\\n* Create (per batch) embeddings for all imported images using the Voyage AI multimodal embeddings API.\\n* Finally, upload the resulting embeddings and image descriptors to Qdrant via batch uploading.\"},\"typeVersion\":1},{\"id\":\"0233d3d0-bbdf-4d5b-a366-53cbfa4b6f9c\",\"name\":\"Sticky Note10\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-860,360],\"parameters\":{\"color\":4,\"width\":540,\"height\":420,\"content\":\"### For anomaly detection\\n**1. This is the first pipeline to upload (crops) dataset to Qdrant's collection.**\\n2. The second pipeline is to set up cluster (class) centres in this Qdrant collection & cluster (class) threshold scores.\\n3. The third is the anomaly detection tool, which takes any image as input and uses all preparatory work done with Qdrant (crops) collection.\\n\\n### For KNN (k nearest neighbours) classification\\n**1. This is the first pipeline to upload (lands) dataset to Qdrant's collection.**\\n2. The second is the KNN classifier tool, which takes any image as input and classifies it based on queries to the Qdrant (lands) collection.\\n\\n### To recreate both\\nYou'll have to upload [crops](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification) and [lands](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification) datasets from Kaggle to your own Google Storage bucket, and re-create APIs/connections to [Qdrant Cloud](https://qdrant.tech/documentation/quickstart-cloud/) (you can use **Free Tier** cluster), Voyage AI API & Google Cloud Storage\\n\\n**In general, pipelines are adaptable to any dataset of images**\\n\"},\"typeVersion\":1}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"27776c4a-3bf9-4704-9c13-345b75ffacc0\",\"connections\":{\"Embed crop image\":{\"main\":[[{\"node\":\"Batch Upload to Qdrant\",\"type\":\"main\",\"index\":0}]]},\"Google Cloud Storage\":{\"main\":[[{\"node\":\"Get fields for Qdrant\",\"type\":\"main\",\"index\":0}]]},\"If collection exists\":{\"main\":[[{\"node\":\"Google Cloud Storage\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Create Qdrant Collection\",\"type\":\"main\",\"index\":0}]]},\"Get fields for Qdrant\":{\"main\":[[{\"node\":\"Filtering out tomato to test anomalies\",\"type\":\"main\",\"index\":0}]]},\"Batch Upload to Qdrant\":{\"main\":[[]]},\"Create Qdrant Collection\":{\"main\":[[{\"node\":\"Payload index on crop_name\",\"type\":\"main\",\"index\":0}]]},\"Qdrant cluster variables\":{\"main\":[[{\"node\":\"Check Qdrant Collection Existence\",\"type\":\"main\",\"index\":0}]]},\"Payload index on crop_name\":{\"main\":[[{\"node\":\"Google Cloud Storage\",\"type\":\"main\",\"index\":0}]]},\"Batches in the API's format\":{\"main\":[[{\"node\":\"Embed crop image\",\"type\":\"main\",\"index\":0}]]},\"Check Qdrant Collection Existence\":{\"main\":[[{\"node\":\"If collection exists\",\"type\":\"main\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"Qdrant cluster variables\",\"type\":\"main\",\"index\":0}]]},\"Filtering out tomato to test anomalies\":{\"main\":[[{\"node\":\"Split in batches, generate uuids for Qdrant points\",\"type\":\"main\",\"index\":0}]]},\"Split in batches, generate uuids for Qdrant points\":{\"main\":[[{\"node\":\"Batches in the API's format\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "# Vector Database as a Big Data Analysis Tool for AI Agents\n\nWorkflows from the webinar [\"Build production-ready AI Agents with Qdrant and n8n\"](https://www.youtube.com/watch?v=_BQTnXpuH-E).\n\nThis series of workflows shows how to build big data analysis tools for production-ready AI agents with the help of vector databases. These pipelines are adaptable to any dataset of images, hence, many production use cases.\n\n  1. **[Uploading (image) datasets to Qdrant](https://n8n.io/workflows/2654-uploading-image-datasets-to-qdrant-13-anomaly12-knn/)**\n  2. [Set up meta-variables for anomaly detection in Qdrant](https://n8n.io/workflows/2655-set-up-cluster-centresandthresholds-for-anomaly-detection-23-anomaly/)\n  3. [Anomaly detection tool](https://n8n.io/workflows/2656-anomaly-images-detection-tool-33-anomaly/)\n  4. [KNN classifier tool](https://n8n.io/workflows/2657-knn-images-classifier-tool-22-knn/)\n\n\n\n### For anomaly detection\n\n**1\\. This is the first pipeline to upload an image dataset to Qdrant.**  \n2\\. The second pipeline is to set up cluster (class) centres & cluster (class) threshold scores needed for anomaly detection.  \n3\\. The third is the anomaly detection tool, which takes any image as input and uses all preparatory work done with Qdrant to detect if it's an anomaly to the uploaded dataset.\n\n### For KNN (k nearest neighbours) classification\n\n**1\\. This is the first pipeline to upload an image dataset to Qdrant.**  \n2\\. The second is the KNN classifier tool, which takes any image as input and classifies it on the uploaded to Qdrant dataset.\n\n### To recreate both\n\nYou'll have to upload [crops](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification) and [lands](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification) datasets from Kaggle to your own Google Storage bucket, and re-create APIs/connections to [Qdrant Cloud](https://qdrant.tech/documentation/quickstart-cloud/) (you can use [Free Tier](https://cloud.qdrant.io/login) cluster), [Voyage AI API](https://www.voyageai.com/) & Google Cloud Storage.\n\n## [This workflow] Batch Uploading Images Dataset to Qdrant\n\nThis template imports dataset images from Google Could Storage, creates Voyage AI embeddings for them in batches, and uploads them to Qdrant, also in batches. In this particular template, we work with [crops dataset](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification). However, it's analogous to uploading [lands dataset](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification), and in general, it's adaptable to any dataset consisting of image URLs (as the following pipelines are).\n\n  * First, check for an existing Qdrant collection to use; otherwise, create it here. Additionally, when creating the collection, we'll create a [payload index](https://qdrant.tech/documentation/concepts/indexing/#payload-index), which is required for a particular type of Qdrant requests we will use later.\n  * Next, import all (dataset) images from Google Cloud Storage but keep only non-tomato-related ones (for anomaly detection testing).\n  * Create (per batch) embeddings for all imported images using the Voyage AI multimodal embeddings API.\n  * Finally, upload the resulting embeddings and image descriptors to Qdrant via batch upload.\n\n\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><h1>Vector Database as a Big Data Analysis Tool for AI Agents</h1>\n<p>Workflows from the webinar <a href=\"https://www.youtube.com/watch?v=_BQTnXpuH-E\" rel=\"ugc nofollow\" target=\"_blank\">\"Build production-ready AI Agents with Qdrant and n8n\"</a>.</p>\n<p>This series of workflows shows how to build big data analysis tools for production-ready AI agents with the help of vector databases. These pipelines are adaptable to any dataset of images, hence, many production use cases.</p>\n<ol>\n<li><strong><a href=\"https://n8n.io/workflows/2654-uploading-image-datasets-to-qdrant-13-anomaly12-knn/\" rel=\"ugc nofollow\" target=\"_blank\">Uploading (image) datasets to Qdrant</a></strong></li>\n<li><a href=\"https://n8n.io/workflows/2655-set-up-cluster-centresandthresholds-for-anomaly-detection-23-anomaly/\" rel=\"ugc nofollow\" target=\"_blank\">Set up meta-variables for anomaly detection in Qdrant</a></li>\n<li><a href=\"https://n8n.io/workflows/2656-anomaly-images-detection-tool-33-anomaly/\" rel=\"ugc nofollow\" target=\"_blank\">Anomaly detection tool</a></li>\n<li><a href=\"https://n8n.io/workflows/2657-knn-images-classifier-tool-22-knn/\" rel=\"ugc nofollow\" target=\"_blank\">KNN classifier tool</a></li>\n</ol>\n<h3>For anomaly detection</h3>\n<p><strong>1. This is the first pipeline to upload an image dataset to Qdrant.</strong><br>\n2. The second pipeline is to set up cluster (class) centres &amp; cluster (class) threshold scores needed for anomaly detection.<br>\n3. The third is the anomaly detection tool, which takes any image as input and uses all preparatory work done with Qdrant to detect if it's an anomaly to the uploaded dataset.</p>\n<h3>For KNN (k nearest neighbours) classification</h3>\n<p><strong>1. This is the first pipeline to upload an image dataset to Qdrant.</strong><br>\n2. The second is the KNN classifier tool, which takes any image as input and classifies it on the uploaded to Qdrant dataset.</p>\n<h3>To recreate both</h3>\n<p>You'll have to upload <a href=\"https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification\" rel=\"ugc nofollow\" target=\"_blank\">crops</a> and <a href=\"https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification\" rel=\"ugc nofollow\" target=\"_blank\">lands</a> datasets from Kaggle to your own Google Storage bucket, and re-create APIs/connections to <a href=\"https://qdrant.tech/documentation/quickstart-cloud/\" rel=\"ugc nofollow\" target=\"_blank\">Qdrant Cloud</a> (you can use <a href=\"https://cloud.qdrant.io/login\" rel=\"ugc nofollow\" target=\"_blank\">Free Tier</a> cluster), <a href=\"https://www.voyageai.com/\" rel=\"ugc nofollow\" target=\"_blank\">Voyage AI API</a> &amp; Google Cloud Storage.</p>\n<h2>[This workflow] Batch Uploading Images Dataset to Qdrant</h2>\n<p>This template imports dataset images from Google Could Storage, creates Voyage AI embeddings for them in batches, and uploads them to Qdrant, also in batches. In this particular template, we work with <a href=\"https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification\" rel=\"ugc nofollow\" target=\"_blank\">crops dataset</a>. However, it's analogous to uploading <a href=\"https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification\" rel=\"ugc nofollow\" target=\"_blank\">lands dataset</a>, and in general, it's adaptable to any dataset consisting of image URLs (as the following pipelines are).</p>\n<ul>\n<li>First, check for an existing Qdrant collection to use; otherwise, create it here. Additionally, when creating the collection, we'll create a <a href=\"https://qdrant.tech/documentation/concepts/indexing/#payload-index\" rel=\"ugc nofollow\" target=\"_blank\">payload index</a>, which is required for a particular type of Qdrant requests we will use later.</li>\n<li>Next, import all (dataset) images from Google Cloud Storage but keep only non-tomato-related ones (for anomaly detection testing).</li>\n<li>Create (per batch) embeddings for all imported images using the Voyage AI multimodal embeddings API.</li>\n<li>Finally, upload the resulting embeddings and image descriptors to Qdrant via batch upload.</li>\n</ul>\n</div><!--]-->",
  "readme_zh": "# 向量数据库作为AI代理的大数据分析工具\n\n来自网络研讨会[\"使用Qdrant和n8n构建生产级AI代理\"](https://www.youtube.com/watch?v=_BQTnXpuH-E)的工作流程。\n\n本系列工作流程展示了如何借助向量数据库为生产级AI代理构建大数据分析工具。这些管道可适配任何图像数据集，因此适用于众多生产场景。\n\n  1. **[将（图像）数据集上传至Qdrant](https://n8n.io/workflows/2654-uploading-image-datasets-to-qdrant-13-anomaly12-knn/)**\n  2. [为Qdrant中的异常检测设置元变量](https://n8n.io/workflows/2655-set-up-cluster-centresandthresholds-for-anomaly-detection-23-anomaly/)\n  3. [异常检测工具](https://n8n.io/workflows/2656-anomaly-images-detection-tool-33-anomaly/)\n  4. [KNN分类器工具](https://n8n.io/workflows/2657-knn-images-classifier-tool-22-knn/)\n\n### 异常检测模块\n\n**1. 首个管道用于将图像数据集上传至Qdrant**  \n2. 第二个管道用于设置异常检测所需的聚类（类别）中心点及阈值分数  \n3. 第三个是异常检测工具，可接收任意图像输入，利用Qdrant完成的所有准备工作来检测该图像是否属于已上传数据集的异常值\n\n### KNN（K近邻）分类模块\n\n**1. 首个管道用于将图像数据集上传至Qdrant**  \n2. 第二个是KNN分类器工具，可接收任意图像输入并根据上传至Qdrant的数据集进行分类\n\n### 完整重建说明\n\n您需要将Kaggle的[农作物](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification)和[土地](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification)数据集上传至自己的Google存储桶，并重建与[Qdrant云服务](https://qdrant.tech/documentation/quickstart-cloud/)（可使用[免费版](https://cloud.qdrant.io/login)集群）、[Voyage AI API](https://www.voyageai.com/)及Google云存储的API连接。\n\n## [本工作流] 批量上传图像数据集至Qdrant\n\n本模板从Google云存储导入数据集图像，通过批量方式创建Voyage AI嵌入向量，并同样以批量方式上传至Qdrant。本模板特例使用[农作物数据集](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification)，但其原理同样适用于上传[土地数据集](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification)，且整体可适配任何包含图像URL的数据集（后续管道亦适用）。\n\n  * 首先检查现有Qdrant集合以供使用，否则在此新建。创建集合时，我们将建立[有效载荷索引](https://qdrant.tech/documentation/concepts/indexing/#payload-index)，这是后续特定类型Qdrant请求的必要条件\n  * 接着从Google云存储导入所有（数据集）图像，但仅保留非番茄类图像（用于异常检测测试）\n  * 使用Voyage AI多模态嵌入API为所有导入图像创建（每批次）嵌入向量\n  * 最后通过批量上传将生成的嵌入向量和图像描述符上传至Qdrant",
  "title_zh": "向量数据库作为AI代理的大数据分析工具 [1/3异常值][1/2最近邻]",
  "publish_date_absolute": "2025-01-06",
  "publish_date_zh": "最后更新于4个月前",
  "workflow_json_zh": "{\n  \"id\": \"pPtCy6qPfEv1qNRn\",\n  \"meta\": {\n    \"instanceId\": \"205b3bc06c96f2dc835b4f00e1cbf9a937a74eeb3b47c99d0c30b0586dbf85aa\"\n  },\n  \"name\": \"[1/3 - anomaly detection] [1/2 - KNN classification] Batch upload dataset to Qdrant (crops dataset)\",\n  \"tags\": [\n    {\n      \"id\": \"n3zAUYFhdqtjhcLf\",\n      \"name\": \"qdrant\",\n      \"createdAt\": \"2024-12-10T11:56:59.987Z\",\n      \"updatedAt\": \"2024-12-10T11:56:59.987Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"53831410-b4f3-4374-8bdd-c2a33cd873cb\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -640,\n        0\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e303ccea-c0e0-4fe5-bd31-48380a0e438f\",\n      \"name\": \"Google Cloud Storage\",\n      \"type\": \"n8n-nodes-base.googleCloudStorage\",\n      \"position\": [\n        820,\n        160\n      ],\n      \"parameters\": {\n        \"resource\": \"object\",\n        \"returnAll\": true,\n        \"bucketName\": \"n8n-qdrant-demo\",\n        \"listFilters\": {\n          \"prefix\": \"agricultural-crops\"\n        },\n        \"requestOptions\": {}\n      },\n      \"credentials\": {\n        \"googleCloudStorageOAuth2Api\": {\n          \"id\": \"fn0sr7grtfprVQvL\",\n          \"name\": \"Google Cloud Storage account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"737bdb15-61cf-48eb-96af-569eb5986ee8\",\n      \"name\": \"Get fields for Qdrant\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1080,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"10d9147f-1c0c-4357-8413-3130829c2e24\",\n              \"name\": \"=publicLink\",\n              \"type\": \"string\",\n              \"value\": \"=https://storage.googleapis.com/{{ $json.bucket }}/{{ $json.selfLink.split('/').splice(-1) }}\"\n            },\n            {\n              \"id\": \"ff9e6a0b-e47a-4550-a13b-465507c75f8f\",\n              \"name\": \"cropName\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.id.split('/').slice(-3, -2)[0].toLowerCase()}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"2b18ed0c-38d3-49e9-be3d-4f7b35f4d9e5\",\n      \"name\": \"Qdrant cluster variables\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -360,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"58b7384d-fd0c-44aa-9f8e-0306a99be431\",\n              \"name\": \"qdrantCloudURL\",\n              \"type\": \"string\",\n              \"value\": \"=https://152bc6e2-832a-415c-a1aa-fb529f8baf8d.eu-central-1-0.aws.cloud.qdrant.io\"\n            },\n            {\n              \"id\": \"e34c4d88-b102-43cc-a09e-e0553f2da23a\",\n              \"name\": \"collectionName\",\n              \"type\": \"string\",\n              \"value\": \"=agricultural-crops\"\n            },\n            {\n              \"id\": \"33581e0a-307f-4380-9533-615791096de7\",\n              \"name\": \"VoyageEmbeddingsDim\",\n              \"type\": \"number\",\n              \"value\": 1024\n            },\n            {\n              \"id\": \"6e390343-2cd2-4559-aba9-82b13acb7f52\",\n              \"name\": \"batchSize\",\n              \"type\": \"number\",\n              \"value\": 4\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"f88d290e-3311-4322-b2a5-1350fc1f8768\",\n      \"name\": \"Embed crop image\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2120,\n        160\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.voyageai.com/v1/multimodalembeddings\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n  \\\"inputs\\\": $json.batchVoyage,\\n  \\\"model\\\": \\\"voyage-multimodal-3\\\",\\n  \\\"input_type\\\": \\\"document\\\"\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\"\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"Vb0RNVDnIHmgnZOP\",\n          \"name\": \"Voyage API\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"250c6a8d-f545-4037-8069-c834437bbe15\",\n      \"name\": \"Create Qdrant Collection\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        320,\n        160\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}\",\n        \"method\": \"PUT\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n  \\\"vectors\\\": {\\n    \\\"voyage\\\": { \\n      \\\"size\\\": $('Qdrant cluster variables').first().json.VoyageEmbeddingsDim, \\n      \\\"distance\\\": \\\"Cosine\\\" \\n    } \\n  }\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"qdrantApi\"\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"it3j3hP9FICqhgX6\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"20b612ff-4794-43ef-bf45-008a16a2f30f\",\n      \"name\": \"Check Qdrant Collection Existence\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -100,\n        0\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $json.qdrantCloudURL }}/collections/{{ $json.collectionName }}/exists\",\n        \"options\": {},\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"qdrantApi\"\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"it3j3hP9FICqhgX6\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"c067740b-5de3-452e-a614-bf14985a73a0\",\n      \"name\": \"Batches in the API's format\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1860,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"f14db112-6f15-4405-aa47-8cb56bb8ae7a\",\n              \"name\": \"=batchVoyage\",\n              \"type\": \"array\",\n              \"value\": \"={{ $json.batch.map(item => ({ \\\"content\\\": ([{\\\"type\\\": \\\"image_url\\\", \\\"image_url\\\": item[\\\"publicLink\\\"]}])}))}}\"\n            },\n            {\n              \"id\": \"3885fd69-66f5-4435-86a4-b80eaa568ac1\",\n              \"name\": \"=batchPayloadQdrant\",\n              \"type\": \"array\",\n              \"value\": \"={{ $json.batch.map(item => ({\\\"crop_name\\\":item[\\\"cropName\\\"], \\\"image_path\\\":item[\\\"publicLink\\\"]})) }}\"\n            },\n            {\n              \"id\": \"8ea7a91e-af27-49cb-9a29-41dae15c4e33\",\n              \"name\": \"uuids\",\n              \"type\": \"array\",\n              \"value\": \"={{ $json.uuids }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"bf9a9532-db64-4c02-b91d-47e708ded4d3\",\n      \"name\": \"Batch Upload to Qdrant\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2320,\n        160\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points\",\n        \"method\": \"PUT\",\n        \"options\": {},\n        \"jsonBody\": \"={{\\n{\\n  \\\"batch\\\": {\\n      \\\"ids\\\" : $('Batches in the API\\\\'s format').item.json.uuids,\\n      \\\"vectors\\\": {\\\"voyage\\\": $json.data.map(item => item[\\\"embedding\\\"]) },\\n      \\\"payloads\\\": $('Batches in the API\\\\'s format').item.json.batchPayloadQdrant\\n  }\\n}\\n}}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"qdrantApi\"\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"it3j3hP9FICqhgX6\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"3c30373f-c84c-405f-bb84-ec8b4c7419f4\",\n      \"name\": \"Split in batches, generate uuids for Qdrant points\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1600,\n        160\n      ],\n      \"parameters\": {\n        \"language\": \"python\",\n        \"pythonCode\": \"import uuid\\n\\ncrops = [item.json for item in _input.all()]\\nbatch_size = int(_('Qdrant cluster variables').first()['json']['batchSize'])\\n\\ndef split_into_batches_add_uuids(array, batch_size):\\n    return [\\n      {\\n        \\\"batch\\\": array[i:i + batch_size],\\n        \\\"uuids\\\": [str(uuid.uuid4()) for j in range(len(array[i:i + batch_size]))]\\n      }\\n       for i in range(0, len(array), batch_size)\\n    ]\\n\\n# Split crops into batches\\nbatched_crops = split_into_batches_add_uuids(crops, batch_size)\\n\\nreturn batched_crops\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"2b028f8c-0a4c-4a3a-9e2b-14b1c2401c6d\",\n      \"name\": \"If collection exists\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        120,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"2104b862-667c-4a34-8888-9cb81a2e10f8\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.result.exists }}\",\n              \"rightValue\": \"true\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"768793f6-391e-4cc9-b637-f32ee2f77156\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        500,\n        340\n      ],\n      \"parameters\": {\n        \"width\": 280,\n        \"height\": 200,\n        \"content\": \"在接下来的工作流程中，我们将使用Qdrant来获取按`crop_name`（例如*\\\"黄瓜\\\"*）定义的每种作物类型对应的图像数量。  \\n为了高效获取这些有效载荷字段的计数信息，我们需要在该字段上创建索引以优化资源使用（此操作只需执行一次）。这正是当前正在进行的步骤。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0c8896f7-8c57-4add-bc4d-03c4a774bdf1\",\n      \"name\": \"Payload index on crop_name\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        500,\n        160\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/index\",\n        \"method\": \"PUT\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"field_name\\\": \\\"crop_name\\\",\\n  \\\"field_schema\\\": \\\"keyword\\\"\\n}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"qdrantApi\"\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"it3j3hP9FICqhgX6\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"342186f6-41bf-46be-9be8-a9b1ca290d55\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -360,\n        -360\n      ],\n      \"parameters\": {\n        \"height\": 300,\n        \"content\": \"设置变量\\n1) 云服务URL - 用于连接Qdrant云端服务（您的个人集群URL）\\n2) Qdrant中的集合名称\\n3) Voyage嵌入向量维度大小（用于在Qdrant中创建集合）<除非更改嵌入模型，否则不应修改此项>\\n4) 批量嵌入/批量上传至Qdrant的批次大小\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fae9248c-dbcc-4b6d-b977-0047f120a587\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -100,\n        -220\n      ],\n      \"parameters\": {\n        \"content\": \"在Qdrant中，集合只需创建一次；如果尝试用相同名称重复创建，系统会报错。因此我在此添加了一个检查，确认是否已存在同名集合。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f7aea242-3d98-4a1c-a98a-986ac2b4928b\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        180,\n        340\n      ],\n      \"parameters\": {\n        \"height\": 280,\n        \"content\": \"若变量中设置的名称对应的集合尚未存在，我将创建一个空集合；\\n\\n该集合将包含[命名向量](https://qdrant.tech/documentation/concepts/vectors/#named-vectors)，其名称为*\\\"voyage\\\"*。针对这些命名向量，我定义了两个参数：\\n1) 向量尺寸（本例中采用Voyage嵌入的尺寸）\\n2) 用于比较嵌入的相似性度量：本例选用**\\\"余弦相似度\\\"**。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b84045c1-f66a-4543-8d42-1e76de0b6e91\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        800,\n        -280\n      ],\n      \"parameters\": {\n        \"height\": 400,\n        \"content\": \"现在是将我们的图像数据集嵌入并上传至Qdrant的时候了；\\n两个数据集——[农作物](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification)和[土地类型](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification)——都已上传至我们的Google云存储桶。在本流程中，我们将获取**农作物数据集**（土地类型数据集的操作流程几乎完全相同，仅变量名不同）\\n（您应将其替换为您自己的图像数据集）\\n\\n数据集包含**图像URL**；图像按类别分组存放于文件夹中。例如，农作物数据集采用\\\"番茄\\\"和\\\"黄瓜\\\"等子文件夹结构，每个子文件夹内存放对应类别的图像URL。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"255dfad8-c545-4d75-bc9c-529aa50447a9\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1080,\n        -140\n      ],\n      \"parameters\": {\n        \"height\": 240,\n        \"content\": \"Google存储节点返回的**mediaLink**可直接用于下载图片；然而，我们仅需一个公开的图片URL以便Voyage API进行处理；因此，这里我们构建了这个公开链接，并从存储图片的文件夹中提取作物名称（例如*\\\"黄瓜\\\"*）。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a6acce75-cce0-4de3-bc64-37592c97359b\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1600,\n        -80\n      ],\n      \"parameters\": {\n        \"height\": 180,\n        \"content\": \"我将图像重新分组为每批`batchSize`大小的批次，并为实现批量上传至Qdrant，生成UUID作为批次的[点ID](https://qdrant.tech/documentation/concepts/points/#point-ids)（Qdrant不会为用户自动设置ID，需用户自行指定）。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cab3cc83-b50c-41f4-8d51-59e04bba5556\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1340,\n        -60\n      ],\n      \"parameters\": {\n        \"content\": \"由于我们的异常检测是基于作物数据集构建的，为了正确测试，我完全没有将番茄图片上传至Qdrant；在此处我已将其全部过滤掉。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e5cdcce5-efdc-41f2-9796-656bd345f783\",\n      \"name\": \"Sticky Note9\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1860,\n        -100\n      ],\n      \"parameters\": {\n        \"height\": 200,\n        \"content\": \"由于Voyage API对批量嵌入要求[特定的JSON结构](https://docs.voyageai.com/reference/multimodal-embeddings-api)，而[Qdrant批量上传点的API](https://api.qdrant.tech/api-reference/points/upsert-points)同样有格式要求，我正在调整JSON的结构。\\n\\n[注] - [payload = Qdrant中的元数据]\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"a7f15c44-3d5c-4b43-bfb2-94fe27a32071\",\n      \"name\": \"Sticky Note11\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2120,\n        20\n      ],\n      \"parameters\": {\n        \"width\": 180,\n        \"height\": 80,\n        \"content\": \"使用Voyage模型嵌入图像（注意`input_type`参数）\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"01b92e7e-d954-4d58-85b1-109c336546c4\",\n      \"name\": \"Filtering out tomato to test anomalies\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        1340,\n        160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"f7953ae2-5333-4805-abe5-abf6da645c5e\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"notEquals\"\n              },\n              \"leftValue\": \"={{ $json.cropName }}\",\n              \"rightValue\": \"tomato\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"8d564817-885e-453a-a087-900b34b84d9c\",\n      \"name\": \"Sticky Note8\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1160,\n        -280\n      ],\n      \"parameters\": {\n        \"width\": 440,\n        \"height\": 460,\n        \"content\": \"## 批量上传数据集至Qdrant  \\n### 本模板从存储中导入数据集图像，分批生成嵌入向量，并批量上传至Qdrant。当前模板以[农作物数据集](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification)为例，其操作逻辑与[土地类型数据集](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification)完全一致，且可适配任何包含图像URL的数据集（后续流程均适用）。\\n\\n* 首先检查是否存在可用的Qdrant集合，若不存在则新建。创建集合时将同步创建[有效载荷索引](https://qdrant.tech/documentation/concepts/indexing/#payload-index)，该索引为后续特定类型的Qdrant查询所必需。\\n* 接着从谷歌云存储导入全部数据集图像，但仅保留非番茄类图像（用于异常检测测试）。\\n* 使用Voyage AI多模态嵌入API为每批图像生成嵌入向量。\\n* 最后通过批量上传方式，将生成的嵌入向量和图像描述符导入Qdrant。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0233d3d0-bbdf-4d5b-a366-53cbfa4b6f9c\",\n      \"name\": \"Sticky Note10\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -860,\n        360\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 540,\n        \"height\": 420,\n        \"content\": \"### 异常检测\\n**1. 第一条流水线用于将（农作物）数据集上传至Qdrant集合。**\\n2. 第二条流水线用于在该Qdrant集合中设置聚类（类别）中心点及聚类（类别）阈值分数。\\n3. 第三条是异常检测工具，可接收任意图像作为输入，并利用Qdrant（农作物）集合中完成的所有准备工作。\\n\\n### K近邻分类\\n**1. 第一条流水线用于将（土地）数据集上传至Qdrant集合。**\\n2. 第二条是K近邻分类工具，可接收任意图像作为输入，并通过查询Qdrant（土地）集合进行分类。\\n\\n### 重建流程\\n您需要将Kaggle上的[农作物](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification)和[土地](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification)数据集上传至自己的Google存储桶，并重新建立与[Qdrant云服务](https://qdrant.tech/documentation/quickstart-cloud/)（可使用**免费版**集群）、Voyage AI API及Google云存储的连接。\\n\\n**注：这些流水线可适配任何图像数据集**\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"27776c4a-3bf9-4704-9c13-345b75ffacc0\",\n  \"connections\": {\n    \"Embed crop image\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Batch Upload to Qdrant\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Cloud Storage\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get fields for Qdrant\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"If collection exists\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Google Cloud Storage\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Create Qdrant Collection\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get fields for Qdrant\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filtering out tomato to test anomalies\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Batch Upload to Qdrant\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"Create Qdrant Collection\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Payload index on crop_name\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Qdrant cluster variables\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Qdrant Collection Existence\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Payload index on crop_name\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Google Cloud Storage\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Batches in the API's format\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Embed crop image\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Qdrant Collection Existence\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If collection exists\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Qdrant cluster variables\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filtering out tomato to test anomalies\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split in batches, generate uuids for Qdrant points\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split in batches, generate uuids for Qdrant points\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Batches in the API's format\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}