{
  "title": "Query PostgreSQL Database with Natural Language Using Groq AI Chatbot",
  "url": "https://n8n.io/workflows/3680-query-postgresql-database-with-natural-language-using-groq-ai-chatbot/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/?count=20",
  "author": "Gegenfeld",
  "publish_date": "Last update 3 days ago",
  "content": "",
  "workflow_json": "{\"id\":\"ow1aBANn8lQH0TbA\",\"meta\":{\"instanceId\":\"47d295a7329d3547e0e6b56de9e439dc1a0a49c6d827b2320629f54300c47e41\",\"templateCredsSetupCompleted\":true},\"name\":\"My workflow 4\",\"tags\":[],\"nodes\":[{\"id\":\"3be32b55-6c92-45e3-805f-3c582f6bb237\",\"name\":\"When chat message received\",\"type\":\"@n8n/n8n-nodes-langchain.chatTrigger\",\"position\":[760,320],\"webhookId\":\"cf1de04f-3e38-426c-89f0-3bdb110a5dcf\",\"parameters\":{},\"typeVersion\":1.1},{\"id\":\"c0685ca7-91bd-4177-848d-ea7f3a4c160f\",\"name\":\"Chat History\",\"type\":\"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\"position\":[1100,520],\"parameters\":{},\"typeVersion\":1.3},{\"id\":\"b2e6112c-451e-434f-a732-4c469721f364\",\"name\":\"AI Agent\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[1180,320],\"parameters\":{},\"typeVersion\":1.7},{\"id\":\"52a55d14-7a46-43fb-9f8c-5fdd099cc4b8\",\"name\":\"Groq Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGroq\",\"position\":[920,520],\"parameters\":{},\"typeVersion\":1},{\"id\":\"d9ff0f6e-e08d-49bc-bd29-1a6602b1562e\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[880,700],\"parameters\":{\"content\":\"\"},\"typeVersion\":1},{\"id\":\"56b21c24-9a74-4f61-ad03-2e6c892350d6\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1060,700],\"parameters\":{\"content\":\"\"},\"typeVersion\":1},{\"id\":\"63a28a91-68e3-45a5-b236-559db54f87b7\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1240,700],\"parameters\":{\"content\":\"\"},\"typeVersion\":1},{\"id\":\"b6dad064-7699-4f07-99c5-cca3a5f3bb82\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[760,100],\"parameters\":{\"content\":\"\"},\"typeVersion\":1},{\"id\":\"36b9bf75-cb1d-45ed-8e01-99c272580fae\",\"name\":\"PostgreSQL Schema\",\"type\":\"n8n-nodes-base.postgresTool\",\"position\":[1480,520],\"parameters\":{},\"typeVersion\":2.5},{\"id\":\"71f57073-6857-4b7f-9ee9-e1dc3ce250c5\",\"name\":\"PostgreSQL Definition\",\"type\":\"n8n-nodes-base.postgresTool\",\"position\":[1660,520],\"parameters\":{},\"typeVersion\":2.5},{\"id\":\"95e64a15-03c5-44d9-9a33-4cbd392ab008\",\"name\":\"PostgreSQL\",\"type\":\"n8n-nodes-base.postgresTool\",\"position\":[1280,520],\"parameters\":{},\"typeVersion\":2.5}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"59656397-0d25-47f3-94f3-c00beb3bf8d8\",\"connections\":{\"PostgreSQL\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Chat History\":{\"ai_memory\":[[{\"node\":\"AI Agent\",\"type\":\"ai_memory\",\"index\":0}]]},\"Groq Chat Model\":{\"ai_languageModel\":[[{\"node\":\"AI Agent\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"PostgreSQL Schema\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"PostgreSQL Definition\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"When chat message received\":{\"main\":[[{\"node\":\"AI Agent\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This guide shows you how to deploy a chatbot that lets you query your **PostgreSQL** database using natural language. You will build a system that accepts chat messages, retains conversation history, constructs dynamic SQL queries, and returns responses generated by an AI model. By following these instructions, you will have a working solution that integrates n8n’s AI Agent capabilities with **PostgreSQL**.\n\n![AI Chatbot PostgreSQL.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/AI_Chatbot_Postgre_SQL_4a3e8eaf21.png)\n\n### Prerequisites\n\nBefore you begin, ensure that you have the following:\n\n  * An active n8n instance (self-hosted or cloud) running version 1.50.0 or later.\n  * Valid **PostgreSQL** credentials configured in n8n.\n  * API credentials for the Groq Chat Model (or your preferred AI language model).\n  * Basic familiarity with SQL (specifically **PostgreSQL** syntax) and n8n node concepts such as chat triggers and memory buffers.\n  * Access to the n8n Docs on AI Agents for further reference.\n\n\n\n### Workflow Setup\n\n  1. **Chat Interface & Trigger**\n\n     * **When Chat Message Received:** This node listens for incoming chat messages via a webhook. When a message arrives, it triggers the workflow immediately.\n  2. **Conversation Memory**\n\n     * **Chat History:** This memory buffer node stores the last 10 interactions. It supplies conversation context to the AI Agent, ensuring that responses consider previous messages.\n  3. **AI Agent Core**\n\n     * **AI Agent (Tools Agent):** The AI Agent node orchestrates the conversation by receiving the chat input and conversation history. It dynamically generates **PostgreSQL** -compatible SQL queries based on your requests and coordinates calls to external tools (such as **PostgreSQL** nodes).\n  4. **Database Interactions**\n\n     * **PostgreSQL Node (Query Execution):** This node executes the SQL query generated by the AI Agent against your **PostgreSQL** database. You reference the query using an expression (e.g., `{{$node[\"AI Agent\"].json.sql_query}}`), allowing the agent’s output to control data retrieval.\n     * **PostgreSQL Node (Schema Retrieval):** This node (or a dedicated step using the **PostgreSQL** node) retrieves a list of relevant tables from your **PostgreSQL** database (e.g., from the `public` schema, excluding system schemas like `pg_catalog` or `information_schema`). The agent uses this information to understand the available tables. This typically involves executing a query like `SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';`.\n     * **PostgreSQL Node (Table Definition Retrieval):** This node (or another dedicated step using the **PostgreSQL** node) fetches detailed metadata (such as column names, data types, and potentially relationships using foreign keys) for a specific table. The table name (and schema if necessary) is supplied dynamically by the AI Agent. This often involves querying `information_schema.columns`, e.g., `SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '{{dynamic_table_name}}' AND table_schema = 'public';`.\n  5. **Language Model Processing**\n\n     * **Groq Chat Model:** This node connects to the Groq Chat API to generate text completions. It processes the combined input (chat message, context, and data fetched from **PostgreSQL**) and produces the final response.\n  6. **Guidance & Customization**\n\n     * **Sticky Notes:** These nodes provide guidance on: \n       * Switching the chat model if you wish to use another provider (e.g., OpenAI or Anthropic).\n       * Adjusting the maximum token count per interaction.\n       * Customizing the SQL queries (ensuring **PostgreSQL** compatibility) and the context window size.\n     * They help you modify the workflow to suit your environment and requirements.\n\n\n\n### Workflow Connections\n\n  * The **Chat Trigger** passes the incoming message to the **AI Agent**.\n  * The **Chat History** node supplies conversation context to the AI Agent.\n  * The **AI Agent** calls the **PostgreSQL** nodes as external tools, generating and sending dynamic SQL queries.\n  * The **Groq Chat Model** processes the consolidated input from the agent and outputs the natural language response delivered to the user.\n\n\n\n### Testing the Workflow\n\n  1. Send a chat message using the chat interface.\n  2. Observe how the AI Agent processes the input and generates a corresponding **PostgreSQL** SQL query.\n  3. Verify that the **PostgreSQL** nodes execute the query correctly against your database and return data.\n  4. Confirm that the Groq Chat Model produces a coherent natural language response based on the query results.\n  5. Refer to the sticky notes for guidance if you need to fine-tune any node settings or SQL queries.\n\n\n\n### Next Steps and References\n\n  * **Customize Your AI Model:** Replace the Groq Chat Model with another language model (such as the OpenAI Chat Model) by updating the node credentials and configuration.\n  * **Enhance Memory Settings:** Adjust the Chat History node’s context window to retain more or fewer messages based on your needs.\n  * **Modify SQL Queries:** Update the SQL queries within the **PostgreSQL** nodes or refine the prompts for the AI Agent to ensure they match your specific database schema and desired data, adhering to **PostgreSQL** syntax.\n  * **Further Reading:** Consult the n8n Docs on AI Agents for additional details and examples to expand your workflow’s capabilities.\n  * **Set Up a Website Chatbot:** Copy & Paste and replace the placeholders in the following code to embed the chatbot into your personal or company’s website: [View in CodePen 🡥](https://codepen.io/olemai/pen/RNwPdVp)\n\n\n\nBy following these steps, you will deploy a robust AI chatbot workflow that integrates with your **PostgreSQL** database, allowing you to query data using natural language.\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><p>This guide shows you how to deploy a chatbot that lets you query your <strong>PostgreSQL</strong> database using natural language. You will build a system that accepts chat messages, retains conversation history, constructs dynamic SQL queries, and returns responses generated by an AI model. By following these instructions, you will have a working solution that integrates n8n’s AI Agent capabilities with <strong>PostgreSQL</strong>.</p>\n<p><img src=\"https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/AI_Chatbot_Postgre_SQL_4a3e8eaf21.png\" alt=\"AI Chatbot PostgreSQL.png\"></p>\n<h3>Prerequisites</h3>\n<p>Before you begin, ensure that you have the following:</p>\n<ul>\n<li>An active n8n instance (self-hosted or cloud) running version 1.50.0 or later.</li>\n<li>Valid <strong>PostgreSQL</strong> credentials configured in n8n.</li>\n<li>API credentials for the Groq Chat Model (or your preferred AI language model).</li>\n<li>Basic familiarity with SQL (specifically <strong>PostgreSQL</strong> syntax) and n8n node concepts such as chat triggers and memory buffers.</li>\n<li>Access to the n8n Docs on AI Agents for further reference.</li>\n</ul>\n<h3>Workflow Setup</h3>\n<ol>\n<li>\n<p><strong>Chat Interface &amp; Trigger</strong></p>\n<ul>\n<li><strong>When Chat Message Received:</strong> This node listens for incoming chat messages via a webhook. When a message arrives, it triggers the workflow immediately.</li>\n</ul>\n</li>\n<li>\n<p><strong>Conversation Memory</strong></p>\n<ul>\n<li><strong>Chat History:</strong> This memory buffer node stores the last 10 interactions. It supplies conversation context to the AI Agent, ensuring that responses consider previous messages.</li>\n</ul>\n</li>\n<li>\n<p><strong>AI Agent Core</strong></p>\n<ul>\n<li><strong>AI Agent (Tools Agent):</strong> The AI Agent node orchestrates the conversation by receiving the chat input and conversation history. It dynamically generates <strong>PostgreSQL</strong>-compatible SQL queries based on your requests and coordinates calls to external tools (such as <strong>PostgreSQL</strong> nodes).</li>\n</ul>\n</li>\n<li>\n<p><strong>Database Interactions</strong></p>\n<ul>\n<li><strong>PostgreSQL Node (Query Execution):</strong> This node executes the SQL query generated by the AI Agent against your <strong>PostgreSQL</strong> database. You reference the query using an expression (e.g., <code>{{$node[\"AI Agent\"].json.sql_query}}</code>), allowing the agent’s output to control data retrieval.</li>\n<li><strong>PostgreSQL Node (Schema Retrieval):</strong> This node (or a dedicated step using the <strong>PostgreSQL</strong> node) retrieves a list of relevant tables from your <strong>PostgreSQL</strong> database (e.g., from the <code>public</code> schema, excluding system schemas like <code>pg_catalog</code> or <code>information_schema</code>). The agent uses this information to understand the available tables. This typically involves executing a query like <code>SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';</code>.</li>\n<li><strong>PostgreSQL Node (Table Definition Retrieval):</strong> This node (or another dedicated step using the <strong>PostgreSQL</strong> node) fetches detailed metadata (such as column names, data types, and potentially relationships using foreign keys) for a specific table. The table name (and schema if necessary) is supplied dynamically by the AI Agent. This often involves querying <code>information_schema.columns</code>, e.g., <code>SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '{{dynamic_table_name}}' AND table_schema = 'public';</code>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Language Model Processing</strong></p>\n<ul>\n<li><strong>Groq Chat Model:</strong> This node connects to the Groq Chat API to generate text completions. It processes the combined input (chat message, context, and data fetched from <strong>PostgreSQL</strong>) and produces the final response.</li>\n</ul>\n</li>\n<li>\n<p><strong>Guidance &amp; Customization</strong></p>\n<ul>\n<li><strong>Sticky Notes:</strong> These nodes provide guidance on:\n<ul>\n<li>Switching the chat model if you wish to use another provider (e.g., OpenAI or Anthropic).</li>\n<li>Adjusting the maximum token count per interaction.</li>\n<li>Customizing the SQL queries (ensuring <strong>PostgreSQL</strong> compatibility) and the context window size.</li>\n</ul>\n</li>\n<li>They help you modify the workflow to suit your environment and requirements.</li>\n</ul>\n</li>\n</ol>\n<h3>Workflow Connections</h3>\n<ul>\n<li>The <strong>Chat Trigger</strong> passes the incoming message to the <strong>AI Agent</strong>.</li>\n<li>The <strong>Chat History</strong> node supplies conversation context to the AI Agent.</li>\n<li>The <strong>AI Agent</strong> calls the <strong>PostgreSQL</strong> nodes as external tools, generating and sending dynamic SQL queries.</li>\n<li>The <strong>Groq Chat Model</strong> processes the consolidated input from the agent and outputs the natural language response delivered to the user.</li>\n</ul>\n<h3>Testing the Workflow</h3>\n<ol>\n<li>Send a chat message using the chat interface.</li>\n<li>Observe how the AI Agent processes the input and generates a corresponding <strong>PostgreSQL</strong> SQL query.</li>\n<li>Verify that the <strong>PostgreSQL</strong> nodes execute the query correctly against your database and return data.</li>\n<li>Confirm that the Groq Chat Model produces a coherent natural language response based on the query results.</li>\n<li>Refer to the sticky notes for guidance if you need to fine-tune any node settings or SQL queries.</li>\n</ol>\n<h3>Next Steps and References</h3>\n<ul>\n<li><strong>Customize Your AI Model:</strong> Replace the Groq Chat Model with another language model (such as the OpenAI Chat Model) by updating the node credentials and configuration.</li>\n<li><strong>Enhance Memory Settings:</strong> Adjust the Chat History node’s context window to retain more or fewer messages based on your needs.</li>\n<li><strong>Modify SQL Queries:</strong> Update the SQL queries within the <strong>PostgreSQL</strong> nodes or refine the prompts for the AI Agent to ensure they match your specific database schema and desired data, adhering to <strong>PostgreSQL</strong> syntax.</li>\n<li><strong>Further Reading:</strong> Consult the n8n Docs on AI Agents for additional details and examples to expand your workflow’s capabilities.</li>\n<li><strong>Set Up a Website Chatbot:</strong> Copy &amp; Paste and replace the placeholders in the following code to embed the chatbot into your personal or company’s website: <a href=\"https://codepen.io/olemai/pen/RNwPdVp\" rel=\"ugc nofollow\" target=\"_blank\">View in CodePen 🡥</a></li>\n</ul>\n<p>By following these steps, you will deploy a robust AI chatbot workflow that integrates with your <strong>PostgreSQL</strong> database, allowing you to query data using natural language.</p>\n</div><!--]-->",
  "readme_zh": "本指南将展示如何部署一个聊天机器人，让您能用自然语言查询**PostgreSQL**数据库。您将构建一个能接收聊天消息、保留对话历史、动态构建SQL查询并返回AI模型生成响应的系统。按照以下步骤操作，您将获得一个集成n8n AI智能体功能与**PostgreSQL**的完整解决方案。\n\n![AI聊天机器人PostgreSQL.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/AI_Chatbot_Postgre_SQL_4a3e8eaf21.png)\n\n### 先决条件\n\n开始前请确保您已具备：\n  * 运行1.50.0或更高版本的n8n实例（自托管或云端）\n  * 在n8n中配置有效的**PostgreSQL**凭证\n  * Groq聊天模型（或您偏好的AI语言模型）的API凭证\n  * 基本熟悉SQL（特别是**PostgreSQL**语法）及n8n节点概念（如聊天触发器和记忆缓冲区）\n  * 可随时查阅n8n关于AI智能体的文档\n\n### 工作流设置\n\n1. **聊天界面与触发器**\n   * **当收到聊天消息时**：该节点通过webhook监听传入消息，立即触发工作流\n\n2. **对话记忆**\n   * **聊天历史**：该记忆缓冲区节点存储最近10轮对话，为AI智能体提供上下文，确保响应关联先前消息\n\n3. **AI智能体核心**\n   * **AI智能体（工具代理）**：该节点接收聊天输入和对话历史，动态生成符合**PostgreSQL**语法的SQL查询，并协调外部工具（如**PostgreSQL**节点）调用\n\n4. **数据库交互**\n   * **PostgreSQL节点（查询执行）**：执行AI智能体生成的SQL查询（通过表达式如`{{$node[\"AI智能体\"].json.sql_query}}`引用）\n   * **PostgreSQL节点（模式检索）**：从数据库获取相关表列表（如从`public`模式中排除`pg_catalog`等系统模式），通常执行类似`SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';`的查询\n   * **PostgreSQL节点（表结构检索）**：获取特定表的列名/数据类型等元数据，通常查询`information_schema.columns`，如`SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '{{动态表名}}' AND table_schema = 'public';`\n\n5. **语言模型处理**\n   * **Groq聊天模型**：连接Groq Chat API生成文本，综合处理聊天消息/上下文及数据库查询结果\n\n6. **指导与定制**\n   * **便签节点**提供以下指引：\n     - 切换聊天模型（如改用OpenAI或Anthropic）\n     - 调整单次交互的token上限\n     - 定制SQL查询（确保**PostgreSQL**兼容性）和上下文窗口大小\n   * 帮助您根据实际需求调整工作流\n\n### 工作流连接\n  * **聊天触发器**将消息传递给**AI智能体**\n  * **聊天历史**节点提供对话上下文\n  * **AI智能体**调用**PostgreSQL**节点作为外部工具生成动态SQL\n  * **Groq聊天模型**整合处理所有输入，最终生成自然语言响应\n\n### 测试流程\n1. 通过聊天界面发送消息\n2. 观察AI智能体如何生成**PostgreSQL**查询\n3. 验证**PostgreSQL**节点是否正确执行查询并返回数据\n4. 确认Groq模型基于查询结果生成连贯响应\n5. 如需调整节点设置或SQL查询，参考便签指引\n\n### 后续步骤\n  * **更换AI模型**：通过更新节点凭证切换至OpenAI等其他语言模型\n  * **增强记忆功能**：调整聊天历史节点的上下文窗口容量\n  * **优化SQL查询**：根据实际数据库结构修改查询，确保符合**PostgreSQL**语法\n  * **扩展阅读**：查阅n8n AI智能体文档获取进阶案例\n  * **网站集成**：复制以下代码替换占位符即可嵌入企业网站：[查看CodePen示例 🡥](https://codepen.io/olemai/pen/RNwPdVp)\n\n完成上述步骤后，您将部署一个强大的AI聊天机器人，实现用自然语言查询**PostgreSQL**数据库的功能。",
  "title_zh": "使用Groq AI聊天机器人以自然语言查询PostgreSQL数据库",
  "publish_date_absolute": "2025-05-04",
  "publish_date_zh": "最后更新于3天前",
  "workflow_json_zh": "{\"id\":\"ow1aBANn8lQH0TbA\",\"meta\":{\"instanceId\":\"47d295a7329d3547e0e6b56de9e439dc1a0a49c6d827b2320629f54300c47e41\",\"templateCredsSetupCompleted\":true},\"name\":\"My workflow 4\",\"tags\":[],\"nodes\":[{\"id\":\"3be32b55-6c92-45e3-805f-3c582f6bb237\",\"name\":\"When chat message received\",\"type\":\"@n8n/n8n-nodes-langchain.chatTrigger\",\"position\":[760,320],\"webhookId\":\"cf1de04f-3e38-426c-89f0-3bdb110a5dcf\",\"parameters\":{},\"typeVersion\":1.1},{\"id\":\"c0685ca7-91bd-4177-848d-ea7f3a4c160f\",\"name\":\"Chat History\",\"type\":\"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\"position\":[1100,520],\"parameters\":{},\"typeVersion\":1.3},{\"id\":\"b2e6112c-451e-434f-a732-4c469721f364\",\"name\":\"AI Agent\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[1180,320],\"parameters\":{},\"typeVersion\":1.7},{\"id\":\"52a55d14-7a46-43fb-9f8c-5fdd099cc4b8\",\"name\":\"Groq Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGroq\",\"position\":[920,520],\"parameters\":{},\"typeVersion\":1},{\"id\":\"d9ff0f6e-e08d-49bc-bd29-1a6602b1562e\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[880,700],\"parameters\":{\"content\":\"\"},\"typeVersion\":1},{\"id\":\"56b21c24-9a74-4f61-ad03-2e6c892350d6\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1060,700],\"parameters\":{\"content\":\"\"},\"typeVersion\":1},{\"id\":\"63a28a91-68e3-45a5-b236-559db54f87b7\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1240,700],\"parameters\":{\"content\":\"\"},\"typeVersion\":1},{\"id\":\"b6dad064-7699-4f07-99c5-cca3a5f3bb82\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[760,100],\"parameters\":{\"content\":\"\"},\"typeVersion\":1},{\"id\":\"36b9bf75-cb1d-45ed-8e01-99c272580fae\",\"name\":\"PostgreSQL Schema\",\"type\":\"n8n-nodes-base.postgresTool\",\"position\":[1480,520],\"parameters\":{},\"typeVersion\":2.5},{\"id\":\"71f57073-6857-4b7f-9ee9-e1dc3ce250c5\",\"name\":\"PostgreSQL Definition\",\"type\":\"n8n-nodes-base.postgresTool\",\"position\":[1660,520],\"parameters\":{},\"typeVersion\":2.5},{\"id\":\"95e64a15-03c5-44d9-9a33-4cbd392ab008\",\"name\":\"PostgreSQL\",\"type\":\"n8n-nodes-base.postgresTool\",\"position\":[1280,520],\"parameters\":{},\"typeVersion\":2.5}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"59656397-0d25-47f3-94f3-c00beb3bf8d8\",\"connections\":{\"PostgreSQL\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Chat History\":{\"ai_memory\":[[{\"node\":\"AI Agent\",\"type\":\"ai_memory\",\"index\":0}]]},\"Groq Chat Model\":{\"ai_languageModel\":[[{\"node\":\"AI Agent\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"PostgreSQL Schema\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"PostgreSQL Definition\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"When chat message received\":{\"main\":[[{\"node\":\"AI Agent\",\"type\":\"main\",\"index\":0}]]}}}"
}