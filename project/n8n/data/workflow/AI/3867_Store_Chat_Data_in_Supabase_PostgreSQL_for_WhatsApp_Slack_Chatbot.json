{
  "title": "Store Chat Data in Supabase PostgreSQL for WhatsApp/Slack Chatbot",
  "url": "https://n8n.io/workflows/3867-store-chat-data-in-supabase-postgresql-for-whatsappslack-chatbot/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/?sort=createdAt:desc",
  "author": "JPres",
  "publish_date": "Last update 10 days ago",
  "publish_date_absolute": "2025-05-12",
  "content": "",
  "workflow_json": "{\"id\":\"gUx6hY0bOoReluxE\",\"meta\":{\"instanceId\":\"5ce52989094be90be3b3bdd9ed9cee1d7ce1fcecaa598afaec4a50646d32e291\",\"templateCredsSetupCompleted\":true},\"name\":\"Supabase Setup Postgres\",\"tags\":[{\"id\":\"fSDcaaN3w5sV5e3S\",\"name\":\"Templates\",\"createdAt\":\"2025-02-23T15:20:47.262Z\",\"updatedAt\":\"2025-02-23T15:20:47.262Z\"}],\"nodes\":[{\"id\":\"c2c95cc1-d10e-40c9-9663-625e8a2ab30b\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[340,-80],\"parameters\":{},\"typeVersion\":1},{\"id\":\"30a4ae0f-c7ae-4b00-b826-a0a2759f2dd5\",\"name\":\"Set sample Input Variables\",\"type\":\"n8n-nodes-base.set\",\"position\":[600,-80],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"ed7bc826-fd48-4c9e-8ba7-11e4e7bb73ac\",\"name\":\"session_id\",\"type\":\"string\",\"value\":\"=491634502879\"},{\"id\":\"d381c930-a92f-404f-ac91-ad6437d6b0c9\",\"name\":\"name\",\"type\":\"string\",\"value\":\"=Genn Sverster\"},{\"id\":\"4ead1fb5-098b-4cbc-bc78-d65b188ca5b0\",\"name\":\"chatInput\",\"type\":\"string\",\"value\":\"=wie gehts dir?\"}]}},\"typeVersion\":3.4},{\"id\":\"f56b629c-5374-43ce-b55b-efd7f14f1231\",\"name\":\"GeminiFlash2.0\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\"position\":[840,140],\"parameters\":{\"options\":{},\"modelName\":\"models/gemini-2.0-flash\"},\"credentials\":{\"googlePalmApi\":{\"id\":\"clmB8ZYJMHaHmnsu\",\"name\":\"Stardawn#1\"}},\"typeVersion\":1},{\"id\":\"1da22e93-504e-4616-bac3-dabd9a4b145a\",\"name\":\"Supabase Postgres Database\",\"type\":\"@n8n/n8n-nodes-langchain.memoryPostgresChat\",\"position\":[1100,140],\"parameters\":{\"tableName\":\"whatsapp_messages3\",\"sessionKey\":\"={{ $json.session_id }}\",\"sessionIdType\":\"customKey\",\"contextWindowLength\":20},\"credentials\":{\"postgres\":{\"id\":\"B2m18ScvYBKPNF9s\",\"name\":\"Supabase SD - N8N Demo Chatbot\"}},\"typeVersion\":1.3},{\"id\":\"29a7eb84-2244-41e1-99c0-5daaeb80cf6e\",\"name\":\"Update additonal Values e.g. Name, Address ...\",\"type\":\"n8n-nodes-base.supabase\",\"position\":[1300,-80],\"parameters\":{\"filters\":{\"conditions\":[{\"keyName\":\"session_id\",\"keyValue\":\"={{ $('Set sample Input Variables').item.json.session_id }}\",\"condition\":\"eq\"},{\"keyName\":\"name\",\"keyValue\":\"NULL\",\"condition\":\"is\"}]},\"tableId\":\"whatsapp_messages3\",\"fieldsUi\":{\"fieldValues\":[{\"fieldId\":\"name\",\"fieldValue\":\"={{ $('Set sample Input Variables').item.json.name }}\"}]},\"matchType\":\"allFilters\",\"operation\":\"update\"},\"credentials\":{\"supabaseApi\":{\"id\":\"GHuUG6pmPATBHgob\",\"name\":\"N8N Chatbot\"}},\"typeVersion\":1},{\"id\":\"8094fdd7-f238-47dc-94f9-5e962d5f0c2f\",\"name\":\"Sample Agent \",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[960,-80],\"parameters\":{\"text\":\"={{ $json.chatInput }}\",\"options\":{\"systemMessage\":\"You are a helpful assistant\"},\"promptType\":\"define\"},\"typeVersion\":1.7}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"49fd22da-2875-49be-a3c0-6c0fcf378a8e\",\"connections\":{\"Sample Agent \":{\"main\":[[{\"node\":\"Update additonal Values e.g. Name, Address ...\",\"type\":\"main\",\"index\":0}]]},\"GeminiFlash2.0\":{\"ai_languageModel\":[[{\"node\":\"Sample Agent \",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Set sample Input Variables\":{\"main\":[[{\"node\":\"Sample Agent \",\"type\":\"main\",\"index\":0}]]},\"Supabase Postgres Database\":{\"ai_memory\":[[{\"node\":\"Sample Agent \",\"type\":\"ai_memory\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"Set sample Input Variables\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "# n8n Template: Store Chat Data in Supabase PostgreSQL for WhatsApp/Slack Integration\n\nThis n8n template captures chat data (like user ID, name, or address) and saves it to a Supabase PostgreSQL database. It’s built for testing now but designed to work with WhatsApp, Slack, or similar platforms later, where chat inputs aren’t predefined.  \nGuide with images can be found on: <https://github.com/JimPresting/Supabase-n8n-Self-Hosted-Integration/>\n\n## Step 1: Configure Firewall Rules in Your VPC Network\n\nTo let your n8n instance talk to Supabase, add a firewall rule in your VPC network settings (e.g., Google Cloud, AWS, etc.).\n\n  1. Go to **VPC Network** settings.\n\n  2. Add a new firewall rule:\n\n     * **Name** : `allow-postgres-outbound`\n     * **Direction** : Egress (outbound traffic)\n     * **Destination Filter** : IPv4 ranges\n     * **Destination IPv4 Ranges** : `0.0.0.0/0` (allows all; restrict to Supabase IPs for security)\n     * **Source Filter** : \n       * Pick `IPv4 ranges` and add the n8n VM’s IP range, or\n       * Pick `None` if any VM can connect\n     * **Protocols and Ports** : \n       * Protocol: `TCP`\n       * Port: `5432` (default PostgreSQL port)\n  3. Save the rule.\n\n\n\n\n## Step 2: Get the Supabase Connection String\n\n  1. Log into your **Supabase Dashboard**.\n\n  2. Go to your project, click the **Connect** button in the header.\n\n  3. Copy the PostgreSQL connection string:\n         \n         postgresql://postgres.fheraruzdahjd:[YOUR-PASSWORD]@aws-0-eu-central-1.pooler.supabase.com:6543/postgres\n         \n\n     * Replace `[YOUR-PASSWORD]` with your Supabase account password (no brackets) and replace the string before that with your actual unique identifier.\n     * Note the port (`6543` or `5432`)—use what’s in the string.\n\n\n\n## Step 3: Set Up the n8n Workflow\n\nThis workflow takes chat data, maps it to variables, and stores it in Supabase. It’s built to handle messy chat inputs from platforms like WhatsApp or Slack in production.\n\n### Workflow Steps\n\n  1. **Trigger Node** : \"When clicking 'Test workflow'\" (manual trigger).\n\n     * For now, it’s manual. In production, this will be a WhatsApp or Slack message trigger, which won’t have a fixed input format.\n  2. **Set Node** : \"Set sample input variables (manual)\".\n\n     * This node sets variables like `id`, `name`, `address` to mimic chat data.\n     * **Why?** Chat platforms send unstructured data (e.g., a message with a user’s name or address). We map it to variables so we can store it properly. The `id` will be something unique like a phone number, account ID, or account number.\n  3. **Sample Agent Node** : Uses a model (e.g., GeminiFlash2.0 but doesn't matter).\n\n     * This is a placeholder to process data (e.g., clean or validate it) before saving. You can skip or customize it.\n  4. **Supabase PostgreSQL Node** : \"Supabase PostgreSQL Database\".\n\n     * Connects to Supabase using the connection string from Step 2.\n     * Saves the variables (`id`, `name`, `address`) to a table.\n     * **Why store extra fields?** The `id` (like a phone number or account ID) is the key. Extra fields like `name` or `address` let us keep all user info in one place for later use (e.g., analytics or replies).\n  5. **Output Node** : \"Update additional values e.g., name, address\".\n\n     * Confirms the data is saved. In production, this could send a reply to the chat platform.\n\n\n\n### Why This Design?\n\n  * **Handles Unstructured Chat Data** : WhatsApp or Slack messages don’t have a fixed format. The \"Set\" node lets us map any incoming data (e.g., `id`, `name`) to our database fields.\n  * **Scales for Production** : Using `id` as a key (phone number, account ID, etc.) with extra fields like `name` makes this workflow flexible for many use cases, like user profiles or support logs.\n  * **Future-Ready** : It’s built to swap the manual trigger for a real chat platform trigger without breaking.\n\n\n\n## Step 4: Configure the Supabase PostgreSQL Node\n\n  1. In the n8n workflow, set up the **Supabase PostgreSQL** node:\n\n     * **Host** : `aws-0-eu-central-1.pooler.supabase.com` (from the connection string)\n     * **Port** : `6543` (or what’s in the connection string)\n     * **Database** : `postgres`\n     * **User** : `postgres.fhspudlibstmpgwqmumo` (from the connection string)\n     * **Password** : Your Supabase password\n     * **SSL** : Enable (Supabase usually requires it)\n  2. Set the node to **Insert** or **Update** :\n\n     * Map `id` to a unique column in your Supabase table (e.g., phone number, account ID).\n     * Map fields like `name`, `address` to their columns.\n  3. Test the workflow to confirm data saves correctly.\n\n\n\n\n## Security Tips\n\n  * **Limit Firewall Rules** : Don’t use `0.0.0.0/0`. Find Supabase’s IP ranges in their docs and use those.\n  * **Hide Passwords** : Store your Supabase password in n8n’s environment variables.\n  * **Use SSL** : Enable SSL in the n8n node for secure data transfer.\n\n\n",
  "readme_html": "<!--[--><div data-v-859c7806=\"\"><h1>n8n Template: Store Chat Data in Supabase PostgreSQL for WhatsApp/Slack Integration</h1>\n<p>This n8n template captures chat data (like user ID, name, or address) and saves it to a Supabase PostgreSQL database. It’s built for testing now but designed to work with WhatsApp, Slack, or similar platforms later, where chat inputs aren’t predefined.<br>\nGuide with images can be found on: <a href=\"https://github.com/JimPresting/Supabase-n8n-Self-Hosted-Integration/\" rel=\"ugc nofollow\" target=\"_blank\">https://github.com/JimPresting/Supabase-n8n-Self-Hosted-Integration/</a></p>\n<h2>Step 1: Configure Firewall Rules in Your VPC Network</h2>\n<p>To let your n8n instance talk to Supabase, add a firewall rule in your VPC network settings (e.g., Google Cloud, AWS, etc.).</p>\n<ol>\n<li>\n<p>Go to <strong>VPC Network</strong> settings.</p>\n</li>\n<li>\n<p>Add a new firewall rule:</p>\n<ul>\n<li><strong>Name</strong>: <code>allow-postgres-outbound</code></li>\n<li><strong>Direction</strong>: Egress (outbound traffic)</li>\n<li><strong>Destination Filter</strong>: IPv4 ranges</li>\n<li><strong>Destination IPv4 Ranges</strong>: <code>0.0.0.0/0</code> (allows all; restrict to Supabase IPs for security)</li>\n<li><strong>Source Filter</strong>:\n<ul>\n<li>Pick <code>IPv4 ranges</code> and add the n8n VM’s IP range, or</li>\n<li>Pick <code>None</code> if any VM can connect</li>\n</ul>\n</li>\n<li><strong>Protocols and Ports</strong>:\n<ul>\n<li>Protocol: <code>TCP</code></li>\n<li>Port: <code>5432</code> (default PostgreSQL port)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Save the rule.</p>\n</li>\n</ol>\n<h2>Step 2: Get the Supabase Connection String</h2>\n<ol>\n<li>\n<p>Log into your <strong>Supabase Dashboard</strong>.</p>\n</li>\n<li>\n<p>Go to your project, click the <strong>Connect</strong> button in the header.</p>\n</li>\n<li>\n<p>Copy the PostgreSQL connection string:</p>\n<pre><code>postgresql://postgres.fheraruzdahjd:[YOUR-PASSWORD]@aws-0-eu-central-1.pooler.supabase.com:6543/postgres\n</code></pre>\n<ul>\n<li>Replace <code>[YOUR-PASSWORD]</code> with your Supabase account password (no brackets) and replace the string before that with your actual unique identifier.</li>\n<li>Note the port (<code>6543</code> or <code>5432</code>)—use what’s in the string.</li>\n</ul>\n</li>\n</ol>\n<h2>Step 3: Set Up the n8n Workflow</h2>\n<p>This workflow takes chat data, maps it to variables, and stores it in Supabase. It’s built to handle messy chat inputs from platforms like WhatsApp or Slack in production.</p>\n<h3>Workflow Steps</h3>\n<ol>\n<li>\n<p><strong>Trigger Node</strong>: \"When clicking 'Test workflow'\" (manual trigger).</p>\n<ul>\n<li>For now, it’s manual. In production, this will be a WhatsApp or Slack message trigger, which won’t have a fixed input format.</li>\n</ul>\n</li>\n<li>\n<p><strong>Set Node</strong>: \"Set sample input variables (manual)\".</p>\n<ul>\n<li>This node sets variables like <code>id</code>, <code>name</code>, <code>address</code> to mimic chat data.</li>\n<li><strong>Why?</strong> Chat platforms send unstructured data (e.g., a message with a user’s name or address). We map it to variables so we can store it properly. The <code>id</code> will be something unique like a phone number, account ID, or account number.</li>\n</ul>\n</li>\n<li>\n<p><strong>Sample Agent Node</strong>: Uses a model (e.g., GeminiFlash2.0 but doesn't matter).</p>\n<ul>\n<li>This is a placeholder to process data (e.g., clean or validate it) before saving. You can skip or customize it.</li>\n</ul>\n</li>\n<li>\n<p><strong>Supabase PostgreSQL Node</strong>: \"Supabase PostgreSQL Database\".</p>\n<ul>\n<li>Connects to Supabase using the connection string from Step 2.</li>\n<li>Saves the variables (<code>id</code>, <code>name</code>, <code>address</code>) to a table.</li>\n<li><strong>Why store extra fields?</strong> The <code>id</code> (like a phone number or account ID) is the key. Extra fields like <code>name</code> or <code>address</code> let us keep all user info in one place for later use (e.g., analytics or replies).</li>\n</ul>\n</li>\n<li>\n<p><strong>Output Node</strong>: \"Update additional values e.g., name, address\".</p>\n<ul>\n<li>Confirms the data is saved. In production, this could send a reply to the chat platform.</li>\n</ul>\n</li>\n</ol>\n<h3>Why This Design?</h3>\n<ul>\n<li><strong>Handles Unstructured Chat Data</strong>: WhatsApp or Slack messages don’t have a fixed format. The \"Set\" node lets us map any incoming data (e.g., <code>id</code>, <code>name</code>) to our database fields.</li>\n<li><strong>Scales for Production</strong>: Using <code>id</code> as a key (phone number, account ID, etc.) with extra fields like <code>name</code> makes this workflow flexible for many use cases, like user profiles or support logs.</li>\n<li><strong>Future-Ready</strong>: It’s built to swap the manual trigger for a real chat platform trigger without breaking.</li>\n</ul>\n<h2>Step 4: Configure the Supabase PostgreSQL Node</h2>\n<ol>\n<li>\n<p>In the n8n workflow, set up the <strong>Supabase PostgreSQL</strong> node:</p>\n<ul>\n<li><strong>Host</strong>: <code>aws-0-eu-central-1.pooler.supabase.com</code> (from the connection string)</li>\n<li><strong>Port</strong>: <code>6543</code> (or what’s in the connection string)</li>\n<li><strong>Database</strong>: <code>postgres</code></li>\n<li><strong>User</strong>: <code>postgres.fhspudlibstmpgwqmumo</code> (from the connection string)</li>\n<li><strong>Password</strong>: Your Supabase password</li>\n<li><strong>SSL</strong>: Enable (Supabase usually requires it)</li>\n</ul>\n</li>\n<li>\n<p>Set the node to <strong>Insert</strong> or <strong>Update</strong>:</p>\n<ul>\n<li>Map <code>id</code> to a unique column in your Supabase table (e.g., phone number, account ID).</li>\n<li>Map fields like <code>name</code>, <code>address</code> to their columns.</li>\n</ul>\n</li>\n<li>\n<p>Test the workflow to confirm data saves correctly.</p>\n</li>\n</ol>\n<h2>Security Tips</h2>\n<ul>\n<li><strong>Limit Firewall Rules</strong>: Don’t use <code>0.0.0.0/0</code>. Find Supabase’s IP ranges in their docs and use those.</li>\n<li><strong>Hide Passwords</strong>: Store your Supabase password in n8n’s environment variables.</li>\n<li><strong>Use SSL</strong>: Enable SSL in the n8n node for secure data transfer.</li>\n</ul>\n</div><!--]-->",
  "readme_zh": "# n8n模板：将聊天数据存储至Supabase PostgreSQL数据库（支持WhatsApp/Slack集成）\n\n该n8n模板可捕获聊天数据（如用户ID、姓名或地址）并保存到Supabase PostgreSQL数据库。当前版本为测试构建，未来将适配WhatsApp、Slack等平台的非预设聊天输入场景。  \n图文指南详见：<https://github.com/JimPresting/Supabase-n8n-Self-Hosted-Integration/>\n\n## 第一步：配置VPC网络防火墙规则\n\n为允许n8n实例与Supabase通信，需在VPC网络（如Google Cloud、AWS等）中添加防火墙规则：\n\n1. 进入**VPC网络**设置\n2. 新建防火墙规则：\n   - **名称**：`allow-postgres-outbound`\n   - **方向**：出口（出站流量）\n   - **目标筛选**：IPv4范围\n   - **目标IPv4范围**：`0.0.0.0/0`（允许所有IP，建议改为Supabase专用IP提升安全性）\n   - **来源筛选**：\n     - 选择`IPv4范围`并添加n8n虚拟机IP段，或\n     - 选择`无`以允许所有虚拟机连接\n   - **协议和端口**：\n     - 协议：`TCP`\n     - 端口：`5432`（PostgreSQL默认端口）\n3. 保存规则\n\n## 第二步：获取Supabase连接字符串\n\n1. 登录**Supabase控制面板**\n2. 进入项目，点击顶部**Connect**按钮\n3. 复制PostgreSQL连接字符串：\n   ```\n   postgresql://postgres.fheraruzdahjd:[您的密码]@aws-0-eu-central-1.pooler.supabase.com:6543/postgres\n   ```\n   - 将`[您的密码]`替换为实际密码（不含方括号），并修改前缀字符串为您的唯一标识符\n   - 注意端口号（`6543`或`5432`），以实际字符串为准\n\n## 第三步：配置n8n工作流\n\n本工作流将聊天数据映射为变量后存储至Supabase，专为处理WhatsApp/Slack等平台的非结构化聊天输入设计。\n\n### 工作流步骤\n\n1. **触发节点**：\"点击'测试工作流'\"（手动触发）\n   - 当前为手动模式，生产环境将替换为WhatsApp/Slack消息触发（无固定输入格式）\n2. **变量设置节点**：\"设置样本输入变量（手动）\"\n   - 定义`id`、`name`、`address`等变量模拟聊天数据\n   - **作用**：将非结构化消息（如包含用户姓名/地址的内容）映射为结构化变量。`id`建议采用电话号码/账户ID等唯一标识\n3. **样本处理节点**：使用模型（如GeminiFlash2.0，可替换）\n   - 数据存储前的清洗/验证环节，可跳过或自定义\n4. **Supabase PostgreSQL节点**：\"Supabase PostgreSQL数据库\"\n   - 使用第二步的连接字符串建立连接\n   - 将变量（`id`、`name`、`address`）存入数据表\n   - **扩展字段作用**：以`id`为主键，集中存储用户信息便于后续分析或消息回复\n5. **输出节点**：\"更新附加字段（如姓名、地址）\"\n   - 返回存储确认信息，生产环境可扩展为聊天平台自动回复\n\n### 设计优势\n\n- **非结构化数据处理**：通过\"变量设置\"节点灵活映射任意聊天输入\n- **生产级扩展性**：采用唯一标识`id`+扩展字段结构，适配用户画像/支持日志等场景\n- **前瞻兼容**：可无缝切换为真实聊天平台触发器\n\n## 第四步：配置Supabase PostgreSQL节点\n\n1. 在n8n工作流中设置**Supabase PostgreSQL**节点：\n   - **主机**：`aws-0-eu-central-1.pooler.supabase.com`（取自连接字符串）\n   - **端口**：`6543`（以连接字符串为准）\n   - **数据库**：`postgres`\n   - **用户**：`postgres.fhspudlibstmpgwqmumo`（取自连接字符串）\n   - **密码**：Supabase账户密码\n   - **SSL**：启用（Supabase强制要求）\n2. 设置**插入**或**更新**操作：\n   - 将`id`映射至数据表唯一列（如电话号码/账户ID）\n   - 配置`name`、`address`等字段映射\n3. 测试工作流验证数据存储\n\n## 安全建议\n\n- **防火墙优化**：避免使用`0.0.0.0/0`，参照Supabase文档设置专属IP段\n- **密码保护**：通过n8n环境变量管理Supabase密码\n- **加密传输**：务必启用节点SSL选项",
  "title_zh": "将聊天数据存储在Supabase PostgreSQL中用于WhatsApp/Slack聊天机器人",
  "publish_date_zh": "上次更新于10天前",
  "workflow_json_zh": "{\"id\":\"gUx6hY0bOoReluxE\",\"meta\":{\"instanceId\":\"5ce52989094be90be3b3bdd9ed9cee1d7ce1fcecaa598afaec4a50646d32e291\",\"templateCredsSetupCompleted\":true},\"name\":\"Supabase Setup Postgres\",\"tags\":[{\"id\":\"fSDcaaN3w5sV5e3S\",\"name\":\"Templates\",\"createdAt\":\"2025-02-23T15:20:47.262Z\",\"updatedAt\":\"2025-02-23T15:20:47.262Z\"}],\"nodes\":[{\"id\":\"c2c95cc1-d10e-40c9-9663-625e8a2ab30b\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[340,-80],\"parameters\":{},\"typeVersion\":1},{\"id\":\"30a4ae0f-c7ae-4b00-b826-a0a2759f2dd5\",\"name\":\"Set sample Input Variables\",\"type\":\"n8n-nodes-base.set\",\"position\":[600,-80],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"ed7bc826-fd48-4c9e-8ba7-11e4e7bb73ac\",\"name\":\"session_id\",\"type\":\"string\",\"value\":\"=491634502879\"},{\"id\":\"d381c930-a92f-404f-ac91-ad6437d6b0c9\",\"name\":\"name\",\"type\":\"string\",\"value\":\"=Genn Sverster\"},{\"id\":\"4ead1fb5-098b-4cbc-bc78-d65b188ca5b0\",\"name\":\"chatInput\",\"type\":\"string\",\"value\":\"=wie gehts dir?\"}]}},\"typeVersion\":3.4},{\"id\":\"f56b629c-5374-43ce-b55b-efd7f14f1231\",\"name\":\"GeminiFlash2.0\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\"position\":[840,140],\"parameters\":{\"options\":{},\"modelName\":\"models/gemini-2.0-flash\"},\"credentials\":{\"googlePalmApi\":{\"id\":\"clmB8ZYJMHaHmnsu\",\"name\":\"Stardawn#1\"}},\"typeVersion\":1},{\"id\":\"1da22e93-504e-4616-bac3-dabd9a4b145a\",\"name\":\"Supabase Postgres Database\",\"type\":\"@n8n/n8n-nodes-langchain.memoryPostgresChat\",\"position\":[1100,140],\"parameters\":{\"tableName\":\"whatsapp_messages3\",\"sessionKey\":\"={{ $json.session_id }}\",\"sessionIdType\":\"customKey\",\"contextWindowLength\":20},\"credentials\":{\"postgres\":{\"id\":\"B2m18ScvYBKPNF9s\",\"name\":\"Supabase SD - N8N Demo Chatbot\"}},\"typeVersion\":1.3},{\"id\":\"29a7eb84-2244-41e1-99c0-5daaeb80cf6e\",\"name\":\"Update additonal Values e.g. Name, Address ...\",\"type\":\"n8n-nodes-base.supabase\",\"position\":[1300,-80],\"parameters\":{\"filters\":{\"conditions\":[{\"keyName\":\"session_id\",\"keyValue\":\"={{ $('Set sample Input Variables').item.json.session_id }}\",\"condition\":\"eq\"},{\"keyName\":\"name\",\"keyValue\":\"NULL\",\"condition\":\"is\"}]},\"tableId\":\"whatsapp_messages3\",\"fieldsUi\":{\"fieldValues\":[{\"fieldId\":\"name\",\"fieldValue\":\"={{ $('Set sample Input Variables').item.json.name }}\"}]},\"matchType\":\"allFilters\",\"operation\":\"update\"},\"credentials\":{\"supabaseApi\":{\"id\":\"GHuUG6pmPATBHgob\",\"name\":\"N8N Chatbot\"}},\"typeVersion\":1},{\"id\":\"8094fdd7-f238-47dc-94f9-5e962d5f0c2f\",\"name\":\"Sample Agent \",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[960,-80],\"parameters\":{\"text\":\"={{ $json.chatInput }}\",\"options\":{\"systemMessage\":\"You are a helpful assistant\"},\"promptType\":\"define\"},\"typeVersion\":1.7}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"49fd22da-2875-49be-a3c0-6c0fcf378a8e\",\"connections\":{\"Sample Agent \":{\"main\":[[{\"node\":\"Update additonal Values e.g. Name, Address ...\",\"type\":\"main\",\"index\":0}]]},\"GeminiFlash2.0\":{\"ai_languageModel\":[[{\"node\":\"Sample Agent \",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Set sample Input Variables\":{\"main\":[[{\"node\":\"Sample Agent \",\"type\":\"main\",\"index\":0}]]},\"Supabase Postgres Database\":{\"ai_memory\":[[{\"node\":\"Sample Agent \",\"type\":\"ai_memory\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"Set sample Input Variables\",\"type\":\"main\",\"index\":0}]]}}}"
}