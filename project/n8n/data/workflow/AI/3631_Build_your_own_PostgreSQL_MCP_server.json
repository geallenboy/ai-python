{
  "title": "Build your own PostgreSQL MCP server",
  "url": "https://n8n.io/workflows/3631-build-your-own-postgresql-mcp-server/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/",
  "author": "Jimleuk",
  "publish_date": "Last update 4 days ago",
  "content": "",
  "workflow_json": "{\"meta\":{\"instanceId\":\"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\",\"templateCredsSetupCompleted\":true},\"nodes\":[{\"id\":\"0c49141e-128c-424e-afdf-ea131b7a3dd8\",\"name\":\"GetTableSchema\",\"type\":\"n8n-nodes-base.postgresTool\",\"position\":[-460,220],\"parameters\":{\"query\":\"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = $1\",\"options\":{\"queryReplacement\":\"={{ $fromAI('tableName', 'The name of the table.') }}\"},\"operation\":\"executeQuery\",\"descriptionType\":\"manual\",\"toolDescription\":\"Read a table's schema.\"},\"credentials\":{\"postgres\":{\"id\":\"elRn5sxKOfCdlEs6\",\"name\":\"Postgres account\"}},\"typeVersion\":2.6},{\"id\":\"8ffeefb9-357c-41bc-8239-0c07c706be97\",\"name\":\"ListTables\",\"type\":\"n8n-nodes-base.postgresTool\",\"position\":[-340,300],\"parameters\":{\"query\":\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'\",\"options\":{},\"operation\":\"executeQuery\",\"descriptionType\":\"manual\",\"toolDescription\":\"List all available tables.\"},\"credentials\":{\"postgres\":{\"id\":\"elRn5sxKOfCdlEs6\",\"name\":\"Postgres account\"}},\"typeVersion\":2.6},{\"id\":\"efcf7ff3-976e-448a-9d47-47a98f3b0fcb\",\"name\":\"When Executed by Another Workflow\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[280,200],\"parameters\":{\"workflowInputs\":{\"values\":[{\"name\":\"operation\"},{\"name\":\"tableName\"},{\"name\":\"values\",\"type\":\"object\"},{\"name\":\"where\",\"type\":\"object\"}]}},\"typeVersion\":1.1},{\"id\":\"abd292d7-fc2b-4e98-a474-b50e44d16b6c\",\"name\":\"CreateTableRecords\",\"type\":\"@n8n/n8n-nodes-langchain.toolWorkflow\",\"position\":[-240,400],\"parameters\":{\"name\":\"CreateTableRows\",\"workflowId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $workflow.id }}\"},\"description\":\"Call this tool to create a row in the database.\",\"workflowInputs\":{\"value\":{\"where\":\"={{ {} }}\",\"values\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values', `An object of key-value pair where key represents the column name.`, 'string') }}\",\"operation\":\"insert\",\"tableName\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tableName', `Name of table to update`, 'string') }}\"},\"schema\":[{\"id\":\"operation\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"operation\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"tableName\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"tableName\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"values\",\"type\":\"object\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"values\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"where\",\"type\":\"object\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"where\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[],\"attemptToConvertTypes\":false,\"convertFieldsToString\":false}},\"typeVersion\":2.1},{\"id\":\"4a71d42a-99a5-489e-b449-09c3c5081505\",\"name\":\"ReadTableRecord\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[760,0],\"parameters\":{\"query\":\"SELECT * FROM {{ $json.tableName }}\\n{{ $json.where && Object.keys($json.where).length > 0\\n  ? `WHERE ` + Object.keys($json.where).map((key,idx) => `${key} = $${idx+1}`).join(' AND ')\\n  : ''\\n}}\",\"options\":{\"queryReplacement\":\"={{ Object.values($json.where).join(',') }}\"},\"operation\":\"executeQuery\"},\"credentials\":{\"postgres\":{\"id\":\"elRn5sxKOfCdlEs6\",\"name\":\"Postgres account\"}},\"typeVersion\":2.6,\"alwaysOutputData\":true},{\"id\":\"bdc60aa8-9ab1-4bbd-8b9e-89c968d54043\",\"name\":\"Operation\",\"type\":\"n8n-nodes-base.switch\",\"position\":[460,200],\"parameters\":{\"rules\":{\"values\":[{\"outputKey\":\"READ\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"81b134bc-d671-4493-b3ad-8df9be3f49a6\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.operation }}\",\"rightValue\":\"read\"}]},\"renameOutput\":true},{\"outputKey\":\"INSERT\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"8d57914f-6587-4fb3-88e0-aa1de6ba56c1\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.operation }}\",\"rightValue\":\"insert\"}]},\"renameOutput\":true},{\"outputKey\":\"UPDATE\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"7c38f238-213a-46ec-aefe-22e0bcb8dffc\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.operation }}\",\"rightValue\":\"update\"}]},\"renameOutput\":true}]},\"options\":{}},\"typeVersion\":3.2},{\"id\":\"cdb5b556-3638-4fa5-94c6-bff0c03f6c89\",\"name\":\"UpdateTableRecord\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[760,400],\"parameters\":{\"query\":\"UPDATE {{ $json.tableName }}\\nSET\\n  {{ Object.keys($json.values)\\n  .map((key,idx) => `${key} = $${idx+1}`)\\n  .join(',')\\n}}\\nWHERE\\n  {{ Object.keys($json.where)\\n  .map((key,idx) => `${key} = $${idx+Object.keys($json.values).length+1}`)\\n  .join(' AND ')\\n}}\",\"options\":{\"queryReplacement\":\"={{ Object.values($json.values).join(',') }},{{ Object.values($json.where).join(',') }}\"},\"operation\":\"executeQuery\"},\"credentials\":{\"postgres\":{\"id\":\"elRn5sxKOfCdlEs6\",\"name\":\"Postgres account\"}},\"typeVersion\":2.6},{\"id\":\"9263fc78-321e-4c83-90d3-890dd87d6aed\",\"name\":\"UpdateTableRecords\",\"type\":\"@n8n/n8n-nodes-langchain.toolWorkflow\",\"position\":[-100,320],\"parameters\":{\"name\":\"UpdateTableRows\",\"workflowId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $workflow.id }}\"},\"description\":\"Call this tool to create a row in the database.\",\"workflowInputs\":{\"value\":{\"where\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('where', `An object of key-value pair where key represents the column name.`, 'string') }}\",\"values\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values', `An object of key-value pair where key represents the column name.`, 'string') }}\",\"operation\":\"=update\",\"tableName\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tableName', `Table to update`, 'string') }}\"},\"schema\":[{\"id\":\"operation\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"operation\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"tableName\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"tableName\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"values\",\"type\":\"object\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"values\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"where\",\"type\":\"object\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"where\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[],\"attemptToConvertTypes\":false,\"convertFieldsToString\":false}},\"typeVersion\":2.1},{\"id\":\"dd7e28fb-b2c7-4084-bc9b-9aa3e0187682\",\"name\":\"CreateTableRecord\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[760,200],\"parameters\":{\"query\":\"INSERT INTO {{ $json.tableName }}\\n  ({{ Object.keys($json.values).join(',') }})\\nVALUES\\n  ({{ Object.keys($json.values).map((_,idx) => `$${idx+1}`).join(',') }})\",\"options\":{\"queryReplacement\":\"={{ Object.values($json.values).join(',') }}\"},\"operation\":\"executeQuery\"},\"credentials\":{\"postgres\":{\"id\":\"elRn5sxKOfCdlEs6\",\"name\":\"Postgres account\"}},\"typeVersion\":2.6},{\"id\":\"324503c0-117b-45ec-97dd-7074eb1db22e\",\"name\":\"ReadTableRows\",\"type\":\"@n8n/n8n-nodes-langchain.toolWorkflow\",\"position\":[20,240],\"parameters\":{\"name\":\"ReadTableRows\",\"workflowId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $workflow.id }}\"},\"description\":\"Call this tool to read a row in the database.\",\"workflowInputs\":{\"value\":{\"where\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('where', `An object of key-value pair where key represents the column name.`, 'string') }}\",\"values\":\"{}\",\"operation\":\"read\",\"tableName\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tableName', ``, 'string') }}\"},\"schema\":[{\"id\":\"operation\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"operation\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"tableName\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"tableName\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"values\",\"type\":\"object\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"values\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"where\",\"type\":\"object\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"where\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[],\"attemptToConvertTypes\":false,\"convertFieldsToString\":false}},\"typeVersion\":2.1},{\"id\":\"9cf39ca3-b704-49ce-b6e2-db2703c4acad\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-520,-120],\"parameters\":{\"color\":7,\"width\":680,\"height\":660,\"content\":\"## 1. Set up an MCP Server Trigger\\n[Read more about the MCP Server Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger)\"},\"typeVersion\":1},{\"id\":\"ac3d9b98-8f1e-4abd-972c-1725aac1ad1e\",\"name\":\"PostgreSQL MCP Server\",\"type\":\"@n8n/n8n-nodes-langchain.mcpTrigger\",\"position\":[-340,20],\"webhookId\":\"a5fd7047-e31b-4c0d-bd68-c36072c3da0d\",\"parameters\":{\"path\":\"a5fd7047-e31b-4c0d-bd68-c36072c3da0d\"},\"typeVersion\":1},{\"id\":\"416a09d5-c327-410d-b951-a2d08402c6fe\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[180,-120],\"parameters\":{\"color\":7,\"width\":820,\"height\":720,\"content\":\"## 2. Keep Secure by Preventing Raw SQL Statements\\n[Read more about the PostgreSQL Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.postgres/)\\n\\nWhilst it may be easier to just let the Agent provide the full raw SQL statement,\\nit may expose you or your organisation to a real security risk where in the worst\\ncase, data may be unknowingly leaked or deleted.\\n\\nForcing the agent to provide only the parameters of the query\\nmeans we can guard somewhat against this risk and also allows\\nuse of query parameters as best practice against SQL injection attacks.\\n\"},\"typeVersion\":1},{\"id\":\"0187fb3f-4c31-461d-84e9-4a4a0bf4188d\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1000,-560],\"parameters\":{\"width\":440,\"height\":1320,\"content\":\"## Try It Out!\\n### This n8n demonstrates how to build a simple PostgreSQL MCP server to manage your PostgreSQL database such as HR, Payroll, Sale, Inventory and More!\\n\\nThis MCP example is based off an official MCP reference implementation which can be found here -https://github.com/modelcontextprotocol/servers/tree/main/src/postgres\\n\\n### How it works\\n* A MCP server trigger is used and connected to 5 tools: 2 postgreSQL and 3 custom workflow.\\n* The 2 postgreSQL tools are simple read-only queries and as such, the postgreSQL tool can be simply used.\\n* The 3 custom workflow tools are used for select, insert and update queries as these are operations which require a bit more discretion.\\n* Whilst it may be easier to allow the agent to use raw SQL queries, we may find it a little safer to just allow for the parameters instead. The custom workflow tool allows us to define this restricted schema for tool input which we'll use to construct the SQL statement ourselves.\\n* All 3 custom workflow tools trigger the same \\\"Execute workflow\\\" trigger in this very template which has a switch to route the operation to the correct handler.\\n* Finally, we use our standard PostgreSQL node to handle select, insert and update operations. The responses are then sent back to the the MCP client.\\n\\n### How to use\\n* This PostgreSQL MCP server allows any compatible MCP client to manage a PostgreSQL database by supporting select, create and update operations. You will need to have a database available before you can use this server.\\n* Connect your MCP client by following the n8n guidelines here - https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop\\n* Try the following queries in your MCP client:\\n  * \\\"Please help me check if Alex has an entry in the users table. If not, please help me create a record for her.\\\"\\n  * \\\"What was the top selling product in the last week?\\\"\\n  * \\\"How many high priority support tickets are still open this morning?\\\"\\n\\n### Requirements\\n* PostgreSQL for database. This can be an external database such as Supabase or one you can host internally.\\n* MCP Client or Agent for usage such as Claude Desktop - https://claude.ai/download\\n\\n### Customising this workflow\\n* If the scope of schemas or tables is too open, try restrict it so the MCP serves a specific purpose for business operations. eg. Confine the querying and editing to HR only tables before providing access to people in that department.\\n* Remember to set the MCP server to require credentials before going to production and sharing this MCP server with others!\"},\"typeVersion\":1},{\"id\":\"bc4e427f-f6fd-4243-844a-8edf2dc1a0e9\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-520,-240],\"parameters\":{\"color\":5,\"width\":380,\"height\":100,\"content\":\"### Always Authenticate Your Server!\\nBefore going to production, it's always advised to enable authentication on your MCP server trigger.\"},\"typeVersion\":1}],\"pinData\":{},\"connections\":{\"Operation\":{\"main\":[[{\"node\":\"ReadTableRecord\",\"type\":\"main\",\"index\":0}],[{\"node\":\"CreateTableRecord\",\"type\":\"main\",\"index\":0}],[{\"node\":\"UpdateTableRecord\",\"type\":\"main\",\"index\":0}]]},\"ListTables\":{\"ai_tool\":[[{\"node\":\"PostgreSQL MCP Server\",\"type\":\"ai_tool\",\"index\":0}]]},\"ReadTableRows\":{\"ai_tool\":[[{\"node\":\"PostgreSQL MCP Server\",\"type\":\"ai_tool\",\"index\":0}]]},\"GetTableSchema\":{\"ai_tool\":[[{\"node\":\"PostgreSQL MCP Server\",\"type\":\"ai_tool\",\"index\":0}]]},\"ReadTableRecord\":{\"main\":[[]]},\"CreateTableRecords\":{\"ai_tool\":[[{\"node\":\"PostgreSQL MCP Server\",\"type\":\"ai_tool\",\"index\":0}]]},\"UpdateTableRecords\":{\"ai_tool\":[[{\"node\":\"PostgreSQL MCP Server\",\"type\":\"ai_tool\",\"index\":0}]]},\"When Executed by Another Workflow\":{\"main\":[[{\"node\":\"Operation\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "### This n8n demonstrates how to build a simple PostgreSQL MCP server to manage your PostgreSQL database such as HR, Payroll, Sale, Inventory and More!\n\nThis MCP example is based off an official MCP reference implementation which can be found here -<https://github.com/modelcontextprotocol/servers/tree/main/src/postgres>\n\n### How it works\n\n  * A MCP server trigger is used and connected to 5 tools: 2 postgreSQL and 3 custom workflow.\n  * The 2 postgreSQL tools are simple read-only queries and as such, the postgreSQL tool can be simply used.\n  * The 3 custom workflow tools are used for select, insert and update queries as these are operations which require a bit more discretion.\n  * Whilst it may be easier to allow the agent to use raw SQL queries, we may find it a little safer to just allow for the parameters instead. The custom workflow tool allows us to define this restricted schema for tool input which we'll use to construct the SQL statement ourselves.\n  * All 3 custom workflow tools trigger the same \"Execute workflow\" trigger in this very template which has a switch to route the operation to the correct handler.\n  * Finally, we use our standard PostgreSQL node to handle select, insert and update operations. The responses are then sent back to the the MCP client.\n\n\n\n### How to use\n\n  * This PostgreSQL MCP server allows any compatible MCP client to manage a PostgreSQL database by supporting select, create and update operations. You will need to have a database available before you can use this server.\n  * Connect your MCP client by following the n8n guidelines here - <https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop>\n  * Try the following queries in your MCP client: \n    * \"Please help me check if Alex has an entry in the users table. If not, please help me create a record for her.\"\n    * \"What was the top selling product in the last week?\"\n    * \"How many high priority support tickets are still open this morning?\"\n\n\n\n### Requirements\n\n  * PostgreSQL for database. This can be an external database such as Supabase or one you can host internally.\n  * MCP Client or Agent for usage such as Claude Desktop - <https://claude.ai/download>\n\n\n\n### Customising this workflow\n\n  * If the scope of schemas or tables is too open, try restrict it so the MCP serves a specific purpose for business operations. eg. Confine the querying and editing to HR only tables before providing access to people in that department.\n  * Remember to set the MCP server to require credentials before going to production and sharing this MCP server with others!\n\n\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><h3>This n8n demonstrates how to build a simple PostgreSQL MCP server to manage your PostgreSQL database such as HR, Payroll, Sale, Inventory and More!</h3>\n<p>This MCP example is based off an official MCP reference implementation which can be found here -<a href=\"https://github.com/modelcontextprotocol/servers/tree/main/src/postgres\" rel=\"ugc nofollow\" target=\"_blank\">https://github.com/modelcontextprotocol/servers/tree/main/src/postgres</a></p>\n<h3>How it works</h3>\n<ul>\n<li>A MCP server trigger is used and connected to 5 tools: 2 postgreSQL and 3 custom workflow.</li>\n<li>The 2 postgreSQL tools are simple read-only queries and as such, the postgreSQL tool can be simply used.</li>\n<li>The 3 custom workflow tools are used for select, insert and update queries as these are operations which require a bit more discretion.</li>\n<li>Whilst it may be easier to allow the agent to use raw SQL queries, we may find it a little safer to just allow for the parameters instead. The custom workflow tool allows us to define this restricted schema for tool input which we'll use to construct the SQL statement ourselves.</li>\n<li>All 3 custom workflow tools trigger the same \"Execute workflow\" trigger in this very template which has a switch to route the operation to the correct handler.</li>\n<li>Finally, we use our standard PostgreSQL node to handle select, insert and update operations. The responses are then sent back to the the MCP client.</li>\n</ul>\n<h3>How to use</h3>\n<ul>\n<li>This PostgreSQL MCP server allows any compatible MCP client to manage a PostgreSQL database by supporting select, create and update operations. You will need to have a database available before you can use this server.</li>\n<li>Connect your MCP client by following the n8n guidelines here - <a href=\"https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop\" rel=\"ugc nofollow\" target=\"_blank\">https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop</a></li>\n<li>Try the following queries in your MCP client:\n<ul>\n<li>\"Please help me check if Alex has an entry in the users table. If not, please help me create a record for her.\"</li>\n<li>\"What was the top selling product in the last week?\"</li>\n<li>\"How many high priority support tickets are still open this morning?\"</li>\n</ul>\n</li>\n</ul>\n<h3>Requirements</h3>\n<ul>\n<li>PostgreSQL for database. This can be an external database such as Supabase or one you can host internally.</li>\n<li>MCP Client or Agent for usage such as Claude Desktop - <a href=\"https://claude.ai/download\" rel=\"ugc nofollow\" target=\"_blank\">https://claude.ai/download</a></li>\n</ul>\n<h3>Customising this workflow</h3>\n<ul>\n<li>If the scope of schemas or tables is too open, try restrict it so the MCP serves a specific purpose for business operations. eg. Confine the querying and editing to HR only tables before providing access to people in that department.</li>\n<li>Remember to set the MCP server to require credentials before going to production and sharing this MCP server with others!</li>\n</ul>\n</div><!--]-->",
  "readme_zh": "### 本n8n示例演示如何构建一个简易的PostgreSQL MCP服务器，用于管理人力资源、薪资、销售、库存等PostgreSQL数据库！\n\n该MCP示例基于官方MCP参考实现（详见：<https://github.com/modelcontextprotocol/servers/tree/main/src/postgres>）\n\n### 实现原理\n\n* 通过MCP服务器触发器连接5个工具节点：2个PostgreSQL节点与3个自定义工作流节点\n* 2个PostgreSQL节点仅执行只读查询，因此可直接使用标准PostgreSQL工具\n* 3个自定义工作流节点分别处理选择、插入和更新操作，这些需要更高安全级别的查询\n* 虽然允许代理直接执行原始SQL更便捷，但仅开放参数传递更为安全。自定义工作流工具可定义受限的输入模式，我们将据此自主构建SQL语句\n* 所有3个自定义工作流节点均触发本模板中的\"执行工作流\"触发器，通过路由开关分配至对应处理器\n* 最终使用标准PostgreSQL节点执行查询/插入/更新操作，并将响应返回MCP客户端\n\n### 使用指南\n\n* 该PostgreSQL MCP服务器支持选择/创建/更新操作，任何兼容MCP客户端均可管理PostgreSQL数据库（使用前需预先配置数据库）\n* 按n8n指南连接MCP客户端：<https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop>\n* 可尝试执行以下查询：\n  * \"请检查users表中是否存在Alex的记录，若无则为其创建条目\"\n  * \"上周最畅销的产品是什么？\"\n  * \"今早还有多少高优先级支持工单未解决？\"\n\n### 环境要求\n\n* PostgreSQL数据库（可使用Supabase等外部服务或自建数据库）\n* MCP客户端/代理（如Claude Desktop：<https://claude.ai/download>）\n\n### 定制建议\n\n* 若当前模式/表范围过于开放，建议限定为特定业务场景（例如：仅开放人力资源相关表的查询编辑权限给该部门人员）\n* 正式上线前请务必设置MCP服务器身份验证，再共享给其他用户！",
  "title_zh": "构建您自己的PostgreSQL MCP服务器",
  "publish_date_zh": "上次更新于4天前",
  "workflow_json_zh": "{\"meta\": {\"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\", \"templateCredsSetupCompleted\": true}, \"nodes\": [{\"id\": \"0c49141e-128c-424e-afdf-ea131b7a3dd8\", \"name\": \"获取表结构\", \"type\": \"n8n-nodes-base.postgresTool\", \"position\": [-460, 220], \"parameters\": {\"query\": \"SELECT 列名, 数据类型 FROM 信息模式.列 WHERE 表名 = $1\", \"options\": {\"queryReplacement\": \"={{ $fromAI('tableName', 'The name of the table.') }}\"}, \"operation\": \"执行查询\", \"descriptionType\": \"手动\", \"toolDescription\": \"读取表的架构。\"}, \"credentials\": {\"postgres\": {\"id\": \"elRn5sxKOfCdlEs6\", \"name\": \"Postgres account\"}}, \"typeVersion\": 2.6}, {\"id\": \"8ffeefb9-357c-41bc-8239-0c07c706be97\", \"name\": \"列出表格\", \"type\": \"n8n-nodes-base.postgresTool\", \"position\": [-340, 300], \"parameters\": {\"query\": \"从information_schema.tables中选择表名，其中表模式为'public'\", \"options\": {}, \"operation\": \"执行查询\", \"descriptionType\": \"手动\", \"toolDescription\": \"列出所有可用的表。\"}, \"credentials\": {\"postgres\": {\"id\": \"elRn5sxKOfCdlEs6\", \"name\": \"Postgres account\"}}, \"typeVersion\": 2.6}, {\"id\": \"efcf7ff3-976e-448a-9d47-47a98f3b0fcb\", \"name\": \"当由另一个工作流执行时\", \"type\": \"n8n-nodes-base.executeWorkflowTrigger\", \"position\": [280, 200], \"parameters\": {\"workflowInputs\": {\"values\": [{\"name\": \"operation\"}, {\"name\": \"tableName\"}, {\"name\": \"values\", \"type\": \"object\"}, {\"name\": \"where\", \"type\": \"object\"}]}}, \"typeVersion\": 1.1}, {\"id\": \"abd292d7-fc2b-4e98-a474-b50e44d16b6c\", \"name\": \"创建表记录\", \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\", \"position\": [-240, 400], \"parameters\": {\"name\": \"创建表格行\", \"workflowId\": {\"__rl\": true, \"mode\": \"id\", \"value\": \"={{ $workflow.id }}\"}, \"description\": \"调用此工具以在数据库中创建一行记录。\", \"workflowInputs\": {\"value\": {\"where\": \"={{ {} }}\", \"values\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values', `An object of key-value pair where key represents the column name.`, 'string') }}\", \"operation\": \"insert\", \"tableName\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tableName', `Name of table to update`, 'string') }}\"}, \"schema\": [{\"id\": \"operation\", \"type\": \"string\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"operation\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"tableName\", \"type\": \"string\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"tableName\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"values\", \"type\": \"object\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"values\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"where\", \"type\": \"object\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"where\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}], \"mappingMode\": \"defineBelow\", \"matchingColumns\": [], \"attemptToConvertTypes\": false, \"convertFieldsToString\": false}}, \"typeVersion\": 2.1}, {\"id\": \"4a71d42a-99a5-489e-b449-09c3c5081505\", \"name\": \"读取表记录\", \"type\": \"n8n-nodes-base.postgres\", \"position\": [760, 0], \"parameters\": {\"query\": \"从 {{ $json.tableName }} 选择所有记录\\n{{ $json.where && Object.keys($json.where).length > 0\\n  ? `条件 ` + Object.keys($json.where).map((key,idx) => `${key} = $${idx+1}`).join(' 且 ')\\n  : ''\\n}}\", \"options\": {\"queryReplacement\": \"={{ Object.values($json.where).join(',') }}\"}, \"operation\": \"执行查询\"}, \"credentials\": {\"postgres\": {\"id\": \"elRn5sxKOfCdlEs6\", \"name\": \"Postgres account\"}}, \"typeVersion\": 2.6, \"alwaysOutputData\": true}, {\"id\": \"bdc60aa8-9ab1-4bbd-8b9e-89c968d54043\", \"name\": \"行动\", \"type\": \"n8n-nodes-base.switch\", \"position\": [460, 200], \"parameters\": {\"rules\": {\"values\": [{\"outputKey\": \"READ\", \"conditions\": {\"options\": {\"version\": 2, \"leftValue\": \"\", \"caseSensitive\": true, \"typeValidation\": \"strict\"}, \"combinator\": \"and\", \"conditions\": [{\"id\": \"81b134bc-d671-4493-b3ad-8df9be3f49a6\", \"operator\": {\"type\": \"string\", \"operation\": \"equals\"}, \"leftValue\": \"={{ $json.operation }}\", \"rightValue\": \"read\"}]}, \"renameOutput\": true}, {\"outputKey\": \"INSERT\", \"conditions\": {\"options\": {\"version\": 2, \"leftValue\": \"\", \"caseSensitive\": true, \"typeValidation\": \"strict\"}, \"combinator\": \"and\", \"conditions\": [{\"id\": \"8d57914f-6587-4fb3-88e0-aa1de6ba56c1\", \"operator\": {\"name\": \"filter.operator.equals\", \"type\": \"string\", \"operation\": \"equals\"}, \"leftValue\": \"={{ $json.operation }}\", \"rightValue\": \"insert\"}]}, \"renameOutput\": true}, {\"outputKey\": \"UPDATE\", \"conditions\": {\"options\": {\"version\": 2, \"leftValue\": \"\", \"caseSensitive\": true, \"typeValidation\": \"strict\"}, \"combinator\": \"and\", \"conditions\": [{\"id\": \"7c38f238-213a-46ec-aefe-22e0bcb8dffc\", \"operator\": {\"name\": \"filter.operator.equals\", \"type\": \"string\", \"operation\": \"equals\"}, \"leftValue\": \"={{ $json.operation }}\", \"rightValue\": \"update\"}]}, \"renameOutput\": true}]}, \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"cdb5b556-3638-4fa5-94c6-bff0c03f6c89\", \"name\": \"更新表记录\", \"type\": \"n8n-nodes-base.postgres\", \"position\": [760, 400], \"parameters\": {\"query\": \"更新 {{ $json.tableName }}\\n设置\\n  {{ Object.keys($json.values)\\n  .map((key,idx) => `${key} = $${idx+1}`)\\n  .join(',')\\n}}\\n条件\\n  {{ Object.keys($json.where)\\n  .map((key,idx) => `${key} = $${idx+Object.keys($json.values).length+1}`)\\n  .join(' AND ')\\n}}\", \"options\": {\"queryReplacement\": \"={{ Object.values($json.values).join(',') }},{{ Object.values($json.where).join(',') }}\"}, \"operation\": \"执行查询\"}, \"credentials\": {\"postgres\": {\"id\": \"elRn5sxKOfCdlEs6\", \"name\": \"Postgres account\"}}, \"typeVersion\": 2.6}, {\"id\": \"9263fc78-321e-4c83-90d3-890dd87d6aed\", \"name\": \"更新表记录\", \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\", \"position\": [-100, 320], \"parameters\": {\"name\": \"更新表格行\", \"workflowId\": {\"__rl\": true, \"mode\": \"id\", \"value\": \"={{ $workflow.id }}\"}, \"description\": \"调用此工具以在数据库中创建一行记录。\", \"workflowInputs\": {\"value\": {\"where\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('where', `An object of key-value pair where key represents the column name.`, 'string') }}\", \"values\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values', `An object of key-value pair where key represents the column name.`, 'string') }}\", \"operation\": \"=update\", \"tableName\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tableName', `Table to update`, 'string') }}\"}, \"schema\": [{\"id\": \"operation\", \"type\": \"string\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"operation\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"tableName\", \"type\": \"string\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"tableName\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"values\", \"type\": \"object\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"values\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"where\", \"type\": \"object\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"where\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}], \"mappingMode\": \"defineBelow\", \"matchingColumns\": [], \"attemptToConvertTypes\": false, \"convertFieldsToString\": false}}, \"typeVersion\": 2.1}, {\"id\": \"dd7e28fb-b2c7-4084-bc9b-9aa3e0187682\", \"name\": \"创建表记录\", \"type\": \"n8n-nodes-base.postgres\", \"position\": [760, 200], \"parameters\": {\"query\": \"插入到 {{ $json.tableName }}\\n  ({{ Object.keys($json.values).join(',') }})\\n值\\n  ({{ Object.keys($json.values).map((_,idx) => `$${idx+1}`).join(',') }})\", \"options\": {\"queryReplacement\": \"={{ Object.values($json.values).join(',') }}\"}, \"operation\": \"执行查询\"}, \"credentials\": {\"postgres\": {\"id\": \"elRn5sxKOfCdlEs6\", \"name\": \"Postgres account\"}}, \"typeVersion\": 2.6}, {\"id\": \"324503c0-117b-45ec-97dd-7074eb1db22e\", \"name\": \"读取表格行\", \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\", \"position\": [20, 240], \"parameters\": {\"name\": \"读取表格行\", \"workflowId\": {\"__rl\": true, \"mode\": \"id\", \"value\": \"={{ $workflow.id }}\"}, \"description\": \"调用此工具以读取数据库中的一行数据。\", \"workflowInputs\": {\"value\": {\"where\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('where', `An object of key-value pair where key represents the column name.`, 'string') }}\", \"values\": \"{}\", \"operation\": \"read\", \"tableName\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tableName', ``, 'string') }}\"}, \"schema\": [{\"id\": \"operation\", \"type\": \"string\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"operation\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"tableName\", \"type\": \"string\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"tableName\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"values\", \"type\": \"object\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"values\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"where\", \"type\": \"object\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"where\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}], \"mappingMode\": \"defineBelow\", \"matchingColumns\": [], \"attemptToConvertTypes\": false, \"convertFieldsToString\": false}}, \"typeVersion\": 2.1}, {\"id\": \"9cf39ca3-b704-49ce-b6e2-db2703c4acad\", \"name\": \"便利贴\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-520, -120], \"parameters\": {\"color\": 7, \"width\": 680, \"height\": 660, \"content\": \"## 1. 设置MCP服务器触发器\\n[了解更多关于MCP服务器触发器的信息](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger)\"}, \"typeVersion\": 1}, {\"id\": \"ac3d9b98-8f1e-4abd-972c-1725aac1ad1e\", \"name\": \"PostgreSQL MCP 服务器\", \"type\": \"@n8n/n8n-nodes-langchain.mcpTrigger\", \"position\": [-340, 20], \"webhookId\": \"a5fd7047-e31b-4c0d-bd68-c36072c3da0d\", \"parameters\": {\"path\": \"（注：原文为一串无实际语义的UUID编码，通常不进行翻译。若需保留可直译为：）  \\na5fd7047-e31b-4c0d-bd68-c36072c3da0d\"}, \"typeVersion\": 1}, {\"id\": \"416a09d5-c327-410d-b951-a2d08402c6fe\", \"name\": \"便利贴1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [180, -120], \"parameters\": {\"color\": 7, \"width\": 820, \"height\": 720, \"content\": \"## 2. 通过禁止原始SQL语句确保安全\\n[进一步了解PostgreSQL节点](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.postgres/)\\n\\n虽然直接让智能体提供完整的原始SQL语句可能更为简便，但这可能会使您或您的组织面临严重的安全风险，最坏情况下可能导致数据在不知情的情况下泄露或删除。\\n\\n强制智能体仅提供查询参数，意味着我们能在一定程度上防范此类风险，同时遵循使用查询参数这一防止SQL注入攻击的最佳实践。\"}, \"typeVersion\": 1}, {\"id\": \"0187fb3f-4c31-461d-84e9-4a4a0bf4188d\", \"name\": \"便利贴2\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-1000, -560], \"parameters\": {\"width\": 440, \"height\": 1320, \"content\": \"## 试试看吧！\\n### 本n8n示例演示如何构建一个简易的PostgreSQL MCP服务器，用于管理人力资源、薪资、销售、库存等各类PostgreSQL数据库！\\n\\n该MCP示例基于官方参考实现开发（源码详见：https://github.com/modelcontextprotocol/servers/tree/main/src/postgres）\\n\\n### 实现原理\\n* 通过MCP服务器触发器连接5个功能模块：2个PostgreSQL节点与3个自定义工作流\\n* 2个PostgreSQL节点仅执行只读查询，可直接使用标准功能\\n* 3个自定义工作流分别处理查询、插入和更新操作，这些需要更高安全级别的操作\\n* 虽然允许智能体直接执行原始SQL更简便，但采用参数化输入更为安全。自定义工作流工具可定义严格的输入模式，由我们自行构建SQL语句\\n* 所有3个自定义工作流都会触发本模板中的\\\"执行工作流\\\"触发器，通过路由开关分配至对应处理器\\n* 最终使用标准PostgreSQL节点执行查询/插入/更新操作，并将响应返回MCP客户端\\n\\n### 使用方法\\n* 该PostgreSQL MCP服务器支持查询、创建和更新操作，任何兼容MCP客户端均可管理数据库（使用前需准备可用数据库）\\n* 按n8n指南连接MCP客户端：https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop\\n* 在客户端尝试以下查询：\\n  * \\\"请检查users表中是否有Alex的记录，若无请为她创建\\\"\\n  * \\\"上周最畅销的产品是什么？\\\"\\n  * \\\"今早还有多少高优先级支持工单未解决？\\\"\\n\\n### 环境要求\\n* PostgreSQL数据库（可使用Supabase等外部服务或自建）\\n* MCP客户端工具如Claude Desktop：https://claude.ai/download\\n\\n### 自定义建议\\n* 若需限制数据范围，可约束MCP仅处理特定业务表（如仅开放人力资源相关表的查询编辑权限）\\n* 正式部署前请务必设置身份验证，再与其他用户共享该MCP服务器！\"}, \"typeVersion\": 1}, {\"id\": \"bc4e427f-f6fd-4243-844a-8edf2dc1a0e9\", \"name\": \"便利贴3\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-520, -240], \"parameters\": {\"color\": 5, \"width\": 380, \"height\": 100, \"content\": \"### 始终验证您的服务器身份！\\n在投入生产环境前，强烈建议您为MCP服务器触发器启用身份验证功能。\"}, \"typeVersion\": 1}], \"pinData\": {}, \"connections\": {\"Operation\": {\"main\": [[{\"node\": \"ReadTableRecord\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"CreateTableRecord\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"UpdateTableRecord\", \"type\": \"main\", \"index\": 0}]]}, \"ListTables\": {\"ai_tool\": [[{\"node\": \"PostgreSQL MCP Server\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"ReadTableRows\": {\"ai_tool\": [[{\"node\": \"PostgreSQL MCP Server\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"GetTableSchema\": {\"ai_tool\": [[{\"node\": \"PostgreSQL MCP Server\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"ReadTableRecord\": {\"main\": [[]]}, \"CreateTableRecords\": {\"ai_tool\": [[{\"node\": \"PostgreSQL MCP Server\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"UpdateTableRecords\": {\"ai_tool\": [[{\"node\": \"PostgreSQL MCP Server\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"When Executed by Another Workflow\": {\"main\": [[{\"node\": \"Operation\", \"type\": \"main\", \"index\": 0}]]}}}"
}