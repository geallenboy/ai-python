{
  "title": "Build your own SQLite MCP server",
  "url": "https://n8n.io/workflows/3632-build-your-own-sqlite-mcp-server/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/",
  "author": "Jimleuk",
  "publish_date": "Last update 4 days ago",
  "content": "",
  "workflow_json": "{\"meta\":{\"instanceId\":\"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\"},\"nodes\":[{\"id\":\"fcbf7023-7e12-49d8-9c7d-4cb431c79905\",\"name\":\"When Executed by Another Workflow\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[460,260],\"parameters\":{\"workflowInputs\":{\"values\":[{\"name\":\"operation\"},{\"name\":\"tableName\"},{\"name\":\"values\",\"type\":\"object\"},{\"name\":\"where\",\"type\":\"object\"}]}},\"typeVersion\":1.1},{\"id\":\"58c93321-ded9-48c1-812f-c35d160e257b\",\"name\":\"Operation\",\"type\":\"n8n-nodes-base.switch\",\"position\":[640,260],\"parameters\":{\"rules\":{\"values\":[{\"outputKey\":\"READ\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"81b134bc-d671-4493-b3ad-8df9be3f49a6\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.operation }}\",\"rightValue\":\"read\"}]},\"renameOutput\":true},{\"outputKey\":\"INSERT\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"8d57914f-6587-4fb3-88e0-aa1de6ba56c1\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.operation }}\",\"rightValue\":\"insert\"}]},\"renameOutput\":true},{\"outputKey\":\"UPDATE\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"7c38f238-213a-46ec-aefe-22e0bcb8dffc\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.operation }}\",\"rightValue\":\"update\"}]},\"renameOutput\":true}]},\"options\":{}},\"typeVersion\":3.2},{\"id\":\"865ae43a-14ec-4aac-9396-d0aef1ab4a75\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-340,-100],\"parameters\":{\"color\":7,\"width\":680,\"height\":660,\"content\":\"## 1. Set up an MCP Server Trigger\\n[Read more about the MCP Server Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger)\"},\"typeVersion\":1},{\"id\":\"35551851-319a-47cf-87cd-a63b128300cc\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[360,-100],\"parameters\":{\"color\":7,\"width\":820,\"height\":720,\"content\":\"## 2. Keep Secure by Preventing Raw SQL Statements\\n[Read more about the Code Node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/)\\n\\nWhilst it may be easier to just let the Agent provide the full raw SQL statement,\\nit may expose you or your organisation to a real security risk where in the worst\\ncase, data may be unknowingly leaked or deleted.\\n\\nForcing the agent to provide only the parameters of the query\\nmeans we can guard somewhat against this risk and also allows\\nuse of query parameters as best practice against SQL injection attacks.\\n\"},\"typeVersion\":1},{\"id\":\"95c35568-e447-4634-afe8-c902ba5c7d2f\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-340,-220],\"parameters\":{\"color\":5,\"width\":380,\"height\":100,\"content\":\"### Always Authenticate Your Server!\\nBefore going to production, it's always advised to enable authentication on your MCP server trigger.\"},\"typeVersion\":1},{\"id\":\"2d0f98f8-043a-459c-8b77-634e06ee0f57\",\"name\":\"SQLite MCP Server\",\"type\":\"@n8n/n8n-nodes-langchain.mcpTrigger\",\"position\":[-160,60],\"webhookId\":\"3124a4cd-4e93-4c1b-b4db-b5599f4889b1\",\"parameters\":{\"path\":\"3124a4cd-4e93-4c1b-b4db-b5599f4889b1\"},\"typeVersion\":1},{\"id\":\"6f313137-eb8f-429b-a6c9-7b17e067dc5e\",\"name\":\"CreateRecord\",\"type\":\"n8n-nodes-base.code\",\"position\":[940,260],\"parameters\":{\"jsCode\":\"const sqlite3 = require('sqlite3').verbose();\\nconst { promisify } = require('util');\\n\\nconst db = new sqlite3.Database('/home/node/test.db');\\nconst run = promisify(db.run.bind(db));\\n\\nconst { json } = $input.first();\\n\\n\\nlet output = '';\\nconst statement = [\\n  `INSERT INTO ${json.tableName}`,\\n  `   (${Object.keys(json.values).join(',')})`,\\n  `VALUES`,\\n  `  (${Object.keys(json.values).map(_ => '?').join(',')})`\\n].join(' ');\\nconst params = Object.values(json.values);\\n\\ntry {\\n  await run(statement.trim(), params);\\n  output = { output: 'ok', error: null };\\n} catch (err) {\\n  output = { output: null, error: err };\\n} finally {\\n  await db.close();\\n}\\n\\nreturn output;\"},\"typeVersion\":2},{\"id\":\"b2530656-bbf4-4316-8b8e-c5d27865e45f\",\"name\":\"UpdateRecord\",\"type\":\"n8n-nodes-base.code\",\"position\":[940,440],\"parameters\":{\"jsCode\":\"const sqlite3 = require('sqlite3').verbose();\\nconst { promisify } = require('util');\\n\\nconst db = new sqlite3.Database('/home/node/test.db');\\nconst run = promisify(db.run.bind(db));\\n\\nconst { json } = $input.first();\\n\\nlet output = '';\\nconst statement = [\\n  `UPDATE ${json.tableName}`,\\n  `SET`,\\n  `${Object.keys(json.values)\\n    .map(key => `${key} = ?`)\\n    .join(',')}`,\\n  `WHERE`,\\n  `${Object.keys(json.where)\\n     .map((key,idx) => `${key} = ?`)\\n     .join(' AND ')}`\\n].join(' ');\\nconst params = [ ...Object.values(json.values), ...Object.values(json.where)];\\n\\ntry {\\n  await run(statement, params);\\n  output = { output: 'ok', error: null };\\n} catch (err) {\\n  output = { output: null, error: err };\\n} finally {\\n  await db.close();\\n}\\n\\nreturn output;\"},\"typeVersion\":2},{\"id\":\"8c1b8bcb-20f1-4ef9-b646-9d89177651dd\",\"name\":\"ReadRecords\",\"type\":\"n8n-nodes-base.code\",\"position\":[940,80],\"parameters\":{\"jsCode\":\"const sqlite3 = require('sqlite3').verbose();\\nconst { promisify } = require('util');\\n\\nconst db = new sqlite3.Database('/home/node/test.db');\\nconst all = promisify(db.all.bind(db));\\n\\nconst { json } = $input.first();\\n\\nlet output = '';\\nconst statement = [\\n  `SELECT * FROM ${json.tableName}`,\\n  json?.where && Object.keys(json?.where).length > 0\\n    ? `WHERE ` + Object.keys(json.where)\\n        .map((key,idx) => `${key} = $${idx+1}`)\\n        .join(' AND ')\\n    : ''\\n].join(' ');\\nconst params = json.where ? Object.values(json.where) : undefined;\\n\\ntry {\\n  \\n  const results = await all(statement.trim(), params);\\n\\n  output = { output: [].concat(results), error: null };\\n} catch (err) {\\n  output = { output: null, error: err };\\n} finally {\\n  await db.close();\\n}\\n\\nreturn output\"},\"typeVersion\":2},{\"id\":\"87df3eed-b4d5-4a9c-bd82-0ad455449cd2\",\"name\":\"DescribeTables\",\"type\":\"@n8n/n8n-nodes-langchain.toolCode\",\"position\":[-160,340],\"parameters\":{\"name\":\"describeTable\",\"jsCode\":\"const sqlite3 = require('sqlite3').verbose();\\nconst { promisify } = require('util');\\n\\nconst db = new sqlite3.Database('/home/node/test.db');\\nconst all = promisify(db.all.bind(db));\\n\\nlet output = '';\\ntry {\\n  const rows = await all(`PRAGMA table_info(${query.tableName})`);\\n  const results = rows.map((col) => (\\n    `${col.name} | ${col.type} | NOT NULL: ${col.notnull} | Default: ${col.dflt_value}`\\n  )).join('\\\\n');\\n  \\n  output = { output: [].concat(results), error: null };\\n} catch (err) {\\n  output = { output: null, error: err };\\n} finally {\\n  await db.close();\\n}\\n\\nreturn JSON.stringify(output);\",\"schemaType\":\"manual\",\"description\":\"Call this tool to describe a table's schema.\",\"inputSchema\":\"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\\"tableName\\\"],\\n  \\\"properties\\\": {\\n    \\\"tableName\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"description\\\": \\\"Name of the table\\\"\\n    }\\n  }\\n}\",\"specifyInputSchema\":true},\"typeVersion\":1.1},{\"id\":\"4a0ba0d0-4955-44fd-92de-ad031ebb64cb\",\"name\":\"ListTables\",\"type\":\"@n8n/n8n-nodes-langchain.toolCode\",\"position\":[-260,240],\"parameters\":{\"name\":\"listTables\",\"jsCode\":\"const sqlite3 = require('sqlite3').verbose();\\nconst { promisify } = require('util');\\n\\nconst db = new sqlite3.Database('/home/node/test.db');\\nconst all = promisify(db.all.bind(db));\\n\\nlet output = '';\\ntry {\\n  const rows = await all(`SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'`, []);\\n  const results = rows.map((row) => row.name).join('\\\\n');\\n  \\n  output = { output: [].concat(results), error: null };\\n} catch (err) {\\n  output = { output: null, error: err };\\n} finally {\\n  await db.close();\\n}\\n\\nreturn JSON.stringify(output);\",\"description\":\"Call this tool to list all available tables in the SQLite Database.\"},\"typeVersion\":1.1},{\"id\":\"69e8e720-7e91-4b46-8db5-1afdf1f3dbe0\",\"name\":\"CreateRecords\",\"type\":\"@n8n/n8n-nodes-langchain.toolWorkflow\",\"position\":[-40,440],\"parameters\":{\"name\":\"CreateRecords\",\"workflowId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $workflow.id }}\"},\"description\":\"Call this tool to create a row in a SQLite table.\",\"workflowInputs\":{\"value\":{\"where\":\"={{ {} }}\",\"values\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values', `An object of key-value pair where key represents the column name.`, 'string') }}\",\"operation\":\"insert\",\"tableName\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tableName', `table to insert into`, 'string') }}\"},\"schema\":[{\"id\":\"operation\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"operation\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"tableName\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"tableName\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"values\",\"type\":\"object\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"values\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"where\",\"type\":\"object\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"where\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[],\"attemptToConvertTypes\":false,\"convertFieldsToString\":false}},\"typeVersion\":2.1},{\"id\":\"f2e18ae5-89a0-4d61-805b-e777f11300a2\",\"name\":\"UpdateRows\",\"type\":\"@n8n/n8n-nodes-langchain.toolWorkflow\",\"position\":[100,360],\"parameters\":{\"name\":\"updateRows\",\"workflowId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $workflow.id }}\"},\"description\":\"Call this tool to create a row in a table.\",\"workflowInputs\":{\"value\":{\"where\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('where', `An object of key-value pair where key represents the column name.`, 'string') }}\",\"values\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values', `An object of key-value pair where key represents the column name.`, 'string') }}\",\"operation\":\"update\",\"tableName\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tableName', `table to update`, 'string') }}\"},\"schema\":[{\"id\":\"operation\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"operation\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"tableName\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"tableName\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"values\",\"type\":\"object\",\"display\":true,\"required\":false,\"displayName\":\"values\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"where\",\"type\":\"object\",\"display\":true,\"required\":false,\"displayName\":\"where\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[],\"attemptToConvertTypes\":false,\"convertFieldsToString\":false}},\"typeVersion\":2.1},{\"id\":\"22645721-1b66-4a36-9be5-f1e5edde30f8\",\"name\":\"ReadRows\",\"type\":\"@n8n/n8n-nodes-langchain.toolWorkflow\",\"position\":[180,240],\"parameters\":{\"name\":\"readRows\",\"workflowId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $workflow.id }}\"},\"description\":\"Call this tool to read one or more rows in a table\",\"workflowInputs\":{\"value\":{\"where\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('where', `An object of key-value pair where key represents the column name.`, 'string') }}\",\"values\":\"={}\",\"operation\":\"read\",\"tableName\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tableName', `table to read from`, 'string') }}\"},\"schema\":[{\"id\":\"operation\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"operation\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"tableName\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"tableName\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"values\",\"type\":\"object\",\"display\":true,\"required\":false,\"displayName\":\"values\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"where\",\"type\":\"object\",\"display\":true,\"required\":false,\"displayName\":\"where\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[],\"attemptToConvertTypes\":false,\"convertFieldsToString\":false}},\"typeVersion\":2.1},{\"id\":\"2176742a-5a28-41c6-9cd7-ac3229ddcdb6\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-820,-800],\"parameters\":{\"width\":440,\"height\":1360,\"content\":\"## Try It Out!\\n**NOTE: This template is for Self-Hosted N8N Instances only.**\\n\\n### This n8n demonstrates how to build a simple SQLite MCP server to perform local database operations as well as use it for Business Intelligence.\\n\\nThis MCP example is based off an official MCP reference implementation which can be found here -https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite\\n\\n### How it works\\n* A MCP server trigger is used and connected to 5 tools: 2 Code Node and 3 Custom Workflow.\\n* The 2 Code Node tools use the SQLLite3 library and are simple read-only queries and as such, the Code Node tool can be simply used.\\n* The 3 custom workflow tools are used for select, insert and update queries as these are operations which require a bit more discretion.\\n* Whilst it may be easier to allow the agent to use raw SQL queries, we may find it a little safer to just allow for the parameters instead. The custom workflow tool allows us to define this restricted schema for tool input which we'll use to construct the SQL statement ourselves.\\n* All 3 custom workflow tools trigger the same \\\"Execute workflow\\\" trigger in this very template which has a switch to route the operation to the correct handler.\\n* Finally, we use our Code nodes to handle select, insert and update operations. The responses are then sent back to the the MCP client.\\n\\n### How to use\\n* This SQLite MCP server allows any compatible MCP client to manage a SQLite database by supporting select, create and update operations. You will need to have a SQLite database available before you can use this server.\\n* Connect your MCP client by following the n8n guidelines here - https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop\\n* Try the following queries in your MCP client:\\n  * \\\"Please create a table to store business insights and add the following...\\\"\\n  * \\\"what business insights do we have on current retail trends?\\\"\\n  * \\\"Who has contributed the most business insights in the past week?\\\"\\n\\n### Requirements\\n* SQLite for database.\\n* MCP Client or Agent for usage such as Claude Desktop - https://claude.ai/download\\n\\n### Customising this workflow\\n* If the scope of schemas or tables is too open, try restrict it so the MCP serves a specific purpose for business operations. eg. Confine the querying and editing to HR only tables before providing access to people in that department.\\n* Remember to set the MCP server to require credentials before going to production and sharing this MCP server with others!\"},\"typeVersion\":1},{\"id\":\"5a9a4763-2952-4d95-8f35-25238affa049\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-340,-340],\"parameters\":{\"color\":3,\"width\":380,\"height\":100,\"content\":\"### SELF-HOSTED ONLY\\nThis template only works for self-hosted n8n instances as it reads the database file on disk.\"},\"typeVersion\":1}],\"pinData\":{},\"connections\":{\"ReadRows\":{\"ai_tool\":[[{\"node\":\"SQLite MCP Server\",\"type\":\"ai_tool\",\"index\":0}]]},\"Operation\":{\"main\":[[{\"node\":\"ReadRecords\",\"type\":\"main\",\"index\":0}],[{\"node\":\"CreateRecord\",\"type\":\"main\",\"index\":0}],[{\"node\":\"UpdateRecord\",\"type\":\"main\",\"index\":0}]]},\"ListTables\":{\"ai_tool\":[[{\"node\":\"SQLite MCP Server\",\"type\":\"ai_tool\",\"index\":0}]]},\"UpdateRows\":{\"ai_tool\":[[{\"node\":\"SQLite MCP Server\",\"type\":\"ai_tool\",\"index\":0}]]},\"CreateRecords\":{\"ai_tool\":[[{\"node\":\"SQLite MCP Server\",\"type\":\"ai_tool\",\"index\":0}]]},\"DescribeTables\":{\"ai_tool\":[[{\"node\":\"SQLite MCP Server\",\"type\":\"ai_tool\",\"index\":0}]]},\"When Executed by Another Workflow\":{\"main\":[[{\"node\":\"Operation\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "**This template is for Self-Hosted N8N Instances only.**\n\n### This n8n demonstrates how to build a simple SQLite MCP server to perform local database operations as well as use it for Business Intelligence.\n\nThis MCP example is based off an official MCP reference implementation which can be found here -<https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite>\n\n### How it works\n\n  * A MCP server trigger is used and connected to 5 tools: 2 Code Node and 3 Custom Workflow.\n  * The 2 Code Node tools use the SQLLite3 library and are simple read-only queries and as such, the Code Node tool can be simply used.\n  * The 3 custom workflow tools are used for select, insert and update queries as these are operations which require a bit more discretion.\n  * Whilst it may be easier to allow the agent to use raw SQL queries, we may find it a little safer to just allow for the parameters instead. The custom workflow tool allows us to define this restricted schema for tool input which we'll use to construct the SQL statement ourselves.\n  * All 3 custom workflow tools trigger the same \"Execute workflow\" trigger in this very template which has a switch to route the operation to the correct handler.\n  * Finally, we use our Code nodes to handle select, insert and update operations. The responses are then sent back to the the MCP client.\n\n\n\n### How to use\n\n  * This SQLite MCP server allows any compatible MCP client to manage a SQLite database by supporting select, create and update operations. You will need to have a SQLite database available before you can use this server.\n  * Connect your MCP client by following the n8n guidelines here - <https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop>\n  * Try the following queries in your MCP client: \n    * \"Please create a table to store business insights and add the following...\"\n    * \"what business insights do we have on current retail trends?\"\n    * \"Who has contributed the most business insights in the past week?\"\n\n\n\n### Requirements\n\n  * SQLite for database.\n  * MCP Client or Agent for usage such as Claude Desktop - <https://claude.ai/download>\n\n\n\n### Customising this workflow\n\n  * If the scope of schemas or tables is too open, try restrict it so the MCP serves a specific purpose for business operations. eg. Confine the querying and editing to HR only tables before providing access to people in that department.\n  * Remember to set the MCP server to require credentials before going to production and sharing this MCP server with others!\n\n\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><p><strong>This template is for Self-Hosted N8N Instances only.</strong></p>\n<h3>This n8n demonstrates how to build a simple SQLite MCP server to perform local database operations as well as use it for Business Intelligence.</h3>\n<p>This MCP example is based off an official MCP reference implementation which can be found here -<a href=\"https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite\" rel=\"ugc nofollow\" target=\"_blank\">https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite</a></p>\n<h3>How it works</h3>\n<ul>\n<li>A MCP server trigger is used and connected to 5 tools: 2 Code Node and 3 Custom Workflow.</li>\n<li>The 2 Code Node tools use the SQLLite3 library and are simple read-only queries and as such, the Code Node tool can be simply used.</li>\n<li>The 3 custom workflow tools are used for select, insert and update queries as these are operations which require a bit more discretion.</li>\n<li>Whilst it may be easier to allow the agent to use raw SQL queries, we may find it a little safer to just allow for the parameters instead. The custom workflow tool allows us to define this restricted schema for tool input which we'll use to construct the SQL statement ourselves.</li>\n<li>All 3 custom workflow tools trigger the same \"Execute workflow\" trigger in this very template which has a switch to route the operation to the correct handler.</li>\n<li>Finally, we use our Code nodes to handle select, insert and update operations. The responses are then sent back to the the MCP client.</li>\n</ul>\n<h3>How to use</h3>\n<ul>\n<li>This SQLite MCP server allows any compatible MCP client to manage a SQLite database by supporting select, create and update operations. You will need to have a SQLite database available before you can use this server.</li>\n<li>Connect your MCP client by following the n8n guidelines here - <a href=\"https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop\" rel=\"ugc nofollow\" target=\"_blank\">https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop</a></li>\n<li>Try the following queries in your MCP client:\n<ul>\n<li>\"Please create a table to store business insights and add the following...\"</li>\n<li>\"what business insights do we have on current retail trends?\"</li>\n<li>\"Who has contributed the most business insights in the past week?\"</li>\n</ul>\n</li>\n</ul>\n<h3>Requirements</h3>\n<ul>\n<li>SQLite for database.</li>\n<li>MCP Client or Agent for usage such as Claude Desktop - <a href=\"https://claude.ai/download\" rel=\"ugc nofollow\" target=\"_blank\">https://claude.ai/download</a></li>\n</ul>\n<h3>Customising this workflow</h3>\n<ul>\n<li>If the scope of schemas or tables is too open, try restrict it so the MCP serves a specific purpose for business operations. eg. Confine the querying and editing to HR only tables before providing access to people in that department.</li>\n<li>Remember to set the MCP server to require credentials before going to production and sharing this MCP server with others!</li>\n</ul>\n</div><!--]-->",
  "readme_zh": "**此模板仅适用于自托管的N8N实例。**\n\n### 本n8n演示了如何构建一个简易的SQLite MCP服务器，用于执行本地数据库操作及商业智能分析。\n\n此MCP示例基于官方MCP参考实现（详见：<https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite>）\n\n### 工作原理\n\n* 通过MCP服务器触发器连接5个工具：2个代码节点和3个自定义工作流\n* 2个代码节点工具使用SQLLite3库执行只读查询，因此可直接使用代码节点工具\n* 3个自定义工作流工具分别处理查询、插入和更新操作，这些需要更精细控制的场景\n* 虽然允许代理直接使用原始SQL查询更简便，但限制参数输入更为安全。自定义工作流工具可定义受限的输入模式，由我们自行构建SQL语句\n* 所有3个自定义工作流工具都会触发本模板中的\"执行工作流\"触发器，通过路由开关将操作导向正确的处理器\n* 最终由代码节点处理查询、插入和更新操作，并将响应返回给MCP客户端\n\n### 使用方法\n\n* 该SQLite MCP服务器支持查询、创建和更新操作，允许兼容的MCP客户端管理SQLite数据库。使用前需准备SQLite数据库\n* 按照n8n指南连接MCP客户端：<https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop>\n* 可在MCP客户端尝试以下查询：\n  * \"请创建存储商业洞察的表格并添加以下内容...\"\n  * \"我们有哪些关于当前零售趋势的商业洞察？\"\n  * \"过去一周谁贡献了最多的商业洞察？\"\n\n### 系统要求\n\n* 数据库：SQLite\n* 需配合MCP客户端/代理使用（如Claude Desktop：<https://claude.ai/download>）\n\n### 自定义工作流\n\n* 若模式或表格范围过于开放，可限制MCP服务于特定业务场景。例如：将查询和编辑权限限制在HR部门专用表格\n* 正式上线前请务必设置MCP服务器身份验证，再与他人共享该MCP服务器",
  "title_zh": "构建你自己的SQLite MCP服务器",
  "publish_date_absolute": "2025-05-03",
  "publish_date_zh": "最后更新于4天前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"fcbf7023-7e12-49d8-9c7d-4cb431c79905\",\n      \"name\": \"When Executed by Another Workflow\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        460,\n        260\n      ],\n      \"parameters\": {\n        \"workflowInputs\": {\n          \"values\": [\n            {\n              \"name\": \"operation\"\n            },\n            {\n              \"name\": \"tableName\"\n            },\n            {\n              \"name\": \"values\",\n              \"type\": \"object\"\n            },\n            {\n              \"name\": \"where\",\n              \"type\": \"object\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"58c93321-ded9-48c1-812f-c35d160e257b\",\n      \"name\": \"Operation\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        640,\n        260\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"READ\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"81b134bc-d671-4493-b3ad-8df9be3f49a6\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.operation }}\",\n                    \"rightValue\": \"read\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"INSERT\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"8d57914f-6587-4fb3-88e0-aa1de6ba56c1\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.operation }}\",\n                    \"rightValue\": \"insert\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"UPDATE\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"7c38f238-213a-46ec-aefe-22e0bcb8dffc\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.operation }}\",\n                    \"rightValue\": \"update\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"865ae43a-14ec-4aac-9396-d0aef1ab4a75\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -340,\n        -100\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 680,\n        \"height\": 660,\n        \"content\": \"## 1. 设置MCP服务器触发器\\n[了解更多关于MCP服务器触发器的信息](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"35551851-319a-47cf-87cd-a63b128300cc\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        360,\n        -100\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 820,\n        \"height\": 720,\n        \"content\": \"## 2. 通过禁止原始SQL语句确保安全\\n[详细了解代码节点](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/)\\n\\n虽然直接让智能体提供完整的原始SQL语句可能更为简便，但这可能会使您或您的组织暴露在重大安全风险之下，最坏情况下可能导致数据在不知情的情况下泄露或删除。\\n\\n强制智能体仅提供查询参数，意味着我们能在一定程度上防范此类风险，同时也符合使用查询参数作为防范SQL注入攻击的最佳实践。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"95c35568-e447-4634-afe8-c902ba5c7d2f\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -340,\n        -220\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 380,\n        \"height\": 100,\n        \"content\": \"### 始终验证您的服务器！\\n在投入生产环境前，强烈建议为您的MCP服务器触发器启用身份验证功能。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2d0f98f8-043a-459c-8b77-634e06ee0f57\",\n      \"name\": \"SQLite MCP Server\",\n      \"type\": \"@n8n/n8n-nodes-langchain.mcpTrigger\",\n      \"position\": [\n        -160,\n        60\n      ],\n      \"webhookId\": \"3124a4cd-4e93-4c1b-b4db-b5599f4889b1\",\n      \"parameters\": {\n        \"path\": \"3124a4cd-4e93-4c1b-b4db-b5599f4889b1\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6f313137-eb8f-429b-a6c9-7b17e067dc5e\",\n      \"name\": \"CreateRecord\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        940,\n        260\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const sqlite3 = require('sqlite3').verbose();\\nconst { promisify } = require('util');\\n\\nconst db = new sqlite3.Database('/home/node/test.db');\\nconst run = promisify(db.run.bind(db));\\n\\nconst { json } = $input.first();\\n\\n\\nlet output = '';\\nconst statement = [\\n  `INSERT INTO ${json.tableName}`,\\n  `   (${Object.keys(json.values).join(',')})`,\\n  `VALUES`,\\n  `  (${Object.keys(json.values).map(_ => '?').join(',')})`\\n].join(' ');\\nconst params = Object.values(json.values);\\n\\ntry {\\n  await run(statement.trim(), params);\\n  output = { output: 'ok', error: null };\\n} catch (err) {\\n  output = { output: null, error: err };\\n} finally {\\n  await db.close();\\n}\\n\\nreturn output;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"b2530656-bbf4-4316-8b8e-c5d27865e45f\",\n      \"name\": \"UpdateRecord\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        940,\n        440\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const sqlite3 = require('sqlite3').verbose();\\nconst { promisify } = require('util');\\n\\nconst db = new sqlite3.Database('/home/node/test.db');\\nconst run = promisify(db.run.bind(db));\\n\\nconst { json } = $input.first();\\n\\nlet output = '';\\nconst statement = [\\n  `UPDATE ${json.tableName}`,\\n  `SET`,\\n  `${Object.keys(json.values)\\n    .map(key => `${key} = ?`)\\n    .join(',')}`,\\n  `WHERE`,\\n  `${Object.keys(json.where)\\n     .map((key,idx) => `${key} = ?`)\\n     .join(' AND ')}`\\n].join(' ');\\nconst params = [ ...Object.values(json.values), ...Object.values(json.where)];\\n\\ntry {\\n  await run(statement, params);\\n  output = { output: 'ok', error: null };\\n} catch (err) {\\n  output = { output: null, error: err };\\n} finally {\\n  await db.close();\\n}\\n\\nreturn output;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"8c1b8bcb-20f1-4ef9-b646-9d89177651dd\",\n      \"name\": \"ReadRecords\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        940,\n        80\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const sqlite3 = require('sqlite3').verbose();\\nconst { promisify } = require('util');\\n\\nconst db = new sqlite3.Database('/home/node/test.db');\\nconst all = promisify(db.all.bind(db));\\n\\nconst { json } = $input.first();\\n\\nlet output = '';\\nconst statement = [\\n  `SELECT * FROM ${json.tableName}`,\\n  json?.where && Object.keys(json?.where).length > 0\\n    ? `WHERE ` + Object.keys(json.where)\\n        .map((key,idx) => `${key} = $${idx+1}`)\\n        .join(' AND ')\\n    : ''\\n].join(' ');\\nconst params = json.where ? Object.values(json.where) : undefined;\\n\\ntry {\\n  \\n  const results = await all(statement.trim(), params);\\n\\n  output = { output: [].concat(results), error: null };\\n} catch (err) {\\n  output = { output: null, error: err };\\n} finally {\\n  await db.close();\\n}\\n\\nreturn output\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"87df3eed-b4d5-4a9c-bd82-0ad455449cd2\",\n      \"name\": \"DescribeTables\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolCode\",\n      \"position\": [\n        -160,\n        340\n      ],\n      \"parameters\": {\n        \"name\": \"describeTable\",\n        \"jsCode\": \"const sqlite3 = require('sqlite3').verbose();\\nconst { promisify } = require('util');\\n\\nconst db = new sqlite3.Database('/home/node/test.db');\\nconst all = promisify(db.all.bind(db));\\n\\nlet output = '';\\ntry {\\n  const rows = await all(`PRAGMA table_info(${query.tableName})`);\\n  const results = rows.map((col) => (\\n    `${col.name} | ${col.type} | NOT NULL: ${col.notnull} | Default: ${col.dflt_value}`\\n  )).join('\\\\n');\\n  \\n  output = { output: [].concat(results), error: null };\\n} catch (err) {\\n  output = { output: null, error: err };\\n} finally {\\n  await db.close();\\n}\\n\\nreturn JSON.stringify(output);\",\n        \"schemaType\": \"manual\",\n        \"description\": \"Call this tool to describe a table's schema.\",\n        \"inputSchema\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\\"tableName\\\"],\\n  \\\"properties\\\": {\\n    \\\"tableName\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"description\\\": \\\"Name of the table\\\"\\n    }\\n  }\\n}\",\n        \"specifyInputSchema\": true\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"4a0ba0d0-4955-44fd-92de-ad031ebb64cb\",\n      \"name\": \"ListTables\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolCode\",\n      \"position\": [\n        -260,\n        240\n      ],\n      \"parameters\": {\n        \"name\": \"listTables\",\n        \"jsCode\": \"const sqlite3 = require('sqlite3').verbose();\\nconst { promisify } = require('util');\\n\\nconst db = new sqlite3.Database('/home/node/test.db');\\nconst all = promisify(db.all.bind(db));\\n\\nlet output = '';\\ntry {\\n  const rows = await all(`SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'`, []);\\n  const results = rows.map((row) => row.name).join('\\\\n');\\n  \\n  output = { output: [].concat(results), error: null };\\n} catch (err) {\\n  output = { output: null, error: err };\\n} finally {\\n  await db.close();\\n}\\n\\nreturn JSON.stringify(output);\",\n        \"description\": \"Call this tool to list all available tables in the SQLite Database.\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"69e8e720-7e91-4b46-8db5-1afdf1f3dbe0\",\n      \"name\": \"CreateRecords\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\",\n      \"position\": [\n        -40,\n        440\n      ],\n      \"parameters\": {\n        \"name\": \"CreateRecords\",\n        \"workflowId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $workflow.id }}\"\n        },\n        \"description\": \"Call this tool to create a row in a SQLite table.\",\n        \"workflowInputs\": {\n          \"value\": {\n            \"where\": \"={{ {} }}\",\n            \"values\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values', `An object of key-value pair where key represents the column name.`, 'string') }}\",\n            \"operation\": \"insert\",\n            \"tableName\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tableName', `table to insert into`, 'string') }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"operation\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"operation\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"tableName\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"tableName\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"values\",\n              \"type\": \"object\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"values\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"where\",\n              \"type\": \"object\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"where\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": false\n        }\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"f2e18ae5-89a0-4d61-805b-e777f11300a2\",\n      \"name\": \"UpdateRows\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\",\n      \"position\": [\n        100,\n        360\n      ],\n      \"parameters\": {\n        \"name\": \"updateRows\",\n        \"workflowId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $workflow.id }}\"\n        },\n        \"description\": \"Call this tool to create a row in a table.\",\n        \"workflowInputs\": {\n          \"value\": {\n            \"where\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('where', `An object of key-value pair where key represents the column name.`, 'string') }}\",\n            \"values\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values', `An object of key-value pair where key represents the column name.`, 'string') }}\",\n            \"operation\": \"update\",\n            \"tableName\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tableName', `table to update`, 'string') }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"operation\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"operation\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"tableName\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"tableName\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"values\",\n              \"type\": \"object\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"values\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"where\",\n              \"type\": \"object\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"where\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": false\n        }\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"22645721-1b66-4a36-9be5-f1e5edde30f8\",\n      \"name\": \"ReadRows\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\",\n      \"position\": [\n        180,\n        240\n      ],\n      \"parameters\": {\n        \"name\": \"readRows\",\n        \"workflowId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $workflow.id }}\"\n        },\n        \"description\": \"Call this tool to read one or more rows in a table\",\n        \"workflowInputs\": {\n          \"value\": {\n            \"where\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('where', `An object of key-value pair where key represents the column name.`, 'string') }}\",\n            \"values\": \"={}\",\n            \"operation\": \"read\",\n            \"tableName\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tableName', `table to read from`, 'string') }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"operation\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"operation\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"tableName\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"tableName\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"values\",\n              \"type\": \"object\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"values\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"where\",\n              \"type\": \"object\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"where\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": false\n        }\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"2176742a-5a28-41c6-9cd7-ac3229ddcdb6\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -820,\n        -800\n      ],\n      \"parameters\": {\n        \"width\": 440,\n        \"height\": 1360,\n        \"content\": \"## 试试看吧！\\n**注意：此模板仅适用于自托管的N8N实例。**\\n\\n### 本n8n示例演示如何构建一个简易的SQLite MCP服务器，用于执行本地数据库操作及商业智能分析。\\n\\n该MCP示例基于官方参考实现开发，源码详见：https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite\\n\\n### 工作原理\\n* 通过MCP服务器触发器连接5个工具节点：2个代码节点与3个自定义工作流\\n* 2个代码节点使用SQLLite3库执行只读查询，因此可直接使用基础代码节点功能\\n* 3个自定义工作流分别处理查询、插入和更新操作，这些需要更高安全级别的数据库操作\\n* 虽然允许代理直接执行原始SQL查询更简便，但通过参数化输入更为安全。自定义工作流工具可定义严格的输入模式，由我们自行构建SQL语句\\n* 所有3个自定义工作流都会触发本模板中的\\\"执行工作流\\\"节点，通过路由开关分配至对应处理器\\n* 最终由代码节点处理选择、插入和更新操作，并将响应返回MCP客户端\\n\\n### 使用方法\\n* 该SQLite MCP服务器支持选择/创建/更新操作，兼容任何MCP客户端管理SQLite数据库。使用前需准备SQLite数据库文件\\n* 参照n8n官方文档连接MCP客户端：https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop\\n* 在MCP客户端尝试以下查询：\\n  * \\\"请创建存储商业洞察的数据表并添加以下内容...\\\"\\n  * \\\"我们有哪些关于当前零售趋势的商业洞察？\\\"\\n  * \\\"过去一周谁贡献了最多的商业洞察？\\\"\\n\\n### 系统要求\\n* SQLite数据库环境\\n* MCP客户端工具（如Claude桌面版）：https://claude.ai/download\\n\\n### 自定义建议\\n* 若当前数据表权限过于开放，可限制MCP服务特定业务场景。例如：将查询编辑权限限定在人力资源相关表格后，再向该部门人员开放访问\\n* 正式部署前请务必启用MCP服务器身份验证，再与他人共享该MCP服务！\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5a9a4763-2952-4d95-8f35-25238affa049\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -340,\n        -340\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 380,\n        \"height\": 100,\n        \"content\": \"### 仅限自托管  \\n此模板仅适用于自托管的n8n实例，因为它需要读取磁盘上的数据库文件。\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"ReadRows\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"SQLite MCP Server\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Operation\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"ReadRecords\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"CreateRecord\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"UpdateRecord\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"ListTables\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"SQLite MCP Server\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"UpdateRows\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"SQLite MCP Server\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"CreateRecords\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"SQLite MCP Server\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"DescribeTables\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"SQLite MCP Server\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When Executed by Another Workflow\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Operation\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}