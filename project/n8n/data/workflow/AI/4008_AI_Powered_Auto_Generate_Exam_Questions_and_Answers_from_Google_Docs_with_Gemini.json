{
  "title": "AI-Powered Auto-Generate Exam Questions and Answers from Google Docs with Gemini",
  "url": "https://n8n.io/workflows/4008-ai-powered-auto-generate-exam-questions-and-answers-from-google-docs-with-gemini/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/?sort=createdAt:desc",
  "author": "Davide",
  "publish_date": "Last update 5 days ago",
  "publish_date_absolute": "2025-05-17",
  "content": "",
  "workflow_json": "{\"id\":\"7Qa2mH7PnDxy7Qat\",\"meta\":{\"instanceId\":\"a4bfc93e975ca233ac45ed7c9227d84cf5a2329310525917adaf3312e10d5462\",\"templateCredsSetupCompleted\":true},\"name\":\"Generate Exam Questions\",\"tags\":[],\"nodes\":[{\"id\":\"4e037d6e-93a9-4c1b-b84a-dbbcf77beaf5\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[-740,120],\"parameters\":{},\"typeVersion\":1},{\"id\":\"febc8bb7-5de7-46d6-bc23-54673089cd3d\",\"name\":\"Qdrant Vector Store\",\"type\":\"@n8n/n8n-nodes-langchain.vectorStoreQdrant\",\"position\":[900,240],\"parameters\":{\"mode\":\"insert\",\"options\":{},\"qdrantCollection\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"ai_article_test\",\"cachedResultName\":\"ai_article_test\"}},\"credentials\":{\"qdrantApi\":{\"id\":\"iyQ6MQiVaF3VMBmt\",\"name\":\"QdrantApi account (Hetzner)\"}},\"typeVersion\":1},{\"id\":\"2d7e2673-6559-49b3-9ed0-29ca2c376f00\",\"name\":\"Create collection\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-440,-20],\"parameters\":{\"url\":\"http://QDRANT_URL/collections/COLLECTIONS\",\"method\":\"PUT\",\"options\":{},\"jsonBody\":\"{\\n  \\\"vectors\\\": {\\n    \\\"size\\\": 1536,\\n    \\\"distance\\\": \\\"Cosine\\\"  \\n  },\\n  \\\"shard_number\\\": 1,  \\n  \\\"replication_factor\\\": 1,  \\n  \\\"write_consistency_factor\\\": 1 \\n}\",\"sendBody\":true,\"sendHeaders\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\",\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"}]}},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"qhny6r5ql9wwotpn\",\"name\":\"Qdrant API (Hetzner)\"}},\"typeVersion\":4.2},{\"id\":\"615f26b2-930c-4b74-a35c-00b83460a7c9\",\"name\":\"Refresh collection\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-440,240],\"parameters\":{\"url\":\"http://QDRANT_URL/collections/COLLECTIONS/points/delete\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"{\\n  \\\"filter\\\": {}\\n}\",\"sendBody\":true,\"sendHeaders\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\",\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"}]}},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"qhny6r5ql9wwotpn\",\"name\":\"Qdrant API (Hetzner)\"}},\"typeVersion\":4.2},{\"id\":\"eb34b8dd-353b-41c4-8a02-6565c3f8a7d3\",\"name\":\"Embeddings OpenAI\",\"type\":\"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\"position\":[820,440],\"parameters\":{\"options\":{\"stripNewLines\":false}},\"credentials\":{\"openAiApi\":{\"id\":\"4zwP0MSr8zkNvvV9\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.1},{\"id\":\"fb639802-e099-4857-823b-5e6d89fb3e86\",\"name\":\"Default Data Loader\",\"type\":\"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\",\"position\":[1080,460],\"parameters\":{\"loader\":\"textLoader\",\"options\":{},\"dataType\":\"binary\"},\"typeVersion\":1},{\"id\":\"0af5028d-56a4-4bbc-8af0-f088e54f178b\",\"name\":\"Token Splitter\",\"type\":\"@n8n/n8n-nodes-langchain.textSplitterTokenSplitter\",\"position\":[1040,640],\"parameters\":{\"chunkSize\":450,\"chunkOverlap\":50},\"typeVersion\":1},{\"id\":\"6a10192e-4b2e-4705-865a-fa90328ba3c1\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-240,-80],\"parameters\":{\"color\":6,\"width\":880,\"height\":220,\"content\":\"# STEP 1\\n\\n## Create Qdrant Collection\\nChange:\\n- QDRANTURL\\n- COLLECTION\"},\"typeVersion\":1},{\"id\":\"1ebefe44-e5c9-43fb-b9fa-fee47b08e2c2\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-460,180],\"parameters\":{\"color\":4,\"width\":620,\"height\":400,\"content\":\"# STEP 2\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n## Documents vectorization with Qdrant and Google Drive\\nChange:\\n- QDRANTURL\\n- COLLECTION\"},\"typeVersion\":1},{\"id\":\"88f816ae-4331-46e0-b1f9-636ec94e8bb3\",\"name\":\"Converto di MD\",\"type\":\"n8n-nodes-base.code\",\"position\":[240,240],\"parameters\":{\"jsCode\":\"function convertToMarkdown(docContent) {\\n  let markdown = '';\\n\\n  const headingMap = {\\n    'HEADING_1': '#',\\n    'HEADING_2': '##',\\n    'HEADING_3': '###',\\n    'HEADING_4': '####',\\n    'HEADING_5': '#####',\\n    'HEADING_6': '######',\\n  };\\n\\n  for (const element of docContent.body.content) {\\n    if (!element.paragraph) continue;\\n\\n    const para = element.paragraph;\\n    let line = '';\\n\\n    // Tipo di paragrafo (normale o heading)\\n    const style = para.paragraphStyle?.namedStyleType;\\n    const prefix = headingMap[style] || '';\\n\\n    for (const el of para.elements) {\\n      if (!el.textRun) continue;\\n\\n      let text = el.textRun.content || '';\\n      const style = el.textRun.textStyle || {};\\n\\n      if (style.bold) text = `**${text.trim()}**`;\\n      if (style.italic) text = `*${text.trim()}*`;\\n      if (!style.bold && !style.italic) text = text.trim();\\n\\n      line += text;\\n    }\\n\\n    if (prefix) {\\n      markdown += `${prefix} ${line}\\\\n\\\\n`;\\n    } else {\\n      markdown += `${line}\\\\n\\\\n`;\\n    }\\n  }\\n\\n  return markdown.trim();\\n}\\n\\n// Assumiamo che il JSON completo sia in items[0].json\\nconst docJson = items[0].json;\\nconst markdown = convertToMarkdown(docJson);\\n\\nreturn [\\n  {\\n    json: {\\n      markdown,\\n    },\\n  },\\n];\"},\"typeVersion\":2},{\"id\":\"5c733b2d-3d0a-4260-af88-7907907e209f\",\"name\":\"Get Doc\",\"type\":\"n8n-nodes-base.googleDocs\",\"position\":[-60,240],\"parameters\":{\"simple\":false,\"operation\":\"get\",\"documentURL\":\"XXXXXXXXXXXXXXXX\"},\"credentials\":{\"googleDocsOAuth2Api\":{\"id\":\"LpmDV1ry0BPLvW8b\",\"name\":\"Google Docs account\"}},\"typeVersion\":2},{\"id\":\"5de82976-2376-4201-a5a4-dbdd6bfcb596\",\"name\":\"Vector Store Retriever\",\"type\":\"@n8n/n8n-nodes-langchain.retrieverVectorStore\",\"position\":[1540,1040],\"parameters\":{},\"typeVersion\":1},{\"id\":\"25bcb865-7b15-4272-81da-4ff41a4ccc60\",\"name\":\"Qdrant Vector Store1\",\"type\":\"@n8n/n8n-nodes-langchain.vectorStoreQdrant\",\"position\":[1440,1180],\"parameters\":{\"options\":{},\"qdrantCollection\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"ai_article_test\",\"cachedResultName\":\"ai_article_test\"}},\"credentials\":{\"qdrantApi\":{\"id\":\"iyQ6MQiVaF3VMBmt\",\"name\":\"QdrantApi account (Hetzner)\"}},\"typeVersion\":1.1},{\"id\":\"7dacd3ac-2d25-4960-ba53-e44ae9722dca\",\"name\":\"Convert to File\",\"type\":\"n8n-nodes-base.convertToFile\",\"position\":[560,240],\"parameters\":{\"options\":{},\"operation\":\"toText\",\"sourceProperty\":\"markdown\"},\"typeVersion\":1.1},{\"id\":\"9d7561f0-5b01-4327-ab62-68a105364155\",\"name\":\"Google Gemini Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\"position\":[540,980],\"parameters\":{\"options\":{},\"modelName\":\"models/gemini-2.0-flash-exp\"},\"credentials\":{\"googlePalmApi\":{\"id\":\"0p34rXqIqy8WuoPg\",\"name\":\"Google Gemini(PaLM) Api account\"}},\"typeVersion\":1},{\"id\":\"4f63e896-45b1-484f-9fa1-0b488691023a\",\"name\":\"Item List Output Parser\",\"type\":\"@n8n/n8n-nodes-langchain.outputParserItemList\",\"position\":[740,1000],\"parameters\":{\"options\":{\"numberOfItems\":10}},\"typeVersion\":1},{\"id\":\"911e8654-dfef-4d4f-b1c8-247fe0091381\",\"name\":\"Loop Over Items\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[1100,780],\"parameters\":{\"options\":{}},\"typeVersion\":3},{\"id\":\"987e13f8-f8c9-4bc1-9e4f-d11a5f8af4d7\",\"name\":\"Google Gemini Chat Model1\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\"position\":[1360,1020],\"parameters\":{\"options\":{},\"modelName\":\"models/gemini-2.0-pro-exp\"},\"credentials\":{\"googlePalmApi\":{\"id\":\"0p34rXqIqy8WuoPg\",\"name\":\"Google Gemini(PaLM) Api account\"}},\"typeVersion\":1},{\"id\":\"c2f70831-4d5d-403b-b92d-af82205cbbdc\",\"name\":\"Google Gemini Chat Model2\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\"position\":[520,1720],\"parameters\":{\"options\":{},\"modelName\":\"models/gemini-2.0-flash-exp\"},\"credentials\":{\"googlePalmApi\":{\"id\":\"0p34rXqIqy8WuoPg\",\"name\":\"Google Gemini(PaLM) Api account\"}},\"typeVersion\":1},{\"id\":\"2f4ca583-8005-4e26-88df-ffebdc2be2f6\",\"name\":\"Item List Output Parser1\",\"type\":\"@n8n/n8n-nodes-langchain.outputParserItemList\",\"position\":[760,1720],\"parameters\":{\"options\":{\"numberOfItems\":10}},\"typeVersion\":1},{\"id\":\"cacecdab-2f1c-4730-a7c5-d46dca32969c\",\"name\":\"Loop Over Items1\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[1080,1540],\"parameters\":{\"options\":{}},\"typeVersion\":3},{\"id\":\"2de66223-475c-4fef-aa85-13e954a5c1cc\",\"name\":\"Google Gemini Chat Model3\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\"position\":[1320,1840],\"parameters\":{\"options\":{},\"modelName\":\"models/gemini-2.0-flash-exp\"},\"credentials\":{\"googlePalmApi\":{\"id\":\"0p34rXqIqy8WuoPg\",\"name\":\"Google Gemini(PaLM) Api account\"}},\"typeVersion\":1},{\"id\":\"43058954-369c-477d-beee-ece1916aebb7\",\"name\":\"Qdrant Vector Store2\",\"type\":\"@n8n/n8n-nodes-langchain.vectorStoreQdrant\",\"position\":[1380,2020],\"parameters\":{\"options\":{},\"qdrantCollection\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"ai_article_test\",\"cachedResultName\":\"ai_article_test\"}},\"credentials\":{\"qdrantApi\":{\"id\":\"iyQ6MQiVaF3VMBmt\",\"name\":\"QdrantApi account (Hetzner)\"}},\"typeVersion\":1.1},{\"id\":\"27dddcae-e20a-41a9-879e-ce8ae8a0347f\",\"name\":\"Embeddings OpenAI2\",\"type\":\"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\"position\":[1360,2200],\"parameters\":{\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"4zwP0MSr8zkNvvV9\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.2},{\"id\":\"37d164a7-94aa-4273-b91a-8b22684a45fd\",\"name\":\"Structured Output Parser\",\"type\":\"@n8n/n8n-nodes-langchain.outputParserStructured\",\"position\":[1820,1820],\"parameters\":{\"schemaType\":\"manual\",\"inputSchema\":\"{\\n\\t\\\"type\\\": \\\"object\\\",\\n\\t\\\"properties\\\": {\\n\\t\\t\\\"correct\\\": {\\n\\t\\t\\t\\\"type\\\": \\\"string\\\"\\n\\t\\t},\\n\\t\\t\\\"answers\\\": {\\n\\t\\t\\t\\\"type\\\": \\\"array\\\",\\n\\t\\t\\t\\\"items\\\": {\\n\\t\\t\\t\\t\\\"type\\\": \\\"string\\\"\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\"},\"typeVersion\":1.2},{\"id\":\"42d627b5-c033-4b2e-8ea4-fe704601b3d6\",\"name\":\"RAG\",\"type\":\"@n8n/n8n-nodes-langchain.toolVectorStore\",\"position\":[1500,1820],\"parameters\":{\"description\":\"In base alla domanda consulta il database vettoriale ed estrapola la risposta corretta. Elabora anche altre 3 risposte non corrette.\"},\"typeVersion\":1.1},{\"id\":\"ce763ef2-eb54-484b-8046-7bc008012ec5\",\"name\":\"Google Gemini Chat Model4\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\"position\":[1700,1980],\"parameters\":{\"options\":{},\"modelName\":\"models/gemini-2.0-pro-exp\"},\"credentials\":{\"googlePalmApi\":{\"id\":\"0p34rXqIqy8WuoPg\",\"name\":\"Google Gemini(PaLM) Api account\"}},\"typeVersion\":1},{\"id\":\"076994e8-0326-424e-a5c3-3d07958af0af\",\"name\":\"Open questions\",\"type\":\"@n8n/n8n-nodes-langchain.chainLlm\",\"position\":[560,780],\"parameters\":{\"text\":\"=Article:\\n'''\\n{{ $json.markdown }}\\n'''\",\"messages\":{\"messageValues\":[{\"message\":\"=## Purpose\\nYou are a specialized AI designed to analyze articles and create challenging questions that test comprehension and knowledge retention. Your task is to generate questions that encourage critical thinking about the article's content.\\n\\n## Input\\nThe input will be a text article on any subject. This could be academic, news, technical, or general interest content.\\n\\n## Output Requirements\\n- Create exactly 10 questions based on the article content\\n- DO NOT number the questions\\n- Questions should cover key facts, concepts, and implications from the article\\n- Include a mix of question types:\\n  - Factual recall questions\\n  - Inference questions that require reading between the lines\\n  - Application questions that ask how concepts might be applied\\n  - Analysis questions that probe deeper understanding\\n  - Questions about relationships between different parts of the article\\n- Questions should vary in difficulty level\\n- Avoid creating questions with simple yes/no answers\\n- Ensure questions are clearly worded and unambiguous\\n- Questions should test genuine understanding rather than trivial details\\n\\n## Output Format\\n- Present each question as a separate paragraph\\n- Do not include answers\\n- Do not include numbering or bullet points\\n- Do not include any introductory text\\n- Do not include any explanatory notes\\n\\n## Behavior Guidelines\\n- Focus on the most significant and meaningful content in the article\\n- Ensure questions thoroughly cover the entire article, not just the beginning\\n- If the article contains technical terms, create questions that test understanding of these terms\\n- If the article presents contrasting viewpoints, create questions about both perspectives\\n- Maintain neutrality - do not frame questions that suggest a particular stance\\n- If the article is highly specialized, adjust question complexity accordingly\\n- Do not create questions about information not contained in the article\\n- If the article is in a language other than English, generate questions in the same language\\n\\n## Examples of Good Questions\\n- How does the author's description of X relate to the concept of Y discussed later in the article?\\n- What evidence does the article provide to support the claim that X leads to Y?\\n- How might the framework described in the article be applied to solve similar problems in different contexts?\\n- What underlying assumptions inform the author's perspective on this issue?\\n- In what ways does the article suggest the relationship between X and Y has evolved over time?\"}]},\"promptType\":\"define\",\"hasOutputParser\":true},\"typeVersion\":1.6},{\"id\":\"5df02a14-175f-4923-9a2f-ad4514f98c71\",\"name\":\"Closed questions\",\"type\":\"@n8n/n8n-nodes-langchain.chainLlm\",\"position\":[560,1540],\"parameters\":{\"text\":\"=Article:\\n'''\\n{{ $json.markdown }}\\n'''\",\"messages\":{\"messageValues\":[{\"message\":\"=## Purpose\\nYou are a specialized AI designed to analyze articles and create high-quality multiple-choice questions that effectively test knowledge comprehension and retention. Your task is to generate questions with appropriate answer options that accurately assess understanding of the article's content.\\n\\n## Input\\nThe input will be a text article on any subject. This could be academic, news, technical, or general interest content.\\n\\n## Output Requirements\\n- Create exactly 10 multiple-choice questions based on the article content\\n- DO NOT number the questions\\n- Each question must include:\\n  - A clear question stem\\n  - Four answer options (labeled A, B, C, D)\\n  - One correct answer and three plausible distractors\\n- Questions should cover key facts, concepts, and implications from the article\\n- Include a mix of question types:\\n  - Factual recall questions\\n  - Inference questions requiring deeper understanding\\n  - Application questions testing practical knowledge\\n  - Analysis questions examining relationships between concepts\\n- Questions should vary in difficulty level\\n- Ensure questions are clearly worded and unambiguous\\n- Distractors should be plausible but clearly incorrect upon careful reading of the article\\n\\n## Output Format\\n- Present each question as a separate paragraph\\n- Format each question as:\\n  [Question]\\n  A. [Option A]\\n  B. [Option B]\\n  C. [Option C]\\n  D. [Option D]\\n- Do not indicate which answer is correct in the output\\n- Do not include any introductory text\\n- Do not include any explanatory notes\\n- Do not include numbering for questions\\n\\n## Behavior Guidelines\\n- Focus on the most significant and meaningful content in the article\\n- Ensure questions thoroughly cover the entire article, not just the beginning\\n- Make all answer options approximately the same length\\n- Avoid using absolute terms like \\\"always\\\" or \\\"never\\\" in the options\\n- Avoid grammatical clues that hint at the correct answer\\n- Make distractors plausible by:\\n  - Using common misconceptions\\n  - Including partially correct information\\n  - Using correct information from the wrong context\\n- If the article contains technical terms, create questions that test understanding of these terms\\n- If the article presents contrasting viewpoints, create questions about both perspectives\\n- Maintain neutrality - do not frame questions that suggest a particular stance\\n- If the article is in a language other than English, generate questions in the same language\\n\\n## Examples of Good Multiple-Choice Questions\\n- What is the primary factor contributing to the phenomenon described in the article?\\n  A. [Plausible but incorrect factor]\\n  B. [Correct factor from article]\\n  C. [Plausible but incorrect factor]\\n  D. [Plausible but incorrect factor]\\n\\n- According to the article, how does [concept X] impact [concept Y]?\\n  A. [Correct relationship described in article]\\n  B. [Plausible but incorrect relationship]\\n  C. [Plausible but incorrect relationship]\\n  D. [Plausible but incorrect relationship]\\n\\n- Which application of the described technology would align with the principles outlined in the article?\\n  A. [Plausible but incorrect application]\\n  B. [Plausible but incorrect application]\\n  C. [Correct application based on article]\\n  D. [Plausible but incorrect application]\"}]},\"promptType\":\"define\",\"hasOutputParser\":true},\"typeVersion\":1.6},{\"id\":\"53c89d9a-4a69-47f7-bbf1-f523e2763741\",\"name\":\"Answer questions\",\"type\":\"@n8n/n8n-nodes-langchain.chainRetrievalQa\",\"position\":[1400,800],\"parameters\":{\"text\":\"={{ $json.text }}\",\"options\":{\"systemPromptTemplate\":\"You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question.\\n\\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\nUse text plain (not markdown).\\n----------------\\nContext: {context}\"},\"promptType\":\"define\"},\"typeVersion\":1.5},{\"id\":\"93d55b4f-2a93-474e-b431-6fd8ef868c45\",\"name\":\"Answer and create options\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[1420,1560],\"parameters\":{\"text\":\"={{ $json.text }}\",\"options\":{\"systemMessage\":\"=System Prompt for RAG-Based Multiple-Choice Exam Creation\\n\\nPURPOSE:\\nYou are an AI assistant specialized in creating multiple-choice exams. Your task is to generate questions with one correct answer and three plausible but incorrect options using only the Retrieval Augmented Generation (RAG) tool to source accurate information.\\n\\nINPUT:\\nYou will receive a topic, subject area, or specific question to create exam items for.\\n\\nOUTPUT REQUIREMENTS:\\n- Create multiple-choice questions with exactly four options per question\\n- Each question must have one correct answer and three false answers\\n- The correct answer must be derived directly from the RAG tool's retrieved information\\n- All false answers must be plausible but clearly incorrect when compared to the retrieved information\\n- Use plain text only (no markdown formatting)\\n- Present all content in a clean, simple format without any special formatting\\n\\nPROCESS:\\n1. For each question:\\n   - Use the RAG tool to retrieve accurate information on the topic\\n   - Formulate a clear, unambiguous question based on the retrieved information\\n   - Extract the correct answer directly from the retrieved information\\n   - Create three false answers that are plausible but contradicted by the retrieved information\\n   - Mix the order of correct and incorrect answers\\n\\n2. For creating false answers:\\n   - Use common misconceptions related to the topic\\n   - Create answers that contain partial truths but are ultimately incorrect\\n   - Modify correct information slightly to make it incorrect\\n   - Avoid obviously wrong answers that would be too easy to eliminate\\n\\nOUTPUT FORMAT:\\nQuestion: [Question text]\\nA. [Option A]\\nB. [Option B]\\nC. [Option C]\\nD. [Option D]\\n\\nGUIDELINES:\\n- Questions should be clear and direct\\n- Use simple, straightforward language\\n- Avoid negatively phrased questions (e.g., \\\"Which of the following is NOT...\\\")\\n- Ensure all answer options are approximately the same length\\n- Do not include any explanations, notes, or additional information\\n- Do not include any formatting beyond plain text\\n- Do not indicate which answer is correct in the output\\n- Ensure all questions and answers are factually accurate based on the RAG tool's information\\n- Make sure distractors (false answers) are genuinely plausible to someone not familiar with the topic\\n\\nCONSTRAINTS:\\n- You must use the RAG tool for every question\\n- You must not rely on your general knowledge without verification through RAG\\n- You must not use markdown formatting\\n- You must not include any meta-information about the questions\\n- You must ensure all answer options are mutually exclusive (no overlap in meaning)\\n- You must use plain text only for all output\"},\"promptType\":\"define\",\"hasOutputParser\":true},\"typeVersion\":1.9},{\"id\":\"c7e55f54-d851-4786-839d-fe839659caea\",\"name\":\"Write open\",\"type\":\"n8n-nodes-base.googleSheets\",\"position\":[1880,800],\"parameters\":{\"columns\":{\"value\":{\"ANSWER\":\"={{ $json.response }}\",\"QUESTION\":\"={{ $('Loop Over Items').item.json.text }}\"},\"schema\":[{\"id\":\"QUESTION\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"QUESTION\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"ANSWER\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"ANSWER\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[],\"attemptToConvertTypes\":false,\"convertFieldsToString\":false},\"options\":{},\"operation\":\"append\",\"sheetName\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gid=0\",\"cachedResultUrl\":\"https://docs.google.com/spreadsheets/d/16zkksQMG1U9U850DFC5nDy-90VYZCgxLlyVwDB9I28Q/edit#gid=0\",\"cachedResultName\":\"Open questions\"},\"documentId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"16zkksQMG1U9U850DFC5nDy-90VYZCgxLlyVwDB9I28Q\",\"cachedResultUrl\":\"https://docs.google.com/spreadsheets/d/16zkksQMG1U9U850DFC5nDy-90VYZCgxLlyVwDB9I28Q/edit?usp=drivesdk\",\"cachedResultName\":\"Question for Exam\"}},\"credentials\":{\"googleSheetsOAuth2Api\":{\"id\":\"JYR6a64Qecd6t8Hb\",\"name\":\"Google Sheets account\"}},\"typeVersion\":4.5},{\"id\":\"1c72d8f0-b5b7-4e10-ad03-6c8491136cdf\",\"name\":\"Write closed\",\"type\":\"n8n-nodes-base.googleSheets\",\"position\":[1860,1560],\"parameters\":{\"columns\":{\"value\":{\"CORRECT\":\"={{ $json.output.correct }}\",\"ANSWER A\":\"={{ $json.output.answers[0] }}\",\"ANSWER B\":\"={{ $json.output.answers[1] }}\",\"ANSWER C\":\"={{ $json.output.answers[2] }}\",\"ANSWER D\":\"={{ $json.output.answers[3] }}\",\"QUESTION\":\"={{ $('Closed questions').item.json.text }}\"},\"schema\":[{\"id\":\"QUESTION\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"QUESTION\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"ANSWER A\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"ANSWER A\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"ANSWER B\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"ANSWER B\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"ANSWER C\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"ANSWER C\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"ANSWER D\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"ANSWER D\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"CORRECT\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"CORRECT\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[],\"attemptToConvertTypes\":false,\"convertFieldsToString\":false},\"options\":{},\"operation\":\"append\",\"sheetName\":{\"__rl\":true,\"mode\":\"list\",\"value\":124452194,\"cachedResultUrl\":\"https://docs.google.com/spreadsheets/d/16zkksQMG1U9U850DFC5nDy-90VYZCgxLlyVwDB9I28Q/edit#gid=124452194\",\"cachedResultName\":\"Closed questions\"},\"documentId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"16zkksQMG1U9U850DFC5nDy-90VYZCgxLlyVwDB9I28Q\",\"cachedResultUrl\":\"https://docs.google.com/spreadsheets/d/16zkksQMG1U9U850DFC5nDy-90VYZCgxLlyVwDB9I28Q/edit?usp=drivesdk\",\"cachedResultName\":\"Question for Exam\"}},\"credentials\":{\"googleSheetsOAuth2Api\":{\"id\":\"JYR6a64Qecd6t8Hb\",\"name\":\"Google Sheets account\"}},\"typeVersion\":4.5},{\"id\":\"9e5e41b1-32b2-413e-b63f-13e946857569\",\"name\":\"Embeddings OpenAI1\",\"type\":\"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\"position\":[1420,1340],\"parameters\":{\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"4zwP0MSr8zkNvvV9\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.2},{\"id\":\"a87ab6ba-39b0-4c7c-be19-9003e38c9495\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-460,780],\"parameters\":{\"width\":620,\"height\":180,\"content\":\"# STEP 3\\n\\nThe chain analyzes the document and creates 10 \\\"open\\\" questions and another chain analyzes each single question and through the consultation of the vector database the optimal answer is obtained.\"},\"typeVersion\":1},{\"id\":\"ea81bccc-d204-44d7-89b2-85f7b3267e34\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-460,1540],\"parameters\":{\"width\":620,\"height\":180,\"content\":\"# STEP 4\\n\\nThe chain analyzes the document and creates 10 questions with \\\"closed\\\" answers and another chain analyzes each single question and through the consultation of the vector database the correct answer and 3 other wrong answers are obtained to be used as a quiz.\"},\"typeVersion\":1},{\"id\":\"b510a77d-7436-4b84-b7a3-d42d75b15b59\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-480,-360],\"parameters\":{\"color\":3,\"width\":1120,\"height\":200,\"content\":\"## Auto-Generate Exam Questions from Google Docs with AI\\n\\nThis workflow automates the creation of exam questions (both open-ended and multiple-choice) from educational content stored in Google Docs, using AI-powered analysis and vector database retrieval\\n\\nThis workflow **saves educators hours of manual work** while ensuring high-quality, curriculum-aligned assessments. Let me know if you'd like help adapting it for specific subjects!\\n\"},\"typeVersion\":1}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"626a1ef7-45ae-4724-af3b-8a04b37fffc8\",\"connections\":{\"RAG\":{\"ai_tool\":[[{\"node\":\"Answer and create options\",\"type\":\"ai_tool\",\"index\":0}]]},\"Get Doc\":{\"main\":[[{\"node\":\"Converto di MD\",\"type\":\"main\",\"index\":0}]]},\"Write open\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]},\"Write closed\":{\"main\":[[{\"node\":\"Loop Over Items1\",\"type\":\"main\",\"index\":0}]]},\"Converto di MD\":{\"main\":[[{\"node\":\"Closed questions\",\"type\":\"main\",\"index\":0},{\"node\":\"Convert to File\",\"type\":\"main\",\"index\":0},{\"node\":\"Open questions\",\"type\":\"main\",\"index\":0}]]},\"Open questions\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]},\"Token Splitter\":{\"ai_textSplitter\":[[{\"node\":\"Default Data Loader\",\"type\":\"ai_textSplitter\",\"index\":0}]]},\"Convert to File\":{\"main\":[[{\"node\":\"Qdrant Vector Store\",\"type\":\"main\",\"index\":0}]]},\"Loop Over Items\":{\"main\":[[],[{\"node\":\"Answer questions\",\"type\":\"main\",\"index\":0}]]},\"Answer questions\":{\"main\":[[{\"node\":\"Write open\",\"type\":\"main\",\"index\":0}]]},\"Closed questions\":{\"main\":[[{\"node\":\"Loop Over Items1\",\"type\":\"main\",\"index\":0}]]},\"Loop Over Items1\":{\"main\":[[],[{\"node\":\"Answer and create options\",\"type\":\"main\",\"index\":0}]]},\"Embeddings OpenAI\":{\"ai_embedding\":[[{\"node\":\"Qdrant Vector Store\",\"type\":\"ai_embedding\",\"index\":0}]]},\"Embeddings OpenAI1\":{\"ai_embedding\":[[{\"node\":\"Qdrant Vector Store1\",\"type\":\"ai_embedding\",\"index\":0}]]},\"Embeddings OpenAI2\":{\"ai_embedding\":[[{\"node\":\"Qdrant Vector Store2\",\"type\":\"ai_embedding\",\"index\":0}]]},\"Refresh collection\":{\"main\":[[{\"node\":\"Get Doc\",\"type\":\"main\",\"index\":0}]]},\"Default Data Loader\":{\"ai_document\":[[{\"node\":\"Qdrant Vector Store\",\"type\":\"ai_document\",\"index\":0}]]},\"Qdrant Vector Store1\":{\"ai_vectorStore\":[[{\"node\":\"Vector Store Retriever\",\"type\":\"ai_vectorStore\",\"index\":0}]]},\"Qdrant Vector Store2\":{\"ai_vectorStore\":[[{\"node\":\"RAG\",\"type\":\"ai_vectorStore\",\"index\":0}]]},\"Vector Store Retriever\":{\"ai_retriever\":[[{\"node\":\"Answer questions\",\"type\":\"ai_retriever\",\"index\":0}]]},\"Item List Output Parser\":{\"ai_outputParser\":[[{\"node\":\"Open questions\",\"type\":\"ai_outputParser\",\"index\":0}]]},\"Google Gemini Chat Model\":{\"ai_languageModel\":[[{\"node\":\"Open questions\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Item List Output Parser1\":{\"ai_outputParser\":[[{\"node\":\"Closed questions\",\"type\":\"ai_outputParser\",\"index\":0}]]},\"Structured Output Parser\":{\"ai_outputParser\":[[{\"node\":\"Answer and create options\",\"type\":\"ai_outputParser\",\"index\":0}]]},\"Answer and create options\":{\"main\":[[{\"node\":\"Write closed\",\"type\":\"main\",\"index\":0}]]},\"Google Gemini Chat Model1\":{\"ai_languageModel\":[[{\"node\":\"Answer questions\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Google Gemini Chat Model2\":{\"ai_languageModel\":[[{\"node\":\"Closed questions\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Google Gemini Chat Model3\":{\"ai_languageModel\":[[{\"node\":\"Answer and create options\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Google Gemini Chat Model4\":{\"ai_languageModel\":[[{\"node\":\"RAG\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"Refresh collection\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This workflow automates the creation of **exam questions** (_**both open-ended and multiple-choice**_) from educational content stored in **Google Docs** , using **AI-powered analysis** and vector database retrieval\n\nThis workflow **saves educators hours of manual work** while ensuring high-quality, curriculum-aligned assessments. Let me know if you'd like help adapting it for specific subjects!\n\n* * *\n\n### **Use Cases**\n\n  * **Educators** : Rapidly generate quizzes, midterms, or flashcards.\n  * **E-learning platforms** : Automate question banks for courses.\n  * **Corporate training** : Create assessments for employee onboarding.\n\n\n\n**Technical Requirements** :\n\n  * **APIs** : Google Gemini, OpenAI, Qdrant, Google Workspace.\n  * **n8n Nodes** : LangChain, Google Sheets/Docs, HTTP requests, code blocks.\n\n\n\nThis workflow **combines AI efficiency with human-curated quality** , making it a powerful tool for modern education and training.\n\n* * *\n\n### **Advantages of This Workflow**\n\n  * ✅ **Fully Automated Exam Generation** : From document to fully formatted quiz content with no manual intervention.\n  * ✅ **Supports Comprehension and Critical Thinking** : Questions are designed to go beyond factual recall, including inference and application.\n  * ✅ **Uses AI and RAG for Accuracy** : Ensures that answers are grounded in the document content, reducing hallucination.\n  * ✅ **Seamless Google Integration** : Pulls content from Google Docs and writes outputs to Google Sheets.\n  * ✅ **Scalable for Any Subject** : Works with any article or content domain as input.\n  * ✅ **Modular and Customizable** : Can be easily adapted to generate different question types or to use other LLMs or storage systems.\n\n\n\n* * *\n\n### **How It Works**\n\n  1. **Document Ingestion** :\n\n     * The workflow starts by fetching an educational document (e.g., textbook chapter, lecture notes) from **Google Docs**.\n     * Converts the document to **Markdown** for structured processing.\n  2. **AI Processing** :\n\n     * Splits text into chunks and generates **vector embeddings** (via OpenAI) for semantic analysis.\n     * Stores embeddings in **Qdrant** (vector database) for retrieval.\n  3. **Question Generation** :\n\n     * **Open-ended questions** : Google Gemini AI creates 10 critical-thinking questions.\n     * **Multiple-choice questions** : Generates 10 MCQs (1 correct + 3 plausible distractors) using **RAG** to validate answers against the vector DB.\n  4. **Answer Validation** :\n\n     * For open questions: Retrieves context-aware answers from the vector store.\n     * For MCQs: Ensures distractors are incorrect but believable via AI cross-checking.\n  5. **Output** :\n\n     * Saves questions/answers to **Google Sheets** in two tabs: \n       * `Open questions`: Question + AI-generated answer.\n       * `Closed questions`: MCQ + options + correct answer.\n\n\n\n* * *\n\n### **Set Up Steps**\n\n  1. **Prerequisites** :\n\n     * **APIs/Accounts** : \n       * Google Workspace (Docs + Sheets).\n       * OpenAI (for embeddings).\n       * Google Gemini (for question generation).\n       * Qdrant (vector DB – self-hosted or cloud).\n     * **n8n Nodes** : Ensure LangChain, Google Sheets/Docs, and HTTP request nodes are installed.\n  2. **Configure Connections** :\n\n     * Link credentials for: \n       * **Google Docs/Sheets** (OAuth2).\n       * **OpenAI** (API key).\n       * **Google Gemini** (API key).\n       * **Qdrant** (URL + API key).\n  3. **Customize Input** :\n\n     * Replace the default **Google Doc ID** in the \"Get Doc\" node with your source document.\n     * Adjust **chunk size/overlap** (Token Splitter node) for optimal text processing.\n  4. **Tweak Question Generation** :\n\n     * Modify prompts in: \n       * **\"Open questions\" node** : Adjust criteria (e.g., difficulty, question types).\n       * **\"Closed questions\" node** : Edit MCQ formatting rules.\n  5. **Output Settings** :\n\n     * Update the **Google Sheet ID** in \"Write open\" and \"Write closed\" nodes.\n     * Map columns in Google Sheets to match question/answer formats.\n  6. **Run & Automate**:\n\n     * Trigger manually (\"Test workflow\") or schedule periodic runs (e.g., for updated content).\n\n\n\n* * *\n\n### **Need help customizing?**\n\n[Contact me](mailto:info@n3w.it) for consulting and support or add me on [Linkedin](https://www.linkedin.com/in/davideboizza/).\n",
  "readme_html": "<!--[--><div data-v-859c7806=\"\"><p>This workflow automates the creation of <strong>exam questions</strong> (<em><strong>both open-ended and multiple-choice</strong></em>) from educational content stored in <strong>Google Docs</strong>, using <strong>AI-powered analysis</strong> and vector database retrieval</p>\n<p>This workflow <strong>saves educators hours of manual work</strong> while ensuring high-quality, curriculum-aligned assessments. Let me know if you'd like help adapting it for specific subjects!</p>\n<hr>\n<h3><strong>Use Cases</strong></h3>\n<ul>\n<li><strong>Educators</strong>: Rapidly generate quizzes, midterms, or flashcards.</li>\n<li><strong>E-learning platforms</strong>: Automate question banks for courses.</li>\n<li><strong>Corporate training</strong>: Create assessments for employee onboarding.</li>\n</ul>\n<p><strong>Technical Requirements</strong>:</p>\n<ul>\n<li><strong>APIs</strong>: Google Gemini, OpenAI, Qdrant, Google Workspace.</li>\n<li><strong>n8n Nodes</strong>: LangChain, Google Sheets/Docs, HTTP requests, code blocks.</li>\n</ul>\n<p>This workflow <strong>combines AI efficiency with human-curated quality</strong>, making it a powerful tool for modern education and training.</p>\n<hr>\n<h3><strong>Advantages of This Workflow</strong></h3>\n<ul>\n<li>✅ <strong>Fully Automated Exam Generation</strong>: From document to fully formatted quiz content with no manual intervention.</li>\n<li>✅ <strong>Supports Comprehension and Critical Thinking</strong>: Questions are designed to go beyond factual recall, including inference and application.</li>\n<li>✅ <strong>Uses AI and RAG for Accuracy</strong>: Ensures that answers are grounded in the document content, reducing hallucination.</li>\n<li>✅ <strong>Seamless Google Integration</strong>: Pulls content from Google Docs and writes outputs to Google Sheets.</li>\n<li>✅ <strong>Scalable for Any Subject</strong>: Works with any article or content domain as input.</li>\n<li>✅ <strong>Modular and Customizable</strong>: Can be easily adapted to generate different question types or to use other LLMs or storage systems.</li>\n</ul>\n<hr>\n<h3><strong>How It Works</strong></h3>\n<ol>\n<li>\n<p><strong>Document Ingestion</strong>:</p>\n<ul>\n<li>The workflow starts by fetching an educational document (e.g., textbook chapter, lecture notes) from <strong>Google Docs</strong>.</li>\n<li>Converts the document to <strong>Markdown</strong> for structured processing.</li>\n</ul>\n</li>\n<li>\n<p><strong>AI Processing</strong>:</p>\n<ul>\n<li>Splits text into chunks and generates <strong>vector embeddings</strong> (via OpenAI) for semantic analysis.</li>\n<li>Stores embeddings in <strong>Qdrant</strong> (vector database) for retrieval.</li>\n</ul>\n</li>\n<li>\n<p><strong>Question Generation</strong>:</p>\n<ul>\n<li><strong>Open-ended questions</strong>: Google Gemini AI creates 10 critical-thinking questions.</li>\n<li><strong>Multiple-choice questions</strong>: Generates 10 MCQs (1 correct + 3 plausible distractors) using <strong>RAG</strong> to validate answers against the vector DB.</li>\n</ul>\n</li>\n<li>\n<p><strong>Answer Validation</strong>:</p>\n<ul>\n<li>For open questions: Retrieves context-aware answers from the vector store.</li>\n<li>For MCQs: Ensures distractors are incorrect but believable via AI cross-checking.</li>\n</ul>\n</li>\n<li>\n<p><strong>Output</strong>:</p>\n<ul>\n<li>Saves questions/answers to <strong>Google Sheets</strong> in two tabs:\n<ul>\n<li><code>Open questions</code>: Question + AI-generated answer.</li>\n<li><code>Closed questions</code>: MCQ + options + correct answer.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3><strong>Set Up Steps</strong></h3>\n<ol>\n<li>\n<p><strong>Prerequisites</strong>:</p>\n<ul>\n<li><strong>APIs/Accounts</strong>:\n<ul>\n<li>Google Workspace (Docs + Sheets).</li>\n<li>OpenAI (for embeddings).</li>\n<li>Google Gemini (for question generation).</li>\n<li>Qdrant (vector DB – self-hosted or cloud).</li>\n</ul>\n</li>\n<li><strong>n8n Nodes</strong>: Ensure LangChain, Google Sheets/Docs, and HTTP request nodes are installed.</li>\n</ul>\n</li>\n<li>\n<p><strong>Configure Connections</strong>:</p>\n<ul>\n<li>Link credentials for:\n<ul>\n<li><strong>Google Docs/Sheets</strong> (OAuth2).</li>\n<li><strong>OpenAI</strong> (API key).</li>\n<li><strong>Google Gemini</strong> (API key).</li>\n<li><strong>Qdrant</strong> (URL + API key).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Customize Input</strong>:</p>\n<ul>\n<li>Replace the default <strong>Google Doc ID</strong> in the \"Get Doc\" node with your source document.</li>\n<li>Adjust <strong>chunk size/overlap</strong> (Token Splitter node) for optimal text processing.</li>\n</ul>\n</li>\n<li>\n<p><strong>Tweak Question Generation</strong>:</p>\n<ul>\n<li>Modify prompts in:\n<ul>\n<li><strong>\"Open questions\" node</strong>: Adjust criteria (e.g., difficulty, question types).</li>\n<li><strong>\"Closed questions\" node</strong>: Edit MCQ formatting rules.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Output Settings</strong>:</p>\n<ul>\n<li>Update the <strong>Google Sheet ID</strong> in \"Write open\" and \"Write closed\" nodes.</li>\n<li>Map columns in Google Sheets to match question/answer formats.</li>\n</ul>\n</li>\n<li>\n<p><strong>Run &amp; Automate</strong>:</p>\n<ul>\n<li>Trigger manually (\"Test workflow\") or schedule periodic runs (e.g., for updated content).</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3><strong>Need help customizing?</strong></h3>\n<p><a href=\"mailto:info@n3w.it\" rel=\"ugc nofollow\">Contact me</a> for consulting and support or add me on <a href=\"https://www.linkedin.com/in/davideboizza/\" rel=\"ugc nofollow\" target=\"_blank\">Linkedin</a>.</p>\n</div><!--]-->",
  "readme_zh": "该工作流通过**AI智能分析**与向量数据库检索，可自动从**Google文档**存储的教育内容中生成**试题**（**包含开放式与选择题**），**为教育工作者节省数小时人工劳动**，同时确保生成高质量、符合课程标准的测评内容。如需针对特定学科定制，欢迎联系！\n\n* * *\n\n### **适用场景**\n\n  * **教育工作者**：快速生成随堂测验、期中考试或记忆卡片。\n  * **在线教育平台**：自动创建课程题库。\n  * **企业培训**：制作员工入职考核试题。\n\n**技术需求**：\n\n  * **API**：Google Gemini、OpenAI、Qdrant、Google Workspace。\n  * **n8n节点**：LangChain、Google表格/文档、HTTP请求、代码块。\n\n本工作流**融合AI效率与人工校验质量**，是现代教育与培训的强力工具。\n\n* * *\n\n### **核心优势**\n\n  * ✅ **全自动试题生成**：从文档到格式完整的测验内容，无需人工干预。\n  * ✅ **培养理解与批判性思维**：题目设计超越事实复述，涵盖推理与应用。\n  * ✅ **AI+RAG保障准确性**：答案严格基于文档内容，减少臆造。\n  * ✅ **无缝衔接Google生态**：从Google文档提取内容，输出至Google表格。\n  * ✅ **学科普适性强**：支持任意文章或专业领域作为输入源。\n  * ✅ **模块化可定制**：轻松调整题型或更换LLM/存储系统。\n\n* * *\n\n### **运作流程**\n\n  1. **文档输入**：\n     * 从**Google文档**获取教材（如教科书章节、讲义）。\n     * 转换为**Markdown**格式以便结构化处理。\n  2. **AI处理**：\n     * 分段文本并通过OpenAI生成**向量嵌入**进行语义分析。\n     * 将嵌入数据存储至**Qdrant**向量数据库备用。\n  3. **题目生成**：\n     * **开放式问题**：Google Gemini生成10道批判思维题。\n     * **选择题**：通过**RAG**生成10道单选题（1正确答案+3合理干扰项），并验证答案准确性。\n  4. **答案验证**：\n     * 开放式问题：从向量库获取上下文关联答案。\n     * 选择题：通过AI交叉验证确保干扰项错误但可信。\n  5. **输出结果**：\n     * 将题目/答案保存至**Google表格**的两个标签页：\n       * `开放式问题`：题目+AI生成答案。\n       * `选择题`：题目+选项+正确答案。\n\n* * *\n\n### **配置步骤**\n\n  1. **环境准备**：\n     * **API/账户**：\n       * Google Workspace（文档+表格）。\n       * OpenAI（用于向量嵌入）。\n       * Google Gemini（用于题目生成）。\n       * Qdrant向量数据库（自建或云端）。\n     * **n8n节点**：确保已安装LangChain、Google表格/文档及HTTP请求节点。\n  2. **连接配置**：\n     * 授权以下服务：\n       * **Google文档/表格**（OAuth2）。\n       * **OpenAI**（API密钥）。\n       * **Google Gemini**（API密钥）。\n       * **Qdrant**（URL+API密钥）。\n  3. **输入定制**：\n     * 在\"获取文档\"节点替换默认的**Google文档ID**。\n     * 调整\"文本分割\"节点的**分块大小/重叠量**以优化处理。\n  4. **题目生成调整**：\n     * 修改以下节点的提示词：\n       * **\"开放式问题\"节点**：调整难度、题型等参数。\n       * **\"选择题\"节点**：编辑题目格式规则。\n  5. **输出设置**：\n     * 在\"写入开放式问题\"和\"写入选择题\"节点更新**Google表格ID**。\n     * 匹配表格列与题目/答案格式。\n  6. **运行与自动化**：\n     * 手动触发（\"测试工作流\"）或设置定期运行（如内容更新时）。\n\n* * *\n\n### **需要定制帮助？**\n\n[邮件联系](mailto:info@n3w.it)或通过[Linkedin](https://www.linkedin.com/in/davideboizza/)添加我获取咨询支持。",
  "title_zh": "利用Gemini从谷歌文档自动生成AI驱动的考试题目与答案",
  "publish_date_zh": "上次更新于5天前",
  "workflow_json_zh": "{\n  \"id\": \"7Qa2mH7PnDxy7Qat\",\n  \"meta\": {\n    \"instanceId\": \"a4bfc93e975ca233ac45ed7c9227d84cf5a2329310525917adaf3312e10d5462\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"Generate Exam Questions\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"4e037d6e-93a9-4c1b-b84a-dbbcf77beaf5\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -740,\n        120\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"febc8bb7-5de7-46d6-bc23-54673089cd3d\",\n      \"name\": \"Qdrant Vector Store\",\n      \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreQdrant\",\n      \"position\": [\n        900,\n        240\n      ],\n      \"parameters\": {\n        \"mode\": \"insert\",\n        \"options\": {},\n        \"qdrantCollection\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"ai_article_test\",\n          \"cachedResultName\": \"ai_article_test\"\n        }\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"iyQ6MQiVaF3VMBmt\",\n          \"name\": \"QdrantApi account (Hetzner)\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2d7e2673-6559-49b3-9ed0-29ca2c376f00\",\n      \"name\": \"Create collection\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -440,\n        -20\n      ],\n      \"parameters\": {\n        \"url\": \"http://QDRANT_URL/collections/COLLECTIONS\",\n        \"method\": \"PUT\",\n        \"options\": {},\n        \"jsonBody\": \"{\\n  \\\"vectors\\\": {\\n    \\\"size\\\": 1536,\\n    \\\"distance\\\": \\\"Cosine\\\"  \\n  },\\n  \\\"shard_number\\\": 1,  \\n  \\\"replication_factor\\\": 1,  \\n  \\\"write_consistency_factor\\\": 1 \\n}\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"qhny6r5ql9wwotpn\",\n          \"name\": \"Qdrant API (Hetzner)\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"615f26b2-930c-4b74-a35c-00b83460a7c9\",\n      \"name\": \"Refresh collection\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -440,\n        240\n      ],\n      \"parameters\": {\n        \"url\": \"http://QDRANT_URL/collections/COLLECTIONS/points/delete\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"{\\n  \\\"filter\\\": {}\\n}\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"qhny6r5ql9wwotpn\",\n          \"name\": \"Qdrant API (Hetzner)\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"eb34b8dd-353b-41c4-8a02-6565c3f8a7d3\",\n      \"name\": \"Embeddings OpenAI\",\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\n      \"position\": [\n        820,\n        440\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"stripNewLines\": false\n        }\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"4zwP0MSr8zkNvvV9\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"fb639802-e099-4857-823b-5e6d89fb3e86\",\n      \"name\": \"Default Data Loader\",\n      \"type\": \"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\",\n      \"position\": [\n        1080,\n        460\n      ],\n      \"parameters\": {\n        \"loader\": \"textLoader\",\n        \"options\": {},\n        \"dataType\": \"binary\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0af5028d-56a4-4bbc-8af0-f088e54f178b\",\n      \"name\": \"Token Splitter\",\n      \"type\": \"@n8n/n8n-nodes-langchain.textSplitterTokenSplitter\",\n      \"position\": [\n        1040,\n        640\n      ],\n      \"parameters\": {\n        \"chunkSize\": 450,\n        \"chunkOverlap\": 50\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6a10192e-4b2e-4705-865a-fa90328ba3c1\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -240,\n        -80\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 880,\n        \"height\": 220,\n        \"content\": \"# 第一步\\n\\n## 创建Qdrant集合\\n需要修改：\\n- QDRANTURL（Qdrant服务地址）\\n- COLLECTION（集合名称）\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"1ebefe44-e5c9-43fb-b9fa-fee47b08e2c2\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -460,\n        180\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 620,\n        \"height\": 400,\n        \"content\": \"# 第二步\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"88f816ae-4331-46e0-b1f9-636ec94e8bb3\",\n      \"name\": \"Converto di MD\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        240,\n        240\n      ],\n      \"parameters\": {\n        \"jsCode\": \"function convertToMarkdown(docContent) {\\n  let markdown = '';\\n\\n  const headingMap = {\\n    'HEADING_1': '#',\\n    'HEADING_2': '##',\\n    'HEADING_3': '###',\\n    'HEADING_4': '####',\\n    'HEADING_5': '#####',\\n    'HEADING_6': '######',\\n  };\\n\\n  for (const element of docContent.body.content) {\\n    if (!element.paragraph) continue;\\n\\n    const para = element.paragraph;\\n    let line = '';\\n\\n    // Tipo di paragrafo (normale o heading)\\n    const style = para.paragraphStyle?.namedStyleType;\\n    const prefix = headingMap[style] || '';\\n\\n    for (const el of para.elements) {\\n      if (!el.textRun) continue;\\n\\n      let text = el.textRun.content || '';\\n      const style = el.textRun.textStyle || {};\\n\\n      if (style.bold) text = `**${text.trim()}**`;\\n      if (style.italic) text = `*${text.trim()}*`;\\n      if (!style.bold && !style.italic) text = text.trim();\\n\\n      line += text;\\n    }\\n\\n    if (prefix) {\\n      markdown += `${prefix} ${line}\\\\n\\\\n`;\\n    } else {\\n      markdown += `${line}\\\\n\\\\n`;\\n    }\\n  }\\n\\n  return markdown.trim();\\n}\\n\\n// Assumiamo che il JSON completo sia in items[0].json\\nconst docJson = items[0].json;\\nconst markdown = convertToMarkdown(docJson);\\n\\nreturn [\\n  {\\n    json: {\\n      markdown,\\n    },\\n  },\\n];\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"5c733b2d-3d0a-4260-af88-7907907e209f\",\n      \"name\": \"Get Doc\",\n      \"type\": \"n8n-nodes-base.googleDocs\",\n      \"position\": [\n        -60,\n        240\n      ],\n      \"parameters\": {\n        \"simple\": false,\n        \"operation\": \"get\",\n        \"documentURL\": \"XXXXXXXXXXXXXXXX\"\n      },\n      \"credentials\": {\n        \"googleDocsOAuth2Api\": {\n          \"id\": \"LpmDV1ry0BPLvW8b\",\n          \"name\": \"Google Docs account\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"5de82976-2376-4201-a5a4-dbdd6bfcb596\",\n      \"name\": \"Vector Store Retriever\",\n      \"type\": \"@n8n/n8n-nodes-langchain.retrieverVectorStore\",\n      \"position\": [\n        1540,\n        1040\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"25bcb865-7b15-4272-81da-4ff41a4ccc60\",\n      \"name\": \"Qdrant Vector Store1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreQdrant\",\n      \"position\": [\n        1440,\n        1180\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"qdrantCollection\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"ai_article_test\",\n          \"cachedResultName\": \"ai_article_test\"\n        }\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"iyQ6MQiVaF3VMBmt\",\n          \"name\": \"QdrantApi account (Hetzner)\"\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"7dacd3ac-2d25-4960-ba53-e44ae9722dca\",\n      \"name\": \"Convert to File\",\n      \"type\": \"n8n-nodes-base.convertToFile\",\n      \"position\": [\n        560,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"operation\": \"toText\",\n        \"sourceProperty\": \"markdown\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"9d7561f0-5b01-4327-ab62-68a105364155\",\n      \"name\": \"Google Gemini Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"position\": [\n        540,\n        980\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"modelName\": \"models/gemini-2.0-flash-exp\"\n      },\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"0p34rXqIqy8WuoPg\",\n          \"name\": \"Google Gemini(PaLM) Api account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4f63e896-45b1-484f-9fa1-0b488691023a\",\n      \"name\": \"Item List Output Parser\",\n      \"type\": \"@n8n/n8n-nodes-langchain.outputParserItemList\",\n      \"position\": [\n        740,\n        1000\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"numberOfItems\": 10\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"911e8654-dfef-4d4f-b1c8-247fe0091381\",\n      \"name\": \"Loop Over Items\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        1100,\n        780\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"987e13f8-f8c9-4bc1-9e4f-d11a5f8af4d7\",\n      \"name\": \"Google Gemini Chat Model1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"position\": [\n        1360,\n        1020\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"modelName\": \"models/gemini-2.0-pro-exp\"\n      },\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"0p34rXqIqy8WuoPg\",\n          \"name\": \"Google Gemini(PaLM) Api account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c2f70831-4d5d-403b-b92d-af82205cbbdc\",\n      \"name\": \"Google Gemini Chat Model2\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"position\": [\n        520,\n        1720\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"modelName\": \"models/gemini-2.0-flash-exp\"\n      },\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"0p34rXqIqy8WuoPg\",\n          \"name\": \"Google Gemini(PaLM) Api account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2f4ca583-8005-4e26-88df-ffebdc2be2f6\",\n      \"name\": \"Item List Output Parser1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.outputParserItemList\",\n      \"position\": [\n        760,\n        1720\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"numberOfItems\": 10\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cacecdab-2f1c-4730-a7c5-d46dca32969c\",\n      \"name\": \"Loop Over Items1\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        1080,\n        1540\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"2de66223-475c-4fef-aa85-13e954a5c1cc\",\n      \"name\": \"Google Gemini Chat Model3\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"position\": [\n        1320,\n        1840\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"modelName\": \"models/gemini-2.0-flash-exp\"\n      },\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"0p34rXqIqy8WuoPg\",\n          \"name\": \"Google Gemini(PaLM) Api account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"43058954-369c-477d-beee-ece1916aebb7\",\n      \"name\": \"Qdrant Vector Store2\",\n      \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreQdrant\",\n      \"position\": [\n        1380,\n        2020\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"qdrantCollection\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"ai_article_test\",\n          \"cachedResultName\": \"ai_article_test\"\n        }\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"iyQ6MQiVaF3VMBmt\",\n          \"name\": \"QdrantApi account (Hetzner)\"\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"27dddcae-e20a-41a9-879e-ce8ae8a0347f\",\n      \"name\": \"Embeddings OpenAI2\",\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\n      \"position\": [\n        1360,\n        2200\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"4zwP0MSr8zkNvvV9\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"37d164a7-94aa-4273-b91a-8b22684a45fd\",\n      \"name\": \"Structured Output Parser\",\n      \"type\": \"@n8n/n8n-nodes-langchain.outputParserStructured\",\n      \"position\": [\n        1820,\n        1820\n      ],\n      \"parameters\": {\n        \"schemaType\": \"manual\",\n        \"inputSchema\": \"{\\n\\t\\\"type\\\": \\\"object\\\",\\n\\t\\\"properties\\\": {\\n\\t\\t\\\"correct\\\": {\\n\\t\\t\\t\\\"type\\\": \\\"string\\\"\\n\\t\\t},\\n\\t\\t\\\"answers\\\": {\\n\\t\\t\\t\\\"type\\\": \\\"array\\\",\\n\\t\\t\\t\\\"items\\\": {\\n\\t\\t\\t\\t\\\"type\\\": \\\"string\\\"\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\"\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"42d627b5-c033-4b2e-8ea4-fe704601b3d6\",\n      \"name\": \"RAG\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolVectorStore\",\n      \"position\": [\n        1500,\n        1820\n      ],\n      \"parameters\": {\n        \"description\": \"In base alla domanda consulta il database vettoriale ed estrapola la risposta corretta. Elabora anche altre 3 risposte non corrette.\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"ce763ef2-eb54-484b-8046-7bc008012ec5\",\n      \"name\": \"Google Gemini Chat Model4\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"position\": [\n        1700,\n        1980\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"modelName\": \"models/gemini-2.0-pro-exp\"\n      },\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"0p34rXqIqy8WuoPg\",\n          \"name\": \"Google Gemini(PaLM) Api account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"076994e8-0326-424e-a5c3-3d07958af0af\",\n      \"name\": \"Open questions\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        560,\n        780\n      ],\n      \"parameters\": {\n        \"text\": \"=Article:\\n'''\\n{{ $json.markdown }}\\n'''\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"=## Purpose\\nYou are a specialized AI designed to analyze articles and create challenging questions that test comprehension and knowledge retention. Your task is to generate questions that encourage critical thinking about the article's content.\\n\\n## Input\\nThe input will be a text article on any subject. This could be academic, news, technical, or general interest content.\\n\\n## Output Requirements\\n- Create exactly 10 questions based on the article content\\n- DO NOT number the questions\\n- Questions should cover key facts, concepts, and implications from the article\\n- Include a mix of question types:\\n  - Factual recall questions\\n  - Inference questions that require reading between the lines\\n  - Application questions that ask how concepts might be applied\\n  - Analysis questions that probe deeper understanding\\n  - Questions about relationships between different parts of the article\\n- Questions should vary in difficulty level\\n- Avoid creating questions with simple yes/no answers\\n- Ensure questions are clearly worded and unambiguous\\n- Questions should test genuine understanding rather than trivial details\\n\\n## Output Format\\n- Present each question as a separate paragraph\\n- Do not include answers\\n- Do not include numbering or bullet points\\n- Do not include any introductory text\\n- Do not include any explanatory notes\\n\\n## Behavior Guidelines\\n- Focus on the most significant and meaningful content in the article\\n- Ensure questions thoroughly cover the entire article, not just the beginning\\n- If the article contains technical terms, create questions that test understanding of these terms\\n- If the article presents contrasting viewpoints, create questions about both perspectives\\n- Maintain neutrality - do not frame questions that suggest a particular stance\\n- If the article is highly specialized, adjust question complexity accordingly\\n- Do not create questions about information not contained in the article\\n- If the article is in a language other than English, generate questions in the same language\\n\\n## Examples of Good Questions\\n- How does the author's description of X relate to the concept of Y discussed later in the article?\\n- What evidence does the article provide to support the claim that X leads to Y?\\n- How might the framework described in the article be applied to solve similar problems in different contexts?\\n- What underlying assumptions inform the author's perspective on this issue?\\n- In what ways does the article suggest the relationship between X and Y has evolved over time?\"\n            }\n          ]\n        },\n        \"promptType\": \"define\",\n        \"hasOutputParser\": true\n      },\n      \"typeVersion\": 1.6\n    },\n    {\n      \"id\": \"5df02a14-175f-4923-9a2f-ad4514f98c71\",\n      \"name\": \"Closed questions\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        560,\n        1540\n      ],\n      \"parameters\": {\n        \"text\": \"=Article:\\n'''\\n{{ $json.markdown }}\\n'''\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"=## Purpose\\nYou are a specialized AI designed to analyze articles and create high-quality multiple-choice questions that effectively test knowledge comprehension and retention. Your task is to generate questions with appropriate answer options that accurately assess understanding of the article's content.\\n\\n## Input\\nThe input will be a text article on any subject. This could be academic, news, technical, or general interest content.\\n\\n## Output Requirements\\n- Create exactly 10 multiple-choice questions based on the article content\\n- DO NOT number the questions\\n- Each question must include:\\n  - A clear question stem\\n  - Four answer options (labeled A, B, C, D)\\n  - One correct answer and three plausible distractors\\n- Questions should cover key facts, concepts, and implications from the article\\n- Include a mix of question types:\\n  - Factual recall questions\\n  - Inference questions requiring deeper understanding\\n  - Application questions testing practical knowledge\\n  - Analysis questions examining relationships between concepts\\n- Questions should vary in difficulty level\\n- Ensure questions are clearly worded and unambiguous\\n- Distractors should be plausible but clearly incorrect upon careful reading of the article\\n\\n## Output Format\\n- Present each question as a separate paragraph\\n- Format each question as:\\n  [Question]\\n  A. [Option A]\\n  B. [Option B]\\n  C. [Option C]\\n  D. [Option D]\\n- Do not indicate which answer is correct in the output\\n- Do not include any introductory text\\n- Do not include any explanatory notes\\n- Do not include numbering for questions\\n\\n## Behavior Guidelines\\n- Focus on the most significant and meaningful content in the article\\n- Ensure questions thoroughly cover the entire article, not just the beginning\\n- Make all answer options approximately the same length\\n- Avoid using absolute terms like \\\"always\\\" or \\\"never\\\" in the options\\n- Avoid grammatical clues that hint at the correct answer\\n- Make distractors plausible by:\\n  - Using common misconceptions\\n  - Including partially correct information\\n  - Using correct information from the wrong context\\n- If the article contains technical terms, create questions that test understanding of these terms\\n- If the article presents contrasting viewpoints, create questions about both perspectives\\n- Maintain neutrality - do not frame questions that suggest a particular stance\\n- If the article is in a language other than English, generate questions in the same language\\n\\n## Examples of Good Multiple-Choice Questions\\n- What is the primary factor contributing to the phenomenon described in the article?\\n  A. [Plausible but incorrect factor]\\n  B. [Correct factor from article]\\n  C. [Plausible but incorrect factor]\\n  D. [Plausible but incorrect factor]\\n\\n- According to the article, how does [concept X] impact [concept Y]?\\n  A. [Correct relationship described in article]\\n  B. [Plausible but incorrect relationship]\\n  C. [Plausible but incorrect relationship]\\n  D. [Plausible but incorrect relationship]\\n\\n- Which application of the described technology would align with the principles outlined in the article?\\n  A. [Plausible but incorrect application]\\n  B. [Plausible but incorrect application]\\n  C. [Correct application based on article]\\n  D. [Plausible but incorrect application]\"\n            }\n          ]\n        },\n        \"promptType\": \"define\",\n        \"hasOutputParser\": true\n      },\n      \"typeVersion\": 1.6\n    },\n    {\n      \"id\": \"53c89d9a-4a69-47f7-bbf1-f523e2763741\",\n      \"name\": \"Answer questions\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainRetrievalQa\",\n      \"position\": [\n        1400,\n        800\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.text }}\",\n        \"options\": {\n          \"systemPromptTemplate\": \"You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question.\\n\\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\nUse text plain (not markdown).\\n----------------\\nContext: {context}\"\n        },\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.5\n    },\n    {\n      \"id\": \"93d55b4f-2a93-474e-b431-6fd8ef868c45\",\n      \"name\": \"Answer and create options\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        1420,\n        1560\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.text }}\",\n        \"options\": {\n          \"systemMessage\": \"=System Prompt for RAG-Based Multiple-Choice Exam Creation\\n\\nPURPOSE:\\nYou are an AI assistant specialized in creating multiple-choice exams. Your task is to generate questions with one correct answer and three plausible but incorrect options using only the Retrieval Augmented Generation (RAG) tool to source accurate information.\\n\\nINPUT:\\nYou will receive a topic, subject area, or specific question to create exam items for.\\n\\nOUTPUT REQUIREMENTS:\\n- Create multiple-choice questions with exactly four options per question\\n- Each question must have one correct answer and three false answers\\n- The correct answer must be derived directly from the RAG tool's retrieved information\\n- All false answers must be plausible but clearly incorrect when compared to the retrieved information\\n- Use plain text only (no markdown formatting)\\n- Present all content in a clean, simple format without any special formatting\\n\\nPROCESS:\\n1. For each question:\\n   - Use the RAG tool to retrieve accurate information on the topic\\n   - Formulate a clear, unambiguous question based on the retrieved information\\n   - Extract the correct answer directly from the retrieved information\\n   - Create three false answers that are plausible but contradicted by the retrieved information\\n   - Mix the order of correct and incorrect answers\\n\\n2. For creating false answers:\\n   - Use common misconceptions related to the topic\\n   - Create answers that contain partial truths but are ultimately incorrect\\n   - Modify correct information slightly to make it incorrect\\n   - Avoid obviously wrong answers that would be too easy to eliminate\\n\\nOUTPUT FORMAT:\\nQuestion: [Question text]\\nA. [Option A]\\nB. [Option B]\\nC. [Option C]\\nD. [Option D]\\n\\nGUIDELINES:\\n- Questions should be clear and direct\\n- Use simple, straightforward language\\n- Avoid negatively phrased questions (e.g., \\\"Which of the following is NOT...\\\")\\n- Ensure all answer options are approximately the same length\\n- Do not include any explanations, notes, or additional information\\n- Do not include any formatting beyond plain text\\n- Do not indicate which answer is correct in the output\\n- Ensure all questions and answers are factually accurate based on the RAG tool's information\\n- Make sure distractors (false answers) are genuinely plausible to someone not familiar with the topic\\n\\nCONSTRAINTS:\\n- You must use the RAG tool for every question\\n- You must not rely on your general knowledge without verification through RAG\\n- You must not use markdown formatting\\n- You must not include any meta-information about the questions\\n- You must ensure all answer options are mutually exclusive (no overlap in meaning)\\n- You must use plain text only for all output\"\n        },\n        \"promptType\": \"define\",\n        \"hasOutputParser\": true\n      },\n      \"typeVersion\": 1.9\n    },\n    {\n      \"id\": \"c7e55f54-d851-4786-839d-fe839659caea\",\n      \"name\": \"Write open\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"position\": [\n        1880,\n        800\n      ],\n      \"parameters\": {\n        \"columns\": {\n          \"value\": {\n            \"ANSWER\": \"={{ $json.response }}\",\n            \"QUESTION\": \"={{ $('Loop Over Items').item.json.text }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"QUESTION\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"QUESTION\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"ANSWER\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"ANSWER\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": false\n        },\n        \"options\": {},\n        \"operation\": \"append\",\n        \"sheetName\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gid=0\",\n          \"cachedResultUrl\": \"https://docs.google.com/spreadsheets/d/16zkksQMG1U9U850DFC5nDy-90VYZCgxLlyVwDB9I28Q/edit#gid=0\",\n          \"cachedResultName\": \"Open questions\"\n        },\n        \"documentId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"16zkksQMG1U9U850DFC5nDy-90VYZCgxLlyVwDB9I28Q\",\n          \"cachedResultUrl\": \"https://docs.google.com/spreadsheets/d/16zkksQMG1U9U850DFC5nDy-90VYZCgxLlyVwDB9I28Q/edit?usp=drivesdk\",\n          \"cachedResultName\": \"Question for Exam\"\n        }\n      },\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"JYR6a64Qecd6t8Hb\",\n          \"name\": \"Google Sheets account\"\n        }\n      },\n      \"typeVersion\": 4.5\n    },\n    {\n      \"id\": \"1c72d8f0-b5b7-4e10-ad03-6c8491136cdf\",\n      \"name\": \"Write closed\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"position\": [\n        1860,\n        1560\n      ],\n      \"parameters\": {\n        \"columns\": {\n          \"value\": {\n            \"CORRECT\": \"={{ $json.output.correct }}\",\n            \"ANSWER A\": \"={{ $json.output.answers[0] }}\",\n            \"ANSWER B\": \"={{ $json.output.answers[1] }}\",\n            \"ANSWER C\": \"={{ $json.output.answers[2] }}\",\n            \"ANSWER D\": \"={{ $json.output.answers[3] }}\",\n            \"QUESTION\": \"={{ $('Closed questions').item.json.text }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"QUESTION\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"QUESTION\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"ANSWER A\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"ANSWER A\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"ANSWER B\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"ANSWER B\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"ANSWER C\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"ANSWER C\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"ANSWER D\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"ANSWER D\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"CORRECT\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"CORRECT\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": false\n        },\n        \"options\": {},\n        \"operation\": \"append\",\n        \"sheetName\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": 124452194,\n          \"cachedResultUrl\": \"https://docs.google.com/spreadsheets/d/16zkksQMG1U9U850DFC5nDy-90VYZCgxLlyVwDB9I28Q/edit#gid=124452194\",\n          \"cachedResultName\": \"Closed questions\"\n        },\n        \"documentId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"16zkksQMG1U9U850DFC5nDy-90VYZCgxLlyVwDB9I28Q\",\n          \"cachedResultUrl\": \"https://docs.google.com/spreadsheets/d/16zkksQMG1U9U850DFC5nDy-90VYZCgxLlyVwDB9I28Q/edit?usp=drivesdk\",\n          \"cachedResultName\": \"Question for Exam\"\n        }\n      },\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"JYR6a64Qecd6t8Hb\",\n          \"name\": \"Google Sheets account\"\n        }\n      },\n      \"typeVersion\": 4.5\n    },\n    {\n      \"id\": \"9e5e41b1-32b2-413e-b63f-13e946857569\",\n      \"name\": \"Embeddings OpenAI1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\n      \"position\": [\n        1420,\n        1340\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"4zwP0MSr8zkNvvV9\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"a87ab6ba-39b0-4c7c-be19-9003e38c9495\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -460,\n        780\n      ],\n      \"parameters\": {\n        \"width\": 620,\n        \"height\": 180,\n        \"content\": \"# 步骤三\\n\\n该链条分析文档并生成10个\\\"开放式\\\"问题，另一条链条则分析每个单独的问题，并通过查询向量数据库获取最优答案。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ea81bccc-d204-44d7-89b2-85f7b3267e34\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -460,\n        1540\n      ],\n      \"parameters\": {\n        \"width\": 620,\n        \"height\": 180,\n        \"content\": \"# 步骤4\\n\\n该链条分析文档并创建10个带\\\"封闭式\\\"答案的问题，另一条链则分析每个单独问题，通过查询向量数据库获取正确答案及3个错误答案，用于生成测验题目。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b510a77d-7436-4b84-b7a3-d42d75b15b59\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -480,\n        -360\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 1120,\n        \"height\": 200,\n        \"content\": \"## 利用AI从谷歌文档自动生成试题\\n\\n该工作流通过AI智能分析和向量数据库检索，可自动从谷歌文档中的教育内容生成开放式和选择题型试题。\\n\\n此方案**为教育工作者节省数小时手工劳动**，同时确保产出高质量、符合课程标准的评估内容。如需针对特定学科调整本方案，欢迎随时联系！\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"626a1ef7-45ae-4724-af3b-8a04b37fffc8\",\n  \"connections\": {\n    \"RAG\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"Answer and create options\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Doc\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Converto di MD\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Write open\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Write closed\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Converto di MD\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Closed questions\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Convert to File\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Open questions\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Open questions\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Token Splitter\": {\n      \"ai_textSplitter\": [\n        [\n          {\n            \"node\": \"Default Data Loader\",\n            \"type\": \"ai_textSplitter\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert to File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Qdrant Vector Store\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop Over Items\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"Answer questions\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Answer questions\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Write open\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Closed questions\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop Over Items1\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"Answer and create options\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Embeddings OpenAI\": {\n      \"ai_embedding\": [\n        [\n          {\n            \"node\": \"Qdrant Vector Store\",\n            \"type\": \"ai_embedding\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Embeddings OpenAI1\": {\n      \"ai_embedding\": [\n        [\n          {\n            \"node\": \"Qdrant Vector Store1\",\n            \"type\": \"ai_embedding\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Embeddings OpenAI2\": {\n      \"ai_embedding\": [\n        [\n          {\n            \"node\": \"Qdrant Vector Store2\",\n            \"type\": \"ai_embedding\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Refresh collection\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Doc\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Default Data Loader\": {\n      \"ai_document\": [\n        [\n          {\n            \"node\": \"Qdrant Vector Store\",\n            \"type\": \"ai_document\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Qdrant Vector Store1\": {\n      \"ai_vectorStore\": [\n        [\n          {\n            \"node\": \"Vector Store Retriever\",\n            \"type\": \"ai_vectorStore\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Qdrant Vector Store2\": {\n      \"ai_vectorStore\": [\n        [\n          {\n            \"node\": \"RAG\",\n            \"type\": \"ai_vectorStore\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Vector Store Retriever\": {\n      \"ai_retriever\": [\n        [\n          {\n            \"node\": \"Answer questions\",\n            \"type\": \"ai_retriever\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Item List Output Parser\": {\n      \"ai_outputParser\": [\n        [\n          {\n            \"node\": \"Open questions\",\n            \"type\": \"ai_outputParser\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Gemini Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Open questions\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Item List Output Parser1\": {\n      \"ai_outputParser\": [\n        [\n          {\n            \"node\": \"Closed questions\",\n            \"type\": \"ai_outputParser\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Structured Output Parser\": {\n      \"ai_outputParser\": [\n        [\n          {\n            \"node\": \"Answer and create options\",\n            \"type\": \"ai_outputParser\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Answer and create options\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Write closed\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Gemini Chat Model1\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Answer questions\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Gemini Chat Model2\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Closed questions\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Gemini Chat Model3\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Answer and create options\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Gemini Chat Model4\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"RAG\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Refresh collection\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}