{
  "title": "Personal Shopper Chatbot for WooCommerce with RAG using Google Drive and openAI",
  "url": "https://n8n.io/workflows/2784-personal-shopper-chatbot-for-woocommerce-with-rag-using-google-drive-and-openai/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/?count=20",
  "author": "Davide",
  "publish_date": "Last update a month ago",
  "content": "",
  "workflow_json": "{\"id\":\"fqQcmSdoVqnPeGHj\",\"meta\":{\"instanceId\":\"a4bfc93e975ca233ac45ed7c9227d84cf5a2329310525917adaf3312e10d5462\",\"templateCredsSetupCompleted\":true},\"name\":\"OpenAI Personal Shopper with RAG and WooCommerce\",\"tags\":[],\"nodes\":[{\"id\":\"635901e5-4afd-4c81-a63e-52f1b863a025\",\"name\":\"When chat message received\",\"type\":\"@n8n/n8n-nodes-langchain.chatTrigger\",\"position\":[-200,280],\"webhookId\":\"bd3a878c-50b0-4d92-906f-e768a65c1485\",\"parameters\":{\"options\":{}},\"typeVersion\":1.1},{\"id\":\"d11cd97c-1539-462d-858c-8758cf1a8278\",\"name\":\"Window Buffer Memory\",\"type\":\"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\"position\":[620,580],\"parameters\":{\"sessionKey\":\"={{ $('Edit Fields').item.json.sessionId }}\",\"sessionIdType\":\"customKey\"},\"typeVersion\":1.3},{\"id\":\"02bb43e4-f26e-4906-8049-c49d3fecd817\",\"name\":\"Calculator\",\"type\":\"@n8n/n8n-nodes-langchain.toolCalculator\",\"position\":[760,580],\"parameters\":{},\"typeVersion\":1},{\"id\":\"ad6058dd-b429-4f3c-b68a-7e3d98beec83\",\"name\":\"Edit Fields\",\"type\":\"n8n-nodes-base.set\",\"position\":[20,280],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"7015c229-f9fe-4c77-b2b9-4ac09a3a3cb1\",\"name\":\"sessionId\",\"type\":\"string\",\"value\":\"={{ $json.sessionId }}\"},{\"id\":\"f8fc0044-6a1a-455b-a435-58931a8c4c8e\",\"name\":\"chatInput\",\"type\":\"string\",\"value\":\"={{ $json.chatInput }}\"}]}},\"typeVersion\":3.4},{\"id\":\"43f7ee25-4529-4558-b5ea-c2a722b0bce5\",\"name\":\"OpenAI Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[500,580],\"parameters\":{\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"CDX6QM4gLYanh0P4\",\"name\":\"OpenAi account\"}},\"typeVersion\":1},{\"id\":\"8b5ec20d-8735-4030-8113-717d578928eb\",\"name\":\"RAG\",\"type\":\"@n8n/n8n-nodes-langchain.toolVectorStore\",\"position\":[1000,580],\"parameters\":{\"name\":\"informazioni_negozio\",\"description\":\"Informazioni relative al negozio: orari di apertura, indirizzo, contatti, informazioni generali\"},\"typeVersion\":1},{\"id\":\"0fd0f1d6-41df-43d4-9418-0685afad409a\",\"name\":\"Qdrant Vector Store\",\"type\":\"@n8n/n8n-nodes-langchain.vectorStoreQdrant\",\"position\":[900,780],\"parameters\":{\"options\":{},\"qdrantCollection\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"scarperia\",\"cachedResultName\":\"scarperia\"}},\"credentials\":{\"qdrantApi\":{\"id\":\"iyQ6MQiVaF3VMBmt\",\"name\":\"QdrantApi account\"}},\"typeVersion\":1},{\"id\":\"72084a2e-0e47-4723-a004-585ae8b67ae3\",\"name\":\"Embeddings OpenAI\",\"type\":\"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\"position\":[840,940],\"parameters\":{\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"CDX6QM4gLYanh0P4\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.1},{\"id\":\"30d398a3-2331-4a3d-898d-c184779c7ef3\",\"name\":\"OpenAI Chat Model1\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[1200,800],\"parameters\":{\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"CDX6QM4gLYanh0P4\",\"name\":\"OpenAi account\"}},\"typeVersion\":1},{\"id\":\"e10a8024-51ec-4553-a1fa-dbaa49a4d2c2\",\"name\":\"personal_shopper\",\"type\":\"n8n-nodes-base.wooCommerceTool\",\"position\":[880,580],\"parameters\":{\"options\":{\"sku\":\"={{ $('Information Extractor').item.json.output.SKU }}\",\"search\":\"={{ $('Information Extractor').item.json.output.keyword }}\",\"maxPrice\":\"={{ $('Information Extractor').item.json.output.price_max }}\",\"minPrice\":\"={{ $('Information Extractor').item.json.output.price_min }}\",\"stockStatus\":\"instock\"},\"operation\":\"getAll\"},\"credentials\":{\"wooCommerceApi\":{\"id\":\"d4EQtVORkOCNQZAm\",\"name\":\"WooCommerce (Scarperia)\"}},\"typeVersion\":1},{\"id\":\"f0c53b0d-7173-4ec9-8fb4-f8f45d9ceedc\",\"name\":\"Information Extractor\",\"type\":\"@n8n/n8n-nodes-langchain.informationExtractor\",\"position\":[220,280],\"parameters\":{\"text\":\"={{ $json.chatInput }}\",\"options\":{\"systemPromptTemplate\":\"You are an intelligent assistant for a shoe and accessories store (mainly bags). Your task is to analyze the input text coming from a chat and determine if the user is looking for a product. If the user is looking for a product, you need to extract the following information:\\n1. The keyword (keyword) useful for the search.\\n2. Any minimum or maximum prices specified.\\n3. An SKU (product code) if mentioned.\\n4. The name of the category to search in, if specified.\\n\\nInstructions:\\n1. Identify the intent: Determine if the user is looking for a specific product.\\n2. Extract the information:\\n- If the user is looking for a product, identify:\\n- Set the type \\\"search\\\" to true. Otherwise, set it to false\\n- The keywords.\\n- Any minimum or maximum prices (e.g. \\\"less than 50 euros\\\", \\\"between 30 and 60 euros\\\").\\n- An SKU (e.g. \\\"ABC123 code\\\").\\n- The category name (e.g. \\\"t-shirts\\\", \\\"jeans\\\", \\\"women\\\", \\\"men\\\").\\n3. Output format: Return a JSON object with the given structure\"},\"schemaType\":\"manual\",\"inputSchema\":\"{\\n       \\\"search_intent\\\": true,\\n       \\\"search_params\\\": [\\n         { \\\"type\\\": \\\"search\\\", \\\"value\\\": \\\"ture or false\\\" },\\n         { \\\"type\\\": \\\"keyword\\\", \\\"value\\\": \\\"valore_keyword\\\" },\\n         { \\\"type\\\": \\\"min_price\\\", \\\"value\\\": \\\"valore_min_price\\\" },\\n         { \\\"type\\\": \\\"max_price\\\", \\\"value\\\": \\\"valore_max_price\\\" },\\n         { \\\"type\\\": \\\"sku\\\", \\\"value\\\": \\\"valore_sku\\\" },\\n         { \\\"type\\\": \\\"category\\\", \\\"value\\\": \\\"valore_categoria\\\" }\\n       ]\\n     }\"},\"typeVersion\":1},{\"id\":\"8386e554-e2f1-42c8-881f-a06e8099f718\",\"name\":\"OpenAI Chat Model2\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[200,460],\"parameters\":{\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"CDX6QM4gLYanh0P4\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.1},{\"id\":\"4ff30e15-1bf5-4750-a68a-e72f86a4f32c\",\"name\":\"Google Drive2\",\"type\":\"n8n-nodes-base.googleDrive\",\"position\":[320,-440],\"parameters\":{\"filter\":{\"driveId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"My Drive\",\"cachedResultUrl\":\"https://drive.google.com/drive/my-drive\",\"cachedResultName\":\"My Drive\"},\"folderId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"1lmnqpLFKS-gXmXT92C5VG0P1XlcoeFOb\",\"cachedResultUrl\":\"https://drive.google.com/drive/folders/1lmnqpLFKS-gXmXT92C5VG0P1XlcoeFOb\",\"cachedResultName\":\"Scarperia Salò - RAG\"}},\"options\":{},\"resource\":\"fileFolder\"},\"credentials\":{\"googleDriveOAuth2Api\":{\"id\":\"HEy5EuZkgPZVEa9w\",\"name\":\"Google Drive account\"}},\"typeVersion\":3},{\"id\":\"b4ca79b2-220b-4290-a33a-596250c8fd2d\",\"name\":\"Google Drive1\",\"type\":\"n8n-nodes-base.googleDrive\",\"position\":[520,-440],\"parameters\":{\"fileId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $json.id }}\"},\"options\":{\"googleFileConversion\":{\"conversion\":{\"docsToFormat\":\"text/plain\"}}},\"operation\":\"download\"},\"credentials\":{\"googleDriveOAuth2Api\":{\"id\":\"HEy5EuZkgPZVEa9w\",\"name\":\"Google Drive account\"}},\"typeVersion\":3},{\"id\":\"18f5e068-ad4a-4be7-987c-83ed5791f012\",\"name\":\"Embeddings OpenAI3\",\"type\":\"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\"position\":[680,-260],\"parameters\":{\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"CDX6QM4gLYanh0P4\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.1},{\"id\":\"43693ee0-a2a3-44d3-86de-4156af84e251\",\"name\":\"Default Data Loader2\",\"type\":\"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\",\"position\":[880,-220],\"parameters\":{\"options\":{},\"dataType\":\"binary\"},\"typeVersion\":1},{\"id\":\"f0d351e5-faee-49a4-a43c-985785c3d2c8\",\"name\":\"Token Splitter1\",\"type\":\"@n8n/n8n-nodes-langchain.textSplitterTokenSplitter\",\"position\":[960,-60],\"parameters\":{\"chunkSize\":300,\"chunkOverlap\":30},\"typeVersion\":1},{\"id\":\"ff77338e-4dac-4261-87a1-10a21108f543\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[-200,-440],\"parameters\":{},\"typeVersion\":1},{\"id\":\"72484893-875a-4e8b-83fc-ca137e812050\",\"name\":\"HTTP Request\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[40,-440],\"parameters\":{\"url\":\"https://QDRANTURL/collections/NAME/points/delete\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"{\\n  \\\"filter\\\": {}\\n}\",\"sendBody\":true,\"sendHeaders\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\",\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"}]}},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"qhny6r5ql9wwotpn\",\"name\":\"Qdrant API (Hetzner)\"}},\"typeVersion\":4.2},{\"id\":\"5837e3ac-e3d1-45b6-bd67-8c3d03bf0a1e\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-20,-500],\"parameters\":{\"width\":259.7740863787376,\"height\":234.1528239202657,\"content\":\"Replace the URL and Collection name with your own\"},\"typeVersion\":1},{\"id\":\"79baf424-e647-4a80-a19e-c023ad3b1860\",\"name\":\"Qdrant Vector Store1\",\"type\":\"@n8n/n8n-nodes-langchain.vectorStoreQdrant\",\"position\":[760,-440],\"parameters\":{\"mode\":\"insert\",\"options\":{},\"qdrantCollection\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"scarperia\",\"cachedResultName\":\"scarperia\"}},\"credentials\":{\"qdrantApi\":{\"id\":\"iyQ6MQiVaF3VMBmt\",\"name\":\"QdrantApi account\"}},\"typeVersion\":1},{\"id\":\"17015f50-a3a8-4e62-9816-7e71127c1ea1\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-220,-640],\"parameters\":{\"color\":3,\"width\":1301.621262458471,\"height\":105.6212624584717,\"content\":\"## Step 1 \\nCreate a collectiopn on your Qdrant instance. Then create a basic RAG system with documents uploaded to Google Drive and embedded in the Qdrant vector database\"},\"typeVersion\":1},{\"id\":\"0ddbf6be-fa2d-4412-8e85-fe108cd6e84d\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1020,980.0000000000001],\"parameters\":{\"color\":3,\"width\":1301.621262458471,\"height\":105.6212624584717,\"content\":\"## Step 1 \\nCreate a basic RAG system with documents uploaded to Google Drive and embedded in the Qdrant vector database\"},\"typeVersion\":1},{\"id\":\"3782a22d-b3a7-44ea-ad36-fa4382c9fcfd\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-200,120],\"parameters\":{\"color\":3,\"width\":1301.621262458471,\"height\":105.6212624584717,\"content\":\"## Step 2 \\nThe Information Extractor tries to understand if the request is related to products and if so, it extracts the useful information to filter the products available on WooCommerce by calling the \\\"personal_shopper\\\". If it is a general question, the RAG system is called\"},\"typeVersion\":1},{\"id\":\"d4d1fb16-3f54-4c1a-ab4e-bcf86d897e9d\",\"name\":\"AI Agent\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[580,280],\"parameters\":{\"text\":\"={{ $('When chat message received').item.json.chatInput }}\",\"options\":{\"systemMessage\":\"=You are an intelligent assistant for a clothing store. Your task is to analyze the input text from a chat and determine if the user is looking for a product.\\n\\nBehavior:\\n- If the user is looking for a product the \\\"search\\\" field of the following JSON is set to true and you must pass the following JSON as input to the \\\"personal_shopper\\\" tool to extract:\\n\\n```json\\n{{ JSON.stringify($json.output) }}\\n```\\n\\n- If the user asks questions related to the store such as address or opening hours, you must use the \\\"RAG\\\" tool\"},\"promptType\":\"define\"},\"typeVersion\":1.7}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"47513e11-8e9f-4b7c-b3de-e15cf00a1200\",\"connections\":{\"RAG\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Calculator\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Edit Fields\":{\"main\":[[{\"node\":\"Information Extractor\",\"type\":\"main\",\"index\":0}]]},\"HTTP Request\":{\"main\":[[{\"node\":\"Google Drive2\",\"type\":\"main\",\"index\":0}]]},\"Google Drive1\":{\"main\":[[{\"node\":\"Qdrant Vector Store1\",\"type\":\"main\",\"index\":0}]]},\"Google Drive2\":{\"main\":[[{\"node\":\"Google Drive1\",\"type\":\"main\",\"index\":0}]]},\"Token Splitter1\":{\"ai_textSplitter\":[[{\"node\":\"Default Data Loader2\",\"type\":\"ai_textSplitter\",\"index\":0}]]},\"personal_shopper\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Embeddings OpenAI\":{\"ai_embedding\":[[{\"node\":\"Qdrant Vector Store\",\"type\":\"ai_embedding\",\"index\":0}]]},\"OpenAI Chat Model\":{\"ai_languageModel\":[[{\"node\":\"AI Agent\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Embeddings OpenAI3\":{\"ai_embedding\":[[{\"node\":\"Qdrant Vector Store1\",\"type\":\"ai_embedding\",\"index\":0}]]},\"OpenAI Chat Model1\":{\"ai_languageModel\":[[{\"node\":\"RAG\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"OpenAI Chat Model2\":{\"ai_languageModel\":[[{\"node\":\"Information Extractor\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Qdrant Vector Store\":{\"ai_vectorStore\":[[{\"node\":\"RAG\",\"type\":\"ai_vectorStore\",\"index\":0}]]},\"Default Data Loader2\":{\"ai_document\":[[{\"node\":\"Qdrant Vector Store1\",\"type\":\"ai_document\",\"index\":0}]]},\"Window Buffer Memory\":{\"ai_memory\":[[{\"node\":\"AI Agent\",\"type\":\"ai_memory\",\"index\":0}]]},\"Information Extractor\":{\"main\":[[{\"node\":\"AI Agent\",\"type\":\"main\",\"index\":0}]]},\"When chat message received\":{\"main\":[[{\"node\":\"Edit Fields\",\"type\":\"main\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"HTTP Request\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This workflow combines **OpenAI** , **Retrieval-Augmented Generation (RAG)** , and **WooCommerce** to create an intelligent personal shopping assistant. It handles two scenarios:\n\n  1. **Product Search** : Extracts user intent (keywords, price ranges, SKUs) and fetches matching products from WooCommerce.\n  2. **General Inquiries** : Answers store-related questions (e.g., opening hours, policies) using RAG and documents stored in Google Drive.\n\n\n\n* * *\n\n### **How It Works**\n\n#### **1\\. Chat Interaction & Intent Detection**\n\n  * **Chat Trigger** : \n    * Starts when a user sends a message (_\"When chat message received\"_).\n  * **Information Extractor** : \n    * Uses OpenAI to analyze the message and determine if the user is **searching for a product** or asking a **general question**.\n    * Extracts: \n      * `search` (true/false).\n      * `keyword`, `priceRange`, `SKU`, `category` (if product-related).\n    * Example:\n          \n          {  \n            \"search\": true,  \n            \"keyword\": \"red handbags\",  \n            \"priceRange\": { \"min\": 50, \"max\": 100 },  \n            \"SKU\": \"BAG123\",  \n            \"category\": \"women's accessories\"  \n          }  \n          \n\n\n\n\n#### **2\\. Product Search (WooCommerce Integration)**\n\n  * **AI Agent** : \n    * If `search: true`, routes the request to the `personal_shopper` tool.\n    * **WooCommerce Node** : \n      * Queries the WooCommerce store using extracted parameters (`keyword`, `priceRange`, `SKU`).\n      * Filters products in stock (`stockStatus: \"instock\"`).\n      * Returns matching products (e.g., \"red handbags under €100\").\n\n\n\n#### **3\\. General Inquiries (RAG System)**\n\n  * **RAG Tool** : \n    * If `search: false`, uses the **Qdrant Vector Store** to retrieve store information from documents.\n    * **Google Drive Integration** : \n      * Documents (e.g., store policies, FAQs) are stored in Google Drive.\n      * Downloaded, split into chunks, and embedded into Qdrant for semantic search.\n    * **OpenAI Chat Model** : Generates answers based on retrieved documents (e.g., \"Our store opens at 9 AM\").\n\n\n\n### **Set Up Steps**\n\n#### **1\\. Configure the RAG System**\n\n  * **Google Drive Setup** : \n    * Upload store documents .\n    * Update the **Google Drive2** node with your folder ID.\n  * **Qdrant Vector Database** : \n    * Clean the collection (update **Qdrant Vector Store** node with your URL).\n    * Use **Embeddings OpenAI** to convert documents into vectors.\n\n\n\n#### **2\\. Configure OpenAI & WooCommerce**\n\n  * **OpenAI Credentials** : \n    * Add your API key to all OpenAI nodes (`OpenAI Chat Model`, `Embeddings OpenAI`, etc.).\n  * **WooCommerce Integration** : \n    * Connect your WooCommerce store (credentials in the `personal_shopper` node).\n    * Ensure product data is synced and accessible.\n\n\n\n#### **3\\. Customize the AI Agent**\n\n  * **Intent Detection** : \n    * Modify the **Information Extractor** ’s system prompt to align with your store’s terminology.\n  * **RAG Responses** : \n    * Update the tool description to reflect your store’s documents.\n\n\n\n* * *\n\n### **Notes**\n\nThis template is ideal for e-commerce businesses needing a hybrid assistant for product discovery and customer support.\n\n### **Need help customizing?**\n\n[Contact me](mailto:info@n3w.it) for consulting and support or add me on [Linkedin](https://www.linkedin.com/in/davideboizza/).\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><p>This workflow combines <strong>OpenAI</strong>, <strong>Retrieval-Augmented Generation (RAG)</strong>, and <strong>WooCommerce</strong> to create an intelligent personal shopping assistant. It handles two scenarios:</p>\n<ol>\n<li><strong>Product Search</strong>: Extracts user intent (keywords, price ranges, SKUs) and fetches matching products from WooCommerce.</li>\n<li><strong>General Inquiries</strong>: Answers store-related questions (e.g., opening hours, policies) using RAG and documents stored in Google Drive.</li>\n</ol>\n<hr>\n<h3><strong>How It Works</strong></h3>\n<h4><strong>1. Chat Interaction &amp; Intent Detection</strong></h4>\n<ul>\n<li><strong>Chat Trigger</strong>:\n<ul>\n<li>Starts when a user sends a message (<em>\"When chat message received\"</em>).</li>\n</ul>\n</li>\n<li><strong>Information Extractor</strong>:\n<ul>\n<li>Uses OpenAI to analyze the message and determine if the user is <strong>searching for a product</strong> or asking a <strong>general question</strong>.</li>\n<li>Extracts:\n<ul>\n<li><code>search</code> (true/false).</li>\n<li><code>keyword</code>, <code>priceRange</code>, <code>SKU</code>, <code>category</code> (if product-related).</li>\n</ul>\n</li>\n<li>Example:<pre><code>{  \n  \"search\": true,  \n  \"keyword\": \"red handbags\",  \n  \"priceRange\": { \"min\": 50, \"max\": 100 },  \n  \"SKU\": \"BAG123\",  \n  \"category\": \"women's accessories\"  \n}  \n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h4><strong>2. Product Search (WooCommerce Integration)</strong></h4>\n<ul>\n<li><strong>AI Agent</strong>:\n<ul>\n<li>If <code>search: true</code>, routes the request to the <code>personal_shopper</code> tool.</li>\n<li><strong>WooCommerce Node</strong>:\n<ul>\n<li>Queries the WooCommerce store using extracted parameters (<code>keyword</code>, <code>priceRange</code>, <code>SKU</code>).</li>\n<li>Filters products in stock (<code>stockStatus: \"instock\"</code>).</li>\n<li>Returns matching products (e.g., \"red handbags under €100\").</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4><strong>3. General Inquiries (RAG System)</strong></h4>\n<ul>\n<li><strong>RAG Tool</strong>:\n<ul>\n<li>If <code>search: false</code>, uses the <strong>Qdrant Vector Store</strong> to retrieve store information from documents.</li>\n<li><strong>Google Drive Integration</strong>:\n<ul>\n<li>Documents (e.g., store policies, FAQs) are stored in Google Drive.</li>\n<li>Downloaded, split into chunks, and embedded into Qdrant for semantic search.</li>\n</ul>\n</li>\n<li><strong>OpenAI Chat Model</strong>: Generates answers based on retrieved documents (e.g., \"Our store opens at 9 AM\").</li>\n</ul>\n</li>\n</ul>\n<h3><strong>Set Up Steps</strong></h3>\n<h4><strong>1. Configure the RAG System</strong></h4>\n<ul>\n<li><strong>Google Drive Setup</strong>:\n<ul>\n<li>Upload store documents .</li>\n<li>Update the <strong>Google Drive2</strong> node with your folder ID.</li>\n</ul>\n</li>\n<li><strong>Qdrant Vector Database</strong>:\n<ul>\n<li>Clean the collection (update <strong>Qdrant Vector Store</strong> node with your URL).</li>\n<li>Use <strong>Embeddings OpenAI</strong> to convert documents into vectors.</li>\n</ul>\n</li>\n</ul>\n<h4><strong>2. Configure OpenAI &amp; WooCommerce</strong></h4>\n<ul>\n<li><strong>OpenAI Credentials</strong>:\n<ul>\n<li>Add your API key to all OpenAI nodes (<code>OpenAI Chat Model</code>, <code>Embeddings OpenAI</code>, etc.).</li>\n</ul>\n</li>\n<li><strong>WooCommerce Integration</strong>:\n<ul>\n<li>Connect your WooCommerce store (credentials in the <code>personal_shopper</code> node).</li>\n<li>Ensure product data is synced and accessible.</li>\n</ul>\n</li>\n</ul>\n<h4><strong>3. Customize the AI Agent</strong></h4>\n<ul>\n<li><strong>Intent Detection</strong>:\n<ul>\n<li>Modify the <strong>Information Extractor</strong>’s system prompt to align with your store’s terminology.</li>\n</ul>\n</li>\n<li><strong>RAG Responses</strong>:\n<ul>\n<li>Update the tool description to reflect your store’s documents.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3><strong>Notes</strong></h3>\n<p>This template is ideal for e-commerce businesses needing a hybrid assistant for product discovery and customer support.</p>\n<h3><strong>Need help customizing?</strong></h3>\n<p><a href=\"mailto:info@n3w.it\" rel=\"ugc nofollow\">Contact me</a> for consulting and support or add me on <a href=\"https://www.linkedin.com/in/davideboizza/\" rel=\"ugc nofollow\" target=\"_blank\">Linkedin</a>.</p>\n</div><!--]-->",
  "readme_zh": "该工作流整合了**OpenAI**、**检索增强生成（RAG）**和**WooCommerce**，打造出一款智能个人购物助手。它能处理两种场景：\n\n1. **商品搜索**：解析用户意图（关键词、价格区间、SKU编码），从WooCommerce调取匹配商品\n2. **常规咨询**：基于Google Drive存储的文档，通过RAG技术解答店铺相关问题（如营业时间、退换政策）\n\n* * *\n\n### **运作原理**\n\n#### **1. 对话交互与意图识别**\n\n* **对话触发**：\n  * 用户发送消息时启动（\"当收到聊天消息\"时触发）\n* **信息提取器**：\n  * 调用OpenAI分析消息，判断用户意图是**商品搜索**还是**常规咨询**\n  * 提取字段包括：\n    * `search`（布尔值）\n    * 若为商品相关：`keyword`（关键词）、`priceRange`（价格区间）、`SKU`（商品编码）、`category`（商品类目）\n  * 示例输出：\n    ```json\n    {  \n      \"search\": true,  \n      \"keyword\": \"红色手提包\",  \n      \"priceRange\": { \"min\": 50, \"max\": 100 },  \n      \"SKU\": \"BAG123\",  \n      \"category\": \"女士配饰\"  \n    }\n    ```\n\n#### **2. 商品搜索（WooCommerce对接）**\n\n* **AI代理**：\n  * 若`search: true`，将请求路由至`personal_shopper`工具\n* **WooCommerce节点**：\n  * 根据提取参数（关键词/价格区间/SKU）查询店铺\n  * 筛选库存状态为\"有货\"的商品（`stockStatus: \"instock\"`）\n  * 返回匹配商品（如\"100欧元以下的红色手提包\"）\n\n#### **3. 常规咨询（RAG系统）**\n\n* **RAG工具**：\n  * 若`search: false`，通过**Qdrant向量数据库**检索店铺文档信息\n* **Google Drive对接**：\n  * 政策文件/FAQ等文档存储于Google Drive\n  * 文档经下载分块后，通过嵌入模型存入Qdrant实现语义搜索\n* **OpenAI聊天模型**：\n  * 基于检索内容生成回答（如\"本店上午9点营业\"）\n\n* * *\n\n### **配置步骤**\n\n#### **1. RAG系统配置**\n\n* **Google Drive设置**：\n  * 上传店铺文档\n  * 在**Google Drive2**节点更新您的文件夹ID\n* **Qdrant向量数据库**：\n  * 清理集合（在**Qdrant Vector Store**节点配置数据库URL）\n  * 使用**Embeddings OpenAI**节点将文档转化为向量\n\n#### **2. OpenAI与WooCommerce配置**\n\n* **OpenAI凭证**：\n  * 在所有OpenAI节点（`OpenAI Chat Model`、`Embeddings OpenAI`等）添加API密钥\n* **WooCommerce对接**：\n  * 在`personal_shopper`节点配置店铺凭证\n  * 确保商品数据已完成同步\n\n#### **3. AI代理定制**\n\n* **意图识别优化**：\n  * 修改**信息提取器**的系统提示词，匹配店铺专业术语\n* **RAG响应优化**：\n  * 更新工具描述以反映当前文档内容\n\n* * *\n\n### **注意事项**\n\n本模板特别适合需要同时处理商品导购与客服咨询的电商场景。\n\n### **需要定制服务？**\n\n欢迎通过[邮件](mailto:info@n3w.it)咨询，或通过[Linkedin](https://www.linkedin.com/in/davideboizza/)联系。",
  "title_zh": "基于Google Drive与openAI的WooCommerce个人购物助手聊天机器人（集成RAG技术）",
  "publish_date_absolute": "",
  "publish_date_zh": "上次更新于一个月前",
  "workflow_json_zh": "{\n  \"id\": \"fqQcmSdoVqnPeGHj\",\n  \"meta\": {\n    \"instanceId\": \"a4bfc93e975ca233ac45ed7c9227d84cf5a2329310525917adaf3312e10d5462\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"OpenAI Personal Shopper with RAG and WooCommerce\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"635901e5-4afd-4c81-a63e-52f1b863a025\",\n      \"name\": \"When chat message received\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",\n      \"position\": [\n        -200,\n        280\n      ],\n      \"webhookId\": \"bd3a878c-50b0-4d92-906f-e768a65c1485\",\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"d11cd97c-1539-462d-858c-8758cf1a8278\",\n      \"name\": \"Window Buffer Memory\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\n      \"position\": [\n        620,\n        580\n      ],\n      \"parameters\": {\n        \"sessionKey\": \"={{ $('Edit Fields').item.json.sessionId }}\",\n        \"sessionIdType\": \"customKey\"\n      },\n      \"typeVersion\": 1.3\n    },\n    {\n      \"id\": \"02bb43e4-f26e-4906-8049-c49d3fecd817\",\n      \"name\": \"Calculator\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolCalculator\",\n      \"position\": [\n        760,\n        580\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ad6058dd-b429-4f3c-b68a-7e3d98beec83\",\n      \"name\": \"Edit Fields\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        20,\n        280\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"7015c229-f9fe-4c77-b2b9-4ac09a3a3cb1\",\n              \"name\": \"sessionId\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.sessionId }}\"\n            },\n            {\n              \"id\": \"f8fc0044-6a1a-455b-a435-58931a8c4c8e\",\n              \"name\": \"chatInput\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.chatInput }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"43f7ee25-4529-4558-b5ea-c2a722b0bce5\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        500,\n        580\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"CDX6QM4gLYanh0P4\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8b5ec20d-8735-4030-8113-717d578928eb\",\n      \"name\": \"RAG\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolVectorStore\",\n      \"position\": [\n        1000,\n        580\n      ],\n      \"parameters\": {\n        \"name\": \"informazioni_negozio\",\n        \"description\": \"Informazioni relative al negozio: orari di apertura, indirizzo, contatti, informazioni generali\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0fd0f1d6-41df-43d4-9418-0685afad409a\",\n      \"name\": \"Qdrant Vector Store\",\n      \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreQdrant\",\n      \"position\": [\n        900,\n        780\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"qdrantCollection\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"scarperia\",\n          \"cachedResultName\": \"scarperia\"\n        }\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"iyQ6MQiVaF3VMBmt\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"72084a2e-0e47-4723-a004-585ae8b67ae3\",\n      \"name\": \"Embeddings OpenAI\",\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\n      \"position\": [\n        840,\n        940\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"CDX6QM4gLYanh0P4\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"30d398a3-2331-4a3d-898d-c184779c7ef3\",\n      \"name\": \"OpenAI Chat Model1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        1200,\n        800\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"CDX6QM4gLYanh0P4\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e10a8024-51ec-4553-a1fa-dbaa49a4d2c2\",\n      \"name\": \"personal_shopper\",\n      \"type\": \"n8n-nodes-base.wooCommerceTool\",\n      \"position\": [\n        880,\n        580\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"sku\": \"={{ $('Information Extractor').item.json.output.SKU }}\",\n          \"search\": \"={{ $('Information Extractor').item.json.output.keyword }}\",\n          \"maxPrice\": \"={{ $('Information Extractor').item.json.output.price_max }}\",\n          \"minPrice\": \"={{ $('Information Extractor').item.json.output.price_min }}\",\n          \"stockStatus\": \"instock\"\n        },\n        \"operation\": \"getAll\"\n      },\n      \"credentials\": {\n        \"wooCommerceApi\": {\n          \"id\": \"d4EQtVORkOCNQZAm\",\n          \"name\": \"WooCommerce (Scarperia)\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f0c53b0d-7173-4ec9-8fb4-f8f45d9ceedc\",\n      \"name\": \"Information Extractor\",\n      \"type\": \"@n8n/n8n-nodes-langchain.informationExtractor\",\n      \"position\": [\n        220,\n        280\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.chatInput }}\",\n        \"options\": {\n          \"systemPromptTemplate\": \"You are an intelligent assistant for a shoe and accessories store (mainly bags). Your task is to analyze the input text coming from a chat and determine if the user is looking for a product. If the user is looking for a product, you need to extract the following information:\\n1. The keyword (keyword) useful for the search.\\n2. Any minimum or maximum prices specified.\\n3. An SKU (product code) if mentioned.\\n4. The name of the category to search in, if specified.\\n\\nInstructions:\\n1. Identify the intent: Determine if the user is looking for a specific product.\\n2. Extract the information:\\n- If the user is looking for a product, identify:\\n- Set the type \\\"search\\\" to true. Otherwise, set it to false\\n- The keywords.\\n- Any minimum or maximum prices (e.g. \\\"less than 50 euros\\\", \\\"between 30 and 60 euros\\\").\\n- An SKU (e.g. \\\"ABC123 code\\\").\\n- The category name (e.g. \\\"t-shirts\\\", \\\"jeans\\\", \\\"women\\\", \\\"men\\\").\\n3. Output format: Return a JSON object with the given structure\"\n        },\n        \"schemaType\": \"manual\",\n        \"inputSchema\": \"{\\n       \\\"search_intent\\\": true,\\n       \\\"search_params\\\": [\\n         { \\\"type\\\": \\\"search\\\", \\\"value\\\": \\\"ture or false\\\" },\\n         { \\\"type\\\": \\\"keyword\\\", \\\"value\\\": \\\"valore_keyword\\\" },\\n         { \\\"type\\\": \\\"min_price\\\", \\\"value\\\": \\\"valore_min_price\\\" },\\n         { \\\"type\\\": \\\"max_price\\\", \\\"value\\\": \\\"valore_max_price\\\" },\\n         { \\\"type\\\": \\\"sku\\\", \\\"value\\\": \\\"valore_sku\\\" },\\n         { \\\"type\\\": \\\"category\\\", \\\"value\\\": \\\"valore_categoria\\\" }\\n       ]\\n     }\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8386e554-e2f1-42c8-881f-a06e8099f718\",\n      \"name\": \"OpenAI Chat Model2\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        200,\n        460\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"CDX6QM4gLYanh0P4\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"4ff30e15-1bf5-4750-a68a-e72f86a4f32c\",\n      \"name\": \"Google Drive2\",\n      \"type\": \"n8n-nodes-base.googleDrive\",\n      \"position\": [\n        320,\n        -440\n      ],\n      \"parameters\": {\n        \"filter\": {\n          \"driveId\": {\n            \"__rl\": true,\n            \"mode\": \"list\",\n            \"value\": \"My Drive\",\n            \"cachedResultUrl\": \"https://drive.google.com/drive/my-drive\",\n            \"cachedResultName\": \"My Drive\"\n          },\n          \"folderId\": {\n            \"__rl\": true,\n            \"mode\": \"list\",\n            \"value\": \"1lmnqpLFKS-gXmXT92C5VG0P1XlcoeFOb\",\n            \"cachedResultUrl\": \"https://drive.google.com/drive/folders/1lmnqpLFKS-gXmXT92C5VG0P1XlcoeFOb\",\n            \"cachedResultName\": \"Scarperia Salò - RAG\"\n          }\n        },\n        \"options\": {},\n        \"resource\": \"fileFolder\"\n      },\n      \"credentials\": {\n        \"googleDriveOAuth2Api\": {\n          \"id\": \"HEy5EuZkgPZVEa9w\",\n          \"name\": \"Google Drive account\"\n        }\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"b4ca79b2-220b-4290-a33a-596250c8fd2d\",\n      \"name\": \"Google Drive1\",\n      \"type\": \"n8n-nodes-base.googleDrive\",\n      \"position\": [\n        520,\n        -440\n      ],\n      \"parameters\": {\n        \"fileId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $json.id }}\"\n        },\n        \"options\": {\n          \"googleFileConversion\": {\n            \"conversion\": {\n              \"docsToFormat\": \"text/plain\"\n            }\n          }\n        },\n        \"operation\": \"download\"\n      },\n      \"credentials\": {\n        \"googleDriveOAuth2Api\": {\n          \"id\": \"HEy5EuZkgPZVEa9w\",\n          \"name\": \"Google Drive account\"\n        }\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"18f5e068-ad4a-4be7-987c-83ed5791f012\",\n      \"name\": \"Embeddings OpenAI3\",\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\n      \"position\": [\n        680,\n        -260\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"CDX6QM4gLYanh0P4\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"43693ee0-a2a3-44d3-86de-4156af84e251\",\n      \"name\": \"Default Data Loader2\",\n      \"type\": \"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\",\n      \"position\": [\n        880,\n        -220\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"dataType\": \"binary\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f0d351e5-faee-49a4-a43c-985785c3d2c8\",\n      \"name\": \"Token Splitter1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.textSplitterTokenSplitter\",\n      \"position\": [\n        960,\n        -60\n      ],\n      \"parameters\": {\n        \"chunkSize\": 300,\n        \"chunkOverlap\": 30\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ff77338e-4dac-4261-87a1-10a21108f543\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -200,\n        -440\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"72484893-875a-4e8b-83fc-ca137e812050\",\n      \"name\": \"HTTP Request\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        40,\n        -440\n      ],\n      \"parameters\": {\n        \"url\": \"https://QDRANTURL/collections/NAME/points/delete\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"{\\n  \\\"filter\\\": {}\\n}\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"qhny6r5ql9wwotpn\",\n          \"name\": \"Qdrant API (Hetzner)\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"5837e3ac-e3d1-45b6-bd67-8c3d03bf0a1e\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -20,\n        -500\n      ],\n      \"parameters\": {\n        \"width\": 259.7740863787376,\n        \"height\": 234.1528239202657,\n        \"content\": \"将URL和集合名称替换为您自己的\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"79baf424-e647-4a80-a19e-c023ad3b1860\",\n      \"name\": \"Qdrant Vector Store1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreQdrant\",\n      \"position\": [\n        760,\n        -440\n      ],\n      \"parameters\": {\n        \"mode\": \"insert\",\n        \"options\": {},\n        \"qdrantCollection\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"scarperia\",\n          \"cachedResultName\": \"scarperia\"\n        }\n      },\n      \"credentials\": {\n        \"qdrantApi\": {\n          \"id\": \"iyQ6MQiVaF3VMBmt\",\n          \"name\": \"QdrantApi account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"17015f50-a3a8-4e62-9816-7e71127c1ea1\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -220,\n        -640\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 1301.621262458471,\n        \"height\": 105.6212624584717,\n        \"content\": \"## 第一步  \\n在您的Qdrant实例上创建一个集合。然后构建一个基础的RAG（检索增强生成）系统，将上传至Google Drive的文档嵌入到Qdrant向量数据库中。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0ddbf6be-fa2d-4412-8e85-fe108cd6e84d\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1020,\n        980.0000000000001\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 1301.621262458471,\n        \"height\": 105.6212624584717,\n        \"content\": \"## 第一步  \\n构建一个基础的RAG（检索增强生成）系统，将上传至Google Drive的文档嵌入到Qdrant向量数据库中\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3782a22d-b3a7-44ea-ad36-fa4382c9fcfd\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -200,\n        120\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 1301.621262458471,\n        \"height\": 105.6212624584717,\n        \"content\": \"## 第二步  \\n信息提取器会判断请求是否与产品相关。如果是，则通过调用“personal_shopper”提取有效信息来筛选WooCommerce上的可用产品；若为一般性问题，则调用RAG系统进行处理。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d4d1fb16-3f54-4c1a-ab4e-bcf86d897e9d\",\n      \"name\": \"AI Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        580,\n        280\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $('When chat message received').item.json.chatInput }}\",\n        \"options\": {\n          \"systemMessage\": \"=You are an intelligent assistant for a clothing store. Your task is to analyze the input text from a chat and determine if the user is looking for a product.\\n\\nBehavior:\\n- If the user is looking for a product the \\\"search\\\" field of the following JSON is set to true and you must pass the following JSON as input to the \\\"personal_shopper\\\" tool to extract:\\n\\n```json\\n{{ JSON.stringify($json.output) }}\\n```\\n\\n- If the user asks questions related to the store such as address or opening hours, you must use the \\\"RAG\\\" tool\"\n        },\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.7\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"47513e11-8e9f-4b7c-b3de-e15cf00a1200\",\n  \"connections\": {\n    \"RAG\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Calculator\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Edit Fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Information Extractor\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"HTTP Request\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Google Drive2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Drive1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Qdrant Vector Store1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Drive2\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Google Drive1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Token Splitter1\": {\n      \"ai_textSplitter\": [\n        [\n          {\n            \"node\": \"Default Data Loader2\",\n            \"type\": \"ai_textSplitter\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"personal_shopper\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Embeddings OpenAI\": {\n      \"ai_embedding\": [\n        [\n          {\n            \"node\": \"Qdrant Vector Store\",\n            \"type\": \"ai_embedding\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Embeddings OpenAI3\": {\n      \"ai_embedding\": [\n        [\n          {\n            \"node\": \"Qdrant Vector Store1\",\n            \"type\": \"ai_embedding\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model1\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"RAG\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model2\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Information Extractor\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Qdrant Vector Store\": {\n      \"ai_vectorStore\": [\n        [\n          {\n            \"node\": \"RAG\",\n            \"type\": \"ai_vectorStore\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Default Data Loader2\": {\n      \"ai_document\": [\n        [\n          {\n            \"node\": \"Qdrant Vector Store1\",\n            \"type\": \"ai_document\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Window Buffer Memory\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Information Extractor\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When chat message received\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Edit Fields\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"HTTP Request\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}