{
  "title": "LINE Chatbot with Google Sheets Memory and Gemini AI",
  "url": "https://n8n.io/workflows/3600-line-chatbot-with-google-sheets-memory-and-gemini-ai/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/",
  "author": "Jakkrapat Ampring",
  "publish_date": "Last update 7 days ago",
  "content": "",
  "workflow_json": "{\"id\":\"[CENSORED]\",\"meta\":{\"instanceId\":\"[CENSORED]\",\"templateCredsSetupCompleted\":true},\"name\":\"(G) LineChatBot + Google Sheets (as a memory)\",\"tags\":[{\"id\":\"[CENSORED]\",\"name\":\"Guitar\",\"createdAt\":\"2025-04-18T08:59:48.308Z\",\"updatedAt\":\"2025-04-18T08:59:48.308Z\"}],\"nodes\":[{\"id\":\"[CENSORED]\",\"name\":\"Webhook\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[560,-500],\"webhookId\":\"[CENSORED]\",\"parameters\":{\"path\":\"guitarpa\",\"options\":{},\"httpMethod\":\"POST\"},\"typeVersion\":2},{\"id\":\"[CENSORED]\",\"name\":\"AI Agent\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[460,-220],\"parameters\":{\"text\":\"={{ $json.Prompt }}\",\"options\":{\"systemMessage\":\"=You are a helpful assistant. Your name is \\\"ลลิตา\\\". You will help me in everything I need. You will answer based on user language. You are an AI Agent operating in the Thailand time zone (Asia/Bangkok, UTC+7). Today is {{ $now }}.\"},\"promptType\":\"define\",\"hasOutputParser\":true},\"typeVersion\":1.8},{\"id\":\"[CENSORED]\",\"name\":\"Google Gemini Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\"position\":[460,-20],\"parameters\":{\"options\":{},\"modelName\":\"models/gemini-2.0-flash-001\"},\"credentials\":{\"googlePalmApi\":{\"id\":\"[CENSORED]\",\"name\":\"Guitar's Gemini ([CENSORED_EMAIL])\"}},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Edit Fields\",\"type\":\"n8n-nodes-base.set\",\"position\":[780,-500],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"[CENSORED]\",\"name\":\"body.events[0].message.text\",\"type\":\"string\",\"value\":\"={{ $('Webhook').item.json.body.events[0].message.text }}\"},{\"id\":\"[CENSORED]\",\"name\":\"body.events[0].replyToken\",\"type\":\"string\",\"value\":\"={{ $('Webhook').item.json.body.events[0].replyToken }}\"},{\"id\":\"[CENSORED]\",\"name\":\"body.events[0].source.userId\",\"type\":\"string\",\"value\":\"={{ $json.body.events[0].source.userId }}\"}]}},\"typeVersion\":3.4},{\"id\":\"[CENSORED]\",\"name\":\"HTTP Request\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1276,-220],\"parameters\":{\"url\":\"https://api.line.me/v2/bot/message/reply\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={\\n    \\\"replyToken\\\": \\\"{{ $('Edit Fields').item.json.body.events[0].replyToken }}\\\",\\n    \\\"messages\\\": [\\n        {\\n            \\\"type\\\": \\\"text\\\",\\n            \\\"text\\\": \\\"{{ $('AI Agent').item.json.output.replaceAll('\\\\t', ' ').replaceAll('\\\\\\\"', '\\\\\\\\\\\\\\\"').replaceAll('\\\\n', '\\\\\\\\n').trim() || 'No response available.' }}\\\"\\n        }\\n    ]\\n}\",\"sendBody\":true,\"sendHeaders\":true,\"specifyBody\":\"json\",\"headerParameters\":{\"parameters\":[{\"name\":\"Authorization\",\"value\":\"Bearer [CENSORED]\"},{\"name\":\"Content-Type\",\"value\":\"application/json\"}]}},\"typeVersion\":4.2},{\"id\":\"[CENSORED]\",\"name\":\"Get History\",\"type\":\"n8n-nodes-base.googleSheets\",\"position\":[1000,-500],\"parameters\":{\"options\":{\"outputFormatting\":{\"values\":{\"date\":\"FORMATTED_STRING\",\"general\":\"UNFORMATTED_VALUE\"}},\"returnFirstMatch\":true,\"dataLocationOnSheet\":{\"values\":{\"rangeDefinition\":\"detectAutomatically\"}}},\"filtersUI\":{\"values\":[{\"lookupValue\":\"={{ $('Webhook').item.json.body.events[0].source.userId }}\",\"lookupColumn\":\"UserID \"}]},\"sheetName\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gid=0\",\"cachedResultUrl\":\"[CENSORED]\",\"cachedResultName\":\"Sheet1\"},\"documentId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"[CENSORED]\"}},\"credentials\":{\"googleSheetsOAuth2Api\":{\"id\":\"[CENSORED]\",\"name\":\"[Guitar] Google Sheets ([CENSORED_EMAIL])\"}},\"notesInFlow\":false,\"typeVersion\":4.5,\"alwaysOutputData\":true},{\"id\":\"[CENSORED]\",\"name\":\"Prepare Prompt\",\"type\":\"n8n-nodes-base.set\",\"position\":[1220,-500],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"[CENSORED]\",\"name\":\"Prompt\",\"type\":\"string\",\"value\":\"={{\\n  \\\"คุณคือลลิตา แชทบอทภาษาไทยที่สุภาพและเป็นมิตร ตอบตามบริบทของการสนทนา:\\\\n\\\" +\\n\\n  ($('Get History').item.json.History_Archive_1 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_1) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History_Archive_2 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_2) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History_Archive_3 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_3) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History_Archive_4 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_4) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History || \\\"\\\") +\\n  (($('Get History').item.json.History) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  \\\"ผู้ใช้: \\\" + $('Edit Fields').item.json.body.events[0].message.text + \\\"\\\\nลลิตา: \\\"\\n}}\\n\"}]}},\"typeVersion\":3.4},{\"id\":\"[CENSORED]\",\"name\":\"Save History\",\"type\":\"n8n-nodes-base.googleSheets\",\"position\":[1056,-220],\"parameters\":{\"columns\":{\"value\":{\"History\":\"={{ $('Split History').item.json.historyToSave }}\",\"UserID \":\"={{ $('Edit Fields').item.json.body.events[0].source.userId }}\",\"LastUpdated\":\"={{ new Date().toISOString() }}\",\"History_Archive_1\":\"={{ $('Split History').item.json.historyArchive1 }}\",\"History_Archive_2\":\"={{ $('Split History').item.json.historyArchive2 }}\",\"History_Archive_3\":\"={{ $('Split History').item.json.historyArchive3 }}\",\"History_Archive_4\":\"={{ $('Split History').item.json.historyArchive4 }}\"},\"schema\":[{\"id\":\"UserID \",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"UserID \",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"History\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"History\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"LastUpdated\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"LastUpdated\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"History_Archive_1\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"History_Archive_1\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"History_Archive_2\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"History_Archive_2\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"History_Archive_3\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"History_Archive_3\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"History_Archive_4\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"History_Archive_4\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"row_number\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":true,\"required\":false,\"displayName\":\"row_number\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[\"UserID \"],\"attemptToConvertTypes\":false,\"convertFieldsToString\":false},\"options\":{},\"operation\":\"appendOrUpdate\",\"sheetName\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gid=0\",\"cachedResultUrl\":\"[CENSORED]\",\"cachedResultName\":\"Sheet1\"},\"documentId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"[CENSORED]\"}},\"credentials\":{\"googleSheetsOAuth2Api\":{\"id\":\"[CENSORED]\",\"name\":\"[Guitar] Google Sheets ([CENSORED_EMAIL])\"}},\"typeVersion\":4.5},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[460,-560],\"parameters\":{\"content\":\"### Connect to Line Official Account's API\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[740,-560],\"parameters\":{\"width\":180,\"content\":\"Prepare the data\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[960,-560],\"parameters\":{\"width\":180,\"content\":\"Retrieve chat history\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1180,-560],\"parameters\":{\"width\":180,\"content\":\"Give our AI previous chat history\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[460,-280],\"parameters\":{\"content\":\"Get input with this command.   \\\"{{ $json.Prompt }}\\\"\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[780,-280],\"parameters\":{\"width\":180,\"content\":\"Split history into small chunks (data cleaning)\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Split History\",\"type\":\"n8n-nodes-base.code\",\"position\":[840,-220],\"parameters\":{\"jsCode\":\"// Get the current history, new message, and response\\nlet history = $('Get History').item.json.History || '';\\nlet message = $('Edit Fields').item.json.body.events[0].message.text;\\nlet response = $json.output;\\nlet newExchange = `ผู้ใช้: ${message}\\\\nลลิตา: ${response}`;\\nlet updatedHistory = history + (history ? '\\\\n' : '') + newExchange;\\n\\n// Threshold: 70% of Google Sheets cell limit (50,000 characters * 0.7 = 35,000)\\nconst threshold = 35000;\\nlet historyToSave = updatedHistory;\\nlet archive1 = $('Get History').item.json.History_Archive_1 || '';\\nlet archive2 = $('Get History').item.json.History_Archive_2 || '';\\nlet archive3 = $('Get History').item.json.History_Archive_3 || '';\\nlet archive4 = $('Get History').item.json.History_Archive_4 || '';\\n\\n// If history exceeds threshold, split it\\nif (updatedHistory.length > threshold) {\\n  // Keep the last 17,500 characters in History (half of threshold for balance)\\n  const keepLength = 17500;\\n  const archiveChunk = updatedHistory.substring(0, updatedHistory.length - keepLength);\\n  historyToSave = updatedHistory.substring(updatedHistory.length - keepLength);\\n\\n  // Distribute to archive cells, ensuring none exceed 35,000 characters\\n  if (archive1.length < threshold) {\\n    archive1 = (archive1 ? archive1 + '\\\\n' : '') + archiveChunk;\\n    if (archive1.length > threshold) {\\n      const excess = archive1.substring(threshold);\\n      archive1 = archive1.substring(0, threshold);\\n      if (archive2.length < threshold) {\\n        archive2 = (archive2 ? archive2 + '\\\\n' : '') + excess;\\n      }\\n    }\\n  }\\n  if (archive2.length < threshold && archive1.length >= threshold) {\\n    archive2 = (archive2 ? archive2 + '\\\\n' : '') + archiveChunk;\\n    if (archive2.length > threshold) {\\n      const excess = archive2.substring(threshold);\\n      archive2 = archive2.substring(0, threshold);\\n      if (archive3.length < threshold) {\\n        archive3 = (archive3 ? archive3 + '\\\\n' : '') + excess;\\n      }\\n    }\\n  }\\n  if (archive3.length < threshold && archive2.length >= threshold) {\\n    archive3 = (archive3 ? archive3 + '\\\\n' : '') + archiveChunk;\\n    if (archive3.length > threshold) {\\n      const excess = archive3.substring(threshold);\\n      archive3 = archive3.substring(0, threshold);\\n      if (archive4.length < threshold) {\\n        archive4 = (archive4 ? archive4 + '\\\\n' : '') + excess;\\n      }\\n    }\\n  }\\n  if (archive4.length < threshold && archive3.length >= threshold) {\\n    archive4 = (archive4 ? archive4 + '\\\\n' : '') + archiveChunk;\\n    if (archive4.length > threshold) {\\n      archive4 = archive4.substring(0, threshold);\\n    }\\n  }\\n}\\n\\n// Return the values to update\\nreturn [\\n  {\\n    json: {\\n      historyToSave: historyToSave,\\n      historyArchive1: archive1,\\n      historyArchive2: archive2,\\n      historyArchive3: archive3,\\n      historyArchive4: archive4,\\n      lastUpdated: new Date().toISOString()\\n    }\\n  }\\n];\"},\"typeVersion\":2},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note6\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1000,-280],\"parameters\":{\"width\":180,\"content\":\"Save to Google Sheets\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note7\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1220,-280],\"parameters\":{\"width\":180,\"content\":\"Send it back to Line\"},\"typeVersion\":1}],\"active\":true,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"[CENSORED]\",\"connections\":{\"Webhook\":{\"main\":[[{\"node\":\"Edit Fields\",\"type\":\"main\",\"index\":0}]]},\"AI Agent\":{\"main\":[[{\"node\":\"Split History\",\"type\":\"main\",\"index\":0}]]},\"Edit Fields\":{\"main\":[[{\"node\":\"Get History\",\"type\":\"main\",\"index\":0}]]},\"Get History\":{\"main\":[[{\"node\":\"Prepare Prompt\",\"type\":\"main\",\"index\":0}]]},\"Save History\":{\"main\":[[{\"node\":\"HTTP Request\",\"type\":\"main\",\"index\":0}]]},\"Split History\":{\"main\":[[{\"node\":\"Save History\",\"type\":\"main\",\"index\":0}]]},\"Prepare Prompt\":{\"main\":[[{\"node\":\"AI Agent\",\"type\":\"main\",\"index\":0}]]},\"Google Gemini Chat Model\":{\"ai_languageModel\":[[{\"node\":\"AI Agent\",\"type\":\"ai_languageModel\",\"index\":0}]]}}}",
  "readme": "### Main Use Case\n\nThis workflow enables automated, AI-assisted replies to users messaging a LINE Official Account, while storing and referencing chat history from Google Sheets to maintain context. Ideal for businesses or support teams that want to provide smart, personalized customer interactions using AI with memory.\n\n### How It Works (Step-by-Step)\n\n  1. Connect to LINE Official Account's API\n\n\n  * A Webhook listens for incoming messages from users on LINE.\n  * When a message is received, it triggers the workflow.\n\n\n  1. Prepare the Data\n\n\n  * An Edit Fields module structures incoming data (e.g. extracts user ID, message content).\n  * This ensures data is clean and usable downstream.\n\n\n  1. Retrieve Chat History\n\n\n  * The user’s previous conversations are fetched from a Google Sheet.\n  * This ensures the AI has memory and can continue conversations contextually.\n\n\n  1. Prepare Prompt\n\n\n  * The retrieved chat history is combined with the new message to form a complete prompt for the AI.\n  * Example format: “User previously said X. Now they said Y. How should we respond?”\n\n\n  1. AI Agent: Google Gemini\n\n\n  * The formatted prompt is passed to an AI Agent (Google Gemini Chat Model).\n  * The AI generates a response based on the message + history.\n  * Tools used: Chat ModeMemory, ToolOutputParser for accurate replies.\n\n\n  1. Split & Clean History\n\n\n  * The conversation history is split into smaller chunks for cleaning and storage.\n  * This ensures the Google Sheet remains readable and manageable over time.\n\n\n  1. Save Chat History\n\n\n  * The cleaned new message and AI reply are saved to Google Sheets.\n  * This updates the chat history for future context.\n\n\n  1. Send Reply to LINE\n\n\n  * The AI-generated reply is sent back to the user via a POST HTTP Request to the LINE Messaging API.\n\n\n\n### How to Set Up\n\nPrerequisites:\n\n  * LINE Official Account\n  * Google Sheet to store chat history\n  * Google Gemini API or AI agent with context memory\n  * Automation platform (e.g., n8n, as this seems visually similar)\n\n\n\n### Step-by-Step:\n\n  1. Create a Webhook on LINE:\n\n\n  * Set the webhook URL to your automation service.\n  * Enable webhook events.\n\n\n  1. Design Your Google Sheet:\n\n\n  * Create a sheet with columns: User ID, Timestamp, Message, AI Reply.\n\n\n  1. Set Up Modules in Automation Platform:\n\n\n  * Webhook: receives user messages.\n  * Edit Fields: extract user ID and message.\n  * Google Sheets Read: fetch message history.\n  * Prompt Composer: format prompt using past history + new message.\n  * AI Agent: connect to Google Gemini for smart replies.\n  * Split & Clean: clean and chunk history if needed.\n  * Google Sheets Write: save the updated conversation.\n  * HTTP Request: send reply to LINE via Messaging API.\n\n\n  1. Test Your Workflow:\n\n\n  * Send a message from LINE.\n  * Watch the full loop: receive → process → AI → store → reply.\n\n\n  1. Deploy & Monitor:\n\n\n  * Ensure error handling is in place (e.g., for blank messages or failed API calls).\n  * Regularly check your Google Sheets for storage limits. (If limits reached, you can increase the history row.)\n\n\n\n📦 Benefits\n\n  * Maintains context in conversations\n  * Personalized, AI-driven responses\n  * Easy history tracking via Google Sheets\n  * Fully automated and scalable\n\n\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><h3>Main Use Case</h3>\n<p>This workflow enables automated, AI-assisted replies to users messaging a LINE Official Account, while storing and referencing chat history from Google Sheets to maintain context. Ideal for businesses or support teams that want to provide smart, personalized customer interactions using AI with memory.</p>\n<h3>How It Works (Step-by-Step)</h3>\n<ol>\n<li>Connect to LINE Official Account's API</li>\n</ol>\n<ul>\n<li>A Webhook listens for incoming messages from users on LINE.</li>\n<li>When a message is received, it triggers the workflow.</li>\n</ul>\n<ol>\n<li>Prepare the Data</li>\n</ol>\n<ul>\n<li>An Edit Fields module structures incoming data (e.g. extracts user ID, message content).</li>\n<li>This ensures data is clean and usable downstream.</li>\n</ul>\n<ol>\n<li>Retrieve Chat History</li>\n</ol>\n<ul>\n<li>The user’s previous conversations are fetched from a Google Sheet.</li>\n<li>This ensures the AI has memory and can continue conversations contextually.</li>\n</ul>\n<ol>\n<li>Prepare Prompt</li>\n</ol>\n<ul>\n<li>The retrieved chat history is combined with the new message to form a complete prompt for the AI.</li>\n<li>Example format: “User previously said X. Now they said Y. How should we respond?”</li>\n</ul>\n<ol>\n<li>AI Agent: Google Gemini</li>\n</ol>\n<ul>\n<li>The formatted prompt is passed to an AI Agent (Google Gemini Chat Model).</li>\n<li>The AI generates a response based on the message + history.</li>\n<li>Tools used: Chat ModeMemory, ToolOutputParser for accurate replies.</li>\n</ul>\n<ol>\n<li>Split &amp; Clean History</li>\n</ol>\n<ul>\n<li>The conversation history is split into smaller chunks for cleaning and storage.</li>\n<li>This ensures the Google Sheet remains readable and manageable over time.</li>\n</ul>\n<ol>\n<li>Save Chat History</li>\n</ol>\n<ul>\n<li>The cleaned new message and AI reply are saved to Google Sheets.</li>\n<li>This updates the chat history for future context.</li>\n</ul>\n<ol>\n<li>Send Reply to LINE</li>\n</ol>\n<ul>\n<li>The AI-generated reply is sent back to the user via a POST HTTP Request to the LINE Messaging API.</li>\n</ul>\n<h3>How to Set Up</h3>\n<p>Prerequisites:</p>\n<ul>\n<li>LINE Official Account</li>\n<li>Google Sheet to store chat history</li>\n<li>Google Gemini API or AI agent with context memory</li>\n<li>Automation platform (e.g., n8n, as this seems visually similar)</li>\n</ul>\n<h3>Step-by-Step:</h3>\n<ol>\n<li>Create a Webhook on LINE:</li>\n</ol>\n<ul>\n<li>Set the webhook URL to your automation service.</li>\n<li>Enable webhook events.</li>\n</ul>\n<ol>\n<li>Design Your Google Sheet:</li>\n</ol>\n<ul>\n<li>Create a sheet with columns: User ID, Timestamp, Message, AI Reply.</li>\n</ul>\n<ol>\n<li>Set Up Modules in Automation Platform:</li>\n</ol>\n<ul>\n<li>Webhook: receives user messages.</li>\n<li>Edit Fields: extract user ID and message.</li>\n<li>Google Sheets Read: fetch message history.</li>\n<li>Prompt Composer: format prompt using past history + new message.</li>\n<li>AI Agent: connect to Google Gemini for smart replies.</li>\n<li>Split &amp; Clean: clean and chunk history if needed.</li>\n<li>Google Sheets Write: save the updated conversation.</li>\n<li>HTTP Request: send reply to LINE via Messaging API.</li>\n</ul>\n<ol>\n<li>Test Your Workflow:</li>\n</ol>\n<ul>\n<li>Send a message from LINE.</li>\n<li>Watch the full loop: receive → process → AI → store → reply.</li>\n</ul>\n<ol>\n<li>Deploy &amp; Monitor:</li>\n</ol>\n<ul>\n<li>Ensure error handling is in place (e.g., for blank messages or failed API calls).</li>\n<li>Regularly check your Google Sheets for storage limits. (If limits reached, you can increase the history row.)</li>\n</ul>\n<p>📦 Benefits</p>\n<ul>\n<li>Maintains context in conversations</li>\n<li>Personalized, AI-driven responses</li>\n<li>Easy history tracking via Google Sheets</li>\n<li>Fully automated and scalable</li>\n</ul>\n</div><!--]-->",
  "readme_zh": "### 主要应用场景\n\n该工作流可实现LINE官方账号的AI智能自动回复，通过调用Google表格中的历史对话记录保持上下文连贯。特别适合需要利用具备记忆功能的AI提供个性化客户互动的企业或客服团队。\n\n### 运行原理（分步说明）\n\n1. 连接LINE官方账号API\n   * 通过Webhook监听用户消息\n   * 收到消息时自动触发工作流\n\n2. 数据预处理\n   * 使用字段编辑模块结构化数据（如提取用户ID/消息内容）\n   * 确保下游流程使用清洁数据\n\n3. 调取对话历史\n   * 从Google表格获取该用户过往对话记录\n   * 为AI提供上下文记忆实现连贯对话\n\n4. 构建提示词\n   * 将历史记录与新消息组合成完整提示词\n   * 示例格式：\"用户上次说X，现在说Y，应如何回复？\"\n\n5. AI代理（Google Gemini）\n   * 将格式化提示词输入Gemini对话模型\n   * AI基于消息+历史生成回复\n   * 使用工具：对话记忆模块、输出解析器\n\n6. 分割清理历史\n   * 将对话记录分割成片段进行清理\n   * 确保Google表格长期可读性\n\n7. 保存对话记录\n   * 将新消息与AI回复存入Google表格\n   * 更新未来可用的对话上下文\n\n8. 发送LINE回复\n   * 通过LINE Messaging API的POST请求返回AI回复\n\n### 配置指南\n\n先决条件：\n- LINE官方账号\n- 存储对话历史的Google表格\n- 具备上下文记忆的Google Gemini API或AI代理\n- 自动化平台（如n8n等）\n\n分步配置：\n1. 创建LINE Webhook\n   * 在自动化平台设置Webhook URL\n   * 启用Webhook事件\n\n2. 设计Google表格\n   * 创建包含字段：用户ID/时间戳/用户消息/AI回复\n\n3. 配置自动化模块\n   * Webhook：接收用户消息\n   * 字段编辑：提取关键信息\n   * Google表格读取：获取历史消息\n   * 提示词组合器：整合新旧消息\n   * AI代理：连接Gemini生成回复\n   * 分割清理：优化历史记录\n   * Google表格写入：更新对话\n   * HTTP请求：通过LINE API发送回复\n\n4. 测试工作流\n   * 发送测试消息\n   * 观察全流程：接收→处理→AI→存储→回复\n\n5. 部署与监控\n   * 设置错误处理（如空消息/API失败）\n   * 定期检查表格存储限制（可扩展历史记录行数）\n\n📦 核心优势\n- 保持对话上下文连贯\n- 个性化的AI驱动回复\n- 通过表格便捷追踪历史\n- 全自动化且可扩展",
  "title_zh": "集成Google Sheets记忆与Gemini AI的LINE聊天机器人",
  "publish_date_absolute": "2025-04-29",
  "publish_date_zh": "上次更新于7天前",
  "workflow_json_zh": "{\n  \"id\": \"[CENSORED]\",\n  \"meta\": {\n    \"instanceId\": \"[CENSORED]\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"(G) LineChatBot + Google Sheets (as a memory)\",\n  \"tags\": [\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Guitar\",\n      \"createdAt\": \"2025-04-18T08:59:48.308Z\",\n      \"updatedAt\": \"2025-04-18T08:59:48.308Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Webhook\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        560,\n        -500\n      ],\n      \"webhookId\": \"[CENSORED]\",\n      \"parameters\": {\n        \"path\": \"guitarpa\",\n        \"options\": {},\n        \"httpMethod\": \"POST\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"AI Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        460,\n        -220\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.Prompt }}\",\n        \"options\": {\n          \"systemMessage\": \"=You are a helpful assistant. Your name is \\\"ลลิตา\\\". You will help me in everything I need. You will answer based on user language. You are an AI Agent operating in the Thailand time zone (Asia/Bangkok, UTC+7). Today is {{ $now }}.\"\n        },\n        \"promptType\": \"define\",\n        \"hasOutputParser\": true\n      },\n      \"typeVersion\": 1.8\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Google Gemini Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"position\": [\n        460,\n        -20\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"modelName\": \"models/gemini-2.0-flash-001\"\n      },\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"[CENSORED]\",\n          \"name\": \"Guitar's Gemini ([CENSORED_EMAIL])\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Edit Fields\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        780,\n        -500\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"[CENSORED]\",\n              \"name\": \"body.events[0].message.text\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Webhook').item.json.body.events[0].message.text }}\"\n            },\n            {\n              \"id\": \"[CENSORED]\",\n              \"name\": \"body.events[0].replyToken\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Webhook').item.json.body.events[0].replyToken }}\"\n            },\n            {\n              \"id\": \"[CENSORED]\",\n              \"name\": \"body.events[0].source.userId\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.body.events[0].source.userId }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"HTTP Request\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1276,\n        -220\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.line.me/v2/bot/message/reply\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n    \\\"replyToken\\\": \\\"{{ $('Edit Fields').item.json.body.events[0].replyToken }}\\\",\\n    \\\"messages\\\": [\\n        {\\n            \\\"type\\\": \\\"text\\\",\\n            \\\"text\\\": \\\"{{ $('AI Agent').item.json.output.replaceAll('\\\\t', ' ').replaceAll('\\\\\\\"', '\\\\\\\\\\\\\\\"').replaceAll('\\\\n', '\\\\\\\\n').trim() || 'No response available.' }}\\\"\\n        }\\n    ]\\n}\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Authorization\",\n              \"value\": \"Bearer [CENSORED]\"\n            },\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Get History\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"position\": [\n        1000,\n        -500\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"outputFormatting\": {\n            \"values\": {\n              \"date\": \"FORMATTED_STRING\",\n              \"general\": \"UNFORMATTED_VALUE\"\n            }\n          },\n          \"returnFirstMatch\": true,\n          \"dataLocationOnSheet\": {\n            \"values\": {\n              \"rangeDefinition\": \"detectAutomatically\"\n            }\n          }\n        },\n        \"filtersUI\": {\n          \"values\": [\n            {\n              \"lookupValue\": \"={{ $('Webhook').item.json.body.events[0].source.userId }}\",\n              \"lookupColumn\": \"UserID \"\n            }\n          ]\n        },\n        \"sheetName\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gid=0\",\n          \"cachedResultUrl\": \"[CENSORED]\",\n          \"cachedResultName\": \"Sheet1\"\n        },\n        \"documentId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"[CENSORED]\"\n        }\n      },\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"[CENSORED]\",\n          \"name\": \"[Guitar] Google Sheets ([CENSORED_EMAIL])\"\n        }\n      },\n      \"notesInFlow\": false,\n      \"typeVersion\": 4.5,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Prepare Prompt\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1220,\n        -500\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"[CENSORED]\",\n              \"name\": \"Prompt\",\n              \"type\": \"string\",\n              \"value\": \"={{\\n  \\\"คุณคือลลิตา แชทบอทภาษาไทยที่สุภาพและเป็นมิตร ตอบตามบริบทของการสนทนา:\\\\n\\\" +\\n\\n  ($('Get History').item.json.History_Archive_1 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_1) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History_Archive_2 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_2) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History_Archive_3 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_3) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History_Archive_4 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_4) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History || \\\"\\\") +\\n  (($('Get History').item.json.History) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  \\\"ผู้ใช้: \\\" + $('Edit Fields').item.json.body.events[0].message.text + \\\"\\\\nลลิตา: \\\"\\n}}\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Save History\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"position\": [\n        1056,\n        -220\n      ],\n      \"parameters\": {\n        \"columns\": {\n          \"value\": {\n            \"History\": \"={{ $('Split History').item.json.historyToSave }}\",\n            \"UserID \": \"={{ $('Edit Fields').item.json.body.events[0].source.userId }}\",\n            \"LastUpdated\": \"={{ new Date().toISOString() }}\",\n            \"History_Archive_1\": \"={{ $('Split History').item.json.historyArchive1 }}\",\n            \"History_Archive_2\": \"={{ $('Split History').item.json.historyArchive2 }}\",\n            \"History_Archive_3\": \"={{ $('Split History').item.json.historyArchive3 }}\",\n            \"History_Archive_4\": \"={{ $('Split History').item.json.historyArchive4 }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"UserID \",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"UserID \",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"History\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"History\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"LastUpdated\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"required\": false,\n              \"displayName\": \"LastUpdated\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"History_Archive_1\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"History_Archive_1\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"History_Archive_2\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"History_Archive_2\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"History_Archive_3\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"History_Archive_3\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"History_Archive_4\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"required\": false,\n              \"displayName\": \"History_Archive_4\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"row_number\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": true,\n              \"required\": false,\n              \"displayName\": \"row_number\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [\n            \"UserID \"\n          ],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": false\n        },\n        \"options\": {},\n        \"operation\": \"appendOrUpdate\",\n        \"sheetName\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gid=0\",\n          \"cachedResultUrl\": \"[CENSORED]\",\n          \"cachedResultName\": \"Sheet1\"\n        },\n        \"documentId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"[CENSORED]\"\n        }\n      },\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"[CENSORED]\",\n          \"name\": \"[Guitar] Google Sheets ([CENSORED_EMAIL])\"\n        }\n      },\n      \"typeVersion\": 4.5\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        460,\n        -560\n      ],\n      \"parameters\": {\n        \"content\": \"### 连接至Line官方账号的API\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        740,\n        -560\n      ],\n      \"parameters\": {\n        \"width\": 180,\n        \"content\": \"准备数据\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        960,\n        -560\n      ],\n      \"parameters\": {\n        \"width\": 180,\n        \"content\": \"获取聊天记录\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1180,\n        -560\n      ],\n      \"parameters\": {\n        \"width\": 180,\n        \"content\": \"给我们的人工智能提供之前的聊天记录\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        460,\n        -280\n      ],\n      \"parameters\": {\n        \"content\": \"用此命令获取输入。\\\"{{ $json.Prompt }}\\\"\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        780,\n        -280\n      ],\n      \"parameters\": {\n        \"width\": 180,\n        \"content\": \"将历史分割成小块（数据清理）\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Split History\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        840,\n        -220\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Get the current history, new message, and response\\nlet history = $('Get History').item.json.History || '';\\nlet message = $('Edit Fields').item.json.body.events[0].message.text;\\nlet response = $json.output;\\nlet newExchange = `ผู้ใช้: ${message}\\\\nลลิตา: ${response}`;\\nlet updatedHistory = history + (history ? '\\\\n' : '') + newExchange;\\n\\n// Threshold: 70% of Google Sheets cell limit (50,000 characters * 0.7 = 35,000)\\nconst threshold = 35000;\\nlet historyToSave = updatedHistory;\\nlet archive1 = $('Get History').item.json.History_Archive_1 || '';\\nlet archive2 = $('Get History').item.json.History_Archive_2 || '';\\nlet archive3 = $('Get History').item.json.History_Archive_3 || '';\\nlet archive4 = $('Get History').item.json.History_Archive_4 || '';\\n\\n// If history exceeds threshold, split it\\nif (updatedHistory.length > threshold) {\\n  // Keep the last 17,500 characters in History (half of threshold for balance)\\n  const keepLength = 17500;\\n  const archiveChunk = updatedHistory.substring(0, updatedHistory.length - keepLength);\\n  historyToSave = updatedHistory.substring(updatedHistory.length - keepLength);\\n\\n  // Distribute to archive cells, ensuring none exceed 35,000 characters\\n  if (archive1.length < threshold) {\\n    archive1 = (archive1 ? archive1 + '\\\\n' : '') + archiveChunk;\\n    if (archive1.length > threshold) {\\n      const excess = archive1.substring(threshold);\\n      archive1 = archive1.substring(0, threshold);\\n      if (archive2.length < threshold) {\\n        archive2 = (archive2 ? archive2 + '\\\\n' : '') + excess;\\n      }\\n    }\\n  }\\n  if (archive2.length < threshold && archive1.length >= threshold) {\\n    archive2 = (archive2 ? archive2 + '\\\\n' : '') + archiveChunk;\\n    if (archive2.length > threshold) {\\n      const excess = archive2.substring(threshold);\\n      archive2 = archive2.substring(0, threshold);\\n      if (archive3.length < threshold) {\\n        archive3 = (archive3 ? archive3 + '\\\\n' : '') + excess;\\n      }\\n    }\\n  }\\n  if (archive3.length < threshold && archive2.length >= threshold) {\\n    archive3 = (archive3 ? archive3 + '\\\\n' : '') + archiveChunk;\\n    if (archive3.length > threshold) {\\n      const excess = archive3.substring(threshold);\\n      archive3 = archive3.substring(0, threshold);\\n      if (archive4.length < threshold) {\\n        archive4 = (archive4 ? archive4 + '\\\\n' : '') + excess;\\n      }\\n    }\\n  }\\n  if (archive4.length < threshold && archive3.length >= threshold) {\\n    archive4 = (archive4 ? archive4 + '\\\\n' : '') + archiveChunk;\\n    if (archive4.length > threshold) {\\n      archive4 = archive4.substring(0, threshold);\\n    }\\n  }\\n}\\n\\n// Return the values to update\\nreturn [\\n  {\\n    json: {\\n      historyToSave: historyToSave,\\n      historyArchive1: archive1,\\n      historyArchive2: archive2,\\n      historyArchive3: archive3,\\n      historyArchive4: archive4,\\n      lastUpdated: new Date().toISOString()\\n    }\\n  }\\n];\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1000,\n        -280\n      ],\n      \"parameters\": {\n        \"width\": 180,\n        \"content\": \"保存到 Google 表格\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"[CENSORED]\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1220,\n        -280\n      ],\n      \"parameters\": {\n        \"width\": 180,\n        \"content\": \"把它退回到Line\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"[CENSORED]\",\n  \"connections\": {\n    \"Webhook\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Edit Fields\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"AI Agent\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split History\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Edit Fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get History\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get History\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prepare Prompt\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Save History\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"HTTP Request\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split History\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Save History\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prepare Prompt\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Gemini Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}