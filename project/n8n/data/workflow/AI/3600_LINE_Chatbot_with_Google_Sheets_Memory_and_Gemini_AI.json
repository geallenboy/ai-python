{
  "title": "LINE Chatbot with Google Sheets Memory and Gemini AI",
  "url": "https://n8n.io/workflows/3600-line-chatbot-with-google-sheets-memory-and-gemini-ai/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/",
  "author": "Jakkrapat Ampring",
  "publish_date": "Last update 7 days ago",
  "content": "",
  "workflow_json": "{\"id\":\"[CENSORED]\",\"meta\":{\"instanceId\":\"[CENSORED]\",\"templateCredsSetupCompleted\":true},\"name\":\"(G) LineChatBot + Google Sheets (as a memory)\",\"tags\":[{\"id\":\"[CENSORED]\",\"name\":\"Guitar\",\"createdAt\":\"2025-04-18T08:59:48.308Z\",\"updatedAt\":\"2025-04-18T08:59:48.308Z\"}],\"nodes\":[{\"id\":\"[CENSORED]\",\"name\":\"Webhook\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[560,-500],\"webhookId\":\"[CENSORED]\",\"parameters\":{\"path\":\"guitarpa\",\"options\":{},\"httpMethod\":\"POST\"},\"typeVersion\":2},{\"id\":\"[CENSORED]\",\"name\":\"AI Agent\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[460,-220],\"parameters\":{\"text\":\"={{ $json.Prompt }}\",\"options\":{\"systemMessage\":\"=You are a helpful assistant. Your name is \\\"ลลิตา\\\". You will help me in everything I need. You will answer based on user language. You are an AI Agent operating in the Thailand time zone (Asia/Bangkok, UTC+7). Today is {{ $now }}.\"},\"promptType\":\"define\",\"hasOutputParser\":true},\"typeVersion\":1.8},{\"id\":\"[CENSORED]\",\"name\":\"Google Gemini Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\"position\":[460,-20],\"parameters\":{\"options\":{},\"modelName\":\"models/gemini-2.0-flash-001\"},\"credentials\":{\"googlePalmApi\":{\"id\":\"[CENSORED]\",\"name\":\"Guitar's Gemini ([CENSORED_EMAIL])\"}},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Edit Fields\",\"type\":\"n8n-nodes-base.set\",\"position\":[780,-500],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"[CENSORED]\",\"name\":\"body.events[0].message.text\",\"type\":\"string\",\"value\":\"={{ $('Webhook').item.json.body.events[0].message.text }}\"},{\"id\":\"[CENSORED]\",\"name\":\"body.events[0].replyToken\",\"type\":\"string\",\"value\":\"={{ $('Webhook').item.json.body.events[0].replyToken }}\"},{\"id\":\"[CENSORED]\",\"name\":\"body.events[0].source.userId\",\"type\":\"string\",\"value\":\"={{ $json.body.events[0].source.userId }}\"}]}},\"typeVersion\":3.4},{\"id\":\"[CENSORED]\",\"name\":\"HTTP Request\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1276,-220],\"parameters\":{\"url\":\"https://api.line.me/v2/bot/message/reply\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={\\n    \\\"replyToken\\\": \\\"{{ $('Edit Fields').item.json.body.events[0].replyToken }}\\\",\\n    \\\"messages\\\": [\\n        {\\n            \\\"type\\\": \\\"text\\\",\\n            \\\"text\\\": \\\"{{ $('AI Agent').item.json.output.replaceAll('\\\\t', ' ').replaceAll('\\\\\\\"', '\\\\\\\\\\\\\\\"').replaceAll('\\\\n', '\\\\\\\\n').trim() || 'No response available.' }}\\\"\\n        }\\n    ]\\n}\",\"sendBody\":true,\"sendHeaders\":true,\"specifyBody\":\"json\",\"headerParameters\":{\"parameters\":[{\"name\":\"Authorization\",\"value\":\"Bearer [CENSORED]\"},{\"name\":\"Content-Type\",\"value\":\"application/json\"}]}},\"typeVersion\":4.2},{\"id\":\"[CENSORED]\",\"name\":\"Get History\",\"type\":\"n8n-nodes-base.googleSheets\",\"position\":[1000,-500],\"parameters\":{\"options\":{\"outputFormatting\":{\"values\":{\"date\":\"FORMATTED_STRING\",\"general\":\"UNFORMATTED_VALUE\"}},\"returnFirstMatch\":true,\"dataLocationOnSheet\":{\"values\":{\"rangeDefinition\":\"detectAutomatically\"}}},\"filtersUI\":{\"values\":[{\"lookupValue\":\"={{ $('Webhook').item.json.body.events[0].source.userId }}\",\"lookupColumn\":\"UserID \"}]},\"sheetName\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gid=0\",\"cachedResultUrl\":\"[CENSORED]\",\"cachedResultName\":\"Sheet1\"},\"documentId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"[CENSORED]\"}},\"credentials\":{\"googleSheetsOAuth2Api\":{\"id\":\"[CENSORED]\",\"name\":\"[Guitar] Google Sheets ([CENSORED_EMAIL])\"}},\"notesInFlow\":false,\"typeVersion\":4.5,\"alwaysOutputData\":true},{\"id\":\"[CENSORED]\",\"name\":\"Prepare Prompt\",\"type\":\"n8n-nodes-base.set\",\"position\":[1220,-500],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"[CENSORED]\",\"name\":\"Prompt\",\"type\":\"string\",\"value\":\"={{\\n  \\\"คุณคือลลิตา แชทบอทภาษาไทยที่สุภาพและเป็นมิตร ตอบตามบริบทของการสนทนา:\\\\n\\\" +\\n\\n  ($('Get History').item.json.History_Archive_1 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_1) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History_Archive_2 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_2) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History_Archive_3 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_3) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History_Archive_4 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_4) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History || \\\"\\\") +\\n  (($('Get History').item.json.History) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  \\\"ผู้ใช้: \\\" + $('Edit Fields').item.json.body.events[0].message.text + \\\"\\\\nลลิตา: \\\"\\n}}\\n\"}]}},\"typeVersion\":3.4},{\"id\":\"[CENSORED]\",\"name\":\"Save History\",\"type\":\"n8n-nodes-base.googleSheets\",\"position\":[1056,-220],\"parameters\":{\"columns\":{\"value\":{\"History\":\"={{ $('Split History').item.json.historyToSave }}\",\"UserID \":\"={{ $('Edit Fields').item.json.body.events[0].source.userId }}\",\"LastUpdated\":\"={{ new Date().toISOString() }}\",\"History_Archive_1\":\"={{ $('Split History').item.json.historyArchive1 }}\",\"History_Archive_2\":\"={{ $('Split History').item.json.historyArchive2 }}\",\"History_Archive_3\":\"={{ $('Split History').item.json.historyArchive3 }}\",\"History_Archive_4\":\"={{ $('Split History').item.json.historyArchive4 }}\"},\"schema\":[{\"id\":\"UserID \",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"UserID \",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"History\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"History\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"LastUpdated\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"LastUpdated\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"History_Archive_1\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"History_Archive_1\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"History_Archive_2\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"History_Archive_2\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"History_Archive_3\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"History_Archive_3\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"History_Archive_4\",\"type\":\"string\",\"display\":true,\"removed\":false,\"required\":false,\"displayName\":\"History_Archive_4\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"row_number\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":true,\"required\":false,\"displayName\":\"row_number\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[\"UserID \"],\"attemptToConvertTypes\":false,\"convertFieldsToString\":false},\"options\":{},\"operation\":\"appendOrUpdate\",\"sheetName\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gid=0\",\"cachedResultUrl\":\"[CENSORED]\",\"cachedResultName\":\"Sheet1\"},\"documentId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"[CENSORED]\"}},\"credentials\":{\"googleSheetsOAuth2Api\":{\"id\":\"[CENSORED]\",\"name\":\"[Guitar] Google Sheets ([CENSORED_EMAIL])\"}},\"typeVersion\":4.5},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[460,-560],\"parameters\":{\"content\":\"### Connect to Line Official Account's API\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[740,-560],\"parameters\":{\"width\":180,\"content\":\"Prepare the data\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[960,-560],\"parameters\":{\"width\":180,\"content\":\"Retrieve chat history\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1180,-560],\"parameters\":{\"width\":180,\"content\":\"Give our AI previous chat history\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[460,-280],\"parameters\":{\"content\":\"Get input with this command.   \\\"{{ $json.Prompt }}\\\"\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[780,-280],\"parameters\":{\"width\":180,\"content\":\"Split history into small chunks (data cleaning)\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Split History\",\"type\":\"n8n-nodes-base.code\",\"position\":[840,-220],\"parameters\":{\"jsCode\":\"// Get the current history, new message, and response\\nlet history = $('Get History').item.json.History || '';\\nlet message = $('Edit Fields').item.json.body.events[0].message.text;\\nlet response = $json.output;\\nlet newExchange = `ผู้ใช้: ${message}\\\\nลลิตา: ${response}`;\\nlet updatedHistory = history + (history ? '\\\\n' : '') + newExchange;\\n\\n// Threshold: 70% of Google Sheets cell limit (50,000 characters * 0.7 = 35,000)\\nconst threshold = 35000;\\nlet historyToSave = updatedHistory;\\nlet archive1 = $('Get History').item.json.History_Archive_1 || '';\\nlet archive2 = $('Get History').item.json.History_Archive_2 || '';\\nlet archive3 = $('Get History').item.json.History_Archive_3 || '';\\nlet archive4 = $('Get History').item.json.History_Archive_4 || '';\\n\\n// If history exceeds threshold, split it\\nif (updatedHistory.length > threshold) {\\n  // Keep the last 17,500 characters in History (half of threshold for balance)\\n  const keepLength = 17500;\\n  const archiveChunk = updatedHistory.substring(0, updatedHistory.length - keepLength);\\n  historyToSave = updatedHistory.substring(updatedHistory.length - keepLength);\\n\\n  // Distribute to archive cells, ensuring none exceed 35,000 characters\\n  if (archive1.length < threshold) {\\n    archive1 = (archive1 ? archive1 + '\\\\n' : '') + archiveChunk;\\n    if (archive1.length > threshold) {\\n      const excess = archive1.substring(threshold);\\n      archive1 = archive1.substring(0, threshold);\\n      if (archive2.length < threshold) {\\n        archive2 = (archive2 ? archive2 + '\\\\n' : '') + excess;\\n      }\\n    }\\n  }\\n  if (archive2.length < threshold && archive1.length >= threshold) {\\n    archive2 = (archive2 ? archive2 + '\\\\n' : '') + archiveChunk;\\n    if (archive2.length > threshold) {\\n      const excess = archive2.substring(threshold);\\n      archive2 = archive2.substring(0, threshold);\\n      if (archive3.length < threshold) {\\n        archive3 = (archive3 ? archive3 + '\\\\n' : '') + excess;\\n      }\\n    }\\n  }\\n  if (archive3.length < threshold && archive2.length >= threshold) {\\n    archive3 = (archive3 ? archive3 + '\\\\n' : '') + archiveChunk;\\n    if (archive3.length > threshold) {\\n      const excess = archive3.substring(threshold);\\n      archive3 = archive3.substring(0, threshold);\\n      if (archive4.length < threshold) {\\n        archive4 = (archive4 ? archive4 + '\\\\n' : '') + excess;\\n      }\\n    }\\n  }\\n  if (archive4.length < threshold && archive3.length >= threshold) {\\n    archive4 = (archive4 ? archive4 + '\\\\n' : '') + archiveChunk;\\n    if (archive4.length > threshold) {\\n      archive4 = archive4.substring(0, threshold);\\n    }\\n  }\\n}\\n\\n// Return the values to update\\nreturn [\\n  {\\n    json: {\\n      historyToSave: historyToSave,\\n      historyArchive1: archive1,\\n      historyArchive2: archive2,\\n      historyArchive3: archive3,\\n      historyArchive4: archive4,\\n      lastUpdated: new Date().toISOString()\\n    }\\n  }\\n];\"},\"typeVersion\":2},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note6\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1000,-280],\"parameters\":{\"width\":180,\"content\":\"Save to Google Sheets\"},\"typeVersion\":1},{\"id\":\"[CENSORED]\",\"name\":\"Sticky Note7\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1220,-280],\"parameters\":{\"width\":180,\"content\":\"Send it back to Line\"},\"typeVersion\":1}],\"active\":true,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"[CENSORED]\",\"connections\":{\"Webhook\":{\"main\":[[{\"node\":\"Edit Fields\",\"type\":\"main\",\"index\":0}]]},\"AI Agent\":{\"main\":[[{\"node\":\"Split History\",\"type\":\"main\",\"index\":0}]]},\"Edit Fields\":{\"main\":[[{\"node\":\"Get History\",\"type\":\"main\",\"index\":0}]]},\"Get History\":{\"main\":[[{\"node\":\"Prepare Prompt\",\"type\":\"main\",\"index\":0}]]},\"Save History\":{\"main\":[[{\"node\":\"HTTP Request\",\"type\":\"main\",\"index\":0}]]},\"Split History\":{\"main\":[[{\"node\":\"Save History\",\"type\":\"main\",\"index\":0}]]},\"Prepare Prompt\":{\"main\":[[{\"node\":\"AI Agent\",\"type\":\"main\",\"index\":0}]]},\"Google Gemini Chat Model\":{\"ai_languageModel\":[[{\"node\":\"AI Agent\",\"type\":\"ai_languageModel\",\"index\":0}]]}}}",
  "readme": "### Main Use Case\n\nThis workflow enables automated, AI-assisted replies to users messaging a LINE Official Account, while storing and referencing chat history from Google Sheets to maintain context. Ideal for businesses or support teams that want to provide smart, personalized customer interactions using AI with memory.\n\n### How It Works (Step-by-Step)\n\n  1. Connect to LINE Official Account's API\n\n\n  * A Webhook listens for incoming messages from users on LINE.\n  * When a message is received, it triggers the workflow.\n\n\n  1. Prepare the Data\n\n\n  * An Edit Fields module structures incoming data (e.g. extracts user ID, message content).\n  * This ensures data is clean and usable downstream.\n\n\n  1. Retrieve Chat History\n\n\n  * The user’s previous conversations are fetched from a Google Sheet.\n  * This ensures the AI has memory and can continue conversations contextually.\n\n\n  1. Prepare Prompt\n\n\n  * The retrieved chat history is combined with the new message to form a complete prompt for the AI.\n  * Example format: “User previously said X. Now they said Y. How should we respond?”\n\n\n  1. AI Agent: Google Gemini\n\n\n  * The formatted prompt is passed to an AI Agent (Google Gemini Chat Model).\n  * The AI generates a response based on the message + history.\n  * Tools used: Chat ModeMemory, ToolOutputParser for accurate replies.\n\n\n  1. Split & Clean History\n\n\n  * The conversation history is split into smaller chunks for cleaning and storage.\n  * This ensures the Google Sheet remains readable and manageable over time.\n\n\n  1. Save Chat History\n\n\n  * The cleaned new message and AI reply are saved to Google Sheets.\n  * This updates the chat history for future context.\n\n\n  1. Send Reply to LINE\n\n\n  * The AI-generated reply is sent back to the user via a POST HTTP Request to the LINE Messaging API.\n\n\n\n### How to Set Up\n\nPrerequisites:\n\n  * LINE Official Account\n  * Google Sheet to store chat history\n  * Google Gemini API or AI agent with context memory\n  * Automation platform (e.g., n8n, as this seems visually similar)\n\n\n\n### Step-by-Step:\n\n  1. Create a Webhook on LINE:\n\n\n  * Set the webhook URL to your automation service.\n  * Enable webhook events.\n\n\n  1. Design Your Google Sheet:\n\n\n  * Create a sheet with columns: User ID, Timestamp, Message, AI Reply.\n\n\n  1. Set Up Modules in Automation Platform:\n\n\n  * Webhook: receives user messages.\n  * Edit Fields: extract user ID and message.\n  * Google Sheets Read: fetch message history.\n  * Prompt Composer: format prompt using past history + new message.\n  * AI Agent: connect to Google Gemini for smart replies.\n  * Split & Clean: clean and chunk history if needed.\n  * Google Sheets Write: save the updated conversation.\n  * HTTP Request: send reply to LINE via Messaging API.\n\n\n  1. Test Your Workflow:\n\n\n  * Send a message from LINE.\n  * Watch the full loop: receive → process → AI → store → reply.\n\n\n  1. Deploy & Monitor:\n\n\n  * Ensure error handling is in place (e.g., for blank messages or failed API calls).\n  * Regularly check your Google Sheets for storage limits. (If limits reached, you can increase the history row.)\n\n\n\n📦 Benefits\n\n  * Maintains context in conversations\n  * Personalized, AI-driven responses\n  * Easy history tracking via Google Sheets\n  * Fully automated and scalable\n\n\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><h3>Main Use Case</h3>\n<p>This workflow enables automated, AI-assisted replies to users messaging a LINE Official Account, while storing and referencing chat history from Google Sheets to maintain context. Ideal for businesses or support teams that want to provide smart, personalized customer interactions using AI with memory.</p>\n<h3>How It Works (Step-by-Step)</h3>\n<ol>\n<li>Connect to LINE Official Account's API</li>\n</ol>\n<ul>\n<li>A Webhook listens for incoming messages from users on LINE.</li>\n<li>When a message is received, it triggers the workflow.</li>\n</ul>\n<ol>\n<li>Prepare the Data</li>\n</ol>\n<ul>\n<li>An Edit Fields module structures incoming data (e.g. extracts user ID, message content).</li>\n<li>This ensures data is clean and usable downstream.</li>\n</ul>\n<ol>\n<li>Retrieve Chat History</li>\n</ol>\n<ul>\n<li>The user’s previous conversations are fetched from a Google Sheet.</li>\n<li>This ensures the AI has memory and can continue conversations contextually.</li>\n</ul>\n<ol>\n<li>Prepare Prompt</li>\n</ol>\n<ul>\n<li>The retrieved chat history is combined with the new message to form a complete prompt for the AI.</li>\n<li>Example format: “User previously said X. Now they said Y. How should we respond?”</li>\n</ul>\n<ol>\n<li>AI Agent: Google Gemini</li>\n</ol>\n<ul>\n<li>The formatted prompt is passed to an AI Agent (Google Gemini Chat Model).</li>\n<li>The AI generates a response based on the message + history.</li>\n<li>Tools used: Chat ModeMemory, ToolOutputParser for accurate replies.</li>\n</ul>\n<ol>\n<li>Split &amp; Clean History</li>\n</ol>\n<ul>\n<li>The conversation history is split into smaller chunks for cleaning and storage.</li>\n<li>This ensures the Google Sheet remains readable and manageable over time.</li>\n</ul>\n<ol>\n<li>Save Chat History</li>\n</ol>\n<ul>\n<li>The cleaned new message and AI reply are saved to Google Sheets.</li>\n<li>This updates the chat history for future context.</li>\n</ul>\n<ol>\n<li>Send Reply to LINE</li>\n</ol>\n<ul>\n<li>The AI-generated reply is sent back to the user via a POST HTTP Request to the LINE Messaging API.</li>\n</ul>\n<h3>How to Set Up</h3>\n<p>Prerequisites:</p>\n<ul>\n<li>LINE Official Account</li>\n<li>Google Sheet to store chat history</li>\n<li>Google Gemini API or AI agent with context memory</li>\n<li>Automation platform (e.g., n8n, as this seems visually similar)</li>\n</ul>\n<h3>Step-by-Step:</h3>\n<ol>\n<li>Create a Webhook on LINE:</li>\n</ol>\n<ul>\n<li>Set the webhook URL to your automation service.</li>\n<li>Enable webhook events.</li>\n</ul>\n<ol>\n<li>Design Your Google Sheet:</li>\n</ol>\n<ul>\n<li>Create a sheet with columns: User ID, Timestamp, Message, AI Reply.</li>\n</ul>\n<ol>\n<li>Set Up Modules in Automation Platform:</li>\n</ol>\n<ul>\n<li>Webhook: receives user messages.</li>\n<li>Edit Fields: extract user ID and message.</li>\n<li>Google Sheets Read: fetch message history.</li>\n<li>Prompt Composer: format prompt using past history + new message.</li>\n<li>AI Agent: connect to Google Gemini for smart replies.</li>\n<li>Split &amp; Clean: clean and chunk history if needed.</li>\n<li>Google Sheets Write: save the updated conversation.</li>\n<li>HTTP Request: send reply to LINE via Messaging API.</li>\n</ul>\n<ol>\n<li>Test Your Workflow:</li>\n</ol>\n<ul>\n<li>Send a message from LINE.</li>\n<li>Watch the full loop: receive → process → AI → store → reply.</li>\n</ul>\n<ol>\n<li>Deploy &amp; Monitor:</li>\n</ol>\n<ul>\n<li>Ensure error handling is in place (e.g., for blank messages or failed API calls).</li>\n<li>Regularly check your Google Sheets for storage limits. (If limits reached, you can increase the history row.)</li>\n</ul>\n<p>📦 Benefits</p>\n<ul>\n<li>Maintains context in conversations</li>\n<li>Personalized, AI-driven responses</li>\n<li>Easy history tracking via Google Sheets</li>\n<li>Fully automated and scalable</li>\n</ul>\n</div><!--]-->",
  "readme_zh": "### Main Use Case\n\nThis workflow enables automated, AI-assisted replies to users messaging a LINE Official Account, while storing and referencing chat history from Google Sheets to maintain context. Ideal for businesses or support teams that want to provide smart, personalized customer interactions using AI with memory.\n\n### How It Works (Step-by-Step)\n\n  1. Connect to LINE Official Account's API\n\n\n  * A Webhook listens for incoming messages from users on LINE.\n  * When a message is received, it triggers the workflow.\n\n\n  1. Prepare the Data\n\n\n  * An Edit Fields module structures incoming data (e.g. extracts user ID, message content).\n  * This ensures data is clean and usable downstream.\n\n\n  1. Retrieve Chat History\n\n\n  * The user’s previous conversations are fetched from a Google Sheet.\n  * This ensures the AI has memory and can continue conversations contextually.\n\n\n  1. Prepare Prompt\n\n\n  * The retrieved chat history is combined with the new message to form a complete prompt for the AI.\n  * Example format: “User previously said X. Now they said Y. How should we respond?”\n\n\n  1. AI Agent: Google Gemini\n\n\n  * The formatted prompt is passed to an AI Agent (Google Gemini Chat Model).\n  * The AI generates a response based on the message + history.\n  * Tools used: Chat ModeMemory, ToolOutputParser for accurate replies.\n\n\n  1. Split & Clean History\n\n\n  * The conversation history is split into smaller chunks for cleaning and storage.\n  * This ensures the Google Sheet remains readable and manageable over time.\n\n\n  1. Save Chat History\n\n\n  * The cleaned new message and AI reply are saved to Google Sheets.\n  * This updates the chat history for future context.\n\n\n  1. Send Reply to LINE\n\n\n  * The AI-generated reply is sent back to the user via a POST HTTP Request to the LINE Messaging API.\n\n\n\n### How to Set Up\n\nPrerequisites:\n\n  * LINE Official Account\n  * Google Sheet to store chat history\n  * Google Gemini API or AI agent with context memory\n  * Automation platform (e.g., n8n, as this seems visually similar)\n\n\n\n### Step-by-Step:\n\n  1. Create a Webhook on LINE:\n\n\n  * Set the webhook URL to your automation service.\n  * Enable webhook events.\n\n\n  1. Design Your Google Sheet:\n\n\n  * Create a sheet with columns: User ID, Timestamp, Message, AI Reply.\n\n\n  1. Set Up Modules in Automation Platform:\n\n\n  * Webhook: receives user messages.\n  * Edit Fields: extract user ID and message.\n  * Google Sheets Read: fetch message history.\n  * Prompt Composer: format prompt using past history + new message.\n  * AI Agent: connect to Google Gemini for smart replies.\n  * Split & Clean: clean and chunk history if needed.\n  * Google Sheets Write: save the updated conversation.\n  * HTTP Request: send reply to LINE via Messaging API.\n\n\n  1. Test Your Workflow:\n\n\n  * Send a message from LINE.\n  * Watch the full loop: receive → process → AI → store → reply.\n\n\n  1. Deploy & Monitor:\n\n\n  * Ensure error handling is in place (e.g., for blank messages or failed API calls).\n  * Regularly check your Google Sheets for storage limits. (If limits reached, you can increase the history row.)\n\n\n\n📦 Benefits\n\n  * Maintains context in conversations\n  * Personalized, AI-driven responses\n  * Easy history tracking via Google Sheets\n  * Fully automated and scalable\n\n\n",
  "title_zh": "集成Google Sheets记忆功能与Gemini AI的LINE聊天机器人",
  "publish_date_zh": "上次更新于7天前",
  "workflow_json_zh": "{\"id\": \"[CENSORED]\", \"meta\": {\"instanceId\": \"[CENSORED]\", \"templateCredsSetupCompleted\": true}, \"name\": \"(G) Line聊天机器人 + Google表格（作为记忆存储）\", \"tags\": [{\"id\": \"[CENSORED]\", \"name\": \"Guitar\", \"createdAt\": \"2025-04-18T08:59:48.308Z\", \"updatedAt\": \"2025-04-18T08:59:48.308Z\"}], \"nodes\": [{\"id\": \"[CENSORED]\", \"name\": \"Webhook\", \"type\": \"n8n-nodes-base.webhook\", \"position\": [560, -500], \"webhookId\": \"[CENSORED]\", \"parameters\": {\"path\": \"吉他帕\", \"options\": {}, \"httpMethod\": \"邮政\"}, \"typeVersion\": 2}, {\"id\": \"[CENSORED]\", \"name\": \"AI Agent\", \"type\": \"@n8n/n8n-nodes-langchain.agent\", \"position\": [460, -220], \"parameters\": {\"text\": \"= {{ $json.提示 }}\", \"options\": {\"systemMessage\": \"=You are a helpful assistant. Your name is \\\"ลลิตา\\\". You will help me in everything I need. You will answer based on user language. You are an AI Agent operating in the Thailand time zone (Asia/Bangkok, UTC+7). Today is {{ $now }}.\"}, \"promptType\": \"定义\", \"hasOutputParser\": true}, \"typeVersion\": 1.8}, {\"id\": \"[CENSORED]\", \"name\": \"谷歌双子座聊天模型\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\", \"position\": [460, -20], \"parameters\": {\"options\": {}, \"modelName\": \"模型/双子座-2.0-闪存-001\"}, \"credentials\": {\"googlePalmApi\": {\"id\": \"[CENSORED]\", \"name\": \"Guitar's Gemini ([CENSORED_EMAIL])\"}}, \"typeVersion\": 1}, {\"id\": \"[CENSORED]\", \"name\": \"编辑字段\", \"type\": \"n8n-nodes-base.set\", \"position\": [780, -500], \"parameters\": {\"options\": {}, \"assignments\": {\"assignments\": [{\"id\": \"[CENSORED]\", \"name\": \"body.events[0].message.text\", \"type\": \"string\", \"value\": \"={{ $('Webhook').item.json.body.events[0].message.text }}\"}, {\"id\": \"[CENSORED]\", \"name\": \"body.events[0].replyToken\", \"type\": \"string\", \"value\": \"={{ $('Webhook').item.json.body.events[0].replyToken }}\"}, {\"id\": \"[CENSORED]\", \"name\": \"body.events[0].source.userId\", \"type\": \"string\", \"value\": \"={{ $json.body.events[0].source.userId }}\"}]}}, \"typeVersion\": 3.4}, {\"id\": \"[CENSORED]\", \"name\": \"HTTP 请求\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [1276, -220], \"parameters\": {\"url\": \"https://api.line.me/v2/bot/message/reply\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"{\\n    \\\"replyToken\\\": \\\"{{ $('编辑字段').item.json.body.events[0].replyToken }}\\\",\\n    \\\"messages\\\": [\\n        {\\n            \\\"type\\\": \\\"text\\\",\\n            \\\"text\\\": \\\"{{ $('AI代理').item.json.output.replaceAll('\\\\t', ' ').replaceAll('\\\\\\\"', '\\\\\\\\\\\\\\\"').replaceAll('\\\\n', '\\\\\\\\n').trim() || '暂无可用回复。' }}\\\"\\n        }\\n    ]\\n}\", \"sendBody\": true, \"sendHeaders\": true, \"specifyBody\": \"JSON\", \"headerParameters\": {\"parameters\": [{\"name\": \"Authorization\", \"value\": \"Bearer [CENSORED]\"}, {\"name\": \"Content-Type\", \"value\": \"application/json\"}]}}, \"typeVersion\": 4.2}, {\"id\": \"[CENSORED]\", \"name\": \"获取历史\", \"type\": \"n8n-nodes-base.googleSheets\", \"position\": [1000, -500], \"parameters\": {\"options\": {\"outputFormatting\": {\"values\": {\"date\": \"FORMATTED_STRING\", \"general\": \"UNFORMATTED_VALUE\"}}, \"returnFirstMatch\": true, \"dataLocationOnSheet\": {\"values\": {\"rangeDefinition\": \"detectAutomatically\"}}}, \"filtersUI\": {\"values\": [{\"lookupValue\": \"={{ $('Webhook').item.json.body.events[0].source.userId }}\", \"lookupColumn\": \"UserID \"}]}, \"sheetName\": {\"__rl\": true, \"mode\": \"list\", \"value\": \"gid=0\", \"cachedResultUrl\": \"[CENSORED]\", \"cachedResultName\": \"Sheet1\"}, \"documentId\": {\"__rl\": true, \"mode\": \"id\", \"value\": \"[CENSORED]\"}}, \"credentials\": {\"googleSheetsOAuth2Api\": {\"id\": \"[CENSORED]\", \"name\": \"[Guitar] Google Sheets ([CENSORED_EMAIL])\"}}, \"notesInFlow\": false, \"typeVersion\": 4.5, \"alwaysOutputData\": true}, {\"id\": \"[CENSORED]\", \"name\": \"准备提示\", \"type\": \"n8n-nodes-base.set\", \"position\": [1220, -500], \"parameters\": {\"options\": {}, \"assignments\": {\"assignments\": [{\"id\": \"[CENSORED]\", \"name\": \"Prompt\", \"type\": \"string\", \"value\": \"={{\\n  \\\"คุณคือลลิตา แชทบอทภาษาไทยที่สุภาพและเป็นมิตร ตอบตามบริบทของการสนทนา:\\\\n\\\" +\\n\\n  ($('Get History').item.json.History_Archive_1 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_1) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History_Archive_2 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_2) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History_Archive_3 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_3) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History_Archive_4 || \\\"\\\") +\\n  (($('Get History').item.json.History_Archive_4) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  ($('Get History').item.json.History || \\\"\\\") +\\n  (($('Get History').item.json.History) ? \\\"\\\\n\\\" : \\\"\\\") +\\n\\n  \\\"ผู้ใช้: \\\" + $('Edit Fields').item.json.body.events[0].message.text + \\\"\\\\nลลิตา: \\\"\\n}}\\n\"}]}}, \"typeVersion\": 3.4}, {\"id\": \"[CENSORED]\", \"name\": \"保存历史\", \"type\": \"n8n-nodes-base.googleSheets\", \"position\": [1056, -220], \"parameters\": {\"columns\": {\"value\": {\"History\": \"={{ $('Split History').item.json.historyToSave }}\", \"UserID \": \"={{ $('Edit Fields').item.json.body.events[0].source.userId }}\", \"LastUpdated\": \"={{ new Date().toISOString() }}\", \"History_Archive_1\": \"={{ $('Split History').item.json.historyArchive1 }}\", \"History_Archive_2\": \"={{ $('Split History').item.json.historyArchive2 }}\", \"History_Archive_3\": \"={{ $('Split History').item.json.historyArchive3 }}\", \"History_Archive_4\": \"={{ $('Split History').item.json.historyArchive4 }}\"}, \"schema\": [{\"id\": \"UserID \", \"type\": \"string\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"UserID \", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"History\", \"type\": \"string\", \"display\": true, \"required\": false, \"displayName\": \"History\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"LastUpdated\", \"type\": \"string\", \"display\": true, \"required\": false, \"displayName\": \"LastUpdated\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"History_Archive_1\", \"type\": \"string\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"History_Archive_1\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"History_Archive_2\", \"type\": \"string\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"History_Archive_2\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"History_Archive_3\", \"type\": \"string\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"History_Archive_3\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"History_Archive_4\", \"type\": \"string\", \"display\": true, \"removed\": false, \"required\": false, \"displayName\": \"History_Archive_4\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}, {\"id\": \"row_number\", \"type\": \"string\", \"display\": true, \"removed\": true, \"readOnly\": true, \"required\": false, \"displayName\": \"row_number\", \"defaultMatch\": false, \"canBeUsedToMatch\": true}], \"mappingMode\": \"defineBelow\", \"matchingColumns\": [\"UserID \"], \"attemptToConvertTypes\": false, \"convertFieldsToString\": false}, \"options\": {}, \"operation\": \"追加或更新\", \"sheetName\": {\"__rl\": true, \"mode\": \"list\", \"value\": \"gid=0\", \"cachedResultUrl\": \"[CENSORED]\", \"cachedResultName\": \"Sheet1\"}, \"documentId\": {\"__rl\": true, \"mode\": \"id\", \"value\": \"[CENSORED]\"}}, \"credentials\": {\"googleSheetsOAuth2Api\": {\"id\": \"[CENSORED]\", \"name\": \"[Guitar] Google Sheets ([CENSORED_EMAIL])\"}}, \"typeVersion\": 4.5}, {\"id\": \"[CENSORED]\", \"name\": \"便利贴\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [460, -560], \"parameters\": {\"content\": \"### 连接到Line官方账号的API\"}, \"typeVersion\": 1}, {\"id\": \"[CENSORED]\", \"name\": \"便利贴1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [740, -560], \"parameters\": {\"width\": 180, \"content\": \"准备数据\"}, \"typeVersion\": 1}, {\"id\": \"[CENSORED]\", \"name\": \"便利贴2\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [960, -560], \"parameters\": {\"width\": 180, \"content\": \"获取聊天记录\"}, \"typeVersion\": 1}, {\"id\": \"[CENSORED]\", \"name\": \"便利贴3\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1180, -560], \"parameters\": {\"width\": 180, \"content\": \"给我们的人工智能之前的聊天记录\"}, \"typeVersion\": 1}, {\"id\": \"[CENSORED]\", \"name\": \"便利贴4\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [460, -280], \"parameters\": {\"content\": \"使用此命令获取输入。\\\"{{ $json.Prompt }}\\\"\"}, \"typeVersion\": 1}, {\"id\": \"[CENSORED]\", \"name\": \"便利贴5\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [780, -280], \"parameters\": {\"width\": 180, \"content\": \"将历史分割成小块（数据清理）\"}, \"typeVersion\": 1}, {\"id\": \"[CENSORED]\", \"name\": \"分裂历史\", \"type\": \"n8n-nodes-base.code\", \"position\": [840, -220], \"parameters\": {\"jsCode\": \"// 获取当前历史记录、新消息和回复\\nlet history = $('Get History').item.json.History || '';\\nlet message = $('Edit Fields').item.json.body.events[0].message.text;\\nlet response = $json.output;\\nlet newExchange = `用户: ${message}\\\\n萝莉塔: ${response}`;\\nlet updatedHistory = history + (history ? '\\\\n' : '') + newExchange;\\n\\n// 阈值：Google Sheets单元格限制的70%（50,000字符 * 0.7 = 35,000）\\nconst threshold = 35000;\\nlet historyToSave = updatedHistory;\\nlet archive1 = $('Get History').item.json.History_Archive_1 || '';\\nlet archive2 = $('Get History').item.json.History_Archive_2 || '';\\nlet archive3 = $('Get History').item.json.History_Archive_3 || '';\\nlet archive4 = $('Get History').item.json.History_Archive_4 || '';\\n\\n// 如果历史记录超过阈值，进行分割\\nif (updatedHistory.length > threshold) {\\n  // 在History中保留最后17,500个字符（阈值的半数以保持平衡）\\n  const keepLength = 17500;\\n  const archiveChunk = updatedHistory.substring(0, updatedHistory.length - keepLength);\\n  historyToSave = updatedHistory.substring(updatedHistory.length - keepLength);\\n\\n  // 分配到存档单元格，确保不超过35,000字符\\n  if (archive1.length < threshold) {\\n    archive1 = (archive1 ? archive1 + '\\\\n' : '') + archiveChunk;\\n    if (archive1.length > threshold) {\\n      const excess = archive1.substring(threshold);\\n      archive1 = archive1.substring(0, threshold);\\n      if (archive2.length < threshold) {\\n        archive2 = (archive2 ? archive2 + '\\\\n' : '') + excess;\\n      }\\n    }\\n  }\\n  if (archive2.length < threshold && archive1.length >= threshold) {\\n    archive2 = (archive2 ? archive2 + '\\\\n' : '') + archiveChunk;\\n    if (archive2.length > threshold) {\\n      const excess = archive2.substring(threshold);\\n      archive2 = archive2.substring(0, threshold);\\n      if (archive3.length < threshold) {\\n        archive3 = (archive3 ? archive3 + '\\\\n' : '') + excess;\\n      }\\n    }\\n  }\\n  if (archive3.length < threshold && archive2.length >= threshold) {\\n    archive3 = (archive3 ? archive3 + '\\\\n' : '') + archiveChunk;\\n    if (archive3.length > threshold) {\\n      const excess = archive3.substring(threshold);\\n      archive3 = archive3.substring(0, threshold);\\n      if (archive4.length < threshold) {\\n        archive4 = (archive4 ? archive4 + '\\\\n' : '') + excess;\\n      }\\n    }\\n  }\\n  if (archive4.length < threshold && archive3.length >= threshold) {\\n    archive4 = (archive4 ? archive4 + '\\\\n' : '') + archiveChunk;\\n    if (archive4.length > threshold) {\\n      archive4 = archive4.substring(0, threshold);\\n    }\\n  }\\n}\\n\\n// 返回需要更新的值\\nreturn [\\n  {\\n    json: {\\n      historyToSave: historyToSave,\\n      historyArchive1: archive1,\\n      historyArchive2: archive2,\\n      historyArchive3: archive3,\\n      historyArchive4: archive4,\\n      lastUpdated: new Date().toISOString()\\n    }\\n  }\\n];\"}, \"typeVersion\": 2}, {\"id\": \"[CENSORED]\", \"name\": \"便利贴6\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1000, -280], \"parameters\": {\"width\": 180, \"content\": \"保存到 Google 表格\"}, \"typeVersion\": 1}, {\"id\": \"[CENSORED]\", \"name\": \"便利贴7\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1220, -280], \"parameters\": {\"width\": 180, \"content\": \"把它退回到Line\"}, \"typeVersion\": 1}], \"active\": true, \"pinData\": {}, \"settings\": {\"executionOrder\": \"v1\"}, \"versionId\": \"[CENSORED]\", \"connections\": {\"Webhook\": {\"main\": [[{\"node\": \"Edit Fields\", \"type\": \"main\", \"index\": 0}]]}, \"AI Agent\": {\"main\": [[{\"node\": \"Split History\", \"type\": \"main\", \"index\": 0}]]}, \"Edit Fields\": {\"main\": [[{\"node\": \"Get History\", \"type\": \"main\", \"index\": 0}]]}, \"Get History\": {\"main\": [[{\"node\": \"Prepare Prompt\", \"type\": \"main\", \"index\": 0}]]}, \"Save History\": {\"main\": [[{\"node\": \"HTTP Request\", \"type\": \"main\", \"index\": 0}]]}, \"Split History\": {\"main\": [[{\"node\": \"Save History\", \"type\": \"main\", \"index\": 0}]]}, \"Prepare Prompt\": {\"main\": [[{\"node\": \"AI Agent\", \"type\": \"main\", \"index\": 0}]]}, \"Google Gemini Chat Model\": {\"ai_languageModel\": [[{\"node\": \"AI Agent\", \"type\": \"ai_languageModel\", \"index\": 0}]]}}}"
}