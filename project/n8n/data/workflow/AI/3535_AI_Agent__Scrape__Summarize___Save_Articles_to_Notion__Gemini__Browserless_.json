{
  "title": "AI Agent: Scrape, Summarize & Save Articles to Notion (Gemini, Browserless)",
  "url": "https://n8n.io/workflows/3535-ai-agent-scrape-summarize-and-save-articles-to-notion-gemini-browserless/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/",
  "author": "Mihai Farcas",
  "publish_date": "Last update 12 days ago",
  "content": "",
  "workflow_json": "{\"id\":\"4sKJLlAF2vqpkk2I\",\"meta\":{\"instanceId\":\"69133932b9ba8e1ef14816d0b63297bb44feb97c19f759b5d153ff6b0c59e18d\"},\"name\":\"Research AI Agent: Scrape and Summarize Articles and save to Notion (Gemini, Browserless)\",\"tags\":[],\"nodes\":[{\"id\":\"bbfff416-7270-4f1c-8024-b91b1c5acd1b\",\"name\":\"Gemini 2.5 PRO\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\"position\":[-840,20],\"parameters\":{\"options\":{\"temperature\":0},\"modelName\":\"models/gemini-2.5-pro-exp-03-25\"},\"credentials\":{\"googlePalmApi\":{\"id\":\"jLOqyTR4yTT1nYKi\",\"name\":\"Google Gemini(PaLM) Api account\"}},\"typeVersion\":1},{\"id\":\"e1a4b171-0850-4d90-bf49-5c39888922af\",\"name\":\"website_scraper\",\"type\":\"@n8n/n8n-nodes-langchain.toolHttpRequest\",\"position\":[-220,-100],\"parameters\":{\"url\":\"http://browserless:3000/content\",\"method\":\"POST\",\"jsonBody\":\"={\\n  \\\"url\\\": \\\"{url}\\\",\\n  \\\"gotoOptions\\\": {\\n    \\\"waitUntil\\\": \\\"networkidle0\\\"\\n  }\\n} \",\"sendBody\":true,\"specifyBody\":\"json\",\"toolDescription\":\"website_scraper: Scrape a website given it's URL\",\"placeholderDefinitions\":{\"values\":[{\"name\":\"url\",\"type\":\"string\",\"description\":\"the URL of the website to scrape\"}]}},\"typeVersion\":1.1},{\"id\":\"fd94022a-bf8d-47e6-b561-d622da350737\",\"name\":\"save_to_notion\",\"type\":\"n8n-nodes-base.notionTool\",\"position\":[-620,-100],\"parameters\":{\"title\":\"={{ $fromAI('Title', `The original title of the article!`, 'string') }}\",\"blockUi\":{\"blockValues\":[{\"type\":\"heading_1\",\"textContent\":\"={{ $fromAI('Title', `The original title of the article!`, 'string') }}\"},{\"type\":\"heading_2\",\"textContent\":\"Quick Summary (TL;DR)\"},{\"textContent\":\"={{ $fromAI('Summary', `1-3 sentence summary capturing the absolute essence of this article`, 'string') }}\"},{\"type\":\"heading_2\",\"textContent\":\"={{ $fromAI('objective_title', `short title for the Problem Addressed / Objective section`, 'string') }}\"},{\"textContent\":\"={{ $fromAI('objective_text', `description of the core problem, question, or goal the article tackles. Keep it focused.`, 'string') }}\"},{\"type\":\"heading_2\",\"textContent\":\"={{ $fromAI('concepts_title', `title for the Key Concepts / Solution Overview section`, 'string') }}\"},{\"textContent\":\"={{ $fromAI('concepts_text', `Explain the main ideas, theories, or the high-level approach of the solution presented.`, 'string') }}\"},{\"type\":\"heading_2\",\"textContent\":\"Technologies & Libraries\"},{\"text\":{\"text\":[{\"text\":\"={{ $fromAI('technologies_list', `A bulleted list of Technologies, Libraries, Techniques and Patterns Mentioned in the article along with a short description for each`, 'string') }}\",\"annotationUi\":{}}]},\"richText\":true},{\"type\":\"heading_2\",\"textContent\":\"Core Code Snippets\"},{\"textContent\":\"={{ $fromAI('important_code_snippet_description', `1-2 sentences of context explaining what this snippet does or why it's important.`, 'string') }}\"},{\"text\":{\"text\":[{\"text\":\"={{ $fromAI('important_code_snippet', `The actual code snippet. The AI must ensure this block doesn't exceed 2000 chars. If a crucial snippet is longer, the AI should either prioritize a key part of it or potentially link to the source if available. Specify the language (e.g., python, javascript) for syntax highlighting.`, 'string') }}\",\"annotationUi\":{\"code\":true}}]},\"richText\":true},{\"type\":\"heading_2\",\"textContent\":\"Key Takeaways & Conclusion\"},{\"textContent\":\"={{ $fromAI('conclusions', `A bulleted item list that summarizes the main conclusions, results, or actionable insights from the article.`, 'string') }}\"}]},\"options\":{\"icon\":\"={{ $fromAI('Icon', `Pick an emoji that would be good as an icon for this article. Remember, this should be a single emoji`, 'string') }}\"},\"resource\":\"databasePage\",\"databaseId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"1c385086-bf58-80a1-a60f-dbc96d64413f\",\"cachedResultUrl\":\"https://www.notion.so/1c385086bf5880a1a60fdbc96d64413f\",\"cachedResultName\":\"Knowledge Database\"},\"propertiesUi\":{\"propertyValues\":[{\"key\":\"Description|rich_text\",\"textContent\":\"={{ $fromAI('Description', `Short description of what the article is about`, 'string') }}\"},{\"key\":\"URL|url\",\"urlValue\":\"={{ $fromAI('URL', `The URL where this article resides.`, 'string') }}\"},{\"key\":\"Tags|multi_select\",\"multiSelectValue\":\"={{ $fromAI('Tags', `General (generic) tags that would be relevant for this article, such as technologies used / talked about, programming language, techniques and so on! Keep them generic not ultra specific.`, 'string') }}\"},{\"key\":\"Publication Date|date\",\"date\":\"={{ $fromAI('publication_date', `The date this article was published if available on the page.`, 'string') }}\",\"includeTime\":false}]},\"descriptionType\":\"manual\",\"toolDescription\":\"save_to_notion: This tool saves the information to the Notion database.\"},\"credentials\":{\"notionApi\":{\"id\":\"MDVhXc92xUP3UjxB\",\"name\":\"Notion account\"}},\"notesInFlow\":false,\"typeVersion\":2.2},{\"id\":\"0e70e938-97ac-4aa0-80c1-8f7c9c519b9d\",\"name\":\"discord_notification\",\"type\":\"n8n-nodes-base.discordTool\",\"position\":[-420,-100],\"webhookId\":\"617fa695-5a0a-464e-b3f2-bcd77ab5965b\",\"parameters\":{\"embeds\":{\"values\":[{\"url\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('URL', ``, 'string') }}\",\"title\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}\",\"description\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', ``, 'string') }}\"}]},\"content\":\"={{ $fromAI('Message', `Start with an :information_source: emoji. Then tell the chat that the action has been completed.`, 'string') }}\",\"guildId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"1207038600731168821\",\"cachedResultUrl\":\"https://discord.com/channels/1207038600731168821\",\"cachedResultName\":\"Let's Talk Dev Community\"},\"options\":{},\"resource\":\"message\",\"channelId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"1354563802854723774\",\"cachedResultUrl\":\"https://discord.com/channels/1207038600731168821/1354563802854723774\",\"cachedResultName\":\"research\"}},\"credentials\":{\"discordBotApi\":{\"id\":\"LfVy6XSgcAgRUPSS\",\"name\":\"Discord Bot account\"}},\"typeVersion\":2},{\"id\":\"ee123a65-f0db-45e8-8e78-618b6c2b74e9\",\"name\":\"Save Article To Notion\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"onError\":\"continueErrorOutput\",\"position\":[-700,-320],\"parameters\":{\"options\":{\"systemMessage\":\"=You will receive a URL. Your task is to:\\n1. use the website_scraper to scrape the provided URL!\\n2. use the save_to_notion tool to save the information to Notion.\\n3. use the discord_notification tool to send a notification that the research is available, along with the notion URL of the created page.\\n\\n## Tools\\nThe save_to_notion tool expects the following parameters:\\n* title: the original title of the article\\n* description: short description of what the article is about\\n* url: the URL where this article resides.\\n* tags: general (generic) tags that would be relevant for this article, such as technologies used / talked about, programming language, techniques and so on! Keep them generic not ultra specific.\\n* publication_date: The date this article was published if available on the page.\\n* summary: 1-3 sentence summary capturing the absolute essence of this article\\n* objective_title: short title for the section about the problem addressed / objective\\n* objective_text: description of the core problem, question, or goal the article tackles. Keep it focused.\\n* concepts_title: title for the Key Concepts / Solution Overview section\\n* concepts_text: explain the main ideas, theories, or the high-level approach of the solution presented. \\n* technologies_list: A bulleted list of Technologies, Libraries, Techniques and Patterns Mentioned in the article along with a short description for each.\\n* important_code_snippet_description: Description for The most important code snippet in the article. 1-2 sentences of context explaining what this snippet does or why it's important.\\n* important_code_snippet: The actual code snippet. The AI must ensure this block doesn't exceed 2000 chars. If a crucial snippet is longer, the AI should either prioritize a key part of it or potentially link to the source if available. Specify the language (e.g., python, javascript) for syntax highlighting.\\n* conclusions: A bulleted item list that summarizes the main conclusions, results, or actionable insights from the article.\\n* icon: an emoji that represents this article best!\\n\\nRemember you always have to scrape the website using the website_scraper tool. Don't try to summarize without scraping!\\nAlways save the results to notion using the save_to_notion tool. Only execute this tool once!\"}},\"executeOnce\":true,\"notesInFlow\":false,\"typeVersion\":1.7},{\"id\":\"4a7f0a06-0d5f-4013-964c-fcc272484ff4\",\"name\":\"When chat message received\",\"type\":\"@n8n/n8n-nodes-langchain.chatTrigger\",\"position\":[-1000,-320],\"webhookId\":\"3e4878bb-dcb4-4591-975f-8f279605e90b\",\"parameters\":{\"public\":true,\"options\":{}},\"typeVersion\":1.1},{\"id\":\"5bcfe9f7-a58f-4851-8ac4-ad6de06705df\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1060,-120],\"parameters\":{\"width\":340,\"height\":260,\"content\":\"## Google Gemini AI model\\n\\nI picked this for the enormous context window and speed. Feel free to experiment with other AI models.\"},\"typeVersion\":1},{\"id\":\"8a1ef34e-9f27-4e68-8ef2-34c488463512\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-280,-420],\"parameters\":{\"width\":380,\"height\":460,\"content\":\"## Browserless (https://www.browserless.io/)\\n\\nI use Browserless as a self hosted Docker container (alongside n8n). You can use the cloud version of Browserless or any other web scraping tool or API.\\n\\nSince there isn't a pre-built tool for Browserless , we can simply use the generic HTTP request tool to call Browserless' API.\"},\"typeVersion\":1},{\"id\":\"dfba5742-663c-4b8c-a971-de120c8f73c1\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1980,-820],\"parameters\":{\"width\":860,\"height\":980,\"content\":\"## Setup\\n\\n1.  **Import Workflow:** Import this template into your n8n instance.\\n2.  **Configure Credentials & Notion Database:**\\n    * **Notion Database:**\\n        * Create or designate a Notion database (like the example \\\"Knowledge Database\\\") where articles will be saved.\\n        * Ensure this database has the following properties (fields):\\n            * `Name` (Type: Text) - *This will store the article title.*\\n            * `URL` (Type: URL) - *This will store the original article link.*\\n            * `Description` (Type: Text) - *This can store the AI-generated summary.*\\n            * `Tags` (Type: Multi-select) - *Optional, for categorization.*\\n            * `Publication Date` (Type: Date) - *Optional, \\nstore the date the article was published.\\n        * Ensure the n8n integration has access to this specific database.\\n\\t* If you require a different format to the Notion Database, not that you will have to update the Notion tool configuration in this n8n workflow accordingly.\\n    * **Notion Credential:** Obtain your Notion API key and add it as a Notion credential in n8n. Select this credential in the `save_to_notion` tool node.\\n    * **Configure `save_to_notion` Tool:** In the `save_to_notion` tool node within the workflow, set the 'Database ID' field to the ID of the Notion database you prepared above. Map the workflow data (URL, AI summary, etc.) to the corresponding database properties (`URL`, `Description`, etc.).  In the blocks section of the notion tool, you can define a custom format for the research page, allowing the AI to fill in the exact details you want extracted from any web page!\\n    * **Google Gemini AI:** Obtain your API key from [Google AI Studio](https://aistudio.google.com/app/apikey) or Google Cloud Console (if using Vertex AI) and add it as a credential. Select this credential in the \\\"Tools Agent\\\" node.\\n    * **Discord (or other notification service):** If using Discord notifications, create a Webhook URL ([instructions](https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks)) or set up a Bot Token. Add the credential in n8n and select it in the `discord_notification` tool node. Configure the target Channel ID.\\n    * **Browserless/HTTP Request:**\\n        * **Cloud:** Obtain your API key from [Browserless](https://www.browserless.io/) and configure the `website_scraper` HTTP Request tool node with the correct API endpoint and authentication header.\\n        * **Self-Hosted:** Ensure your Browserless Docker container is running and accessible by n8n. Configure the `website_scraper` HTTP Request tool node with your self-hosted Browserless instance URL.\\n6.  **Activate Workflow:** Save test and activate the workflow.\\n\\n## How to customize this workflow to your needs\\n\\n* **Change AI Model:** Experiment with different AI models supported by n8n (like OpenAI GPT models or Anthropic Claude) in the Agent node if Gemini 2.5 Pro doesn't fit your needs or budget, keeping in mind potential differences in context window size and processing capabilities for large content.\\n* **Modify Notion Saving:** Adjust the `save_to_notion` tool node to map different data fields (e.g., change the summary style by modifying the AI prompt, add specific tags, or alter the page content structure) to your Notion database properties.\\n* **Adjust Scraping:** Modify the prompt/instructions for the `website_scraper` tool or change the parameters sent to the Browserless API if you need different data extracted from the web pages. You could also swap Browserless for another scraping service/API accessible via the HTTP Request node.\"},\"typeVersion\":1}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"d5328d32-6ee9-4dd6-a68b-8736c85975fe\",\"connections\":{\"Gemini 2.5 PRO\":{\"ai_languageModel\":[[{\"node\":\"Save Article To Notion\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"save_to_notion\":{\"ai_tool\":[[{\"node\":\"Save Article To Notion\",\"type\":\"ai_tool\",\"index\":0}]]},\"website_scraper\":{\"ai_tool\":[[{\"node\":\"Save Article To Notion\",\"type\":\"ai_tool\",\"index\":0}]]},\"discord_notification\":{\"ai_tool\":[[{\"node\":\"Save Article To Notion\",\"type\":\"ai_tool\",\"index\":0}]]},\"When chat message received\":{\"main\":[[{\"node\":\"Save Article To Notion\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This n8n workflow automates the process of saving web articles or links shared in a chat conversation directly into a Notion database, using Google's Gemini AI and Browserless for web scraping.\n\n## Who is this AI automation template for?\n\nIt's useful for anyone wanting to reduce manual copy-pasting and organize web findings seamlessly within Notion. A smarter web clipping tool!\n\n## What this AI automation workflow does\n\n  1. Starts when a message is received\n  2. Uses a Google Gemini AI Agent node to understand the context and manage the subsequent steps. It identifies if a message contains a request to save an article/link.\n  3. If a URL is detected, it utilizes a tool configured with the Browserless API (via the HTTP Request node) to scrape the content of the web page.\n  4. Creates a new page in a specified Notion database, populating it with thea summary scraped content, in a specific format, never leaving out any important details. It also saves the original URL, smart tags, publication date, and other metadata extracted by the AI.\n  5. Posts a confirmation message (e.g., to a Discord channel) indicating whether the article was saved successfully or if an error occurred.\n\n\n\n## Setup\n\n  1. **Import Workflow:** Import this template into your n8n instance.\n  2. **Configure Credentials & Notion Database:**\n     * **Notion Database:**\n       * Create or designate a Notion database (like the example \"Knowledge Database\") where articles will be saved.\n       * Ensure this database has the following properties (fields): \n         * `Name` (Type: Text) - _This will store the article title._\n         * `URL` (Type: URL) - _This will store the original article link._\n         * `Description` (Type: Text) - _This can store the AI-generated summary._\n         * `Tags` (Type: Multi-select) - _Optional, for categorization._\n         * `Publication Date` (Type: Date) - *Optional,  \nstore the date the article was published.\n       * Ensure the n8n integration has access to this specific database.\n     * If you require a different format to the Notion Database, not that you will have to update the Notion tool configuration in this n8n workflow accordingly.\n     * **Notion Credential:** Obtain your Notion API key and add it as a Notion credential in n8n. Select this credential in the `save_to_notion` tool node.\n     * **Configure`save_to_notion` Tool:** In the `save_to_notion` tool node within the workflow, set the 'Database ID' field to the ID of the Notion database you prepared above. Map the workflow data (URL, AI summary, etc.) to the corresponding database properties (`URL`, `Description`, etc.). In the blocks section of the notion tool, you can define a custom format for the research page, allowing the AI to fill in the exact details you want extracted from any web page!\n     * **Google Gemini AI:** Obtain your API key from [Google AI Studio](https://aistudio.google.com/app/apikey) or Google Cloud Console (if using Vertex AI) and add it as a credential. Select this credential in the \"Tools Agent\" node.\n     * **Discord (or other notification service):** If using Discord notifications, create a Webhook URL ([instructions](https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks)) or set up a Bot Token. Add the credential in n8n and select it in the `discord_notification` tool node. Configure the target Channel ID.\n     * **Browserless/HTTP Request:**\n       * **Cloud:** Obtain your API key from [Browserless](https://www.browserless.io/) and configure the `website_scraper` HTTP Request tool node with the correct API endpoint and authentication header.\n       * **Self-Hosted:** Ensure your Browserless Docker container is running and accessible by n8n. Configure the `website_scraper` HTTP Request tool node with your self-hosted Browserless instance URL.\n  3. **Activate Workflow:** Save test and activate the workflow.\n\n\n\n## How to customize this workflow to your needs\n\n  * **Change AI Model:** Experiment with different AI models supported by n8n (like OpenAI GPT models or Anthropic Claude) in the Agent node if Gemini 2.5 Pro doesn't fit your needs or budget, keeping in mind potential differences in context window size and processing capabilities for large content.\n  * **Modify Notion Saving:** Adjust the `save_to_notion` tool node to map different data fields (e.g., change the summary style by modifying the AI prompt, add specific tags, or alter the page content structure) to your Notion database properties.\n  * **Adjust Scraping:** Modify the prompt/instructions for the `website_scraper` tool or change the parameters sent to the Browserless API if you need different data extracted from the web pages. You could also swap Browserless for another scraping service/API accessible via the HTTP Request node.\n\n\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><p>This n8n workflow automates the process of saving web articles or links shared in a chat conversation directly into a Notion database, using Google's Gemini AI and Browserless for web scraping.</p>\n<h2>Who is this AI automation template for?</h2>\n<p>It's useful for anyone wanting to reduce manual copy-pasting and organize web findings seamlessly within Notion. A smarter web clipping tool!</p>\n<h2>What this AI automation workflow does</h2>\n<ol>\n<li>Starts when a message is received</li>\n<li>Uses a Google Gemini AI Agent node to understand the context and manage the subsequent steps. It identifies if a message contains a request to save an article/link.</li>\n<li>If a URL is detected, it utilizes a tool configured with the Browserless API (via the HTTP Request node) to scrape the content of the web page.</li>\n<li>Creates a new page in a specified Notion database, populating it with thea summary scraped content, in a specific format, never leaving out any important details. It also saves the original URL, smart tags, publication date, and other metadata extracted by the AI.</li>\n<li>Posts a confirmation message (e.g., to a Discord channel) indicating whether the article was saved successfully or if an error occurred.</li>\n</ol>\n<h2>Setup</h2>\n<ol>\n<li><strong>Import Workflow:</strong> Import this template into your n8n instance.</li>\n<li><strong>Configure Credentials &amp; Notion Database:</strong>\n<ul>\n<li><strong>Notion Database:</strong>\n<ul>\n<li>Create or designate a Notion database (like the example \"Knowledge Database\") where articles will be saved.</li>\n<li>Ensure this database has the following properties (fields):\n<ul>\n<li><code>Name</code> (Type: Text) - <em>This will store the article title.</em></li>\n<li><code>URL</code> (Type: URL) - <em>This will store the original article link.</em></li>\n<li><code>Description</code> (Type: Text) - <em>This can store the AI-generated summary.</em></li>\n<li><code>Tags</code> (Type: Multi-select) - <em>Optional, for categorization.</em></li>\n<li><code>Publication Date</code> (Type: Date) - *Optional,<br>\nstore the date the article was published.</li>\n</ul>\n</li>\n<li>Ensure the n8n integration has access to this specific database.</li>\n</ul>\n</li>\n<li>If you require a different format to the Notion Database, not that you will have to update the Notion tool configuration in this n8n workflow accordingly.</li>\n<li><strong>Notion Credential:</strong> Obtain your Notion API key and add it as a Notion credential in n8n. Select this credential in the <code>save_to_notion</code> tool node.</li>\n<li><strong>Configure <code>save_to_notion</code> Tool:</strong> In the <code>save_to_notion</code> tool node within the workflow, set the 'Database ID' field to the ID of the Notion database you prepared above. Map the workflow data (URL, AI summary, etc.) to the corresponding database properties (<code>URL</code>, <code>Description</code>, etc.).  In the blocks section of the notion tool, you can define a custom format for the research page, allowing the AI to fill in the exact details you want extracted from any web page!</li>\n<li><strong>Google Gemini AI:</strong> Obtain your API key from <a href=\"https://aistudio.google.com/app/apikey\" rel=\"ugc nofollow\" target=\"_blank\">Google AI Studio</a> or Google Cloud Console (if using Vertex AI) and add it as a credential. Select this credential in the \"Tools Agent\" node.</li>\n<li><strong>Discord (or other notification service):</strong> If using Discord notifications, create a Webhook URL (<a href=\"https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks\" rel=\"ugc nofollow\" target=\"_blank\">instructions</a>) or set up a Bot Token. Add the credential in n8n and select it in the <code>discord_notification</code> tool node. Configure the target Channel ID.</li>\n<li><strong>Browserless/HTTP Request:</strong>\n<ul>\n<li><strong>Cloud:</strong> Obtain your API key from <a href=\"https://www.browserless.io/\" rel=\"ugc nofollow\" target=\"_blank\">Browserless</a> and configure the <code>website_scraper</code> HTTP Request tool node with the correct API endpoint and authentication header.</li>\n<li><strong>Self-Hosted:</strong> Ensure your Browserless Docker container is running and accessible by n8n. Configure the <code>website_scraper</code> HTTP Request tool node with your self-hosted Browserless instance URL.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Activate Workflow:</strong> Save test and activate the workflow.</li>\n</ol>\n<h2>How to customize this workflow to your needs</h2>\n<ul>\n<li><strong>Change AI Model:</strong> Experiment with different AI models supported by n8n (like OpenAI GPT models or Anthropic Claude) in the Agent node if Gemini 2.5 Pro doesn't fit your needs or budget, keeping in mind potential differences in context window size and processing capabilities for large content.</li>\n<li><strong>Modify Notion Saving:</strong> Adjust the <code>save_to_notion</code> tool node to map different data fields (e.g., change the summary style by modifying the AI prompt, add specific tags, or alter the page content structure) to your Notion database properties.</li>\n<li><strong>Adjust Scraping:</strong> Modify the prompt/instructions for the <code>website_scraper</code> tool or change the parameters sent to the Browserless API if you need different data extracted from the web pages. You could also swap Browserless for another scraping service/API accessible via the HTTP Request node.</li>\n</ul>\n</div><!--]-->",
  "readme_zh": "该n8n工作流通过整合谷歌Gemini AI与Browserless网页抓取技术，实现了将聊天对话中分享的网页文章或链接自动保存至Notion数据库的流程。\n\n## 适用人群\n适合所有希望减少手动复制粘贴操作、在Notion中高效整理网络资料的用户。堪称智能网页剪报工具！\n\n## 工作流功能\n1. 触发：接收聊天消息时启动\n2. 智能解析：通过Google Gemini AI代理节点理解上下文，判断消息是否包含保存文章/链接的请求\n3. 网页抓取：检测到URL时，调用Browserless API（通过HTTP请求节点）抓取页面内容\n4. 智能归档：在指定Notion数据库创建新页面，自动填充以下结构化数据：\n   - AI生成的摘要（完整保留关键信息）\n   - 原始URL链接\n   - 智能标签\n   - 发布日期等元数据\n5. 状态反馈：向指定渠道（如Discord频道）发送操作结果通知\n\n## 配置指南\n1. **导入工作流**：将模板导入n8n实例\n2. **凭证与数据库配置**：\n   * **Notion数据库**：\n     - 创建专用数据库（示例\"知识库\"）\n     - 必备字段：\n       * `名称`（文本类型）- 存储文章标题\n       * `URL`（链接类型）- 存储原文地址\n       * `描述`（文本类型）- 存储AI摘要\n       * `标签`（多选类型）- 可选分类\n       * `发布日期`（日期类型）- 可选\n     - 确保n8n集成有访问权限\n   * **Notion凭证**：添加API密钥至n8n凭证系统，并在`save_to_notion`节点中选择\n   * **数据库映射**：在`save_to_notion`节点中设置数据库ID，配置字段映射关系，可自定义页面内容模板\n   * **Gemini AI**：从[Google AI Studio](https://aistudio.google.com/app/apikey)获取API密钥并添加凭证\n   * **通知服务**：如需Discord通知，需配置Webhook或机器人令牌\n   * **网页抓取服务**：\n     - 云端方案：使用Browserless官方API\n     - 自托管方案：配置本地Browserless实例地址\n3. **激活测试**：保存并启用工作流\n\n## 自定义建议\n* **更换AI模型**：可替换为n8n支持的其他AI模型（如OpenAI GPT或Anthropic Claude）\n* **调整归档格式**：修改Notion节点中的字段映射关系，定制摘要风格/标签规则/页面结构\n* **优化抓取逻辑**：通过调整Browserless API参数或更换其他抓取服务来改变数据提取方式\n\n（注：保留所有技术术语的英文原名，如n8n/Notion/Browserless等专业工具名称；时间日期格式遵循中文习惯；长句按中文表达习惯拆分；列表项保持原有层级结构）",
  "title_zh": "AI代理：抓取、总结并保存文章至Notion（Gemini，无浏览器模式）",
  "publish_date_zh": "上次更新于12天前",
  "workflow_json_zh": "{\"id\": \"4sKJLlAF2vqpkk2I\", \"meta\": {\"instanceId\": \"69133932b9ba8e1ef14816d0b63297bb44feb97c19f759b5d153ff6b0c59e18d\"}, \"name\": \"研究AI助手：抓取并总结文章并保存至Notion（Gemini，无浏览器模式）\", \"tags\": [], \"nodes\": [{\"id\": \"bbfff416-7270-4f1c-8024-b91b1c5acd1b\", \"name\": \"双子座2.5专业版\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\", \"position\": [-840, 20], \"parameters\": {\"options\": {\"temperature\": 0}, \"modelName\": \"模型/双子座-2.5-专业版-实验-03-25\"}, \"credentials\": {\"googlePalmApi\": {\"id\": \"jLOqyTR4yTT1nYKi\", \"name\": \"Google Gemini(PaLM) Api account\"}}, \"typeVersion\": 1}, {\"id\": \"e1a4b171-0850-4d90-bf49-5c39888922af\", \"name\": \"网站爬虫\", \"type\": \"@n8n/n8n-nodes-langchain.toolHttpRequest\", \"position\": [-220, -100], \"parameters\": {\"url\": \"浏览器无头模式：3000端口内容\", \"method\": \"邮政\", \"jsonBody\": \"{\\n  \\\"url\\\": \\\"{url}\\\",\\n  \\\"gotoOptions\\\": {\\n    \\\"waitUntil\\\": \\\"network空闲0\\\"\\n  }\\n}\", \"sendBody\": true, \"specifyBody\": \"JSON\", \"toolDescription\": \"网站爬虫：根据给定URL抓取网站内容\", \"placeholderDefinitions\": {\"values\": [{\"name\": \"url\", \"type\": \"string\", \"description\": \"the URL of the website to scrape\"}]}}, \"typeVersion\": 1.1}, {\"id\": \"fd94022a-bf8d-47e6-b561-d622da350737\", \"name\": \"保存到Notion\", \"type\": \"n8n-nodes-base.notionTool\", \"position\": [-620, -100], \"parameters\": {\"title\": \"={{ $fromAI('标题', `文章原标题！`, 'string') }}\", \"blockUi\": {\"blockValues\": [{\"type\": \"heading_1\", \"textContent\": \"={{ $fromAI('Title', `The original title of the article!`, 'string') }}\"}, {\"type\": \"heading_2\", \"textContent\": \"Quick Summary (TL;DR)\"}, {\"textContent\": \"={{ $fromAI('Summary', `1-3 sentence summary capturing the absolute essence of this article`, 'string') }}\"}, {\"type\": \"heading_2\", \"textContent\": \"={{ $fromAI('objective_title', `short title for the Problem Addressed / Objective section`, 'string') }}\"}, {\"textContent\": \"={{ $fromAI('objective_text', `description of the core problem, question, or goal the article tackles. Keep it focused.`, 'string') }}\"}, {\"type\": \"heading_2\", \"textContent\": \"={{ $fromAI('concepts_title', `title for the Key Concepts / Solution Overview section`, 'string') }}\"}, {\"textContent\": \"={{ $fromAI('concepts_text', `Explain the main ideas, theories, or the high-level approach of the solution presented.`, 'string') }}\"}, {\"type\": \"heading_2\", \"textContent\": \"Technologies & Libraries\"}, {\"text\": {\"text\": [{\"text\": \"={{ $fromAI('technologies_list', `A bulleted list of Technologies, Libraries, Techniques and Patterns Mentioned in the article along with a short description for each`, 'string') }}\", \"annotationUi\": {}}]}, \"richText\": true}, {\"type\": \"heading_2\", \"textContent\": \"Core Code Snippets\"}, {\"textContent\": \"={{ $fromAI('important_code_snippet_description', `1-2 sentences of context explaining what this snippet does or why it's important.`, 'string') }}\"}, {\"text\": {\"text\": [{\"text\": \"={{ $fromAI('important_code_snippet', `The actual code snippet. The AI must ensure this block doesn't exceed 2000 chars. If a crucial snippet is longer, the AI should either prioritize a key part of it or potentially link to the source if available. Specify the language (e.g., python, javascript) for syntax highlighting.`, 'string') }}\", \"annotationUi\": {\"code\": true}}]}, \"richText\": true}, {\"type\": \"heading_2\", \"textContent\": \"Key Takeaways & Conclusion\"}, {\"textContent\": \"={{ $fromAI('conclusions', `A bulleted item list that summarizes the main conclusions, results, or actionable insights from the article.`, 'string') }}\"}]}, \"options\": {\"icon\": \"={{ $fromAI('Icon', `Pick an emoji that would be good as an icon for this article. Remember, this should be a single emoji`, 'string') }}\"}, \"resource\": \"数据库页\", \"databaseId\": {\"__rl\": true, \"mode\": \"list\", \"value\": \"1c385086-bf58-80a1-a60f-dbc96d64413f\", \"cachedResultUrl\": \"https://www.notion.so/1c385086bf5880a1a60fdbc96d64413f\", \"cachedResultName\": \"Knowledge Database\"}, \"propertiesUi\": {\"propertyValues\": [{\"key\": \"Description|rich_text\", \"textContent\": \"={{ $fromAI('Description', `Short description of what the article is about`, 'string') }}\"}, {\"key\": \"URL|url\", \"urlValue\": \"={{ $fromAI('URL', `The URL where this article resides.`, 'string') }}\"}, {\"key\": \"Tags|multi_select\", \"multiSelectValue\": \"={{ $fromAI('Tags', `General (generic) tags that would be relevant for this article, such as technologies used / talked about, programming language, techniques and so on! Keep them generic not ultra specific.`, 'string') }}\"}, {\"key\": \"Publication Date|date\", \"date\": \"={{ $fromAI('publication_date', `The date this article was published if available on the page.`, 'string') }}\", \"includeTime\": false}]}, \"descriptionType\": \"手动\", \"toolDescription\": \"save_to_notion: 此工具将信息保存至Notion数据库。\"}, \"credentials\": {\"notionApi\": {\"id\": \"MDVhXc92xUP3UjxB\", \"name\": \"Notion account\"}}, \"notesInFlow\": false, \"typeVersion\": 2.2}, {\"id\": \"0e70e938-97ac-4aa0-80c1-8f7c9c519b9d\", \"name\": \"Discord通知\", \"type\": \"n8n-nodes-base.discordTool\", \"position\": [-420, -100], \"webhookId\": \"617fa695-5a0a-464e-b3f2-bcd77ab5965b\", \"parameters\": {\"embeds\": {\"values\": [{\"url\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('URL', ``, 'string') }}\", \"title\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}\", \"description\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', ``, 'string') }}\"}]}, \"content\": \"ℹ️ 操作已完成。\", \"guildId\": {\"__rl\": true, \"mode\": \"list\", \"value\": \"1207038600731168821\", \"cachedResultUrl\": \"https://discord.com/channels/1207038600731168821\", \"cachedResultName\": \"Let's Talk Dev Community\"}, \"options\": {}, \"resource\": \"消息\", \"channelId\": {\"__rl\": true, \"mode\": \"list\", \"value\": \"1354563802854723774\", \"cachedResultUrl\": \"https://discord.com/channels/1207038600731168821/1354563802854723774\", \"cachedResultName\": \"research\"}}, \"credentials\": {\"discordBotApi\": {\"id\": \"LfVy6XSgcAgRUPSS\", \"name\": \"Discord Bot account\"}}, \"typeVersion\": 2}, {\"id\": \"ee123a65-f0db-45e8-8e78-618b6c2b74e9\", \"name\": \"保存文章到Notion\", \"type\": \"@n8n/n8n-nodes-langchain.agent\", \"onError\": \"continueErrorOutput\", \"position\": [-700, -320], \"parameters\": {\"options\": {\"systemMessage\": \"=You will receive a URL. Your task is to:\\n1. use the website_scraper to scrape the provided URL!\\n2. use the save_to_notion tool to save the information to Notion.\\n3. use the discord_notification tool to send a notification that the research is available, along with the notion URL of the created page.\\n\\n## Tools\\nThe save_to_notion tool expects the following parameters:\\n* title: the original title of the article\\n* description: short description of what the article is about\\n* url: the URL where this article resides.\\n* tags: general (generic) tags that would be relevant for this article, such as technologies used / talked about, programming language, techniques and so on! Keep them generic not ultra specific.\\n* publication_date: The date this article was published if available on the page.\\n* summary: 1-3 sentence summary capturing the absolute essence of this article\\n* objective_title: short title for the section about the problem addressed / objective\\n* objective_text: description of the core problem, question, or goal the article tackles. Keep it focused.\\n* concepts_title: title for the Key Concepts / Solution Overview section\\n* concepts_text: explain the main ideas, theories, or the high-level approach of the solution presented. \\n* technologies_list: A bulleted list of Technologies, Libraries, Techniques and Patterns Mentioned in the article along with a short description for each.\\n* important_code_snippet_description: Description for The most important code snippet in the article. 1-2 sentences of context explaining what this snippet does or why it's important.\\n* important_code_snippet: The actual code snippet. The AI must ensure this block doesn't exceed 2000 chars. If a crucial snippet is longer, the AI should either prioritize a key part of it or potentially link to the source if available. Specify the language (e.g., python, javascript) for syntax highlighting.\\n* conclusions: A bulleted item list that summarizes the main conclusions, results, or actionable insights from the article.\\n* icon: an emoji that represents this article best!\\n\\nRemember you always have to scrape the website using the website_scraper tool. Don't try to summarize without scraping!\\nAlways save the results to notion using the save_to_notion tool. Only execute this tool once!\"}}, \"executeOnce\": true, \"notesInFlow\": false, \"typeVersion\": 1.7}, {\"id\": \"4a7f0a06-0d5f-4013-964c-fcc272484ff4\", \"name\": \"当收到聊天消息时\", \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\", \"position\": [-1000, -320], \"webhookId\": \"3e4878bb-dcb4-4591-975f-8f279605e90b\", \"parameters\": {\"public\": true, \"options\": {}}, \"typeVersion\": 1.1}, {\"id\": \"5bcfe9f7-a58f-4851-8ac4-ad6de06705df\", \"name\": \"便利贴\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-1060, -120], \"parameters\": {\"width\": 340, \"height\": 260, \"content\": \"## Google Gemini AI模型\\n\\n我选择它是因为其超长上下文窗口和极速响应。欢迎尝试其他AI模型进行探索。\"}, \"typeVersion\": 1}, {\"id\": \"8a1ef34e-9f27-4e68-8ef2-34c488463512\", \"name\": \"便利贴1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-280, -420], \"parameters\": {\"width\": 380, \"height\": 460, \"content\": \"## Browserless (https://www.browserless.io/)\\n\\n我使用Browserless作为自托管的Docker容器（与n8n一同部署）。您也可以选择Browserless的云端版本或其他任何网页抓取工具/API。\\n\\n由于没有现成的Browserless专用工具，我们可以直接使用通用HTTP请求工具来调用Browserless的API接口。\"}, \"typeVersion\": 1}, {\"id\": \"dfba5742-663c-4b8c-a971-de120c8f73c1\", \"name\": \"便利贴2\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-1980, -820], \"parameters\": {\"width\": 860, \"height\": 980, \"content\": \"## 配置指南\\n\\n1.  **导入工作流:** 将此模板导入您的n8n实例\\n2.  **配置凭证与Notion数据库:**\\n    * **Notion数据库:**\\n        * 创建或指定一个Notion数据库（如示例\\\"知识库\\\"）用于保存文章\\n        * 确保数据库包含以下字段属性:\\n            * `名称` (类型: 文本) - *用于存储文章标题*\\n            * `链接` (类型: URL) - *用于存储原文网址*\\n            * `摘要` (类型: 文本) - *用于存储AI生成的摘要*\\n            * `标签` (类型: 多选) - *可选，用于分类*\\n            * `发布日期` (类型: 日期) - *可选，存储文章发表日期*\\n        * 确保n8n集成有权限访问该数据库\\n        * 如需不同格式的Notion数据库，请注意需相应调整n8n工作流中的Notion工具配置\\n    * **Notion凭证:** 获取Notion API密钥并在n8n中添加为凭证，在`save_to_notion`工具节点中选择该凭证\\n    * **配置`save_to_notion`工具:** 在工作流的Notion工具节点中，将'数据库ID'设置为上述数据库的ID。将工作流数据（URL、AI摘要等）映射到对应的数据库属性。您可以在Notion工具的区块部分自定义研究页面格式，让AI精确提取您需要的网页内容！\\n    * **Google Gemini AI:** 从[Google AI Studio](https://aistudio.google.com/app/apikey)或Google云控制台（如使用Vertex AI）获取API密钥并添加为凭证，在\\\"Tools Agent\\\"节点中选择该凭证\\n    * **Discord(或其他通知服务):** 如需Discord通知，创建Webhook URL([教程](https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks))或设置Bot Token。在n8n中添加凭证并在`discord_notification`工具节点中选择，配置目标频道ID\\n    * **Browserless/HTTP请求:**\\n        * **云端版:** 从[Browserless](https://www.browserless.io/)获取API密钥，在`website_scraper`HTTP请求工具节点中配置正确的API端点和认证头\\n        * **自托管版:** 确保Browserless Docker容器正在运行且n8n可访问，在HTTP请求工具节点中配置自托管实例URL\\n6.  **激活工作流:** 保存测试并激活工作流\\n\\n## 自定义工作流\\n\\n* **更换AI模型:** 如果Gemini 2.5 Pro不符合需求或预算，可在Agent节点尝试n8n支持的其他AI模型（如OpenAI GPT或Anthropic Claude），注意不同模型对长文本处理的上下文窗口和能力差异\\n* **调整Notion存储:** 修改`save_to_notion`工具节点的字段映射（如通过修改AI提示词改变摘要风格、添加特定标签或调整页面内容结构）\\n* **优化网页抓取:** 根据需要调整`website_scraper`工具的指令，或修改发送给Browserless API的参数以提取不同数据。也可通过HTTP请求节点切换其他网页抓取服务\"}, \"typeVersion\": 1}], \"active\": false, \"pinData\": {}, \"settings\": {\"executionOrder\": \"v1\"}, \"versionId\": \"d5328d32-6ee9-4dd6-a68b-8736c85975fe\", \"connections\": {\"Gemini 2.5 PRO\": {\"ai_languageModel\": [[{\"node\": \"Save Article To Notion\", \"type\": \"ai_languageModel\", \"index\": 0}]]}, \"save_to_notion\": {\"ai_tool\": [[{\"node\": \"Save Article To Notion\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"website_scraper\": {\"ai_tool\": [[{\"node\": \"Save Article To Notion\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"discord_notification\": {\"ai_tool\": [[{\"node\": \"Save Article To Notion\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"When chat message received\": {\"main\": [[{\"node\": \"Save Article To Notion\", \"type\": \"main\", \"index\": 0}]]}}}"
}