{
  "title": "Detect hallucinations using specialised Ollama model bespoke-minicheck",
  "url": "https://n8n.io/workflows/2922-detect-hallucinations-using-specialised-ollama-model-bespoke-minicheck/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/?count=20",
  "author": "Guido Zockoll",
  "publish_date": "Last update 2 months ago",
  "content": "",
  "workflow_json": "{\"meta\":{\"instanceId\":\"6e361bfcd1e8378c9b07774b22409c7eaea7080f01d5248da45077c0c6108b99\",\"templateCredsSetupCompleted\":true},\"nodes\":[{\"id\":\"cbc036f7-b0e1-4eb4-94c3-7571c67a1efe\",\"name\":\"Code\",\"type\":\"n8n-nodes-base.code\",\"position\":[-120,40],\"parameters\":{\"mode\":\"runOnceForEachItem\",\"jsCode\":\"// Get the input text\\nconst text = $input.item.json.text;\\n\\n// Ensure text is not null or undefined\\nif (!text) {\\n  throw new Error('Input text is empty');\\n}\\n\\n// Function to split text into sentences while preserving dates and list items\\nfunction splitIntoSentences(text) {\\n  const monthNames = '(?:Januar|Februar|März|April|Mai|Juni|Juli|August|September|Oktober|November|Dezember)';\\n  const datePattern = `(?:\\\\\\\\d{1,2}\\\\\\\\.\\\\\\\\s*(?:${monthNames}|\\\\\\\\d{1,2}\\\\\\\\.)\\\\\\\\s*\\\\\\\\d{2,4})`;\\n  \\n  // Split by sentence-ending punctuation, but not within dates or list items\\n  const regex = new RegExp(`(?<=[.!?])\\\\\\\\s+(?=[A-ZÄÖÜ]|$)(?!${datePattern}|\\\\\\\\s*[-•]\\\\\\\\s)`, 'g');\\n  \\n  return text.split(regex)\\n    .map(sentence => sentence.trim())\\n    .filter(sentence => sentence !== '');\\n}\\n\\n// Split the text into sentences\\nconst sentences = splitIntoSentences(text);\\n\\n// Output a single object with an array of sentences\\nreturn { json: { sentences: sentences } };\"},\"typeVersion\":2},{\"id\":\"faae4740-a529-4275-be0e-b079c3bfde58\",\"name\":\"Split Out1\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[340,-180],\"parameters\":{\"options\":{\"destinationFieldName\":\"claim\"},\"fieldToSplitOut\":\"sentences\"},\"typeVersion\":1},{\"id\":\"c3944f89-e267-4df0-8fc4-9281eac4e759\",\"name\":\"Basic LLM Chain4\",\"type\":\"@n8n/n8n-nodes-langchain.chainLlm\",\"position\":[640,-40],\"parameters\":{\"text\":\"=Document: {{ $('Merge1').item.json.facts }}\\nClaim: {{ $json.claim }}\",\"promptType\":\"define\"},\"typeVersion\":1.5},{\"id\":\"4e53c7f1-ab9f-42be-a253-9328b209fc68\",\"name\":\"Ollama Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOllama\",\"position\":[700,160],\"parameters\":{\"model\":\"bespoke-minicheck:latest\",\"options\":{}},\"credentials\":{\"ollamaApi\":{\"id\":\"DeuK54dDNrCCnXHl\",\"name\":\"Ollama account\"}},\"typeVersion\":1},{\"id\":\"0252e47e-0e50-4024-92a0-74b554c8cbd1\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[-760,40],\"parameters\":{},\"typeVersion\":1},{\"id\":\"8dd3f67c-e36f-4b03-8f9f-9b52ea23e0ed\",\"name\":\"Edit Fields\",\"type\":\"n8n-nodes-base.set\",\"position\":[-460,40],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"55748f38-486f-495f-91ec-02c1d49acf18\",\"name\":\"facts\",\"type\":\"string\",\"value\":\"Sara Beery came to MIT as an assistant professor in MIT’s Department of Electrical Engineering and Computer Science (EECS) eager to focus on ecological challenges. She has fashioned her research career around the opportunity to apply her expertise in computer vision, machine learning, and data science to tackle real-world issues in conservation and sustainability. Beery was drawn to the Institute’s commitment to “computing for the planet,” and set out to bring her methods to global-scale environmental and biodiversity monitoring.\\n\\nIn the Pacific Northwest, salmon have a disproportionate impact on the health of their ecosystems, and their complex reproductive needs have attracted Beery’s attention. Each year, millions of salmon embark on a migration to spawn. Their journey begins in freshwater stream beds where the eggs hatch. Young salmon fry (newly hatched salmon) make their way to the ocean, where they spend several years maturing to adulthood. As adults, the salmon return to the streams where they were born in order to spawn, ensuring the continuation of their species by depositing their eggs in the gravel of the stream beds. Both male and female salmon die shortly after supplying the river habitat with the next generation of salmon.\"},{\"id\":\"7d8e29db-4a4b-47c5-8c93-fda1e72137a7\",\"name\":\"text\",\"type\":\"string\",\"value\":\"MIT's AI Pioneer Tackles Salmon Conservation  Professor Sara Beery, a rising star in MIT's Department of Electrical Engineering and Computer Science, is revolutionizing ecological conservation through cutting-edge technology. Specializing in computer vision, machine learning, and data science, Beery has set her sights on addressing real-world sustainability challenges.  Her current focus? The vital salmon populations of the Pacific Northwest. These fish play a crucial role in their ecosystems, with their complex life cycle spanning from freshwater streams to the open ocean and back again. Beery's innovative approach uses AI to monitor salmon migration patterns, providing unprecedented insights into their behavior and habitat needs.  Beery's work has led to the development of underwater AI cameras that can distinguish between different salmon species with 99.9% accuracy. Her team has also created a revolutionary \\\"salmon translator\\\" that can predict spawning locations based on fish vocalizations.  As climate change threatens these delicate ecosystems, Beery's research offers hope for more effective conservation strategies. By harnessing the power of technology, she's not just studying nature – she's actively working to preserve it for future generations.\"}]}},\"typeVersion\":3.4},{\"id\":\"25849b47-1550-464c-9e70-e787712e5765\",\"name\":\"Merge\",\"type\":\"n8n-nodes-base.merge\",\"position\":[1120,-160],\"parameters\":{\"mode\":\"combine\",\"options\":{},\"combineBy\":\"combineByPosition\"},\"typeVersion\":3},{\"id\":\"eaea7ef4-a5d5-42b8-b262-e9a4bd6b7281\",\"name\":\"Filter\",\"type\":\"n8n-nodes-base.filter\",\"position\":[1340,-160],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"20a4ffd6-0dd0-44f9-97bc-7d891f689f4d\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.text }}\",\"rightValue\":\"No\"}]}},\"typeVersion\":2.2},{\"id\":\"9f074bdb-b1a6-4c36-be1c-203f78092657\",\"name\":\"When Executed by Another Workflow\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[-760,-200],\"parameters\":{\"workflowInputs\":{\"values\":[{\"name\":\"facts\"},{\"name\":\"text\"}]}},\"typeVersion\":1.1},{\"id\":\"0a08ac40-b497-4f6e-ac2c-2213a00d63f2\",\"name\":\"Aggregate\",\"type\":\"n8n-nodes-base.aggregate\",\"position\":[1560,-160],\"parameters\":{\"options\":{},\"aggregate\":\"aggregateAllItemData\"},\"typeVersion\":1},{\"id\":\"b0d79886-01fc-43c7-88fe-a7a5b8b56b35\",\"name\":\"Merge1\",\"type\":\"n8n-nodes-base.merge\",\"position\":[80,-180],\"parameters\":{\"mode\":\"combine\",\"options\":{},\"combineBy\":\"combineByPosition\"},\"typeVersion\":3},{\"id\":\"82640408-9db4-4a12-9136-1a22985b609b\",\"name\":\"Basic LLM Chain\",\"type\":\"@n8n/n8n-nodes-langchain.chainLlm\",\"position\":[1780,-160],\"parameters\":{\"text\":\"={{ $json.data }}\",\"messages\":{\"messageValues\":[{\"message\":\"You are a fact-checking assistant. Your task is to analyze a list of statements, each accompanied by a \\\"yes\\\" or \\\"no\\\" indicating whether the statement is correct. Follow these guidelines:\\n\\n1. Review Process:\\n   a) Carefully read through each statement and its corresponding yes/no answer.\\n   b) Identify which statements are marked as incorrect (no).\\n   c) Ignore chit-chat sentences or statements that don't contain factual information.\\n   d) Count the total number of incorrect factual statements.\\n\\n2. Statement Classification:\\n   - Factual Statements: Contains specific information, data, or claims that can be verified.\\n   - Chit-chat/Non-factual: General comments, introductions, or transitions that don't present verifiable facts.\\n\\n3. Summary Structure:\\n   a) Overview: Provide a brief summary of the number of factual errors found.\\n   b) List of Problems: Enumerate the incorrect factual statements.\\n   c) Final Assessment: Offer a concise evaluation of the overall state of the article's factual accuracy.\\n\\n4. Prioritization:\\n   - Focus only on the factual statements marked as incorrect (no).\\n   - Ignore statements marked as correct (yes) and non-factual chit-chat.\\n\\n5. Feedback Tone:\\n   - Maintain a neutral and objective tone.\\n   - Present the information factually without additional commentary.\\n\\n6. Output Format:\\n   Present your summary in the following structure:\\n\\n   ## Problem Summary\\n   [Number] incorrect factual statements were identified in the article.\\n\\n   ## List of Incorrect Factual Statements\\n   1. [First incorrect factual statement]\\n   2. [Second incorrect factual statement]\\n   3. [Third incorrect factual statement]\\n   (Continue listing all incorrect factual statements)\\n\\n   ## Final Assessment\\n   Based on the number of incorrect factual statements:\\n   - If 0-1 errors: The article appears to be highly accurate and may only need minor factual adjustments.\\n   - If 2-3 errors: The article requires some revision to address these factual inaccuracies.\\n   - If 4 or more errors: The article needs significant revision to improve its factual accuracy.\\n\\nRemember, your role is to provide a clear, concise summary of the incorrect factual statements to help the writing team quickly understand what needs to be addressed. Ignore any chit-chat or non-factual statements in your analysis and summary.\"}]},\"promptType\":\"define\"},\"typeVersion\":1.5},{\"id\":\"719054ef-0863-4e52-8390-23313c750aac\",\"name\":\"Ollama Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmOllama\",\"position\":[1880,60],\"parameters\":{\"model\":\"qwen2.5:1.5b\",\"options\":{}},\"credentials\":{\"ollamaApi\":{\"id\":\"DeuK54dDNrCCnXHl\",\"name\":\"Ollama account\"}},\"typeVersion\":1},{\"id\":\"6595eb25-32ce-49f5-a013-b87d7f3c65d3\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1480,-320],\"parameters\":{\"width\":860,\"height\":600,\"content\":\"## Build a summary\\n\\nThis is useful to run it in an agentic workflow. You may remove the summary part and return the raw array with the found issues.\"},\"typeVersion\":1},{\"id\":\"9f6cde97-d2a7-44e4-b715-321ec1e68bd3\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-240,-320],\"parameters\":{\"width\":760,\"height\":600,\"content\":\"## Split into sentences\"},\"typeVersion\":1},{\"id\":\"1ceb8f3c-c00b-4496-82b2-20578550c4be\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[540,-320],\"parameters\":{\"width\":920,\"height\":600,\"content\":\"## Fact checking\\n\\nThis use a small ollama model that is specialized on that task: https://ollama.com/library/bespoke-minicheck\\n\\nYou have to install it before use with `ollama pull bespoke-minicheck`.\"},\"typeVersion\":1},{\"id\":\"6e340925-d4e5-4fe1-ba9d-a89a23b68226\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-860,-20],\"parameters\":{\"width\":600,\"height\":300,\"content\":\"## Test workflow\\n\"},\"typeVersion\":1},{\"id\":\"5561d606-93d2-4887-839d-8ce2230ff30c\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-860,-320],\"parameters\":{\"width\":600,\"height\":280,\"content\":\"## Entrypoint to use in other workflows\\n\"},\"typeVersion\":1}],\"pinData\":{},\"connections\":{\"Code\":{\"main\":[[{\"node\":\"Merge1\",\"type\":\"main\",\"index\":1}]]},\"Merge\":{\"main\":[[{\"node\":\"Filter\",\"type\":\"main\",\"index\":0}]]},\"Filter\":{\"main\":[[{\"node\":\"Aggregate\",\"type\":\"main\",\"index\":0}]]},\"Merge1\":{\"main\":[[{\"node\":\"Split Out1\",\"type\":\"main\",\"index\":0}]]},\"Aggregate\":{\"main\":[[{\"node\":\"Basic LLM Chain\",\"type\":\"main\",\"index\":0}]]},\"Split Out1\":{\"main\":[[{\"node\":\"Merge\",\"type\":\"main\",\"index\":0},{\"node\":\"Basic LLM Chain4\",\"type\":\"main\",\"index\":0}]]},\"Edit Fields\":{\"main\":[[{\"node\":\"Code\",\"type\":\"main\",\"index\":0},{\"node\":\"Merge1\",\"type\":\"main\",\"index\":0}]]},\"Ollama Model\":{\"ai_languageModel\":[[{\"node\":\"Basic LLM Chain\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Basic LLM Chain4\":{\"main\":[[{\"node\":\"Merge\",\"type\":\"main\",\"index\":1}]]},\"Ollama Chat Model\":{\"ai_languageModel\":[[{\"node\":\"Basic LLM Chain4\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"When Executed by Another Workflow\":{\"main\":[[{\"node\":\"Code\",\"type\":\"main\",\"index\":0},{\"node\":\"Merge1\",\"type\":\"main\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"Edit Fields\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "# Fact-Checking Workflow Documentation\n\n## Overview\n\nThis workflow is designed for automated fact-checking of texts. It uses AI models to compare a given text with a list of facts and identify potential discrepancies or hallucinations.\n\n## Components\n\n### 1\\. Input\n\n  * The workflow can be initiated in two ways:  \na) Manually via the \"When clicking 'Test workflow'\" trigger  \nb) By calling from another workflow via the \"When Executed by Another Workflow\" trigger\n  * Required inputs: \n    * `facts`: A list of verified facts\n    * `text`: The text to be checked\n\n\n\n### 2\\. Text Preparation\n\n  * The \"Code\" node splits the input text into individual sentences\n  * Takes into account date specifications and list elements\n\n\n\n### 3\\. Fact Checking\n\n  * Each sentence is individually compared with the given facts\n  * Uses the \"bespoke-minicheck\" Ollama model for verification\n  * The model responds with \"Yes\" or \"No\" for each sentence\n\n\n\n### 4\\. Filtering and Aggregation\n\n  * Sentences marked as \"No\" (not fact-based) are filtered\n  * The filtered results are aggregated\n\n\n\n### 5\\. Summary\n\n  * A larger language model (Qwen2.5) creates a summary of the results\n  * The summary contains: \n    * Number of incorrect factual statements\n    * List of incorrect statements\n    * Final assessment of the article's accuracy\n\n\n\n## Usage\n\n  1. Ensure the \"bespoke-minicheck\" model is installed in Ollama (`ollama pull bespoke-minicheck`)\n  2. Prepare a list of verified facts\n  3. Enter the text to be checked\n  4. Start the workflow\n  5. The results are output as a structured summary\n\n\n\n## Notes\n\n  * The workflow ignores small talk and focuses on verifiable factual statements\n  * Accuracy depends on the quality of the provided facts and the performance of the AI models\n\n\n\n## Customization Options\n\n  * The summarization function can be adjusted or removed to return only the raw data of the issues found\n  * The AI models used can be exchanged if needed\n\n\n\nThis workflow provides an efficient method for automated fact-checking and can be easily integrated into larger systems or editorial workflows.\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><h1>Fact-Checking Workflow Documentation</h1>\n<h2>Overview</h2>\n<p>This workflow is designed for automated fact-checking of texts. It uses AI models to compare a given text with a list of facts and identify potential discrepancies or hallucinations.</p>\n<h2>Components</h2>\n<h3>1. Input</h3>\n<ul>\n<li>The workflow can be initiated in two ways:<br>\na) Manually via the \"When clicking 'Test workflow'\" trigger<br>\nb) By calling from another workflow via the \"When Executed by Another Workflow\" trigger</li>\n<li>Required inputs:\n<ul>\n<li><code>facts</code>: A list of verified facts</li>\n<li><code>text</code>: The text to be checked</li>\n</ul>\n</li>\n</ul>\n<h3>2. Text Preparation</h3>\n<ul>\n<li>The \"Code\" node splits the input text into individual sentences</li>\n<li>Takes into account date specifications and list elements</li>\n</ul>\n<h3>3. Fact Checking</h3>\n<ul>\n<li>Each sentence is individually compared with the given facts</li>\n<li>Uses the \"bespoke-minicheck\" Ollama model for verification</li>\n<li>The model responds with \"Yes\" or \"No\" for each sentence</li>\n</ul>\n<h3>4. Filtering and Aggregation</h3>\n<ul>\n<li>Sentences marked as \"No\" (not fact-based) are filtered</li>\n<li>The filtered results are aggregated</li>\n</ul>\n<h3>5. Summary</h3>\n<ul>\n<li>A larger language model (Qwen2.5) creates a summary of the results</li>\n<li>The summary contains:\n<ul>\n<li>Number of incorrect factual statements</li>\n<li>List of incorrect statements</li>\n<li>Final assessment of the article's accuracy</li>\n</ul>\n</li>\n</ul>\n<h2>Usage</h2>\n<ol>\n<li>Ensure the \"bespoke-minicheck\" model is installed in Ollama (<code>ollama pull bespoke-minicheck</code>)</li>\n<li>Prepare a list of verified facts</li>\n<li>Enter the text to be checked</li>\n<li>Start the workflow</li>\n<li>The results are output as a structured summary</li>\n</ol>\n<h2>Notes</h2>\n<ul>\n<li>The workflow ignores small talk and focuses on verifiable factual statements</li>\n<li>Accuracy depends on the quality of the provided facts and the performance of the AI models</li>\n</ul>\n<h2>Customization Options</h2>\n<ul>\n<li>The summarization function can be adjusted or removed to return only the raw data of the issues found</li>\n<li>The AI models used can be exchanged if needed</li>\n</ul>\n<p>This workflow provides an efficient method for automated fact-checking and can be easily integrated into larger systems or editorial workflows.</p>\n</div><!--]-->",
  "readme_zh": "# 事实核查工作流程文档\n\n## 概述\n\n本工作流程专为文本自动化事实核查设计，通过AI模型将给定文本与事实清单进行比对，识别潜在差异或虚构内容。\n\n## 组件构成\n\n### 1. 输入模块\n\n  * 两种启动方式：  \na) 通过\"点击'测试工作流程'\"触发器手动启动  \nb) 通过\"被其他工作流程调用\"触发器启动\n  * 必要输入项： \n    * `facts`：已验证事实清单\n    * `text`：待核查文本\n\n### 2. 文本预处理\n\n  * \"代码\"节点将输入文本拆分为独立句子\n  * 自动识别日期说明和列表元素\n\n### 3. 事实核查\n\n  * 逐句比对给定事实\n  * 采用Ollama平台的\"bespoke-minicheck\"模型进行验证\n  * 模型对每句返回\"是/否\"判定\n\n### 4. 结果筛选与汇总\n\n  * 筛选标记为\"否\"(非事实陈述)的句子\n  * 对筛选结果进行聚合处理\n\n### 5. 总结报告\n\n  * 由大语言模型(Qwen2.5)生成结果摘要\n  * 摘要包含： \n    * 错误事实陈述数量\n    * 错误陈述清单\n    * 文章准确性的最终评估\n\n## 使用指南\n\n  1. 确保Ollama已安装\"bespoke-minicheck\"模型(`ollama pull bespoke-minicheck`)\n  2. 准备已验证事实清单\n  3. 输入待核查文本\n  4. 启动工作流程\n  5. 获取结构化摘要输出\n\n## 注意事项\n\n  * 本流程自动忽略寒暄内容，专注可验证的事实陈述\n  * 准确度取决于提供事实的质量及AI模型性能\n\n## 定制选项\n\n  * 可调整或移除摘要功能仅返回原始问题数据\n  * 可根据需要更换AI模型\n\n本工作流程提供高效的事实自动化核查方案，可轻松集成至大型系统或编辑流程中。",
  "title_zh": "使用定制的Ollama专用模型bespoke-minicheck检测幻觉",
  "publish_date_absolute": "2025-03-05",
  "publish_date_zh": "最后更新于2个月前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"6e361bfcd1e8378c9b07774b22409c7eaea7080f01d5248da45077c0c6108b99\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"cbc036f7-b0e1-4eb4-94c3-7571c67a1efe\",\n      \"name\": \"Code\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        -120,\n        40\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"// Get the input text\\nconst text = $input.item.json.text;\\n\\n// Ensure text is not null or undefined\\nif (!text) {\\n  throw new Error('Input text is empty');\\n}\\n\\n// Function to split text into sentences while preserving dates and list items\\nfunction splitIntoSentences(text) {\\n  const monthNames = '(?:Januar|Februar|März|April|Mai|Juni|Juli|August|September|Oktober|November|Dezember)';\\n  const datePattern = `(?:\\\\\\\\d{1,2}\\\\\\\\.\\\\\\\\s*(?:${monthNames}|\\\\\\\\d{1,2}\\\\\\\\.)\\\\\\\\s*\\\\\\\\d{2,4})`;\\n  \\n  // Split by sentence-ending punctuation, but not within dates or list items\\n  const regex = new RegExp(`(?<=[.!?])\\\\\\\\s+(?=[A-ZÄÖÜ]|$)(?!${datePattern}|\\\\\\\\s*[-•]\\\\\\\\s)`, 'g');\\n  \\n  return text.split(regex)\\n    .map(sentence => sentence.trim())\\n    .filter(sentence => sentence !== '');\\n}\\n\\n// Split the text into sentences\\nconst sentences = splitIntoSentences(text);\\n\\n// Output a single object with an array of sentences\\nreturn { json: { sentences: sentences } };\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"faae4740-a529-4275-be0e-b079c3bfde58\",\n      \"name\": \"Split Out1\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        340,\n        -180\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"destinationFieldName\": \"claim\"\n        },\n        \"fieldToSplitOut\": \"sentences\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c3944f89-e267-4df0-8fc4-9281eac4e759\",\n      \"name\": \"Basic LLM Chain4\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        640,\n        -40\n      ],\n      \"parameters\": {\n        \"text\": \"=Document: {{ $('Merge1').item.json.facts }}\\nClaim: {{ $json.claim }}\",\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.5\n    },\n    {\n      \"id\": \"4e53c7f1-ab9f-42be-a253-9328b209fc68\",\n      \"name\": \"Ollama Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOllama\",\n      \"position\": [\n        700,\n        160\n      ],\n      \"parameters\": {\n        \"model\": \"bespoke-minicheck:latest\",\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"ollamaApi\": {\n          \"id\": \"DeuK54dDNrCCnXHl\",\n          \"name\": \"Ollama account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"0252e47e-0e50-4024-92a0-74b554c8cbd1\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -760,\n        40\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8dd3f67c-e36f-4b03-8f9f-9b52ea23e0ed\",\n      \"name\": \"Edit Fields\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -460,\n        40\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"55748f38-486f-495f-91ec-02c1d49acf18\",\n              \"name\": \"facts\",\n              \"type\": \"string\",\n              \"value\": \"Sara Beery came to MIT as an assistant professor in MIT’s Department of Electrical Engineering and Computer Science (EECS) eager to focus on ecological challenges. She has fashioned her research career around the opportunity to apply her expertise in computer vision, machine learning, and data science to tackle real-world issues in conservation and sustainability. Beery was drawn to the Institute’s commitment to “computing for the planet,” and set out to bring her methods to global-scale environmental and biodiversity monitoring.\\n\\nIn the Pacific Northwest, salmon have a disproportionate impact on the health of their ecosystems, and their complex reproductive needs have attracted Beery’s attention. Each year, millions of salmon embark on a migration to spawn. Their journey begins in freshwater stream beds where the eggs hatch. Young salmon fry (newly hatched salmon) make their way to the ocean, where they spend several years maturing to adulthood. As adults, the salmon return to the streams where they were born in order to spawn, ensuring the continuation of their species by depositing their eggs in the gravel of the stream beds. Both male and female salmon die shortly after supplying the river habitat with the next generation of salmon.\"\n            },\n            {\n              \"id\": \"7d8e29db-4a4b-47c5-8c93-fda1e72137a7\",\n              \"name\": \"text\",\n              \"type\": \"string\",\n              \"value\": \"MIT's AI Pioneer Tackles Salmon Conservation  Professor Sara Beery, a rising star in MIT's Department of Electrical Engineering and Computer Science, is revolutionizing ecological conservation through cutting-edge technology. Specializing in computer vision, machine learning, and data science, Beery has set her sights on addressing real-world sustainability challenges.  Her current focus? The vital salmon populations of the Pacific Northwest. These fish play a crucial role in their ecosystems, with their complex life cycle spanning from freshwater streams to the open ocean and back again. Beery's innovative approach uses AI to monitor salmon migration patterns, providing unprecedented insights into their behavior and habitat needs.  Beery's work has led to the development of underwater AI cameras that can distinguish between different salmon species with 99.9% accuracy. Her team has also created a revolutionary \\\"salmon translator\\\" that can predict spawning locations based on fish vocalizations.  As climate change threatens these delicate ecosystems, Beery's research offers hope for more effective conservation strategies. By harnessing the power of technology, she's not just studying nature – she's actively working to preserve it for future generations.\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"25849b47-1550-464c-9e70-e787712e5765\",\n      \"name\": \"Merge\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        1120,\n        -160\n      ],\n      \"parameters\": {\n        \"mode\": \"combine\",\n        \"options\": {},\n        \"combineBy\": \"combineByPosition\"\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"eaea7ef4-a5d5-42b8-b262-e9a4bd6b7281\",\n      \"name\": \"Filter\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        1340,\n        -160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"20a4ffd6-0dd0-44f9-97bc-7d891f689f4d\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.text }}\",\n              \"rightValue\": \"No\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"9f074bdb-b1a6-4c36-be1c-203f78092657\",\n      \"name\": \"When Executed by Another Workflow\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        -760,\n        -200\n      ],\n      \"parameters\": {\n        \"workflowInputs\": {\n          \"values\": [\n            {\n              \"name\": \"facts\"\n            },\n            {\n              \"name\": \"text\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"0a08ac40-b497-4f6e-ac2c-2213a00d63f2\",\n      \"name\": \"Aggregate\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        1560,\n        -160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"aggregate\": \"aggregateAllItemData\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b0d79886-01fc-43c7-88fe-a7a5b8b56b35\",\n      \"name\": \"Merge1\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        80,\n        -180\n      ],\n      \"parameters\": {\n        \"mode\": \"combine\",\n        \"options\": {},\n        \"combineBy\": \"combineByPosition\"\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"82640408-9db4-4a12-9136-1a22985b609b\",\n      \"name\": \"Basic LLM Chain\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chainLlm\",\n      \"position\": [\n        1780,\n        -160\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $json.data }}\",\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"You are a fact-checking assistant. Your task is to analyze a list of statements, each accompanied by a \\\"yes\\\" or \\\"no\\\" indicating whether the statement is correct. Follow these guidelines:\\n\\n1. Review Process:\\n   a) Carefully read through each statement and its corresponding yes/no answer.\\n   b) Identify which statements are marked as incorrect (no).\\n   c) Ignore chit-chat sentences or statements that don't contain factual information.\\n   d) Count the total number of incorrect factual statements.\\n\\n2. Statement Classification:\\n   - Factual Statements: Contains specific information, data, or claims that can be verified.\\n   - Chit-chat/Non-factual: General comments, introductions, or transitions that don't present verifiable facts.\\n\\n3. Summary Structure:\\n   a) Overview: Provide a brief summary of the number of factual errors found.\\n   b) List of Problems: Enumerate the incorrect factual statements.\\n   c) Final Assessment: Offer a concise evaluation of the overall state of the article's factual accuracy.\\n\\n4. Prioritization:\\n   - Focus only on the factual statements marked as incorrect (no).\\n   - Ignore statements marked as correct (yes) and non-factual chit-chat.\\n\\n5. Feedback Tone:\\n   - Maintain a neutral and objective tone.\\n   - Present the information factually without additional commentary.\\n\\n6. Output Format:\\n   Present your summary in the following structure:\\n\\n   ## Problem Summary\\n   [Number] incorrect factual statements were identified in the article.\\n\\n   ## List of Incorrect Factual Statements\\n   1. [First incorrect factual statement]\\n   2. [Second incorrect factual statement]\\n   3. [Third incorrect factual statement]\\n   (Continue listing all incorrect factual statements)\\n\\n   ## Final Assessment\\n   Based on the number of incorrect factual statements:\\n   - If 0-1 errors: The article appears to be highly accurate and may only need minor factual adjustments.\\n   - If 2-3 errors: The article requires some revision to address these factual inaccuracies.\\n   - If 4 or more errors: The article needs significant revision to improve its factual accuracy.\\n\\nRemember, your role is to provide a clear, concise summary of the incorrect factual statements to help the writing team quickly understand what needs to be addressed. Ignore any chit-chat or non-factual statements in your analysis and summary.\"\n            }\n          ]\n        },\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.5\n    },\n    {\n      \"id\": \"719054ef-0863-4e52-8390-23313c750aac\",\n      \"name\": \"Ollama Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmOllama\",\n      \"position\": [\n        1880,\n        60\n      ],\n      \"parameters\": {\n        \"model\": \"qwen2.5:1.5b\",\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"ollamaApi\": {\n          \"id\": \"DeuK54dDNrCCnXHl\",\n          \"name\": \"Ollama account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6595eb25-32ce-49f5-a013-b87d7f3c65d3\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1480,\n        -320\n      ],\n      \"parameters\": {\n        \"width\": 860,\n        \"height\": 600,\n        \"content\": \"## 构建摘要\\n\\n这在代理工作流中运行非常有用。您可以移除摘要部分，直接返回发现的问题原始数组。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9f6cde97-d2a7-44e4-b715-321ec1e68bd3\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -240,\n        -320\n      ],\n      \"parameters\": {\n        \"width\": 760,\n        \"height\": 600,\n        \"content\": \"## 拆分成句子\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"1ceb8f3c-c00b-4496-82b2-20578550c4be\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        540,\n        -320\n      ],\n      \"parameters\": {\n        \"width\": 920,\n        \"height\": 600,\n        \"content\": \"## 事实核查\\n\\n此功能使用一个专为此任务优化的小型ollama模型：https://ollama.com/library/bespoke-minicheck\\n\\n使用前需通过命令`ollama pull bespoke-minicheck`安装该模型。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6e340925-d4e5-4fe1-ba9d-a89a23b68226\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -860,\n        -20\n      ],\n      \"parameters\": {\n        \"width\": 600,\n        \"height\": 300,\n        \"content\": \"## 测试工作流程\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5561d606-93d2-4887-839d-8ce2230ff30c\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -860,\n        -320\n      ],\n      \"parameters\": {\n        \"width\": 600,\n        \"height\": 280,\n        \"content\": \"## 供其他工作流使用的入口点\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Code\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge1\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Merge\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filter\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filter\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Merge1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split Out1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Aggregate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Basic LLM Chain\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split Out1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Basic LLM Chain4\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Edit Fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Merge1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Ollama Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Basic LLM Chain\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Basic LLM Chain4\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Ollama Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"Basic LLM Chain4\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When Executed by Another Workflow\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Merge1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Edit Fields\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}