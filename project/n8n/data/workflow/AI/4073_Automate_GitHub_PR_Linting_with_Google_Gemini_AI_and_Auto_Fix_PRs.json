{
  "title": "Automate GitHub PR Linting with Google Gemini AI and Auto-Fix PRs",
  "url": "https://n8n.io/workflows/4073-automate-github-pr-linting-with-google-gemini-ai-and-auto-fix-prs/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/?sort=createdAt:desc",
  "author": "Adam Bertram",
  "publish_date": "Last update 2 days ago",
  "publish_date_absolute": "2025-05-20",
  "content": "",
  "workflow_json": "{\"id\":\"mfAxsn2XqfEzDtYr\",\"meta\":{\"instanceId\":\"24ca526572eca60ee26bbee4ba7087b1023a6874af4ebeed61b2d126e50e531b\",\"templateCredsSetupCompleted\":true},\"name\":\"LintBot: Your Automated Code Quality Assistant\",\"tags\":[],\"nodes\":[{\"id\":\"8dedfb4b-d477-4fa5-9a9b-68b74450d1fe\",\"name\":\"Listen for Trigger from Github Workflow\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[-1040,-540],\"webhookId\":\"1da5a6e1-9453-4a65-bbac-a1fed633f6ad\",\"parameters\":{\"path\":\"1da5a6e1-9453-4a65-bbac-a1fed633f6ad\",\"options\":{\"responseHeaders\":{\"entries\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"}]}},\"responseMode\":\"responseNode\"},\"typeVersion\":1},{\"id\":\"4bec8f3a-5670-4fe5-916f-b7fab3165880\",\"name\":\"AI Agent\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[1780,-580],\"parameters\":{\"text\":\"=<files>\\n{{ JSON.stringify($json.data) }}\\n</files>\",\"options\":{\"systemMessage\":\"=You are an expert at code linting. Your job is to receive a JSON-formatted request with various file paths and the code inside each file.\\n\\nYou will:\\n\\n1. Look for and fix any linting issues in the files.\\n2. First, check if a branch exists and if, create a new branch using the name {{ $('Get PR GitHub Branch').item.json.head.ref }}-linting-fix. If so, use the existing branch.\\n3. Commit the new files with fixes to the branch.\\n4. Create a PR from that branch with the name: \\\"Linting fixes for PR:{{ $('Listen for Trigger from Github Workflow').item.json.pull_request_number }}\\\"\"},\"promptType\":\"define\"},\"typeVersion\":1.9},{\"id\":\"0e043c94-5b69-41f5-9f27-9dd5ea45a628\",\"name\":\"Respond to Webhook\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"position\":[2200,-660],\"parameters\":{\"options\":{},\"respondWith\":\"allIncomingItems\"},\"typeVersion\":1.2},{\"id\":\"68047540-a8ea-4836-9d5b-3b81515f98fc\",\"name\":\"Get PR Files\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[360,-540],\"parameters\":{\"url\":\"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/pulls/{{ $('Listen for Trigger from Github Workflow').item.json.pull_request_number }}/files\",\"options\":{}},\"typeVersion\":4.2},{\"id\":\"29b9cace-ceaa-446c-a547-ac25c4331d5a\",\"name\":\"Get File Contents\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[580,-540],\"parameters\":{\"url\":\"={{ $json.contents_url }}\",\"options\":{}},\"typeVersion\":4.2},{\"id\":\"a8920578-706a-4ed6-8c58-9be88f16420c\",\"name\":\"Convert Base64 to Text File\",\"type\":\"n8n-nodes-base.convertToFile\",\"position\":[780,-540],\"parameters\":{\"options\":{},\"operation\":\"toBinary\",\"sourceProperty\":\"content\"},\"typeVersion\":1.1},{\"id\":\"1fccb56b-ca82-4c9b-9ede-f669a97067f6\",\"name\":\"Extract from File\",\"type\":\"n8n-nodes-base.extractFromFile\",\"position\":[980,-560],\"parameters\":{\"options\":{},\"operation\":\"text\"},\"typeVersion\":1},{\"id\":\"543be972-e489-4ca0-8a43-d77442081016\",\"name\":\"Create Code/FilePath Object\",\"type\":\"n8n-nodes-base.set\",\"position\":[1200,-560],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"d18801c8-8c93-4c66-add8-0a5915ac3a6f\",\"name\":\"code\",\"type\":\"string\",\"value\":\"={{ $json.data }}\"},{\"id\":\"6da8a116-f59e-481c-a815-acda60e19398\",\"name\":\"filePath\",\"type\":\"string\",\"value\":\"={{ $('Get File Contents').item.json.path }}\"}]}},\"typeVersion\":3.4},{\"id\":\"ac2ac571-5a1c-4f06-b45f-296fc43557c8\",\"name\":\"Collect All Files Changed\",\"type\":\"n8n-nodes-base.aggregate\",\"position\":[1440,-560],\"parameters\":{\"options\":{},\"aggregate\":\"aggregateAllItemData\"},\"typeVersion\":1},{\"id\":\"9062c98b-6937-4411-9a21-6f047084ab78\",\"name\":\"Get PR GitHub Branch\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-580,-520],\"parameters\":{\"url\":\"={{ $json.gitHubApiBaseEndpointUri }}/pulls/{{ $('Listen for Trigger from Github Workflow').item.json.pull_request_number }}\",\"options\":{},\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"githubApi\"},\"credentials\":{\"githubApi\":{\"id\":\"MI5Ul9UqEbdI0RRe\",\"name\":\"GitHub account\"}},\"typeVersion\":4.2},{\"id\":\"8c9f3d57-b73d-46a1-a7f8-b8ea49fbdbd0\",\"name\":\"Create GitHub Blob\",\"type\":\"n8n-nodes-base.httpRequestTool\",\"position\":[1660,-120],\"parameters\":{\"url\":\"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/git/blobs\",\"method\":\"POST\",\"options\":{},\"sendBody\":true,\"authentication\":\"predefinedCredentialType\",\"bodyParameters\":{\"parameters\":[{\"name\":\"content\",\"value\":\"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}\"},{\"name\":\"encoding\",\"value\":\"utf-8\"}]},\"toolDescription\":\"Creates a GitHub blob for a file\",\"nodeCredentialType\":\"githubApi\"},\"credentials\":{\"githubApi\":{\"id\":\"MI5Ul9UqEbdI0RRe\",\"name\":\"GitHub account\"}},\"typeVersion\":4.2},{\"id\":\"3bba3645-f54e-46aa-866f-426404581221\",\"name\":\"Create GitHub Tree\",\"type\":\"n8n-nodes-base.httpRequestTool\",\"position\":[1880,-120],\"parameters\":{\"url\":\"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/git/trees\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={\\n  \\\"base_tree\\\": \\\"{{ $('Get Latest Main Branch Tree Hash').item.json.tree.sha }}\\\",\\n  \\\"tree\\\": {{ $fromAI('json_array_of_files','','string') }}\\n}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"toolDescription\":\"Creates a GitHub tree object with one file\",\"nodeCredentialType\":\"githubApi\"},\"credentials\":{\"githubApi\":{\"id\":\"MI5Ul9UqEbdI0RRe\",\"name\":\"GitHub account\"}},\"typeVersion\":4.2},{\"id\":\"26213bce-5117-475c-98a1-926140cdeec4\",\"name\":\"Create GitHub Commit\",\"type\":\"n8n-nodes-base.httpRequestTool\",\"position\":[2080,-140],\"parameters\":{\"url\":\"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/git/commits\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={\\n  \\\"message\\\": \\\"{{ $fromAI('message', '', 'string').replace(/\\\\n/g, '\\\\\\\\n') }}\\\",\\n  \\\"tree\\\": \\\"{{ $fromAI('treeHash', '', 'string') }}\\\",\\n  \\\"parents\\\": [\\n    \\\"{{ $('Get Latest Main Branch Commit SHA').item.json.object.sha }}\\\"\\n  ]\\n}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"toolDescription\":\"Creates a commit from the new tree. \",\"nodeCredentialType\":\"githubApi\"},\"credentials\":{\"githubApi\":{\"id\":\"MI5Ul9UqEbdI0RRe\",\"name\":\"GitHub account\"}},\"typeVersion\":4.2},{\"id\":\"cb6918d1-4345-4f77-8667-c4ae6c790db5\",\"name\":\"Create Pull Request\",\"type\":\"n8n-nodes-base.httpRequestTool\",\"position\":[2580,-520],\"parameters\":{\"url\":\"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/pulls\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={\\n  \\\"title\\\": \\\"{{ $fromAI('title','','string') }}\\\",\\n  \\\"head\\\": \\\"refs/heads/{{ $fromAI('head','','string') }}\\\",\\n  \\\"base\\\": \\\"main\\\",\\n  \\\"body\\\": \\\"{{ $fromAI('body','','string') }}\\\"\\n}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"toolDescription\":\"Creates a Pull Request\",\"nodeCredentialType\":\"githubApi\"},\"credentials\":{\"githubApi\":{\"id\":\"MI5Ul9UqEbdI0RRe\",\"name\":\"GitHub account\"}},\"typeVersion\":4.2},{\"id\":\"8b9240b2-e23a-4f49-851a-1810d24f1bf3\",\"name\":\"Create Branch\",\"type\":\"n8n-nodes-base.httpRequestTool\",\"position\":[2480,-300],\"parameters\":{\"url\":\"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/git/refs\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"=  {\\n    \\\"ref\\\": \\\"refs/heads/{{ $fromAI('branch_ref','','string') }}\\\",\\n    \\\"sha\\\": \\\"{{ $fromAI('commit_sha','','string') }}\\\"\\n  }\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"toolDescription\":\"Creates a branch to point to the new commit\",\"nodeCredentialType\":\"githubApi\"},\"credentials\":{\"githubApi\":{\"id\":\"MI5Ul9UqEbdI0RRe\",\"name\":\"GitHub account\"}},\"typeVersion\":4.2},{\"id\":\"ea314631-174f-4d03-a947-0710b2870ed1\",\"name\":\"Get Latest Main Branch Commit SHA\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-340,-540],\"parameters\":{\"url\":\"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/git/ref/heads/main\",\"options\":{},\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"githubApi\"},\"credentials\":{\"githubApi\":{\"id\":\"MI5Ul9UqEbdI0RRe\",\"name\":\"GitHub account\"}},\"typeVersion\":4.2},{\"id\":\"36633281-8335-4381-9393-cb1f64390bee\",\"name\":\"Get Latest Main Branch Tree Hash\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[140,-540],\"parameters\":{\"url\":\"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/git/commits/{{ $json.object.sha }}\",\"options\":{},\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"githubApi\"},\"credentials\":{\"githubApi\":{\"id\":\"MI5Ul9UqEbdI0RRe\",\"name\":\"GitHub account\"}},\"typeVersion\":4.2},{\"id\":\"435d5b12-3a71-4dbf-9d5d-97b30b249414\",\"name\":\"Get Branch\",\"type\":\"n8n-nodes-base.httpRequestTool\",\"position\":[2280,-200],\"parameters\":{\"url\":\"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/branches/{{ $fromAI('branch_name','','string') }}\",\"options\":{},\"authentication\":\"predefinedCredentialType\",\"toolDescription\":\"Get a branch from the GitHub repo\",\"nodeCredentialType\":\"githubApi\"},\"credentials\":{\"githubApi\":{\"id\":\"MI5Ul9UqEbdI0RRe\",\"name\":\"GitHub account\"}},\"typeVersion\":4.2},{\"id\":\"b26415fa-b898-4d79-a7da-8f66451f0747\",\"name\":\"Google Gemini Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\"position\":[1500,-340],\"parameters\":{\"options\":{},\"modelName\":\"models/gemini-2.0-flash\"},\"credentials\":{\"googlePalmApi\":{\"id\":\"ARYVKWu9TZzwQ3fB\",\"name\":\"Google Gemini(PaLM) Api account\"}},\"typeVersion\":1},{\"id\":\"9ec4b763-a3c8-4d5b-a50c-64842038a4ba\",\"name\":\"Set Common Fields\",\"type\":\"n8n-nodes-base.code\",\"position\":[-820,-540],\"parameters\":{\"jsCode\":\"const commonFields = {\\n  'gitHubRepoName': 'my-membership',\\n  'gitHubOrgName': 'carved-rock-fitness-gym'\\n}\\ncommonFields['gitHubApiBaseEndpointUri'] = `https://api.github.com/repos/${commonFields.gitHubOrgName}/${commonFields.gitHubRepoName}`\\n\\nreturn commonFields\"},\"typeVersion\":2}],\"active\":false,\"pinData\":{\"Listen for Trigger from Github Workflow\":[{\"json\":{\"pull_request_number\":204}}]},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"17951810-1716-46ae-90bb-d698a6062483\",\"connections\":{\"AI Agent\":{\"main\":[[{\"node\":\"Respond to Webhook\",\"type\":\"main\",\"index\":0}]]},\"Get Branch\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Get PR Files\":{\"main\":[[{\"node\":\"Get File Contents\",\"type\":\"main\",\"index\":0}]]},\"Create Branch\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Extract from File\":{\"main\":[[{\"node\":\"Create Code/FilePath Object\",\"type\":\"main\",\"index\":0}]]},\"Get File Contents\":{\"main\":[[{\"node\":\"Convert Base64 to Text File\",\"type\":\"main\",\"index\":0}]]},\"Set Common Fields\":{\"main\":[[{\"node\":\"Get PR GitHub Branch\",\"type\":\"main\",\"index\":0}]]},\"Create GitHub Blob\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Create GitHub Tree\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Create Pull Request\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Create GitHub Commit\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Get PR GitHub Branch\":{\"main\":[[{\"node\":\"Get Latest Main Branch Commit SHA\",\"type\":\"main\",\"index\":0}]]},\"Google Gemini Chat Model\":{\"ai_languageModel\":[[{\"node\":\"AI Agent\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Collect All Files Changed\":{\"main\":[[{\"node\":\"AI Agent\",\"type\":\"main\",\"index\":0}]]},\"Convert Base64 to Text File\":{\"main\":[[{\"node\":\"Extract from File\",\"type\":\"main\",\"index\":0}]]},\"Create Code/FilePath Object\":{\"main\":[[{\"node\":\"Collect All Files Changed\",\"type\":\"main\",\"index\":0}]]},\"Get Latest Main Branch Tree Hash\":{\"main\":[[{\"node\":\"Get PR Files\",\"type\":\"main\",\"index\":0}]]},\"Get Latest Main Branch Commit SHA\":{\"main\":[[{\"node\":\"Get Latest Main Branch Tree Hash\",\"type\":\"main\",\"index\":0}]]},\"Listen for Trigger from Github Workflow\":{\"main\":[[{\"node\":\"Set Common Fields\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "# LintGuardian: Automated PR Linting with n8n & AI\n\n## What It Does\n\nLintGuardian is an n8n workflow template that automates code quality enforcement for GitHub repositories. When a pull request is created, the workflow automatically analyzes the changed files, identifies linting issues, fixes them, and submits a new PR with corrections. This eliminates manual code style reviews, reduces back-and-forth comments, and lets your team focus on functionality rather than formatting.\n\n## How It Works\n\nThe workflow is triggered by a GitHub webhook when a PR is created. It fetches all changed files from the PR using the GitHub API, processes them through an AI-powered linting service (Google Gemini), and automatically generates fixes. The AI agent then creates a new branch with the corrected files and submits a \"linting fixes\" PR against the original branch. Developers can review and merge these fixes with a single click, keeping code consistently formatted with minimal effort.\n\n## Prerequisites\n\nTo use this template, you'll need:\n\n  1. **n8n instance** : Either self-hosted or using n8n.cloud\n  2. **GitHub repository** : Where you want to enforce linting standards\n  3. **GitHub Personal Access Token** : With permissions for repo access (repo, workflow, admin:repo_hook)\n  4. **Google AI API Key** : For the Gemini language model that powers the linting analysis\n  5. **GitHub webhook** : Configured to send PR creation events to your n8n instance\n\n\n\n## Setup Instructions\n\n  1. **Import the template** into your n8n instance\n  2. **Configure credentials** : \n     * Add your [GitHub Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic) under Credentials → GitHub API\n     * Add your [Google AI API key](https://ai.google.dev/tutorials/setup) under Credentials → Google Gemini API\n  3. **Update repository information** : \n     * Locate the \"Set Common Fields\" code node at the beginning of the workflow\n     * Change the `gitHubRepoName` and `gitHubOrgName` values to match your repository\n    \n    const commonFields = {\n      'gitHubRepoName': 'your-repo-name',\n      'gitHubOrgName': 'your-org-name'\n    }\n    \n\n  4. **Configure the webhook** :  \nCreate a file named `.github/workflows/lint-guardian.yml` in your repository replacing the `Trigger n8n Workflow` step with your webhook:\n         \n         name: Lint Guardian\n         \n         on:\n           pull_request:\n             types: [opened, synchronize]\n         \n         jobs:\n           trigger-linting:\n             runs-on: ubuntu-latest\n             steps:\n               - name: Trigger n8n Workflow\n                 uses: fjogeleit/http-request-action@v1\n                 with:\n                   url: 'https://your-n8n-instance.com/webhook/1da5a6e1-9453-4a65-bbac-a1fed633f6ad'\n                   method: 'POST'\n                   contentType: 'application/json'\n                   data: |\n                     {\n                       \"pull_request_number\": ${{ github.event.pull_request.number }},\n                       \"repository\": \"${{ github.repository }}\",\n                       \"branch\": \"${{ github.event.pull_request.head.ref }}\",\n                       \"base_branch\": \"${{ github.event.pull_request.base.ref }}\"\n                     }\n                   preventFailureOnNoResponse: true\n         \n\n  5. **Customize linting rules** (optional): \n     * Modify the AI Agent's system message to specify your team's linting preferences\n     * Adjust file handling if you have specific file types to focus on or ignore\n\n\n\n## Security Considerations\n\nWhen creating your GitHub Personal Access Token, remember to:\n\n  * Choose the minimal permissions needed (repo, workflow, admin:repo_hook)\n  * Set an appropriate expiration date\n  * Treat your token like a password and store it securely\n  * Consider using GitHub's fine-grained personal access tokens for more limited scope\n\n\n\nAs GitHub [documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#keeping-your-personal-access-tokens-secure) notes: \"Personal access tokens are like passwords, and they share the same inherent security risks.\"\n\n## Extending the Template\n\nYou can enhance this workflow by:\n\n  * Adding Slack notifications when linting fixes are submitted\n  * Creating custom linting rules specific to your team's needs\n  * Expanding it to handle different types of code quality checks\n  * Adding approval steps for more controlled environments\n\n\n\nThis template provides an excellent starting point that you can customize to fit your team's exact workflow and code style requirements.\n",
  "readme_html": "<!--[--><div data-v-859c7806=\"\"><h1>LintGuardian: Automated PR Linting with n8n &amp; AI</h1>\n<h2>What It Does</h2>\n<p>LintGuardian is an n8n workflow template that automates code quality enforcement for GitHub repositories. When a pull request is created, the workflow automatically analyzes the changed files, identifies linting issues, fixes them, and submits a new PR with corrections. This eliminates manual code style reviews, reduces back-and-forth comments, and lets your team focus on functionality rather than formatting.</p>\n<h2>How It Works</h2>\n<p>The workflow is triggered by a GitHub webhook when a PR is created. It fetches all changed files from the PR using the GitHub API, processes them through an AI-powered linting service (Google Gemini), and automatically generates fixes. The AI agent then creates a new branch with the corrected files and submits a \"linting fixes\" PR against the original branch. Developers can review and merge these fixes with a single click, keeping code consistently formatted with minimal effort.</p>\n<h2>Prerequisites</h2>\n<p>To use this template, you'll need:</p>\n<ol>\n<li><strong>n8n instance</strong>: Either self-hosted or using n8n.cloud</li>\n<li><strong>GitHub repository</strong>: Where you want to enforce linting standards</li>\n<li><strong>GitHub Personal Access Token</strong>: With permissions for repo access (repo, workflow, admin:repo_hook)</li>\n<li><strong>Google AI API Key</strong>: For the Gemini language model that powers the linting analysis</li>\n<li><strong>GitHub webhook</strong>: Configured to send PR creation events to your n8n instance</li>\n</ol>\n<h2>Setup Instructions</h2>\n<ol>\n<li><strong>Import the template</strong> into your n8n instance</li>\n<li><strong>Configure credentials</strong>:\n<ul>\n<li>Add your <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic\" rel=\"ugc nofollow\" target=\"_blank\">GitHub Personal Access Token</a> under Credentials → GitHub API</li>\n<li>Add your <a href=\"https://ai.google.dev/tutorials/setup\" rel=\"ugc nofollow\" target=\"_blank\">Google AI API key</a> under Credentials → Google Gemini API</li>\n</ul>\n</li>\n<li><strong>Update repository information</strong>:\n<ul>\n<li>Locate the \"Set Common Fields\" code node at the beginning of the workflow</li>\n<li>Change the <code>gitHubRepoName</code> and <code>gitHubOrgName</code> values to match your repository</li>\n</ul>\n<pre><code>const commonFields = {\n  'gitHubRepoName': 'your-repo-name',\n  'gitHubOrgName': 'your-org-name'\n}\n</code></pre>\n</li>\n<li><strong>Configure the webhook</strong>:<br>\nCreate a file named <code>.github/workflows/lint-guardian.yml</code> in your repository replacing the <code>Trigger n8n Workflow</code> step with your webhook:<pre><code>name: Lint Guardian\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  trigger-linting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger n8n Workflow\n        uses: fjogeleit/http-request-action@v1\n        with:\n          url: 'https://your-n8n-instance.com/webhook/1da5a6e1-9453-4a65-bbac-a1fed633f6ad'\n          method: 'POST'\n          contentType: 'application/json'\n          data: |\n            {\n              \"pull_request_number\": ${{ github.event.pull_request.number }},\n              \"repository\": \"${{ github.repository }}\",\n              \"branch\": \"${{ github.event.pull_request.head.ref }}\",\n              \"base_branch\": \"${{ github.event.pull_request.base.ref }}\"\n            }\n          preventFailureOnNoResponse: true\n</code></pre>\n</li>\n<li><strong>Customize linting rules</strong> (optional):\n<ul>\n<li>Modify the AI Agent's system message to specify your team's linting preferences</li>\n<li>Adjust file handling if you have specific file types to focus on or ignore</li>\n</ul>\n</li>\n</ol>\n<h2>Security Considerations</h2>\n<p>When creating your GitHub Personal Access Token, remember to:</p>\n<ul>\n<li>Choose the minimal permissions needed (repo, workflow, admin:repo_hook)</li>\n<li>Set an appropriate expiration date</li>\n<li>Treat your token like a password and store it securely</li>\n<li>Consider using GitHub's fine-grained personal access tokens for more limited scope</li>\n</ul>\n<p>As GitHub <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#keeping-your-personal-access-tokens-secure\" rel=\"ugc nofollow\" target=\"_blank\">documentation</a> notes: \"Personal access tokens are like passwords, and they share the same inherent security risks.\"</p>\n<h2>Extending the Template</h2>\n<p>You can enhance this workflow by:</p>\n<ul>\n<li>Adding Slack notifications when linting fixes are submitted</li>\n<li>Creating custom linting rules specific to your team's needs</li>\n<li>Expanding it to handle different types of code quality checks</li>\n<li>Adding approval steps for more controlled environments</li>\n</ul>\n<p>This template provides an excellent starting point that you can customize to fit your team's exact workflow and code style requirements.</p>\n</div><!--]-->",
  "readme_zh": "# LintGuardian：基于n8n与AI的自动化PR代码审查工具\n\n## 功能概述\n\nLintGuardian是一款n8n工作流模板，专为GitHub仓库设计的自动化代码质量管控方案。当开发者创建拉取请求时，该工作流会自动分析变更文件、识别代码规范问题、修复问题并提交修正后的新PR。这套机制消除了人工代码风格审查的繁琐，减少了反复沟通的评论往来，让团队能专注于功能实现而非格式调整。\n\n## 运行原理\n\n工作流通过GitHub的Webhook在PR创建时触发。系统会通过GitHub API获取PR中的所有变更文件，经由AI驱动的代码审查服务（Google Gemini）处理后自动生成修正方案。AI代理随后会创建包含修正文件的新分支，并针对原始分支提交\"代码规范修正\"PR。开发者只需一键即可审核合并这些修正，以最小成本保持代码风格的一致性。\n\n## 环境准备\n\n使用本模板前需准备：\n\n1. **n8n实例**：自建或使用n8n.cloud服务\n2. **GitHub仓库**：需要实施代码规范的代码库\n3. **GitHub个人访问令牌**：需具备仓库访问权限（repo/workflow/admin:repo_hook）\n4. **Google AI API密钥**：为代码审查提供支持的Gemini语言模型密钥\n5. **GitHub Webhook**：配置为向n8n实例发送PR创建事件\n\n## 配置指南\n\n1. **导入模板**至您的n8n实例\n2. **配置凭证**：\n   * 在凭证管理中添加[GitHub个人访问令牌](https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic)\n   * 添加[Google AI API密钥](https://ai.google.dev/tutorials/setup)至Google Gemini API凭证\n3. **更新仓库信息**：\n   定位工作流起始处的\"Set Common Fields\"代码节点，修改以下参数：\n\n   ```javascript\n   const commonFields = {\n     'gitHubRepoName': '您的仓库名',\n     'gitHubOrgName': '您的组织名'\n   }\n   ```\n\n4. **配置Webhook**：\n   在仓库中创建`.github/workflows/lint-guardian.yml`文件，替换其中的触发URL：\n\n   ```yaml\n   name: Lint Guardian\n   on:\n     pull_request:\n       types: [opened, synchronize]\n   jobs:\n     trigger-linting:\n       runs-on: ubuntu-latest\n       steps:\n         - name: 触发n8n工作流\n           uses: fjogeleit/http-request-action@v1\n           with:\n             url: 'https://您的n8n实例.com/webhook/1da5a6e1-9453-4a65-bbac-a1fed633f6ad'\n             method: 'POST'\n             contentType: 'application/json'\n             data: |\n               {\n                 \"pull_request_number\": ${{ github.event.pull_request.number }},\n                 \"repository\": \"${{ github.repository }}\",\n                 \"branch\": \"${{ github.event.pull_request.head.ref }}\",\n                 \"base_branch\": \"${{ github.event.pull_request.base.ref }}\"\n               }\n   ```\n\n5. **自定义审查规则**（可选）：\n   * 修改AI代理的系统消息以匹配团队规范\n   * 调整文件处理逻辑以聚焦或忽略特定文件类型\n\n## 安全须知\n\n创建GitHub个人访问令牌时请注意：\n- 仅选择必要权限（repo/workflow/admin:repo_hook）\n- 设置合理的有效期\n- 像保护密码一样保管令牌\n- 考虑使用GitHub细粒度令牌限制权限范围\n\n正如GitHub[官方文档](https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#keeping-your-personal-access-tokens-secure)所述：\"个人访问令牌等同于密码，具有相同的安全风险。\"\n\n## 功能扩展\n\n您可以通过以下方式增强工作流：\n- 添加Slack通知功能，当提交修正时提醒团队\n- 创建符合团队需求的定制审查规则\n- 扩展其他类型的代码质量检查\n- 在严格管控环境中添加审批环节\n\n本模板作为基础框架，可根据团队具体工作流程和代码风格要求进行深度定制。",
  "title_zh": "使用Google Gemini AI自动化GitHub PR代码审查与自动修复PR",
  "publish_date_zh": "最后更新于2天前",
  "workflow_json_zh": "{\n  \"id\": \"mfAxsn2XqfEzDtYr\",\n  \"meta\": {\n    \"instanceId\": \"24ca526572eca60ee26bbee4ba7087b1023a6874af4ebeed61b2d126e50e531b\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"LintBot: Your Automated Code Quality Assistant\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"8dedfb4b-d477-4fa5-9a9b-68b74450d1fe\",\n      \"name\": \"Listen for Trigger from Github Workflow\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -1040,\n        -540\n      ],\n      \"webhookId\": \"1da5a6e1-9453-4a65-bbac-a1fed633f6ad\",\n      \"parameters\": {\n        \"path\": \"1da5a6e1-9453-4a65-bbac-a1fed633f6ad\",\n        \"options\": {\n          \"responseHeaders\": {\n            \"entries\": [\n              {\n                \"name\": \"Content-Type\",\n                \"value\": \"application/json\"\n              }\n            ]\n          }\n        },\n        \"responseMode\": \"responseNode\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4bec8f3a-5670-4fe5-916f-b7fab3165880\",\n      \"name\": \"AI Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        1780,\n        -580\n      ],\n      \"parameters\": {\n        \"text\": \"=<files>\\n{{ JSON.stringify($json.data) }}\\n</files>\",\n        \"options\": {\n          \"systemMessage\": \"=You are an expert at code linting. Your job is to receive a JSON-formatted request with various file paths and the code inside each file.\\n\\nYou will:\\n\\n1. Look for and fix any linting issues in the files.\\n2. First, check if a branch exists and if, create a new branch using the name {{ $('Get PR GitHub Branch').item.json.head.ref }}-linting-fix. If so, use the existing branch.\\n3. Commit the new files with fixes to the branch.\\n4. Create a PR from that branch with the name: \\\"Linting fixes for PR:{{ $('Listen for Trigger from Github Workflow').item.json.pull_request_number }}\\\"\"\n        },\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.9\n    },\n    {\n      \"id\": \"0e043c94-5b69-41f5-9f27-9dd5ea45a628\",\n      \"name\": \"Respond to Webhook\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        2200,\n        -660\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"respondWith\": \"allIncomingItems\"\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"68047540-a8ea-4836-9d5b-3b81515f98fc\",\n      \"name\": \"Get PR Files\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        360,\n        -540\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/pulls/{{ $('Listen for Trigger from Github Workflow').item.json.pull_request_number }}/files\",\n        \"options\": {}\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"29b9cace-ceaa-446c-a547-ac25c4331d5a\",\n      \"name\": \"Get File Contents\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        580,\n        -540\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $json.contents_url }}\",\n        \"options\": {}\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"a8920578-706a-4ed6-8c58-9be88f16420c\",\n      \"name\": \"Convert Base64 to Text File\",\n      \"type\": \"n8n-nodes-base.convertToFile\",\n      \"position\": [\n        780,\n        -540\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"operation\": \"toBinary\",\n        \"sourceProperty\": \"content\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"1fccb56b-ca82-4c9b-9ede-f669a97067f6\",\n      \"name\": \"Extract from File\",\n      \"type\": \"n8n-nodes-base.extractFromFile\",\n      \"position\": [\n        980,\n        -560\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"operation\": \"text\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"543be972-e489-4ca0-8a43-d77442081016\",\n      \"name\": \"Create Code/FilePath Object\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1200,\n        -560\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"d18801c8-8c93-4c66-add8-0a5915ac3a6f\",\n              \"name\": \"code\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.data }}\"\n            },\n            {\n              \"id\": \"6da8a116-f59e-481c-a815-acda60e19398\",\n              \"name\": \"filePath\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Get File Contents').item.json.path }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"ac2ac571-5a1c-4f06-b45f-296fc43557c8\",\n      \"name\": \"Collect All Files Changed\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        1440,\n        -560\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"aggregate\": \"aggregateAllItemData\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9062c98b-6937-4411-9a21-6f047084ab78\",\n      \"name\": \"Get PR GitHub Branch\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -580,\n        -520\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $json.gitHubApiBaseEndpointUri }}/pulls/{{ $('Listen for Trigger from Github Workflow').item.json.pull_request_number }}\",\n        \"options\": {},\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"githubApi\"\n      },\n      \"credentials\": {\n        \"githubApi\": {\n          \"id\": \"MI5Ul9UqEbdI0RRe\",\n          \"name\": \"GitHub account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"8c9f3d57-b73d-46a1-a7f8-b8ea49fbdbd0\",\n      \"name\": \"Create GitHub Blob\",\n      \"type\": \"n8n-nodes-base.httpRequestTool\",\n      \"position\": [\n        1660,\n        -120\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/git/blobs\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"authentication\": \"predefinedCredentialType\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"content\",\n              \"value\": \"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}\"\n            },\n            {\n              \"name\": \"encoding\",\n              \"value\": \"utf-8\"\n            }\n          ]\n        },\n        \"toolDescription\": \"Creates a GitHub blob for a file\",\n        \"nodeCredentialType\": \"githubApi\"\n      },\n      \"credentials\": {\n        \"githubApi\": {\n          \"id\": \"MI5Ul9UqEbdI0RRe\",\n          \"name\": \"GitHub account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"3bba3645-f54e-46aa-866f-426404581221\",\n      \"name\": \"Create GitHub Tree\",\n      \"type\": \"n8n-nodes-base.httpRequestTool\",\n      \"position\": [\n        1880,\n        -120\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/git/trees\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"base_tree\\\": \\\"{{ $('Get Latest Main Branch Tree Hash').item.json.tree.sha }}\\\",\\n  \\\"tree\\\": {{ $fromAI('json_array_of_files','','string') }}\\n}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"toolDescription\": \"Creates a GitHub tree object with one file\",\n        \"nodeCredentialType\": \"githubApi\"\n      },\n      \"credentials\": {\n        \"githubApi\": {\n          \"id\": \"MI5Ul9UqEbdI0RRe\",\n          \"name\": \"GitHub account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"26213bce-5117-475c-98a1-926140cdeec4\",\n      \"name\": \"Create GitHub Commit\",\n      \"type\": \"n8n-nodes-base.httpRequestTool\",\n      \"position\": [\n        2080,\n        -140\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/git/commits\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"message\\\": \\\"{{ $fromAI('message', '', 'string').replace(/\\\\n/g, '\\\\\\\\n') }}\\\",\\n  \\\"tree\\\": \\\"{{ $fromAI('treeHash', '', 'string') }}\\\",\\n  \\\"parents\\\": [\\n    \\\"{{ $('Get Latest Main Branch Commit SHA').item.json.object.sha }}\\\"\\n  ]\\n}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"toolDescription\": \"Creates a commit from the new tree. \",\n        \"nodeCredentialType\": \"githubApi\"\n      },\n      \"credentials\": {\n        \"githubApi\": {\n          \"id\": \"MI5Ul9UqEbdI0RRe\",\n          \"name\": \"GitHub account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"cb6918d1-4345-4f77-8667-c4ae6c790db5\",\n      \"name\": \"Create Pull Request\",\n      \"type\": \"n8n-nodes-base.httpRequestTool\",\n      \"position\": [\n        2580,\n        -520\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/pulls\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"title\\\": \\\"{{ $fromAI('title','','string') }}\\\",\\n  \\\"head\\\": \\\"refs/heads/{{ $fromAI('head','','string') }}\\\",\\n  \\\"base\\\": \\\"main\\\",\\n  \\\"body\\\": \\\"{{ $fromAI('body','','string') }}\\\"\\n}\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"toolDescription\": \"Creates a Pull Request\",\n        \"nodeCredentialType\": \"githubApi\"\n      },\n      \"credentials\": {\n        \"githubApi\": {\n          \"id\": \"MI5Ul9UqEbdI0RRe\",\n          \"name\": \"GitHub account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"8b9240b2-e23a-4f49-851a-1810d24f1bf3\",\n      \"name\": \"Create Branch\",\n      \"type\": \"n8n-nodes-base.httpRequestTool\",\n      \"position\": [\n        2480,\n        -300\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/git/refs\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"=  {\\n    \\\"ref\\\": \\\"refs/heads/{{ $fromAI('branch_ref','','string') }}\\\",\\n    \\\"sha\\\": \\\"{{ $fromAI('commit_sha','','string') }}\\\"\\n  }\",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"toolDescription\": \"Creates a branch to point to the new commit\",\n        \"nodeCredentialType\": \"githubApi\"\n      },\n      \"credentials\": {\n        \"githubApi\": {\n          \"id\": \"MI5Ul9UqEbdI0RRe\",\n          \"name\": \"GitHub account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"ea314631-174f-4d03-a947-0710b2870ed1\",\n      \"name\": \"Get Latest Main Branch Commit SHA\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -340,\n        -540\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/git/ref/heads/main\",\n        \"options\": {},\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"githubApi\"\n      },\n      \"credentials\": {\n        \"githubApi\": {\n          \"id\": \"MI5Ul9UqEbdI0RRe\",\n          \"name\": \"GitHub account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"36633281-8335-4381-9393-cb1f64390bee\",\n      \"name\": \"Get Latest Main Branch Tree Hash\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        140,\n        -540\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/git/commits/{{ $json.object.sha }}\",\n        \"options\": {},\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"githubApi\"\n      },\n      \"credentials\": {\n        \"githubApi\": {\n          \"id\": \"MI5Ul9UqEbdI0RRe\",\n          \"name\": \"GitHub account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"435d5b12-3a71-4dbf-9d5d-97b30b249414\",\n      \"name\": \"Get Branch\",\n      \"type\": \"n8n-nodes-base.httpRequestTool\",\n      \"position\": [\n        2280,\n        -200\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $('Set Common Fields').item.json.gitHubApiBaseEndpointUri }}/branches/{{ $fromAI('branch_name','','string') }}\",\n        \"options\": {},\n        \"authentication\": \"predefinedCredentialType\",\n        \"toolDescription\": \"Get a branch from the GitHub repo\",\n        \"nodeCredentialType\": \"githubApi\"\n      },\n      \"credentials\": {\n        \"githubApi\": {\n          \"id\": \"MI5Ul9UqEbdI0RRe\",\n          \"name\": \"GitHub account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"b26415fa-b898-4d79-a7da-8f66451f0747\",\n      \"name\": \"Google Gemini Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"position\": [\n        1500,\n        -340\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"modelName\": \"models/gemini-2.0-flash\"\n      },\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"ARYVKWu9TZzwQ3fB\",\n          \"name\": \"Google Gemini(PaLM) Api account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9ec4b763-a3c8-4d5b-a50c-64842038a4ba\",\n      \"name\": \"Set Common Fields\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        -820,\n        -540\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const commonFields = {\\n  'gitHubRepoName': 'my-membership',\\n  'gitHubOrgName': 'carved-rock-fitness-gym'\\n}\\ncommonFields['gitHubApiBaseEndpointUri'] = `https://api.github.com/repos/${commonFields.gitHubOrgName}/${commonFields.gitHubRepoName}`\\n\\nreturn commonFields\"\n      },\n      \"typeVersion\": 2\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {\n    \"Listen for Trigger from Github Workflow\": [\n      {\n        \"json\": {\n          \"pull_request_number\": 204\n        }\n      }\n    ]\n  },\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"17951810-1716-46ae-90bb-d698a6062483\",\n  \"connections\": {\n    \"AI Agent\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Branch\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get PR Files\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get File Contents\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create Branch\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract from File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create Code/FilePath Object\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get File Contents\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert Base64 to Text File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set Common Fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get PR GitHub Branch\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create GitHub Blob\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create GitHub Tree\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create Pull Request\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create GitHub Commit\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get PR GitHub Branch\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Latest Main Branch Commit SHA\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Gemini Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Collect All Files Changed\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert Base64 to Text File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract from File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create Code/FilePath Object\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Collect All Files Changed\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Latest Main Branch Tree Hash\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get PR Files\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Latest Main Branch Commit SHA\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Latest Main Branch Tree Hash\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Listen for Trigger from Github Workflow\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set Common Fields\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}