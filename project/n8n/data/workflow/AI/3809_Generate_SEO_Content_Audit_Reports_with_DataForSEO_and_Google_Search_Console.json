{
  "title": "Generate SEO Content Audit Reports with DataForSEO and Google Search Console",
  "url": "https://n8n.io/workflows/3809-generate-seo-content-audit-reports-with-dataforseo-and-google-search-console/",
  "category": "AI",
  "category_url": "https://n8n.io/workflows/categories/ai/?sort=createdAt:desc",
  "author": "Custom Workflows AI",
  "publish_date": "Last update 5 days ago",
  "publish_date_absolute": "2025-05-17",
  "content": "",
  "workflow_json": "{\"id\":\"Tqa8dikBDLYEytx5\",\"meta\":{\"instanceId\":\"ddfdf733df99a65c801a91865dba5b7c087c95cc22a459ff3647e6deddf2aee6\"},\"name\":\"Automated Content SEO Audit Report\",\"tags\":[],\"nodes\":[{\"id\":\"b5f15675-35c9-42a1-b7eb-bfaf0b467a5a\",\"name\":\"Set Fields\",\"type\":\"n8n-nodes-base.set\",\"position\":[280,620],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"e71886f0-104f-412b-9fef-d2b3738cebf0\",\"name\":\"dfs_domain\",\"type\":\"string\",\"value\":\"yourclientdomain.com\"},{\"id\":\"de35327e-1e32-4996-970a-50b8953c7709\",\"name\":\"dfs_max_crawl_pages\",\"type\":\"string\",\"value\":\"1000\"},{\"id\":\"0d6b4d1a-e57d-4e38-8aa5-e2ea5589a089\",\"name\":\"dfs_enable_javascript\",\"type\":\"string\",\"value\":\"false\"},{\"id\":\"d699e487-ab74-483f-8cd8-cdcfaca567d7\",\"name\":\"company_name\",\"type\":\"string\",\"value\":\"Custom Workflows AI\"},{\"id\":\"da123535-f678-4331-973a-07711b7aaaac\",\"name\":\"company_website\",\"type\":\"string\",\"value\":\"https://customworkflows.ai\"},{\"id\":\"e12486eb-7019-4639-85a9-c55b4c62beef\",\"name\":\"company_logo_url\",\"type\":\"string\",\"value\":\"https://customworkflows.ai/images/logo.png\"},{\"id\":\"9eef2015-e89c-4930-82a5-972111c1a4fe\",\"name\":\"brand_primary_color\",\"type\":\"string\",\"value\":\"#252946\"},{\"id\":\"dd4ff260-6008-49ec-a0e6-ad5c177eb8df\",\"name\":\"brand_secondary_color\",\"type\":\"string\",\"value\":\"#0fd393\"},{\"id\":\"d71a4d91-c5bf-49c4-b7d0-64e84dad6153\",\"name\":\"gsc_property_type\",\"type\":\"string\",\"value\":\"domain\"}]}},\"typeVersion\":3.4},{\"id\":\"57a66b27-a253-4543-9d44-cd3afdbc3946\",\"name\":\"When clicking ‘Start’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[60,620],\"parameters\":{},\"typeVersion\":1},{\"id\":\"3e5e8162-2815-429f-b6e8-6ea6ea70cf18\",\"name\":\"Check Task Status\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[660,620],\"parameters\":{\"url\":\"=https://api.dataforseo.com/v3/on_page/summary/{{ $json.tasks[0].id }}\",\"options\":{},\"sendHeaders\":true,\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpBasicAuth\",\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"}]}},\"typeVersion\":4.2},{\"id\":\"9ea481fe-8af6-43c2-881d-eb68f63b0424\",\"name\":\"Create Task\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[480,620],\"parameters\":{\"url\":\"https://api.dataforseo.com/v3/on_page/task_post\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"=[\\n  {\\n    \\\"target\\\": \\\"{{ $json.dfs_domain }}\\\",\\n    \\\"max_crawl_pages\\\": {{ $json.dfs_max_crawl_pages }},\\n    \\\"load_resources\\\": false,\\n    \\\"enable_javascript\\\": {{ $json.dfs_enable_javascript }},\\n    \\\"custom_js\\\": \\\"meta = {}; meta.url = document.URL; meta;\\\",\\n    \\\"tag\\\": \\\"{{ $json.dfs_domain + Math.floor(10000 + Math.random() * 90000) }}\\\"\\n  }\\n]\",\"sendBody\":true,\"sendHeaders\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpBasicAuth\",\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"}]}},\"typeVersion\":4.2},{\"id\":\"0a0e696a-29a7-4b34-8299-102c72544153\",\"name\":\"If\",\"type\":\"n8n-nodes-base.if\",\"position\":[860,620],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"7e13429d-9ead-4ae5-8ed6-c5730b05927d\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.tasks[0].result[0].crawl_progress }}\",\"rightValue\":\"finished\"}]}},\"typeVersion\":2.2},{\"id\":\"a31db736-23e0-4db8-ab90-294cd87c9123\",\"name\":\"Wait\",\"type\":\"n8n-nodes-base.wait\",\"position\":[1060,680],\"webhookId\":\"f60d5346-5ddf-4819-a865-48e2d9e6103c\",\"parameters\":{\"unit\":\"minutes\",\"amount\":1},\"typeVersion\":1.1},{\"id\":\"8f95fd0b-e990-4c85-b21b-83d06d2121fe\",\"name\":\"Get RAW Audit Data\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1060,500],\"parameters\":{\"url\":\"https://api.dataforseo.com/v3/on_page/pages\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"=[\\n  {\\n    \\\"id\\\": \\\"{{ $json.tasks[0].id }}\\\",\\n    \\\"limit\\\": \\\"1000\\\"\\n  }\\n]\",\"sendBody\":true,\"sendHeaders\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpBasicAuth\",\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"}]}},\"typeVersion\":4.2},{\"id\":\"6cf221d9-c17e-4a5c-9c9a-c3176319df95\",\"name\":\"Extract URLs\",\"type\":\"n8n-nodes-base.code\",\"position\":[1260,500],\"parameters\":{\"jsCode\":\"// Get input data from the previous node\\nconst input = $input.all();\\n\\n// Initialize an array to store the new items\\nconst output = [];\\n\\n// Loop through each input item\\nfor (const item of input) {\\n    const tasks = item.json.tasks || [];\\n    for (const task of tasks) {\\n        const results = task.result || [];\\n        for (const result of results) {\\n            const items = result.items || [];\\n            for (const page of items) {\\n                // Only include URLs with status_code 200\\n                if (page.url && page.status_code === 200) {\\n                    output.push({ json: { url: page.url } });\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n// Return all URLs with status code 200 as separate items\\nreturn output;\"},\"typeVersion\":2},{\"id\":\"fbf18c28-dbd5-410b-87cb-5f5aef44727e\",\"name\":\"Loop Over Items\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[1480,500],\"parameters\":{\"options\":{},\"batchSize\":100},\"typeVersion\":3},{\"id\":\"aebdd823-9a4d-4323-aadf-b7d92d601d57\",\"name\":\"Query GSC API\",\"type\":\"n8n-nodes-base.httpRequest\",\"onError\":\"continueErrorOutput\",\"maxTries\":5,\"position\":[1480,680],\"parameters\":{\"url\":\"={{ \\n  $('Set Fields').first().json.gsc_property_type === 'domain' \\n    ? 'https://searchconsole.googleapis.com/webmasters/v3/sites/' + \\n      'sc-domain:' + \\n      $node[\\\"Loop Over Items\\\"].json.url.replace(/https?:\\\\/\\\\/(www\\\\.)?([^\\\\/]+).*/, '$2') + \\n      '/searchAnalytics/query' \\n    : 'https://searchconsole.googleapis.com/webmasters/v3/sites/' + \\n      encodeURIComponent(\\n        $node[\\\"Loop Over Items\\\"].json.url.replace(/(https?:\\\\/\\\\/(?:www\\\\.)?[^\\\\/]+).*/, '$1')\\n      ) + \\n      '/searchAnalytics/query' \\n}}\",\"body\":\"={\\n  \\\"startDate\\\": \\\"{{ new Date(new Date().setDate(new Date().getDate() - 90)).toISOString().split('T')[0] }}\\\",\\n  \\\"endDate\\\": \\\"{{ new Date().toISOString().split('T')[0] }}\\\",\\n  \\\"dimensionFilterGroups\\\": [\\n    {\\n      \\\"filters\\\": [\\n        {\\n          \\\"dimension\\\": \\\"page\\\",\\n          \\\"operator\\\": \\\"equals\\\",\\n          \\\"expression\\\": \\\"{{ $node['Loop Over Items'].json.url }}\\\"\\n        }\\n      ]\\n    }\\n  ],\\n  \\\"aggregationType\\\": \\\"auto\\\",\\n  \\\"rowLimit\\\": 100\\n}\",\"method\":\"POST\",\"options\":{},\"sendBody\":true,\"contentType\":\"raw\",\"sendHeaders\":true,\"authentication\":\"predefinedCredentialType\",\"rawContentType\":\"JSON\",\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"}]},\"nodeCredentialType\":\"googleOAuth2Api\"},\"retryOnFail\":true,\"typeVersion\":4.2,\"waitBetweenTries\":5000},{\"id\":\"d9943a4b-7320-47ce-95fa-67eb28cabd26\",\"name\":\"Wait1\",\"type\":\"n8n-nodes-base.wait\",\"position\":[1680,680],\"webhookId\":\"8b2109f4-1aca-4585-8261-7dfc4ca2f95e\",\"parameters\":{\"unit\":\"minutes\",\"amount\":1},\"typeVersion\":1.1},{\"id\":\"f2f7e975-1db1-4566-b674-396ccaa775f5\",\"name\":\"Map GSC Data to URL\",\"type\":\"n8n-nodes-base.set\",\"position\":[1880,680],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"342ff66d-cdfc-46e8-9605-db588c913eb0\",\"name\":\"URL\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.url }}\"},{\"id\":\"5c547efc-0514-4641-8f05-c24b965993ad\",\"name\":\"Clicks\",\"type\":\"string\",\"value\":\"={{ $('Query GSC API').item.json.rows[0].clicks }}\"},{\"id\":\"340c3ced-061d-49f0-911d-bd8b9e433a7d\",\"name\":\"Impressions\",\"type\":\"string\",\"value\":\"={{ $('Query GSC API').item.json.rows[0].impressions }}\"}]}},\"typeVersion\":3.4},{\"id\":\"4e42e1eb-4769-4e28-9f2f-3fb342baf971\",\"name\":\"Merge GSC Data with RAW Data\",\"type\":\"n8n-nodes-base.code\",\"position\":[1680,500],\"parameters\":{\"jsCode\":\"/*\\n * Function node\\n * Inputs: none (reads data from other nodes)\\n * Output: ONE item whose .json is the enriched audit object\\n */\\n\\n// 1. ----  Get the raw audit JSON  ------------------------------------------\\nlet rawAuditData = $node['Get RAW Audit Data'].json;   // first item of that node\\n\\n// If that node delivered a JSON string, parse it:\\nif (typeof rawAuditData === 'string') {\\n\\trawAuditData = JSON.parse(rawAuditData);\\n}\\n\\n// 2. ----  Get the Google Search Console rows  ------------------------------\\nconst gscItems = $items('Loop Over Items');            // all items from that node\\n\\n// 3. ----  Build a fast lookup:  URL -> { clicks, impressions }  ------------\\nconst gscLookup = {};\\nfor (const { json } of gscItems) {\\n    const { URL, Clicks, Impressions } = json;\\n    if (URL) {\\n        gscLookup[URL] = {\\n            clicks: Clicks !== undefined ? Number(Clicks) || 0 : null,\\n            impressions: Impressions !== undefined ? Number(Impressions) || 0 : null,\\n        };\\n    }\\n}\\n\\n// 4. ----  Enrich every page record with googleSearchConsoleData -------------\\nconst itemsPath = (((rawAuditData.tasks || [])[0] || {}).result || [])[0]?.items || [];\\n\\nfor (const page of itemsPath) {\\n    const url = page.url;\\n    page.googleSearchConsoleData = gscLookup[url] || { clicks: null, impressions: null };\\n}\\n\\n// 5. ----  Return ONE item with the updated audit data  ----------------------\\nreturn [\\n\\t{\\n\\t\\tjson: rawAuditData,   // <-- an actual object, so n8n is satisfied\\n\\t},\\n];\"},\"typeVersion\":2},{\"id\":\"0b35fb68-6a0d-4eea-b29a-96550574c2b8\",\"name\":\"Build Report Structure\",\"type\":\"n8n-nodes-base.code\",\"position\":[2100,320],\"parameters\":{\"jsCode\":\"/**\\n * n8n – Function node\\n * Input  : • One item whose `json` is the crawl + GSC data\\n *          • All the items produced by the loop node “Loop Over Items1”\\n * Output : ONE item whose `json` = { generatedAt, summary, issues, pages }\\n *          – Unchanged shape, just extra `sources`[] on 404 / 301 records\\n */\\n\\n/* ────────────────────── helpers & constants ───────────────────── */\\nconst CUR_YEAR          = new Date().getFullYear();\\nconst YEAR_RX           = /20\\\\d{2}/g;\\nconst TWELVE_MONTHS_MS  = 1000 * 60 * 60 * 24 * 365.25;\\nconst SIX_MONTHS_MS     = TWELVE_MONTHS_MS / 2;\\nconst LARGE_HTML_LIMIT  = 2_000_000;\\n\\nconst ageInMs      = (s) => Date.now() - Date.parse(s);\\nconst ensureBucket = (parent, key) => (parent[key] ??= []);\\nconst normalizeUrl = (u) => (u || '').replace(/\\\\/+$/, '');   // strip trailing “/”\\n\\n/* ────────────────────── main data sets ───────────────────────── */\\nconst root  = $node['Merge GSC Data with RAW Data'].json;\\nconst pages = root.tasks?.[0]?.result?.[0]?.items ?? [];\\n\\n/* link-source items from the loop node */\\nconst sourceItems = $items('Loop Over Items1') ?? [];\\nconst linkSourceMap = {};               // { normalisedTargetUrl : [ {linkFrom,type,text},… ] }\\n\\nfor (const itm of sourceItems) {\\n  const j   = itm.json || {};\\n  const tgt = normalizeUrl(j.URL);\\n  if (!tgt) continue;\\n\\n  linkSourceMap[tgt] ??= [];\\n  for (const s of j.sources || []) {\\n    linkSourceMap[tgt].push({\\n      linkFrom: s.link_from,\\n      type    : s.type,\\n      text    : s.text,\\n    });\\n  }\\n}\\n\\n/* ────────────────────── duplicate-meta look-ups ───────────────── */\\nconst titleFreq = {};\\nconst descFreq  = {};\\n\\nfor (const p of pages) {\\n  const t = p.meta?.title?.trim();\\n  const d = p.meta?.description?.trim();\\n  if (t) titleFreq[t] = (titleFreq[t] || 0) + 1;\\n  if (d) descFreq[d]  = (descFreq[d]  || 0) + 1;\\n}\\n\\n/* ────────────────────── report skeleton ──────────────────────── */\\nconst issues = {\\n  statusIssues:         {},\\n  contentQuality:       {},\\n  metadataSEO:          {},\\n  internalLinking:      {},\\n  underperformingContent: [],\\n};\\n\\nconst summary        = { pages: pages.length };\\nconst pagesWithFlags = [];\\n\\n/* ────────────────────── per-page loop ────────────────────────── */\\nfor (const p of pages) {\\n  const url   = p.url;\\n  const norm  = normalizeUrl(url);\\n  const flags = [];\\n\\n  const add = (sect, bucket, rec) => ensureBucket(issues[sect], bucket).push(rec);\\n\\n  const isStatusOK = p.status_code === 200;\\n\\n  /* 1 · 404 ---------------------------------------------------- */\\n  if (p.status_code === 404 || p.checks?.is_4xx_code) {\\n    flags.push('404');\\n    add('statusIssues', 'pages404', {\\n      url,\\n      sources: linkSourceMap[norm] ?? [],      // ← new\\n      todo  : 'Restore the page or 301-redirect it to a relevant URL.',\\n    });\\n  }\\n\\n  /* 2 · 301 ---------------------------------------------------- */\\n  if (p.status_code === 301 || p.checks?.is_redirect) {\\n    flags.push('redirect_301');\\n    add('statusIssues', 'redirects301', {\\n      url,\\n      sources: linkSourceMap[norm] ?? [],      // ← new\\n      todo  : 'Update internal links so they point directly to the final URL (single-hop redirect).',\\n    });\\n  }\\n\\n  /* 3 ­– 15 · all original checks (unchanged) ------------------ */\\n  /* Canonicalised */\\n  const canonicalised =\\n      (p.meta?.canonical && p.meta.canonical !== url) ||\\n      p.checks?.canonical_chain ||\\n      p.checks?.recursive_canonical;\\n\\n  if (isStatusOK && canonicalised) {\\n    flags.push('canonicalised');\\n    add('statusIssues', 'canonicalised', {\\n      url,\\n      canonical: p.meta?.canonical,\\n      todo: `Verify that \\\"${p.meta?.canonical || '—'}\\\" is the correct canonical target and eliminate unintended duplicates.`,\\n    });\\n  }\\n\\n  /* Outdated content (years + stale last-modified) */\\n  if (isStatusOK) {\\n    const titleYears = (p.meta?.title?.match(YEAR_RX) || []).filter((y) => Number(y) < CUR_YEAR);\\n    const descYears  = (p.meta?.description?.match(YEAR_RX) || []).filter((y) => Number(y) < CUR_YEAR);\\n\\n    if (titleYears.length) {\\n      flags.push('outdated_year_title');\\n      add('contentQuality', 'outdatedMetaYear', {\\n        url,\\n        field    : 'title',\\n        years    : titleYears.join(','),\\n        original : p.meta?.title,\\n        todo     : `Title contains old year → ${titleYears.join(', ')}. Update to ${CUR_YEAR} or remove dates.`,\\n      });\\n    }\\n    if (descYears.length) {\\n      flags.push('outdated_year_description');\\n      add('contentQuality', 'outdatedMetaYear', {\\n        url,\\n        field    : 'description',\\n        years    : descYears.join(','),\\n        original : p.meta?.description,\\n        todo     : `Meta description contains old year → ${descYears.join(', ')}. Update to ${CUR_YEAR} or remove dates.`,\\n      });\\n    }\\n\\n    const lm = p.last_modified ??\\n               p.meta?.social_media_tags?.['og:updated_time'] ?? null;\\n\\n    if (lm && ageInMs(lm) > TWELVE_MONTHS_MS) {\\n      flags.push('stale_last_modified');\\n      add('contentQuality', 'staleLastModified', {\\n        url,\\n        lastModified: lm,\\n        todo        : 'Page not updated for 12+ months — refresh content.',\\n      });\\n    }\\n  }\\n\\n  /* Thin content */\\n  if (isStatusOK) {\\n    const wc = p.meta?.content?.plain_text_word_count || 0;\\n    if (p.click_depth !== 0 && wc >= 1 && wc <= 1500) {\\n      flags.push('thin_content');\\n      add('contentQuality', 'thinContent', {\\n        url,\\n        words: wc,\\n        todo : 'Expand the piece beyond 1 500 words with valuable, unique information.',\\n      });\\n    }\\n  }\\n\\n  /* Excessive click depth */\\n  if (isStatusOK && (p.click_depth || 0) > 4) {\\n    flags.push('excessive_click_depth');\\n    add('internalLinking', 'excessiveClickDepth', {\\n      url,\\n      depth: p.click_depth,\\n      todo : 'Surface this URL within ≤4 clicks via navigation or contextual links.',\\n    });\\n  }\\n\\n  /* Large HTML */\\n  if (isStatusOK && ((p.size || 0) > LARGE_HTML_LIMIT || (p.total_dom_size || 0) > LARGE_HTML_LIMIT)) {\\n    flags.push('large_html');\\n    add('contentQuality', 'largeHTML', {\\n      url,\\n      size    : p.size,\\n      totalDom: p.total_dom_size,\\n      todo    : 'Reduce HTML payload (remove unused markup/JS, paginate, or lazy-load where possible).',\\n    });\\n  }\\n\\n  /* Title length */\\n  if (isStatusOK && (p.meta?.title_length < 40 || p.meta?.title_length > 60)) {\\n    flags.push('title_length');\\n    add('metadataSEO', 'titleLength', {\\n      url,\\n      length: p.meta?.title_length,\\n      todo  : `Write a meta title 40-60 characters long (currently ${p.meta?.title_length || 0}).`,\\n    });\\n  }\\n\\n  /* Description length */\\n  if (isStatusOK) {\\n    const dl = p.meta?.description_length || 0;\\n    if (dl > 0 && (dl < 70 || dl > 155)) {\\n      flags.push('description_length');\\n      add('metadataSEO', 'descriptionLength', {\\n        url,\\n        length: dl,\\n        todo  : `Write a meta description 70-155 characters long (currently ${dl}).`,\\n      });\\n    }\\n  }\\n\\n  /* Missing / duplicate meta */\\n  if (isStatusOK) {\\n    if (p.checks?.no_title) {\\n      flags.push('missing_title');\\n      add('metadataSEO', 'missingTitle', { url, todo: 'Add a unique SEO title 40-60 characters long.' });\\n    }\\n    if (p.checks?.no_description) {\\n      flags.push('missing_description');\\n      add('metadataSEO', 'missingDescription', { url, todo: 'Add a unique meta description 70-155 characters long.' });\\n    }\\n    if (titleFreq[p.meta?.title?.trim()] > 1) {\\n      flags.push('duplicate_title');\\n      add('metadataSEO', 'duplicateTitle', { url, title: p.meta?.title, todo: 'Differentiate this title to avoid keyword cannibalisation.' });\\n    }\\n    if (p.meta?.description && descFreq[p.meta.description.trim()] > 1) {\\n      flags.push('duplicate_description');\\n      add('metadataSEO', 'duplicateDescription', { url, description: p.meta?.description, todo: 'Rewrite the meta description so each page is unique.' });\\n    }\\n  }\\n\\n  /* H1 issues */\\n  if (isStatusOK) {\\n    const h1s = p.meta?.htags?.h1 ?? [];\\n    if (h1s.length !== 1) {\\n      flags.push('h1_issue');\\n      add('metadataSEO', 'h1Issues', { url, h1Count: h1s.length, todo: 'Ensure exactly one H1 tag per page that reflects the main topic.' });\\n    }\\n  }\\n\\n  /* Readability */\\n  if (isStatusOK) {\\n    const fk = p.meta?.content?.flesch_kincaid_readability_index ?? 100;\\n    if (fk < 55) {\\n      flags.push('low_readability');\\n      add('contentQuality', 'readability', { url, score: fk, todo: `Simplify language, shorten sentences, and use lists to lift F-K score > 55 (currently ${fk.toFixed(2)}).` });\\n    }\\n  }\\n\\n  /* Orphan pages */\\n  if (isStatusOK && p.checks?.is_orphan_page) {\\n    flags.push('orphan_page');\\n    add('internalLinking', 'orphanPages', { url, todo: 'Add at least one crawlable internal link pointing to this URL.' });\\n  }\\n\\n  /* Low internal links */\\n  if (isStatusOK && (p.meta?.internal_links_count || 0) < 3) {\\n    flags.push('low_internal_links');\\n    add('internalLinking', 'lowInternalLinks', { url, links: p.meta?.inbound_links_count, todo: 'Add three or more relevant internal links to strengthen topical signals.' });\\n  }\\n\\n  /* Under-performing content */\\n  if (isStatusOK) {\\n    const clicks      = p.googleSearchConsoleData?.clicks ?? null;\\n    const impressions = p.googleSearchConsoleData?.impressions ?? null;\\n    const lm          = p.last_modified ?? p.meta?.social_media_tags?.['og:updated_time'] ?? null;\\n\\n    if (clicks !== null && clicks < 50 && (lm === null || ageInMs(lm) > SIX_MONTHS_MS)) {\\n      flags.push('underperforming');\\n      issues.underperformingContent.push({\\n        url,\\n        clicks,\\n        impressions,\\n        lastModified: lm,\\n        todo: `Only ${clicks} clicks in the last 90 days — refresh content, improve targeting, or consider pruning.`,\\n      });\\n    }\\n  }\\n\\n  /* page-level flags record */\\n  pagesWithFlags.push({\\n    url,\\n    flags,\\n    clicks     : p.googleSearchConsoleData?.clicks,\\n    impressions: p.googleSearchConsoleData?.impressions,\\n  });\\n}\\n\\n/* ────────────────────── executive summary ────────────────────── */\\nconst count = (sect, bucket) => issues[sect]?.[bucket]?.length || 0;\\n\\nsummary.issues = {\\n  '404'                 : count('statusIssues', 'pages404'),\\n  redirects             : count('statusIssues', 'redirects301'),\\n  canonicalised         : count('statusIssues', 'canonicalised'),\\n  outdated              : count('contentQuality', 'outdatedMetaYear') +\\n                           count('contentQuality', 'staleLastModified'),\\n  thin                  : count('contentQuality', 'thinContent'),\\n  excessiveClickDepth   : count('internalLinking', 'excessiveClickDepth'),\\n  largeHTML             : count('contentQuality', 'largeHTML'),\\n  titleLen              : count('metadataSEO', 'titleLength'),\\n  descriptionLen        : count('metadataSEO', 'descriptionLength'),\\n  missingOrDuplicateMeta:\\n      count('metadataSEO', 'missingTitle') +\\n      count('metadataSEO', 'missingDescription') +\\n      count('metadataSEO', 'duplicateTitle') +\\n      count('metadataSEO', 'duplicateDescription'),\\n  h1Issues              : count('metadataSEO', 'h1Issues'),\\n  readability           : count('contentQuality', 'readability'),\\n  orphan                : count('internalLinking', 'orphanPages'),\\n  lowInternalLinks      : count('internalLinking', 'lowInternalLinks'),\\n  underperforming       : issues.underperformingContent.length,\\n};\\n\\n/* ────────────────────── final report ─────────────────────────── */\\nreturn [{\\n  json: {\\n    generatedAt: new Date().toISOString(),\\n    summary,\\n    issues,\\n    pages: pagesWithFlags,\\n  },\\n}];\"},\"typeVersion\":2},{\"id\":\"2227e1c7-890a-4b99-ad20-5b5645ba884b\",\"name\":\"Generate HTML Report\",\"type\":\"n8n-nodes-base.code\",\"position\":[2320,320],\"parameters\":{\"jsCode\":\"// Get the audit data and company information\\nconst auditData = $('Build Report Structure').item.json;\\nconst websiteDomain = $('Set Fields').first().json.dfs_domain;\\nconst companyName = $('Set Fields').first().json.company_name;\\nconst companyWebsite = $('Set Fields').first().json.company_website;\\nconst companyLogoUrl = $('Set Fields').first().json.company_logo_url;\\nconst primaryColor = $('Set Fields').first().json.brand_primary_color;\\nconst secondaryColor = $('Set Fields').first().json.brand_secondary_color;\\n\\n// Format date nicely\\nconst formattedDate = new Date(auditData.generatedAt).toLocaleDateString('en-US', {\\n  year: 'numeric',\\n  month: 'long',\\n  day: 'numeric'\\n});\\n\\n// Calculate total issues\\nconst totalIssues = Object.values(auditData.summary.issues).reduce((sum, count) => sum + count, 0);\\n\\n// Define issue gravity weights for health score calculation\\nconst issueGravity = {\\n  // Content Quality\\n  outdated: 2, // Medium\\n  thin: 3, // High\\n  readability: 1, // Low\\n  largeHTML: 2, // Medium\\n  // Technical SEO\\n  '404': 3, // High\\n  redirects: 2, // Medium\\n  canonicalised: 3, // High\\n  // On-Page SEO\\n  titleLen: 1, // Low\\n  descriptionLen: 1, // Low\\n  missingOrDuplicateMeta: 1, // Low\\n  h1Issues: 3, // High\\n  // Internal Linking\\n  excessiveClickDepth: 3, // High\\n  orphan: 3, // High\\n  lowInternalLinks: 3, // High\\n  // Performance\\n  underperforming: 3 // High\\n};\\n\\n// Calculate health score based on issue gravity\\nfunction calculateHealthScore(pages, issues) {\\n  // Calculate weighted sum of issues\\n  let weightedIssues = 0;\\n  let maxPossibleWeightedIssues = 0;\\n  \\n  // Process each issue type with its gravity weight\\n  for (const [issueType, count] of Object.entries(auditData.summary.issues)) {\\n    const gravity = issueGravity[issueType] || 1; // Default to Low if not defined\\n    weightedIssues += count * gravity;\\n    \\n    // Assume worst case: all pages have this issue\\n    maxPossibleWeightedIssues += pages * gravity;\\n  }\\n  \\n  // Cap the maximum penalty to avoid too severe scores with many pages\\n  const maxPenalty = Math.min(pages * 5, 100);\\n  \\n  // Calculate score: start at 100 and subtract weighted penalty\\n  const weightedPenalty = Math.min(maxPenalty, (weightedIssues / Math.max(1, pages)) * 2);\\n  const score = 100 - weightedPenalty;\\n  \\n  return Math.max(0, Math.round(score));\\n}\\n\\n// Get health score color based on value\\nfunction getHealthScoreColor(score) {\\n  if (score >= 80) return '#4caf50'; // Green\\n  if (score >= 60) return '#ff9800'; // Orange\\n  return '#f44336'; // Red\\n}\\n\\n// Get top recommendations\\nfunction getTopRecommendations(audit) {\\n  const recommendations = [];\\n  const priorityMap = {\\n    3: \\\"high\\\",     // High gravity issues\\n    2: \\\"medium\\\",   // Medium gravity issues\\n    1: \\\"low\\\"       // Low gravity issues\\n  };\\n  \\n  // Check for high gravity issues first\\n  if ((audit.issues.contentQuality.thinContent || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Expand thin content pages to improve topical depth and authority\\\",\\n      priority: priorityMap[issueGravity.thin] || \\\"high\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.statusIssues.pages404 || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Fix 404 errors by restoring pages or implementing proper redirects\\\",\\n      priority: priorityMap[issueGravity['404']] || \\\"high\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.metadataSEO.h1Issues || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Fix H1 tag issues to improve on-page SEO and content hierarchy\\\",\\n      priority: priorityMap[issueGravity.h1Issues] || \\\"high\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.internalLinking.orphanPages || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Create internal links to orphan pages to improve crawlability\\\",\\n      priority: priorityMap[issueGravity.orphan] || \\\"high\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.underperformingContent || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Optimize underperforming pages to improve search visibility\\\",\\n      priority: priorityMap[issueGravity.underperforming] || \\\"high\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.statusIssues.canonicalised || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Fix canonicalization issues to consolidate ranking signals\\\",\\n      priority: priorityMap[issueGravity.canonicalised] || \\\"high\\\"\\n    });\\n  }\\n  \\n  // Medium gravity issues\\n  if ((audit.issues.contentQuality.staleLastModified || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Update stale content with fresh information and current year references\\\",\\n      priority: priorityMap[issueGravity.outdated] || \\\"medium\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.statusIssues.redirects301 || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Update internal links to point directly to final URLs instead of through redirects\\\",\\n      priority: priorityMap[issueGravity.redirects] || \\\"medium\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.contentQuality.largeHTML || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Reduce HTML size for better page performance and loading speed\\\",\\n      priority: priorityMap[issueGravity.largeHTML] || \\\"medium\\\"\\n    });\\n  }\\n  \\n  // Low gravity issues\\n  if ((audit.issues.metadataSEO.missingDescription || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Add missing meta descriptions to improve click-through rates\\\",\\n      priority: priorityMap[issueGravity.missingOrDuplicateMeta] || \\\"low\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.contentQuality.readability || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Improve content readability to enhance user experience\\\",\\n      priority: priorityMap[issueGravity.readability] || \\\"low\\\"\\n    });\\n  }\\n  \\n  // Fallback if not enough recommendations\\n  if (recommendations.length < 3) {\\n    recommendations.push({\\n      text: \\\"Implement a regular content audit schedule to maintain freshness\\\",\\n      priority: \\\"low\\\"\\n    });\\n  }\\n  \\n  // Return top 5 recommendations, prioritizing high gravity issues first\\n  return recommendations\\n    .sort((a, b) => {\\n      const priorityOrder = { \\\"high\\\": 0, \\\"medium\\\": 1, \\\"low\\\": 2 };\\n      return priorityOrder[a.priority] - priorityOrder[b.priority];\\n    })\\n    .slice(0, 5);\\n}\\n\\n// Format flag names for display\\nfunction formatFlagName(flag) {\\n  return flag\\n    .split('_')\\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\\n    .join(' ');\\n}\\n\\n// Utility to lighten a color\\nfunction lightenColor(hex, percent) {\\n  hex = hex.replace('#', '');\\n  let r = parseInt(hex.substring(0, 2), 16);\\n  let g = parseInt(hex.substring(2, 4), 16);\\n  let b = parseInt(hex.substring(4, 6), 16);\\n  r = Math.min(255, Math.round(r + (255 - r) * (percent / 100)));\\n  g = Math.min(255, Math.round(g + (255 - g) * (percent / 100)));\\n  b = Math.min(255, Math.round(b + (255 - b) * (percent / 100)));\\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\\n}\\n\\n// Utility to darken a color\\nfunction darkenColor(hex, percent) {\\n  hex = hex.replace('#', '');\\n  let r = parseInt(hex.substring(0, 2), 16);\\n  let g = parseInt(hex.substring(2, 4), 16);\\n  let b = parseInt(hex.substring(4, 6), 16);\\n  r = Math.max(0, Math.round(r * (1 - percent / 100)));\\n  g = Math.max(0, Math.round(g * (1 - percent / 100)));\\n  b = Math.max(0, Math.round(b * (1 - percent / 100)));\\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\\n}\\n\\n// Helper function to render a table section or \\\"No issues found\\\" message\\nfunction renderTableSection(items, columns) {\\n  if (!items || items.length === 0) {\\n    return `<p class=\\\"section-empty\\\">No issues found.</p>`;\\n  }\\n  \\n  const showInitial = 10; // Number of rows to show initially\\n  const hasMoreItems = items.length > showInitial;\\n  const initialItems = hasMoreItems ? items.slice(0, showInitial) : items;\\n  const hiddenItems = hasMoreItems ? items.slice(showInitial) : [];\\n  \\n  return `\\n    <table class=\\\"paginated-table\\\">\\n      <thead>\\n        <tr>\\n          ${columns.map(col => `<th>${col.header}</th>`).join('')}\\n        </tr>\\n      </thead>\\n      <tbody class=\\\"initial-rows\\\">\\n        ${initialItems.map(item => `\\n          <tr>\\n            ${columns.map(col => `<td class=\\\"${col.class || ''}\\\">${col.render(item)}</td>`).join('')}\\n          </tr>\\n        `).join('')}\\n      </tbody>\\n      ${hasMoreItems ? `\\n        <tbody class=\\\"hidden-rows\\\" style=\\\"display: none;\\\">\\n          ${hiddenItems.map(item => `\\n            <tr>\\n              ${columns.map(col => `<td class=\\\"${col.class || ''}\\\">${col.render(item)}</td>`).join('')}\\n            </tr>\\n          `).join('')}\\n        </tbody>\\n      ` : ''}\\n    </table>\\n    ${hasMoreItems ? `\\n      <div class=\\\"table-pagination\\\">\\n        <button class=\\\"show-more-button\\\" onclick=\\\"toggleRows(this)\\\">Show All (${items.length} rows)</button>\\n      </div>\\n    ` : ''}\\n  `;\\n}\\n\\n// Helper function to render source links for 404 and 301 pages\\nfunction renderSourceLinks(sources) {\\n  if (!sources || sources.length === 0) {\\n    return '<p class=\\\"no-sources\\\">No source links found.</p>';\\n  }\\n  \\n  return `\\n    <div class=\\\"source-links\\\">\\n      <table class=\\\"source-links-table\\\">\\n        <thead>\\n          <tr>\\n            <th>Source URL</th>\\n            <th>Type</th>\\n            <th>Anchor Text</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          ${sources.map(source => `\\n            <tr>\\n              <td class=\\\"url-cell\\\"><a href=\\\"${source.linkFrom}\\\" target=\\\"_blank\\\">${source.linkFrom}</a></td>\\n              <td>${source.type || 'N/A'}</td>\\n              <td>${source.text || 'N/A'}</td>\\n            </tr>\\n          `).join('')}\\n        </tbody>\\n      </table>\\n    </div>\\n  `;\\n}\\n\\n// Return a single item with the HTML content\\nreturn [{\\n  html: `<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n  <meta charset=\\\"UTF-8\\\">\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n  <title>Content Audit Report for ${websiteDomain} | ${companyName}</title>\\n  <style>\\n    :root {\\n      --primary-color: ${primaryColor};\\n      --secondary-color: ${secondaryColor};\\n      --primary-light: ${lightenColor(primaryColor, 85)};\\n      --secondary-light: ${lightenColor(secondaryColor, 85)};\\n      --primary-dark: ${darkenColor(primaryColor, 20)};\\n      --text-color: #333;\\n      --light-gray: #f5f5f5;\\n      --medium-gray: #e0e0e0;\\n      --dark-gray: #757575;\\n      --success-color: #4caf50;\\n      --warning-color: #ff9800;\\n      --danger-color: #f44336;\\n    }\\n    \\n    * {\\n      margin: 0;\\n      padding: 0;\\n      box-sizing: border-box;\\n    }\\n    \\n    body {\\n      font-family: 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\\n      line-height: 1.6;\\n      color: var(--text-color);\\n      background-color: #fff;\\n    }\\n    \\n    .container {\\n      max-width: 1200px;\\n      margin: 0 auto;\\n      padding: 0 20px;\\n    }\\n    \\n    header {\\n      background-color: var(--primary-color);\\n      color: white;\\n      padding: 30px 0;\\n      margin-bottom: 40px;\\n    }\\n    \\n    .header-content {\\n      display: flex;\\n      justify-content: space-between;\\n      align-items: center;\\n    }\\n    \\n    .logo-container {\\n      display: flex;\\n      align-items: center;\\n    }\\n    \\n    .logo {\\n      max-height: 60px;\\n      margin-right: 20px;\\n    }\\n    \\n    .report-info {\\n      text-align: right;\\n    }\\n    \\n    h1 {\\n      font-size: 1.8rem;\\n      margin-bottom: 0px;\\n      color: white;\\n    }\\n    \\n    h2 {\\n      font-size: 1.8rem;\\n      margin: 40px 0 20px;\\n      color: var(--primary-color);\\n      border-bottom: 2px solid var(--primary-light);\\n      padding-bottom: 10px;\\n    }\\n    \\n    h3 {\\n      font-size: 1.4rem;\\n      margin: 30px 0 15px;\\n      color: var(--primary-dark);\\n    }\\n    \\n    h4 {\\n      font-size: 1.2rem;\\n      margin: 20px 0 10px;\\n      color: var(--secondary-color);\\n    }\\n    \\n    p {\\n      margin-bottom: 15px;\\n    }\\n    \\n    .summary-cards {\\n      display: grid;\\n      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\\n      gap: 20px;\\n      margin: 30px 0;\\n    }\\n    \\n    .card {\\n      background-color: white;\\n      border-radius: 8px;\\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n      padding: 20px;\\n      transition: transform 0.3s ease;\\n    }\\n    \\n    .card:hover {\\n      transform: translateY(-5px);\\n    }\\n    \\n    .card-header {\\n      display: flex;\\n      justify-content: space-between;\\n      align-items: center;\\n      margin-bottom: 15px;\\n    }\\n    \\n    .card-title {\\n      font-size: 1.2rem;\\n      font-weight: 600;\\n      color: var(--primary-color);\\n    }\\n    \\n    .card-value {\\n      font-size: 2.5rem;\\n      font-weight: 700;\\n      color: var(--secondary-color);\\n    }\\n    \\n    .issues-summary {\\n      display: flex;\\n      justify-content: space-between;\\n      flex-wrap: wrap;\\n      gap: 15px;\\n      margin: 30px 0;\\n    }\\n    \\n    .issue-category {\\n      flex: 1;\\n      min-width: 250px;\\n      background-color: var(--light-gray);\\n      border-radius: 8px;\\n      padding: 20px;\\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\\n    }\\n    \\n    .issue-category h3 {\\n      color: var(--primary-color);\\n      margin-top: 0;\\n      border-bottom: 1px solid var(--medium-gray);\\n      padding-bottom: 10px;\\n    }\\n    \\n    .issue-item {\\n      display: flex;\\n      justify-content: space-between;\\n      padding: 8px 0;\\n      border-bottom: 1px solid var(--medium-gray);\\n    }\\n    \\n    .issue-item:last-child {\\n      border-bottom: none;\\n    }\\n    \\n    .issue-name {\\n      color: var(--text-color);\\n    }\\n    \\n    .issue-count {\\n      font-weight: 600;\\n      color: var(--secondary-color);\\n    }\\n    \\n    table {\\n      width: 100%;\\n      border-collapse: collapse;\\n      margin: 20px 0 40px;\\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n    }\\n    \\n    th {\\n      background-color: var(--primary-color);\\n      color: white;\\n      text-align: left;\\n      padding: 12px 15px;\\n    }\\n    \\n    tr:nth-child(even) {\\n      background-color: var(--light-gray);\\n    }\\n    \\n    td {\\n      padding: 10px 15px;\\n      border-bottom: 1px solid var(--medium-gray);\\n    }\\n    \\n    .url-cell {\\n      max-width: 300px;\\n      overflow: hidden;\\n      text-overflow: ellipsis;\\n      white-space: nowrap;\\n    }\\n    \\n    .url-cell a {\\n      color: var(--primary-color);\\n      text-decoration: none;\\n    }\\n    \\n    .url-cell a:hover {\\n      text-decoration: underline;\\n    }\\n    \\n    .todo-cell {\\n      max-width: 400px;\\n    }\\n    \\n    .flag {\\n      display: inline-block;\\n      padding: 3px 8px;\\n      border-radius: 4px;\\n      margin: 2px;\\n      font-size: 0.8rem;\\n      background-color: var(--primary-light);\\n      color: var(--primary-dark);\\n    }\\n    \\n    .pages-table {\\n      margin-top: 30px;\\n    }\\n    \\n    .pages-table th {\\n      position: sticky;\\n      top: 0;\\n    }\\n    \\n    footer {\\n      margin-top: 60px;\\n      padding: 30px 0;\\n      background-color: var(--primary-light);\\n      color: var(--primary-dark);\\n      text-align: center;\\n    }\\n    \\n    .footer-content {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n    }\\n    \\n    .company-info {\\n      margin-bottom: 20px;\\n    }\\n    \\n    .company-website {\\n      color: var(--primary-color);\\n      text-decoration: none;\\n      font-weight: 600;\\n    }\\n    \\n    .company-website:hover {\\n      text-decoration: underline;\\n    }\\n    \\n    .date-generated {\\n      font-style: italic;\\n      color: var(--dark-gray);\\n    }\\n    \\n    .progress-bar-container {\\n      width: 100%;\\n      background-color: var(--light-gray);\\n      border-radius: 10px;\\n      margin: 10px 0;\\n      overflow: hidden;\\n    }\\n    \\n    .progress-bar {\\n      height: 10px;\\n      background-color: var(--secondary-color);\\n      border-radius: 10px;\\n    }\\n    \\n    .recommendations {\\n      background-color: var(--secondary-light);\\n      border-left: 4px solid var(--secondary-color);\\n      padding: 15px;\\n      margin: 20px 0;\\n      border-radius: 0 4px 4px 0;\\n    }\\n    \\n    .recommendations h4 {\\n      color: var(--secondary-color);\\n      margin-top: 0;\\n    }\\n    \\n    .recommendations ul {\\n      margin-left: 20px;\\n    }\\n    \\n    .recommendations li {\\n      margin-bottom: 8px;\\n    }\\n    \\n    .priority-tag {\\n      display: inline-block;\\n      padding: 3px 8px;\\n      border-radius: 4px;\\n      margin-left: 8px;\\n      font-size: 0.8rem;\\n      font-weight: 600;\\n    }\\n    \\n    .high {\\n      background-color: rgba(244, 67, 54, 0.1);\\n      color: var(--danger-color);\\n    }\\n    \\n    .medium {\\n      background-color: rgba(255, 152, 0, 0.1);\\n      color: var(--warning-color);\\n    }\\n    \\n    .low {\\n      background-color: rgba(76, 175, 80, 0.1);\\n      color: var(--success-color);\\n    }\\n    \\n    .section-empty {\\n      font-style: italic;\\n      color: var(--dark-gray);\\n      padding: 15px;\\n      background-color: var(--light-gray);\\n      border-radius: 4px;\\n      text-align: center;\\n    }\\n    \\n    .source-links {\\n      margin-top: 10px;\\n      margin-bottom: 20px;\\n      padding: 10px;\\n      background-color: var(--light-gray);\\n      border-radius: 4px;\\n      border-left: 3px solid var(--secondary-color);\\n    }\\n    \\n    .source-links h4 {\\n      margin-top: 0;\\n      margin-bottom: 10px;\\n      color: var(--secondary-color);\\n      font-size: 1rem;\\n    }\\n    \\n    .source-links-table {\\n      margin: 0;\\n      box-shadow: none;\\n    }\\n    \\n    .source-links-table th {\\n      background-color: var(--secondary-color);\\n      font-size: 0.9rem;\\n      padding: 8px 10px;\\n    }\\n    \\n    .source-links-table td {\\n      font-size: 0.9rem;\\n      padding: 6px 10px;\\n    }\\n    \\n    .no-sources {\\n      font-style: italic;\\n      color: var(--dark-gray);\\n      margin: 5px 0;\\n    }\\n    \\n    .toggle-sources {\\n      background-color: var(--secondary-light);\\n      color: var(--secondary-color);\\n      border: 1px solid var(--secondary-color);\\n      border-radius: 4px;\\n      padding: 5px 10px;\\n      font-size: 0.8rem;\\n      cursor: pointer;\\n      margin-top: 5px;\\n      transition: background-color 0.3s;\\n    }\\n    \\n    .toggle-sources:hover {\\n      background-color: var(--secondary-color);\\n      color: white;\\n    }\\n    \\n    .sources-container {\\n      margin-top: 10px;\\n    }\\n    \\n    .show-more-button {\\n      background-color: var(--primary-color);\\n      color: white;\\n      border: none;\\n      border-radius: 4px;\\n      padding: 8px 16px;\\n      font-size: 0.9rem;\\n      font-weight: 600;\\n      cursor: pointer;\\n      margin: 10px auto;\\n      display: block;\\n      transition: all 0.3s ease;\\n      box-shadow: 0 2px 5px rgba(0,0,0,0.1);\\n    }\\n    \\n    .show-more-button:hover {\\n      background-color: var(--primary-dark);\\n      box-shadow: 0 3px 7px rgba(0,0,0,0.2);\\n      transform: translateY(-2px);\\n    }\\n    \\n    .table-pagination {\\n      text-align: center;\\n      margin-top: -20px;\\n      margin-bottom: 30px;\\n    }\\n    \\n    @media print {\\n      body {\\n        font-size: 12pt;\\n      }\\n      \\n      .container {\\n        width: 100%;\\n        max-width: none;\\n        padding: 0;\\n      }\\n      \\n      header {\\n        padding: 15px 0;\\n      }\\n      \\n      h1 {\\n        font-size: 20pt;\\n      }\\n      \\n      h2 {\\n        font-size: 18pt;\\n        margin-top: 20px;\\n      }\\n      \\n      h3 {\\n        font-size: 14pt;\\n      }\\n      \\n      .card:hover {\\n        transform: none;\\n      }\\n      \\n      table {\\n        page-break-inside: avoid;\\n      }\\n      \\n      tr {\\n        page-break-inside: avoid;\\n      }\\n      \\n      .no-print {\\n        display: none;\\n      }\\n      \\n      @page {\\n        margin: 1.5cm;\\n      }\\n    }\\n  </style>\\n  <script>\\n    // JavaScript to toggle source links visibility\\n    document.addEventListener('DOMContentLoaded', function() {\\n      document.querySelectorAll('.toggle-sources').forEach(button => {\\n        button.addEventListener('click', function() {\\n          const container = this.nextElementSibling;\\n          if (container.style.display === 'none' || !container.style.display) {\\n            container.style.display = 'block';\\n            this.textContent = 'Hide Source Links';\\n          } else {\\n            container.style.display = 'none';\\n            this.textContent = 'Show Source Links';\\n          }\\n        });\\n      });\\n    });\\n    \\n    // JavaScript to toggle table rows visibility\\n    function toggleRows(button) {\\n      const table = button.closest('.table-pagination').previousElementSibling;\\n      const hiddenRows = table.querySelector('.hidden-rows');\\n      const totalRows = hiddenRows.querySelectorAll('tr').length + table.querySelector('.initial-rows').querySelectorAll('tr').length;\\n      \\n      if (hiddenRows.style.display === 'none' || !hiddenRows.style.display) {\\n        hiddenRows.style.display = 'table-row-group';\\n        button.textContent = 'Show Less';\\n      } else {\\n        hiddenRows.style.display = 'none';\\n        button.textContent = 'Show All (' + totalRows + ' items)';\\n      }\\n    }\\n  </script>\\n</head>\\n<body>\\n  <header>\\n    <div class=\\\"container\\\">\\n      <div class=\\\"header-content\\\">\\n        <div class=\\\"logo-container\\\">\\n          <img src=\\\"${companyLogoUrl}\\\" alt=\\\"${companyName} Logo\\\" class=\\\"logo\\\">\\n          <div>\\n            <h1>Content Audit Report</h1>\\n            <p>for ${websiteDomain}</p>\\n          </div>\\n        </div>\\n        <div class=\\\"report-info\\\">\\n          <p>Generated on: ${formattedDate}</p>\\n          <p>By: ${companyName}</p>\\n        </div>\\n      </div>\\n    </div>\\n  </header>\\n\\n  <main class=\\\"container\\\">\\n    <section id=\\\"executive-summary\\\">\\n      <h2>Executive Summary</h2>\\n      <p>This report provides a comprehensive analysis of content issues found on <strong>${websiteDomain}</strong>. We've identified ${totalIssues} issues across ${auditData.summary.pages} pages that need attention to improve SEO performance and user experience.</p>\\n      \\n      <div class=\\\"summary-cards\\\">\\n        <div class=\\\"card\\\">\\n          <div class=\\\"card-header\\\">\\n            <span class=\\\"card-title\\\">Pages Analyzed</span>\\n          </div>\\n          <div class=\\\"card-value\\\">${auditData.summary.pages}</div>\\n        </div>\\n        \\n        <div class=\\\"card\\\">\\n          <div class=\\\"card-header\\\">\\n            <span class=\\\"card-title\\\">Total Issues</span>\\n          </div>\\n          <div class=\\\"card-value\\\">${totalIssues}</div>\\n        </div>\\n        \\n        <div class=\\\"card\\\">\\n          <div class=\\\"card-header\\\">\\n            <span class=\\\"card-title\\\">Health Score</span>\\n          </div>\\n          <div class=\\\"card-value\\\" style=\\\"color: ${getHealthScoreColor(calculateHealthScore(auditData.summary.pages, totalIssues))};\\\">${calculateHealthScore(auditData.summary.pages, totalIssues)}%</div>\\n          <div class=\\\"progress-bar-container\\\">\\n            <div class=\\\"progress-bar\\\" style=\\\"width: ${calculateHealthScore(auditData.summary.pages, totalIssues)}%\\\"></div>\\n          </div>\\n        </div>\\n      </div>\\n      \\n      <div class=\\\"recommendations\\\">\\n        <h4>Key Recommendations</h4>\\n        <ul>\\n          ${getTopRecommendations(auditData).map(rec => `<li>${rec.text} <span class=\\\"priority-tag ${rec.priority}\\\">${rec.priority}</span></li>`).join('')}\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\\\"issues-breakdown\\\">\\n      <h2>Issues Breakdown</h2>\\n      \\n      <div class=\\\"issues-summary\\\">\\n        <div class=\\\"issue-category\\\">\\n          <h3>Content Quality</h3>\\n          <div class=\\\"issues-list\\\">\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Outdated Content</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.outdated}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Thin Content</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.thin}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Readability Issues</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.readability}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Large HTML</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.largeHTML}</span>\\n            </div>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"issue-category\\\">\\n          <h3>Technical SEO</h3>\\n          <div class=\\\"issues-list\\\">\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">404 Errors</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues['404']}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Redirects</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.redirects}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Canonicalization Issues</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.canonicalised}</span>\\n            </div>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"issue-category\\\">\\n          <h3>On-Page SEO</h3>\\n          <div class=\\\"issues-list\\\">\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Title Length Issues</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.titleLen}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Description Issues</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.descriptionLen}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Missing/Duplicate Meta</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.missingOrDuplicateMeta}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">H1 Issues</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.h1Issues}</span>\\n            </div>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"issue-category\\\">\\n          <h3>Internal Linking</h3>\\n          <div class=\\\"issues-list\\\">\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Excessive Click Depth</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.excessiveClickDepth}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Orphan Pages</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.orphan}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Low Internal Links</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.lowInternalLinks}</span>\\n            </div>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"issue-category\\\">\\n          <h3>Performance</h3>\\n          <div class=\\\"issues-list\\\">\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Underperforming Pages</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.underperforming}</span>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </section>\\n\\n    <!-- Status Issues Section -->\\n    <section id=\\\"status-issues\\\">\\n      <h2>Status Issues</h2>\\n      \\n      <h3>404 Errors (${(auditData.issues.statusIssues.pages404 || []).length})</h3>\\n      ${(auditData.issues.statusIssues.pages404 || []).length === 0 ? \\n        `<p class=\\\"section-empty\\\">No issues found.</p>` : \\n        (() => {\\n          const items = auditData.issues.statusIssues.pages404 || [];\\n          const showInitial = 10; // Number of rows to show initially\\n          const hasMoreItems = items.length > showInitial;\\n          const initialItems = hasMoreItems ? items.slice(0, showInitial) : items;\\n          const hiddenItems = hasMoreItems ? items.slice(showInitial) : [];\\n          \\n          return `\\n            <table class=\\\"paginated-table\\\">\\n              <thead>\\n                <tr>\\n                  <th>URL</th>\\n                  <th>Source Links</th>\\n                  <th>Recommendation</th>\\n                </tr>\\n              </thead>\\n              <tbody class=\\\"initial-rows\\\">\\n                ${initialItems.map(item => `\\n                  <tr>\\n                    <td class=\\\"url-cell\\\"><a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a></td>\\n                    <td>\\n                      ${item.sources && item.sources.length > 0 ? \\n                        `<button class=\\\"toggle-sources\\\">Show Source Links (${item.sources.length})</button>\\n                        <div class=\\\"sources-container\\\" style=\\\"display: none;\\\">\\n                          ${renderSourceLinks(item.sources)}\\n                        </div>` : \\n                        `<span class=\\\"no-sources\\\">No source links found</span>`\\n                      }\\n                    </td>\\n                    <td class=\\\"todo-cell\\\">${item.todo}</td>\\n                  </tr>\\n                `).join('')}\\n              </tbody>\\n              ${hasMoreItems ? `\\n                <tbody class=\\\"hidden-rows\\\" style=\\\"display: none;\\\">\\n                  ${hiddenItems.map(item => `\\n                    <tr>\\n                      <td class=\\\"url-cell\\\"><a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a></td>\\n                      <td>\\n                        ${item.sources && item.sources.length > 0 ? \\n                          `<button class=\\\"toggle-sources\\\">Show Source Links (${item.sources.length})</button>\\n                          <div class=\\\"sources-container\\\" style=\\\"display: none;\\\">\\n                            ${renderSourceLinks(item.sources)}\\n                          </div>` : \\n                          `<span class=\\\"no-sources\\\">No source links found</span>`\\n                        }\\n                      </td>\\n                      <td class=\\\"todo-cell\\\">${item.todo}</td>\\n                    </tr>\\n                  `).join('')}\\n                </tbody>\\n              ` : ''}\\n            </table>\\n            ${hasMoreItems ? `\\n              <div class=\\\"table-pagination\\\">\\n                <button class=\\\"show-more-button\\\" onclick=\\\"toggleRows(this)\\\">Show All (${items.length} rows)</button>\\n              </div>\\n            ` : ''}\\n          `;\\n        })()\\n      }\\n      \\n      <h3>301 Redirects (${(auditData.issues.statusIssues.redirects301 || []).length})</h3>\\n      ${(auditData.issues.statusIssues.redirects301 || []).length === 0 ? \\n        `<p class=\\\"section-empty\\\">No issues found.</p>` : \\n        (() => {\\n          const items = auditData.issues.statusIssues.redirects301 || [];\\n          const showInitial = 10; // Number of rows to show initially\\n          const hasMoreItems = items.length > showInitial;\\n          const initialItems = hasMoreItems ? items.slice(0, showInitial) : items;\\n          const hiddenItems = hasMoreItems ? items.slice(showInitial) : [];\\n          \\n          return `\\n            <table class=\\\"paginated-table\\\">\\n              <thead>\\n                <tr>\\n                  <th>URL</th>\\n                  <th>Source Links</th>\\n                  <th>Recommendation</th>\\n                </tr>\\n              </thead>\\n              <tbody class=\\\"initial-rows\\\">\\n                ${initialItems.map(item => `\\n                  <tr>\\n                    <td class=\\\"url-cell\\\"><a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a></td>\\n                    <td>\\n                      ${item.sources && item.sources.length > 0 ? \\n                        `<button class=\\\"toggle-sources\\\">Show Source Links (${item.sources.length})</button>\\n                        <div class=\\\"sources-container\\\" style=\\\"display: none;\\\">\\n                          ${renderSourceLinks(item.sources)}\\n                        </div>` : \\n                        `<span class=\\\"no-sources\\\">No source links found</span>`\\n                      }\\n                    </td>\\n                    <td class=\\\"todo-cell\\\">${item.todo}</td>\\n                  </tr>\\n                `).join('')}\\n              </tbody>\\n              ${hasMoreItems ? `\\n                <tbody class=\\\"hidden-rows\\\" style=\\\"display: none;\\\">\\n                  ${hiddenItems.map(item => `\\n                    <tr>\\n                      <td class=\\\"url-cell\\\"><a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a></td>\\n                      <td>\\n                        ${item.sources && item.sources.length > 0 ? \\n                          `<button class=\\\"toggle-sources\\\">Show Source Links (${item.sources.length})</button>\\n                          <div class=\\\"sources-container\\\" style=\\\"display: none;\\\">\\n                            ${renderSourceLinks(item.sources)}\\n                          </div>` : \\n                          `<span class=\\\"no-sources\\\">No source links found</span>`\\n                        }\\n                      </td>\\n                      <td class=\\\"todo-cell\\\">${item.todo}</td>\\n                    </tr>\\n                  `).join('')}\\n                </tbody>\\n              ` : ''}\\n            </table>\\n            ${hasMoreItems ? `\\n              <div class=\\\"table-pagination\\\">\\n                <button class=\\\"show-more-button\\\" onclick=\\\"toggleRows(this)\\\">Show All (${items.length} rows)</button>\\n              </div>\\n            ` : ''}\\n          `;\\n        })()\\n      }\\n      \\n      <h3>Canonicalization Issues (${(auditData.issues.statusIssues.canonicalised || []).length})</h3>\\n      ${renderTableSection(auditData.issues.statusIssues.canonicalised, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Canonical URL', render: item => item.canonical || '—' },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n    </section>\\n\\n    <!-- Content Quality Issues Section -->\\n    <section id=\\\"content-quality-issues\\\">\\n      <h2>Content Quality Issues</h3>\\n      \\n      <h3>Outdated Content (${(auditData.issues.contentQuality.staleLastModified || []).length})</h3>\\n      ${renderTableSection(auditData.issues.contentQuality.staleLastModified, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Last Modified', render: item => item.lastModified },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Thin Content (${(auditData.issues.contentQuality.thinContent || []).length})</h3>\\n      ${renderTableSection(auditData.issues.contentQuality.thinContent, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Word Count', render: item => item.words },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Readability Issues (${(auditData.issues.contentQuality.readability || []).length})</h3>\\n      ${renderTableSection(auditData.issues.contentQuality.readability, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'F-K Score', render: item => item.score.toFixed(1) },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Outdated Meta Years (${(auditData.issues.contentQuality.outdatedMetaYear || []).length})</h3>\\n      ${renderTableSection(auditData.issues.contentQuality.outdatedMetaYear, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Field', render: item => item.field },\\n        { header: 'Years', render: item => item.years },\\n        { header: 'Original Text', render: item => item.original },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Large HTML (${(auditData.issues.contentQuality.largeHTML || []).length})</h3>\\n      ${renderTableSection(auditData.issues.contentQuality.largeHTML, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Size (bytes)', render: item => item.size ? item.size.toLocaleString() : 'N/A' },\\n        { header: 'DOM Size (bytes)', render: item => item.totalDom ? item.totalDom.toLocaleString() : 'N/A' },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n    </section>\\n    \\n    <!-- Metadata & SEO Issues Section -->\\n    <section id=\\\"metadata-seo-issues\\\">\\n      <h2>Metadata & SEO Issues</h2>\\n      \\n      <h3>Title Length Issues (${(auditData.issues.metadataSEO.titleLength || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.titleLength, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Length', render: item => `${item.length} characters` },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Description Length Issues (${(auditData.issues.metadataSEO.descriptionLength || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.descriptionLength, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Length', render: item => `${item.length} characters` },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Missing Titles (${(auditData.issues.metadataSEO.missingTitle || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.missingTitle, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Missing Descriptions (${(auditData.issues.metadataSEO.missingDescription || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.missingDescription, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Duplicate Titles (${(auditData.issues.metadataSEO.duplicateTitle || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.duplicateTitle, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Title', render: item => item.title },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Duplicate Descriptions (${(auditData.issues.metadataSEO.duplicateDescription || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.duplicateDescription, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Description', render: item => item.description },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>H1 Issues (${(auditData.issues.metadataSEO.h1Issues || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.h1Issues, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'H1 Count', render: item => item.h1Count },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n    </section>\\n    \\n    <!-- Internal Linking Issues Section -->\\n    <section id=\\\"internal-linking-issues\\\">\\n      <h2>Internal Linking Issues</h2>\\n      \\n      <h3>Excessive Click Depth (${(auditData.issues.internalLinking.excessiveClickDepth || []).length})</h3>\\n      ${renderTableSection(auditData.issues.internalLinking.excessiveClickDepth, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Click Depth', render: item => item.depth },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Orphan Pages (${(auditData.issues.internalLinking.orphanPages || []).length})</h3>\\n      ${renderTableSection(auditData.issues.internalLinking.orphanPages, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Low Internal Links (${(auditData.issues.internalLinking.lowInternalLinks || []).length})</h3>\\n      ${renderTableSection(auditData.issues.internalLinking.lowInternalLinks, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Internal Links', render: item => item.links },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n    </section>\\n    \\n    <!-- Performance Issues Section -->\\n    <section id=\\\"performance-issues\\\">\\n      <h2>Performance Issues</h2>\\n      \\n      <h3>Underperforming Content (${(auditData.issues.underperformingContent || []).length})</h3>\\n      ${renderTableSection(auditData.issues.underperformingContent, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Clicks', render: item => item.clicks },\\n        { header: 'Impressions', render: item => item.impressions },\\n        { header: 'Last Modified', render: item => item.lastModified },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n    </section>\\n\\n    <section id=\\\"all-pages\\\">\\n      <h2>All Pages Overview</h2>\\n      <p>Below is a summary of all pages analyzed with their respective issues flagged.</p>\\n      \\n      ${(() => {\\n        const items = auditData.pages || [];\\n        const showInitial = 10; // Number of rows to show initially\\n        const hasMoreItems = items.length > showInitial;\\n        const initialItems = hasMoreItems ? items.slice(0, showInitial) : items;\\n        const hiddenItems = hasMoreItems ? items.slice(showInitial) : [];\\n        \\n        return `\\n          <table class=\\\"paginated-table pages-table\\\">\\n            <thead>\\n              <tr>\\n                <th>URL</th>\\n                <th>Issues</th>\\n                <th>Clicks</th>\\n                <th>Impressions</th>\\n              </tr>\\n            </thead>\\n            <tbody class=\\\"initial-rows\\\">\\n              ${initialItems.map(page => `\\n                <tr>\\n                  <td class=\\\"url-cell\\\"><a href=\\\"${page.url}\\\" target=\\\"_blank\\\">${page.url}</a></td>\\n                  <td>${page.flags.map(flag => `<span class=\\\"flag\\\">${formatFlagName(flag)}</span>`).join('')}</td>\\n                  <td>${page.clicks !== null ? page.clicks : 'N/A'}</td>\\n                  <td>${page.impressions !== null ? page.impressions : 'N/A'}</td>\\n                </tr>\\n              `).join('')}\\n            </tbody>\\n            ${hasMoreItems ? `\\n              <tbody class=\\\"hidden-rows\\\" style=\\\"display: none;\\\">\\n                ${hiddenItems.map(page => `\\n                  <tr>\\n                    <td class=\\\"url-cell\\\"><a href=\\\"${page.url}\\\" target=\\\"_blank\\\">${page.url}</a></td>\\n                    <td>${page.flags.map(flag => `<span class=\\\"flag\\\">${formatFlagName(flag)}</span>`).join('')}</td>\\n                    <td>${page.clicks !== null ? page.clicks : 'N/A'}</td>\\n                    <td>${page.impressions !== null ? page.impressions : 'N/A'}</td>\\n                  </tr>\\n                `).join('')}\\n              </tbody>\\n            ` : ''}\\n          </table>\\n          ${hasMoreItems ? `\\n            <div class=\\\"table-pagination\\\">\\n              <button class=\\\"show-more-button\\\" onclick=\\\"toggleRows(this)\\\">Show All (${items.length} rows)</button>\\n            </div>\\n          ` : ''}\\n        `;\\n      })()}\\n    </section>\\n    \\n    <section id=\\\"next-steps\\\">\\n      <h2>Recommended Next Steps</h2>\\n      <p>Based on our analysis, we recommend the following actions to improve your content performance:</p>\\n      \\n      <div class=\\\"recommendations\\\">\\n        <h4>Priority Actions</h4>\\n        <ul>\\n          ${auditData.summary.issues['404'] > 0 ? \\n            `<li>Fix 404 errors by restoring pages or implementing proper redirects</li>` : ''}\\n          ${auditData.summary.issues.redirects > 0 ? \\n            `<li>Update internal links to point directly to final URLs instead of through redirects</li>` : ''}\\n          ${auditData.summary.issues.thin > 0 ? \\n            `<li>Expand thin content pages to at least 1,500 words with valuable, unique information</li>` : ''}\\n          ${auditData.summary.issues.outdated > 0 ? \\n            `<li>Update all content that hasn't been refreshed in the last 12 months</li>` : ''}\\n          ${auditData.summary.issues.missingOrDuplicateMeta > 0 ? \\n            `<li>Add unique meta descriptions to all pages missing them</li>` : ''}\\n          ${auditData.summary.issues.titleLen > 0 ? \\n            `<li>Optimize page titles to be between 40-60 characters</li>` : ''}\\n          ${auditData.summary.issues.descriptionLen > 0 ? \\n            `<li>Optimize meta descriptions to be between 70-155 characters</li>` : ''}\\n          ${auditData.summary.issues.readability > 0 ? \\n            `<li>Improve content readability by simplifying language and shortening sentences</li>` : ''}\\n          ${auditData.summary.issues.underperforming > 0 ? \\n            `<li>Identify keywords with potential for pages with high impressions but low clicks</li>` : ''}\\n          ${auditData.summary.issues.orphan > 0 ? \\n            `<li>Create internal links to orphan pages to improve crawlability</li>` : ''}\\n          ${auditData.summary.issues.lowInternalLinks > 0 ? \\n            `<li>Improve internal linking between related content</li>` : ''}\\n          <li>Implement a content calendar to regularly refresh content</li>\\n          <li>Conduct keyword research to identify new content opportunities</li>\\n        </ul>\\n      </div>\\n      \\n      <h3>Implementation Timeline</h3>\\n      <p>We recommend addressing these issues in the following order:</p>\\n      \\n      <ol>\\n        <li><strong>Immediate (1-2 weeks):</strong> Fix technical issues like 404 errors, redirects, missing meta descriptions, and outdated year references.</li>\\n        <li><strong>Short-term (2-4 weeks):</strong> Update thin content and improve readability on key pages.</li>\\n        <li><strong>Medium-term (1-2 months):</strong> Refresh outdated content, especially on high-impression pages.</li>\\n        <li><strong>Long-term (2-3 months):</strong> Implement a content calendar to regularly update content and prevent future staleness.</li>\\n      </ol>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <div class=\\\"container\\\">\\n      <div class=\\\"footer-content\\\">\\n        <div class=\\\"company-info\\\">\\n          <p>Report generated by <strong>${companyName}</strong></p>\\n          <a href=\\\"${companyWebsite}\\\" class=\\\"company-website\\\" target=\\\"_blank\\\">${companyWebsite}</a>\\n        </div>\\n        <p class=\\\"date-generated\\\">Generated on ${formattedDate}</p>\\n      </div>\\n    </div>\\n  </footer>\\n</body>\\n</html>`\\n}];\"},\"typeVersion\":2},{\"id\":\"b772f856-e1cf-44fd-8fc7-1ac5d8b033ca\",\"name\":\"Extract 404 & 301\",\"type\":\"n8n-nodes-base.code\",\"position\":[1880,500],\"parameters\":{\"jsCode\":\"// Get input data from the updated node\\nconst input = $('Get RAW Audit Data').first().json;\\n\\n// Initialize an array to store the new items\\nconst output = [];\\n\\n// Loop through tasks\\nconst tasks = input.tasks || [];\\nfor (const task of tasks) {\\n    const results = task.result || [];\\n    for (const result of results) {\\n        const items = result.items || [];\\n        for (const page of items) {\\n            // Only include URLs with status_code 404 or 301\\n            if (page.url && (page.status_code === 404 || page.status_code === 301)) {\\n                output.push({ json: { url: page.url, status_code: page.status_code } });\\n            }\\n        }\\n    }\\n}\\n\\n// Return filtered URLs with status codes 404 or 301\\nreturn output;\\n\"},\"typeVersion\":2},{\"id\":\"2bc70a8c-5c2d-4cb5-be4f-8d051f32ad23\",\"name\":\"Loop Over Items1\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[2100,500],\"parameters\":{\"options\":{}},\"typeVersion\":3},{\"id\":\"4defc61c-7f05-4b64-9b68-96f097a9ba92\",\"name\":\"Map URLs Data\",\"type\":\"n8n-nodes-base.code\",\"position\":[2520,500],\"parameters\":{\"jsCode\":\"// Get the input data\\nconst input = items[0].json;\\n\\n// Access the items array\\nconst linkItems = input.tasks[0].result[0].items;\\n\\n// Extract the target URL and status code from the first item\\nconst url = linkItems[0].link_to;\\nconst pageStatus = linkItems[0].page_to_status_code;\\n\\n// Build the output object\\nconst output = {\\n  URL: url,\\n  page_to_status_code: pageStatus,\\n  sources: linkItems.map(item => ({\\n    type: item.type,\\n    link_from: item.link_from,\\n    text: item.text\\n  }))\\n};\\n\\n// Return formatted output\\nreturn [{ json: output }];\\n\"},\"typeVersion\":2},{\"id\":\"bbf44181-0ea7-48b2-b89e-143d72460d27\",\"name\":\"Get Source URLs Data\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2320,500],\"parameters\":{\"url\":\"https://api.dataforseo.com/v3/on_page/links\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"=[\\n  {\\n    \\\"id\\\": \\\"{{ $('Get RAW Audit Data').first().json.tasks[0].id }}\\\",\\n    \\\"page_to\\\": \\\"{{ $json.url }}\\\"\\n  }\\n]\",\"sendBody\":true,\"sendHeaders\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpBasicAuth\",\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"}]}},\"typeVersion\":4.2},{\"id\":\"cae4d8e7-5a63-417d-a025-3f6631ead225\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[0,0],\"parameters\":{\"width\":940,\"height\":580,\"content\":\"## Content SEO Audit Report\\nA workflow powered by DataForSEO and Google Search Analytics API that generate a comprehensive content audit report for any website up to 1000 pages, 100% customized to your brand's colors.\\n\\n### Set up instructions:\\n1. Add a new credential \\\"Basic Auth\\\" by following this [guide](https://docs.n8n.io/integrations/builtin/credentials/httprequest/). You can get your DataForSEO API credentials [here](https://app.dataforseo.com/api-access). DataForSEO offer a free $1 credit when you register, which is plenty enough to test the workflow as the cost is about ~$0.20 per 500-page report. Finally, assign your Basic Auth account to the node \\\"Create Task\\\", \\\"Check Task Status\\\", \\\"Get Raw Audit Data\\\" and \\\"Get Source URLs Data\\\".\\n2. Add a new credential \\\"Google OAuth2 API\\\" by following this [guide](https://docs.n8n.io/integrations/builtin/credentials/google/oauth-generic/). Assign your Google OAuth2 account to the node \\\"Query GSC API\\\".\\n3. Update the \\\"Set Fields\\\" node with the following information:\\n- dfs_domain: The website domain you want to crawl.\\n- company_name: Your company name (Will be displayed on the final report)\\n- company_website: Your company website URL (Will be displayed on the final report)\\n- company_logo_url: Your company logo URL (Will be displayed on the final report)\\n- brand_primary_color: Your primary brand color. (Will be used to customize the final report to your brand's colors)\\n- brand_secondary_color: Your secondary brand color. (Will be used to customize the final report to your brand's colors)\\n- gsc_property_type: Set to \\\"domain\\\" or \\\"url\\\" depending of the property type set in your Google Search Console account for the target website (dfs_domain).\\n4. Start the workflow. Once done, download the HTML file in the last node \\\"Download Report\\\". \\n\\nVoilà! You have a comprehensive content audit report ready to be sent to your client via email, customized to your own branding.\\n\\n**Note**: The workflow take approximately 20 minutes to run for ~500 pages. If you want to customize this workflow for your own need, feel free to [contact us](https://customworkflows.ai/work-with-us).\"},\"typeVersion\":1},{\"id\":\"afd6a0aa-813c-4a3f-b844-ac1cf9f854c6\",\"name\":\"Download Report\",\"type\":\"n8n-nodes-base.convertToFile\",\"position\":[2500,320],\"parameters\":{\"options\":{\"fileName\":\"={{ $('Set Fields').first().json.dfs_domain }}-content-audit-{{ new Date().toLocaleString('en-US', { month: 'long' }) + '-' + new Date().getFullYear() }}.html\"},\"operation\":\"toText\",\"sourceProperty\":\"html\",\"binaryPropertyName\":\"=content audit report\"},\"typeVersion\":1.1}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"c6db2f12-2e4f-4f40-acf9-6664c9feb45e\",\"connections\":{\"If\":{\"main\":[[{\"node\":\"Get RAW Audit Data\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Wait\",\"type\":\"main\",\"index\":0}]]},\"Wait\":{\"main\":[[{\"node\":\"Check Task Status\",\"type\":\"main\",\"index\":0}]]},\"Wait1\":{\"main\":[[{\"node\":\"Map GSC Data to URL\",\"type\":\"main\",\"index\":0}]]},\"Set Fields\":{\"main\":[[{\"node\":\"Create Task\",\"type\":\"main\",\"index\":0}]]},\"Create Task\":{\"main\":[[{\"node\":\"Check Task Status\",\"type\":\"main\",\"index\":0}]]},\"Extract URLs\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]},\"Map URLs Data\":{\"main\":[[{\"node\":\"Loop Over Items1\",\"type\":\"main\",\"index\":0}]]},\"Query GSC API\":{\"main\":[[{\"node\":\"Wait1\",\"type\":\"main\",\"index\":0}]]},\"Loop Over Items\":{\"main\":[[{\"node\":\"Merge GSC Data with RAW Data\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Query GSC API\",\"type\":\"main\",\"index\":0}]]},\"Loop Over Items1\":{\"main\":[[{\"node\":\"Build Report Structure\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Get Source URLs Data\",\"type\":\"main\",\"index\":0}]]},\"Check Task Status\":{\"main\":[[{\"node\":\"If\",\"type\":\"main\",\"index\":0}]]},\"Extract 404 & 301\":{\"main\":[[{\"node\":\"Loop Over Items1\",\"type\":\"main\",\"index\":0}]]},\"Get RAW Audit Data\":{\"main\":[[{\"node\":\"Extract URLs\",\"type\":\"main\",\"index\":0}]]},\"Map GSC Data to URL\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]},\"Generate HTML Report\":{\"main\":[[{\"node\":\"Download Report\",\"type\":\"main\",\"index\":0}]]},\"Get Source URLs Data\":{\"main\":[[{\"node\":\"Map URLs Data\",\"type\":\"main\",\"index\":0}]]},\"Build Report Structure\":{\"main\":[[{\"node\":\"Generate HTML Report\",\"type\":\"main\",\"index\":0}]]},\"When clicking ‘Start’\":{\"main\":[[{\"node\":\"Set Fields\",\"type\":\"main\",\"index\":0}]]},\"Merge GSC Data with RAW Data\":{\"main\":[[{\"node\":\"Extract 404 & 301\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "## Introduction\n\nThe Content SEO Audit Workflow is a powerful automated solution that generates comprehensive SEO audit reports for websites.\n\nBy combining the crawling capabilities of DataForSEO with the search performance metrics from Google Search Console, this workflow delivers actionable insights into content quality, technical SEO issues, and performance optimization opportunities.\n\nThe workflow crawls up to 1,000 pages of a website, analyzes various SEO factors including metadata, content quality, internal linking, and search performance, and then generates a professional, branded HTML report that can be shared directly with clients.\n\nThe entire process is automated, transforming what would typically be hours of manual analysis into a streamlined workflow that produces consistent, thorough results.\n\nThis workflow bridges the gap between technical SEO auditing and practical, client-ready deliverables, making it an invaluable tool for SEO professionals and digital marketing agencies.\n\n## Who is this for?\n\nThis workflow is designed for SEO consultants, digital marketing agencies, and content strategists who need to perform comprehensive content audits for clients or their own websites. It's particularly valuable for professionals who:\n\n  1. Regularly conduct SEO audits as part of their service offerings\n  2. Need to provide branded, professional reports to clients\n  3. Want to automate the time-consuming process of content analysis\n  4. Require data-driven insights to inform content strategy decisions\n\n\n\nUsers should have basic familiarity with SEO concepts and metrics, as well as a basic understanding of how to set up API credentials in n8n.\n\nWhile no coding knowledge is required to run the workflow, users should be comfortable with configuring workflow parameters and following setup instructions.\n\n## What problem is this workflow solving?\n\nContent audits are essential for SEO strategy but are traditionally labor-intensive and time-consuming. This workflow addresses several key challenges:\n\n  1. **Manual Data Collection** : Gathering data from multiple sources (crawlers, Google Search Console, etc.) typically requires hours of work. This workflow automates the entire data collection process.\n\n  2. **Inconsistent Analysis** : Manual audits can suffer from inconsistency in methodology. This workflow applies the same comprehensive analysis criteria to every page, ensuring thorough and consistent results.\n\n  3. **Report Generation** : Creating professional, client-ready reports often requires additional design work after the analysis is complete. This workflow generates a fully branded HTML report automatically.\n\n  4. **Data Integration** : Correlating technical SEO issues with actual search performance metrics is difficult when working with separate tools. This workflow seamlessly integrates crawl data with Google Search Console metrics.\n\n  5. **Scale Limitations** : Manual audits become increasingly difficult with larger websites. This workflow can efficiently process up to 1,000 pages without additional effort.\n\n\n\n\n## What this workflow does\n\n### Overview\n\nThe Content SEO Audit Workflow crawls a specified website, analyzes its content for various SEO issues, retrieves performance data from Google Search Console, and generates a comprehensive HTML report.\n\nThe workflow identifies issues in five key categories: status issues (404 errors, redirects), content quality (thin content, readability), metadata SEO (title/description issues), internal linking (orphan pages, excessive click depth), and performance (underperforming content).\n\nThe final report includes executive summaries, detailed issue breakdowns, and actionable recommendations, all branded with your company's colors and logo.\n\n### Process\n\n  1. **Initial Configuration** : The workflow begins by setting parameters including the target domain, crawl limits, company information, and branding colors.\n\n  2. **Website Crawling** : The workflow creates a crawl task in DataForSEO and periodically checks its status until completion.\n\n  3. **Data Collection** : Once crawling is complete, the workflow:\n\n     * Retrieves the raw audit data from DataForSEO\n     * Extracts all URLs with status code 200 (successful pages)\n     * Queries Google Search Console API for each URL to get clicks and impressions data\n     * Identifies 404 and 301 pages and retrieves their source links\n  4. **Data Analysis** : The workflow analyzes the collected data to identify issues including:\n\n     * Technical issues: 404 errors, redirects, canonicalization problems\n     * Content issues: thin content, outdated content, readability problems\n     * SEO metadata issues: missing/duplicate titles and descriptions, H1 problems\n     * Internal linking issues: orphan pages, excessive click depth, low internal links\n     * Performance issues: underperforming pages based on GSC data\n  5. **Report Generation** : Finally, the workflow:\n\n     * Calculates a health score based on the severity and quantity of issues\n     * Generates prioritized recommendations\n     * Creates a comprehensive HTML report with interactive tables and visualizations\n     * Customizes the report with your company's branding\n     * Provides the report as a downloadable HTML file\n\n\n\n## Setup\n\nTo set up this workflow, follow these steps:\n\n  1. **Import the workflow** : Download the JSON file and import it into your n8n instance.\n\n  2. **Configure DataForSEO credentials** :\n\n     * Create a DataForSEO account at <https://app.dataforseo.com/api-access> (they offer a free $1 credit for testing)\n     * Add a new \"Basic Auth\" credential in n8n following the [HTTP Request Authentication guide](https://docs.n8n.io/integrations/builtin/credentials/httprequest/)\n     * Assign this credential to the \"Create Task\", \"Check Task Status\", \"Get Raw Audit Data\", and \"Get Source URLs Data\" nodes\n  3. **Configure Google Search Console credentials** :\n\n     * Add a new \"Google OAuth2 API\" credential following the [Google OAuth guide](https://docs.n8n.io/integrations/builtin/credentials/google/oauth-generic/)\n     * Ensure your Google account has access to the Google Search Console property you want to analyze\n     * Assign this credential to the \"Query GSC API\" node\n  4. **Update the \"Set Fields\" node** with:\n\n     * dfs_domain: The website domain you want to audit\n     * dfs_max_crawl_pages: Maximum number of pages to crawl (default: 1000)\n     * dfs_enable_javascript: Whether to enable JavaScript rendering (default: false)\n     * company_name: Your company name for the report branding\n     * company_website: Your company website URL\n     * company_logo_url: URL to your company logo\n     * brand_primary_color: Your primary brand color (hex code)\n     * brand_secondary_color: Your secondary brand color (hex code)\n     * gsc_property_type: Set to \"domain\" or \"url\" depending on your Google Search Console property type\n  5. **Run the workflow** : Click \"Start\" and wait for it to complete (approximately 20 minutes for 500 pages).\n\n  6. **Download the report** : Once complete, download the HTML file from the \"Download Report\" node.\n\n\n\n\n## How to customize this workflow to your needs\n\nThis workflow can be adapted in several ways to better suit your specific requirements:\n\n  1. **Adjust crawl parameters** : Modify the \"Set Fields\" node to change:\n\n     * The maximum number of pages to crawl (dfs_max_crawl_pages). This workflow supports up to 1000 pages.\n     * Whether to enable JavaScript rendering for JavaScript-heavy sites (dfs_enable_javascript)\n  2. **Customize issue detection thresholds** : In the \"Build Report Structure\" code node, you can modify:\n\n     * Word count thresholds for thin content detection (currently 1500 words)\n     * Click depth thresholds (currently flags pages deeper than 4 clicks)\n     * Title and description length parameters (currently 40-60 chars for titles, 70-155 for descriptions)\n     * Readability score thresholds (currently flags Flesch-Kincaid scores below 55)\n  3. **Modify the report design** : In the \"Generate HTML Report\" code node, you can:\n\n     * Adjust the HTML/CSS to change the report layout and styling\n     * Add or remove sections from the report\n     * Change the recommendations logic\n     * Modify the health score calculation algorithm\n  4. **Add additional data sources** : You could extend the workflow by:\n\n     * Adding Pagespeed Insights data for performance metrics\n     * Incorporating backlink data from other APIs\n     * Adding keyword ranking data from rank tracking APIs\n  5. **Implement automated delivery** : Add nodes after the \"Download Report\" to:\n\n     * Send the report directly to clients via email\n     * Upload it to cloud storage\n     * Create a PDF version of the report\n\n\n",
  "readme_html": "<!--[--><div data-v-859c7806=\"\"><h2>Introduction</h2>\n<p>The Content SEO Audit Workflow is a powerful automated solution that generates comprehensive SEO audit reports for websites.</p>\n<p>By combining the crawling capabilities of DataForSEO with the search performance metrics from Google Search Console, this workflow delivers actionable insights into content quality, technical SEO issues, and performance optimization opportunities.</p>\n<p>The workflow crawls up to 1,000 pages of a website, analyzes various SEO factors including metadata, content quality, internal linking, and search performance, and then generates a professional, branded HTML report that can be shared directly with clients.</p>\n<p>The entire process is automated, transforming what would typically be hours of manual analysis into a streamlined workflow that produces consistent, thorough results.</p>\n<p>This workflow bridges the gap between technical SEO auditing and practical, client-ready deliverables, making it an invaluable tool for SEO professionals and digital marketing agencies.</p>\n<h2>Who is this for?</h2>\n<p>This workflow is designed for SEO consultants, digital marketing agencies, and content strategists who need to perform comprehensive content audits for clients or their own websites. It's particularly valuable for professionals who:</p>\n<ol>\n<li>Regularly conduct SEO audits as part of their service offerings</li>\n<li>Need to provide branded, professional reports to clients</li>\n<li>Want to automate the time-consuming process of content analysis</li>\n<li>Require data-driven insights to inform content strategy decisions</li>\n</ol>\n<p>Users should have basic familiarity with SEO concepts and metrics, as well as a basic understanding of how to set up API credentials in n8n.</p>\n<p>While no coding knowledge is required to run the workflow, users should be comfortable with configuring workflow parameters and following setup instructions.</p>\n<h2>What problem is this workflow solving?</h2>\n<p>Content audits are essential for SEO strategy but are traditionally labor-intensive and time-consuming. This workflow addresses several key challenges:</p>\n<ol>\n<li>\n<p><strong>Manual Data Collection</strong>: Gathering data from multiple sources (crawlers, Google Search Console, etc.) typically requires hours of work. This workflow automates the entire data collection process.</p>\n</li>\n<li>\n<p><strong>Inconsistent Analysis</strong>: Manual audits can suffer from inconsistency in methodology. This workflow applies the same comprehensive analysis criteria to every page, ensuring thorough and consistent results.</p>\n</li>\n<li>\n<p><strong>Report Generation</strong>: Creating professional, client-ready reports often requires additional design work after the analysis is complete. This workflow generates a fully branded HTML report automatically.</p>\n</li>\n<li>\n<p><strong>Data Integration</strong>: Correlating technical SEO issues with actual search performance metrics is difficult when working with separate tools. This workflow seamlessly integrates crawl data with Google Search Console metrics.</p>\n</li>\n<li>\n<p><strong>Scale Limitations</strong>: Manual audits become increasingly difficult with larger websites. This workflow can efficiently process up to 1,000 pages without additional effort.</p>\n</li>\n</ol>\n<h2>What this workflow does</h2>\n<h3>Overview</h3>\n<p>The Content SEO Audit Workflow crawls a specified website, analyzes its content for various SEO issues, retrieves performance data from Google Search Console, and generates a comprehensive HTML report.</p>\n<p>The workflow identifies issues in five key categories: status issues (404 errors, redirects), content quality (thin content, readability), metadata SEO (title/description issues), internal linking (orphan pages, excessive click depth), and performance (underperforming content).</p>\n<p>The final report includes executive summaries, detailed issue breakdowns, and actionable recommendations, all branded with your company's colors and logo.</p>\n<h3>Process</h3>\n<ol>\n<li>\n<p><strong>Initial Configuration</strong>: The workflow begins by setting parameters including the target domain, crawl limits, company information, and branding colors.</p>\n</li>\n<li>\n<p><strong>Website Crawling</strong>: The workflow creates a crawl task in DataForSEO and periodically checks its status until completion.</p>\n</li>\n<li>\n<p><strong>Data Collection</strong>: Once crawling is complete, the workflow:</p>\n<ul>\n<li>Retrieves the raw audit data from DataForSEO</li>\n<li>Extracts all URLs with status code 200 (successful pages)</li>\n<li>Queries Google Search Console API for each URL to get clicks and impressions data</li>\n<li>Identifies 404 and 301 pages and retrieves their source links</li>\n</ul>\n</li>\n<li>\n<p><strong>Data Analysis</strong>: The workflow analyzes the collected data to identify issues including:</p>\n<ul>\n<li>Technical issues: 404 errors, redirects, canonicalization problems</li>\n<li>Content issues: thin content, outdated content, readability problems</li>\n<li>SEO metadata issues: missing/duplicate titles and descriptions, H1 problems</li>\n<li>Internal linking issues: orphan pages, excessive click depth, low internal links</li>\n<li>Performance issues: underperforming pages based on GSC data</li>\n</ul>\n</li>\n<li>\n<p><strong>Report Generation</strong>: Finally, the workflow:</p>\n<ul>\n<li>Calculates a health score based on the severity and quantity of issues</li>\n<li>Generates prioritized recommendations</li>\n<li>Creates a comprehensive HTML report with interactive tables and visualizations</li>\n<li>Customizes the report with your company's branding</li>\n<li>Provides the report as a downloadable HTML file</li>\n</ul>\n</li>\n</ol>\n<h2>Setup</h2>\n<p>To set up this workflow, follow these steps:</p>\n<ol>\n<li>\n<p><strong>Import the workflow</strong>: Download the JSON file and import it into your n8n instance.</p>\n</li>\n<li>\n<p><strong>Configure DataForSEO credentials</strong>:</p>\n<ul>\n<li>Create a DataForSEO account at <a href=\"https://app.dataforseo.com/api-access\" rel=\"ugc nofollow\" target=\"_blank\">https://app.dataforseo.com/api-access</a> (they offer a free $1 credit for testing)</li>\n<li>Add a new \"Basic Auth\" credential in n8n following the <a href=\"https://docs.n8n.io/integrations/builtin/credentials/httprequest/\" rel=\"ugc nofollow\" target=\"_blank\">HTTP Request Authentication guide</a></li>\n<li>Assign this credential to the \"Create Task\", \"Check Task Status\", \"Get Raw Audit Data\", and \"Get Source URLs Data\" nodes</li>\n</ul>\n</li>\n<li>\n<p><strong>Configure Google Search Console credentials</strong>:</p>\n<ul>\n<li>Add a new \"Google OAuth2 API\" credential following the <a href=\"https://docs.n8n.io/integrations/builtin/credentials/google/oauth-generic/\" rel=\"ugc nofollow\" target=\"_blank\">Google OAuth guide</a></li>\n<li>Ensure your Google account has access to the Google Search Console property you want to analyze</li>\n<li>Assign this credential to the \"Query GSC API\" node</li>\n</ul>\n</li>\n<li>\n<p><strong>Update the \"Set Fields\" node</strong> with:</p>\n<ul>\n<li>dfs_domain: The website domain you want to audit</li>\n<li>dfs_max_crawl_pages: Maximum number of pages to crawl (default: 1000)</li>\n<li>dfs_enable_javascript: Whether to enable JavaScript rendering (default: false)</li>\n<li>company_name: Your company name for the report branding</li>\n<li>company_website: Your company website URL</li>\n<li>company_logo_url: URL to your company logo</li>\n<li>brand_primary_color: Your primary brand color (hex code)</li>\n<li>brand_secondary_color: Your secondary brand color (hex code)</li>\n<li>gsc_property_type: Set to \"domain\" or \"url\" depending on your Google Search Console property type</li>\n</ul>\n</li>\n<li>\n<p><strong>Run the workflow</strong>: Click \"Start\" and wait for it to complete (approximately 20 minutes for 500 pages).</p>\n</li>\n<li>\n<p><strong>Download the report</strong>: Once complete, download the HTML file from the \"Download Report\" node.</p>\n</li>\n</ol>\n<h2>How to customize this workflow to your needs</h2>\n<p>This workflow can be adapted in several ways to better suit your specific requirements:</p>\n<ol>\n<li>\n<p><strong>Adjust crawl parameters</strong>: Modify the \"Set Fields\" node to change:</p>\n<ul>\n<li>The maximum number of pages to crawl (dfs_max_crawl_pages). This workflow supports up to 1000 pages.</li>\n<li>Whether to enable JavaScript rendering for JavaScript-heavy sites (dfs_enable_javascript)</li>\n</ul>\n</li>\n<li>\n<p><strong>Customize issue detection thresholds</strong>: In the \"Build Report Structure\" code node, you can modify:</p>\n<ul>\n<li>Word count thresholds for thin content detection (currently 1500 words)</li>\n<li>Click depth thresholds (currently flags pages deeper than 4 clicks)</li>\n<li>Title and description length parameters (currently 40-60 chars for titles, 70-155 for descriptions)</li>\n<li>Readability score thresholds (currently flags Flesch-Kincaid scores below 55)</li>\n</ul>\n</li>\n<li>\n<p><strong>Modify the report design</strong>: In the \"Generate HTML Report\" code node, you can:</p>\n<ul>\n<li>Adjust the HTML/CSS to change the report layout and styling</li>\n<li>Add or remove sections from the report</li>\n<li>Change the recommendations logic</li>\n<li>Modify the health score calculation algorithm</li>\n</ul>\n</li>\n<li>\n<p><strong>Add additional data sources</strong>: You could extend the workflow by:</p>\n<ul>\n<li>Adding Pagespeed Insights data for performance metrics</li>\n<li>Incorporating backlink data from other APIs</li>\n<li>Adding keyword ranking data from rank tracking APIs</li>\n</ul>\n</li>\n<li>\n<p><strong>Implement automated delivery</strong>: Add nodes after the \"Download Report\" to:</p>\n<ul>\n<li>Send the report directly to clients via email</li>\n<li>Upload it to cloud storage</li>\n<li>Create a PDF version of the report</li>\n</ul>\n</li>\n</ol>\n</div><!--]-->",
  "readme_zh": "## 简介\n\n内容SEO审计工作流是一款强大的自动化解决方案，可为网站生成全面的SEO审计报告。该工作流整合了DataForSEO的爬取能力和谷歌搜索控制台的搜索表现指标，提供关于内容质量、技术SEO问题和性能优化机会的可执行洞察。\n\n该工作流可爬取网站最多1000个页面，分析包括元数据、内容质量、内链结构和搜索表现等各类SEO因素，最终生成可直接分享给客户的品牌化专业HTML报告。整个流程完全自动化，将通常需要数小时人工分析的工作转化为可产出稳定、全面结果的标准化流程。\n\n本工作流弥合了技术SEO审计与客户就绪交付成果之间的鸿沟，是SEO专业人士和数字营销机构的宝贵工具。\n\n## 适用对象\n\n本工作流专为需要为客户或自有网站执行全面内容审计的SEO顾问、数字营销机构和内容策略师设计，特别适合以下人群：\n\n1. 定期开展SEO审计作为服务内容的从业者  \n2. 需要向客户提供品牌化专业报告的专业人士  \n3. 希望自动化耗时内容分析流程的团队  \n4. 需要数据驱动洞察来指导内容策略决策的用户  \n\n使用者应具备基本的SEO概念和指标认知，并了解如何在n8n中设置API凭证。虽然运行工作流无需编程知识，但用户需能熟练配置工作流参数并遵循设置说明。\n\n## 解决的问题\n\n传统内容审计虽对SEO策略至关重要，但通常费时费力。本工作流着力解决以下核心痛点：\n\n1. **人工数据收集**：从爬虫工具、谷歌搜索控制台等多渠道采集数据通常耗时数小时，本方案实现全流程自动化  \n2. **分析标准不一**：人工审计易受方法论差异影响，本方案对每个页面应用统一分析标准  \n3. **报告制作繁琐**：专业报告往往需要额外设计工作，本方案自动生成品牌化HTML报告  \n4. **数据割裂问题**：技术SEO问题与搜索表现指标难以关联分析，本方案实现爬取数据与GSC指标无缝整合  \n5. **规模限制**：人工审计难以应对大型网站，本方案可高效处理多达1000个页面  \n\n## 功能概述\n\n### 核心功能\n\n内容SEO审计工作流通过爬取目标网站、分析内容SEO问题、获取GSC性能数据，最终生成包含五大类问题诊断的HTML报告：状态问题（404错误/重定向）、内容质量（单薄内容/可读性）、元数据SEO（标题/描述问题）、内链结构（孤立页面/点击深度过大）和页面表现（低效内容）。最终报告包含执行摘要、详细问题拆解和可执行建议，并支持企业品牌标识嵌入。\n\n### 工作流程\n\n1. **初始配置**：设置目标域名、爬取限制、企业信息和品牌色系等参数  \n2. **网站爬取**：在DataForSEO创建爬取任务并轮询状态直至完成  \n3. **数据采集**：  \n   - 从DataForSEO获取原始审计数据  \n   - 提取所有状态码200的有效URL  \n   - 通过GSC API获取各URL点击展示数据  \n   - 识别404/301页面并追溯其来源链接  \n4. **数据分析**：检测包括技术问题（404/重定向/canonical问题）、内容问题（单薄/过时内容/可读性差）、元数据问题（缺失/重复标题描述/H1问题）、内链问题（孤立页面/点击深度过大/内链不足）和表现问题（基于GSC数据的低效页面）  \n5. **报告生成**：  \n   - 根据问题严重程度计算健康评分  \n   - 生成优先级排序建议  \n   - 创建含交互表格和可视化图表的HTML报告  \n   - 应用企业品牌标识定制  \n   - 提供可下载HTML文件  \n\n## 配置指南\n\n1. **导入工作流**：下载JSON文件并导入n8n实例  \n2. **配置DataForSEO凭证**：  \n   - 在[官网](https://app.dataforseo.com/api-access)注册（提供1美元测试额度）  \n   - 按[HTTP认证指南](https://docs.n8n.io/integrations/builtin/credentials/httprequest/)在n8n添加Basic Auth凭证  \n   - 将该凭证分配给\"创建任务\"、\"检查任务状态\"、\"获取原始数据\"和\"获取来源URL\"节点  \n3. **配置GSC凭证**：  \n   - 按[谷歌OAuth指南](https://docs.n8n.io/integrations/builtin/credentials/google/oauth-generic/)添加凭证  \n   - 确保谷歌账号有目标GSC资源访问权限  \n   - 将该凭证分配给\"查询GSC API\"节点  \n4. **配置\"字段设置\"节点**：  \n   - dfs_domain：待审计域名  \n   - dfs_max_crawl_pages：最大爬取页数（默认1000）  \n   - dfs_enable_javascript：是否启用JS渲染（默认否）  \n   - 企业名称、官网、logo链接、主品牌色/辅助色  \n   - gsc_property_type：GSC资源类型（\"domain\"或\"url\"）  \n5. **运行工作流**：点击\"开始\"（约20分钟处理500页）  \n6. **下载报告**：从\"下载报告\"节点获取HTML文件  \n\n## 定制方案\n\n本工作流支持多维度定制：\n\n1. **调整爬取参数**：  \n   - 修改\"字段设置\"节点中的dfs_max_crawl_pages（上限1000页）  \n   - 针对JS密集型网站启用dfs_enable_javascript  \n2. **自定义检测阈值**：在\"构建报告结构\"代码节点中调整：  \n   - 单薄内容字数阈值（当前1500词）  \n   - 点击深度阈值（当前标记超过4层的页面）  \n   - 标题（40-60字符）和描述（70-155字符）长度标准  \n   - 可读性分数阈值（当前标记Flesch-Kincaid低于55分）  \n3. **修改报告设计**：在\"生成HTML报告\"代码节点中：  \n   - 调整HTML/CSS改变版式风格  \n   - 增减报告模块  \n   - 修改建议逻辑或健康评分算法  \n4. **扩展数据源**：可集成：  \n   - Pagespeed Insights性能指标  \n   - 第三方API的外链数据  \n   - 排名追踪API的关键词数据  \n5. **实现自动交付**：在\"下载报告\"后添加节点：  \n   - 通过邮件自动发送报告  \n   - 上传至云存储  \n   - 生成PDF版本报告",
  "title_zh": "利用DataForSEO和Google Search Console生成SEO内容审核报告",
  "publish_date_zh": "上次更新于5天前",
  "workflow_json_zh": "{\n  \"id\": \"Tqa8dikBDLYEytx5\",\n  \"meta\": {\n    \"instanceId\": \"ddfdf733df99a65c801a91865dba5b7c087c95cc22a459ff3647e6deddf2aee6\"\n  },\n  \"name\": \"Automated Content SEO Audit Report\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"b5f15675-35c9-42a1-b7eb-bfaf0b467a5a\",\n      \"name\": \"Set Fields\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        280,\n        620\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"e71886f0-104f-412b-9fef-d2b3738cebf0\",\n              \"name\": \"dfs_domain\",\n              \"type\": \"string\",\n              \"value\": \"yourclientdomain.com\"\n            },\n            {\n              \"id\": \"de35327e-1e32-4996-970a-50b8953c7709\",\n              \"name\": \"dfs_max_crawl_pages\",\n              \"type\": \"string\",\n              \"value\": \"1000\"\n            },\n            {\n              \"id\": \"0d6b4d1a-e57d-4e38-8aa5-e2ea5589a089\",\n              \"name\": \"dfs_enable_javascript\",\n              \"type\": \"string\",\n              \"value\": \"false\"\n            },\n            {\n              \"id\": \"d699e487-ab74-483f-8cd8-cdcfaca567d7\",\n              \"name\": \"company_name\",\n              \"type\": \"string\",\n              \"value\": \"Custom Workflows AI\"\n            },\n            {\n              \"id\": \"da123535-f678-4331-973a-07711b7aaaac\",\n              \"name\": \"company_website\",\n              \"type\": \"string\",\n              \"value\": \"https://customworkflows.ai\"\n            },\n            {\n              \"id\": \"e12486eb-7019-4639-85a9-c55b4c62beef\",\n              \"name\": \"company_logo_url\",\n              \"type\": \"string\",\n              \"value\": \"https://customworkflows.ai/images/logo.png\"\n            },\n            {\n              \"id\": \"9eef2015-e89c-4930-82a5-972111c1a4fe\",\n              \"name\": \"brand_primary_color\",\n              \"type\": \"string\",\n              \"value\": \"#252946\"\n            },\n            {\n              \"id\": \"dd4ff260-6008-49ec-a0e6-ad5c177eb8df\",\n              \"name\": \"brand_secondary_color\",\n              \"type\": \"string\",\n              \"value\": \"#0fd393\"\n            },\n            {\n              \"id\": \"d71a4d91-c5bf-49c4-b7d0-64e84dad6153\",\n              \"name\": \"gsc_property_type\",\n              \"type\": \"string\",\n              \"value\": \"domain\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"57a66b27-a253-4543-9d44-cd3afdbc3946\",\n      \"name\": \"When clicking ‘Start’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        60,\n        620\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3e5e8162-2815-429f-b6e8-6ea6ea70cf18\",\n      \"name\": \"Check Task Status\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        660,\n        620\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.dataforseo.com/v3/on_page/summary/{{ $json.tasks[0].id }}\",\n        \"options\": {},\n        \"sendHeaders\": true,\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpBasicAuth\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"9ea481fe-8af6-43c2-881d-eb68f63b0424\",\n      \"name\": \"Create Task\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        480,\n        620\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.dataforseo.com/v3/on_page/task_post\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"=[\\n  {\\n    \\\"target\\\": \\\"{{ $json.dfs_domain }}\\\",\\n    \\\"max_crawl_pages\\\": {{ $json.dfs_max_crawl_pages }},\\n    \\\"load_resources\\\": false,\\n    \\\"enable_javascript\\\": {{ $json.dfs_enable_javascript }},\\n    \\\"custom_js\\\": \\\"meta = {}; meta.url = document.URL; meta;\\\",\\n    \\\"tag\\\": \\\"{{ $json.dfs_domain + Math.floor(10000 + Math.random() * 90000) }}\\\"\\n  }\\n]\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpBasicAuth\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"0a0e696a-29a7-4b34-8299-102c72544153\",\n      \"name\": \"If\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        860,\n        620\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"7e13429d-9ead-4ae5-8ed6-c5730b05927d\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.tasks[0].result[0].crawl_progress }}\",\n              \"rightValue\": \"finished\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"a31db736-23e0-4db8-ab90-294cd87c9123\",\n      \"name\": \"Wait\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        1060,\n        680\n      ],\n      \"webhookId\": \"f60d5346-5ddf-4819-a865-48e2d9e6103c\",\n      \"parameters\": {\n        \"unit\": \"minutes\",\n        \"amount\": 1\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"8f95fd0b-e990-4c85-b21b-83d06d2121fe\",\n      \"name\": \"Get RAW Audit Data\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1060,\n        500\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.dataforseo.com/v3/on_page/pages\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"=[\\n  {\\n    \\\"id\\\": \\\"{{ $json.tasks[0].id }}\\\",\\n    \\\"limit\\\": \\\"1000\\\"\\n  }\\n]\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpBasicAuth\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"6cf221d9-c17e-4a5c-9c9a-c3176319df95\",\n      \"name\": \"Extract URLs\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1260,\n        500\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Get input data from the previous node\\nconst input = $input.all();\\n\\n// Initialize an array to store the new items\\nconst output = [];\\n\\n// Loop through each input item\\nfor (const item of input) {\\n    const tasks = item.json.tasks || [];\\n    for (const task of tasks) {\\n        const results = task.result || [];\\n        for (const result of results) {\\n            const items = result.items || [];\\n            for (const page of items) {\\n                // Only include URLs with status_code 200\\n                if (page.url && page.status_code === 200) {\\n                    output.push({ json: { url: page.url } });\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n// Return all URLs with status code 200 as separate items\\nreturn output;\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"fbf18c28-dbd5-410b-87cb-5f5aef44727e\",\n      \"name\": \"Loop Over Items\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        1480,\n        500\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"batchSize\": 100\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"aebdd823-9a4d-4323-aadf-b7d92d601d57\",\n      \"name\": \"Query GSC API\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"onError\": \"continueErrorOutput\",\n      \"maxTries\": 5,\n      \"position\": [\n        1480,\n        680\n      ],\n      \"parameters\": {\n        \"url\": \"={{ \\n  $('Set Fields').first().json.gsc_property_type === 'domain' \\n    ? 'https://searchconsole.googleapis.com/webmasters/v3/sites/' + \\n      'sc-domain:' + \\n      $node[\\\"Loop Over Items\\\"].json.url.replace(/https?:\\\\/\\\\/(www\\\\.)?([^\\\\/]+).*/, '$2') + \\n      '/searchAnalytics/query' \\n    : 'https://searchconsole.googleapis.com/webmasters/v3/sites/' + \\n      encodeURIComponent(\\n        $node[\\\"Loop Over Items\\\"].json.url.replace(/(https?:\\\\/\\\\/(?:www\\\\.)?[^\\\\/]+).*/, '$1')\\n      ) + \\n      '/searchAnalytics/query' \\n}}\",\n        \"body\": \"={\\n  \\\"startDate\\\": \\\"{{ new Date(new Date().setDate(new Date().getDate() - 90)).toISOString().split('T')[0] }}\\\",\\n  \\\"endDate\\\": \\\"{{ new Date().toISOString().split('T')[0] }}\\\",\\n  \\\"dimensionFilterGroups\\\": [\\n    {\\n      \\\"filters\\\": [\\n        {\\n          \\\"dimension\\\": \\\"page\\\",\\n          \\\"operator\\\": \\\"equals\\\",\\n          \\\"expression\\\": \\\"{{ $node['Loop Over Items'].json.url }}\\\"\\n        }\\n      ]\\n    }\\n  ],\\n  \\\"aggregationType\\\": \\\"auto\\\",\\n  \\\"rowLimit\\\": 100\\n}\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"contentType\": \"raw\",\n        \"sendHeaders\": true,\n        \"authentication\": \"predefinedCredentialType\",\n        \"rawContentType\": \"JSON\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        },\n        \"nodeCredentialType\": \"googleOAuth2Api\"\n      },\n      \"retryOnFail\": true,\n      \"typeVersion\": 4.2,\n      \"waitBetweenTries\": 5000\n    },\n    {\n      \"id\": \"d9943a4b-7320-47ce-95fa-67eb28cabd26\",\n      \"name\": \"Wait1\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        1680,\n        680\n      ],\n      \"webhookId\": \"8b2109f4-1aca-4585-8261-7dfc4ca2f95e\",\n      \"parameters\": {\n        \"unit\": \"minutes\",\n        \"amount\": 1\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"f2f7e975-1db1-4566-b674-396ccaa775f5\",\n      \"name\": \"Map GSC Data to URL\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1880,\n        680\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"342ff66d-cdfc-46e8-9605-db588c913eb0\",\n              \"name\": \"URL\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.url }}\"\n            },\n            {\n              \"id\": \"5c547efc-0514-4641-8f05-c24b965993ad\",\n              \"name\": \"Clicks\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Query GSC API').item.json.rows[0].clicks }}\"\n            },\n            {\n              \"id\": \"340c3ced-061d-49f0-911d-bd8b9e433a7d\",\n              \"name\": \"Impressions\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Query GSC API').item.json.rows[0].impressions }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"4e42e1eb-4769-4e28-9f2f-3fb342baf971\",\n      \"name\": \"Merge GSC Data with RAW Data\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1680,\n        500\n      ],\n      \"parameters\": {\n        \"jsCode\": \"/*\\n * Function node\\n * Inputs: none (reads data from other nodes)\\n * Output: ONE item whose .json is the enriched audit object\\n */\\n\\n// 1. ----  Get the raw audit JSON  ------------------------------------------\\nlet rawAuditData = $node['Get RAW Audit Data'].json;   // first item of that node\\n\\n// If that node delivered a JSON string, parse it:\\nif (typeof rawAuditData === 'string') {\\n\\trawAuditData = JSON.parse(rawAuditData);\\n}\\n\\n// 2. ----  Get the Google Search Console rows  ------------------------------\\nconst gscItems = $items('Loop Over Items');            // all items from that node\\n\\n// 3. ----  Build a fast lookup:  URL -> { clicks, impressions }  ------------\\nconst gscLookup = {};\\nfor (const { json } of gscItems) {\\n    const { URL, Clicks, Impressions } = json;\\n    if (URL) {\\n        gscLookup[URL] = {\\n            clicks: Clicks !== undefined ? Number(Clicks) || 0 : null,\\n            impressions: Impressions !== undefined ? Number(Impressions) || 0 : null,\\n        };\\n    }\\n}\\n\\n// 4. ----  Enrich every page record with googleSearchConsoleData -------------\\nconst itemsPath = (((rawAuditData.tasks || [])[0] || {}).result || [])[0]?.items || [];\\n\\nfor (const page of itemsPath) {\\n    const url = page.url;\\n    page.googleSearchConsoleData = gscLookup[url] || { clicks: null, impressions: null };\\n}\\n\\n// 5. ----  Return ONE item with the updated audit data  ----------------------\\nreturn [\\n\\t{\\n\\t\\tjson: rawAuditData,   // <-- an actual object, so n8n is satisfied\\n\\t},\\n];\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"0b35fb68-6a0d-4eea-b29a-96550574c2b8\",\n      \"name\": \"Build Report Structure\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2100,\n        320\n      ],\n      \"parameters\": {\n        \"jsCode\": \"/**\\n * n8n – Function node\\n * Input  : • One item whose `json` is the crawl + GSC data\\n *          • All the items produced by the loop node “Loop Over Items1”\\n * Output : ONE item whose `json` = { generatedAt, summary, issues, pages }\\n *          – Unchanged shape, just extra `sources`[] on 404 / 301 records\\n */\\n\\n/* ────────────────────── helpers & constants ───────────────────── */\\nconst CUR_YEAR          = new Date().getFullYear();\\nconst YEAR_RX           = /20\\\\d{2}/g;\\nconst TWELVE_MONTHS_MS  = 1000 * 60 * 60 * 24 * 365.25;\\nconst SIX_MONTHS_MS     = TWELVE_MONTHS_MS / 2;\\nconst LARGE_HTML_LIMIT  = 2_000_000;\\n\\nconst ageInMs      = (s) => Date.now() - Date.parse(s);\\nconst ensureBucket = (parent, key) => (parent[key] ??= []);\\nconst normalizeUrl = (u) => (u || '').replace(/\\\\/+$/, '');   // strip trailing “/”\\n\\n/* ────────────────────── main data sets ───────────────────────── */\\nconst root  = $node['Merge GSC Data with RAW Data'].json;\\nconst pages = root.tasks?.[0]?.result?.[0]?.items ?? [];\\n\\n/* link-source items from the loop node */\\nconst sourceItems = $items('Loop Over Items1') ?? [];\\nconst linkSourceMap = {};               // { normalisedTargetUrl : [ {linkFrom,type,text},… ] }\\n\\nfor (const itm of sourceItems) {\\n  const j   = itm.json || {};\\n  const tgt = normalizeUrl(j.URL);\\n  if (!tgt) continue;\\n\\n  linkSourceMap[tgt] ??= [];\\n  for (const s of j.sources || []) {\\n    linkSourceMap[tgt].push({\\n      linkFrom: s.link_from,\\n      type    : s.type,\\n      text    : s.text,\\n    });\\n  }\\n}\\n\\n/* ────────────────────── duplicate-meta look-ups ───────────────── */\\nconst titleFreq = {};\\nconst descFreq  = {};\\n\\nfor (const p of pages) {\\n  const t = p.meta?.title?.trim();\\n  const d = p.meta?.description?.trim();\\n  if (t) titleFreq[t] = (titleFreq[t] || 0) + 1;\\n  if (d) descFreq[d]  = (descFreq[d]  || 0) + 1;\\n}\\n\\n/* ────────────────────── report skeleton ──────────────────────── */\\nconst issues = {\\n  statusIssues:         {},\\n  contentQuality:       {},\\n  metadataSEO:          {},\\n  internalLinking:      {},\\n  underperformingContent: [],\\n};\\n\\nconst summary        = { pages: pages.length };\\nconst pagesWithFlags = [];\\n\\n/* ────────────────────── per-page loop ────────────────────────── */\\nfor (const p of pages) {\\n  const url   = p.url;\\n  const norm  = normalizeUrl(url);\\n  const flags = [];\\n\\n  const add = (sect, bucket, rec) => ensureBucket(issues[sect], bucket).push(rec);\\n\\n  const isStatusOK = p.status_code === 200;\\n\\n  /* 1 · 404 ---------------------------------------------------- */\\n  if (p.status_code === 404 || p.checks?.is_4xx_code) {\\n    flags.push('404');\\n    add('statusIssues', 'pages404', {\\n      url,\\n      sources: linkSourceMap[norm] ?? [],      // ← new\\n      todo  : 'Restore the page or 301-redirect it to a relevant URL.',\\n    });\\n  }\\n\\n  /* 2 · 301 ---------------------------------------------------- */\\n  if (p.status_code === 301 || p.checks?.is_redirect) {\\n    flags.push('redirect_301');\\n    add('statusIssues', 'redirects301', {\\n      url,\\n      sources: linkSourceMap[norm] ?? [],      // ← new\\n      todo  : 'Update internal links so they point directly to the final URL (single-hop redirect).',\\n    });\\n  }\\n\\n  /* 3 ­– 15 · all original checks (unchanged) ------------------ */\\n  /* Canonicalised */\\n  const canonicalised =\\n      (p.meta?.canonical && p.meta.canonical !== url) ||\\n      p.checks?.canonical_chain ||\\n      p.checks?.recursive_canonical;\\n\\n  if (isStatusOK && canonicalised) {\\n    flags.push('canonicalised');\\n    add('statusIssues', 'canonicalised', {\\n      url,\\n      canonical: p.meta?.canonical,\\n      todo: `Verify that \\\"${p.meta?.canonical || '—'}\\\" is the correct canonical target and eliminate unintended duplicates.`,\\n    });\\n  }\\n\\n  /* Outdated content (years + stale last-modified) */\\n  if (isStatusOK) {\\n    const titleYears = (p.meta?.title?.match(YEAR_RX) || []).filter((y) => Number(y) < CUR_YEAR);\\n    const descYears  = (p.meta?.description?.match(YEAR_RX) || []).filter((y) => Number(y) < CUR_YEAR);\\n\\n    if (titleYears.length) {\\n      flags.push('outdated_year_title');\\n      add('contentQuality', 'outdatedMetaYear', {\\n        url,\\n        field    : 'title',\\n        years    : titleYears.join(','),\\n        original : p.meta?.title,\\n        todo     : `Title contains old year → ${titleYears.join(', ')}. Update to ${CUR_YEAR} or remove dates.`,\\n      });\\n    }\\n    if (descYears.length) {\\n      flags.push('outdated_year_description');\\n      add('contentQuality', 'outdatedMetaYear', {\\n        url,\\n        field    : 'description',\\n        years    : descYears.join(','),\\n        original : p.meta?.description,\\n        todo     : `Meta description contains old year → ${descYears.join(', ')}. Update to ${CUR_YEAR} or remove dates.`,\\n      });\\n    }\\n\\n    const lm = p.last_modified ??\\n               p.meta?.social_media_tags?.['og:updated_time'] ?? null;\\n\\n    if (lm && ageInMs(lm) > TWELVE_MONTHS_MS) {\\n      flags.push('stale_last_modified');\\n      add('contentQuality', 'staleLastModified', {\\n        url,\\n        lastModified: lm,\\n        todo        : 'Page not updated for 12+ months — refresh content.',\\n      });\\n    }\\n  }\\n\\n  /* Thin content */\\n  if (isStatusOK) {\\n    const wc = p.meta?.content?.plain_text_word_count || 0;\\n    if (p.click_depth !== 0 && wc >= 1 && wc <= 1500) {\\n      flags.push('thin_content');\\n      add('contentQuality', 'thinContent', {\\n        url,\\n        words: wc,\\n        todo : 'Expand the piece beyond 1 500 words with valuable, unique information.',\\n      });\\n    }\\n  }\\n\\n  /* Excessive click depth */\\n  if (isStatusOK && (p.click_depth || 0) > 4) {\\n    flags.push('excessive_click_depth');\\n    add('internalLinking', 'excessiveClickDepth', {\\n      url,\\n      depth: p.click_depth,\\n      todo : 'Surface this URL within ≤4 clicks via navigation or contextual links.',\\n    });\\n  }\\n\\n  /* Large HTML */\\n  if (isStatusOK && ((p.size || 0) > LARGE_HTML_LIMIT || (p.total_dom_size || 0) > LARGE_HTML_LIMIT)) {\\n    flags.push('large_html');\\n    add('contentQuality', 'largeHTML', {\\n      url,\\n      size    : p.size,\\n      totalDom: p.total_dom_size,\\n      todo    : 'Reduce HTML payload (remove unused markup/JS, paginate, or lazy-load where possible).',\\n    });\\n  }\\n\\n  /* Title length */\\n  if (isStatusOK && (p.meta?.title_length < 40 || p.meta?.title_length > 60)) {\\n    flags.push('title_length');\\n    add('metadataSEO', 'titleLength', {\\n      url,\\n      length: p.meta?.title_length,\\n      todo  : `Write a meta title 40-60 characters long (currently ${p.meta?.title_length || 0}).`,\\n    });\\n  }\\n\\n  /* Description length */\\n  if (isStatusOK) {\\n    const dl = p.meta?.description_length || 0;\\n    if (dl > 0 && (dl < 70 || dl > 155)) {\\n      flags.push('description_length');\\n      add('metadataSEO', 'descriptionLength', {\\n        url,\\n        length: dl,\\n        todo  : `Write a meta description 70-155 characters long (currently ${dl}).`,\\n      });\\n    }\\n  }\\n\\n  /* Missing / duplicate meta */\\n  if (isStatusOK) {\\n    if (p.checks?.no_title) {\\n      flags.push('missing_title');\\n      add('metadataSEO', 'missingTitle', { url, todo: 'Add a unique SEO title 40-60 characters long.' });\\n    }\\n    if (p.checks?.no_description) {\\n      flags.push('missing_description');\\n      add('metadataSEO', 'missingDescription', { url, todo: 'Add a unique meta description 70-155 characters long.' });\\n    }\\n    if (titleFreq[p.meta?.title?.trim()] > 1) {\\n      flags.push('duplicate_title');\\n      add('metadataSEO', 'duplicateTitle', { url, title: p.meta?.title, todo: 'Differentiate this title to avoid keyword cannibalisation.' });\\n    }\\n    if (p.meta?.description && descFreq[p.meta.description.trim()] > 1) {\\n      flags.push('duplicate_description');\\n      add('metadataSEO', 'duplicateDescription', { url, description: p.meta?.description, todo: 'Rewrite the meta description so each page is unique.' });\\n    }\\n  }\\n\\n  /* H1 issues */\\n  if (isStatusOK) {\\n    const h1s = p.meta?.htags?.h1 ?? [];\\n    if (h1s.length !== 1) {\\n      flags.push('h1_issue');\\n      add('metadataSEO', 'h1Issues', { url, h1Count: h1s.length, todo: 'Ensure exactly one H1 tag per page that reflects the main topic.' });\\n    }\\n  }\\n\\n  /* Readability */\\n  if (isStatusOK) {\\n    const fk = p.meta?.content?.flesch_kincaid_readability_index ?? 100;\\n    if (fk < 55) {\\n      flags.push('low_readability');\\n      add('contentQuality', 'readability', { url, score: fk, todo: `Simplify language, shorten sentences, and use lists to lift F-K score > 55 (currently ${fk.toFixed(2)}).` });\\n    }\\n  }\\n\\n  /* Orphan pages */\\n  if (isStatusOK && p.checks?.is_orphan_page) {\\n    flags.push('orphan_page');\\n    add('internalLinking', 'orphanPages', { url, todo: 'Add at least one crawlable internal link pointing to this URL.' });\\n  }\\n\\n  /* Low internal links */\\n  if (isStatusOK && (p.meta?.internal_links_count || 0) < 3) {\\n    flags.push('low_internal_links');\\n    add('internalLinking', 'lowInternalLinks', { url, links: p.meta?.inbound_links_count, todo: 'Add three or more relevant internal links to strengthen topical signals.' });\\n  }\\n\\n  /* Under-performing content */\\n  if (isStatusOK) {\\n    const clicks      = p.googleSearchConsoleData?.clicks ?? null;\\n    const impressions = p.googleSearchConsoleData?.impressions ?? null;\\n    const lm          = p.last_modified ?? p.meta?.social_media_tags?.['og:updated_time'] ?? null;\\n\\n    if (clicks !== null && clicks < 50 && (lm === null || ageInMs(lm) > SIX_MONTHS_MS)) {\\n      flags.push('underperforming');\\n      issues.underperformingContent.push({\\n        url,\\n        clicks,\\n        impressions,\\n        lastModified: lm,\\n        todo: `Only ${clicks} clicks in the last 90 days — refresh content, improve targeting, or consider pruning.`,\\n      });\\n    }\\n  }\\n\\n  /* page-level flags record */\\n  pagesWithFlags.push({\\n    url,\\n    flags,\\n    clicks     : p.googleSearchConsoleData?.clicks,\\n    impressions: p.googleSearchConsoleData?.impressions,\\n  });\\n}\\n\\n/* ────────────────────── executive summary ────────────────────── */\\nconst count = (sect, bucket) => issues[sect]?.[bucket]?.length || 0;\\n\\nsummary.issues = {\\n  '404'                 : count('statusIssues', 'pages404'),\\n  redirects             : count('statusIssues', 'redirects301'),\\n  canonicalised         : count('statusIssues', 'canonicalised'),\\n  outdated              : count('contentQuality', 'outdatedMetaYear') +\\n                           count('contentQuality', 'staleLastModified'),\\n  thin                  : count('contentQuality', 'thinContent'),\\n  excessiveClickDepth   : count('internalLinking', 'excessiveClickDepth'),\\n  largeHTML             : count('contentQuality', 'largeHTML'),\\n  titleLen              : count('metadataSEO', 'titleLength'),\\n  descriptionLen        : count('metadataSEO', 'descriptionLength'),\\n  missingOrDuplicateMeta:\\n      count('metadataSEO', 'missingTitle') +\\n      count('metadataSEO', 'missingDescription') +\\n      count('metadataSEO', 'duplicateTitle') +\\n      count('metadataSEO', 'duplicateDescription'),\\n  h1Issues              : count('metadataSEO', 'h1Issues'),\\n  readability           : count('contentQuality', 'readability'),\\n  orphan                : count('internalLinking', 'orphanPages'),\\n  lowInternalLinks      : count('internalLinking', 'lowInternalLinks'),\\n  underperforming       : issues.underperformingContent.length,\\n};\\n\\n/* ────────────────────── final report ─────────────────────────── */\\nreturn [{\\n  json: {\\n    generatedAt: new Date().toISOString(),\\n    summary,\\n    issues,\\n    pages: pagesWithFlags,\\n  },\\n}];\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"2227e1c7-890a-4b99-ad20-5b5645ba884b\",\n      \"name\": \"Generate HTML Report\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2320,\n        320\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Get the audit data and company information\\nconst auditData = $('Build Report Structure').item.json;\\nconst websiteDomain = $('Set Fields').first().json.dfs_domain;\\nconst companyName = $('Set Fields').first().json.company_name;\\nconst companyWebsite = $('Set Fields').first().json.company_website;\\nconst companyLogoUrl = $('Set Fields').first().json.company_logo_url;\\nconst primaryColor = $('Set Fields').first().json.brand_primary_color;\\nconst secondaryColor = $('Set Fields').first().json.brand_secondary_color;\\n\\n// Format date nicely\\nconst formattedDate = new Date(auditData.generatedAt).toLocaleDateString('en-US', {\\n  year: 'numeric',\\n  month: 'long',\\n  day: 'numeric'\\n});\\n\\n// Calculate total issues\\nconst totalIssues = Object.values(auditData.summary.issues).reduce((sum, count) => sum + count, 0);\\n\\n// Define issue gravity weights for health score calculation\\nconst issueGravity = {\\n  // Content Quality\\n  outdated: 2, // Medium\\n  thin: 3, // High\\n  readability: 1, // Low\\n  largeHTML: 2, // Medium\\n  // Technical SEO\\n  '404': 3, // High\\n  redirects: 2, // Medium\\n  canonicalised: 3, // High\\n  // On-Page SEO\\n  titleLen: 1, // Low\\n  descriptionLen: 1, // Low\\n  missingOrDuplicateMeta: 1, // Low\\n  h1Issues: 3, // High\\n  // Internal Linking\\n  excessiveClickDepth: 3, // High\\n  orphan: 3, // High\\n  lowInternalLinks: 3, // High\\n  // Performance\\n  underperforming: 3 // High\\n};\\n\\n// Calculate health score based on issue gravity\\nfunction calculateHealthScore(pages, issues) {\\n  // Calculate weighted sum of issues\\n  let weightedIssues = 0;\\n  let maxPossibleWeightedIssues = 0;\\n  \\n  // Process each issue type with its gravity weight\\n  for (const [issueType, count] of Object.entries(auditData.summary.issues)) {\\n    const gravity = issueGravity[issueType] || 1; // Default to Low if not defined\\n    weightedIssues += count * gravity;\\n    \\n    // Assume worst case: all pages have this issue\\n    maxPossibleWeightedIssues += pages * gravity;\\n  }\\n  \\n  // Cap the maximum penalty to avoid too severe scores with many pages\\n  const maxPenalty = Math.min(pages * 5, 100);\\n  \\n  // Calculate score: start at 100 and subtract weighted penalty\\n  const weightedPenalty = Math.min(maxPenalty, (weightedIssues / Math.max(1, pages)) * 2);\\n  const score = 100 - weightedPenalty;\\n  \\n  return Math.max(0, Math.round(score));\\n}\\n\\n// Get health score color based on value\\nfunction getHealthScoreColor(score) {\\n  if (score >= 80) return '#4caf50'; // Green\\n  if (score >= 60) return '#ff9800'; // Orange\\n  return '#f44336'; // Red\\n}\\n\\n// Get top recommendations\\nfunction getTopRecommendations(audit) {\\n  const recommendations = [];\\n  const priorityMap = {\\n    3: \\\"high\\\",     // High gravity issues\\n    2: \\\"medium\\\",   // Medium gravity issues\\n    1: \\\"low\\\"       // Low gravity issues\\n  };\\n  \\n  // Check for high gravity issues first\\n  if ((audit.issues.contentQuality.thinContent || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Expand thin content pages to improve topical depth and authority\\\",\\n      priority: priorityMap[issueGravity.thin] || \\\"high\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.statusIssues.pages404 || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Fix 404 errors by restoring pages or implementing proper redirects\\\",\\n      priority: priorityMap[issueGravity['404']] || \\\"high\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.metadataSEO.h1Issues || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Fix H1 tag issues to improve on-page SEO and content hierarchy\\\",\\n      priority: priorityMap[issueGravity.h1Issues] || \\\"high\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.internalLinking.orphanPages || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Create internal links to orphan pages to improve crawlability\\\",\\n      priority: priorityMap[issueGravity.orphan] || \\\"high\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.underperformingContent || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Optimize underperforming pages to improve search visibility\\\",\\n      priority: priorityMap[issueGravity.underperforming] || \\\"high\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.statusIssues.canonicalised || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Fix canonicalization issues to consolidate ranking signals\\\",\\n      priority: priorityMap[issueGravity.canonicalised] || \\\"high\\\"\\n    });\\n  }\\n  \\n  // Medium gravity issues\\n  if ((audit.issues.contentQuality.staleLastModified || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Update stale content with fresh information and current year references\\\",\\n      priority: priorityMap[issueGravity.outdated] || \\\"medium\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.statusIssues.redirects301 || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Update internal links to point directly to final URLs instead of through redirects\\\",\\n      priority: priorityMap[issueGravity.redirects] || \\\"medium\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.contentQuality.largeHTML || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Reduce HTML size for better page performance and loading speed\\\",\\n      priority: priorityMap[issueGravity.largeHTML] || \\\"medium\\\"\\n    });\\n  }\\n  \\n  // Low gravity issues\\n  if ((audit.issues.metadataSEO.missingDescription || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Add missing meta descriptions to improve click-through rates\\\",\\n      priority: priorityMap[issueGravity.missingOrDuplicateMeta] || \\\"low\\\"\\n    });\\n  }\\n  \\n  if ((audit.issues.contentQuality.readability || []).length > 0) {\\n    recommendations.push({\\n      text: \\\"Improve content readability to enhance user experience\\\",\\n      priority: priorityMap[issueGravity.readability] || \\\"low\\\"\\n    });\\n  }\\n  \\n  // Fallback if not enough recommendations\\n  if (recommendations.length < 3) {\\n    recommendations.push({\\n      text: \\\"Implement a regular content audit schedule to maintain freshness\\\",\\n      priority: \\\"low\\\"\\n    });\\n  }\\n  \\n  // Return top 5 recommendations, prioritizing high gravity issues first\\n  return recommendations\\n    .sort((a, b) => {\\n      const priorityOrder = { \\\"high\\\": 0, \\\"medium\\\": 1, \\\"low\\\": 2 };\\n      return priorityOrder[a.priority] - priorityOrder[b.priority];\\n    })\\n    .slice(0, 5);\\n}\\n\\n// Format flag names for display\\nfunction formatFlagName(flag) {\\n  return flag\\n    .split('_')\\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\\n    .join(' ');\\n}\\n\\n// Utility to lighten a color\\nfunction lightenColor(hex, percent) {\\n  hex = hex.replace('#', '');\\n  let r = parseInt(hex.substring(0, 2), 16);\\n  let g = parseInt(hex.substring(2, 4), 16);\\n  let b = parseInt(hex.substring(4, 6), 16);\\n  r = Math.min(255, Math.round(r + (255 - r) * (percent / 100)));\\n  g = Math.min(255, Math.round(g + (255 - g) * (percent / 100)));\\n  b = Math.min(255, Math.round(b + (255 - b) * (percent / 100)));\\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\\n}\\n\\n// Utility to darken a color\\nfunction darkenColor(hex, percent) {\\n  hex = hex.replace('#', '');\\n  let r = parseInt(hex.substring(0, 2), 16);\\n  let g = parseInt(hex.substring(2, 4), 16);\\n  let b = parseInt(hex.substring(4, 6), 16);\\n  r = Math.max(0, Math.round(r * (1 - percent / 100)));\\n  g = Math.max(0, Math.round(g * (1 - percent / 100)));\\n  b = Math.max(0, Math.round(b * (1 - percent / 100)));\\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\\n}\\n\\n// Helper function to render a table section or \\\"No issues found\\\" message\\nfunction renderTableSection(items, columns) {\\n  if (!items || items.length === 0) {\\n    return `<p class=\\\"section-empty\\\">No issues found.</p>`;\\n  }\\n  \\n  const showInitial = 10; // Number of rows to show initially\\n  const hasMoreItems = items.length > showInitial;\\n  const initialItems = hasMoreItems ? items.slice(0, showInitial) : items;\\n  const hiddenItems = hasMoreItems ? items.slice(showInitial) : [];\\n  \\n  return `\\n    <table class=\\\"paginated-table\\\">\\n      <thead>\\n        <tr>\\n          ${columns.map(col => `<th>${col.header}</th>`).join('')}\\n        </tr>\\n      </thead>\\n      <tbody class=\\\"initial-rows\\\">\\n        ${initialItems.map(item => `\\n          <tr>\\n            ${columns.map(col => `<td class=\\\"${col.class || ''}\\\">${col.render(item)}</td>`).join('')}\\n          </tr>\\n        `).join('')}\\n      </tbody>\\n      ${hasMoreItems ? `\\n        <tbody class=\\\"hidden-rows\\\" style=\\\"display: none;\\\">\\n          ${hiddenItems.map(item => `\\n            <tr>\\n              ${columns.map(col => `<td class=\\\"${col.class || ''}\\\">${col.render(item)}</td>`).join('')}\\n            </tr>\\n          `).join('')}\\n        </tbody>\\n      ` : ''}\\n    </table>\\n    ${hasMoreItems ? `\\n      <div class=\\\"table-pagination\\\">\\n        <button class=\\\"show-more-button\\\" onclick=\\\"toggleRows(this)\\\">Show All (${items.length} rows)</button>\\n      </div>\\n    ` : ''}\\n  `;\\n}\\n\\n// Helper function to render source links for 404 and 301 pages\\nfunction renderSourceLinks(sources) {\\n  if (!sources || sources.length === 0) {\\n    return '<p class=\\\"no-sources\\\">No source links found.</p>';\\n  }\\n  \\n  return `\\n    <div class=\\\"source-links\\\">\\n      <table class=\\\"source-links-table\\\">\\n        <thead>\\n          <tr>\\n            <th>Source URL</th>\\n            <th>Type</th>\\n            <th>Anchor Text</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          ${sources.map(source => `\\n            <tr>\\n              <td class=\\\"url-cell\\\"><a href=\\\"${source.linkFrom}\\\" target=\\\"_blank\\\">${source.linkFrom}</a></td>\\n              <td>${source.type || 'N/A'}</td>\\n              <td>${source.text || 'N/A'}</td>\\n            </tr>\\n          `).join('')}\\n        </tbody>\\n      </table>\\n    </div>\\n  `;\\n}\\n\\n// Return a single item with the HTML content\\nreturn [{\\n  html: `<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n  <meta charset=\\\"UTF-8\\\">\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n  <title>Content Audit Report for ${websiteDomain} | ${companyName}</title>\\n  <style>\\n    :root {\\n      --primary-color: ${primaryColor};\\n      --secondary-color: ${secondaryColor};\\n      --primary-light: ${lightenColor(primaryColor, 85)};\\n      --secondary-light: ${lightenColor(secondaryColor, 85)};\\n      --primary-dark: ${darkenColor(primaryColor, 20)};\\n      --text-color: #333;\\n      --light-gray: #f5f5f5;\\n      --medium-gray: #e0e0e0;\\n      --dark-gray: #757575;\\n      --success-color: #4caf50;\\n      --warning-color: #ff9800;\\n      --danger-color: #f44336;\\n    }\\n    \\n    * {\\n      margin: 0;\\n      padding: 0;\\n      box-sizing: border-box;\\n    }\\n    \\n    body {\\n      font-family: 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\\n      line-height: 1.6;\\n      color: var(--text-color);\\n      background-color: #fff;\\n    }\\n    \\n    .container {\\n      max-width: 1200px;\\n      margin: 0 auto;\\n      padding: 0 20px;\\n    }\\n    \\n    header {\\n      background-color: var(--primary-color);\\n      color: white;\\n      padding: 30px 0;\\n      margin-bottom: 40px;\\n    }\\n    \\n    .header-content {\\n      display: flex;\\n      justify-content: space-between;\\n      align-items: center;\\n    }\\n    \\n    .logo-container {\\n      display: flex;\\n      align-items: center;\\n    }\\n    \\n    .logo {\\n      max-height: 60px;\\n      margin-right: 20px;\\n    }\\n    \\n    .report-info {\\n      text-align: right;\\n    }\\n    \\n    h1 {\\n      font-size: 1.8rem;\\n      margin-bottom: 0px;\\n      color: white;\\n    }\\n    \\n    h2 {\\n      font-size: 1.8rem;\\n      margin: 40px 0 20px;\\n      color: var(--primary-color);\\n      border-bottom: 2px solid var(--primary-light);\\n      padding-bottom: 10px;\\n    }\\n    \\n    h3 {\\n      font-size: 1.4rem;\\n      margin: 30px 0 15px;\\n      color: var(--primary-dark);\\n    }\\n    \\n    h4 {\\n      font-size: 1.2rem;\\n      margin: 20px 0 10px;\\n      color: var(--secondary-color);\\n    }\\n    \\n    p {\\n      margin-bottom: 15px;\\n    }\\n    \\n    .summary-cards {\\n      display: grid;\\n      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\\n      gap: 20px;\\n      margin: 30px 0;\\n    }\\n    \\n    .card {\\n      background-color: white;\\n      border-radius: 8px;\\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n      padding: 20px;\\n      transition: transform 0.3s ease;\\n    }\\n    \\n    .card:hover {\\n      transform: translateY(-5px);\\n    }\\n    \\n    .card-header {\\n      display: flex;\\n      justify-content: space-between;\\n      align-items: center;\\n      margin-bottom: 15px;\\n    }\\n    \\n    .card-title {\\n      font-size: 1.2rem;\\n      font-weight: 600;\\n      color: var(--primary-color);\\n    }\\n    \\n    .card-value {\\n      font-size: 2.5rem;\\n      font-weight: 700;\\n      color: var(--secondary-color);\\n    }\\n    \\n    .issues-summary {\\n      display: flex;\\n      justify-content: space-between;\\n      flex-wrap: wrap;\\n      gap: 15px;\\n      margin: 30px 0;\\n    }\\n    \\n    .issue-category {\\n      flex: 1;\\n      min-width: 250px;\\n      background-color: var(--light-gray);\\n      border-radius: 8px;\\n      padding: 20px;\\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\\n    }\\n    \\n    .issue-category h3 {\\n      color: var(--primary-color);\\n      margin-top: 0;\\n      border-bottom: 1px solid var(--medium-gray);\\n      padding-bottom: 10px;\\n    }\\n    \\n    .issue-item {\\n      display: flex;\\n      justify-content: space-between;\\n      padding: 8px 0;\\n      border-bottom: 1px solid var(--medium-gray);\\n    }\\n    \\n    .issue-item:last-child {\\n      border-bottom: none;\\n    }\\n    \\n    .issue-name {\\n      color: var(--text-color);\\n    }\\n    \\n    .issue-count {\\n      font-weight: 600;\\n      color: var(--secondary-color);\\n    }\\n    \\n    table {\\n      width: 100%;\\n      border-collapse: collapse;\\n      margin: 20px 0 40px;\\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n    }\\n    \\n    th {\\n      background-color: var(--primary-color);\\n      color: white;\\n      text-align: left;\\n      padding: 12px 15px;\\n    }\\n    \\n    tr:nth-child(even) {\\n      background-color: var(--light-gray);\\n    }\\n    \\n    td {\\n      padding: 10px 15px;\\n      border-bottom: 1px solid var(--medium-gray);\\n    }\\n    \\n    .url-cell {\\n      max-width: 300px;\\n      overflow: hidden;\\n      text-overflow: ellipsis;\\n      white-space: nowrap;\\n    }\\n    \\n    .url-cell a {\\n      color: var(--primary-color);\\n      text-decoration: none;\\n    }\\n    \\n    .url-cell a:hover {\\n      text-decoration: underline;\\n    }\\n    \\n    .todo-cell {\\n      max-width: 400px;\\n    }\\n    \\n    .flag {\\n      display: inline-block;\\n      padding: 3px 8px;\\n      border-radius: 4px;\\n      margin: 2px;\\n      font-size: 0.8rem;\\n      background-color: var(--primary-light);\\n      color: var(--primary-dark);\\n    }\\n    \\n    .pages-table {\\n      margin-top: 30px;\\n    }\\n    \\n    .pages-table th {\\n      position: sticky;\\n      top: 0;\\n    }\\n    \\n    footer {\\n      margin-top: 60px;\\n      padding: 30px 0;\\n      background-color: var(--primary-light);\\n      color: var(--primary-dark);\\n      text-align: center;\\n    }\\n    \\n    .footer-content {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n    }\\n    \\n    .company-info {\\n      margin-bottom: 20px;\\n    }\\n    \\n    .company-website {\\n      color: var(--primary-color);\\n      text-decoration: none;\\n      font-weight: 600;\\n    }\\n    \\n    .company-website:hover {\\n      text-decoration: underline;\\n    }\\n    \\n    .date-generated {\\n      font-style: italic;\\n      color: var(--dark-gray);\\n    }\\n    \\n    .progress-bar-container {\\n      width: 100%;\\n      background-color: var(--light-gray);\\n      border-radius: 10px;\\n      margin: 10px 0;\\n      overflow: hidden;\\n    }\\n    \\n    .progress-bar {\\n      height: 10px;\\n      background-color: var(--secondary-color);\\n      border-radius: 10px;\\n    }\\n    \\n    .recommendations {\\n      background-color: var(--secondary-light);\\n      border-left: 4px solid var(--secondary-color);\\n      padding: 15px;\\n      margin: 20px 0;\\n      border-radius: 0 4px 4px 0;\\n    }\\n    \\n    .recommendations h4 {\\n      color: var(--secondary-color);\\n      margin-top: 0;\\n    }\\n    \\n    .recommendations ul {\\n      margin-left: 20px;\\n    }\\n    \\n    .recommendations li {\\n      margin-bottom: 8px;\\n    }\\n    \\n    .priority-tag {\\n      display: inline-block;\\n      padding: 3px 8px;\\n      border-radius: 4px;\\n      margin-left: 8px;\\n      font-size: 0.8rem;\\n      font-weight: 600;\\n    }\\n    \\n    .high {\\n      background-color: rgba(244, 67, 54, 0.1);\\n      color: var(--danger-color);\\n    }\\n    \\n    .medium {\\n      background-color: rgba(255, 152, 0, 0.1);\\n      color: var(--warning-color);\\n    }\\n    \\n    .low {\\n      background-color: rgba(76, 175, 80, 0.1);\\n      color: var(--success-color);\\n    }\\n    \\n    .section-empty {\\n      font-style: italic;\\n      color: var(--dark-gray);\\n      padding: 15px;\\n      background-color: var(--light-gray);\\n      border-radius: 4px;\\n      text-align: center;\\n    }\\n    \\n    .source-links {\\n      margin-top: 10px;\\n      margin-bottom: 20px;\\n      padding: 10px;\\n      background-color: var(--light-gray);\\n      border-radius: 4px;\\n      border-left: 3px solid var(--secondary-color);\\n    }\\n    \\n    .source-links h4 {\\n      margin-top: 0;\\n      margin-bottom: 10px;\\n      color: var(--secondary-color);\\n      font-size: 1rem;\\n    }\\n    \\n    .source-links-table {\\n      margin: 0;\\n      box-shadow: none;\\n    }\\n    \\n    .source-links-table th {\\n      background-color: var(--secondary-color);\\n      font-size: 0.9rem;\\n      padding: 8px 10px;\\n    }\\n    \\n    .source-links-table td {\\n      font-size: 0.9rem;\\n      padding: 6px 10px;\\n    }\\n    \\n    .no-sources {\\n      font-style: italic;\\n      color: var(--dark-gray);\\n      margin: 5px 0;\\n    }\\n    \\n    .toggle-sources {\\n      background-color: var(--secondary-light);\\n      color: var(--secondary-color);\\n      border: 1px solid var(--secondary-color);\\n      border-radius: 4px;\\n      padding: 5px 10px;\\n      font-size: 0.8rem;\\n      cursor: pointer;\\n      margin-top: 5px;\\n      transition: background-color 0.3s;\\n    }\\n    \\n    .toggle-sources:hover {\\n      background-color: var(--secondary-color);\\n      color: white;\\n    }\\n    \\n    .sources-container {\\n      margin-top: 10px;\\n    }\\n    \\n    .show-more-button {\\n      background-color: var(--primary-color);\\n      color: white;\\n      border: none;\\n      border-radius: 4px;\\n      padding: 8px 16px;\\n      font-size: 0.9rem;\\n      font-weight: 600;\\n      cursor: pointer;\\n      margin: 10px auto;\\n      display: block;\\n      transition: all 0.3s ease;\\n      box-shadow: 0 2px 5px rgba(0,0,0,0.1);\\n    }\\n    \\n    .show-more-button:hover {\\n      background-color: var(--primary-dark);\\n      box-shadow: 0 3px 7px rgba(0,0,0,0.2);\\n      transform: translateY(-2px);\\n    }\\n    \\n    .table-pagination {\\n      text-align: center;\\n      margin-top: -20px;\\n      margin-bottom: 30px;\\n    }\\n    \\n    @media print {\\n      body {\\n        font-size: 12pt;\\n      }\\n      \\n      .container {\\n        width: 100%;\\n        max-width: none;\\n        padding: 0;\\n      }\\n      \\n      header {\\n        padding: 15px 0;\\n      }\\n      \\n      h1 {\\n        font-size: 20pt;\\n      }\\n      \\n      h2 {\\n        font-size: 18pt;\\n        margin-top: 20px;\\n      }\\n      \\n      h3 {\\n        font-size: 14pt;\\n      }\\n      \\n      .card:hover {\\n        transform: none;\\n      }\\n      \\n      table {\\n        page-break-inside: avoid;\\n      }\\n      \\n      tr {\\n        page-break-inside: avoid;\\n      }\\n      \\n      .no-print {\\n        display: none;\\n      }\\n      \\n      @page {\\n        margin: 1.5cm;\\n      }\\n    }\\n  </style>\\n  <script>\\n    // JavaScript to toggle source links visibility\\n    document.addEventListener('DOMContentLoaded', function() {\\n      document.querySelectorAll('.toggle-sources').forEach(button => {\\n        button.addEventListener('click', function() {\\n          const container = this.nextElementSibling;\\n          if (container.style.display === 'none' || !container.style.display) {\\n            container.style.display = 'block';\\n            this.textContent = 'Hide Source Links';\\n          } else {\\n            container.style.display = 'none';\\n            this.textContent = 'Show Source Links';\\n          }\\n        });\\n      });\\n    });\\n    \\n    // JavaScript to toggle table rows visibility\\n    function toggleRows(button) {\\n      const table = button.closest('.table-pagination').previousElementSibling;\\n      const hiddenRows = table.querySelector('.hidden-rows');\\n      const totalRows = hiddenRows.querySelectorAll('tr').length + table.querySelector('.initial-rows').querySelectorAll('tr').length;\\n      \\n      if (hiddenRows.style.display === 'none' || !hiddenRows.style.display) {\\n        hiddenRows.style.display = 'table-row-group';\\n        button.textContent = 'Show Less';\\n      } else {\\n        hiddenRows.style.display = 'none';\\n        button.textContent = 'Show All (' + totalRows + ' items)';\\n      }\\n    }\\n  </script>\\n</head>\\n<body>\\n  <header>\\n    <div class=\\\"container\\\">\\n      <div class=\\\"header-content\\\">\\n        <div class=\\\"logo-container\\\">\\n          <img src=\\\"${companyLogoUrl}\\\" alt=\\\"${companyName} Logo\\\" class=\\\"logo\\\">\\n          <div>\\n            <h1>Content Audit Report</h1>\\n            <p>for ${websiteDomain}</p>\\n          </div>\\n        </div>\\n        <div class=\\\"report-info\\\">\\n          <p>Generated on: ${formattedDate}</p>\\n          <p>By: ${companyName}</p>\\n        </div>\\n      </div>\\n    </div>\\n  </header>\\n\\n  <main class=\\\"container\\\">\\n    <section id=\\\"executive-summary\\\">\\n      <h2>Executive Summary</h2>\\n      <p>This report provides a comprehensive analysis of content issues found on <strong>${websiteDomain}</strong>. We've identified ${totalIssues} issues across ${auditData.summary.pages} pages that need attention to improve SEO performance and user experience.</p>\\n      \\n      <div class=\\\"summary-cards\\\">\\n        <div class=\\\"card\\\">\\n          <div class=\\\"card-header\\\">\\n            <span class=\\\"card-title\\\">Pages Analyzed</span>\\n          </div>\\n          <div class=\\\"card-value\\\">${auditData.summary.pages}</div>\\n        </div>\\n        \\n        <div class=\\\"card\\\">\\n          <div class=\\\"card-header\\\">\\n            <span class=\\\"card-title\\\">Total Issues</span>\\n          </div>\\n          <div class=\\\"card-value\\\">${totalIssues}</div>\\n        </div>\\n        \\n        <div class=\\\"card\\\">\\n          <div class=\\\"card-header\\\">\\n            <span class=\\\"card-title\\\">Health Score</span>\\n          </div>\\n          <div class=\\\"card-value\\\" style=\\\"color: ${getHealthScoreColor(calculateHealthScore(auditData.summary.pages, totalIssues))};\\\">${calculateHealthScore(auditData.summary.pages, totalIssues)}%</div>\\n          <div class=\\\"progress-bar-container\\\">\\n            <div class=\\\"progress-bar\\\" style=\\\"width: ${calculateHealthScore(auditData.summary.pages, totalIssues)}%\\\"></div>\\n          </div>\\n        </div>\\n      </div>\\n      \\n      <div class=\\\"recommendations\\\">\\n        <h4>Key Recommendations</h4>\\n        <ul>\\n          ${getTopRecommendations(auditData).map(rec => `<li>${rec.text} <span class=\\\"priority-tag ${rec.priority}\\\">${rec.priority}</span></li>`).join('')}\\n        </ul>\\n      </div>\\n    </section>\\n\\n    <section id=\\\"issues-breakdown\\\">\\n      <h2>Issues Breakdown</h2>\\n      \\n      <div class=\\\"issues-summary\\\">\\n        <div class=\\\"issue-category\\\">\\n          <h3>Content Quality</h3>\\n          <div class=\\\"issues-list\\\">\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Outdated Content</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.outdated}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Thin Content</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.thin}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Readability Issues</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.readability}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Large HTML</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.largeHTML}</span>\\n            </div>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"issue-category\\\">\\n          <h3>Technical SEO</h3>\\n          <div class=\\\"issues-list\\\">\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">404 Errors</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues['404']}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Redirects</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.redirects}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Canonicalization Issues</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.canonicalised}</span>\\n            </div>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"issue-category\\\">\\n          <h3>On-Page SEO</h3>\\n          <div class=\\\"issues-list\\\">\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Title Length Issues</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.titleLen}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Description Issues</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.descriptionLen}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Missing/Duplicate Meta</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.missingOrDuplicateMeta}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">H1 Issues</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.h1Issues}</span>\\n            </div>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"issue-category\\\">\\n          <h3>Internal Linking</h3>\\n          <div class=\\\"issues-list\\\">\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Excessive Click Depth</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.excessiveClickDepth}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Orphan Pages</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.orphan}</span>\\n            </div>\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Low Internal Links</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.lowInternalLinks}</span>\\n            </div>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"issue-category\\\">\\n          <h3>Performance</h3>\\n          <div class=\\\"issues-list\\\">\\n            <div class=\\\"issue-item\\\">\\n              <span class=\\\"issue-name\\\">Underperforming Pages</span>\\n              <span class=\\\"issue-count\\\">${auditData.summary.issues.underperforming}</span>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </section>\\n\\n    <!-- Status Issues Section -->\\n    <section id=\\\"status-issues\\\">\\n      <h2>Status Issues</h2>\\n      \\n      <h3>404 Errors (${(auditData.issues.statusIssues.pages404 || []).length})</h3>\\n      ${(auditData.issues.statusIssues.pages404 || []).length === 0 ? \\n        `<p class=\\\"section-empty\\\">No issues found.</p>` : \\n        (() => {\\n          const items = auditData.issues.statusIssues.pages404 || [];\\n          const showInitial = 10; // Number of rows to show initially\\n          const hasMoreItems = items.length > showInitial;\\n          const initialItems = hasMoreItems ? items.slice(0, showInitial) : items;\\n          const hiddenItems = hasMoreItems ? items.slice(showInitial) : [];\\n          \\n          return `\\n            <table class=\\\"paginated-table\\\">\\n              <thead>\\n                <tr>\\n                  <th>URL</th>\\n                  <th>Source Links</th>\\n                  <th>Recommendation</th>\\n                </tr>\\n              </thead>\\n              <tbody class=\\\"initial-rows\\\">\\n                ${initialItems.map(item => `\\n                  <tr>\\n                    <td class=\\\"url-cell\\\"><a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a></td>\\n                    <td>\\n                      ${item.sources && item.sources.length > 0 ? \\n                        `<button class=\\\"toggle-sources\\\">Show Source Links (${item.sources.length})</button>\\n                        <div class=\\\"sources-container\\\" style=\\\"display: none;\\\">\\n                          ${renderSourceLinks(item.sources)}\\n                        </div>` : \\n                        `<span class=\\\"no-sources\\\">No source links found</span>`\\n                      }\\n                    </td>\\n                    <td class=\\\"todo-cell\\\">${item.todo}</td>\\n                  </tr>\\n                `).join('')}\\n              </tbody>\\n              ${hasMoreItems ? `\\n                <tbody class=\\\"hidden-rows\\\" style=\\\"display: none;\\\">\\n                  ${hiddenItems.map(item => `\\n                    <tr>\\n                      <td class=\\\"url-cell\\\"><a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a></td>\\n                      <td>\\n                        ${item.sources && item.sources.length > 0 ? \\n                          `<button class=\\\"toggle-sources\\\">Show Source Links (${item.sources.length})</button>\\n                          <div class=\\\"sources-container\\\" style=\\\"display: none;\\\">\\n                            ${renderSourceLinks(item.sources)}\\n                          </div>` : \\n                          `<span class=\\\"no-sources\\\">No source links found</span>`\\n                        }\\n                      </td>\\n                      <td class=\\\"todo-cell\\\">${item.todo}</td>\\n                    </tr>\\n                  `).join('')}\\n                </tbody>\\n              ` : ''}\\n            </table>\\n            ${hasMoreItems ? `\\n              <div class=\\\"table-pagination\\\">\\n                <button class=\\\"show-more-button\\\" onclick=\\\"toggleRows(this)\\\">Show All (${items.length} rows)</button>\\n              </div>\\n            ` : ''}\\n          `;\\n        })()\\n      }\\n      \\n      <h3>301 Redirects (${(auditData.issues.statusIssues.redirects301 || []).length})</h3>\\n      ${(auditData.issues.statusIssues.redirects301 || []).length === 0 ? \\n        `<p class=\\\"section-empty\\\">No issues found.</p>` : \\n        (() => {\\n          const items = auditData.issues.statusIssues.redirects301 || [];\\n          const showInitial = 10; // Number of rows to show initially\\n          const hasMoreItems = items.length > showInitial;\\n          const initialItems = hasMoreItems ? items.slice(0, showInitial) : items;\\n          const hiddenItems = hasMoreItems ? items.slice(showInitial) : [];\\n          \\n          return `\\n            <table class=\\\"paginated-table\\\">\\n              <thead>\\n                <tr>\\n                  <th>URL</th>\\n                  <th>Source Links</th>\\n                  <th>Recommendation</th>\\n                </tr>\\n              </thead>\\n              <tbody class=\\\"initial-rows\\\">\\n                ${initialItems.map(item => `\\n                  <tr>\\n                    <td class=\\\"url-cell\\\"><a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a></td>\\n                    <td>\\n                      ${item.sources && item.sources.length > 0 ? \\n                        `<button class=\\\"toggle-sources\\\">Show Source Links (${item.sources.length})</button>\\n                        <div class=\\\"sources-container\\\" style=\\\"display: none;\\\">\\n                          ${renderSourceLinks(item.sources)}\\n                        </div>` : \\n                        `<span class=\\\"no-sources\\\">No source links found</span>`\\n                      }\\n                    </td>\\n                    <td class=\\\"todo-cell\\\">${item.todo}</td>\\n                  </tr>\\n                `).join('')}\\n              </tbody>\\n              ${hasMoreItems ? `\\n                <tbody class=\\\"hidden-rows\\\" style=\\\"display: none;\\\">\\n                  ${hiddenItems.map(item => `\\n                    <tr>\\n                      <td class=\\\"url-cell\\\"><a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a></td>\\n                      <td>\\n                        ${item.sources && item.sources.length > 0 ? \\n                          `<button class=\\\"toggle-sources\\\">Show Source Links (${item.sources.length})</button>\\n                          <div class=\\\"sources-container\\\" style=\\\"display: none;\\\">\\n                            ${renderSourceLinks(item.sources)}\\n                          </div>` : \\n                          `<span class=\\\"no-sources\\\">No source links found</span>`\\n                        }\\n                      </td>\\n                      <td class=\\\"todo-cell\\\">${item.todo}</td>\\n                    </tr>\\n                  `).join('')}\\n                </tbody>\\n              ` : ''}\\n            </table>\\n            ${hasMoreItems ? `\\n              <div class=\\\"table-pagination\\\">\\n                <button class=\\\"show-more-button\\\" onclick=\\\"toggleRows(this)\\\">Show All (${items.length} rows)</button>\\n              </div>\\n            ` : ''}\\n          `;\\n        })()\\n      }\\n      \\n      <h3>Canonicalization Issues (${(auditData.issues.statusIssues.canonicalised || []).length})</h3>\\n      ${renderTableSection(auditData.issues.statusIssues.canonicalised, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Canonical URL', render: item => item.canonical || '—' },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n    </section>\\n\\n    <!-- Content Quality Issues Section -->\\n    <section id=\\\"content-quality-issues\\\">\\n      <h2>Content Quality Issues</h3>\\n      \\n      <h3>Outdated Content (${(auditData.issues.contentQuality.staleLastModified || []).length})</h3>\\n      ${renderTableSection(auditData.issues.contentQuality.staleLastModified, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Last Modified', render: item => item.lastModified },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Thin Content (${(auditData.issues.contentQuality.thinContent || []).length})</h3>\\n      ${renderTableSection(auditData.issues.contentQuality.thinContent, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Word Count', render: item => item.words },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Readability Issues (${(auditData.issues.contentQuality.readability || []).length})</h3>\\n      ${renderTableSection(auditData.issues.contentQuality.readability, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'F-K Score', render: item => item.score.toFixed(1) },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Outdated Meta Years (${(auditData.issues.contentQuality.outdatedMetaYear || []).length})</h3>\\n      ${renderTableSection(auditData.issues.contentQuality.outdatedMetaYear, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Field', render: item => item.field },\\n        { header: 'Years', render: item => item.years },\\n        { header: 'Original Text', render: item => item.original },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Large HTML (${(auditData.issues.contentQuality.largeHTML || []).length})</h3>\\n      ${renderTableSection(auditData.issues.contentQuality.largeHTML, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Size (bytes)', render: item => item.size ? item.size.toLocaleString() : 'N/A' },\\n        { header: 'DOM Size (bytes)', render: item => item.totalDom ? item.totalDom.toLocaleString() : 'N/A' },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n    </section>\\n    \\n    <!-- Metadata & SEO Issues Section -->\\n    <section id=\\\"metadata-seo-issues\\\">\\n      <h2>Metadata & SEO Issues</h2>\\n      \\n      <h3>Title Length Issues (${(auditData.issues.metadataSEO.titleLength || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.titleLength, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Length', render: item => `${item.length} characters` },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Description Length Issues (${(auditData.issues.metadataSEO.descriptionLength || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.descriptionLength, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Length', render: item => `${item.length} characters` },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Missing Titles (${(auditData.issues.metadataSEO.missingTitle || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.missingTitle, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Missing Descriptions (${(auditData.issues.metadataSEO.missingDescription || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.missingDescription, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Duplicate Titles (${(auditData.issues.metadataSEO.duplicateTitle || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.duplicateTitle, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Title', render: item => item.title },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Duplicate Descriptions (${(auditData.issues.metadataSEO.duplicateDescription || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.duplicateDescription, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Description', render: item => item.description },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>H1 Issues (${(auditData.issues.metadataSEO.h1Issues || []).length})</h3>\\n      ${renderTableSection(auditData.issues.metadataSEO.h1Issues, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'H1 Count', render: item => item.h1Count },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n    </section>\\n    \\n    <!-- Internal Linking Issues Section -->\\n    <section id=\\\"internal-linking-issues\\\">\\n      <h2>Internal Linking Issues</h2>\\n      \\n      <h3>Excessive Click Depth (${(auditData.issues.internalLinking.excessiveClickDepth || []).length})</h3>\\n      ${renderTableSection(auditData.issues.internalLinking.excessiveClickDepth, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Click Depth', render: item => item.depth },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Orphan Pages (${(auditData.issues.internalLinking.orphanPages || []).length})</h3>\\n      ${renderTableSection(auditData.issues.internalLinking.orphanPages, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n      \\n      <h3>Low Internal Links (${(auditData.issues.internalLinking.lowInternalLinks || []).length})</h3>\\n      ${renderTableSection(auditData.issues.internalLinking.lowInternalLinks, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Internal Links', render: item => item.links },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n    </section>\\n    \\n    <!-- Performance Issues Section -->\\n    <section id=\\\"performance-issues\\\">\\n      <h2>Performance Issues</h2>\\n      \\n      <h3>Underperforming Content (${(auditData.issues.underperformingContent || []).length})</h3>\\n      ${renderTableSection(auditData.issues.underperformingContent, [\\n        { header: 'URL', class: 'url-cell', render: item => `<a href=\\\"${item.url}\\\" target=\\\"_blank\\\">${item.url}</a>` },\\n        { header: 'Clicks', render: item => item.clicks },\\n        { header: 'Impressions', render: item => item.impressions },\\n        { header: 'Last Modified', render: item => item.lastModified },\\n        { header: 'Recommendation', class: 'todo-cell', render: item => item.todo }\\n      ])}\\n    </section>\\n\\n    <section id=\\\"all-pages\\\">\\n      <h2>All Pages Overview</h2>\\n      <p>Below is a summary of all pages analyzed with their respective issues flagged.</p>\\n      \\n      ${(() => {\\n        const items = auditData.pages || [];\\n        const showInitial = 10; // Number of rows to show initially\\n        const hasMoreItems = items.length > showInitial;\\n        const initialItems = hasMoreItems ? items.slice(0, showInitial) : items;\\n        const hiddenItems = hasMoreItems ? items.slice(showInitial) : [];\\n        \\n        return `\\n          <table class=\\\"paginated-table pages-table\\\">\\n            <thead>\\n              <tr>\\n                <th>URL</th>\\n                <th>Issues</th>\\n                <th>Clicks</th>\\n                <th>Impressions</th>\\n              </tr>\\n            </thead>\\n            <tbody class=\\\"initial-rows\\\">\\n              ${initialItems.map(page => `\\n                <tr>\\n                  <td class=\\\"url-cell\\\"><a href=\\\"${page.url}\\\" target=\\\"_blank\\\">${page.url}</a></td>\\n                  <td>${page.flags.map(flag => `<span class=\\\"flag\\\">${formatFlagName(flag)}</span>`).join('')}</td>\\n                  <td>${page.clicks !== null ? page.clicks : 'N/A'}</td>\\n                  <td>${page.impressions !== null ? page.impressions : 'N/A'}</td>\\n                </tr>\\n              `).join('')}\\n            </tbody>\\n            ${hasMoreItems ? `\\n              <tbody class=\\\"hidden-rows\\\" style=\\\"display: none;\\\">\\n                ${hiddenItems.map(page => `\\n                  <tr>\\n                    <td class=\\\"url-cell\\\"><a href=\\\"${page.url}\\\" target=\\\"_blank\\\">${page.url}</a></td>\\n                    <td>${page.flags.map(flag => `<span class=\\\"flag\\\">${formatFlagName(flag)}</span>`).join('')}</td>\\n                    <td>${page.clicks !== null ? page.clicks : 'N/A'}</td>\\n                    <td>${page.impressions !== null ? page.impressions : 'N/A'}</td>\\n                  </tr>\\n                `).join('')}\\n              </tbody>\\n            ` : ''}\\n          </table>\\n          ${hasMoreItems ? `\\n            <div class=\\\"table-pagination\\\">\\n              <button class=\\\"show-more-button\\\" onclick=\\\"toggleRows(this)\\\">Show All (${items.length} rows)</button>\\n            </div>\\n          ` : ''}\\n        `;\\n      })()}\\n    </section>\\n    \\n    <section id=\\\"next-steps\\\">\\n      <h2>Recommended Next Steps</h2>\\n      <p>Based on our analysis, we recommend the following actions to improve your content performance:</p>\\n      \\n      <div class=\\\"recommendations\\\">\\n        <h4>Priority Actions</h4>\\n        <ul>\\n          ${auditData.summary.issues['404'] > 0 ? \\n            `<li>Fix 404 errors by restoring pages or implementing proper redirects</li>` : ''}\\n          ${auditData.summary.issues.redirects > 0 ? \\n            `<li>Update internal links to point directly to final URLs instead of through redirects</li>` : ''}\\n          ${auditData.summary.issues.thin > 0 ? \\n            `<li>Expand thin content pages to at least 1,500 words with valuable, unique information</li>` : ''}\\n          ${auditData.summary.issues.outdated > 0 ? \\n            `<li>Update all content that hasn't been refreshed in the last 12 months</li>` : ''}\\n          ${auditData.summary.issues.missingOrDuplicateMeta > 0 ? \\n            `<li>Add unique meta descriptions to all pages missing them</li>` : ''}\\n          ${auditData.summary.issues.titleLen > 0 ? \\n            `<li>Optimize page titles to be between 40-60 characters</li>` : ''}\\n          ${auditData.summary.issues.descriptionLen > 0 ? \\n            `<li>Optimize meta descriptions to be between 70-155 characters</li>` : ''}\\n          ${auditData.summary.issues.readability > 0 ? \\n            `<li>Improve content readability by simplifying language and shortening sentences</li>` : ''}\\n          ${auditData.summary.issues.underperforming > 0 ? \\n            `<li>Identify keywords with potential for pages with high impressions but low clicks</li>` : ''}\\n          ${auditData.summary.issues.orphan > 0 ? \\n            `<li>Create internal links to orphan pages to improve crawlability</li>` : ''}\\n          ${auditData.summary.issues.lowInternalLinks > 0 ? \\n            `<li>Improve internal linking between related content</li>` : ''}\\n          <li>Implement a content calendar to regularly refresh content</li>\\n          <li>Conduct keyword research to identify new content opportunities</li>\\n        </ul>\\n      </div>\\n      \\n      <h3>Implementation Timeline</h3>\\n      <p>We recommend addressing these issues in the following order:</p>\\n      \\n      <ol>\\n        <li><strong>Immediate (1-2 weeks):</strong> Fix technical issues like 404 errors, redirects, missing meta descriptions, and outdated year references.</li>\\n        <li><strong>Short-term (2-4 weeks):</strong> Update thin content and improve readability on key pages.</li>\\n        <li><strong>Medium-term (1-2 months):</strong> Refresh outdated content, especially on high-impression pages.</li>\\n        <li><strong>Long-term (2-3 months):</strong> Implement a content calendar to regularly update content and prevent future staleness.</li>\\n      </ol>\\n    </section>\\n  </main>\\n\\n  <footer>\\n    <div class=\\\"container\\\">\\n      <div class=\\\"footer-content\\\">\\n        <div class=\\\"company-info\\\">\\n          <p>Report generated by <strong>${companyName}</strong></p>\\n          <a href=\\\"${companyWebsite}\\\" class=\\\"company-website\\\" target=\\\"_blank\\\">${companyWebsite}</a>\\n        </div>\\n        <p class=\\\"date-generated\\\">Generated on ${formattedDate}</p>\\n      </div>\\n    </div>\\n  </footer>\\n</body>\\n</html>`\\n}];\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"b772f856-e1cf-44fd-8fc7-1ac5d8b033ca\",\n      \"name\": \"Extract 404 & 301\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1880,\n        500\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Get input data from the updated node\\nconst input = $('Get RAW Audit Data').first().json;\\n\\n// Initialize an array to store the new items\\nconst output = [];\\n\\n// Loop through tasks\\nconst tasks = input.tasks || [];\\nfor (const task of tasks) {\\n    const results = task.result || [];\\n    for (const result of results) {\\n        const items = result.items || [];\\n        for (const page of items) {\\n            // Only include URLs with status_code 404 or 301\\n            if (page.url && (page.status_code === 404 || page.status_code === 301)) {\\n                output.push({ json: { url: page.url, status_code: page.status_code } });\\n            }\\n        }\\n    }\\n}\\n\\n// Return filtered URLs with status codes 404 or 301\\nreturn output;\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"2bc70a8c-5c2d-4cb5-be4f-8d051f32ad23\",\n      \"name\": \"Loop Over Items1\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        2100,\n        500\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"4defc61c-7f05-4b64-9b68-96f097a9ba92\",\n      \"name\": \"Map URLs Data\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        2520,\n        500\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Get the input data\\nconst input = items[0].json;\\n\\n// Access the items array\\nconst linkItems = input.tasks[0].result[0].items;\\n\\n// Extract the target URL and status code from the first item\\nconst url = linkItems[0].link_to;\\nconst pageStatus = linkItems[0].page_to_status_code;\\n\\n// Build the output object\\nconst output = {\\n  URL: url,\\n  page_to_status_code: pageStatus,\\n  sources: linkItems.map(item => ({\\n    type: item.type,\\n    link_from: item.link_from,\\n    text: item.text\\n  }))\\n};\\n\\n// Return formatted output\\nreturn [{ json: output }];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"bbf44181-0ea7-48b2-b89e-143d72460d27\",\n      \"name\": \"Get Source URLs Data\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        2320,\n        500\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.dataforseo.com/v3/on_page/links\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"=[\\n  {\\n    \\\"id\\\": \\\"{{ $('Get RAW Audit Data').first().json.tasks[0].id }}\\\",\\n    \\\"page_to\\\": \\\"{{ $json.url }}\\\"\\n  }\\n]\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpBasicAuth\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"cae4d8e7-5a63-417d-a025-3f6631ead225\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        0,\n        0\n      ],\n      \"parameters\": {\n        \"width\": 940,\n        \"height\": 580,\n        \"content\": \"## 内容SEO审计报告  \\n本工作流由DataForSEO与谷歌搜索分析API驱动，可为最多1000页的网站生成全面内容审计报告，100%匹配您的品牌配色方案。  \\n\\n### 设置说明：  \\n1. 按照此[指南](https://docs.n8n.io/integrations/builtin/credentials/httprequest/)添加\\\"Basic Auth\\\"凭证。DataForSEO的API凭证可在此[获取](https://app.dataforseo.com/api-access)。注册时DataForSEO会赠送1美元试用金（约可生成2份500页报告，单份成本约0.2美元）。最后将Basic Auth账户分配给\\\"创建任务\\\"、\\\"检查任务状态\\\"、\\\"获取原始审计数据\\\"和\\\"获取源URL数据\\\"节点。  \\n2. 按照此[指南](https://docs.n8n.io/integrations/builtin/credentials/google/oauth-generic/)添加\\\"Google OAuth2 API\\\"凭证。将Google OAuth2账户分配给\\\"查询GSC API\\\"节点。  \\n3. 在\\\"设置字段\\\"节点更新以下信息：  \\n   - dfs_domain：待爬取的网站域名  \\n   - company_name：您的公司名称（将显示在最终报告中）  \\n   - company_website：公司官网URL（将显示在最终报告中）  \\n   - company_logo_url：公司Logo的URL（将显示在最终报告中）  \\n   - brand_primary_color：品牌主色调（用于定制报告配色）  \\n   - brand_secondary_color：品牌辅色调（用于定制报告配色）  \\n   - gsc_property_type：根据目标网站在谷歌搜索控制台的资产类型设为\\\"domain\\\"或\\\"url\\\"  \\n4. 启动工作流。完成后在末节点\\\"下载报告\\\"中获取HTML文件。  \\n\\n大功告成！您已获得一份完全匹配品牌视觉的完整内容审计报告，可直接通过邮件发送给客户。  \\n\\n**注意**：审计500页内容约需20分钟。如需定制本工作流，欢迎[联系我们](https://customworkflows.ai/work-with-us)。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"afd6a0aa-813c-4a3f-b844-ac1cf9f854c6\",\n      \"name\": \"Download Report\",\n      \"type\": \"n8n-nodes-base.convertToFile\",\n      \"position\": [\n        2500,\n        320\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"fileName\": \"={{ $('Set Fields').first().json.dfs_domain }}-content-audit-{{ new Date().toLocaleString('en-US', { month: 'long' }) + '-' + new Date().getFullYear() }}.html\"\n        },\n        \"operation\": \"toText\",\n        \"sourceProperty\": \"html\",\n        \"binaryPropertyName\": \"=content audit report\"\n      },\n      \"typeVersion\": 1.1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"c6db2f12-2e4f-4f40-acf9-6664c9feb45e\",\n  \"connections\": {\n    \"If\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get RAW Audit Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Wait\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Wait\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Task Status\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Wait1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Map GSC Data to URL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set Fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create Task\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create Task\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Task Status\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract URLs\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Map URLs Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Query GSC API\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Wait1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop Over Items\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge GSC Data with RAW Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Query GSC API\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop Over Items1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Build Report Structure\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Get Source URLs Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Task Status\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract 404 & 301\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get RAW Audit Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract URLs\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Map GSC Data to URL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate HTML Report\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Download Report\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Source URLs Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Map URLs Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Build Report Structure\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate HTML Report\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Start’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set Fields\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Merge GSC Data with RAW Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract 404 & 301\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}