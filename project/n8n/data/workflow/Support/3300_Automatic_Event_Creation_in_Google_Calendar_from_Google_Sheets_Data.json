{
  "title": "Automatic Event Creation in Google Calendar from Google Sheets Data",
  "url": "https://n8n.io/workflows/3300-automatic-event-creation-in-google-calendar-from-google-sheets-data/",
  "category": "Support",
  "category_url": "https://n8n.io/workflows/categories/support/?count=20",
  "author": "WeblineIndia",
  "publish_date": "Last update a month ago",
  "publish_date_absolute": "",
  "content": "",
  "workflow_json": "{\"id\":\"AvCMhDoSUAYXsrQX\",\"meta\":{\"instanceId\":\"14e4c77104722ab186539dfea5182e419aecc83d85963fe13f6de862c875ebfa\"},\"name\":\"Automate Event Creation in Google Calendar from Google Sheets\",\"tags\":[],\"nodes\":[{\"id\":\"b973046b-ff52-464e-8d34-fe57c5b1df7d\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-240,0],\"parameters\":{\"color\":6,\"width\":1200,\"height\":280,\"content\":\"# Automate Event Creation in Google Calendar from Google Sheets\\n\"},\"typeVersion\":1},{\"id\":\"e845b624-6c0a-4d31-aace-cc050f8613dc\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-240,300],\"parameters\":{\"color\":6,\"width\":1200,\"height\":280,\"content\":\"## Description \\nIn this workflow, we streamline the process of creating events in Google Calendar using event data stored in a Google Sheet through n8n automation. The workflow begins by retrieving the latest event entry from Google Sheets, ensuring that only the most recent event details are processed. Once the event data is fetched, a Function node is used to format the event date so that it aligns with Google Calendar's required format. This step ensures consistency and prevents any date-related errors.\\n\\nAfter formatting, the workflow sends the structured event details to Google Calendar, where the event is created with essential information such as the event title (summary), description, event date, and location. Additionally, the workflow allows customization by setting the event's status as either \\\"Busy\\\" or \\\"Available,\\\" helping attendees manage their schedules effectively. Furthermore, a background color can be assigned to the event to enhance visibility and categorization in the calendar.\\n\\nBy automating this process, the workflow eliminates the need for manual event creation, ensuring seamless synchronization between Google Sheets and Google Calendar. This approach improves efficiency, accuracy, and productivity, making event management effortless.\"},\"typeVersion\":1},{\"id\":\"60f2c8b8-a953-4fc1-8751-01d8b7924cb2\",\"name\":\"Event Date Formatter\",\"type\":\"n8n-nodes-base.code\",\"position\":[320,100],\"parameters\":{\"jsCode\":\"// Get the last item from the input data\\nconst lastEvent = items[items.length - 1].json;\\n\\n// Extract relevant fields\\nconst eventName = lastEvent[\\\"Event Name\\\"];\\nconst eventDescription = lastEvent[\\\"Event Description\\\"];\\nconst currentYear = new Date().getFullYear(); \\n// Get the current year\\nconst location = lastEvent[\\\"Location\\\"];\\n\\n// Ensure the date includes the year\\nconst formatDateWithYear = (dateStr) => {\\n    return dateStr.includes(currentYear) ? dateStr : `${dateStr} ${currentYear}`;\\n};\\n\\n// Format the start date\\nconst startDateString = formatDateWithYear(lastEvent[\\\"Event Start Date\\\"]); // Example: \\\"11 March 2024\\\"\\n\\n// Convert to JavaScript Date object\\nconst startDate = new Date(startDateString);\\n\\n// Convert to ISO format (YYYY-MM-DD)\\nconst formattedStartDate = startDate.toISOString().split(\\\"T\\\")[0]; // Extract only the date\\n\\n// Return the last event's formatted data\\nreturn [{\\n    json: {\\n        eventName,\\n        eventDescription,\\n        startDate: formattedStartDate,\\n      location: location,\\n    }\\n}];\\n\"},\"typeVersion\":2},{\"id\":\"e27e0d10-71bb-4d01-ba92-5fb8c3195422\",\"name\":\"New Event Entry Listener\",\"type\":\"n8n-nodes-base.googleSheetsTrigger\",\"position\":[-120,100],\"parameters\":{\"event\":\"rowAdded\",\"options\":{\"valueRender\":\"FORMULA\"},\"pollTimes\":{\"item\":[{\"mode\":\"everyMinute\"},{}]},\"sheetName\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gid=0\",\"cachedResultUrl\":\"https://docs.google.com/spreadsheets/d/1dKjIGmcnQgSEMVuWAAFVDaj_MCBFKBX8hCOk5OH2dK4/edit#gid=0\",\"cachedResultName\":\"Sheet1\"},\"documentId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"1dKjIGmcnQgSEMVuWAAFVDaj_MCBFKBX8hCOk5OH2dK4\",\"cachedResultUrl\":\"https://docs.google.com/spreadsheets/d/1dKjIGmcnQgSEMVuWAAFVDaj_MCBFKBX8hCOk5OH2dK4/edit?usp=drivesdk\",\"cachedResultName\":\"N8n Event List\"}},\"typeVersion\":1},{\"id\":\"04864602-bf6a-4def-9bc3-c5ab4b5c8336\",\"name\":\"Google Calendar Event Creator\",\"type\":\"n8n-nodes-base.googleCalendar\",\"position\":[700,100],\"parameters\":{\"end\":\"={{ $json.startDate }}\",\"start\":\"={{ $json.startDate }}\",\"calendar\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"\",\"cachedResultName\":\"\"},\"additionalFields\":{\"color\":\"3\",\"allday\":\"yes\",\"summary\":\"={{ $json.eventName }}\",\"location\":\"={{ $json.location }}\",\"showMeAs\":\"transparent\",\"description\":\"={{ $json.eventDescription }}\",\"guestsCanInviteOthers\":true}},\"typeVersion\":1.3}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"98bd043e-8dce-4eca-a22f-95ff61f07a1f\",\"connections\":{\"Event Date Formatter\":{\"main\":[[{\"node\":\"Google Calendar Event Creator\",\"type\":\"main\",\"index\":0}]]},\"New Event Entry Listener\":{\"main\":[[{\"node\":\"Event Date Formatter\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This workflow streamlines the process of creating events in Google Calendar using event data stored in a Google Sheet.\n\nThe process begins by retrieving the latest event entry from Google Sheets, ensuring only the most recent event details are processed. Once fetched, a Function node formats the event date to align with Google Calendar's required format—ensuring consistency and preventing date-related errors.\n\nAfter formatting, the structured event details are sent to Google Calendar, where an event is created with essential information such as the event title (summary), description, date, and location. Additionally, the workflow allows customization by setting the event's status as either \"Busy\" or \"Available,\" helping attendees manage their schedules. A background color can also be assigned for better visibility and categorization.\n\nBy automating this process, you eliminate the need for manual event creation, ensuring seamless synchronization between Google Sheets and Google Calendar. This improves efficiency, accuracy, and productivity, making event management effortless.\n\n## Prerequisites :\n\n**Before setting up this workflow, ensure the following:**\n\n  * You have an active Google account connected to Google Sheets and Google Calendar.\n  * The Google Sheets API and Google Calendar API are enabled in the Google Cloud Console.\n  * n8n has the necessary OAuth2 authentication configured for both Google Sheets and Google Calendar.\n  * Your Google Sheet has columns for event details (event name, description, location, date, etc.).\n\nEvent Name | Event Description | Event Start Date | Location  \n---|---|---|---  \nBirthday | Celebration | 27-Mar-1989 | City  \nAnniversary | Celebration | 10-Jun-2015 | City  \n  \n## Customization Options :\n\n  * Modify the Google Sheets trigger to track updates in specific columns.\n  * Adjust the data formatting function to support: \n    * Different date/time formats\n    * Time zone settings\n    * Custom event colors\n    * Attendee invitations\n\n\n\n## Steps :\n\n### Step 1: Add the Google Sheets Trigger Node\n\n  * Click \"Add Node\" and search for Google Sheets.\n  * Select \"Google Sheets Trigger\" and add it to the workflow.\n  * Authenticate using your Google account (select an existing account if already authenticated).\n  * Select the Spreadsheet and Sheet Name to monitor.\n  * Set the Trigger Event to \"Row Added\".\n  * Click \"Execute Node\" to test the connection.\n  * Click \"Save\".\n\n\n\n### Step 2: Process Data with Function Node\n\n  * Click \"Add Node\" and search for Function.\n  * Add the Function Node and connect it to the Google Sheets Trigger Node.\n  * In the function editor, write a script to extract and format data.\n  * Ensure the required fields (title, location, date) are properly structured.\n  * Click \"Execute Node\" to verify the formatted output.\n  * Click \"Save\".\n\n\n\n### Step 3: Add the Google Calendar Node\n\n  * Click \"Add Node\" and search for Google Calendar.\n  * Select \"Create Event\" operation.\n  * Authenticate with Google Calendar.\n  * Map the required fields \n    * Title\n    * Description\n    * Location\n    * Start time\n  * Optional: Set Event Status and Event Colors.\n  * Click \"Execute Node\" to test event creation.\n  * Click \"Save\".\n\n\n\n### Step 4: Final Steps\n\n  * Connect all nodes in sequence (Google Sheets Trigger → Function Node → Google Calendar Node).\n  * Test the workflow by adding a sample row in Google Sheets.\n  * Verify that the event is created in Google Calendar with the correct title, description, date, and location.\n\n\n\n## About WeblineIndia\n\nThis workflow was built by the [AI development](https://www.weblineindia.com/ai-development.html) team at WeblineIndia. We help businesses automate processes, reduce repetitive work, and scale faster. Need something custom? You can [hire AI developers](https://www.weblineindia.com/hire-ai-developers.html) to build workflows tailored to your needs.\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><p>This workflow streamlines the process of creating events in Google Calendar using event data stored in a Google Sheet.</p>\n<p>The process begins by retrieving the latest event entry from Google Sheets, ensuring only the most recent event details are processed. Once fetched, a Function node formats the event date to align with Google Calendar's required format—ensuring consistency and preventing date-related errors.</p>\n<p>After formatting, the structured event details are sent to Google Calendar, where an event is created with essential information such as the event title (summary), description, date, and location. Additionally, the workflow allows customization by setting the event's status as either \"Busy\" or \"Available,\" helping attendees manage their schedules. A background color can also be assigned for better visibility and categorization.</p>\n<p>By automating this process, you eliminate the need for manual event creation, ensuring seamless synchronization between Google Sheets and Google Calendar. This improves efficiency, accuracy, and productivity, making event management effortless.</p>\n<h2>Prerequisites :</h2>\n<p><strong>Before setting up this workflow, ensure the following:</strong></p>\n<ul>\n<li>You have an active Google account connected to Google Sheets and Google Calendar.</li>\n<li>The Google Sheets API and Google Calendar API are enabled in the Google Cloud Console.</li>\n<li>n8n has the necessary OAuth2 authentication configured for both Google Sheets and Google Calendar.</li>\n<li>Your Google Sheet has columns for event details (event name, description, location, date, etc.).</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Event Name</th>\n<th>Event Description</th>\n<th>Event Start Date</th>\n<th>Location</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Birthday</td>\n<td>Celebration</td>\n<td>27-Mar-1989</td>\n<td>City</td>\n</tr>\n<tr>\n<td>Anniversary</td>\n<td>Celebration</td>\n<td>10-Jun-2015</td>\n<td>City</td>\n</tr>\n</tbody>\n</table>\n<h2>Customization Options :</h2>\n<ul>\n<li>Modify the Google Sheets trigger to track updates in specific columns.</li>\n<li>Adjust the data formatting function to support:\n<ul>\n<li>Different date/time formats</li>\n<li>Time zone settings</li>\n<li>Custom event colors</li>\n<li>Attendee invitations</li>\n</ul>\n</li>\n</ul>\n<h2>Steps :</h2>\n<h3>Step 1: Add the Google Sheets Trigger Node</h3>\n<ul>\n<li>Click \"Add Node\" and search for Google Sheets.</li>\n<li>Select \"Google Sheets Trigger\" and add it to the workflow.</li>\n<li>Authenticate using your Google account (select an existing account if already authenticated).</li>\n<li>Select the Spreadsheet and Sheet Name to monitor.</li>\n<li>Set the Trigger Event to \"Row Added\".</li>\n<li>Click \"Execute Node\" to test the connection.</li>\n<li>Click \"Save\".</li>\n</ul>\n<h3>Step 2: Process Data with Function Node</h3>\n<ul>\n<li>Click \"Add Node\" and search for Function.</li>\n<li>Add the Function Node and connect it to the Google Sheets Trigger Node.</li>\n<li>In the function editor, write a script to extract and format data.</li>\n<li>Ensure the required fields (title, location, date) are properly structured.</li>\n<li>Click \"Execute Node\" to verify the formatted output.</li>\n<li>Click \"Save\".</li>\n</ul>\n<h3>Step 3: Add the Google Calendar Node</h3>\n<ul>\n<li>Click \"Add Node\" and search for Google Calendar.</li>\n<li>Select \"Create Event\" operation.</li>\n<li>Authenticate with Google Calendar.</li>\n<li>Map the required fields\n<ul>\n<li>Title</li>\n<li>Description</li>\n<li>Location</li>\n<li>Start time</li>\n</ul>\n</li>\n<li>Optional: Set Event Status and Event Colors.</li>\n<li>Click \"Execute Node\" to test event creation.</li>\n<li>Click \"Save\".</li>\n</ul>\n<h3>Step 4: Final Steps</h3>\n<ul>\n<li>Connect all nodes in sequence (Google Sheets Trigger → Function Node → Google Calendar Node).</li>\n<li>Test the workflow by adding a sample row in Google Sheets.</li>\n<li>Verify that the event is created in Google Calendar with the correct title, description, date, and location.</li>\n</ul>\n<h2>About WeblineIndia</h2>\n<p>This workflow was built by the <a href=\"https://www.weblineindia.com/ai-development.html\" rel=\"ugc nofollow\" target=\"_blank\">AI development</a> team at WeblineIndia. We help businesses automate processes, reduce repetitive work, and scale faster. Need something custom? You can <a href=\"https://www.weblineindia.com/hire-ai-developers.html\" rel=\"ugc nofollow\" target=\"_blank\">hire AI developers</a> to build workflows tailored to your needs.</p>\n</div><!--]-->",
  "readme_zh": "该工作流简化了利用Google表格中存储的活动数据在Google日历上创建事件的流程。\n\n流程首先从Google表格获取最新活动条目，确保仅处理最新事件详情。获取数据后，通过函数节点将活动日期格式化为Google日历要求的格式，确保一致性并避免日期错误。\n\n格式化完成后，结构化的事件详情将发送至Google日历，创建包含标题（摘要）、描述、日期和地点等核心信息的事件。工作流还支持将事件状态设为\"忙碌\"或\"空闲\"以便参与者管理日程，并可设置背景颜色提升可视化分类效果。\n\n通过自动化这一流程，您无需手动创建事件，即可实现Google表格与Google日历的无缝同步，从而提升效率、准确性和生产力，让活动管理变得轻松自如。\n\n## 前提条件\n\n**配置工作流前请确保：**\n* 已绑定Google表格和日历的有效Google账号\n* 已在Google云控制台启用Google Sheets API和Google Calendar API\n* n8n已完成Google表格和日历的OAuth2认证配置\n* Google表格已包含事件名称、描述、地点、日期等字段列\n\n事件名称 | 事件描述 | 开始日期 | 地点  \n---|---|---|---  \n生日 | 庆祝活动 | 1989年3月27日 | 城市  \n纪念日 | 庆祝活动 | 2015年6月10日 | 城市  \n\n## 定制选项\n* 调整Google表格触发器以监控特定列更新\n* 修改数据格式化函数以支持：\n  * 不同日期/时间格式\n  * 时区设置\n  * 自定义事件颜色\n  * 参与者邀请功能\n\n## 操作步骤\n\n### 第一步：添加Google表格触发器节点\n* 点击\"添加节点\"搜索Google表格\n* 选择\"Google表格触发器\"并添加至工作流\n* 使用Google账号认证（如已认证可直接选择现有账号）\n* 选择要监控的电子表格和工作表名称\n* 设置触发事件为\"新增行\"\n* 点击\"执行节点\"测试连接\n* 点击\"保存\"\n\n### 第二步：使用函数节点处理数据\n* 点击\"添加节点\"搜索函数\n* 添加函数节点并连接至Google表格触发器\n* 在函数编辑器中编写数据提取和格式化脚本\n* 确保标题、地点、日期等必填字段格式正确\n* 点击\"执行节点\"验证格式化输出\n* 点击\"保存\"\n\n### 第三步：添加Google日历节点\n* 点击\"添加节点\"搜索Google日历\n* 选择\"创建事件\"操作\n* 完成Google日历认证\n* 映射必填字段：\n  * 标题\n  * 描述\n  * 地点\n  * 开始时间\n* 可选：设置事件状态和颜色\n* 点击\"执行节点\"测试事件创建\n* 点击\"保存\"\n\n### 第四步：最终配置\n* 按顺序连接所有节点（Google表格触发器→函数节点→Google日历节点）\n* 通过在Google表格添加测试行来验证工作流\n* 确认日历中生成的事件标题、描述、日期和地点准确无误\n\n## 关于WeblineIndia\n本工作流由WeblineIndia的[AI开发团队](https://www.weblineindia.com/ai-development.html)构建。我们致力于帮助企业实现流程自动化、减少重复工作并加速业务扩展。如需定制服务，可[雇佣AI开发人员](https://www.weblineindia.com/hire-ai-developers.html)构建符合特定需求的工作流。",
  "title_zh": "从Google表格数据自动创建Google日历事件",
  "publish_date_zh": "上次更新于一个月前",
  "workflow_json_zh": "{\n  \"id\": \"AvCMhDoSUAYXsrQX\",\n  \"meta\": {\n    \"instanceId\": \"14e4c77104722ab186539dfea5182e419aecc83d85963fe13f6de862c875ebfa\"\n  },\n  \"name\": \"Automate Event Creation in Google Calendar from Google Sheets\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"b973046b-ff52-464e-8d34-fe57c5b1df7d\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -240,\n        0\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 1200,\n        \"height\": 280,\n        \"content\": \"# 从Google表格自动在Google日历中创建活动\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e845b624-6c0a-4d31-aace-cc050f8613dc\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -240,\n        300\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 1200,\n        \"height\": 280,\n        \"content\": \"## 描述  \\n在本工作流中，我们通过n8n自动化工具简化了利用Google表格中存储的事件数据在Google日历上创建活动的流程。工作流首先从Google表格中获取最新的事件条目，确保仅处理最近更新的活动详情。获取事件数据后，通过函数节点对活动日期进行格式化，使其符合Google日历要求的格式标准。这一步骤保证了数据一致性，避免因日期格式引发的错误。\\n\\n完成格式化后，工作流将结构化的事件详情发送至Google日历，创建包含标题（摘要）、描述、活动日期和地点等核心信息的日程。用户还可自定义活动状态为\\\"忙碌\\\"或\\\"空闲\\\"，帮助参与者高效管理行程。此外，可为事件分配背景色以增强日历中的视觉区分度和分类管理。\\n\\n该自动化流程彻底消除了手动创建活动的需求，实现了Google表格与Google日历间的无缝同步。这种处理方式显著提升了效率、准确性和生产力，让活动管理变得轻松自如。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"60f2c8b8-a953-4fc1-8751-01d8b7924cb2\",\n      \"name\": \"Event Date Formatter\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        320,\n        100\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Get the last item from the input data\\nconst lastEvent = items[items.length - 1].json;\\n\\n// Extract relevant fields\\nconst eventName = lastEvent[\\\"Event Name\\\"];\\nconst eventDescription = lastEvent[\\\"Event Description\\\"];\\nconst currentYear = new Date().getFullYear(); \\n// Get the current year\\nconst location = lastEvent[\\\"Location\\\"];\\n\\n// Ensure the date includes the year\\nconst formatDateWithYear = (dateStr) => {\\n    return dateStr.includes(currentYear) ? dateStr : `${dateStr} ${currentYear}`;\\n};\\n\\n// Format the start date\\nconst startDateString = formatDateWithYear(lastEvent[\\\"Event Start Date\\\"]); // Example: \\\"11 March 2024\\\"\\n\\n// Convert to JavaScript Date object\\nconst startDate = new Date(startDateString);\\n\\n// Convert to ISO format (YYYY-MM-DD)\\nconst formattedStartDate = startDate.toISOString().split(\\\"T\\\")[0]; // Extract only the date\\n\\n// Return the last event's formatted data\\nreturn [{\\n    json: {\\n        eventName,\\n        eventDescription,\\n        startDate: formattedStartDate,\\n      location: location,\\n    }\\n}];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"e27e0d10-71bb-4d01-ba92-5fb8c3195422\",\n      \"name\": \"New Event Entry Listener\",\n      \"type\": \"n8n-nodes-base.googleSheetsTrigger\",\n      \"position\": [\n        -120,\n        100\n      ],\n      \"parameters\": {\n        \"event\": \"rowAdded\",\n        \"options\": {\n          \"valueRender\": \"FORMULA\"\n        },\n        \"pollTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"everyMinute\"\n            },\n            {}\n          ]\n        },\n        \"sheetName\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gid=0\",\n          \"cachedResultUrl\": \"https://docs.google.com/spreadsheets/d/1dKjIGmcnQgSEMVuWAAFVDaj_MCBFKBX8hCOk5OH2dK4/edit#gid=0\",\n          \"cachedResultName\": \"Sheet1\"\n        },\n        \"documentId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"1dKjIGmcnQgSEMVuWAAFVDaj_MCBFKBX8hCOk5OH2dK4\",\n          \"cachedResultUrl\": \"https://docs.google.com/spreadsheets/d/1dKjIGmcnQgSEMVuWAAFVDaj_MCBFKBX8hCOk5OH2dK4/edit?usp=drivesdk\",\n          \"cachedResultName\": \"N8n Event List\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"04864602-bf6a-4def-9bc3-c5ab4b5c8336\",\n      \"name\": \"Google Calendar Event Creator\",\n      \"type\": \"n8n-nodes-base.googleCalendar\",\n      \"position\": [\n        700,\n        100\n      ],\n      \"parameters\": {\n        \"end\": \"={{ $json.startDate }}\",\n        \"start\": \"={{ $json.startDate }}\",\n        \"calendar\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"\",\n          \"cachedResultName\": \"\"\n        },\n        \"additionalFields\": {\n          \"color\": \"3\",\n          \"allday\": \"yes\",\n          \"summary\": \"={{ $json.eventName }}\",\n          \"location\": \"={{ $json.location }}\",\n          \"showMeAs\": \"transparent\",\n          \"description\": \"={{ $json.eventDescription }}\",\n          \"guestsCanInviteOthers\": true\n        }\n      },\n      \"typeVersion\": 1.3\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"98bd043e-8dce-4eca-a22f-95ff61f07a1f\",\n  \"connections\": {\n    \"Event Date Formatter\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Google Calendar Event Creator\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"New Event Entry Listener\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Event Date Formatter\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}