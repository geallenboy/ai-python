{
  "title": "AI-Powered Social Media Amplifier",
  "url": "https://n8n.io/workflows/2681-ai-powered-social-media-amplifier/",
  "category": "Marketing",
  "category_url": "https://n8n.io/workflows/categories/marketing/?sort=createdAt:desc",
  "author": "Mudit Juneja",
  "publish_date": "Last update 4 months ago",
  "publish_date_absolute": "2025-01-19",
  "content": "",
  "workflow_json": "{\"id\":\"ZeSJSbwXI593H1Qj\",\"meta\":{\"instanceId\":\"8e1a7e3413df437923cda0e92c098469371d84f7001856e525beaff17be8b941\",\"templateCredsSetupCompleted\":true},\"name\":\"Social Media AI Agent - Telegram\",\"tags\":[],\"nodes\":[{\"id\":\"814303e0-5fe9-474e-a4ed-e4a728fd4acf\",\"name\":\"Crawl HN Home\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-1540,1640],\"parameters\":{\"url\":\"https://news.ycombinator.com/\",\"options\":{\"response\":{\"response\":{\"neverError\":true,\"fullResponse\":true}}}},\"executeOnce\":true,\"typeVersion\":4.2,\"alwaysOutputData\":true},{\"id\":\"32e20b1d-b3f1-4ed2-acbf-4d5bd56b0d8b\",\"name\":\"Extract Meta\",\"type\":\"n8n-nodes-base.code\",\"position\":[-1260,1720],\"parameters\":{\"language\":\"python\",\"pythonCode\":\"# Import necessary modules\\nimport asyncio\\nimport micropip\\n\\n# Define an asynchronous function to install packages\\nasync def install_packages():\\n    await micropip.install(\\\"beautifulsoup4\\\")\\n    await micropip.install(\\\"simplejson\\\")\\n\\n# Run the asynchronous package installation\\nasyncio.get_event_loop().run_until_complete(install_packages())\\n\\n# Now, import the installed packages\\nimport simplejson as json\\nfrom bs4 import BeautifulSoup\\n\\n# Retrieve the HTML content from the first item in the input\\n# Assuming n8n passes data as a list of items, each with a 'json' key\\nhtml_content = items[0].get('json', {}).get('data', '')\\n\\n# Initialize BeautifulSoup with the HTML content\\nsoup = BeautifulSoup(html_content, 'html.parser')\\n\\n# Initialize a list to store metadata of GitHub posts\\ngithub_posts = []\\n\\n# Find all 'tr' elements with class 'athing submission'\\nposts = soup.find_all('tr', class_='athing submission')\\n\\nfor post in posts:\\n    post_id = post.get('id')\\n    title_line = post.find('span', class_='titleline')\\n    if not title_line:\\n        continue  # Skip if titleline is not found\\n\\n    # Extract the title and URL\\n    title_tag = title_line.find('a')\\n    if not title_tag:\\n        continue  # Skip if title tag is not found\\n\\n    title = title_tag.get_text(strip=True)\\n    url = title_tag.get('href', '')\\n\\n    # Check if the URL is a GitHub link\\n    if 'github.com' not in url.lower():\\n        continue  # Skip if not a GitHub link\\n\\n    # Extract the site domain (e.g., github.com/username/repo)\\n    site_bit = title_line.find('span', class_='sitebit comhead')\\n    site = site_bit.find('span', class_='sitestr').get_text(strip=True) if site_bit else ''\\n\\n    # The subtext is in the next 'tr' element\\n    subtext_tr = post.find_next_sibling('tr')\\n    if not subtext_tr:\\n        continue  # Skip if subtext row is not found\\n\\n    subtext_td = subtext_tr.find('td', class_='subtext')\\n    if not subtext_td:\\n        continue  # Skip if subtext td is not found\\n\\n    # Extract score\\n    score_span = subtext_td.find('span', class_='score')\\n    score = score_span.get_text(strip=True) if score_span else '0 points'\\n\\n    # Extract author\\n    author_a = subtext_td.find('a', class_='hnuser')\\n    author = author_a.get_text(strip=True) if author_a else 'unknown'\\n\\n    # Extract age\\n    age_span = subtext_td.find('span', class_='age')\\n    age_a = age_span.find('a') if age_span else None\\n    age = age_a.get_text(strip=True) if age_a else 'unknown'\\n\\n    # Extract comments\\n    comments_a = subtext_td.find_all('a')[-1] if subtext_td.find_all('a') else None\\n    comments_text = comments_a.get_text(strip=True) if comments_a else '0 comments'\\n\\n    # Construct the Hacker News URL\\n    hn_url = f\\\"https://news.ycombinator.com/item?id={post_id}\\\"\\n\\n    # Compile the metadata\\n    post_metadata = {\\n        'Post': post_id,\\n        'title': title,\\n        'url': url,\\n        'site': site,\\n        'score': score,\\n        'author': author,\\n        'age': age,\\n        'comments': comments_text,\\n        'hn_url': hn_url\\n    }\\n\\n    # Append to the list of GitHub posts\\n    github_posts.append(post_metadata)\\n\\n# Prepare the output for n8n\\noutput = [{'json': post} for post in github_posts]\\n\\n# Return the output\\nreturn output\\n\"},\"executeOnce\":true,\"typeVersion\":2,\"alwaysOutputData\":true},{\"id\":\"b54cf663-b823-4613-a812-764942b95b9d\",\"name\":\"Filter Unposted Items\",\"type\":\"n8n-nodes-base.code\",\"position\":[-680,1640],\"parameters\":{\"jsCode\":\"const items = [];\\n\\n// Step 1: Collect all Post IDs from input1 items (those with 'id')\\nconst processedPosts = new Set(\\n  $input.all()\\n    .filter(item => item.json.id)\\n    .map(item => item.json.Post)\\n);\\n\\n// Step 2: Iterate over all items and filter out duplicates\\nfor (const item of $input.all()) {\\n  \\n  // Only process items without 'id' (input2 items)\\n  if(!item.json.id){\\n    \\n    // Check if the Post ID is already processed\\n    if(!processedPosts.has(item.json.Post) && item.json.Post!=undefined){\\n      items.push(item);\\n    }\\n  }\\n}\\n\\nreturn items;\\n\"},\"typeVersion\":2},{\"id\":\"d7ac7121-8da7-4e45-9b74-daf07fbf15fb\",\"name\":\"Visit GH Page\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-420,1420],\"parameters\":{\"url\":\"={{ $json.url }}\",\"options\":{}},\"typeVersion\":4.2},{\"id\":\"f156ca8e-7963-42b9-9612-9ab5efc53be4\",\"name\":\"Convert HTML To Markdown\",\"type\":\"n8n-nodes-base.markdown\",\"position\":[-240,1700],\"parameters\":{\"html\":\"={{ $json.data }}\",\"options\":{}},\"typeVersion\":1,\"alwaysOutputData\":true},{\"id\":\"86221ed0-29fa-4775-ba36-8ffdf614977c\",\"name\":\"Filter Errored\",\"type\":\"n8n-nodes-base.filter\",\"position\":[380,1440],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"7776cb97-e02d-418e-a168-612bf92d4160\",\"operator\":{\"type\":\"string\",\"operation\":\"empty\",\"singleValue\":true},\"leftValue\":\"={{ $json.error }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"f08c4f61-17a5-4899-ab3d-4e3ff5d1b8b7\",\"name\":\"No Operation, do nothing\",\"type\":\"n8n-nodes-base.noOp\",\"position\":[1760,1540],\"parameters\":{},\"typeVersion\":1},{\"id\":\"48856b3b-a951-4e7f-a0b8-410a71e9b0a7\",\"name\":\"Update X Status\",\"type\":\"n8n-nodes-base.airtable\",\"position\":[1500,1400],\"parameters\":{\"base\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"app7fh2kmMzPKS4RZ\",\"cachedResultUrl\":\"https://airtable.com/app7fh2kmMzPKS4RZ\",\"cachedResultName\":\"Twitter Agent\"},\"table\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"tblf0cODJFdvDj7vU\",\"cachedResultUrl\":\"https://airtable.com/app7fh2kmMzPKS4RZ/tblf0cODJFdvDj7vU\",\"cachedResultName\":\"My Tweets\"},\"columns\":{\"value\":{\"id\":\"={{ $('Create Item').item.json.id }}\",\"TDone\":true},\"schema\":[{\"id\":\"id\",\"type\":\"string\",\"display\":true,\"removed\":false,\"readOnly\":true,\"required\":false,\"displayName\":\"id\",\"defaultMatch\":true},{\"id\":\"Post\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":false,\"required\":false,\"displayName\":\"Post\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Title\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":false,\"required\":false,\"displayName\":\"Title\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Url\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":false,\"required\":false,\"displayName\":\"Url\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Tweet\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":false,\"required\":false,\"displayName\":\"Tweet\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"LinkedIn\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":false,\"required\":false,\"displayName\":\"LinkedIn\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Date\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":true,\"required\":false,\"displayName\":\"Date\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Last Modified\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":true,\"required\":false,\"displayName\":\"Last Modified\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"TDone\",\"type\":\"boolean\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"TDone\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"LDone\",\"type\":\"boolean\",\"display\":true,\"removed\":true,\"readOnly\":false,\"required\":false,\"displayName\":\"LDone\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[\"id\"]},\"options\":{\"typecast\":true},\"operation\":\"update\"},\"credentials\":{\"airtableTokenApi\":{\"id\":\"BxLldDZTAZvuWVbr\",\"name\":\"Airtable Personal Access Token account\"}},\"typeVersion\":2.1},{\"id\":\"c31bb906-2a0d-406a-a7cd-6fc4adfcb67b\",\"name\":\"LinkedIn\",\"type\":\"n8n-nodes-base.linkedIn\",\"position\":[1200,1820],\"parameters\":{\"text\":\"={{ $('Filter Errored').item.json.message.content.linkedin }}\",\"person\":\"afi4Hy9wlI\",\"additionalFields\":{}},\"credentials\":{\"linkedInOAuth2Api\":{\"id\":\"S7G2oyLAmzhWuYFQ\",\"name\":\"LinkedIn account\"}},\"typeVersion\":1},{\"id\":\"4aab4cc2-4a51-432a-aa21-ba469c027ac6\",\"name\":\"Update L Status\",\"type\":\"n8n-nodes-base.airtable\",\"position\":[1520,1680],\"parameters\":{\"base\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"app7fh2kmMzPKS4RZ\",\"cachedResultUrl\":\"https://airtable.com/app7fh2kmMzPKS4RZ\",\"cachedResultName\":\"Twitter Agent\"},\"table\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"tblf0cODJFdvDj7vU\",\"cachedResultUrl\":\"https://airtable.com/app7fh2kmMzPKS4RZ/tblf0cODJFdvDj7vU\",\"cachedResultName\":\"My Tweets\"},\"columns\":{\"value\":{\"id\":\"={{ $('Create Item').item.json.id }}\",\"LDone\":true},\"schema\":[{\"id\":\"id\",\"type\":\"string\",\"display\":true,\"removed\":false,\"readOnly\":true,\"required\":false,\"displayName\":\"id\",\"defaultMatch\":true},{\"id\":\"Post\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":false,\"required\":false,\"displayName\":\"Post\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Title\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":false,\"required\":false,\"displayName\":\"Title\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Url\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":false,\"required\":false,\"displayName\":\"Url\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Tweet\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":false,\"required\":false,\"displayName\":\"Tweet\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"LinkedIn\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":false,\"required\":false,\"displayName\":\"LinkedIn\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Date\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":true,\"required\":false,\"displayName\":\"Date\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Last Modified\",\"type\":\"string\",\"display\":true,\"removed\":true,\"readOnly\":true,\"required\":false,\"displayName\":\"Last Modified\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"TDone\",\"type\":\"boolean\",\"display\":true,\"removed\":true,\"readOnly\":false,\"required\":false,\"displayName\":\"TDone\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"LDone\",\"type\":\"boolean\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"LDone\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[\"id\"]},\"options\":{\"typecast\":true},\"operation\":\"update\"},\"credentials\":{\"airtableTokenApi\":{\"id\":\"BxLldDZTAZvuWVbr\",\"name\":\"Airtable Personal Access Token account\"}},\"typeVersion\":2.1},{\"id\":\"72dd9714-c11d-4417-8710-89e416ac44c9\",\"name\":\"Search Item\",\"type\":\"n8n-nodes-base.airtable\",\"position\":[-1100,1240],\"parameters\":{\"base\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"app7fh2kmMzPKS4RZ\",\"cachedResultUrl\":\"https://airtable.com/app7fh2kmMzPKS4RZ\",\"cachedResultName\":\"Twitter Agent\"},\"table\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"tblf0cODJFdvDj7vU\",\"cachedResultUrl\":\"https://airtable.com/app7fh2kmMzPKS4RZ/tblf0cODJFdvDj7vU\",\"cachedResultName\":\"My Tweets\"},\"options\":{\"fields\":[\"Title\",\"Url\",\"Tweet\",\"Date\",\"Post\"]},\"operation\":\"search\",\"filterByFormula\":\"={Post}= {{ $json.Post }}\"},\"credentials\":{\"airtableTokenApi\":{\"id\":\"BxLldDZTAZvuWVbr\",\"name\":\"Airtable Personal Access Token account\"}},\"typeVersion\":2.1,\"alwaysOutputData\":true},{\"id\":\"f89fbada-0e53-44f0-a09b-119869fabd10\",\"name\":\"Create Item\",\"type\":\"n8n-nodes-base.airtable\",\"position\":[580,1660],\"parameters\":{\"base\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"app7fh2kmMzPKS4RZ\",\"cachedResultUrl\":\"https://airtable.com/app7fh2kmMzPKS4RZ\",\"cachedResultName\":\"Twitter Agent\"},\"table\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"tblf0cODJFdvDj7vU\",\"cachedResultUrl\":\"https://airtable.com/app7fh2kmMzPKS4RZ/tblf0cODJFdvDj7vU\",\"cachedResultName\":\"My Tweets\"},\"columns\":{\"value\":{\"Url\":\"={{ $('Filter Unposted Items').item.json.url }}\",\"Post\":\"={{ $('Filter Unposted Items').item.json.Post }}\",\"Title\":\"={{ $('Filter Unposted Items').item.json.title }}\",\"Tweet\":\"={{ $json.message.content.twitter }}\",\"LinkedIn\":\"={{ $json.message.content.linkedin }}\"},\"schema\":[{\"id\":\"Post\",\"type\":\"string\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Post\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Title\",\"type\":\"string\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Title\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Url\",\"type\":\"string\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Url\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Tweet\",\"type\":\"string\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"Tweet\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"LinkedIn\",\"type\":\"string\",\"display\":true,\"removed\":false,\"readOnly\":false,\"required\":false,\"displayName\":\"LinkedIn\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"Date\",\"type\":\"string\",\"display\":true,\"removed\":false,\"readOnly\":true,\"required\":false,\"displayName\":\"Date\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[]},\"options\":{},\"operation\":\"create\"},\"credentials\":{\"airtableTokenApi\":{\"id\":\"BxLldDZTAZvuWVbr\",\"name\":\"Airtable Personal Access Token account\"}},\"typeVersion\":2.1},{\"id\":\"51a2c3d3-3e75-4375-b2b6-4bb86fa71855\",\"name\":\"X\",\"type\":\"n8n-nodes-base.twitter\",\"onError\":\"continueRegularOutput\",\"position\":[1180,1380],\"parameters\":{\"text\":\"={{ $('Filter Errored').item.json.message.content.twitter }}\",\"additionalFields\":{}},\"credentials\":{\"twitterOAuth2Api\":{\"id\":\"YQyS9lQTpZtZkefS\",\"name\":\"X account\"}},\"executeOnce\":false,\"typeVersion\":2},{\"id\":\"58869c5b-9fb2-4f76-8788-68056cda45b0\",\"name\":\"Validate Generate Content\",\"type\":\"n8n-nodes-base.code\",\"onError\":\"continueRegularOutput\",\"position\":[180,1680],\"parameters\":{\"mode\":\"runOnceForEachItem\",\"jsCode\":\"if ($json.message.content.twitter && $json.message.content.linkedin) {\\n  \\n  return $json;\\n} else {\\n\\n  const parsedContent = JSON.parse($json.message.content);\\n  if ($json.message.content.twitter && $json.message.content.linkedin) {\\n    return parsedContent;\\n  }\\n\\n  console.log(\\\"Invalid formatting\\\")\\n  return {}\\n}\"},\"typeVersion\":2},{\"id\":\"527fd640-8bc8-4043-92a6-52fbea8de63f\",\"name\":\"Schedule Trigger\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[-1780,1640],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"hours\",\"hoursInterval\":6}]}},\"typeVersion\":1.2},{\"id\":\"f00c1de5-d5bd-4d78-8717-d26dd739adc7\",\"name\":\"Merge\",\"type\":\"n8n-nodes-base.merge\",\"position\":[-840,1420],\"parameters\":{},\"typeVersion\":3,\"alwaysOutputData\":true},{\"id\":\"3529fba4-173c-4378-ae69-43a3bae0813f\",\"name\":\"Generate Content\",\"type\":\"@n8n/n8n-nodes-langchain.openAi\",\"position\":[-120,1440],\"parameters\":{\"modelId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gpt-4o-mini\",\"cachedResultName\":\"GPT-4O-MINI\"},\"options\":{},\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are an AI-powered social media assistant specialized in crafting short-form, engaging posts for Twitter and LinkedIn. Your tone should blend the enthusiasm of a Tech Evangelist with the narrative depth of a Storyteller. The goal is to highlight technological and open-source projects in a friendly, forward-thinking manner, connecting them to real-world use cases. \\n\\nGuidelines:\\n1. Output must be in JSON with separate fields for “twitter” and “linkedin.”\\n2. Do not include emojis or marketing buzzwords (“cutting-edge,” “disruptive,” etc.).\\n3. Write naturally and concisely. Avoid overly formal or robotic language.\\n4. Twitter posts must be under 280 characters (including spaces and URL).\\n5. LinkedIn posts should be slightly longer, yet still succinct, and focus on storytelling and real-world applications.\\n6. Provide a single call-to-action in each post.\\n7. Do not imply ownership of the project unless explicitly stated.\\n8. Maintain a professional yet approachable tone in both outputs.\\n\"},{\"content\":\"=Using the following details, generate two posts—one for Twitter and one for LinkedIn—incorporating an enthusiastic yet narrative-driven style:\\n\\nTitle: {{ $('Filter Unposted Items').item.json.title }}\\nDetails in markdown: {{ $json.data }}\\nRepository Link: {{ $('Filter Unposted Items').item.json.url }}  (this is the actual link you want to be inserted)\\n\\nConstraints:\\n- No emojis.\\n- Keep the Twitter post under 280 characters (including the link).\\n- Use a friendly, forward-thinking tone that weaves in a short narrative where possible.\\n- Highlight how the project solves a real problem or benefits the user.\\n- End each post with one clear CTA (e.g., “Check it out!” or “Learn more.”).\\n- **Ensure the tone is neutral and does not imply personal involvement** (e.g., avoid phrases like \\\"my journey\\\" or \\\"I found it fascinating\\\").\\n- **LinkedIn post should be more detailed**: Provide context, explain the key features, highlight how it can be useful to different audiences, and elaborate on the problem it solves or the impact it can have.\\n- Output your response in JSON with the structure:\\n```json\\n{\\n  \\\"twitter\\\": \\\"Your Twitter post here\\\",\\n  \\\"linkedin\\\": \\\"Your LinkedIn post here\\\"\\n}\\n\"}]},\"jsonOutput\":true},\"credentials\":{\"openAiApi\":{\"id\":\"IfJo4dG8AUORk6f0\",\"name\":\"OpenAi account\"}},\"typeVersion\":1.7,\"alwaysOutputData\":true},{\"id\":\"2dfd7849-877c-4bd3-b248-94140a1fe209\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-320,960],\"parameters\":{\"width\":619.8433261701165,\"height\":97.20332107671479,\"content\":\"Automate the curation and sharing of trending GitHub discussions from Hacker News to Twitter and LinkedIn. This workflow leverages AI to generate engaging posts, streamlining your social media content creation and distribution.\\n\\n\"},\"typeVersion\":1},{\"id\":\"20704a99-1234-46dc-b8c8-860b051b3b85\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1620,1520],\"parameters\":{\"color\":5,\"width\":524.8824946275869,\"height\":420.37647358435385,\"content\":\"I crawl Hacker News and extract Github links.\"},\"typeVersion\":1},{\"id\":\"5cfa2c30-6c88-429a-8b5f-0034d2352cc2\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-480,1280],\"parameters\":{\"color\":5,\"width\":828.144505037599,\"height\":670.031562962293,\"content\":\"This is where the magic happens. I use the Github url extracted earlier and visit Github page to get more insights in the project being shared. Then I ask Chat GPT very nicely to help me get a Tweet and a LinkedIn post\"},\"typeVersion\":1},{\"id\":\"caec3df6-ddcc-4959-94e1-18163cf3128f\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1100,1280],\"parameters\":{\"color\":5,\"width\":285.9487894560623,\"height\":751.2077576680031,\"content\":\"One last magic trick, Send the generated Tweet and the post to the respective platforms.\"},\"typeVersion\":1},{\"id\":\"89c8472d-3329-4f94-a656-2539e061eeb0\",\"name\":\"Ping Me\",\"type\":\"n8n-nodes-base.telegram\",\"position\":[720,1420],\"parameters\":{\"text\":\"=Hi There, here is your readymade tweet - \\n\\n {{ $json.fields.Tweet }}\\n\\nAnd your readymade LinkedIn post -\\n\\n {{ $json.fields.LinkedIn }}\\n\\n\",\"chatId\":\"1297549992\",\"additionalFields\":{}},\"credentials\":{\"telegramApi\":{\"id\":\"1RZApQ3BwJxFn9jp\",\"name\":\"Telegram account\"}},\"typeVersion\":1.2},{\"id\":\"b1444e6d-0cab-4082-af42-a8decc97d9b4\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[640,1300],\"parameters\":{\"color\":5,\"width\":264.5060210432334,\"height\":307.03612625939974,\"content\":\"Just pinging the owner that something is about to be posted and wait for 5 mins before final posting.\"},\"typeVersion\":1},{\"id\":\"01c2f7ff-ff6c-4a60-9581-f8c5f3985792\",\"name\":\"Wait for 5 mins before posting\",\"type\":\"n8n-nodes-base.wait\",\"position\":[880,1660],\"webhookId\":\"0c7ee388-30cf-4a99-9bb0-0fd85171c794\",\"parameters\":{\"unit\":\"minutes\"},\"typeVersion\":1.1},{\"id\":\"909c7e7d-ea84-4612-a322-b1fa889b2efb\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-920,1380],\"parameters\":{\"width\":400.8207630962184,\"height\":392.80719991071624,\"content\":\"CHORE\"},\"typeVersion\":1},{\"id\":\"04ab5b63-8def-4d49-9360-596261eb051c\",\"name\":\"Sticky Note6\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1140,1140],\"parameters\":{\"color\":5,\"width\":195.58283685913963,\"height\":285.5933578465706,\"content\":\"Make sure we don't post the same content again.\"},\"typeVersion\":1}],\"active\":true,\"pinData\":{\"Schedule Trigger\":[{\"json\":{\"Hour\":\"18\",\"Year\":\"2024\",\"Month\":\"December\",\"Minute\":\"00\",\"Second\":\"17\",\"Timezone\":\"America/New_York (UTC-05:00)\",\"timestamp\":\"2024-12-27T18:00:17.035-05:00\",\"Day of week\":\"Friday\",\"Day of month\":\"27\",\"Readable date\":\"December 27th 2024, 6:00:17 pm\",\"Readable time\":\"6:00:17 pm\"}}]},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"4c28d47d-811e-4b89-adeb-47da12abd378\",\"connections\":{\"X\":{\"main\":[[{\"node\":\"Update X Status\",\"type\":\"main\",\"index\":0}]]},\"Merge\":{\"main\":[[{\"node\":\"Filter Unposted Items\",\"type\":\"main\",\"index\":0}]]},\"Ping Me\":{\"main\":[[{\"node\":\"Wait for 5 mins before posting\",\"type\":\"main\",\"index\":0}]]},\"LinkedIn\":{\"main\":[[{\"node\":\"Update L Status\",\"type\":\"main\",\"index\":0}]]},\"Create Item\":{\"main\":[[{\"node\":\"Ping Me\",\"type\":\"main\",\"index\":0}]]},\"Search Item\":{\"main\":[[{\"node\":\"Merge\",\"type\":\"main\",\"index\":0}]]},\"Extract Meta\":{\"main\":[[{\"node\":\"Search Item\",\"type\":\"main\",\"index\":0},{\"node\":\"Merge\",\"type\":\"main\",\"index\":1}]]},\"Crawl HN Home\":{\"main\":[[{\"node\":\"Extract Meta\",\"type\":\"main\",\"index\":0}]]},\"Visit GH Page\":{\"main\":[[{\"node\":\"Convert HTML To Markdown\",\"type\":\"main\",\"index\":0}]]},\"Filter Errored\":{\"main\":[[{\"node\":\"Create Item\",\"type\":\"main\",\"index\":0}]]},\"Update L Status\":{\"main\":[[{\"node\":\"No Operation, do nothing\",\"type\":\"main\",\"index\":0}]]},\"Update X Status\":{\"main\":[[{\"node\":\"No Operation, do nothing\",\"type\":\"main\",\"index\":0}]]},\"Generate Content\":{\"main\":[[{\"node\":\"Validate Generate Content\",\"type\":\"main\",\"index\":0}]]},\"Schedule Trigger\":{\"main\":[[{\"node\":\"Crawl HN Home\",\"type\":\"main\",\"index\":0}]]},\"Filter Unposted Items\":{\"main\":[[{\"node\":\"Visit GH Page\",\"type\":\"main\",\"index\":0}]]},\"Convert HTML To Markdown\":{\"main\":[[{\"node\":\"Generate Content\",\"type\":\"main\",\"index\":0}]]},\"Validate Generate Content\":{\"main\":[[{\"node\":\"Filter Errored\",\"type\":\"main\",\"index\":0}]]},\"Wait for 5 mins before posting\":{\"main\":[[{\"node\":\"X\",\"type\":\"main\",\"index\":0},{\"node\":\"LinkedIn\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "> [Reach out to me for any setup help/consulting.](https://x.com/being_mudit)\n\nAutomate the curation and sharing of trending GitHub discussions from Hacker News to Twitter and LinkedIn. This workflow leverages AI to generate engaging posts, streamlining your social media content creation and distribution.\n\n**How it Works**\n\n  1. **Crawl Hacker News for GitHub Posts** : The workflow fetches trending GitHub-related discussions from Hacker News.\n  2. **Extract Key Information** : Relevant data such as post titles, URLs, and metadata are extracted and filtered to focus only on unposted content.\n  3. **Fetch Additional Details** : For each GitHub post, the workflow retrieves extra information from the GitHub repository page to enrich the post content.\n  4. **Generate Social Media Posts** : Using AI, the workflow automatically generates tailored posts for Twitter and LinkedIn based on the collected data.\n  5. **Post to Twitter & LinkedIn**: The generated content is posted to your Twitter and LinkedIn accounts.\n  6. **Track and Log Posts** : Each post is logged in Airtable for tracking, and its status is updated to ensure no duplicate posts are made.\n  7. **Telegram Notification** : After posting, a summary of the posts is sent to your Telegram chat for real-time updates.\n\n\n\n**Requirements**\n\n  * **n8n Account** : Set up and configured. [Sign up here](https://n8n.partnerlinks.io/vzzxn6v15mra).\n  * **API Credentials** : Valid keys for LinkedIn, Twitter, Airtable, OpenAI, and Telegram.\n  * **Airtable Base** : Configured with fields such as Title, URL, Post Content, Status, and Timestamp. [Get started with Airtable](https://airtable.com/invite/r/sk9yE4mh).\n  * **Telegram Chat ID** : For receiving real-time notifications.\n\n\n\n**Set Up Steps**\n\n  1. **Clone the Workflow** : Import the workflow into your n8n environment using the provided JSON.\n  2. **Configure API Credentials** : Enter your API keys for LinkedIn, Twitter, Airtable, OpenAI, and Telegram into the respective nodes.\n  3. **Set Up Airtable Base** : Create an Airtable base with fields such as Title, URL, Post Content, Status, and Timestamp.\n  4. **Customize Telegram Chat ID** : Modify the 'Ping me' node with your Telegram chat ID to receive notifications.\n  5. **Run the Workflow** : Activate the workflow to start the automated content curation and posting process.\n\n\n\n**Additional Resources**\n\n  * [n8n AI Agentic Workflows Guide](https://blog.n8n.io/ai-agentic-workflows/)\n  * [n8n AI Workflow Tutorial](https://docs.n8n.io/advanced-ai/intro-tutorial/)\n  * [n8n Community Tutorial on Building an AI-Powered Telegram Bot](https://community.n8n.io/t/how-to-build-a-telegram-ai-bot-with-n8n-step-by-step-tutorial/39748)\n\n\n\n> Note: Chat GPT prompt should/can be tweaked in the step to give the desired behaviour.\n\n****Sample Posts from my X and LinkedIn -****\n\n![Screenshot 20250103 010113.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2025_01_03_010113_ba327f8951.png)\n\n![Screenshot 20250103 010259.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2025_01_03_010259_c27b326fa1.png)\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><blockquote>\n<p><a href=\"https://x.com/being_mudit\" rel=\"ugc nofollow\" target=\"_blank\">Reach out to me  for any setup help/consulting.</a></p>\n</blockquote>\n<p>Automate the curation and sharing of trending GitHub discussions from Hacker News to Twitter and LinkedIn. This workflow leverages AI to generate engaging posts, streamlining your social media content creation and distribution.</p>\n<p><strong>How it Works</strong></p>\n<ol>\n<li><strong>Crawl Hacker News for GitHub Posts</strong>: The workflow fetches trending GitHub-related discussions from Hacker News.</li>\n<li><strong>Extract Key Information</strong>: Relevant data such as post titles, URLs, and metadata are extracted and filtered to focus only on unposted content.</li>\n<li><strong>Fetch Additional Details</strong>: For each GitHub post, the workflow retrieves extra information from the GitHub repository page to enrich the post content.</li>\n<li><strong>Generate Social Media Posts</strong>: Using AI, the workflow automatically generates tailored posts for Twitter and LinkedIn based on the collected data.</li>\n<li><strong>Post to Twitter &amp; LinkedIn</strong>: The generated content is posted to your Twitter and LinkedIn accounts.</li>\n<li><strong>Track and Log Posts</strong>: Each post is logged in Airtable for tracking, and its status is updated to ensure no duplicate posts are made.</li>\n<li><strong>Telegram Notification</strong>: After posting, a summary of the posts is sent to your Telegram chat for real-time updates.</li>\n</ol>\n<p><strong>Requirements</strong></p>\n<ul>\n<li><strong>n8n Account</strong>: Set up and configured. <a href=\"https://n8n.partnerlinks.io/vzzxn6v15mra\" rel=\"ugc nofollow\" target=\"_blank\">Sign up here</a>.</li>\n<li><strong>API Credentials</strong>: Valid keys for LinkedIn, Twitter, Airtable, OpenAI, and Telegram.</li>\n<li><strong>Airtable Base</strong>: Configured with fields such as Title, URL, Post Content, Status, and Timestamp. <a href=\"https://airtable.com/invite/r/sk9yE4mh\" rel=\"ugc nofollow\" target=\"_blank\">Get started with Airtable</a>.</li>\n<li><strong>Telegram Chat ID</strong>: For receiving real-time notifications.</li>\n</ul>\n<p><strong>Set Up Steps</strong></p>\n<ol>\n<li><strong>Clone the Workflow</strong>: Import the workflow into your n8n environment using the provided JSON.</li>\n<li><strong>Configure API Credentials</strong>: Enter your API keys for LinkedIn, Twitter, Airtable, OpenAI, and Telegram into the respective nodes.</li>\n<li><strong>Set Up Airtable Base</strong>: Create an Airtable base with fields such as Title, URL, Post Content, Status, and Timestamp.</li>\n<li><strong>Customize Telegram Chat ID</strong>: Modify the 'Ping me' node with your Telegram chat ID to receive notifications.</li>\n<li><strong>Run the Workflow</strong>: Activate the workflow to start the automated content curation and posting process.</li>\n</ol>\n<p><strong>Additional Resources</strong></p>\n<ul>\n<li><a href=\"https://blog.n8n.io/ai-agentic-workflows/\" rel=\"ugc nofollow\" target=\"_blank\">n8n AI Agentic Workflows Guide</a></li>\n<li><a href=\"https://docs.n8n.io/advanced-ai/intro-tutorial/\" rel=\"ugc nofollow\" target=\"_blank\">n8n AI Workflow Tutorial</a></li>\n<li><a href=\"https://community.n8n.io/t/how-to-build-a-telegram-ai-bot-with-n8n-step-by-step-tutorial/39748\" rel=\"ugc nofollow\" target=\"_blank\">n8n Community Tutorial on Building an AI-Powered Telegram Bot</a></li>\n</ul>\n<blockquote>\n<p>Note: Chat GPT prompt should/can be tweaked in the step to give the desired behaviour.</p>\n</blockquote>\n<p><strong><strong>Sample Posts from my X and LinkedIn -</strong></strong></p>\n<p><img src=\"https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2025_01_03_010113_ba327f8951.png\" alt=\"Screenshot 20250103 010113.png\"></p>\n<p><img src=\"https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2025_01_03_010259_c27b326fa1.png\" alt=\"Screenshot 20250103 010259.png\"></p>\n</div><!--]-->",
  "readme_zh": "[如需任何设置帮助/咨询，请联系我](https://x.com/being_mudit)\n\n自动从Hacker News抓取热门GitHub讨论并分享至Twitter和LinkedIn。该工作流利用AI生成吸引人的帖子，简化社交媒体内容创作与分发流程。\n\n**运作原理**\n\n  1. **抓取Hacker News的GitHub帖子**：工作流从Hacker News获取与GitHub相关的热门讨论。\n  2. **提取关键信息**：筛选出标题、URL和元数据等关键内容，仅聚焦未发布过的素材。\n  3. **获取补充信息**：针对每个GitHub帖子，从仓库页面抓取额外信息以丰富内容。\n  4. **生成社交媒体帖子**：基于收集的数据，使用AI自动生成适配Twitter和LinkedIn的定制化内容。\n  5. **发布至Twitter和LinkedIn**：将生成内容同步发布至您的社交账号。\n  6. **追踪与记录**：每次发布都会记录在Airtable中，并更新状态以避免重复发布。\n  7. **Telegram通知**：发布完成后，实时将内容摘要发送至您的Telegram聊天窗口。\n\n**环境要求**\n\n  * **n8n账户**：需完成注册配置。[立即注册](https://n8n.partnerlinks.io/vzzxn6v15mra)\n  * **API密钥**：有效的LinkedIn、Twitter、Airtable、OpenAI和Telegram接口密钥\n  * **Airtable数据库**：需包含标题、URL、帖子内容、状态和时间戳等字段。[创建Airtable](https://airtable.com/invite/r/sk9yE4mh)\n  * **Telegram聊天ID**：用于接收实时通知\n\n**配置步骤**\n\n  1. **导入工作流**：通过提供的JSON文件将工作流导入n8n环境\n  2. **配置API密钥**：在各对应节点中输入您的社交媒体平台API密钥\n  3. **设置Airtable**：创建包含必要字段的数据库\n  4. **绑定Telegram**：在\"Ping me\"节点中填入您的Telegram聊天ID\n  5. **启动工作流**：激活工作流即可开始自动化内容运营\n\n**扩展资源**\n\n  * [n8n智能代理工作流指南](https://blog.n8n.io/ai-agentic-workflows/)\n  * [n8n人工智能工作流教程](https://docs.n8n.io/advanced-ai/intro-tutorial/)\n  * [社区教程：用n8n构建TelegramAI机器人](https://community.n8n.io/t/how-to-build-a-telegram-ai-bot-with-n8n-step-by-step-tutorial/39748)\n\n> 提示：可根据实际需求调整ChatGPT提示词步骤\n\n****我的X和LinkedIn发布示例****  \n\n![20250103截图010113.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2025_01_03_010113_ba327f8951.png)  \n\n![20250103截图010259.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2025_01_03_010259_c27b326fa1.png)",
  "title_zh": "AI驱动的社交媒体放大器",
  "publish_date_zh": "最后更新于4个月前",
  "workflow_json_zh": "{\n  \"id\": \"ZeSJSbwXI593H1Qj\",\n  \"meta\": {\n    \"instanceId\": \"8e1a7e3413df437923cda0e92c098469371d84f7001856e525beaff17be8b941\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"Social Media AI Agent - Telegram\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"814303e0-5fe9-474e-a4ed-e4a728fd4acf\",\n      \"name\": \"Crawl HN Home\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -1540,\n        1640\n      ],\n      \"parameters\": {\n        \"url\": \"https://news.ycombinator.com/\",\n        \"options\": {\n          \"response\": {\n            \"response\": {\n              \"neverError\": true,\n              \"fullResponse\": true\n            }\n          }\n        }\n      },\n      \"executeOnce\": true,\n      \"typeVersion\": 4.2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"32e20b1d-b3f1-4ed2-acbf-4d5bd56b0d8b\",\n      \"name\": \"Extract Meta\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        -1260,\n        1720\n      ],\n      \"parameters\": {\n        \"language\": \"python\",\n        \"pythonCode\": \"# Import necessary modules\\nimport asyncio\\nimport micropip\\n\\n# Define an asynchronous function to install packages\\nasync def install_packages():\\n    await micropip.install(\\\"beautifulsoup4\\\")\\n    await micropip.install(\\\"simplejson\\\")\\n\\n# Run the asynchronous package installation\\nasyncio.get_event_loop().run_until_complete(install_packages())\\n\\n# Now, import the installed packages\\nimport simplejson as json\\nfrom bs4 import BeautifulSoup\\n\\n# Retrieve the HTML content from the first item in the input\\n# Assuming n8n passes data as a list of items, each with a 'json' key\\nhtml_content = items[0].get('json', {}).get('data', '')\\n\\n# Initialize BeautifulSoup with the HTML content\\nsoup = BeautifulSoup(html_content, 'html.parser')\\n\\n# Initialize a list to store metadata of GitHub posts\\ngithub_posts = []\\n\\n# Find all 'tr' elements with class 'athing submission'\\nposts = soup.find_all('tr', class_='athing submission')\\n\\nfor post in posts:\\n    post_id = post.get('id')\\n    title_line = post.find('span', class_='titleline')\\n    if not title_line:\\n        continue  # Skip if titleline is not found\\n\\n    # Extract the title and URL\\n    title_tag = title_line.find('a')\\n    if not title_tag:\\n        continue  # Skip if title tag is not found\\n\\n    title = title_tag.get_text(strip=True)\\n    url = title_tag.get('href', '')\\n\\n    # Check if the URL is a GitHub link\\n    if 'github.com' not in url.lower():\\n        continue  # Skip if not a GitHub link\\n\\n    # Extract the site domain (e.g., github.com/username/repo)\\n    site_bit = title_line.find('span', class_='sitebit comhead')\\n    site = site_bit.find('span', class_='sitestr').get_text(strip=True) if site_bit else ''\\n\\n    # The subtext is in the next 'tr' element\\n    subtext_tr = post.find_next_sibling('tr')\\n    if not subtext_tr:\\n        continue  # Skip if subtext row is not found\\n\\n    subtext_td = subtext_tr.find('td', class_='subtext')\\n    if not subtext_td:\\n        continue  # Skip if subtext td is not found\\n\\n    # Extract score\\n    score_span = subtext_td.find('span', class_='score')\\n    score = score_span.get_text(strip=True) if score_span else '0 points'\\n\\n    # Extract author\\n    author_a = subtext_td.find('a', class_='hnuser')\\n    author = author_a.get_text(strip=True) if author_a else 'unknown'\\n\\n    # Extract age\\n    age_span = subtext_td.find('span', class_='age')\\n    age_a = age_span.find('a') if age_span else None\\n    age = age_a.get_text(strip=True) if age_a else 'unknown'\\n\\n    # Extract comments\\n    comments_a = subtext_td.find_all('a')[-1] if subtext_td.find_all('a') else None\\n    comments_text = comments_a.get_text(strip=True) if comments_a else '0 comments'\\n\\n    # Construct the Hacker News URL\\n    hn_url = f\\\"https://news.ycombinator.com/item?id={post_id}\\\"\\n\\n    # Compile the metadata\\n    post_metadata = {\\n        'Post': post_id,\\n        'title': title,\\n        'url': url,\\n        'site': site,\\n        'score': score,\\n        'author': author,\\n        'age': age,\\n        'comments': comments_text,\\n        'hn_url': hn_url\\n    }\\n\\n    # Append to the list of GitHub posts\\n    github_posts.append(post_metadata)\\n\\n# Prepare the output for n8n\\noutput = [{'json': post} for post in github_posts]\\n\\n# Return the output\\nreturn output\\n\"\n      },\n      \"executeOnce\": true,\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"b54cf663-b823-4613-a812-764942b95b9d\",\n      \"name\": \"Filter Unposted Items\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        -680,\n        1640\n      ],\n      \"parameters\": {\n        \"jsCode\": \"const items = [];\\n\\n// Step 1: Collect all Post IDs from input1 items (those with 'id')\\nconst processedPosts = new Set(\\n  $input.all()\\n    .filter(item => item.json.id)\\n    .map(item => item.json.Post)\\n);\\n\\n// Step 2: Iterate over all items and filter out duplicates\\nfor (const item of $input.all()) {\\n  \\n  // Only process items without 'id' (input2 items)\\n  if(!item.json.id){\\n    \\n    // Check if the Post ID is already processed\\n    if(!processedPosts.has(item.json.Post) && item.json.Post!=undefined){\\n      items.push(item);\\n    }\\n  }\\n}\\n\\nreturn items;\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"d7ac7121-8da7-4e45-9b74-daf07fbf15fb\",\n      \"name\": \"Visit GH Page\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        -420,\n        1420\n      ],\n      \"parameters\": {\n        \"url\": \"={{ $json.url }}\",\n        \"options\": {}\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"f156ca8e-7963-42b9-9612-9ab5efc53be4\",\n      \"name\": \"Convert HTML To Markdown\",\n      \"type\": \"n8n-nodes-base.markdown\",\n      \"position\": [\n        -240,\n        1700\n      ],\n      \"parameters\": {\n        \"html\": \"={{ $json.data }}\",\n        \"options\": {}\n      },\n      \"typeVersion\": 1,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"86221ed0-29fa-4775-ba36-8ffdf614977c\",\n      \"name\": \"Filter Errored\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        380,\n        1440\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"7776cb97-e02d-418e-a168-612bf92d4160\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"empty\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.error }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"f08c4f61-17a5-4899-ab3d-4e3ff5d1b8b7\",\n      \"name\": \"No Operation, do nothing\",\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"position\": [\n        1760,\n        1540\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"48856b3b-a951-4e7f-a0b8-410a71e9b0a7\",\n      \"name\": \"Update X Status\",\n      \"type\": \"n8n-nodes-base.airtable\",\n      \"position\": [\n        1500,\n        1400\n      ],\n      \"parameters\": {\n        \"base\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"app7fh2kmMzPKS4RZ\",\n          \"cachedResultUrl\": \"https://airtable.com/app7fh2kmMzPKS4RZ\",\n          \"cachedResultName\": \"Twitter Agent\"\n        },\n        \"table\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"tblf0cODJFdvDj7vU\",\n          \"cachedResultUrl\": \"https://airtable.com/app7fh2kmMzPKS4RZ/tblf0cODJFdvDj7vU\",\n          \"cachedResultName\": \"My Tweets\"\n        },\n        \"columns\": {\n          \"value\": {\n            \"id\": \"={{ $('Create Item').item.json.id }}\",\n            \"TDone\": true\n          },\n          \"schema\": [\n            {\n              \"id\": \"id\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": true,\n              \"required\": false,\n              \"displayName\": \"id\",\n              \"defaultMatch\": true\n            },\n            {\n              \"id\": \"Post\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Post\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Title\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Title\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Url\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Url\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Tweet\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Tweet\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"LinkedIn\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"LinkedIn\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Date\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": true,\n              \"required\": false,\n              \"displayName\": \"Date\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Last Modified\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": true,\n              \"required\": false,\n              \"displayName\": \"Last Modified\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"TDone\",\n              \"type\": \"boolean\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"TDone\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"LDone\",\n              \"type\": \"boolean\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"LDone\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [\n            \"id\"\n          ]\n        },\n        \"options\": {\n          \"typecast\": true\n        },\n        \"operation\": \"update\"\n      },\n      \"credentials\": {\n        \"airtableTokenApi\": {\n          \"id\": \"BxLldDZTAZvuWVbr\",\n          \"name\": \"Airtable Personal Access Token account\"\n        }\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"c31bb906-2a0d-406a-a7cd-6fc4adfcb67b\",\n      \"name\": \"LinkedIn\",\n      \"type\": \"n8n-nodes-base.linkedIn\",\n      \"position\": [\n        1200,\n        1820\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $('Filter Errored').item.json.message.content.linkedin }}\",\n        \"person\": \"afi4Hy9wlI\",\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"linkedInOAuth2Api\": {\n          \"id\": \"S7G2oyLAmzhWuYFQ\",\n          \"name\": \"LinkedIn account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4aab4cc2-4a51-432a-aa21-ba469c027ac6\",\n      \"name\": \"Update L Status\",\n      \"type\": \"n8n-nodes-base.airtable\",\n      \"position\": [\n        1520,\n        1680\n      ],\n      \"parameters\": {\n        \"base\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"app7fh2kmMzPKS4RZ\",\n          \"cachedResultUrl\": \"https://airtable.com/app7fh2kmMzPKS4RZ\",\n          \"cachedResultName\": \"Twitter Agent\"\n        },\n        \"table\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"tblf0cODJFdvDj7vU\",\n          \"cachedResultUrl\": \"https://airtable.com/app7fh2kmMzPKS4RZ/tblf0cODJFdvDj7vU\",\n          \"cachedResultName\": \"My Tweets\"\n        },\n        \"columns\": {\n          \"value\": {\n            \"id\": \"={{ $('Create Item').item.json.id }}\",\n            \"LDone\": true\n          },\n          \"schema\": [\n            {\n              \"id\": \"id\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": true,\n              \"required\": false,\n              \"displayName\": \"id\",\n              \"defaultMatch\": true\n            },\n            {\n              \"id\": \"Post\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Post\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Title\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Title\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Url\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Url\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Tweet\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Tweet\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"LinkedIn\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"LinkedIn\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Date\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": true,\n              \"required\": false,\n              \"displayName\": \"Date\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Last Modified\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": true,\n              \"required\": false,\n              \"displayName\": \"Last Modified\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"TDone\",\n              \"type\": \"boolean\",\n              \"display\": true,\n              \"removed\": true,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"TDone\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"LDone\",\n              \"type\": \"boolean\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"LDone\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": [\n            \"id\"\n          ]\n        },\n        \"options\": {\n          \"typecast\": true\n        },\n        \"operation\": \"update\"\n      },\n      \"credentials\": {\n        \"airtableTokenApi\": {\n          \"id\": \"BxLldDZTAZvuWVbr\",\n          \"name\": \"Airtable Personal Access Token account\"\n        }\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"72dd9714-c11d-4417-8710-89e416ac44c9\",\n      \"name\": \"Search Item\",\n      \"type\": \"n8n-nodes-base.airtable\",\n      \"position\": [\n        -1100,\n        1240\n      ],\n      \"parameters\": {\n        \"base\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"app7fh2kmMzPKS4RZ\",\n          \"cachedResultUrl\": \"https://airtable.com/app7fh2kmMzPKS4RZ\",\n          \"cachedResultName\": \"Twitter Agent\"\n        },\n        \"table\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"tblf0cODJFdvDj7vU\",\n          \"cachedResultUrl\": \"https://airtable.com/app7fh2kmMzPKS4RZ/tblf0cODJFdvDj7vU\",\n          \"cachedResultName\": \"My Tweets\"\n        },\n        \"options\": {\n          \"fields\": [\n            \"Title\",\n            \"Url\",\n            \"Tweet\",\n            \"Date\",\n            \"Post\"\n          ]\n        },\n        \"operation\": \"search\",\n        \"filterByFormula\": \"={Post}= {{ $json.Post }}\"\n      },\n      \"credentials\": {\n        \"airtableTokenApi\": {\n          \"id\": \"BxLldDZTAZvuWVbr\",\n          \"name\": \"Airtable Personal Access Token account\"\n        }\n      },\n      \"typeVersion\": 2.1,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"f89fbada-0e53-44f0-a09b-119869fabd10\",\n      \"name\": \"Create Item\",\n      \"type\": \"n8n-nodes-base.airtable\",\n      \"position\": [\n        580,\n        1660\n      ],\n      \"parameters\": {\n        \"base\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"app7fh2kmMzPKS4RZ\",\n          \"cachedResultUrl\": \"https://airtable.com/app7fh2kmMzPKS4RZ\",\n          \"cachedResultName\": \"Twitter Agent\"\n        },\n        \"table\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"tblf0cODJFdvDj7vU\",\n          \"cachedResultUrl\": \"https://airtable.com/app7fh2kmMzPKS4RZ/tblf0cODJFdvDj7vU\",\n          \"cachedResultName\": \"My Tweets\"\n        },\n        \"columns\": {\n          \"value\": {\n            \"Url\": \"={{ $('Filter Unposted Items').item.json.url }}\",\n            \"Post\": \"={{ $('Filter Unposted Items').item.json.Post }}\",\n            \"Title\": \"={{ $('Filter Unposted Items').item.json.title }}\",\n            \"Tweet\": \"={{ $json.message.content.twitter }}\",\n            \"LinkedIn\": \"={{ $json.message.content.linkedin }}\"\n          },\n          \"schema\": [\n            {\n              \"id\": \"Post\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Post\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Title\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Title\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Url\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Url\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Tweet\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"Tweet\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"LinkedIn\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": false,\n              \"required\": false,\n              \"displayName\": \"LinkedIn\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            },\n            {\n              \"id\": \"Date\",\n              \"type\": \"string\",\n              \"display\": true,\n              \"removed\": false,\n              \"readOnly\": true,\n              \"required\": false,\n              \"displayName\": \"Date\",\n              \"defaultMatch\": false,\n              \"canBeUsedToMatch\": true\n            }\n          ],\n          \"mappingMode\": \"defineBelow\",\n          \"matchingColumns\": []\n        },\n        \"options\": {},\n        \"operation\": \"create\"\n      },\n      \"credentials\": {\n        \"airtableTokenApi\": {\n          \"id\": \"BxLldDZTAZvuWVbr\",\n          \"name\": \"Airtable Personal Access Token account\"\n        }\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"51a2c3d3-3e75-4375-b2b6-4bb86fa71855\",\n      \"name\": \"X\",\n      \"type\": \"n8n-nodes-base.twitter\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        1180,\n        1380\n      ],\n      \"parameters\": {\n        \"text\": \"={{ $('Filter Errored').item.json.message.content.twitter }}\",\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"twitterOAuth2Api\": {\n          \"id\": \"YQyS9lQTpZtZkefS\",\n          \"name\": \"X account\"\n        }\n      },\n      \"executeOnce\": false,\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"58869c5b-9fb2-4f76-8788-68056cda45b0\",\n      \"name\": \"Validate Generate Content\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        180,\n        1680\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"if ($json.message.content.twitter && $json.message.content.linkedin) {\\n  \\n  return $json;\\n} else {\\n\\n  const parsedContent = JSON.parse($json.message.content);\\n  if ($json.message.content.twitter && $json.message.content.linkedin) {\\n    return parsedContent;\\n  }\\n\\n  console.log(\\\"Invalid formatting\\\")\\n  return {}\\n}\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"527fd640-8bc8-4043-92a6-52fbea8de63f\",\n      \"name\": \"Schedule Trigger\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [\n        -1780,\n        1640\n      ],\n      \"parameters\": {\n        \"rule\": {\n          \"interval\": [\n            {\n              \"field\": \"hours\",\n              \"hoursInterval\": 6\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"f00c1de5-d5bd-4d78-8717-d26dd739adc7\",\n      \"name\": \"Merge\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        -840,\n        1420\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 3,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"3529fba4-173c-4378-ae69-43a3bae0813f\",\n      \"name\": \"Generate Content\",\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"position\": [\n        -120,\n        1440\n      ],\n      \"parameters\": {\n        \"modelId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini\",\n          \"cachedResultName\": \"GPT-4O-MINI\"\n        },\n        \"options\": {},\n        \"messages\": {\n          \"values\": [\n            {\n              \"role\": \"system\",\n              \"content\": \"You are an AI-powered social media assistant specialized in crafting short-form, engaging posts for Twitter and LinkedIn. Your tone should blend the enthusiasm of a Tech Evangelist with the narrative depth of a Storyteller. The goal is to highlight technological and open-source projects in a friendly, forward-thinking manner, connecting them to real-world use cases. \\n\\nGuidelines:\\n1. Output must be in JSON with separate fields for “twitter” and “linkedin.”\\n2. Do not include emojis or marketing buzzwords (“cutting-edge,” “disruptive,” etc.).\\n3. Write naturally and concisely. Avoid overly formal or robotic language.\\n4. Twitter posts must be under 280 characters (including spaces and URL).\\n5. LinkedIn posts should be slightly longer, yet still succinct, and focus on storytelling and real-world applications.\\n6. Provide a single call-to-action in each post.\\n7. Do not imply ownership of the project unless explicitly stated.\\n8. Maintain a professional yet approachable tone in both outputs.\\n\"\n            },\n            {\n              \"content\": \"=Using the following details, generate two posts—one for Twitter and one for LinkedIn—incorporating an enthusiastic yet narrative-driven style:\\n\\nTitle: {{ $('Filter Unposted Items').item.json.title }}\\nDetails in markdown: {{ $json.data }}\\nRepository Link: {{ $('Filter Unposted Items').item.json.url }}  (this is the actual link you want to be inserted)\\n\\nConstraints:\\n- No emojis.\\n- Keep the Twitter post under 280 characters (including the link).\\n- Use a friendly, forward-thinking tone that weaves in a short narrative where possible.\\n- Highlight how the project solves a real problem or benefits the user.\\n- End each post with one clear CTA (e.g., “Check it out!” or “Learn more.”).\\n- **Ensure the tone is neutral and does not imply personal involvement** (e.g., avoid phrases like \\\"my journey\\\" or \\\"I found it fascinating\\\").\\n- **LinkedIn post should be more detailed**: Provide context, explain the key features, highlight how it can be useful to different audiences, and elaborate on the problem it solves or the impact it can have.\\n- Output your response in JSON with the structure:\\n```json\\n{\\n  \\\"twitter\\\": \\\"Your Twitter post here\\\",\\n  \\\"linkedin\\\": \\\"Your LinkedIn post here\\\"\\n}\\n\"\n            }\n          ]\n        },\n        \"jsonOutput\": true\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"IfJo4dG8AUORk6f0\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"typeVersion\": 1.7,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"2dfd7849-877c-4bd3-b248-94140a1fe209\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -320,\n        960\n      ],\n      \"parameters\": {\n        \"width\": 619.8433261701165,\n        \"height\": 97.20332107671479,\n        \"content\": \"自动精选并分享Hacker News上热门的GitHub讨论至Twitter和LinkedIn。该工作流运用AI生成引人入胜的推文，简化您的社交媒体内容创作与分发流程。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"20704a99-1234-46dc-b8c8-860b051b3b85\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1620,\n        1520\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 524.8824946275869,\n        \"height\": 420.37647358435385,\n        \"content\": \"我爬取Hacker News并提取其中的Github链接。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5cfa2c30-6c88-429a-8b5f-0034d2352cc2\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -480,\n        1280\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 828.144505037599,\n        \"height\": 670.031562962293,\n        \"content\": \"这里是奇迹发生的地方。我会利用之前提取的Github链接访问项目页面，深入了解分享内容。接着我会礼貌地请Chat GPT协助生成一条推特推文和一篇领英帖子。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"caec3df6-ddcc-4959-94e1-18163cf3128f\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1100,\n        1280\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 285.9487894560623,\n        \"height\": 751.2077576680031,\n        \"content\": \"最后一个魔术，将生成的推文和帖子发送到各自的平台。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"89c8472d-3329-4f94-a656-2539e061eeb0\",\n      \"name\": \"Ping Me\",\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"position\": [\n        720,\n        1420\n      ],\n      \"parameters\": {\n        \"text\": \"=Hi There, here is your readymade tweet - \\n\\n {{ $json.fields.Tweet }}\\n\\nAnd your readymade LinkedIn post -\\n\\n {{ $json.fields.LinkedIn }}\\n\\n\",\n        \"chatId\": \"1297549992\",\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"1RZApQ3BwJxFn9jp\",\n          \"name\": \"Telegram account\"\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"b1444e6d-0cab-4082-af42-a8decc97d9b4\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        640,\n        1300\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 264.5060210432334,\n        \"height\": 307.03612625939974,\n        \"content\": \"正在通知所有者即将发布内容，并等待5分钟后再最终发布。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"01c2f7ff-ff6c-4a60-9581-f8c5f3985792\",\n      \"name\": \"Wait for 5 mins before posting\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        880,\n        1660\n      ],\n      \"webhookId\": \"0c7ee388-30cf-4a99-9bb0-0fd85171c794\",\n      \"parameters\": {\n        \"unit\": \"minutes\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"909c7e7d-ea84-4612-a322-b1fa889b2efb\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -920,\n        1380\n      ],\n      \"parameters\": {\n        \"width\": 400.8207630962184,\n        \"height\": 392.80719991071624,\n        \"content\": \"家务\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"04ab5b63-8def-4d49-9360-596261eb051c\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -1140,\n        1140\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 195.58283685913963,\n        \"height\": 285.5933578465706,\n        \"content\": \"确保我们不再重复发布相同内容。\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {\n    \"Schedule Trigger\": [\n      {\n        \"json\": {\n          \"Hour\": \"18\",\n          \"Year\": \"2024\",\n          \"Month\": \"December\",\n          \"Minute\": \"00\",\n          \"Second\": \"17\",\n          \"Timezone\": \"America/New_York (UTC-05:00)\",\n          \"timestamp\": \"2024-12-27T18:00:17.035-05:00\",\n          \"Day of week\": \"Friday\",\n          \"Day of month\": \"27\",\n          \"Readable date\": \"December 27th 2024, 6:00:17 pm\",\n          \"Readable time\": \"6:00:17 pm\"\n        }\n      }\n    ]\n  },\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"4c28d47d-811e-4b89-adeb-47da12abd378\",\n  \"connections\": {\n    \"X\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Update X Status\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Merge\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filter Unposted Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Ping Me\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Wait for 5 mins before posting\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"LinkedIn\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Update L Status\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create Item\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Ping Me\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Search Item\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract Meta\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Search Item\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Crawl HN Home\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract Meta\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Visit GH Page\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert HTML To Markdown\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filter Errored\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create Item\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Update L Status\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"No Operation, do nothing\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Update X Status\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"No Operation, do nothing\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate Content\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Validate Generate Content\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Schedule Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Crawl HN Home\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filter Unposted Items\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Visit GH Page\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert HTML To Markdown\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate Content\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Validate Generate Content\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filter Errored\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Wait for 5 mins before posting\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"X\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"LinkedIn\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}