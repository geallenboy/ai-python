{
  "title": "Transcribe YouTube Videos with AI Enhancement via Chat Interface",
  "url": "https://n8n.io/workflows/3381-transcribe-youtube-videos-with-ai-enhancement-via-chat-interface/",
  "category": "Marketing",
  "category_url": "https://n8n.io/workflows/categories/marketing/?sort=createdAt:desc",
  "author": "ivn",
  "publish_date": "Last update a month ago",
  "publish_date_absolute": "",
  "content": "",
  "workflow_json": "{\"id\":\"Iz8TMdlc6JhaKkd9\",\"meta\":{\"instanceId\":\"dacfda6d2e1dbefe99a005845405509e9929b16710017f4bd5d2bf758941295c\",\"templateCredsSetupCompleted\":true},\"name\":\"YouTube Video Transcriber\",\"tags\":[],\"nodes\":[{\"id\":\"a4e2f554-ebae-41df-912a-0d1081fa1736\",\"name\":\"When chat message received\",\"type\":\"@n8n/n8n-nodes-langchain.chatTrigger\",\"position\":[-100,-60],\"webhookId\":\"70129cbe-1a05-495f-bd92-18d36c1bc260\",\"parameters\":{\"public\":true,\"options\":{\"title\":\"Youtube Video Transcriber 🚀\",\"subtitle\":\"Have a great transcription!  📖\",\"inputPlaceholder\":\"Insert a URL of a YouTube video.  💻\"},\"initialMessages\":\"Give me a URL of a video from YouTube to start! 👍\"},\"typeVersion\":1.1},{\"id\":\"34b2b12e-0eb5-4f59-bd30-e7b595d06b8c\",\"name\":\"Code\",\"type\":\"n8n-nodes-base.code\",\"position\":[280,-60],\"parameters\":{\"language\":\"python\",\"pythonCode\":\"import re\\n\\ndef youtube_video_url_validatior(video_url) -> str:\\n  try:\\n    if not video_url:\\n      return {\\\"text\\\": 'URL from the video is required.', \\\"is_valid\\\": False}\\n    \\n    video_url: str = re.sub(r\\\"\\\\s{2,}\\\", \\\" \\\", video_url.strip())\\n    \\n    if not video_url:\\n      return {\\\"text\\\": 'URL from the video is required.', \\\"is_valid\\\": False}\\n    \\n    if len(video_url) < 25:\\n      return {\\\"text\\\": 'URL is too short to be a valid YouTube URL.', \\\"is_valid\\\": False}\\n    \\n    # if not re.match(r'^[A-Za-z0-9:/._?&=-]+$', video_url):\\n    #   return {\\\"text\\\": 'URL contains invalid characters.', \\\"is_valid\\\": False}\\n    \\n    is_valid: bool = False\\n    \\n    for pattern in [\\n        r'^https?://(?:www\\\\.)?youtube\\\\.com/watch\\\\?v=[\\\\w-]{11}',\\n        r'^https?://youtu\\\\.be/[\\\\w-]{11}',\\n        r'^https?://(?:www\\\\.)?youtube\\\\.com/embed/[\\\\w-]{11}',\\n        r'^https?://(?:www\\\\.)?youtube\\\\.com/v/[\\\\w-]{11}',\\n    ]:\\n        if re.match(pattern, video_url):\\n          is_valid = True\\n          \\n          break\\n    \\n    if not is_valid:\\n      return {\\\"text\\\": 'Invalid YouTube URL format.', \\\"is_valid\\\": False}\\n      \\n    video_url_id: str | None = re.search(r'(?:v=|youtu\\\\.be/|embed/|v/)([\\\\w-]{11})', video_url).group(1)\\n    \\n    if not video_url_id or not re.match(r'^[\\\\w-]{11}$', video_url_id):\\n      return {\\\"text\\\": 'Invalid YouTube video ID.', \\\"is_valid\\\": False}\\n    \\n    return {\\\"text\\\": video_url, \\\"is_valid\\\": True}\\n  except Exception as ex:\\n    raise ex\\n\\nreturn youtube_video_url_validatior(_input.first().json.chatInput)\"},\"typeVersion\":2},{\"id\":\"712cbf28-df12-44fc-b54a-bc21e13e55e7\",\"name\":\"If\",\"type\":\"n8n-nodes-base.if\",\"position\":[600,-240],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"loose\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"b8927a53-2755-4364-84b1-5340c5c31af5\",\"operator\":{\"type\":\"boolean\",\"operation\":\"true\",\"singleValue\":true},\"leftValue\":\"={{ $json.is_valid }}\",\"rightValue\":\"\"}]},\"looseTypeValidation\":true},\"typeVersion\":2.2},{\"id\":\"be9e1903-25bc-4f1b-8793-5e657205dd5d\",\"name\":\"Respond to Webhook - Chat Message\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"position\":[600,60],\"parameters\":{\"options\":{},\"respondWith\":\"text\",\"responseBody\":\"={{ $json.text }}\"},\"retryOnFail\":true,\"typeVersion\":1.1},{\"id\":\"98bc7747-e688-4683-8686-ca44023f8648\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-200,-240],\"parameters\":{\"color\":5,\"width\":300,\"height\":420,\"content\":\"## Entry Point\\n\\nThe workflow entry point is the  node chat message.\"},\"typeVersion\":1},{\"id\":\"7ca94ab6-7306-4b04-8b34-eb9e0937d681\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[180,-240],\"parameters\":{\"color\":3,\"width\":300,\"height\":420,\"content\":\"## Validation - URL\\n\\nThis node ensures that only a valid youtube video url goes forward.\"},\"typeVersion\":1},{\"id\":\"c719c022-b55b-42b3-ab5f-36c0e1d62512\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1360,-320],\"parameters\":{\"color\":4,\"width\":460,\"height\":560,\"content\":\"## Data Structuring\\n\\nHere is the core of the workflow, where structuring is done to get the right format to answer.\\n\\n**NOTE:**\\n\\n1. Users implementing this template must modify the language in the OpenAI prompt to suit their desired output.\\n\\n2. An OpenAI API key is essential and must be properly configured to support data structuring and processing.  \"},\"typeVersion\":1},{\"id\":\"7e1fa50f-7bd3-4bed-8537-969baa4c61de\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[820,-480],\"parameters\":{\"color\":7,\"width\":460,\"height\":900,\"content\":\"## Supadata\\n\\nSupadata is a powerful tool that converts YouTube video URLs into structured data via a simple API. It efficiently extracts transcriptions, making it ideal for AI training, data analysis, or text-based applications.\\n\\n**NOTE:**\\n\\n1. Users implementing this template must change the language in the query parameter to suit their needs. \\n\\n2. An API key is required and must be configured for the workflow to function properly.\"},\"typeVersion\":1},{\"id\":\"35bf3191-4113-4a92-85a8-b22d3b2a4134\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-920,-180],\"parameters\":{\"width\":640,\"height\":300,\"content\":\"## Description\\n\\nThis workflow simplifies access to YouTube video content converting into clear and concise transcriptions, ideal for users seeking practicality. It transcribes YouTube videos directly and returns the text, eliminating the need to watch the full video. \\n\\nThe need for this workflow arose from the demands of studying, where, amidst the fast-paced routine of daily life, reading transcribed content proved faster and more efficient for creating summaries than watching entire videos. Often, time constraints make it difficult to watch videos in full, and written text allows for quicker absorption of information. This solution provides a seamless way to access and review content from any YouTube video, regardless of the topic.\"},\"typeVersion\":1},{\"id\":\"2ea0b992-231b-4f6d-9f6f-9f488d266cfb\",\"name\":\"Edit Fields - Respond to Chat Message 2\",\"type\":\"n8n-nodes-base.set\",\"position\":[1000,180],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"66270798-60eb-4ab8-8572-ab957474e260\",\"name\":\"text\",\"type\":\"string\",\"value\":\"={{ $json.error }} - {{ $json.message }}\"}]}},\"typeVersion\":3.4},{\"id\":\"9846e903-015a-4111-b582-572d473fe4d3\",\"name\":\"Edit Fields - Respond to Chat Message 3\",\"type\":\"n8n-nodes-base.set\",\"position\":[1900,-320],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"97e0c175-8060-43da-9761-5c25d660c7ed\",\"name\":\"text\",\"type\":\"string\",\"value\":\"={{ $json.message.content }}\"}]}},\"typeVersion\":3.4},{\"id\":\"775e067c-3518-4c64-a939-5f9b9b435b3c\",\"name\":\"Edit Fields - Respond to Chat Message 4\",\"type\":\"n8n-nodes-base.set\",\"position\":[1900,100],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"66270798-60eb-4ab8-8572-ab957474e260\",\"name\":\"text\",\"type\":\"string\",\"value\":\"=Something went wrong with the data structuring.\"}]}},\"typeVersion\":3.4},{\"id\":\"91e22fcc-79b8-48d2-ba6e-bfb699ed9a07\",\"name\":\"HTTP Request\",\"type\":\"n8n-nodes-base.httpRequest\",\"onError\":\"continueErrorOutput\",\"position\":[1000,-100],\"parameters\":{\"url\":\"=https://api.supadata.ai/v1/youtube/transcript?url={{ $json.text }}&text=true&lang=pt\",\"options\":{\"timeout\":300000},\"sendHeaders\":true,\"headerParameters\":{\"parameters\":[{\"name\":\"x-api-key\",\"value\":\"SUPADATA_API_KEY\"}]}},\"executeOnce\":false,\"notesInFlow\":false,\"retryOnFail\":false,\"typeVersion\":4.2,\"alwaysOutputData\":false},{\"id\":\"3fce199e-2e95-40a8-a78e-20a25c3f4300\",\"name\":\"OpenAI\",\"type\":\"@n8n/n8n-nodes-langchain.openAi\",\"onError\":\"continueErrorOutput\",\"position\":[1460,20],\"parameters\":{\"modelId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gpt-4o-mini-2024-07-18\",\"cachedResultName\":\"GPT-4O-MINI-2024-07-18\"},\"options\":{},\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are an expert in grammar corrections and textual structuring.\\n\\nCorrect the classification of the provided text, adding commas, periods, question marks and other symbols necessary for natural and consistent reading. Do not change any words, just adjust the punctuation according to the grammatical rules and context.\\n\\nOrganize your content using markdown, structuring it with titles, subtitles, lists or other protected elements to clearly highlight the topics and information captured. Leave it in Portuguese and remember to always maintain the original formatting.\\n\\nTextual organization should always be a priority according to the content of the text, as well as the appropriate title, which must make sense.\"},{\"content\":\"={{ $json.content }}\"}]}},\"credentials\":{\"openAiApi\":{\"id\":\"GpAe9wonPZjokqpc\",\"name\":\"OpenAi account\"}},\"retryOnFail\":true,\"typeVersion\":1.8}],\"active\":true,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"d2f6a7fb-f3e1-462f-8627-7f67cc7bfa5b\",\"connections\":{\"If\":{\"main\":[[{\"node\":\"HTTP Request\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Respond to Webhook - Chat Message\",\"type\":\"main\",\"index\":0}]]},\"Code\":{\"main\":[[{\"node\":\"If\",\"type\":\"main\",\"index\":0}]]},\"OpenAI\":{\"main\":[[{\"node\":\"Edit Fields - Respond to Chat Message 3\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Edit Fields - Respond to Chat Message 4\",\"type\":\"main\",\"index\":0}]]},\"HTTP Request\":{\"main\":[[{\"node\":\"OpenAI\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Edit Fields - Respond to Chat Message 2\",\"type\":\"main\",\"index\":0}]]},\"When chat message received\":{\"main\":[[{\"node\":\"Code\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "![image.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_99f4e2a04b.png)\n\n## About:\n\nThis workflow automates the transcription of YouTube videos by processing a video URL provided via a chat message. Designed for users who need quick access to video content in text form, this workflow ensures a seamless experience for transcribing videos on demand, regardless of the topic.\n\n## Who is this for?\n\nThis workflow is designed for individuals who need quick and accurate transcriptions of YouTube videos without watching them in full. It is particularly useful for:\n\n  * Students who need text-based notes from educational videos.\n\n  * Researchers looking to extract information from lectures or discussions.\n\n  * Professionals who prefer reading over watching videos.\n\n  * Casual users who want an efficient way to summarize video content.\n\n\n\n\n## What problem is this workflow solving?\n\nManually transcribing YouTube videos is time-consuming and prone to errors. Watching long videos just to extract key information is inefficient. This workflow automates transcription, allowing users to quickly convert video content into text. Use cases include:\n\n  * Summarizing lectures or webinars.\n\n  * Extracting insights from interviews and discussions.\n\n  * Creating searchable text from video content.\n\n  * Generating reference material without watching entire videos.\n\n\n\n\n## What This Workflow Does?\n\nThis workflow automates the transcription of YouTube videos by:\n\n  1. **Accepting Input:** User provide a YouTube video URL through a chat message.\n\n  2. **Processing the Video:** It utilizes an external transcription service to retrieve the full transcript of the YouTube video from the provided URL.\n\n  3. **Enhancing Output:** An AI model (OpenAI) refines the transcription for accuracy and readability.\n\n  4. **Delivering Results:** The final text transcript is returned to the user via the chat interface.\n\n\n\n\n## Setup:\n\n  1. **Install n8n:** Ensure you have n8n installed and running.\n\n  2. **Import the Workflow:** Copy the JSON workflow file into your n8n instance.\n\n  3. **Configure API Keys:**\n\n     * Set up your Supadata ([Supadata](https://supadata.ai)) API key for transcription.\n\n     * Configure the OpenAI ([OpenAI](https://platform.openai.com/api-keys)) API key for additional processing.\n\n  4. **Run the Workflow:** Provide a YouTube video URL and receive a transcription in response.\n\n\n\n\n## How to customize this workflow to your needs:\n\nThe workflow is flexible and can be tailored to suit specific requirements. Here are some customization ideas:\n\n  * **Language Support:** Adjust the transcription language in both the HTTP Request and OpenAI nodes to support transcriptions in different languages (e.g., French, German).\n\n  * **Integrate with Other Services:** Store transcriptions in a database, send them via email, or connect with a document management system.\n\n  * **Notification:** Add a notification node (e.g., email or Slack) to alert you when the transcription is complete, especially for long videos.\n\n  * **Quality Check:** Integrate an additional AI step to summarize or highlight key points in the transcript for quicker insights.\n\n\n\n\nThis workflow is designed to be scalable, efficient, and adaptable to various transcription needs.\n\n## Limitations\n\n  * **Video Length Limitation:** Very long videos may not have a complete transcription due to constraints in processing capacity or service limitations.\n\n  * **Transcription Dependency:** The accuracy of the transcription relies entirely on the presence of video captions or subtitles. If a video lacks these, no transcription will be generated.\n\n  * **Access Restrictions:** Private or restricted YouTube videos may not be accessible for transcription due to permission limitations.\n\n  * **Processing Time:** The time required to process a video can vary significantly, especially for longer videos, depending on the transcription service and server resources.\n\n  * **Regional Restrictions:** Some YouTube videos may have geographic or regional access limitations, which could prevent the workflow from retrieving the content for transcription.\n\n\n\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><p><img src=\"https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_99f4e2a04b.png\" alt=\"image.png\"></p>\n<h2>About:</h2>\n<p>This workflow automates the transcription of YouTube videos by processing a video URL provided via a chat message. Designed for users who need quick access to video content in text form, this workflow ensures a seamless experience for transcribing videos on demand, regardless of the topic.</p>\n<h2>Who is this for?</h2>\n<p>This workflow is designed for individuals who need quick and accurate transcriptions of YouTube videos without watching them in full. It is particularly useful for:</p>\n<ul>\n<li>\n<p>Students who need text-based notes from educational videos.</p>\n</li>\n<li>\n<p>Researchers looking to extract information from lectures or discussions.</p>\n</li>\n<li>\n<p>Professionals who prefer reading over watching videos.</p>\n</li>\n<li>\n<p>Casual users who want an efficient way to summarize video content.</p>\n</li>\n</ul>\n<h2>What problem is this workflow solving?</h2>\n<p>Manually transcribing YouTube videos is time-consuming and prone to errors. Watching long videos just to extract key information is inefficient. This workflow automates transcription, allowing users to quickly convert video content into text. Use cases include:</p>\n<ul>\n<li>\n<p>Summarizing lectures or webinars.</p>\n</li>\n<li>\n<p>Extracting insights from interviews and discussions.</p>\n</li>\n<li>\n<p>Creating searchable text from video content.</p>\n</li>\n<li>\n<p>Generating reference material without watching entire videos.</p>\n</li>\n</ul>\n<h2>What This Workflow Does?</h2>\n<p>This workflow automates the transcription of YouTube videos by:</p>\n<ol>\n<li>\n<p><strong>Accepting Input:</strong> User provide a YouTube video URL through a chat message.</p>\n</li>\n<li>\n<p><strong>Processing the Video:</strong> It utilizes an external transcription service to retrieve the full transcript of the YouTube video from the provided URL.</p>\n</li>\n<li>\n<p><strong>Enhancing Output:</strong> An AI model (OpenAI) refines the transcription for accuracy and readability.</p>\n</li>\n<li>\n<p><strong>Delivering Results:</strong> The final text transcript is returned to the user via the chat interface.</p>\n</li>\n</ol>\n<h2>Setup:</h2>\n<ol>\n<li>\n<p><strong>Install n8n:</strong> Ensure you have n8n installed and running.</p>\n</li>\n<li>\n<p><strong>Import the Workflow:</strong> Copy the JSON workflow file into your n8n instance.</p>\n</li>\n<li>\n<p><strong>Configure API Keys:</strong></p>\n<ul>\n<li>\n<p>Set up your Supadata (<a href=\"https://supadata.ai\" rel=\"ugc nofollow\" target=\"_blank\">Supadata</a>) API key for transcription.</p>\n</li>\n<li>\n<p>Configure the OpenAI (<a href=\"https://platform.openai.com/api-keys\" rel=\"ugc nofollow\" target=\"_blank\">OpenAI</a>) API key for additional processing.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Run the Workflow:</strong> Provide a YouTube video URL and receive a transcription in response.</p>\n</li>\n</ol>\n<h2>How to customize this workflow to your needs:</h2>\n<p>The workflow is flexible and can be tailored to suit specific requirements. Here are some customization ideas:</p>\n<ul>\n<li>\n<p><strong>Language Support:</strong> Adjust the transcription language in both the HTTP Request and OpenAI nodes to support transcriptions in different languages (e.g., French, German).</p>\n</li>\n<li>\n<p><strong>Integrate with Other Services:</strong> Store transcriptions in a database, send them via email, or connect with a document management system.</p>\n</li>\n<li>\n<p><strong>Notification:</strong> Add a notification node (e.g., email or Slack) to alert you when the transcription is complete, especially for long videos.</p>\n</li>\n<li>\n<p><strong>Quality Check:</strong> Integrate an additional AI step to summarize or highlight key points in the transcript for quicker insights.</p>\n</li>\n</ul>\n<p>This workflow is designed to be scalable, efficient, and adaptable to various transcription needs.</p>\n<h2>Limitations</h2>\n<ul>\n<li>\n<p><strong>Video Length Limitation:</strong> Very long videos may not have a complete transcription due to constraints in processing capacity or service limitations.</p>\n</li>\n<li>\n<p><strong>Transcription Dependency:</strong> The accuracy of the transcription relies entirely on the presence of video captions or subtitles. If a video lacks these, no transcription will be generated.</p>\n</li>\n<li>\n<p><strong>Access Restrictions:</strong> Private or restricted YouTube videos may not be accessible for transcription due to permission limitations.</p>\n</li>\n<li>\n<p><strong>Processing Time:</strong> The time required to process a video can vary significantly, especially for longer videos, depending on the transcription service and server resources.</p>\n</li>\n<li>\n<p><strong>Regional Restrictions:</strong> Some YouTube videos may have geographic or regional access limitations, which could prevent the workflow from retrieving the content for transcription.</p>\n</li>\n</ul>\n</div><!--]-->",
  "readme_zh": "![image.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_99f4e2a04b.png)\n\n## 关于：\n\n本工作流通过处理聊天消息中提供的视频URL，实现YouTube视频的自动转录。专为需要快速获取视频文字内容的用户设计，无论视频主题如何，都能按需提供流畅的视频转录体验。\n\n## 适用人群？\n\n本工作流适合需要快速准确获取YouTube视频文字转录而无需完整观看视频的人群，尤其适用于：\n\n  * 需要从教学视频获取文字笔记的学生\n  * 需要从讲座或讨论中提取信息的研究人员\n  * 更倾向阅读而非观看视频的职场人士\n  * 希望高效获取视频内容摘要的普通用户\n\n## 解决什么问题？\n\n手动转录YouTube视频耗时且易出错，为提取关键信息而观看长视频效率低下。本工作流实现自动转录，帮助用户快速将视频内容转化为文字。典型场景包括：\n\n  * 总结讲座或网络研讨会内容\n  * 从访谈讨论中提取核心观点\n  * 创建可搜索的视频文字档案\n  * 无需观看完整视频即可生成参考资料\n\n## 功能说明\n\n本工作流通过以下步骤实现自动化转录：\n\n  1. **接收输入**：用户通过聊天消息提交YouTube视频URL\n  2. **视频处理**：调用外部转录服务获取视频完整字幕\n  3. **优化输出**：通过AI模型（OpenAI）提升转录准确性和可读性\n  4. **交付结果**：最终文字转录通过聊天界面返回用户\n\n## 设置指南：\n\n  1. **安装n8n**：确保已安装并运行n8n\n  2. **导入工作流**：将JSON工作流文件导入n8n实例\n  3. **配置API密钥**：\n     * 设置Supadata转录API密钥（[官网](https://supadata.ai)）\n     * 配置OpenAI处理API密钥（[平台](https://platform.openai.com/api-keys)）\n  4. **运行工作流**：提交YouTube视频URL即可获取转录文本\n\n## 自定义建议\n\n本工作流具有高度灵活性，可根据需求调整：\n\n  * **多语言支持**：在HTTP请求和OpenAI节点中调整转录语言（如法语、德语等）\n  * **服务集成**：将转录文本存储至数据库、通过邮件发送或对接文档管理系统\n  * **通知功能**：添加邮件/Slack通知节点，特别针对长视频转录完成时提醒\n  * **质量优化**：集成AI摘要功能自动提取转录文本关键点\n\n本工作流设计具备可扩展性、高效性和适应性，可满足多样化转录需求。\n\n## 使用限制\n\n  * **视频时长**：超长视频可能因处理能力或服务限制无法完整转录\n  * **字幕依赖**：转录准确性完全依赖视频是否包含字幕/CC字幕，无字幕视频无法生成转录\n  * **访问权限**：私有或受限YouTube视频可能因权限问题无法转录\n  * **处理时效**：视频处理时间因长度不同存在波动，取决于转录服务和服务器资源\n  * **区域限制**：受地理封锁的YouTube视频可能无法获取内容进行转录",
  "title_zh": "通过聊天界面实现AI增强的YouTube视频转录",
  "publish_date_zh": "最后一次更新于一个月前",
  "workflow_json_zh": "{\n  \"id\": \"Iz8TMdlc6JhaKkd9\",\n  \"meta\": {\n    \"instanceId\": \"dacfda6d2e1dbefe99a005845405509e9929b16710017f4bd5d2bf758941295c\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"YouTube Video Transcriber\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"a4e2f554-ebae-41df-912a-0d1081fa1736\",\n      \"name\": \"When chat message received\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",\n      \"position\": [\n        -100,\n        -60\n      ],\n      \"webhookId\": \"70129cbe-1a05-495f-bd92-18d36c1bc260\",\n      \"parameters\": {\n        \"public\": true,\n        \"options\": {\n          \"title\": \"Youtube Video Transcriber 🚀\",\n          \"subtitle\": \"Have a great transcription!  📖\",\n          \"inputPlaceholder\": \"Insert a URL of a YouTube video.  💻\"\n        },\n        \"initialMessages\": \"Give me a URL of a video from YouTube to start! 👍\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"34b2b12e-0eb5-4f59-bd30-e7b595d06b8c\",\n      \"name\": \"Code\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        280,\n        -60\n      ],\n      \"parameters\": {\n        \"language\": \"python\",\n        \"pythonCode\": \"import re\\n\\ndef youtube_video_url_validatior(video_url) -> str:\\n  try:\\n    if not video_url:\\n      return {\\\"text\\\": 'URL from the video is required.', \\\"is_valid\\\": False}\\n    \\n    video_url: str = re.sub(r\\\"\\\\s{2,}\\\", \\\" \\\", video_url.strip())\\n    \\n    if not video_url:\\n      return {\\\"text\\\": 'URL from the video is required.', \\\"is_valid\\\": False}\\n    \\n    if len(video_url) < 25:\\n      return {\\\"text\\\": 'URL is too short to be a valid YouTube URL.', \\\"is_valid\\\": False}\\n    \\n    # if not re.match(r'^[A-Za-z0-9:/._?&=-]+$', video_url):\\n    #   return {\\\"text\\\": 'URL contains invalid characters.', \\\"is_valid\\\": False}\\n    \\n    is_valid: bool = False\\n    \\n    for pattern in [\\n        r'^https?://(?:www\\\\.)?youtube\\\\.com/watch\\\\?v=[\\\\w-]{11}',\\n        r'^https?://youtu\\\\.be/[\\\\w-]{11}',\\n        r'^https?://(?:www\\\\.)?youtube\\\\.com/embed/[\\\\w-]{11}',\\n        r'^https?://(?:www\\\\.)?youtube\\\\.com/v/[\\\\w-]{11}',\\n    ]:\\n        if re.match(pattern, video_url):\\n          is_valid = True\\n          \\n          break\\n    \\n    if not is_valid:\\n      return {\\\"text\\\": 'Invalid YouTube URL format.', \\\"is_valid\\\": False}\\n      \\n    video_url_id: str | None = re.search(r'(?:v=|youtu\\\\.be/|embed/|v/)([\\\\w-]{11})', video_url).group(1)\\n    \\n    if not video_url_id or not re.match(r'^[\\\\w-]{11}$', video_url_id):\\n      return {\\\"text\\\": 'Invalid YouTube video ID.', \\\"is_valid\\\": False}\\n    \\n    return {\\\"text\\\": video_url, \\\"is_valid\\\": True}\\n  except Exception as ex:\\n    raise ex\\n\\nreturn youtube_video_url_validatior(_input.first().json.chatInput)\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"712cbf28-df12-44fc-b54a-bc21e13e55e7\",\n      \"name\": \"If\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        600,\n        -240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"loose\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"b8927a53-2755-4364-84b1-5340c5c31af5\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"true\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.is_valid }}\",\n              \"rightValue\": \"\"\n            }\n          ]\n        },\n        \"looseTypeValidation\": true\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"be9e1903-25bc-4f1b-8793-5e657205dd5d\",\n      \"name\": \"Respond to Webhook - Chat Message\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        600,\n        60\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"respondWith\": \"text\",\n        \"responseBody\": \"={{ $json.text }}\"\n      },\n      \"retryOnFail\": true,\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"98bc7747-e688-4683-8686-ca44023f8648\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -200,\n        -240\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 300,\n        \"height\": 420,\n        \"content\": \"## 入口点\\n\\n工作流的入口点是节点聊天消息。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7ca94ab6-7306-4b04-8b34-eb9e0937d681\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        180,\n        -240\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 300,\n        \"height\": 420,\n        \"content\": \"## 验证 - 网址\\n\\n该节点确保只有有效的YouTube视频网址才能通过。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c719c022-b55b-42b3-ab5f-36c0e1d62512\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1360,\n        -320\n      ],\n      \"parameters\": {\n        \"color\": 4,\n        \"width\": 460,\n        \"height\": 560,\n        \"content\": \"## 数据结构化\\n\\n这是工作流程的核心环节，通过结构化处理将数据转换为适合应答的规范格式。\\n\\n**注意事项：**\\n\\n1. 使用本模板时，必须根据预期输出结果调整OpenAI提示词中的语言设置。\\n\\n2. 必须正确配置OpenAI API密钥以支持数据结构化处理，此为核心必要条件。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7e1fa50f-7bd3-4bed-8537-969baa4c61de\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        820,\n        -480\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 460,\n        \"height\": 900,\n        \"content\": \"## Supadata  \\n\\nSupadata 是一款强大的工具，通过简单的 API 将 YouTube 视频链接转化为结构化数据。它能高效提取视频转录文本，是 AI 训练、数据分析或文本类应用的理想选择。  \\n\\n**注意事项：**  \\n\\n1. 使用此模板时，用户需根据需求调整查询参数中的语言设置。  \\n\\n2. 必须配置有效的 API 密钥才能确保工作流正常运行。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"35bf3191-4113-4a92-85a8-b22d3b2a4134\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -920,\n        -180\n      ],\n      \"parameters\": {\n        \"width\": 640,\n        \"height\": 300,\n        \"content\": \"## 功能说明\\n\\n本工作流简化了YouTube视频内容的获取流程，将其转化为清晰简洁的文字转录，为追求高效的用户提供理想解决方案。它能直接转录YouTube视频并返回文本内容，省去观看完整视频的必要性。\\n\\n这一工作流的诞生源于学习场景中的实际需求——在快节奏的日常生活里，阅读转录文本比观看完整视频能更快速高效地制作内容摘要。时间限制常使人难以看完整个视频，而文字形式可加速信息吸收。该方案为用户提供了无缝访问和复习任意YouTube视频内容的途径，不受主题限制。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2ea0b992-231b-4f6d-9f6f-9f488d266cfb\",\n      \"name\": \"Edit Fields - Respond to Chat Message 2\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1000,\n        180\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"66270798-60eb-4ab8-8572-ab957474e260\",\n              \"name\": \"text\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.error }} - {{ $json.message }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"9846e903-015a-4111-b582-572d473fe4d3\",\n      \"name\": \"Edit Fields - Respond to Chat Message 3\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1900,\n        -320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"97e0c175-8060-43da-9761-5c25d660c7ed\",\n              \"name\": \"text\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.message.content }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"775e067c-3518-4c64-a939-5f9b9b435b3c\",\n      \"name\": \"Edit Fields - Respond to Chat Message 4\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1900,\n        100\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"66270798-60eb-4ab8-8572-ab957474e260\",\n              \"name\": \"text\",\n              \"type\": \"string\",\n              \"value\": \"=Something went wrong with the data structuring.\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"91e22fcc-79b8-48d2-ba6e-bfb699ed9a07\",\n      \"name\": \"HTTP Request\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        1000,\n        -100\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.supadata.ai/v1/youtube/transcript?url={{ $json.text }}&text=true&lang=pt\",\n        \"options\": {\n          \"timeout\": 300000\n        },\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"x-api-key\",\n              \"value\": \"SUPADATA_API_KEY\"\n            }\n          ]\n        }\n      },\n      \"executeOnce\": false,\n      \"notesInFlow\": false,\n      \"retryOnFail\": false,\n      \"typeVersion\": 4.2,\n      \"alwaysOutputData\": false\n    },\n    {\n      \"id\": \"3fce199e-2e95-40a8-a78e-20a25c3f4300\",\n      \"name\": \"OpenAI\",\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        1460,\n        20\n      ],\n      \"parameters\": {\n        \"modelId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gpt-4o-mini-2024-07-18\",\n          \"cachedResultName\": \"GPT-4O-MINI-2024-07-18\"\n        },\n        \"options\": {},\n        \"messages\": {\n          \"values\": [\n            {\n              \"role\": \"system\",\n              \"content\": \"You are an expert in grammar corrections and textual structuring.\\n\\nCorrect the classification of the provided text, adding commas, periods, question marks and other symbols necessary for natural and consistent reading. Do not change any words, just adjust the punctuation according to the grammatical rules and context.\\n\\nOrganize your content using markdown, structuring it with titles, subtitles, lists or other protected elements to clearly highlight the topics and information captured. Leave it in Portuguese and remember to always maintain the original formatting.\\n\\nTextual organization should always be a priority according to the content of the text, as well as the appropriate title, which must make sense.\"\n            },\n            {\n              \"content\": \"={{ $json.content }}\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"GpAe9wonPZjokqpc\",\n          \"name\": \"OpenAi account\"\n        }\n      },\n      \"retryOnFail\": true,\n      \"typeVersion\": 1.8\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"d2f6a7fb-f3e1-462f-8627-7f67cc7bfa5b\",\n  \"connections\": {\n    \"If\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"HTTP Request\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Respond to Webhook - Chat Message\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Edit Fields - Respond to Chat Message 3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Edit Fields - Respond to Chat Message 4\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"HTTP Request\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"OpenAI\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Edit Fields - Respond to Chat Message 2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When chat message received\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}