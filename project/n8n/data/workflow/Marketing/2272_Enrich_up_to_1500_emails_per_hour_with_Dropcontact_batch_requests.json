{
  "title": "Enrich up to 1500 emails per hour with Dropcontact batch requests",
  "url": "https://n8n.io/workflows/2272-enrich-up-to-1500-emails-per-hour-with-dropcontact-batch-requests/",
  "category": "Marketing",
  "category_url": "https://n8n.io/workflows/categories/marketing/?sort=createdAt:desc",
  "author": "victor de coster",
  "publish_date": "Last update a year ago",
  "publish_date_absolute": "",
  "content": "",
  "workflow_json": "",
  "readme": "The template allows to make Dropcontact batch requests up to 250 requests every 10 minutes (1500/hour). Valuable if high volume email enrichment is expected.\n\nDropcontact will look for email & basic email qualification if first_name, last_name, company_name is provided.\n\n+++++++++++++++++++++++++++++++++++++++++\n\nStep 1:  \nNode \"Profiles Query\"  \nConnect your own source (Airtable, Google Sheets, Supabase,...) the template is using Postgres by default.\n\n* * *\n\nNote I:  \nBe careful your source is only returning a maximum of 250 items.\n\n* * *\n\nNote II:  \nThe next node uses the next variables, make sure you can map these from your source file:\n\n  * first_name\n  * last_name\n  * website (company_name would work too)\n  * full_name (see note)\n\n\n\n* * *\n\nNote III:  \nThis template is using the Dropcontact Batch API, which works in a POST & GET setup. Not a GET request only to retrieve data, as Dropcontact needs to process the batch data load properly.\n\n+++++++++++++++++++++++++++++++++++++++++\n\nStep 2:  \nNode \"Data Transformation\"  \nWill transform the input variables in the proper json format. This json format is expected from the Dropcontact API to make a batch request.\n\n\"full_name\" is being used as a custom identifier to update the returned email to the proper contact in your source database.\n\nTo make things easy, use a unique identiefer in the full_name variable.\n\n+++++++++++++++++++++++++++++++++++++++++\n\nStep3:  \nNode: \"Bulk Dropcontact Requests\".  \nEnter your Dropcontact credentials in the node: Bulk Dropcontact Requests.\n\n+++++++++++++++++++++++++++++++++++++++++\n\nStep4:  \nConnect your output source by mapping the data you like to use.\n\n+++++++++++++++++++++++++++++++++++++++++\n\nStep5:  \nNode: \"Slack\" (OPTIONAL)  \nConnect your slack account, if an error occur, you will be notified.\n\n* * *\n\nTIP: Try to run the workflow with a batch of 10 (not 250) as it might need to run initially before you will be able to map the data to your final destination. Once the data fields are properly mapped, adjust back to 250.\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><p>The template allows to make Dropcontact batch requests up to 250 requests every 10 minutes (1500/hour). Valuable if high volume email enrichment is expected.</p>\n<p>Dropcontact will look for email &amp; basic email qualification if first_name, last_name, company_name is provided.</p>\n<p>+++++++++++++++++++++++++++++++++++++++++</p>\n<p>Step 1:<br>\nNode \"Profiles Query\"<br>\nConnect your own source (Airtable, Google Sheets, Supabase,...) the template is using Postgres by default.</p>\n<hr>\n<p>Note I:<br>\nBe careful your source is only returning a maximum of 250 items.</p>\n<hr>\n<p>Note II:<br>\nThe next node uses the next variables, make sure you can map these from your source file:</p>\n<ul>\n<li>first_name</li>\n<li>last_name</li>\n<li>website (company_name would work too)</li>\n<li>full_name (see note)</li>\n</ul>\n<hr>\n<p>Note III:<br>\nThis template is using the Dropcontact Batch API, which works in a POST &amp; GET setup. Not a GET request only to retrieve data, as Dropcontact needs to process the batch data load properly.</p>\n<p>+++++++++++++++++++++++++++++++++++++++++</p>\n<p>Step 2:<br>\nNode \"Data Transformation\"<br>\nWill transform the input variables in the proper json format. This json format is expected from the Dropcontact API to make a batch request.</p>\n<p>\"full_name\" is being used as a custom identifier to update the returned email to the proper contact in your source database.</p>\n<p>To make things easy, use a unique identiefer in the full_name variable.</p>\n<p>+++++++++++++++++++++++++++++++++++++++++</p>\n<p>Step3:<br>\nNode: \"Bulk Dropcontact Requests\".<br>\nEnter your Dropcontact credentials in the node: Bulk Dropcontact Requests.</p>\n<p>+++++++++++++++++++++++++++++++++++++++++</p>\n<p>Step4:<br>\nConnect your output source by mapping the data you like to use.</p>\n<p>+++++++++++++++++++++++++++++++++++++++++</p>\n<p>Step5:<br>\nNode: \"Slack\" (OPTIONAL)<br>\nConnect your slack account, if an error occur, you will be notified.</p>\n<hr>\n<p>TIP: Try to run the workflow with a batch of 10 (not 250) as it might need to run initially before you will be able to map the data to your final destination. Once the data fields are properly mapped, adjust back to 250.</p>\n</div><!--]-->",
  "readme_zh": "该模板支持每10分钟批量发起最多250次Dropcontact请求（每小时1500次）。适用于需要大规模邮箱信息补全的场景。\n\n当提供first_name（名）、last_name（姓）、company_name（公司名称）时，Dropcontact将自动查找邮箱及基础邮箱验证信息。\n\n+++++++++++++++++++++++++++++++++++++++++\n\n第一步：  \n节点「资料查询」  \n连接您的数据源（Airtable、Google Sheets、Supabase等），模板默认使用Postgres。\n\n* * *\n\n注意I：  \n确保数据源每次返回不超过250条记录。\n\n* * *\n\n注意II：  \n后续节点需要使用以下变量，请确认数据源包含对应字段：\n\n  * first_name（名）\n  * last_name（姓）\n  * website（公司官网，company_name也可替代）\n  * full_name（完整姓名，参见备注）\n\n* * *\n\n注意III：  \n本模板调用的是Dropcontact批量API，采用POST+GET双流程设计（非单纯GET请求），以确保批量数据能被正确处理。\n\n+++++++++++++++++++++++++++++++++++++++++\n\n第二步：  \n节点「数据转换」  \n将输入变量转换为标准json格式，该格式为Dropcontact批量API所需。\n\n\"full_name\"将作为自定义标识符，用于将返回的邮箱信息匹配至数据源中的对应联系人。\n\n建议在full_name变量中使用唯一标识符以简化流程。\n\n+++++++++++++++++++++++++++++++++++++++++\n\n第三步：  \n节点「批量Dropcontact请求」  \n在节点中输入您的Dropcontact账户凭证。\n\n+++++++++++++++++++++++++++++++++++++++++\n\n第四步：  \n通过字段映射连接您的输出数据源。\n\n+++++++++++++++++++++++++++++++++++++++++\n\n第五步：  \n节点「Slack通知」（可选）  \n绑定Slack账户后可接收错误警报。\n\n* * *\n\n技巧：首次运行时建议将批量值设为10（而非250），待完成字段映射调试后再恢复250的批量上限。",
  "title_zh": "通过Dropcontact批量请求功能，每小时可丰富多达1500封邮件的资料",
  "publish_date_zh": "最后一次更新于一年前"
}