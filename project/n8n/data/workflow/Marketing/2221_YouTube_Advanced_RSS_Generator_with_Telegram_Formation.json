{
  "title": "YouTube Advanced RSS Generator with Telegram Formation",
  "url": "https://n8n.io/workflows/2221-youtube-advanced-rss-generator-with-telegram-formation/",
  "category": "Marketing",
  "category_url": "https://n8n.io/workflows/categories/marketing/?sort=createdAt:desc",
  "author": "Nskha",
  "publish_date": "Last update a year ago",
  "publish_date_absolute": "",
  "content": "",
  "workflow_json": "{\"meta\":{},\"name\":\"[n8n] YouTube Channel Advanced RSS Feeds Generator\",\"tags\":[{\"id\":\"Q29tbWVudHBpY2tlcg\",\"name\":\"Commentpicker\",\"createdAt\":\"2024-04-16T14:29:17.942Z\",\"updatedAt\":\"2024-04-16T14:29:17.942Z\"},{\"id\":\"Rm9ybVRyaWdnZXI\",\"name\":\"FormTrigger\",\"createdAt\":\"2024-04-16T14:29:17.942Z\",\"updatedAt\":\"2024-04-16T14:29:17.942Z\"},{\"id\":\"SHR0cFJlcXVlc3Q\",\"name\":\"HttpRequest\",\"createdAt\":\"2024-04-16T14:29:17.942Z\",\"updatedAt\":\"2024-04-16T14:29:17.942Z\"},{\"id\":\"QWdncmVnYXRl\",\"name\":\"Aggregate\",\"createdAt\":\"2024-04-16T14:29:17.942Z\",\"updatedAt\":\"2024-04-16T14:29:17.942Z\"},{\"id\":\"UmVzcG9uZFRvV2ViaG9vaw\",\"name\":\"RespondToWebhook\",\"createdAt\":\"2024-04-16T14:29:17.942Z\",\"updatedAt\":\"2024-04-16T14:29:17.942Z\"},{\"id\":\"Q29kZQ\",\"name\":\"Code\",\"createdAt\":\"2024-04-16T14:29:17.942Z\",\"updatedAt\":\"2024-04-16T14:29:17.942Z\"}],\"nodes\":[{\"name\":\"n8n Form Trigger\",\"type\":\"n8n-nodes-base.formTrigger\",\"position\":[-300,-260],\"webhookId\":\"68a70315-9f74-4cf5-9c68-828396b0f23b\",\"parameters\":{\"path\":\"Youtube\",\"formTitle\":\"Youtube RSS Generator\",\"formFields\":{\"values\":[{\"fieldLabel\":\"youtube Channel username or ID\",\"requiredField\":true}]},\"responseMode\":\"responseNode\",\"formDescription\":\"=Youtube Username Example: @username\\n\\nYoutube ID Example: UCxxxxxxxxxxxxxxxxxx\\n\\nYoutube Video URL Example 1: https://www.youtube.com/watch?v=mn-br82ENxc\\n\\nYoutube Video URL Example 2: https://youtu.be/mn-br82ENxc\\n\\nYoutube Channel URL Example 1: https://www.youtube.com/@NewMedia_Life\\n\\nYoutube Channel URL Example 2: https://www.youtube.com/channel/UC_UDAiqQj-QfgTixKkW51qA\"},\"typeVersion\":2},{\"name\":\"Get Channel ID\",\"type\":\"n8n-nodes-base.httpRequest\",\"notes\":\"3rd party API request\",\"position\":[700,-440],\"parameters\":{\"url\":\"https://commentpicker.com/actions/youtube-channel-id.php\",\"options\":{\"response\":{\"response\":{\"responseFormat\":\"json\"}}},\"sendQuery\":true,\"sendHeaders\":true,\"queryParameters\":{\"parameters\":[{\"name\":\"url\",\"value\":\"=https://www.googleapis.com/youtube/v3/channels?part=id,snippet,statistics,contentDetails,status&forHandle={{ $item(\\\"0\\\").$node[\\\"Set Channel Username\\\"].json[\\\"channel name\\\"] }}\"},{\"name\":\"token\",\"value\":\"={{ $item(\\\"0\\\").$node[\\\"Get Temporary Token\\\"].json[\\\"data\\\"] }}\"},{\"name\":\"isPremium\",\"value\":\"false\"}]},\"headerParameters\":{\"parameters\":[{\"name\":\"authority\",\"value\":\"commentpicker.com\"},{\"name\":\"cookie\",\"value\":\"ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; ezoab_186623=mod99-c; active_template::186623=pub_site.1711138973; lp_186623=https://commentpicker.com/youtube-channel-id.php; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg\"},{\"name\":\"referer\",\"value\":\"https://commentpicker.com/youtube-channel-id.php\"},{\"name\":\"user-agent\",\"value\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0\"}]}},\"notesInFlow\":true,\"typeVersion\":4.1},{\"name\":\"Set XML URL\",\"type\":\"n8n-nodes-base.set\",\"notes\":\"🤖Generate XML Feed URL\",\"position\":[900,-440],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"bf0ea151-e325-4860-af02-76e51f692f2c\",\"name\":\"rss\",\"type\":\"string\",\"value\":\"=https://www.youtube.com/feeds/videos.xml?channel_id={{ $json.items[0].id }}\"}]}},\"notesInFlow\":true,\"typeVersion\":3.3},{\"name\":\"Set Channel Username\",\"type\":\"n8n-nodes-base.set\",\"position\":[520,-440],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"0837a847-4c6b-4b39-bb90-f200233bf7e1\",\"name\":\"channel name\",\"type\":\"string\",\"value\":\"={{ $item(\\\"0\\\").$node[\\\"Switch\\\"].json[\\\"value\\\"] }}\"}]}},\"typeVersion\":3.3},{\"name\":\"Set XML Feed URL\",\"type\":\"n8n-nodes-base.set\",\"notes\":\"🤖Generate XML Feed URL\",\"position\":[900,-260],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"bf0ea151-e325-4860-af02-76e51f692f2c\",\"name\":\"rss\",\"type\":\"string\",\"value\":\"=https://www.youtube.com/feeds/videos.xml?channel_id={{ $item(\\\"0\\\").$node[\\\"Switch\\\"].json[\\\"value\\\"] }}\"}]}},\"notesInFlow\":true,\"typeVersion\":3.3},{\"name\":\"Set Video ID\",\"type\":\"n8n-nodes-base.set\",\"position\":[520,-80],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"0837a847-4c6b-4b39-bb90-f200233bf7e1\",\"name\":\"Video ID\",\"type\":\"string\",\"value\":\"={{ $item(\\\"0\\\").$node[\\\"Switch\\\"].json[\\\"value\\\"] }}\"}]}},\"typeVersion\":3.3},{\"name\":\"Get Video ID Channel ID\",\"type\":\"n8n-nodes-base.httpRequest\",\"notes\":\"3rd party API request\",\"position\":[700,-80],\"parameters\":{\"url\":\"https://commentpicker.com/actions/youtube-channel-id.php\",\"options\":{\"response\":{\"response\":{\"responseFormat\":\"json\"}}},\"sendQuery\":true,\"sendHeaders\":true,\"queryParameters\":{\"parameters\":[{\"name\":\"url\",\"value\":\"=https://www.googleapis.com/youtube/v3/videos?part=snippet&id={{ $json[\\\"Video ID\\\"] }}\"},{\"name\":\"token\",\"value\":\"={{ $item(\\\"0\\\").$node[\\\"GTT\\\"].json[\\\"data\\\"] }}\"},{\"name\":\"isPremium\",\"value\":\"true\"}]},\"headerParameters\":{\"parameters\":[{\"name\":\"authority\",\"value\":\"commentpicker.com\"},{\"name\":\"cookie\",\"value\":\"ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; ezoab_186623=mod99-c; active_template::186623=pub_site.1711138973; lp_186623=https://commentpicker.com/youtube-channel-id.php; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg\"},{\"name\":\"referer\",\"value\":\"https://commentpicker.com/youtube-channel-id.php\"},{\"name\":\"user-agent\",\"value\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0\"}]}},\"notesInFlow\":true,\"typeVersion\":4.1},{\"name\":\"Set XML Feed\",\"type\":\"n8n-nodes-base.set\",\"notes\":\"🤖Generate XML Feed URL\",\"position\":[900,-80],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"bf0ea151-e325-4860-af02-76e51f692f2c\",\"name\":\"rss\",\"type\":\"string\",\"value\":\"=https://www.youtube.com/feeds/videos.xml?channel_id={{ $item(\\\"0\\\").$node[\\\"Get Video ID Channel ID\\\"].json[\\\"items\\\"][\\\"0\\\"][\\\"snippet\\\"][\\\"channelId\\\"] }}\"}]}},\"notesInFlow\":true,\"typeVersion\":3.3},{\"name\":\"Get Temporary Token\",\"type\":\"n8n-nodes-base.httpRequest\",\"notes\":\"3rd party API request\",\"position\":[320,-440],\"parameters\":{\"url\":\"https://commentpicker.com/actions/token.php\",\"options\":{},\"sendHeaders\":true,\"headerParameters\":{\"parameters\":[{\"name\":\"authority\",\"value\":\"commentpicker.com\"},{\"name\":\"cookie\",\"value\":\"ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg; ezoab_186623=mod54-c; active_template::186623=pub_site.1711191989\"},{\"name\":\"referer\",\"value\":\"https://commentpicker.com/youtube-channel-id.php\"},{\"name\":\"user-agent\",\"value\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0\"}]}},\"notesInFlow\":true,\"typeVersion\":4.1},{\"name\":\"GTT\",\"type\":\"n8n-nodes-base.httpRequest\",\"notes\":\"3rd party API request\",\"position\":[320,-80],\"parameters\":{\"url\":\"https://commentpicker.com/actions/token.php\",\"options\":{},\"sendHeaders\":true,\"headerParameters\":{\"parameters\":[{\"name\":\"authority\",\"value\":\"commentpicker.com\"},{\"name\":\"cookie\",\"value\":\"ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg; ezoab_186623=mod54-c; active_template::186623=pub_site.1711191989\"},{\"name\":\"referer\",\"value\":\"https://commentpicker.com/youtube-channel-id.php\"},{\"name\":\"user-agent\",\"value\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0\"}]}},\"notesInFlow\":true,\"typeVersion\":4.1},{\"name\":\"Aggregate\",\"type\":\"n8n-nodes-base.aggregate\",\"notes\":\"🤖Combine results in one\",\"position\":[1080,-260],\"parameters\":{\"options\":{},\"fieldsToAggregate\":{\"fieldToAggregate\":[{\"renameField\":true,\"outputFieldName\":\"rss url\",\"fieldToAggregate\":\"rss\"}]}},\"notesInFlow\":true,\"typeVersion\":1},{\"name\":\"Youtube Channel Videos RSS Formats\",\"type\":\"n8n-nodes-base.set\",\"notes\":\"RSS Feed for channel Posts\",\"position\":[1260,-180],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"6af1de72-9940-4843-9a98-94e36b2878a3\",\"name\":\"=Videos - HTML format response\",\"type\":\"string\",\"value\":\"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Html\"},{\"id\":\"2b486723-1dff-4525-8169-6d977dee6862\",\"name\":\"Videos - ATOM format response\",\"type\":\"string\",\"value\":\"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Atom\"},{\"id\":\"10b3c04a-2c8c-4533-944b-13123bd22743\",\"name\":\"Videos - JSON format response\",\"type\":\"string\",\"value\":\"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Json\"},{\"id\":\"ee8910de-76ab-47a3-b23f-1a1e837fb885\",\"name\":\"Videos - MRSS format response\",\"type\":\"string\",\"value\":\"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Mrss\"},{\"id\":\"8684437c-11f0-4cc2-b9b2-00ecb6768175\",\"name\":\"Videos - TEXT format response\",\"type\":\"string\",\"value\":\"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Plaintext\"},{\"id\":\"a53d1d0a-bfd1-41f4-9ab3-edd1e20adaa2\",\"name\":\"Videos - SFEED format response\",\"type\":\"string\",\"value\":\"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Sfeed\"},{\"id\":\"d17fd2e0-0e4a-45c9-bc60-86ca6a7940d4\",\"name\":\"Videos - XML format response\",\"type\":\"string\",\"value\":\"={{ $json[\\\"rss url\\\"][\\\"0\\\"] }}\"}]}},\"notesInFlow\":true,\"typeVersion\":3.3},{\"name\":\"Youtube Channel Community RSS Formats\",\"type\":\"n8n-nodes-base.set\",\"notes\":\"RSS Feed for channel Posts\",\"position\":[1260,-400],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"6af1de72-9940-4843-9a98-94e36b2878a3\",\"name\":\"=Community - HTML format response\",\"type\":\"string\",\"value\":\"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&format=HTML\"},{\"id\":\"2b486723-1dff-4525-8169-6d977dee6862\",\"name\":\"Community - ATOM format response\",\"type\":\"string\",\"value\":\"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Atom\"},{\"id\":\"10b3c04a-2c8c-4533-944b-13123bd22743\",\"name\":\"Community - JSON format response\",\"type\":\"string\",\"value\":\"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Json\"},{\"id\":\"ee8910de-76ab-47a3-b23f-1a1e837fb885\",\"name\":\"Community - MRSS format response\",\"type\":\"string\",\"value\":\"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Mrss\"},{\"id\":\"8684437c-11f0-4cc2-b9b2-00ecb6768175\",\"name\":\"Community - TEXT format response\",\"type\":\"string\",\"value\":\"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Plaintext\"},{\"id\":\"a53d1d0a-bfd1-41f4-9ab3-edd1e20adaa2\",\"name\":\"Community - SFEED format response\",\"type\":\"string\",\"value\":\"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Sfeed\"}]}},\"notesInFlow\":true,\"typeVersion\":3.3},{\"name\":\"Respond to Webhook\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"notes\":\"Reply to the webhook request with table\",\"position\":[1900,-280],\"parameters\":{\"options\":{},\"respondWith\":\"text\",\"responseBody\":\"={{ $json[\\\"html\\\"] }}\"},\"notesInFlow\":true,\"typeVersion\":1},{\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-360,140],\"parameters\":{\"color\":7,\"width\":2425.409405354546,\"height\":200.24482670360715,\"content\":\"## ℹ️ **Workarounds And Information**\\n\\n### - **No need to acquire Google Cloud API** to retrieve channel data. I have implemented a free workaround method.\\n### - The workflow code has been **tested and proven to work** with all YouTube methods, whether for videos or channels. Regardless of whether you input URLs or usernames, the result will always be the channel ID.\\n### - Please be aware that the provided workarounds may become **obsolete or non-functional** in the future. I will ensure to stay updated; however, if this workflow does not work for you, please reach out to me on the n8n community.\\n### - We have utilized a 3rd party method to generate **multiple syntaxes of RSS feeds** as outlined below. (*The mentioned source is also capable of constructing multi-channel YouTube RSS feeds*, which I will create later for BULK channel RSS.)\"},\"typeVersion\":1},{\"name\":\"Switch\",\"type\":\"n8n-nodes-base.switch\",\"position\":[60,-260],\"parameters\":{\"rules\":{\"values\":[{\"outputKey\":\"Username\",\"conditions\":{\"options\":{\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"operator\":{\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.type }}\",\"rightValue\":\"channel username\"}]},\"renameOutput\":true},{\"outputKey\":\"Direct\",\"conditions\":{\"options\":{\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"5af4921b-6266-436a-901c-ab52de68aaf4\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.type }}\",\"rightValue\":\"=channel ID\"}]},\"renameOutput\":true},{\"outputKey\":\"Video-ID\",\"conditions\":{\"options\":{\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"a5baa5e6-879f-484a-b521-af802b6d79a9\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.type }}\",\"rightValue\":\"=video ID\"}]},\"renameOutput\":true}]},\"options\":{}},\"typeVersion\":3},{\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-360,-520],\"parameters\":{\"color\":3,\"width\":2429.6732915601406,\"height\":644.5128280596109,\"content\":\"## 🌐 **Generate RSS Feeds for Public Youtube Channel (No API Or Administrator permissions Required 😉)**\\n**``Yes, As you heard``** This Workflow using `3rd party` APIs & Solutions to get the job done. **``no need to setup anything``.**\\n\\n## Workflow Steps:\\n- Run **`Test Workflow`**.\\n- Enter Channel or Video URL or ID or Username.\\n- Finally, the result will provide **``13 URLs (6x Community + 6x Videos + 1 XML)``**:\\n  - 6 Formats Types is: `ATOM`, `JSON`, `MRSS`, `PLAINTEXT`, `SFEED`\\n  - The **``13th URL``** is from YouTube Directly that contain XML file data.\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n[![N8N Creator Profile](https://cdn.statically.io/gh/Automations-Project/n8n-templates/main/stats.min.svg)](https://n8n.io/creators/nskha)\"},\"typeVersion\":1},{\"name\":\"Validation Code\",\"type\":\"n8n-nodes-base.code\",\"notes\":\"🤓Validate the YouTube input\",\"position\":[-120,-260],\"parameters\":{\"jsCode\":\"// JavaScript code to extract YouTube channel ID, username, or video ID from a given input and return in n8n compatible format\\n\\n// Initialize an array to hold the output items\\nconst items = [];\\n\\n// Extract the input value from the previous node's output using the $input API\\nconst inputData = $input.all(); // Get all input data\\n// Assuming 'youtube Channel username or ID' is the correct key, and it's in the first input item\\nconst input = inputData.length > 0 ? inputData[0].json[\\\"youtube Channel username or ID\\\"] : null;\\n\\n// Check if input exists\\nif (!input) {\\n    throw new Error('Input is undefined or not provided');\\n}\\n\\n// Regular expressions for different YouTube URL and input formats\\nconst usernamePattern = /^@?([a-zA-Z0-9_-]+)$/;\\nconst channelIdPattern = /^(UC[a-zA-Z0-9_-]{22})$/; // Ensure channel ID starts with \\\"UC\\\"\\nconst videoUrlPattern1 = /(?:https?:\\\\/\\\\/)?www\\\\.youtube\\\\.com\\\\/watch\\\\?v=([a-zA-Z0-9_-]+)/;\\nconst videoUrlPattern2 = /(?:https?:\\\\/\\\\/)?youtu\\\\.be\\\\/([a-zA-Z0-9_-]+)/;\\nconst channelUrlPattern1 = /(?:https?:\\\\/\\\\/)?www\\\\.youtube\\\\.com\\\\/@([a-zA-Z0-9_-]+)/;\\nconst channelUrlPattern2 = /(?:https?:\\\\/\\\\/)?www\\\\.youtube\\\\.com\\\\/channel\\\\/(UC[a-zA-Z0-9_-]{22})/;\\nconst customChannelUrlPattern = /(?:https?:\\\\/\\\\/)?www\\\\.youtube\\\\.com\\\\/c\\\\/([a-zA-Z0-9_-]+)/; // Pattern for custom channel URLs\\n\\n// Function to determine the type and value of the input\\nfunction determineTypeAndValue(input) {\\n    if (channelIdPattern.test(input)) {\\n        return { type: 'channel ID', value: input };\\n    } else if (usernamePattern.test(input)) {\\n        return { type: 'channel username', value: input };\\n    } else if (videoUrlPattern1.test(input) || videoUrlPattern2.test(input)) {\\n        const videoId = videoUrlPattern1.test(input) ? input.match(videoUrlPattern1)[1] : input.match(videoUrlPattern2)[1];\\n        return { type: 'video ID', value: videoId };\\n    } else if (channelUrlPattern1.test(input) || customChannelUrlPattern.test(input)) {\\n        const username = channelUrlPattern1.test(input) ? input.match(channelUrlPattern1)[1] : input.match(customChannelUrlPattern)[1];\\n        return { type: 'channel username', value: username };\\n    } else if (channelUrlPattern2.test(input)) {\\n        return { type: 'channel ID', value: input.match(channelUrlPattern2)[1] };\\n    } else {\\n        return { error: 'Invalid input or unsupported format.' };\\n    }\\n}\\n\\n// Process the input and add the result to the items array\\nconst result = determineTypeAndValue(input);\\nitems.push({ json: result });\\n\\nreturn items; // Return the array of items\\n\"},\"notesInFlow\":true,\"typeVersion\":2},{\"name\":\"Format response as HTML Table\",\"type\":\"n8n-nodes-base.code\",\"position\":[1680,-280],\"parameters\":{\"jsCode\":\"// Assuming inputData is dynamically retrieved as follows\\nconst inputData = $item(\\\"0\\\").$node[\\\"Merga Data of Youtube & Community RSS\\\"].json;\\n\\n// Initialize HTML with a modern styled table\\nlet html = `\\n<style>\\n  table {\\n    width: 100%;\\n    border-collapse: collapse;\\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\\n    box-shadow: 0 2px 15px rgba(0,0,0,0.1);\\n    border-radius: 8px;\\n    overflow: hidden;\\n    margin-top: 20px;\\n  }\\n  th, td {\\n    border: 1px solid #ddd;\\n    padding: 8px 16px;\\n    text-align: left;\\n    color: #333;\\n  }\\n  th {\\n    background-color: #f0f0f0;\\n    color: #000;\\n    font-weight: 600;\\n  }\\n  tr:nth-child(even) {background-color: #f9f9f9;}\\n  tr:hover {background-color: #f1f1f1;}\\n  a {\\n    text-decoration: none;\\n    color: #0645AD;\\n  }\\n  a:hover {\\n    text-decoration: underline;\\n  }\\n</style>\\n<table>\\n<tr>\\n  <th>Type</th>\\n  <th>Format</th>\\n  <th>URL</th>\\n</tr>`;\\n\\n// Function to process each item and add it to the HTML table\\nObject.entries(inputData).forEach(([key, value]) => {\\n  // Extract type and format from the key, assuming key format 'Category - Format'\\n  const [type, format] = key.split(' - ');\\n  html += `<tr>\\n    <td>${type} RSS</td>\\n    <td>${format}</td>\\n    <td><a href=\\\"${value}\\\" target=\\\"_blank\\\">${value}</a></td>\\n  </tr>`;\\n});\\n\\n// Close the HTML table tag\\nhtml += `</table>`;\\n\\n// Return the HTML string as output\\nreturn [{json: {html: html}}];\\n\"},\"typeVersion\":2},{\"name\":\"Merga Data of Youtube & Community RSS\",\"type\":\"n8n-nodes-base.merge\",\"position\":[1480,-280],\"parameters\":{\"mode\":\"combine\",\"options\":{},\"combinationMode\":\"multiplex\"},\"typeVersion\":2.1}],\"active\":\"false\",\"pinData\":{},\"settings\":{\"timezone\":\"Asia/Baghdad\",\"callerPolicy\":\"workflowsFromSameOwner\",\"errorWorkflow\":\"\",\"executionOrder\":\"v1\",\"executionTimeout\":600,\"saveManualExecutions\":true,\"saveExecutionProgress\":true},\"staticData\":\"\",\"connections\":{\"GTT\":{\"main\":[[{\"node\":\"Set Video ID\",\"type\":\"main\",\"index\":0}]]},\"Switch\":{\"main\":[[{\"node\":\"Get Temporary Token\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Set XML Feed URL\",\"type\":\"main\",\"index\":0}],[{\"node\":\"GTT\",\"type\":\"main\",\"index\":0}]]},\"Aggregate\":{\"main\":[[{\"node\":\"Youtube Channel Community RSS Formats\",\"type\":\"main\",\"index\":0},{\"node\":\"Youtube Channel Videos RSS Formats\",\"type\":\"main\",\"index\":0}]]},\"Set XML URL\":{\"main\":[[{\"node\":\"Aggregate\",\"type\":\"main\",\"index\":0}]]},\"Set Video ID\":{\"main\":[[{\"node\":\"Get Video ID Channel ID\",\"type\":\"main\",\"index\":0}]]},\"Set XML Feed\":{\"main\":[[{\"node\":\"Aggregate\",\"type\":\"main\",\"index\":0}]]},\"Get Channel ID\":{\"main\":[[{\"node\":\"Set XML URL\",\"type\":\"main\",\"index\":0}]]},\"Validation Code\":{\"main\":[[{\"node\":\"Switch\",\"type\":\"main\",\"index\":0}]]},\"Set XML Feed URL\":{\"main\":[[{\"node\":\"Aggregate\",\"type\":\"main\",\"index\":0}]]},\"n8n Form Trigger\":{\"main\":[[{\"node\":\"Validation Code\",\"type\":\"main\",\"index\":0}]]},\"Get Temporary Token\":{\"main\":[[{\"node\":\"Set Channel Username\",\"type\":\"main\",\"index\":0}]]},\"Set Channel Username\":{\"main\":[[{\"node\":\"Get Channel ID\",\"type\":\"main\",\"index\":0}]]},\"Get Video ID Channel ID\":{\"main\":[[{\"node\":\"Set XML Feed\",\"type\":\"main\",\"index\":0}]]},\"Format response as HTML Table\":{\"main\":[[{\"node\":\"Respond to Webhook\",\"type\":\"main\",\"index\":0}]]},\"Youtube Channel Videos RSS Formats\":{\"main\":[[{\"node\":\"Merga Data of Youtube & Community RSS\",\"type\":\"main\",\"index\":1}]]},\"Merga Data of Youtube & Community RSS\":{\"main\":[[{\"node\":\"Format response as HTML Table\",\"type\":\"main\",\"index\":0}]]},\"Youtube Channel Community RSS Formats\":{\"main\":[[{\"node\":\"Merga Data of Youtube & Community RSS\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "[![Video Overview of template  YouTube Channel Advanced RSS Feeds Generator](https://img.youtube.com/vi_webp/EtzJmrmCiUY/maxresdefault.webp?s)](https://youtu.be/EtzJmrmCiUY)\n\n### Overview\n\nThe **[n8n] YouTube Channel Advanced RSS Feeds Generator** workflow facilitates the generation of various RSS feed formats for YouTube channels without requiring API access or administrative permissions. It utilizes third-party services to extract data, making it extremely user-friendly and accessible.\n\n### Key Use Cases and Benefits\n\n  * **Content Aggregation** : Easily gather and syndicate content from any public YouTube channel.\n  * **No API Key Required** : Avoid the complexities and limitations of Google's API.\n  * **Multiple Formats** : Supports ATOM, JSON, MRSS, Plaintext, Sfeed, and direct YouTube XML feeds.\n  * **Flexibility** : Input can be a YouTube channel or video URL, ID, or username.\n\n\n\n### Services/APIs Utilized\n\nThis workflow integrates with:\n\n  * **[commentpicker.com](http://commentpicker.com)** : For retrieving YouTube channel IDs.\n  * **[rss-bridge.org](http://rss-bridge.org)** : To generate various RSS formats.\n\n\n\n### Configuration Instructions\n\n  1. **Start the Workflow** : Activate the workflow in your n8n instance.\n  2. **Input Details** : Enter the YouTube channel or video URL, ID, or username via the provided form trigger.\n  3. **Run the Workflow** : Execute the workflow to receive links to 13 different RSS feeds, including community and video content feeds.\n\n\n\n### Screenshots\n\n![Screenshot of template  YouTube Channel Advanced RSS Feeds Generator](https://live.staticflickr.com/65535/53658033066_ea92acb899_o.png)\n\n### Additional Notes\n\n  * **Customization** : You can modify the RSS feed formats or integrate additional services as needed.\n\n\n\n### Support and Contributions\n\nFor support, questions, or contributions, please visit the [n8n community forum](https://community.n8n.io) or the [GitHub repository](https://github.com/n8n-io/n8n). We welcome contributions from the community!\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><p><a href=\"https://youtu.be/EtzJmrmCiUY\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://img.youtube.com/vi_webp/EtzJmrmCiUY/maxresdefault.webp?s\" alt=\"Video Overview of template  YouTube Channel Advanced RSS Feeds Generator\"></a></p>\n<h3>Overview</h3>\n<p>The <strong>[n8n] YouTube Channel Advanced RSS Feeds Generator</strong> workflow facilitates the generation of various RSS feed formats for YouTube channels without requiring API access or administrative permissions. It utilizes third-party services to extract data, making it extremely user-friendly and accessible.</p>\n<h3>Key Use Cases and Benefits</h3>\n<ul>\n<li><strong>Content Aggregation</strong>: Easily gather and syndicate content from any public YouTube channel.</li>\n<li><strong>No API Key Required</strong>: Avoid the complexities and limitations of Google's API.</li>\n<li><strong>Multiple Formats</strong>: Supports ATOM, JSON, MRSS, Plaintext, Sfeed, and direct YouTube XML feeds.</li>\n<li><strong>Flexibility</strong>: Input can be a YouTube channel or video URL, ID, or username.</li>\n</ul>\n<h3>Services/APIs Utilized</h3>\n<p>This workflow integrates with:</p>\n<ul>\n<li><strong><a href=\"http://commentpicker.com\" rel=\"ugc nofollow\" target=\"_blank\">commentpicker.com</a></strong>: For retrieving YouTube channel IDs.</li>\n<li><strong><a href=\"http://rss-bridge.org\" rel=\"ugc nofollow\" target=\"_blank\">rss-bridge.org</a></strong>: To generate various RSS formats.</li>\n</ul>\n<h3>Configuration Instructions</h3>\n<ol>\n<li><strong>Start the Workflow</strong>: Activate the workflow in your n8n instance.</li>\n<li><strong>Input Details</strong>: Enter the YouTube channel or video URL, ID, or username via the provided form trigger.</li>\n<li><strong>Run the Workflow</strong>: Execute the workflow to receive links to 13 different RSS feeds, including community and video content feeds.</li>\n</ol>\n<h3>Screenshots</h3>\n<p><img src=\"https://live.staticflickr.com/65535/53658033066_ea92acb899_o.png\" alt=\"Screenshot of template  YouTube Channel Advanced RSS Feeds Generator\"></p>\n<h3>Additional Notes</h3>\n<ul>\n<li><strong>Customization</strong>: You can modify the RSS feed formats or integrate additional services as needed.</li>\n</ul>\n<h3>Support and Contributions</h3>\n<p>For support, questions, or contributions, please visit the <a href=\"https://community.n8n.io\" rel=\"ugc nofollow\" target=\"_blank\">n8n community forum</a> or the <a href=\"https://github.com/n8n-io/n8n\" rel=\"ugc nofollow\" target=\"_blank\">GitHub repository</a>. We welcome contributions from the community!</p>\n</div><!--]-->",
  "readme_zh": "[![Video Overview of template  YouTube Channel Advanced RSS Feeds Generator](https://img.youtube.com/vi_webp/EtzJmrmCiUY/maxresdefault.webp?s)](https://youtu.be/EtzJmrmCiUY)\n\n### Overview\n\nThe **[n8n] YouTube Channel Advanced RSS Feeds Generator** workflow facilitates the generation of various RSS feed formats for YouTube channels without requiring API access or administrative permissions. It utilizes third-party services to extract data, making it extremely user-friendly and accessible.\n\n### Key Use Cases and Benefits\n\n  * **Content Aggregation** : Easily gather and syndicate content from any public YouTube channel.\n  * **No API Key Required** : Avoid the complexities and limitations of Google's API.\n  * **Multiple Formats** : Supports ATOM, JSON, MRSS, Plaintext, Sfeed, and direct YouTube XML feeds.\n  * **Flexibility** : Input can be a YouTube channel or video URL, ID, or username.\n\n\n\n### Services/APIs Utilized\n\nThis workflow integrates with:\n\n  * **[commentpicker.com](http://commentpicker.com)** : For retrieving YouTube channel IDs.\n  * **[rss-bridge.org](http://rss-bridge.org)** : To generate various RSS formats.\n\n\n\n### Configuration Instructions\n\n  1. **Start the Workflow** : Activate the workflow in your n8n instance.\n  2. **Input Details** : Enter the YouTube channel or video URL, ID, or username via the provided form trigger.\n  3. **Run the Workflow** : Execute the workflow to receive links to 13 different RSS feeds, including community and video content feeds.\n\n\n\n### Screenshots\n\n![Screenshot of template  YouTube Channel Advanced RSS Feeds Generator](https://live.staticflickr.com/65535/53658033066_ea92acb899_o.png)\n\n### Additional Notes\n\n  * **Customization** : You can modify the RSS feed formats or integrate additional services as needed.\n\n\n\n### Support and Contributions\n\nFor support, questions, or contributions, please visit the [n8n community forum](https://community.n8n.io) or the [GitHub repository](https://github.com/n8n-io/n8n). We welcome contributions from the community!\n",
  "title_zh": "YouTube Advanced RSS Generator with Telegram Formation",
  "publish_date_zh": "Last update a year ago",
  "workflow_json_zh": "{\n  \"meta\": {},\n  \"name\": \"[n8n] YouTube Channel Advanced RSS Feeds Generator\",\n  \"tags\": [\n    {\n      \"id\": \"Q29tbWVudHBpY2tlcg\",\n      \"name\": \"Commentpicker\",\n      \"createdAt\": \"2024-04-16T14:29:17.942Z\",\n      \"updatedAt\": \"2024-04-16T14:29:17.942Z\"\n    },\n    {\n      \"id\": \"Rm9ybVRyaWdnZXI\",\n      \"name\": \"FormTrigger\",\n      \"createdAt\": \"2024-04-16T14:29:17.942Z\",\n      \"updatedAt\": \"2024-04-16T14:29:17.942Z\"\n    },\n    {\n      \"id\": \"SHR0cFJlcXVlc3Q\",\n      \"name\": \"HttpRequest\",\n      \"createdAt\": \"2024-04-16T14:29:17.942Z\",\n      \"updatedAt\": \"2024-04-16T14:29:17.942Z\"\n    },\n    {\n      \"id\": \"QWdncmVnYXRl\",\n      \"name\": \"Aggregate\",\n      \"createdAt\": \"2024-04-16T14:29:17.942Z\",\n      \"updatedAt\": \"2024-04-16T14:29:17.942Z\"\n    },\n    {\n      \"id\": \"UmVzcG9uZFRvV2ViaG9vaw\",\n      \"name\": \"RespondToWebhook\",\n      \"createdAt\": \"2024-04-16T14:29:17.942Z\",\n      \"updatedAt\": \"2024-04-16T14:29:17.942Z\"\n    },\n    {\n      \"id\": \"Q29kZQ\",\n      \"name\": \"Code\",\n      \"createdAt\": \"2024-04-16T14:29:17.942Z\",\n      \"updatedAt\": \"2024-04-16T14:29:17.942Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"name\": \"n8n Form Trigger\",\n      \"type\": \"n8n-nodes-base.formTrigger\",\n      \"position\": [\n        -300,\n        -260\n      ],\n      \"webhookId\": \"68a70315-9f74-4cf5-9c68-828396b0f23b\",\n      \"parameters\": {\n        \"path\": \"Youtube\",\n        \"formTitle\": \"Youtube RSS Generator\",\n        \"formFields\": {\n          \"values\": [\n            {\n              \"fieldLabel\": \"youtube Channel username or ID\",\n              \"requiredField\": true\n            }\n          ]\n        },\n        \"responseMode\": \"responseNode\",\n        \"formDescription\": \"=Youtube Username Example: @username\\n\\nYoutube ID Example: UCxxxxxxxxxxxxxxxxxx\\n\\nYoutube Video URL Example 1: https://www.youtube.com/watch?v=mn-br82ENxc\\n\\nYoutube Video URL Example 2: https://youtu.be/mn-br82ENxc\\n\\nYoutube Channel URL Example 1: https://www.youtube.com/@NewMedia_Life\\n\\nYoutube Channel URL Example 2: https://www.youtube.com/channel/UC_UDAiqQj-QfgTixKkW51qA\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"name\": \"Get Channel ID\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"notes\": \"3rd party API request\",\n      \"position\": [\n        700,\n        -440\n      ],\n      \"parameters\": {\n        \"url\": \"https://commentpicker.com/actions/youtube-channel-id.php\",\n        \"options\": {\n          \"response\": {\n            \"response\": {\n              \"responseFormat\": \"json\"\n            }\n          }\n        },\n        \"sendQuery\": true,\n        \"sendHeaders\": true,\n        \"queryParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"url\",\n              \"value\": \"=https://www.googleapis.com/youtube/v3/channels?part=id,snippet,statistics,contentDetails,status&forHandle={{ $item(\\\"0\\\").$node[\\\"Set Channel Username\\\"].json[\\\"channel name\\\"] }}\"\n            },\n            {\n              \"name\": \"token\",\n              \"value\": \"={{ $item(\\\"0\\\").$node[\\\"Get Temporary Token\\\"].json[\\\"data\\\"] }}\"\n            },\n            {\n              \"name\": \"isPremium\",\n              \"value\": \"false\"\n            }\n          ]\n        },\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"authority\",\n              \"value\": \"commentpicker.com\"\n            },\n            {\n              \"name\": \"cookie\",\n              \"value\": \"ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; ezoab_186623=mod99-c; active_template::186623=pub_site.1711138973; lp_186623=https://commentpicker.com/youtube-channel-id.php; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg\"\n            },\n            {\n              \"name\": \"referer\",\n              \"value\": \"https://commentpicker.com/youtube-channel-id.php\"\n            },\n            {\n              \"name\": \"user-agent\",\n              \"value\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0\"\n            }\n          ]\n        }\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 4.1\n    },\n    {\n      \"name\": \"Set XML URL\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"notes\": \"🤖Generate XML Feed URL\",\n      \"position\": [\n        900,\n        -440\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"bf0ea151-e325-4860-af02-76e51f692f2c\",\n              \"name\": \"rss\",\n              \"type\": \"string\",\n              \"value\": \"=https://www.youtube.com/feeds/videos.xml?channel_id={{ $json.items[0].id }}\"\n            }\n          ]\n        }\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 3.3\n    },\n    {\n      \"name\": \"Set Channel Username\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        520,\n        -440\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"0837a847-4c6b-4b39-bb90-f200233bf7e1\",\n              \"name\": \"channel name\",\n              \"type\": \"string\",\n              \"value\": \"={{ $item(\\\"0\\\").$node[\\\"Switch\\\"].json[\\\"value\\\"] }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.3\n    },\n    {\n      \"name\": \"Set XML Feed URL\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"notes\": \"🤖Generate XML Feed URL\",\n      \"position\": [\n        900,\n        -260\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"bf0ea151-e325-4860-af02-76e51f692f2c\",\n              \"name\": \"rss\",\n              \"type\": \"string\",\n              \"value\": \"=https://www.youtube.com/feeds/videos.xml?channel_id={{ $item(\\\"0\\\").$node[\\\"Switch\\\"].json[\\\"value\\\"] }}\"\n            }\n          ]\n        }\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 3.3\n    },\n    {\n      \"name\": \"Set Video ID\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        520,\n        -80\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"0837a847-4c6b-4b39-bb90-f200233bf7e1\",\n              \"name\": \"Video ID\",\n              \"type\": \"string\",\n              \"value\": \"={{ $item(\\\"0\\\").$node[\\\"Switch\\\"].json[\\\"value\\\"] }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.3\n    },\n    {\n      \"name\": \"Get Video ID Channel ID\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"notes\": \"3rd party API request\",\n      \"position\": [\n        700,\n        -80\n      ],\n      \"parameters\": {\n        \"url\": \"https://commentpicker.com/actions/youtube-channel-id.php\",\n        \"options\": {\n          \"response\": {\n            \"response\": {\n              \"responseFormat\": \"json\"\n            }\n          }\n        },\n        \"sendQuery\": true,\n        \"sendHeaders\": true,\n        \"queryParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"url\",\n              \"value\": \"=https://www.googleapis.com/youtube/v3/videos?part=snippet&id={{ $json[\\\"Video ID\\\"] }}\"\n            },\n            {\n              \"name\": \"token\",\n              \"value\": \"={{ $item(\\\"0\\\").$node[\\\"GTT\\\"].json[\\\"data\\\"] }}\"\n            },\n            {\n              \"name\": \"isPremium\",\n              \"value\": \"true\"\n            }\n          ]\n        },\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"authority\",\n              \"value\": \"commentpicker.com\"\n            },\n            {\n              \"name\": \"cookie\",\n              \"value\": \"ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; ezoab_186623=mod99-c; active_template::186623=pub_site.1711138973; lp_186623=https://commentpicker.com/youtube-channel-id.php; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg\"\n            },\n            {\n              \"name\": \"referer\",\n              \"value\": \"https://commentpicker.com/youtube-channel-id.php\"\n            },\n            {\n              \"name\": \"user-agent\",\n              \"value\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0\"\n            }\n          ]\n        }\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 4.1\n    },\n    {\n      \"name\": \"Set XML Feed\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"notes\": \"🤖Generate XML Feed URL\",\n      \"position\": [\n        900,\n        -80\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"bf0ea151-e325-4860-af02-76e51f692f2c\",\n              \"name\": \"rss\",\n              \"type\": \"string\",\n              \"value\": \"=https://www.youtube.com/feeds/videos.xml?channel_id={{ $item(\\\"0\\\").$node[\\\"Get Video ID Channel ID\\\"].json[\\\"items\\\"][\\\"0\\\"][\\\"snippet\\\"][\\\"channelId\\\"] }}\"\n            }\n          ]\n        }\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 3.3\n    },\n    {\n      \"name\": \"Get Temporary Token\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"notes\": \"3rd party API request\",\n      \"position\": [\n        320,\n        -440\n      ],\n      \"parameters\": {\n        \"url\": \"https://commentpicker.com/actions/token.php\",\n        \"options\": {},\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"authority\",\n              \"value\": \"commentpicker.com\"\n            },\n            {\n              \"name\": \"cookie\",\n              \"value\": \"ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg; ezoab_186623=mod54-c; active_template::186623=pub_site.1711191989\"\n            },\n            {\n              \"name\": \"referer\",\n              \"value\": \"https://commentpicker.com/youtube-channel-id.php\"\n            },\n            {\n              \"name\": \"user-agent\",\n              \"value\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0\"\n            }\n          ]\n        }\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 4.1\n    },\n    {\n      \"name\": \"GTT\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"notes\": \"3rd party API request\",\n      \"position\": [\n        320,\n        -80\n      ],\n      \"parameters\": {\n        \"url\": \"https://commentpicker.com/actions/token.php\",\n        \"options\": {},\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"authority\",\n              \"value\": \"commentpicker.com\"\n            },\n            {\n              \"name\": \"cookie\",\n              \"value\": \"ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg; ezoab_186623=mod54-c; active_template::186623=pub_site.1711191989\"\n            },\n            {\n              \"name\": \"referer\",\n              \"value\": \"https://commentpicker.com/youtube-channel-id.php\"\n            },\n            {\n              \"name\": \"user-agent\",\n              \"value\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0\"\n            }\n          ]\n        }\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 4.1\n    },\n    {\n      \"name\": \"Aggregate\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"notes\": \"🤖Combine results in one\",\n      \"position\": [\n        1080,\n        -260\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldsToAggregate\": {\n          \"fieldToAggregate\": [\n            {\n              \"renameField\": true,\n              \"outputFieldName\": \"rss url\",\n              \"fieldToAggregate\": \"rss\"\n            }\n          ]\n        }\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Youtube Channel Videos RSS Formats\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"notes\": \"RSS Feed for channel Posts\",\n      \"position\": [\n        1260,\n        -180\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"6af1de72-9940-4843-9a98-94e36b2878a3\",\n              \"name\": \"=Videos - HTML format response\",\n              \"type\": \"string\",\n              \"value\": \"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Html\"\n            },\n            {\n              \"id\": \"2b486723-1dff-4525-8169-6d977dee6862\",\n              \"name\": \"Videos - ATOM format response\",\n              \"type\": \"string\",\n              \"value\": \"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Atom\"\n            },\n            {\n              \"id\": \"10b3c04a-2c8c-4533-944b-13123bd22743\",\n              \"name\": \"Videos - JSON format response\",\n              \"type\": \"string\",\n              \"value\": \"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Json\"\n            },\n            {\n              \"id\": \"ee8910de-76ab-47a3-b23f-1a1e837fb885\",\n              \"name\": \"Videos - MRSS format response\",\n              \"type\": \"string\",\n              \"value\": \"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Mrss\"\n            },\n            {\n              \"id\": \"8684437c-11f0-4cc2-b9b2-00ecb6768175\",\n              \"name\": \"Videos - TEXT format response\",\n              \"type\": \"string\",\n              \"value\": \"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Plaintext\"\n            },\n            {\n              \"id\": \"a53d1d0a-bfd1-41f4-9ab3-edd1e20adaa2\",\n              \"name\": \"Videos - SFEED format response\",\n              \"type\": \"string\",\n              \"value\": \"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Sfeed\"\n            },\n            {\n              \"id\": \"d17fd2e0-0e4a-45c9-bc60-86ca6a7940d4\",\n              \"name\": \"Videos - XML format response\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json[\\\"rss url\\\"][\\\"0\\\"] }}\"\n            }\n          ]\n        }\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 3.3\n    },\n    {\n      \"name\": \"Youtube Channel Community RSS Formats\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"notes\": \"RSS Feed for channel Posts\",\n      \"position\": [\n        1260,\n        -400\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"6af1de72-9940-4843-9a98-94e36b2878a3\",\n              \"name\": \"=Community - HTML format response\",\n              \"type\": \"string\",\n              \"value\": \"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&format=HTML\"\n            },\n            {\n              \"id\": \"2b486723-1dff-4525-8169-6d977dee6862\",\n              \"name\": \"Community - ATOM format response\",\n              \"type\": \"string\",\n              \"value\": \"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Atom\"\n            },\n            {\n              \"id\": \"10b3c04a-2c8c-4533-944b-13123bd22743\",\n              \"name\": \"Community - JSON format response\",\n              \"type\": \"string\",\n              \"value\": \"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Json\"\n            },\n            {\n              \"id\": \"ee8910de-76ab-47a3-b23f-1a1e837fb885\",\n              \"name\": \"Community - MRSS format response\",\n              \"type\": \"string\",\n              \"value\": \"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Mrss\"\n            },\n            {\n              \"id\": \"8684437c-11f0-4cc2-b9b2-00ecb6768175\",\n              \"name\": \"Community - TEXT format response\",\n              \"type\": \"string\",\n              \"value\": \"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Plaintext\"\n            },\n            {\n              \"id\": \"a53d1d0a-bfd1-41f4-9ab3-edd1e20adaa2\",\n              \"name\": \"Community - SFEED format response\",\n              \"type\": \"string\",\n              \"value\": \"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\\\"0\\\").$node[\\\"Aggregate\\\"].json[\\\"rss url\\\"][\\\"0\\\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Sfeed\"\n            }\n          ]\n        }\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 3.3\n    },\n    {\n      \"name\": \"Respond to Webhook\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"notes\": \"Reply to the webhook request with table\",\n      \"position\": [\n        1900,\n        -280\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"respondWith\": \"text\",\n        \"responseBody\": \"={{ $json[\\\"html\\\"] }}\"\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -360,\n        140\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 2425.409405354546,\n        \"height\": 200.24482670360715,\n        \"content\": \"## ℹ️ **Workarounds And Information**\\n\\n### - **No need to acquire Google Cloud API** to retrieve channel data. I have implemented a free workaround method.\\n### - The workflow code has been **tested and proven to work** with all YouTube methods, whether for videos or channels. Regardless of whether you input URLs or usernames, the result will always be the channel ID.\\n### - Please be aware that the provided workarounds may become **obsolete or non-functional** in the future. I will ensure to stay updated; however, if this workflow does not work for you, please reach out to me on the n8n community.\\n### - We have utilized a 3rd party method to generate **multiple syntaxes of RSS feeds** as outlined below. (*The mentioned source is also capable of constructing multi-channel YouTube RSS feeds*, which I will create later for BULK channel RSS.)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Switch\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        60,\n        -260\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"Username\",\n              \"conditions\": {\n                \"options\": {\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.type }}\",\n                    \"rightValue\": \"channel username\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"Direct\",\n              \"conditions\": {\n                \"options\": {\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"5af4921b-6266-436a-901c-ab52de68aaf4\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.type }}\",\n                    \"rightValue\": \"=channel ID\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"Video-ID\",\n              \"conditions\": {\n                \"options\": {\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"a5baa5e6-879f-484a-b521-af802b6d79a9\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $json.type }}\",\n                    \"rightValue\": \"=video ID\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -360,\n        -520\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 2429.6732915601406,\n        \"height\": 644.5128280596109,\n        \"content\": \"## 🌐 **为公开YouTube频道生成RSS订阅源（无需API或管理员权限😉）**  \\n**``没错，正如你所听到的``** 本工作流借助`第三方`API与解决方案实现功能，**``无需任何配置``**。  \\n\\n## 工作流步骤：  \\n- 运行**`测试工作流`**  \\n- 输入频道/视频链接/ID/用户名  \\n- 最终将生成**``13个链接（6种社区动态+6种视频格式+1个XML文件）``**：  \\n  - 6种格式类型：`ATOM`、`JSON`、`MRSS`、`纯文本`、`SFEED`  \\n  - 第**``13个链接``**为YouTube官方提供的XML数据文件。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Validation Code\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"notes\": \"🤓Validate the YouTube input\",\n      \"position\": [\n        -120,\n        -260\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// JavaScript code to extract YouTube channel ID, username, or video ID from a given input and return in n8n compatible format\\n\\n// Initialize an array to hold the output items\\nconst items = [];\\n\\n// Extract the input value from the previous node's output using the $input API\\nconst inputData = $input.all(); // Get all input data\\n// Assuming 'youtube Channel username or ID' is the correct key, and it's in the first input item\\nconst input = inputData.length > 0 ? inputData[0].json[\\\"youtube Channel username or ID\\\"] : null;\\n\\n// Check if input exists\\nif (!input) {\\n    throw new Error('Input is undefined or not provided');\\n}\\n\\n// Regular expressions for different YouTube URL and input formats\\nconst usernamePattern = /^@?([a-zA-Z0-9_-]+)$/;\\nconst channelIdPattern = /^(UC[a-zA-Z0-9_-]{22})$/; // Ensure channel ID starts with \\\"UC\\\"\\nconst videoUrlPattern1 = /(?:https?:\\\\/\\\\/)?www\\\\.youtube\\\\.com\\\\/watch\\\\?v=([a-zA-Z0-9_-]+)/;\\nconst videoUrlPattern2 = /(?:https?:\\\\/\\\\/)?youtu\\\\.be\\\\/([a-zA-Z0-9_-]+)/;\\nconst channelUrlPattern1 = /(?:https?:\\\\/\\\\/)?www\\\\.youtube\\\\.com\\\\/@([a-zA-Z0-9_-]+)/;\\nconst channelUrlPattern2 = /(?:https?:\\\\/\\\\/)?www\\\\.youtube\\\\.com\\\\/channel\\\\/(UC[a-zA-Z0-9_-]{22})/;\\nconst customChannelUrlPattern = /(?:https?:\\\\/\\\\/)?www\\\\.youtube\\\\.com\\\\/c\\\\/([a-zA-Z0-9_-]+)/; // Pattern for custom channel URLs\\n\\n// Function to determine the type and value of the input\\nfunction determineTypeAndValue(input) {\\n    if (channelIdPattern.test(input)) {\\n        return { type: 'channel ID', value: input };\\n    } else if (usernamePattern.test(input)) {\\n        return { type: 'channel username', value: input };\\n    } else if (videoUrlPattern1.test(input) || videoUrlPattern2.test(input)) {\\n        const videoId = videoUrlPattern1.test(input) ? input.match(videoUrlPattern1)[1] : input.match(videoUrlPattern2)[1];\\n        return { type: 'video ID', value: videoId };\\n    } else if (channelUrlPattern1.test(input) || customChannelUrlPattern.test(input)) {\\n        const username = channelUrlPattern1.test(input) ? input.match(channelUrlPattern1)[1] : input.match(customChannelUrlPattern)[1];\\n        return { type: 'channel username', value: username };\\n    } else if (channelUrlPattern2.test(input)) {\\n        return { type: 'channel ID', value: input.match(channelUrlPattern2)[1] };\\n    } else {\\n        return { error: 'Invalid input or unsupported format.' };\\n    }\\n}\\n\\n// Process the input and add the result to the items array\\nconst result = determineTypeAndValue(input);\\nitems.push({ json: result });\\n\\nreturn items; // Return the array of items\\n\"\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 2\n    },\n    {\n      \"name\": \"Format response as HTML Table\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1680,\n        -280\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Assuming inputData is dynamically retrieved as follows\\nconst inputData = $item(\\\"0\\\").$node[\\\"Merga Data of Youtube & Community RSS\\\"].json;\\n\\n// Initialize HTML with a modern styled table\\nlet html = `\\n<style>\\n  table {\\n    width: 100%;\\n    border-collapse: collapse;\\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\\n    box-shadow: 0 2px 15px rgba(0,0,0,0.1);\\n    border-radius: 8px;\\n    overflow: hidden;\\n    margin-top: 20px;\\n  }\\n  th, td {\\n    border: 1px solid #ddd;\\n    padding: 8px 16px;\\n    text-align: left;\\n    color: #333;\\n  }\\n  th {\\n    background-color: #f0f0f0;\\n    color: #000;\\n    font-weight: 600;\\n  }\\n  tr:nth-child(even) {background-color: #f9f9f9;}\\n  tr:hover {background-color: #f1f1f1;}\\n  a {\\n    text-decoration: none;\\n    color: #0645AD;\\n  }\\n  a:hover {\\n    text-decoration: underline;\\n  }\\n</style>\\n<table>\\n<tr>\\n  <th>Type</th>\\n  <th>Format</th>\\n  <th>URL</th>\\n</tr>`;\\n\\n// Function to process each item and add it to the HTML table\\nObject.entries(inputData).forEach(([key, value]) => {\\n  // Extract type and format from the key, assuming key format 'Category - Format'\\n  const [type, format] = key.split(' - ');\\n  html += `<tr>\\n    <td>${type} RSS</td>\\n    <td>${format}</td>\\n    <td><a href=\\\"${value}\\\" target=\\\"_blank\\\">${value}</a></td>\\n  </tr>`;\\n});\\n\\n// Close the HTML table tag\\nhtml += `</table>`;\\n\\n// Return the HTML string as output\\nreturn [{json: {html: html}}];\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"name\": \"Merga Data of Youtube & Community RSS\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        1480,\n        -280\n      ],\n      \"parameters\": {\n        \"mode\": \"combine\",\n        \"options\": {},\n        \"combinationMode\": \"multiplex\"\n      },\n      \"typeVersion\": 2.1\n    }\n  ],\n  \"active\": \"false\",\n  \"pinData\": {},\n  \"settings\": {\n    \"timezone\": \"Asia/Baghdad\",\n    \"callerPolicy\": \"workflowsFromSameOwner\",\n    \"errorWorkflow\": \"\",\n    \"executionOrder\": \"v1\",\n    \"executionTimeout\": 600,\n    \"saveManualExecutions\": true,\n    \"saveExecutionProgress\": true\n  },\n  \"staticData\": \"\",\n  \"connections\": {\n    \"GTT\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set Video ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Switch\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Temporary Token\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Set XML Feed URL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"GTT\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Aggregate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Youtube Channel Community RSS Formats\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Youtube Channel Videos RSS Formats\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set XML URL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set Video ID\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Video ID Channel ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set XML Feed\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Channel ID\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set XML URL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Validation Code\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Switch\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set XML Feed URL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"n8n Form Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Validation Code\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Temporary Token\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set Channel Username\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set Channel Username\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Channel ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Video ID Channel ID\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set XML Feed\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Format response as HTML Table\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Youtube Channel Videos RSS Formats\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merga Data of Youtube & Community RSS\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Merga Data of Youtube & Community RSS\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Format response as HTML Table\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Youtube Channel Community RSS Formats\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merga Data of Youtube & Community RSS\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}