{
  "title": "Convert Parquet, Feather, ORC & Avro Files with ParquetReader",
  "url": "https://n8n.io/workflows/3365-convert-parquet-feather-orc-and-avro-files-with-parquetreader/",
  "category": "Other",
  "category_url": "https://n8n.io/workflows/categories/other/?sort=createdAt:desc",
  "author": "ParquetReader",
  "publish_date": "Last update a month ago",
  "publish_date_absolute": "",
  "content": "",
  "workflow_json": "{\"id\":\"VU0kmvnWzctSFm2M\",\"meta\":{\"instanceId\":\"534a4ec070e550167af0cc407c76e029ac0ae69bef901c2f9ef440d79bfa5792\"},\"name\":\"Convert Parquet, Avro, ORC & Feather via ParquetReader to JSON\",\"tags\":[{\"id\":\"1PTaY70kFjD8F12p\",\"name\":\"Convert\",\"createdAt\":\"2025-03-30T09:38:16.466Z\",\"updatedAt\":\"2025-03-30T09:38:16.466Z\"},{\"id\":\"98v0QSKrvfH5dl34\",\"name\":\"Avro\",\"createdAt\":\"2025-03-30T09:38:06.656Z\",\"updatedAt\":\"2025-03-30T09:38:06.656Z\"},{\"id\":\"Q0sqo52DKATPDab2\",\"name\":\"ORC\",\"createdAt\":\"2025-03-30T09:38:09.923Z\",\"updatedAt\":\"2025-03-30T09:38:09.923Z\"},{\"id\":\"b1s8WFj3TfMpoOQu\",\"name\":\"Feather\",\"createdAt\":\"2025-03-30T09:38:12.227Z\",\"updatedAt\":\"2025-03-30T09:38:12.227Z\"},{\"id\":\"fFnESRcynarFqlLf\",\"name\":\"Parquet\",\"createdAt\":\"2025-03-30T09:38:04.286Z\",\"updatedAt\":\"2025-03-30T09:38:04.286Z\"}],\"nodes\":[{\"id\":\"651a10dc-1c91-4957-bcdd-3e55d7328f04\",\"name\":\"Send to Parquet API\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1100,440],\"parameters\":{\"url\":\"https://api.parquetreader.com/parquet?source=n8n\",\"options\":{\"bodyContentType\":\"multipart-form-data\"},\"requestMethod\":\"POST\",\"jsonParameters\":true,\"sendBinaryData\":true,\"binaryPropertyName\":\"=file0\"},\"typeVersion\":1},{\"id\":\"42a7e623-ca11-4d38-94bb-cfb48d021a5c\",\"name\":\"Webhook\",\"type\":\"n8n-nodes-base.webhook\",\"notes\":\"Example trigger flow:\\n\\ncurl -X POST http://localhost:5678/webhook-test/convert \\\\\\n  -F \\\"file=@converted.parquet\\\"\",\"position\":[900,440],\"webhookId\":\"0b1223c9-c117-45f9-9931-909f2db28955\",\"parameters\":{\"path\":\"convert\",\"options\":{\"binaryPropertyName\":\"file\"},\"httpMethod\":\"POST\",\"responseData\":\"allEntries\",\"responseMode\":\"lastNode\"},\"notesInFlow\":false,\"typeVersion\":2},{\"id\":\"9b87f027-7ef2-40a7-88d7-a0ae9ef73375\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[0,0],\"parameters\":{\"width\":840,\"height\":580,\"content\":\"### ✅ **How to Use This Flow**\\n\\n#### 📥 Trigger via File Upload\\n\\nYou can trigger this flow by sending a `POST` request with a file using **curl**, **Postman**, or **from another n8n flow**.\\n\\n#### 🔧 Example (via `curl`):\\n```bash\\ncurl -X POST http://localhost:5678/webhook-test/convert \\\\\\n-F \\\"file=@converted.parquet\\\"\\n```\\n> Replace `converted.parquet` with your local file path. You can also send Avro, ORC or Feather files.\\n\\n#### 🔁 Reuse from Other Flows\\nYou can **reuse this flow** by calling the webhook from another n8n workflow using an **HTTP Request** node.  \\nMake sure to send the file as **form-data** with the field name `file`.\\n\\n#### 🔍 What This Flow Does:\\n- Receives the uploaded file via webhook (`file`)\\n- Sends it to `https://api.parquetreader.com/parquet` as `multipart/form-data` (field name: `file`)\\n- Receives parsed data, schema, and metadata\\n\"},\"typeVersion\":1},{\"id\":\"06d3e569-8724-48f2-951f-a1af5e0f9362\",\"name\":\"Parse API Response\",\"type\":\"n8n-nodes-base.code\",\"position\":[1280,440],\"parameters\":{\"jsCode\":\"const item = items[0];\\n\\n// Convert `data` (stringified JSON array) → actual array\\nif (typeof item.json.data === 'string') {\\n  item.json.data = JSON.parse(item.json.data);\\n}\\n\\n// Convert `meta_data` (stringified JSON object) → actual object\\nif (typeof item.json.meta_data === 'string') {\\n  item.json.meta_data = JSON.parse(item.json.meta_data);\\n}\\n\\nreturn [item];\\n\"},\"typeVersion\":2}],\"active\":true,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"c10e1897-094e-42c6-bde9-1724972ada3e\",\"connections\":{\"Webhook\":{\"main\":[[{\"node\":\"Send to Parquet API\",\"type\":\"main\",\"index\":0}]]},\"Send to Parquet API\":{\"main\":[[{\"node\":\"Parse API Response\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "# 📄 Convert Parquet, Feather, ORC & Avro Files with ParquetReader\n\nThis workflow allows you to upload and inspect Parquet, Feather, ORC, or Avro files via the [ParquetReader API](https://parquetreader.com). It instantly returns a structured **JSON preview** of your data — including rows, schema, and metadata — without needing to write any custom code.\n\n* * *\n\n## ✅ Perfect For\n\n  * Validating schema and structure before syncing or transformation\n  * Previewing raw columnar files on the fly\n  * Automating QA, ETL, or CI/CD workflows\n  * Converting Parquet, Avro, Feather, or ORC to JSON\n\n\n\n* * *\n\n## ⚙️ Use Cases\n\n  * Catch schema mismatches before pipeline runs\n  * Automate column audits in incoming data files\n  * Enrich metadata catalogs with real-time schema detection\n  * Integrate file validation into automated workflows\n\n\n\n* * *\n\n## 🚀 How to Use This Workflow\n\n#### 📥 Trigger via File Upload\n\nYou can trigger this flow by sending a `POST` request with a file using **curl** , **Postman** , or **from another n8n flow**.\n\n#### 🔧 Example (via `curl`):\n    \n    \n    curl -X POST http://localhost:5678/webhook-test/convert \\\n    -F \"file=@converted.parquet\"\n    \n\n> Replace `converted.parquet` with your local file path. You can also send Avro, ORC or Feather files.\n\n#### 🔁 Reuse from Other Flows\n\nYou can **reuse this flow** by calling the webhook from another n8n workflow using an **HTTP Request** node.  \nMake sure to send the file as **form-data** with the field name `file`.\n\n#### 🔍 What This Flow Does:\n\n  * Receives the uploaded file via webhook (`file`)\n  * Sends it to `https://api.parquetreader.com/parquet` as `multipart/form-data` (field name: `file`)\n  * Receives parsed data (rows), schema, and metadata in JSON format\n\n\n\n* * *\n\n## 🧪 Example JSON Response from this flow\n    \n    \n    {\n      \"data\": [\n        {\n          \"full_name\": \"Pamela Cabrera\",\n          \"email\": \"bobbyharrison@example.net\",\n          \"age\": \"24\",\n          \"active\": \"True\",\n          \"latitude\": \"-36.1577385\",\n          \"longitude\": \"63.014954\",\n          \"company\": \"Carter, Shaw and Parks\",\n          \"country\": \"Honduras\"\n        }\n      ],\n      \"meta_data\": {\n        \"created_by\": \"pyarrow\",\n        \"num_columns\": 21,\n        \"num_rows\": 10,\n        \"serialized_size\": 7598,\n        \"format_version\": \"0.12\"\n      },\n      \"schema\": [\n        { \"column_name\": \"full_name\", \"column_type\": \"string\" },\n        { \"column_name\": \"email\", \"column_type\": \"string\" },\n        { \"column_name\": \"age\", \"column_type\": \"int64\" },\n        { \"column_name\": \"active\", \"column_type\": \"bool\" },\n        { \"column_name\": \"latitude\", \"column_type\": \"double\" },\n        { \"column_name\": \"longitude\", \"column_type\": \"double\" },\n        { \"column_name\": \"company\", \"column_type\": \"string\" },\n        { \"column_name\": \"country\", \"column_type\": \"string\" }\n      ]\n    }\n    \n    \n\n* * *\n\n## 🔐 API Info\n\n  * Authentication: None required\n  * Supported formats: .parquet, .avro, .orc, .feather\n  * Free usage: No signup needed; API is currently open to the public\n  * Limits: Usage and file size limits may apply in the future (TBD)\n\n\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><h1>📄 Convert Parquet, Feather, ORC &amp; Avro Files with ParquetReader</h1>\n<p>This workflow allows you to upload and inspect Parquet, Feather, ORC, or Avro files via the <a href=\"https://parquetreader.com\" rel=\"ugc nofollow\" target=\"_blank\">ParquetReader API</a>. It instantly returns a structured <strong>JSON preview</strong> of your data — including rows, schema, and metadata — without needing to write any custom code.</p>\n<hr>\n<h2>✅ Perfect For</h2>\n<ul>\n<li>Validating schema and structure before syncing or transformation</li>\n<li>Previewing raw columnar files on the fly</li>\n<li>Automating QA, ETL, or CI/CD workflows</li>\n<li>Converting Parquet, Avro, Feather, or ORC to JSON</li>\n</ul>\n<hr>\n<h2>⚙️ Use Cases</h2>\n<ul>\n<li>Catch schema mismatches before pipeline runs</li>\n<li>Automate column audits in incoming data files</li>\n<li>Enrich metadata catalogs with real-time schema detection</li>\n<li>Integrate file validation into automated workflows</li>\n</ul>\n<hr>\n<h2>🚀 How to Use This Workflow</h2>\n<h4>📥 Trigger via File Upload</h4>\n<p>You can trigger this flow by sending a <code>POST</code> request with a file using <strong>curl</strong>, <strong>Postman</strong>, or <strong>from another n8n flow</strong>.</p>\n<h4>🔧 Example (via <code>curl</code>):</h4>\n<pre><code>curl -X POST http://localhost:5678/webhook-test/convert \\\n-F \"file=@converted.parquet\"\n</code></pre>\n<blockquote>\n<p>Replace <code>converted.parquet</code> with your local file path. You can also send Avro, ORC or Feather files.</p>\n</blockquote>\n<h4>🔁 Reuse from Other Flows</h4>\n<p>You can <strong>reuse this flow</strong> by calling the webhook from another n8n workflow using an <strong>HTTP Request</strong> node.<br>\nMake sure to send the file as <strong>form-data</strong> with the field name <code>file</code>.</p>\n<h4>🔍 What This Flow Does:</h4>\n<ul>\n<li>Receives the uploaded file via webhook (<code>file</code>)</li>\n<li>Sends it to <code>https://api.parquetreader.com/parquet</code> as <code>multipart/form-data</code> (field name: <code>file</code>)</li>\n<li>Receives parsed data (rows), schema, and metadata in JSON format</li>\n</ul>\n<hr>\n<h2>🧪 Example JSON Response from this flow</h2>\n<pre><code>{\n  \"data\": [\n    {\n      \"full_name\": \"Pamela Cabrera\",\n      \"email\": \"bobbyharrison@example.net\",\n      \"age\": \"24\",\n      \"active\": \"True\",\n      \"latitude\": \"-36.1577385\",\n      \"longitude\": \"63.014954\",\n      \"company\": \"Carter, Shaw and Parks\",\n      \"country\": \"Honduras\"\n    }\n  ],\n  \"meta_data\": {\n    \"created_by\": \"pyarrow\",\n    \"num_columns\": 21,\n    \"num_rows\": 10,\n    \"serialized_size\": 7598,\n    \"format_version\": \"0.12\"\n  },\n  \"schema\": [\n    { \"column_name\": \"full_name\", \"column_type\": \"string\" },\n    { \"column_name\": \"email\", \"column_type\": \"string\" },\n    { \"column_name\": \"age\", \"column_type\": \"int64\" },\n    { \"column_name\": \"active\", \"column_type\": \"bool\" },\n    { \"column_name\": \"latitude\", \"column_type\": \"double\" },\n    { \"column_name\": \"longitude\", \"column_type\": \"double\" },\n    { \"column_name\": \"company\", \"column_type\": \"string\" },\n    { \"column_name\": \"country\", \"column_type\": \"string\" }\n  ]\n}\n\n</code></pre>\n<hr>\n<h2>🔐 API Info</h2>\n<ul>\n<li>Authentication: None required</li>\n<li>Supported formats: .parquet, .avro, .orc, .feather</li>\n<li>Free usage: No signup needed; API is currently open to the public</li>\n<li>Limits: Usage and file size limits may apply in the future (TBD)</li>\n</ul>\n</div><!--]-->"
}