{
  "title": "Send Google Sheets data as a message to a Discord channel",
  "url": "https://n8n.io/workflows/1941-send-google-sheets-data-as-a-message-to-a-discord-channel/",
  "category": "Other",
  "category_url": "https://n8n.io/workflows/categories/other/?sort=createdAt:desc",
  "author": "n8n Team",
  "publish_date": "Last update 10 months ago",
  "publish_date_absolute": "2024-07-23",
  "content": "",
  "workflow_json": "{\"meta\":{\"instanceId\":\"a2434c94d549548a685cca39cc4614698e94f527bcea84eefa363f1037ae14cd\"},\"nodes\":[{\"id\":\"b3a0fa7c-eb47-4f51-98d7-ac1a8de7b05d\",\"name\":\"On new or updated row\",\"type\":\"n8n-nodes-base.googleSheetsTrigger\",\"position\":[800,380],\"parameters\":{\"options\":{\"columnsToWatch\":[\"Security Code\"]},\"pollTimes\":{\"item\":[{\"mode\":\"everyMinute\"}]},\"sheetName\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"gid=0\",\"cachedResultUrl\":\"https://docs.google.com/spreadsheets/d/1Np8TQv7kWwwrGiPkWWsmr4WYWAosv1BMBwwCd0f-dis/edit#gid=0\",\"cachedResultName\":\"Investments\"},\"documentId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"1Np8TQv7kWwwrGiPkWWsmr4WYWAosv1BMBwwCd0f-dis\",\"cachedResultUrl\":\"https://docs.google.com/spreadsheets/d/1Np8TQv7kWwwrGiPkWWsmr4WYWAosv1BMBwwCd0f-dis/edit?usp=drivesdk\",\"cachedResultName\":\"Investments\"}},\"credentials\":{\"googleSheetsTriggerOAuth2Api\":{\"id\":\"35\",\"name\":\"TEST USER\"}},\"typeVersion\":1},{\"id\":\"61b96d9b-801c-43e6-b89a-a55245386e4f\",\"name\":\"Send message\",\"type\":\"n8n-nodes-base.discord\",\"position\":[1200,380],\"parameters\":{\"text\":\"=```\\n{{ $json.ascii_table }}\\n```\",\"options\":{},\"webhookUri\":\"https://discord.com/api/webhooks/...\"},\"typeVersion\":1},{\"id\":\"2dc9ce88-2079-4419-9f48-2281ac25cb36\",\"name\":\"Convert to ASCII table\",\"type\":\"n8n-nodes-base.code\",\"position\":[1000,380],\"parameters\":{\"jsCode\":\"/* configure columns to be displayed */\\nconst columns_to_display = [\\n  \\\"Security Code\\\",\\n  \\\"Price\\\",\\n  \\\"Quantity\\\",\\n]\\n\\n/* End of configuration section (do not edit code below) */\\nconst google_sheets_data = $('On new or updated row').all();\\n\\n/**\\n * Takes a list of objects and returns an ascii table with\\n * padding and headers.\\n */\\nfunction ascii_table(data, columns_to_display) {\\n  let table = \\\"\\\"\\n  \\n  // Get the headers\\n  let headers = []\\n  for (let i = 0; i < columns_to_display.length; i++) {\\n    headers.push(columns_to_display[i])\\n  }\\n\\n  // Get the longest string in each column\\n  let longest_strings = []\\n  for (let i = 0; i < headers.length; i++) {\\n    let longest_string = headers[i].length\\n    for (let j = 0; j < data.length; j++) {\\n      let string_length = data[j].json[headers[i]].length\\n      if (string_length > longest_string) {\\n        longest_string = string_length\\n      }\\n    }\\n    longest_strings.push(longest_string)\\n  }\\n\\n  // Add the headers to the table\\n  for (let i = 0; i < headers.length; i++) {\\n    table += headers[i].toString().padEnd(longest_strings[i] + 2, \\\" \\\")\\n  }\\n\\n  // Add the data to the table\\n  for (let i = 0; i < data.length; i++) {\\n    table += \\\"\\\\n\\\"\\n    for (let j = 0; j < headers.length; j++) {\\n      table += data[i].json[headers[j]].toString().padEnd(longest_strings[j] + 2, \\\" \\\")\\n    }\\n  }\\n\\n  return table\\n}\\n\\noutput = {\\n  ascii_table: ascii_table(google_sheets_data, columns_to_display),\\n}\\n\\nconsole.log(output.ascii_table)\\n\\nreturn output\"},\"typeVersion\":1},{\"id\":\"2db7b37b-22f9-424d-a889-33f8a0db2b01\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[340,220],\"parameters\":{\"width\":402,\"height\":433,\"content\":\"## Send Google Sheets data as a message to a Discord channel\\nThis workflow sends a message to a Discord channel when a new row is added or a row is updated in a Google Sheet. The message will send all data rows in the Google Sheet.\\n\\n### How it works\\nUsing a code node, we can use the obtained Google Sheet data to create a custom message that will be sent to Discord. The message will be sent to the Discord channel specified in the Discord node.\\n\\n### Setup\\nThis workflow requires that you set up a Discord webhook and have an existing Google Sheet with data. See how to set up a Discord webhook [here](https://docs.n8n.io/integrations/builtin/credentials/discord/#creating-a-webhook-in-discord).\\n\"},\"typeVersion\":1}],\"connections\":{\"On new or updated row\":{\"main\":[[{\"node\":\"Convert to ASCII table\",\"type\":\"main\",\"index\":0}]]},\"Convert to ASCII table\":{\"main\":[[{\"node\":\"Send message\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This workflow sends a message to a Discord channel when a new row is added or a row is updated in a Google Sheet. The message will send all data rows in the Google Sheet.\n\n## Prerequisites\n\n  * Discord account and [Discord credentials](https://docs.n8n.io/integrations/builtin/credentials/discord/).\n  * Google account and [Google credentials](https://docs.n8n.io/integrations/builtin/credentials/google/).\n\n\n\n## How it works\n\nUsing a code node, we can use the obtained Google Sheet data to create a custom message that will be sent to Discord. The message will be sent to the Discord channel specified in the Discord node.\n\n### Setup\n\nThis workflow requires that you set up a Discord webhook and have an existing Google Sheet with data. See [how to set up a Discord webhook here](https://docs.n8n.io/integrations/builtin/credentials/discord/#creating-a-webhook-in-discord).\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><p>This workflow sends a message to a Discord channel when a new row is added or a row is updated in a Google Sheet. The message will send all data rows in the Google Sheet.</p>\n<h2>Prerequisites</h2>\n<ul>\n<li>Discord account and <a href=\"https://docs.n8n.io/integrations/builtin/credentials/discord/\" rel=\"ugc nofollow\" target=\"_blank\">Discord credentials</a>.</li>\n<li>Google account and <a href=\"https://docs.n8n.io/integrations/builtin/credentials/google/\" rel=\"ugc nofollow\" target=\"_blank\">Google credentials</a>.</li>\n</ul>\n<h2>How it works</h2>\n<p>Using a code node, we can use the obtained Google Sheet data to create a custom message that will be sent to Discord. The message will be sent to the Discord channel specified in the Discord node.</p>\n<h3>Setup</h3>\n<p>This workflow requires that you set up a Discord webhook and have an existing Google Sheet with data. See <a href=\"https://docs.n8n.io/integrations/builtin/credentials/discord/#creating-a-webhook-in-discord\" rel=\"ugc nofollow\" target=\"_blank\">how to set up a Discord webhook here</a>.</p>\n</div><!--]-->",
  "readme_zh": "当Google表格中添加新行或更新某行时，该工作流会向Discord频道发送消息。消息将包含Google表格中的所有数据行。\n\n## 先决条件\n\n* Discord账户及[Discord凭证](https://docs.n8n.io/integrations/builtin/credentials/discord/)  \n* Google账户及[Google凭证](https://docs.n8n.io/integrations/builtin/credentials/google/)  \n\n## 运行机制\n\n通过代码节点，我们可以利用获取的Google表格数据创建定制化消息并发送至Discord。消息将被发送至Discord节点中指定的频道。\n\n### 设置说明\n\n使用本工作流需提前配置Discord网络钩子并准备含数据的Google表格。具体操作请参阅[Discord网络钩子创建指南](https://docs.n8n.io/integrations/builtin/credentials/discord/#creating-a-webhook-in-discord)。",
  "title_zh": "将Google Sheets数据作为消息发送至Discord频道",
  "publish_date_zh": "最后更新于10个月前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"a2434c94d549548a685cca39cc4614698e94f527bcea84eefa363f1037ae14cd\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"b3a0fa7c-eb47-4f51-98d7-ac1a8de7b05d\",\n      \"name\": \"On new or updated row\",\n      \"type\": \"n8n-nodes-base.googleSheetsTrigger\",\n      \"position\": [\n        800,\n        380\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"columnsToWatch\": [\n            \"Security Code\"\n          ]\n        },\n        \"pollTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"everyMinute\"\n            }\n          ]\n        },\n        \"sheetName\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"gid=0\",\n          \"cachedResultUrl\": \"https://docs.google.com/spreadsheets/d/1Np8TQv7kWwwrGiPkWWsmr4WYWAosv1BMBwwCd0f-dis/edit#gid=0\",\n          \"cachedResultName\": \"Investments\"\n        },\n        \"documentId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"1Np8TQv7kWwwrGiPkWWsmr4WYWAosv1BMBwwCd0f-dis\",\n          \"cachedResultUrl\": \"https://docs.google.com/spreadsheets/d/1Np8TQv7kWwwrGiPkWWsmr4WYWAosv1BMBwwCd0f-dis/edit?usp=drivesdk\",\n          \"cachedResultName\": \"Investments\"\n        }\n      },\n      \"credentials\": {\n        \"googleSheetsTriggerOAuth2Api\": {\n          \"id\": \"35\",\n          \"name\": \"TEST USER\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"61b96d9b-801c-43e6-b89a-a55245386e4f\",\n      \"name\": \"Send message\",\n      \"type\": \"n8n-nodes-base.discord\",\n      \"position\": [\n        1200,\n        380\n      ],\n      \"parameters\": {\n        \"text\": \"=```\\n{{ $json.ascii_table }}\\n```\",\n        \"options\": {},\n        \"webhookUri\": \"https://discord.com/api/webhooks/...\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2dc9ce88-2079-4419-9f48-2281ac25cb36\",\n      \"name\": \"Convert to ASCII table\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1000,\n        380\n      ],\n      \"parameters\": {\n        \"jsCode\": \"/* configure columns to be displayed */\\nconst columns_to_display = [\\n  \\\"Security Code\\\",\\n  \\\"Price\\\",\\n  \\\"Quantity\\\",\\n]\\n\\n/* End of configuration section (do not edit code below) */\\nconst google_sheets_data = $('On new or updated row').all();\\n\\n/**\\n * Takes a list of objects and returns an ascii table with\\n * padding and headers.\\n */\\nfunction ascii_table(data, columns_to_display) {\\n  let table = \\\"\\\"\\n  \\n  // Get the headers\\n  let headers = []\\n  for (let i = 0; i < columns_to_display.length; i++) {\\n    headers.push(columns_to_display[i])\\n  }\\n\\n  // Get the longest string in each column\\n  let longest_strings = []\\n  for (let i = 0; i < headers.length; i++) {\\n    let longest_string = headers[i].length\\n    for (let j = 0; j < data.length; j++) {\\n      let string_length = data[j].json[headers[i]].length\\n      if (string_length > longest_string) {\\n        longest_string = string_length\\n      }\\n    }\\n    longest_strings.push(longest_string)\\n  }\\n\\n  // Add the headers to the table\\n  for (let i = 0; i < headers.length; i++) {\\n    table += headers[i].toString().padEnd(longest_strings[i] + 2, \\\" \\\")\\n  }\\n\\n  // Add the data to the table\\n  for (let i = 0; i < data.length; i++) {\\n    table += \\\"\\\\n\\\"\\n    for (let j = 0; j < headers.length; j++) {\\n      table += data[i].json[headers[j]].toString().padEnd(longest_strings[j] + 2, \\\" \\\")\\n    }\\n  }\\n\\n  return table\\n}\\n\\noutput = {\\n  ascii_table: ascii_table(google_sheets_data, columns_to_display),\\n}\\n\\nconsole.log(output.ascii_table)\\n\\nreturn output\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2db7b37b-22f9-424d-a889-33f8a0db2b01\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        340,\n        220\n      ],\n      \"parameters\": {\n        \"width\": 402,\n        \"height\": 433,\n        \"content\": \"## 将Google表格数据作为消息发送至Discord频道\\n当Google表格新增行或行数据更新时，该工作流会向Discord频道发送包含表格所有数据行的消息。\\n\\n### 实现原理\\n通过代码节点，我们可以利用获取的Google表格数据创建定制化消息，并经由Discord节点发送至指定频道。\\n\\n### 配置说明\\n使用本工作流需提前创建Discord webhook并准备含数据的Google表格。Discord webhook设置方法参见[此文档](https://docs.n8n.io/integrations/builtin/credentials/discord/#creating-a-webhook-in-discord)。\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"connections\": {\n    \"On new or updated row\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert to ASCII table\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert to ASCII table\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send message\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}