{
  "title": "Run Apache Airflow DAG and Retrieve XCom Value",
  "url": "https://n8n.io/workflows/3026-run-apache-airflow-dag-and-retrieve-xcom-value/",
  "category": "Other",
  "category_url": "https://n8n.io/workflows/categories/other/?sort=createdAt:desc",
  "author": "Antonio Cheong",
  "publish_date": "Last update 2 months ago",
  "publish_date_absolute": "",
  "content": "",
  "workflow_json": "{\"id\":\"Y5URlIlbX4HDzWKA\",\"meta\":{\"instanceId\":\"6ae0aa8b6c9099f1f8ed1265281802eab47aaf5b2845f317791e4ac7ee5b7279\",\"templateCredsSetupCompleted\":true},\"name\":\"airflow dag_run\",\"tags\":[{\"id\":\"YSelDQ3zfWB0LeVn\",\"name\":\"airflow\",\"createdAt\":\"2025-02-25T04:17:21.943Z\",\"updatedAt\":\"2025-02-25T04:17:21.943Z\"}],\"nodes\":[{\"id\":\"0d4457ef-7a88-4755-8bd2-b0e8148f86f4\",\"name\":\"Airflow: dag_run\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[380,-40],\"parameters\":{\"url\":\"={{ $('airflow-api').item.json.prefix }}/api/v1/dags/{{ $('in data').item.json.dag_id }}/dagRuns\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={\\n  \\\"conf\\\": {{ $('in data').item.json.conf }}\\n}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpBasicAuth\"},\"credentials\":{\"httpBasicAuth\":{\"id\":\"vTR4WWA7czRn2ULn\",\"name\":\"Airflow\"}},\"typeVersion\":4.2},{\"id\":\"acf477a0-aad5-402a-a5a0-543f3e277333\",\"name\":\"Airflow: dag_run - state\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[840,60],\"parameters\":{\"url\":\"={{ $('airflow-api').item.json.prefix }}/api/v1/dags/{{ $('in data').item.json.dag_id }}/dagRuns/{{ $('Airflow: dag_run').item.json.dag_run_id }}\",\"options\":{},\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpBasicAuth\"},\"credentials\":{\"httpBasicAuth\":{\"id\":\"vTR4WWA7czRn2ULn\",\"name\":\"Airflow\"}},\"typeVersion\":4.2},{\"id\":\"26982a6f-6281-4140-a05c-ea6f3f2c0cb2\",\"name\":\"count\",\"type\":\"n8n-nodes-base.code\",\"position\":[1180,40],\"parameters\":{\"jsCode\":\"try {\\n  $('count').first().json.count += 1\\n  return {count:$('count').first().json.count};\\n}\\ncatch (error) {\\n  return {count:1};\\n}\"},\"typeVersion\":2},{\"id\":\"613718f6-ba7e-415c-8e07-0123224e1ac6\",\"name\":\"dag run fail\",\"type\":\"n8n-nodes-base.stopAndError\",\"position\":[1180,400],\"parameters\":{\"errorMessage\":\"dag run fail\"},\"typeVersion\":1},{\"id\":\"66ba0e85-4608-418b-b27b-8cbc50f78319\",\"name\":\"if state == queued\",\"type\":\"n8n-nodes-base.if\",\"position\":[520,60],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"0ae67986-09c0-443d-9262-075bfe94ca2e\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.state }}\",\"rightValue\":\"queued\"}]}},\"typeVersion\":2.2},{\"id\":\"92176e9a-0ea7-48b0-9ca0-ea4ea8442cee\",\"name\":\"dag run wait too long\",\"type\":\"n8n-nodes-base.stopAndError\",\"position\":[1500,40],\"parameters\":{\"errorMessage\":\"dag run wait too long\"},\"typeVersion\":1},{\"id\":\"6a05471f-232e-44d6-9dbb-583400537507\",\"name\":\"Airflow: dag_run - get result\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1180,-140],\"parameters\":{\"url\":\"={{ $('airflow-api').item.json.prefix }}/api/v1/dags/{{ $('in data').item.json.dag_id }}/dagRuns/{{ $('Airflow: dag_run').item.json.dag_run_id }}/taskInstances/{{ $('in data').item.json.task_id }}/xcomEntries/return_value\",\"options\":{},\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpBasicAuth\"},\"credentials\":{\"httpBasicAuth\":{\"id\":\"vTR4WWA7czRn2ULn\",\"name\":\"Airflow\"}},\"typeVersion\":4.2},{\"id\":\"fb2211d5-cef2-4be2-b281-de315aa07093\",\"name\":\"Switch: state\",\"type\":\"n8n-nodes-base.switch\",\"position\":[980,-40],\"parameters\":{\"rules\":{\"values\":[{\"outputKey\":\"=success\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"4d4ecf8a-c02b-4722-9528-1919cdf9b83e\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.state }}\",\"rightValue\":\"success\"}]},\"renameOutput\":true},{\"outputKey\":\"queued\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"operator\":{\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.state }}\",\"rightValue\":\"queued\"}]},\"renameOutput\":true},{\"outputKey\":\"running\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"fa5d8524-334a-4ab1-b543-bba75cafd0ec\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.state }}\",\"rightValue\":\"running\"}]},\"renameOutput\":true},{\"outputKey\":\"failed\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"dd853677-c51c-4c06-8680-3c9d1829d6bd\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.state }}\",\"rightValue\":\"failed\"}]},\"renameOutput\":true}]},\"options\":{\"fallbackOutput\":3}},\"typeVersion\":3.2},{\"id\":\"5941496a-a64d-432c-9103-e7bcae4b8d67\",\"name\":\"in data\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[100,-40],\"parameters\":{\"workflowInputs\":{\"values\":[{\"name\":\"dag_id\"},{\"name\":\"task_id\"},{\"name\":\"conf\"},{\"name\":\"wait\",\"type\":\"number\"},{\"name\":\"wait_time\",\"type\":\"number\"}]}},\"typeVersion\":1.1},{\"id\":\"e77fed4a-b61a-4126-8be3-43ef8a832cfe\",\"name\":\"Wait\",\"type\":\"n8n-nodes-base.wait\",\"position\":[700,-40],\"webhookId\":\"3d164954-2926-4174-afc1-261dfdfa9e46\",\"parameters\":{\"amount\":\"={{ $('in data').item.json.hasOwnProperty('wait') ? $('in data').item.json.wait : 10 }}\"},\"typeVersion\":1.1},{\"id\":\"8ffae842-4400-4667-85bb-50644ef10fc0\",\"name\":\"If count > wait_time\",\"type\":\"n8n-nodes-base.if\",\"position\":[1320,140],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"1829d538-5633-4f5c-ad1b-285b084b35ee\",\"operator\":{\"type\":\"number\",\"operation\":\"gt\"},\"leftValue\":\"={{ $json.count }}\",\"rightValue\":\"={{ $('in data').item.json.hasOwnProperty('wait_time') ? $('in data').item.json.wait_time : 12 }}\"}]}},\"typeVersion\":2.2},{\"id\":\"c49d4a1b-6f25-471b-9c21-d3defb709dda\",\"name\":\"airflow-api\",\"type\":\"n8n-nodes-base.set\",\"position\":[240,60],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"40a5ab5b-dee1-44c4-910a-d6b85af75aed\",\"name\":\"prefix\",\"type\":\"string\",\"value\":\"https://airflow.example.com\"}]}},\"typeVersion\":3.4}],\"active\":false,\"pinData\":{\"in data\":[{\"json\":{\"conf\":\"{\\n  \\\"image\\\": \\\"nginx\\\",\\n  \\\"tag\\\": \\\"latest\\\",\\n  \\\"tag_requested\\\": 1000\\n}\",\"wait\":10,\"dag_id\":\"image_tag_related\",\"task_id\":\"image_tag_related\",\"wait_time\":18}}]},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"57fdbcfc-7950-4aff-9ac7-3c2a99a2c8c8\",\"connections\":{\"Wait\":{\"main\":[[{\"node\":\"Airflow: dag_run - state\",\"type\":\"main\",\"index\":0}]]},\"count\":{\"main\":[[{\"node\":\"If count > wait_time\",\"type\":\"main\",\"index\":0}]]},\"in data\":{\"main\":[[{\"node\":\"airflow-api\",\"type\":\"main\",\"index\":0}]]},\"airflow-api\":{\"main\":[[{\"node\":\"Airflow: dag_run\",\"type\":\"main\",\"index\":0}]]},\"Switch: state\":{\"main\":[[{\"node\":\"Airflow: dag_run - get result\",\"type\":\"main\",\"index\":0}],[{\"node\":\"count\",\"type\":\"main\",\"index\":0}],[{\"node\":\"count\",\"type\":\"main\",\"index\":0}],[{\"node\":\"dag run fail\",\"type\":\"main\",\"index\":0}]]},\"Airflow: dag_run\":{\"main\":[[{\"node\":\"if state == queued\",\"type\":\"main\",\"index\":0}]]},\"if state == queued\":{\"main\":[[{\"node\":\"Wait\",\"type\":\"main\",\"index\":0}],[{\"node\":\"dag run fail\",\"type\":\"main\",\"index\":0}]]},\"If count > wait_time\":{\"main\":[[{\"node\":\"dag run wait too long\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Wait\",\"type\":\"main\",\"index\":0}]]},\"Airflow: dag_run - state\":{\"main\":[[{\"node\":\"Switch: state\",\"type\":\"main\",\"index\":0}]]},\"Airflow: dag_run - get result\":{\"main\":[[]]}}}",
  "readme": "# Run Apache Airflow DAG and Retrieve XCom Value\n\n## What this workflow does\n\nThis workflow integrates the Apache Airflow API [DAGRun](https://airflow.apache.org/docs/apache-airflow/2.10.5/stable-rest-api-ref.html#tag/DAGRun) and [XCom](https://airflow.apache.org/docs/apache-airflow/2.10.5/stable-rest-api-ref.html#tag/XCom). It enables n8n to trigger Airflow DAGs and retrieve the execution results.\n\n## Preparation:\n\n  1. **Update Airflow API Link Prefix**\n\n     * Navigate to the `airflow-api` node.\n     * Update the prefix of the Airflow API link in the format: `http(s)://ip:port`.\n     * Example: `https://airflow.example.com`\n  2. **Configure Authentication**\n\n     * Go to the `Airflow: dag_run` node.\n     * Update the `Basic Auth` credentials with your Airflow username and password.\n     * Repeat this step for `Airflow: dag_run - state` and `Airflow: dag_run - get result` nodes.\n\n**Security Note:** Using Basic Authentication requires storing credentials in plaintext. If possible, consider using API Keys or Tokens for enhanced security.\n\n     * An example is setting Airflow's [API Authentication](https://airflow.apache.org/docs/apache-airflow-providers-fab/stable/auth-manager/api-authentication.html) to [basic_auth](https://airflow.apache.org/docs/apache-airflow-providers-fab/stable/auth-manager/api-authentication.html#basic-authentication). Choose other authentication methods if needed.\n     * Ensure the user account has the following permissions: `can create on DAG Runs`, `can read on DAG Runs`, `can read on XComs`, `can edit on DAGs`, and `can read on DAGs`.\n\n\n\n## How to Use:\n\nTo execute this workflow, use the **Execute Sub-workflow** node with the following input parameters:\n\n  * **dag_id** : The DAG ID (name) in Airflow that you want to trigger.\n  * **task_id** : The Task ID (name) from which you want to retrieve the XCom return_value.\n  * **conf** : Input data for the Airflow DAG run.\n  * **wait** : Delay (in seconds) between each `Airflow: dag_run - state` check.\n  * **wait_time** : The maximum time (in seconds) to wait for `Airflow: dag_run - state` before returning an error.\n\n\n\n## Output:\n\n  * The workflow returns the XCom result from `Airflow: dag_run - get result`.\n  * The XCom `return_value` is stored in the `value` field.\n\n\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><h1>Run Apache Airflow DAG and Retrieve XCom Value</h1>\n<h2>What this workflow does</h2>\n<p>This workflow integrates the Apache Airflow API <a href=\"https://airflow.apache.org/docs/apache-airflow/2.10.5/stable-rest-api-ref.html#tag/DAGRun\" rel=\"ugc nofollow\" target=\"_blank\">DAGRun</a> and <a href=\"https://airflow.apache.org/docs/apache-airflow/2.10.5/stable-rest-api-ref.html#tag/XCom\" rel=\"ugc nofollow\" target=\"_blank\">XCom</a>. It enables n8n to trigger Airflow DAGs and retrieve the execution results.</p>\n<h2>Preparation:</h2>\n<ol>\n<li>\n<p><strong>Update Airflow API Link Prefix</strong></p>\n<ul>\n<li>Navigate to the <code>airflow-api</code> node.</li>\n<li>Update the prefix of the Airflow API link in the format: <code>http(s)://ip:port</code>.</li>\n<li>Example: <code>https://airflow.example.com</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Configure Authentication</strong></p>\n<ul>\n<li>Go to the <code>Airflow: dag_run</code> node.</li>\n<li>Update the <code>Basic Auth</code> credentials with your Airflow username and password.</li>\n<li>Repeat this step for <code>Airflow: dag_run - state</code> and <code>Airflow: dag_run - get result</code> nodes.</li>\n</ul>\n<p><strong>Security Note:</strong> Using Basic Authentication requires storing credentials in plaintext. If possible, consider using API Keys or Tokens for enhanced security.</p>\n<ul>\n<li>An example is setting Airflow's <a href=\"https://airflow.apache.org/docs/apache-airflow-providers-fab/stable/auth-manager/api-authentication.html\" rel=\"ugc nofollow\" target=\"_blank\">API Authentication</a> to <a href=\"https://airflow.apache.org/docs/apache-airflow-providers-fab/stable/auth-manager/api-authentication.html#basic-authentication\" rel=\"ugc nofollow\" target=\"_blank\">basic_auth</a>. Choose other authentication methods if needed.</li>\n<li>Ensure the user account has the following permissions: <code>can create on DAG Runs</code>, <code>can read on DAG Runs</code>, <code>can read on XComs</code>, <code>can edit on DAGs</code>, and <code>can read on DAGs</code>.</li>\n</ul>\n</li>\n</ol>\n<h2>How to Use:</h2>\n<p>To execute this workflow, use the <strong>Execute Sub-workflow</strong> node with the following input parameters:</p>\n<ul>\n<li><strong>dag_id</strong>: The DAG ID (name) in Airflow that you want to trigger.</li>\n<li><strong>task_id</strong>: The Task ID (name) from which you want to retrieve the XCom return_value.</li>\n<li><strong>conf</strong>: Input data for the Airflow DAG run.</li>\n<li><strong>wait</strong>: Delay (in seconds) between each <code>Airflow: dag_run - state</code> check.</li>\n<li><strong>wait_time</strong>: The maximum time (in seconds) to wait for <code>Airflow: dag_run - state</code> before returning an error.</li>\n</ul>\n<h2>Output:</h2>\n<ul>\n<li>The workflow returns the XCom result from <code>Airflow: dag_run - get result</code>.</li>\n<li>The XCom <code>return_value</code> is stored in the <code>value</code> field.</li>\n</ul>\n</div><!--]-->"
}