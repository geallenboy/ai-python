{
  "title": "Build your own N8N Workflows MCP Server",
  "url": "https://n8n.io/workflows/3770-build-your-own-n8n-workflows-mcp-server/",
  "category": "Other",
  "category_url": "https://n8n.io/workflows/categories/other/?sort=createdAt:desc",
  "author": "Jimleuk",
  "publish_date": "Last update 6 days ago",
  "publish_date_absolute": "",
  "content": "",
  "workflow_json": "",
  "readme": "### This n8n template shows you how to create an MCP server out of your existing n8n workflows. With this, any MCP client connected can get more done with powerful end-to-end workflows rather than just simple tools.\n\nDesigning agent tools for outcome rather than utility has been a long recommended practice of mine and it applies well when it comes to building MCP servers; In gist, agents to be making the least amount of calls possible to complete a task.\n\nThis is why n8n can be a great fit for MCP servers! This template connects your agent/MCP client (like Claude Desktop) to your existing workflows by allowing the AI to discover, manage and run these workflows indirectly.\n\n### How it works\n\n  * An MCP trigger is used and attaches 4 custom workflow tools to discover and manage existing workflows to use and 1 custom workflow tool to execute them.\n  * We'll introduce an idea of \"available\" workflows which the agent is allowed to use. This will help limit and avoid some issues when trying to use every workflow such as clashes or non-production.\n  * The n8n node is a core node which taps into your n8n instance API and is able to retrieve all workflows or filter by tag. For our example, we've tagged the workflows we want to use with \"mcp\" and these are exposed through the tool \"search workflows\".\n  * Redis is used as our main memory for keeping track of which workflows are \"available\". The tools we have are \"add Workflow\", \"remove workflow\" and \"list workflows\". The agent should be able to manage this autonomously.\n  * Our approach to allow the agent to execute workflows is to use the Subworkflow trigger. The tricky part is figuring out the input schema for each but was eventually solved by pulling this information out of the workflow's template JSON and adding it as part of the \"available\" workflow's description. To pass parameters through the Subworkflow trigger, we can do so via the passthrough method - which is that incoming data is used when parameters are not explicitly set within the node.\n  * When running, the agent will not see the \"available\" workflows immediately but will need to discover them via \"list\" and \"search\". The human will need to make the agent aware that these workflows will be preferred when answering queries or completing tasks.\n\n\n\n### How to use\n\n  * First, decide which workflows will be made visible to the MCP server. This example uses the tag of \"mcp\" but you can all workflows or filter in other ways.\n  * Next, ensure these workflows have Subworkflow triggers with input schema set. This is how the MCP server will run them.\n  * Set the MCP server to \"active\" which turns on production mode and makes available to production URL.\n  * Use this production URL in your MCP client. For Claude Desktop, see the instructions here - <https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop>.\n  * There is a small learning curve which will shape how you communicate with this MCP server so be patient and test. The MCP server will work better if there is a focused goal in mind ie. Research and report, rather than just a collection of unrelated tools.\n\n\n\n### Requirements\n\n  * N8N API key to filter for selected workflows.\n  * N8N workflows with Subworkflow triggers!\n  * Redis for memory and tracking the \"available\" workflows.\n  * MCP Client or Agent for usage such as Claude Desktop - <https://claude.ai/download>\n\n\n\n### Customising this workflow\n\n  * If your targeted workflows do not use the subworkflow trigger, it is possible to amend the executeTool to use HTTP requests for webhooks.\n  * Managing available workflows helps if you have many workflows where some may be too similar for the agent. If this isn't a problem for you however, feel free to remove the concept of \"available\" and let the agent discover and use all workflows!\n\n\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><h3>This n8n template shows you how to create an MCP server out of your existing n8n workflows. With this, any MCP client connected can get more done with powerful end-to-end workflows rather than just simple tools.</h3>\n<p>Designing agent tools for outcome rather than utility has been a long recommended practice of mine and it applies well when it comes to building MCP servers; In gist, agents to be making the least amount of calls possible to complete a task.</p>\n<p>This is why n8n can be a great fit for MCP servers! This template connects your agent/MCP client (like Claude Desktop) to your existing workflows by allowing the AI to discover, manage and run these workflows indirectly.</p>\n<h3>How it works</h3>\n<ul>\n<li>An MCP trigger is used and attaches 4 custom workflow tools to discover and manage existing workflows to use and 1 custom workflow tool to execute them.</li>\n<li>We'll introduce an idea of \"available\" workflows which the agent is allowed to use. This will help limit and avoid some issues when trying to use every workflow such as clashes or non-production.</li>\n<li>The n8n node is a core node which taps into your n8n instance API and is able to retrieve all workflows or filter by tag. For our example, we've tagged the workflows we want to use with \"mcp\" and these are exposed through the tool \"search workflows\".</li>\n<li>Redis is used as our main memory for keeping track of which workflows are \"available\". The tools we have are \"add Workflow\", \"remove workflow\" and \"list workflows\". The agent should be able to manage this autonomously.</li>\n<li>Our approach to allow the agent to execute workflows is to use the Subworkflow trigger. The tricky part is figuring out the input schema for each but was eventually solved by pulling this information out of the workflow's template JSON and adding it as part of the \"available\" workflow's description. To pass parameters through the Subworkflow trigger, we can do so via the passthrough method - which is that incoming data is used when parameters are not explicitly set within the node.</li>\n<li>When running, the agent will not see the \"available\" workflows immediately but will need to discover them via \"list\" and \"search\". The human will need to make the agent aware that these workflows will be preferred when answering queries or completing tasks.</li>\n</ul>\n<h3>How to use</h3>\n<ul>\n<li>First, decide which workflows will be made visible to the MCP server. This example uses the tag of \"mcp\" but you can all workflows or filter in other ways.</li>\n<li>Next, ensure these workflows have Subworkflow triggers with input schema set. This is how the MCP server will run them.</li>\n<li>Set the MCP server to \"active\" which turns on production mode and makes available to production URL.</li>\n<li>Use this production URL in your MCP client. For Claude Desktop, see the instructions here - <a href=\"https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop\" rel=\"ugc nofollow\" target=\"_blank\">https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop</a>.</li>\n<li>There is a small learning curve which will shape how you communicate with this MCP server so be patient and test. The MCP server will work better if there is a focused goal in mind ie. Research and report, rather than just a collection of unrelated tools.</li>\n</ul>\n<h3>Requirements</h3>\n<ul>\n<li>N8N API key to filter for selected workflows.</li>\n<li>N8N workflows with Subworkflow triggers!</li>\n<li>Redis for memory and tracking the \"available\" workflows.</li>\n<li>MCP Client or Agent for usage such as Claude Desktop - <a href=\"https://claude.ai/download\" rel=\"ugc nofollow\" target=\"_blank\">https://claude.ai/download</a></li>\n</ul>\n<h3>Customising this workflow</h3>\n<ul>\n<li>If your targeted workflows do not use the subworkflow trigger, it is possible to amend the executeTool to use HTTP requests for webhooks.</li>\n<li>Managing available workflows helps if you have many workflows where some may be too similar for the agent. If this isn't a problem for you however, feel free to remove the concept of \"available\" and let the agent discover and use all workflows!</li>\n</ul>\n</div><!--]-->"
}