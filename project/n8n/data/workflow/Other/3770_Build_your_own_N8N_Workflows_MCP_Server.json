{
  "title": "Build your own N8N Workflows MCP Server",
  "url": "https://n8n.io/workflows/3770-build-your-own-n8n-workflows-mcp-server/",
  "category": "Other",
  "category_url": "https://n8n.io/workflows/categories/other/?sort=createdAt:desc",
  "author": "Jimleuk",
  "publish_date": "Last update 6 days ago",
  "publish_date_absolute": "2025-05-17",
  "content": "",
  "workflow_json": "",
  "readme": "### This n8n template shows you how to create an MCP server out of your existing n8n workflows. With this, any MCP client connected can get more done with powerful end-to-end workflows rather than just simple tools.\n\nDesigning agent tools for outcome rather than utility has been a long recommended practice of mine and it applies well when it comes to building MCP servers; In gist, agents to be making the least amount of calls possible to complete a task.\n\nThis is why n8n can be a great fit for MCP servers! This template connects your agent/MCP client (like Claude Desktop) to your existing workflows by allowing the AI to discover, manage and run these workflows indirectly.\n\n### How it works\n\n  * An MCP trigger is used and attaches 4 custom workflow tools to discover and manage existing workflows to use and 1 custom workflow tool to execute them.\n  * We'll introduce an idea of \"available\" workflows which the agent is allowed to use. This will help limit and avoid some issues when trying to use every workflow such as clashes or non-production.\n  * The n8n node is a core node which taps into your n8n instance API and is able to retrieve all workflows or filter by tag. For our example, we've tagged the workflows we want to use with \"mcp\" and these are exposed through the tool \"search workflows\".\n  * Redis is used as our main memory for keeping track of which workflows are \"available\". The tools we have are \"add Workflow\", \"remove workflow\" and \"list workflows\". The agent should be able to manage this autonomously.\n  * Our approach to allow the agent to execute workflows is to use the Subworkflow trigger. The tricky part is figuring out the input schema for each but was eventually solved by pulling this information out of the workflow's template JSON and adding it as part of the \"available\" workflow's description. To pass parameters through the Subworkflow trigger, we can do so via the passthrough method - which is that incoming data is used when parameters are not explicitly set within the node.\n  * When running, the agent will not see the \"available\" workflows immediately but will need to discover them via \"list\" and \"search\". The human will need to make the agent aware that these workflows will be preferred when answering queries or completing tasks.\n\n\n\n### How to use\n\n  * First, decide which workflows will be made visible to the MCP server. This example uses the tag of \"mcp\" but you can all workflows or filter in other ways.\n  * Next, ensure these workflows have Subworkflow triggers with input schema set. This is how the MCP server will run them.\n  * Set the MCP server to \"active\" which turns on production mode and makes available to production URL.\n  * Use this production URL in your MCP client. For Claude Desktop, see the instructions here - <https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop>.\n  * There is a small learning curve which will shape how you communicate with this MCP server so be patient and test. The MCP server will work better if there is a focused goal in mind ie. Research and report, rather than just a collection of unrelated tools.\n\n\n\n### Requirements\n\n  * N8N API key to filter for selected workflows.\n  * N8N workflows with Subworkflow triggers!\n  * Redis for memory and tracking the \"available\" workflows.\n  * MCP Client or Agent for usage such as Claude Desktop - <https://claude.ai/download>\n\n\n\n### Customising this workflow\n\n  * If your targeted workflows do not use the subworkflow trigger, it is possible to amend the executeTool to use HTTP requests for webhooks.\n  * Managing available workflows helps if you have many workflows where some may be too similar for the agent. If this isn't a problem for you however, feel free to remove the concept of \"available\" and let the agent discover and use all workflows!\n\n\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><h3>This n8n template shows you how to create an MCP server out of your existing n8n workflows. With this, any MCP client connected can get more done with powerful end-to-end workflows rather than just simple tools.</h3>\n<p>Designing agent tools for outcome rather than utility has been a long recommended practice of mine and it applies well when it comes to building MCP servers; In gist, agents to be making the least amount of calls possible to complete a task.</p>\n<p>This is why n8n can be a great fit for MCP servers! This template connects your agent/MCP client (like Claude Desktop) to your existing workflows by allowing the AI to discover, manage and run these workflows indirectly.</p>\n<h3>How it works</h3>\n<ul>\n<li>An MCP trigger is used and attaches 4 custom workflow tools to discover and manage existing workflows to use and 1 custom workflow tool to execute them.</li>\n<li>We'll introduce an idea of \"available\" workflows which the agent is allowed to use. This will help limit and avoid some issues when trying to use every workflow such as clashes or non-production.</li>\n<li>The n8n node is a core node which taps into your n8n instance API and is able to retrieve all workflows or filter by tag. For our example, we've tagged the workflows we want to use with \"mcp\" and these are exposed through the tool \"search workflows\".</li>\n<li>Redis is used as our main memory for keeping track of which workflows are \"available\". The tools we have are \"add Workflow\", \"remove workflow\" and \"list workflows\". The agent should be able to manage this autonomously.</li>\n<li>Our approach to allow the agent to execute workflows is to use the Subworkflow trigger. The tricky part is figuring out the input schema for each but was eventually solved by pulling this information out of the workflow's template JSON and adding it as part of the \"available\" workflow's description. To pass parameters through the Subworkflow trigger, we can do so via the passthrough method - which is that incoming data is used when parameters are not explicitly set within the node.</li>\n<li>When running, the agent will not see the \"available\" workflows immediately but will need to discover them via \"list\" and \"search\". The human will need to make the agent aware that these workflows will be preferred when answering queries or completing tasks.</li>\n</ul>\n<h3>How to use</h3>\n<ul>\n<li>First, decide which workflows will be made visible to the MCP server. This example uses the tag of \"mcp\" but you can all workflows or filter in other ways.</li>\n<li>Next, ensure these workflows have Subworkflow triggers with input schema set. This is how the MCP server will run them.</li>\n<li>Set the MCP server to \"active\" which turns on production mode and makes available to production URL.</li>\n<li>Use this production URL in your MCP client. For Claude Desktop, see the instructions here - <a href=\"https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop\" rel=\"ugc nofollow\" target=\"_blank\">https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop</a>.</li>\n<li>There is a small learning curve which will shape how you communicate with this MCP server so be patient and test. The MCP server will work better if there is a focused goal in mind ie. Research and report, rather than just a collection of unrelated tools.</li>\n</ul>\n<h3>Requirements</h3>\n<ul>\n<li>N8N API key to filter for selected workflows.</li>\n<li>N8N workflows with Subworkflow triggers!</li>\n<li>Redis for memory and tracking the \"available\" workflows.</li>\n<li>MCP Client or Agent for usage such as Claude Desktop - <a href=\"https://claude.ai/download\" rel=\"ugc nofollow\" target=\"_blank\">https://claude.ai/download</a></li>\n</ul>\n<h3>Customising this workflow</h3>\n<ul>\n<li>If your targeted workflows do not use the subworkflow trigger, it is possible to amend the executeTool to use HTTP requests for webhooks.</li>\n<li>Managing available workflows helps if you have many workflows where some may be too similar for the agent. If this isn't a problem for you however, feel free to remove the concept of \"available\" and let the agent discover and use all workflows!</li>\n</ul>\n</div><!--]-->",
  "readme_zh": "### 该n8n模板演示了如何将现有工作流升级为MCP服务器。通过此方案，任何连接的MCP客户端都能借助强大的端到端工作流（而非简单工具）实现更复杂的任务。\n\n\"以结果为导向而非功能堆砌\"是我长期推荐的智能体工具设计准则，这一理念在构建MCP服务器时尤为适用——核心在于让智能体以最小调用次数完成任务。\n\n这正是n8n与MCP服务器完美契合的原因！本模板通过让AI间接发现、管理和运行工作流，将智能体/MCP客户端（如Claude Desktop）与现有工作流无缝连接。\n\n### 运作原理\n\n* 采用MCP触发器挂载4个定制工具：工作流发现/管理工具组（3个）与执行工具（1个）\n* 引入\"可用工作流\"机制，通过白名单制度避免生产环境冲突等问题\n* 核心n8n节点通过API对接实例，支持按标签筛选（示例中使用\"mcp\"标签），这些工作流将通过\"搜索工作流\"工具暴露\n* 采用Redis作为\"可用工作流\"的实时记忆库，提供\"添加/移除/列举工作流\"三工具，确保智能体自主管理能力\n* 执行方案采用子工作流触发器，关键突破在于通过解析模板JSON获取输入模式，并将其整合至工作流描述中。参数传递采用穿透模式——当节点未显式设置参数时自动使用输入数据\n* 运行时智能体需通过\"列举\"和\"搜索\"主动发现可用工作流，需人工引导其优先选用这些工作流处理任务\n\n### 使用指南\n\n1. **工作流筛选**：确定对MCP可见的工作流（示例使用\"mcp\"标签，支持全量或其他筛选方式）\n2. **触发器配置**：确保目标工作流已设置子工作流触发器及输入模式\n3. **服务激活**：切换MCP服务器至\"active\"生产模式并生成访问URL\n4. **客户端配置**：在MCP客户端（如Claude Desktop）中配置生产URL（配置指南参见<https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/#integrating-with-claude-desktop>）\n5. **调优建议**：初期存在学习曲线，建议聚焦明确目标（如\"研究汇报\"）而非松散工具集，耐心测试最佳交互方式\n\n### 环境要求\n\n* **凭证**：n8n API密钥（用于工作流筛选）\n* **基础设施**： \n  - 带子工作流触发器的n8n工作流\n  - Redis内存数据库（管理可用工作流状态）\n* **客户端**：MCP兼容客户端如Claude Desktop（下载地址<https://claude.ai/download>）\n\n### 定制扩展\n\n* **替代执行方案**：若目标工作流无子工作流触发器，可修改executeTool工具改用HTTP请求触发webhook\n* **简化模式**：当工作流相似度不高时，可移除\"可用工作流\"机制，允许智能体直接调用全部工作流",
  "title_zh": "构建您自己的N8N工作流MCP服务器",
  "publish_date_zh": "最后更新于6天前"
}