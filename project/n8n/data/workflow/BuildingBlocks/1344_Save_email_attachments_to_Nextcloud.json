{
  "title": "Save email attachments to Nextcloud",
  "url": "https://n8n.io/workflows/1344-save-email-attachments-to-nextcloud/",
  "category": "BuildingBlocks",
  "category_url": "https://n8n.io/workflows/categories/building-blocks/?sort=createdAt:desc",
  "author": "Manu",
  "publish_date": "Last update 10 months ago",
  "publish_date_absolute": "2024-07-07",
  "content": "",
  "workflow_json": "{\"nodes\":[{\"name\":\"IMAP Email\",\"type\":\"n8n-nodes-base.emailReadImap\",\"position\":[240,420],\"parameters\":{\"format\":\"resolved\",\"mailbox\":\"Invoices\",\"options\":{\"customEmailConfig\":\"[\\\"ALL\\\"]\"}},\"typeVersion\":1},{\"name\":\"Nextcloud\",\"type\":\"n8n-nodes-base.nextCloud\",\"position\":[940,420],\"parameters\":{\"path\":\"=Documents/Invoices/{{$json[\\\"date\\\"]}}_{{$json[\\\"from\\\"]}}_{{$binary.file.fileName}}\",\"binaryDataUpload\":true,\"binaryPropertyName\":\"file\"},\"typeVersion\":1},{\"name\":\"Map each attachment\",\"type\":\"n8n-nodes-base.function\",\"position\":[620,420],\"parameters\":{\"functionCode\":\"const _ = require('lodash')\\n\\nconst sanitize = str => _.chain(str)\\n  .replace(/[^A-Za-z0-9&.-]/g, '-') // sanitise via whitelist of characters\\n  .replace(/-(?=-)/g, '') // remove repeated dashes - https://regexr.com/6ag8h\\n  .trim('-') // trim any leading/trailing dashes\\n  .truncate({\\n    length: 60,\\n    omission: '-' // when the string ends with '-', you'll know it was truncated\\n  })\\n  .value()\\n\\nconst result = _.flatMap(items.map(item => {\\n  //console.log({item})\\n\\n  // Maps each attachment to a separate item\\n  return _.values(item.binary).map(file => {\\n    console.log(\\\"Saving attachement:\\\", file.fileName, 'from:', ...item.json.from.value)\\n    \\n    // sanitize filename but exclude extension\\n    const filename_parts = file.fileName.split('.')\\n    const ext = _.slice(filename_parts, filename_parts.length-1)\\n    const filename_main = _.join(_.dropRight(filename_parts), '.')\\n    file.fileName = sanitize(filename_main) + '.' + ext\\n    \\n    return {\\n      json: {\\n        from: sanitize(item.json.from.value[0].name),\\n        date: sanitize(new Date(item.json.date).toISOString().split(\\\"T\\\")[0]) // get date part \\\"2020-01-01\\\"\\n      }, \\n      binary: { file }\\n    }\\n  })\\n}))\\n\\n//console.log(result)\\nreturn result\"},\"typeVersion\":1}],\"connections\":{\"IMAP Email\":{\"main\":[[{\"node\":\"Map each attachment\",\"type\":\"main\",\"index\":0}]]},\"Map each attachment\":{\"main\":[[{\"node\":\"Nextcloud\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This workflow will take all emails you put into a certain folder, upload any attachements to Nextcloud, and mark the emails as read (configurable).\n\nAttachements will be saved with automatically generated filenames:  \n`2021-01-01_From-Sender-Name_Filename-of-attachement.pdf`\n\nInstructions:\n\n  1. **Allow lodash to be used in n8n** (or rewrite the code...)  \n`NODE_FUNCTION_ALLOW_EXTERNAL=lodash` (environment variable)\n  2. Import workflow\n  3. Set credentials for Email & Nextcloud nodes\n  4. Configure to use correct folder / custom filters\n  5. Activate\n\n\n\nCustom filter examples:\n\n  * Only unread emails:  \n`Custom Email Config` = `[\"UNSEEN\"]`\n  * Filter emails by 'to' address:  \n`Custom Email Config` = `[[\"TO\", \"example+invoices@posteo.de\"]]`\n\n\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><p>This workflow will take all emails you put into a certain folder, upload any attachements to Nextcloud, and mark the emails as read (configurable).</p>\n<p>Attachements will be saved with automatically generated filenames:<br>\n<code>2021-01-01_From-Sender-Name_Filename-of-attachement.pdf</code></p>\n<p>Instructions:</p>\n<ol>\n<li><strong>Allow lodash to be used in n8n</strong> (or rewrite the code...)<br>\n<code>NODE_FUNCTION_ALLOW_EXTERNAL=lodash</code> (environment variable)</li>\n<li>Import workflow</li>\n<li>Set credentials for Email &amp; Nextcloud nodes</li>\n<li>Configure to use correct folder / custom filters</li>\n<li>Activate</li>\n</ol>\n<p>Custom filter examples:</p>\n<ul>\n<li>Only unread emails:<br>\n<code>Custom Email Config</code> = <code>[\"UNSEEN\"]</code></li>\n<li>Filter emails by 'to' address:<br>\n<code>Custom Email Config</code> = <code>[[\"TO\", \"example+invoices@posteo.de\"]]</code></li>\n</ul>\n</div><!--]-->",
  "readme_zh": "该工作流程将自动处理指定文件夹内的所有邮件：上传附件至Nextcloud，并将邮件标记为已读（可配置）。\n\n附件会按以下格式自动生成文件名保存：  \n`2021-01-01_发件人名称_附件原文件名.pdf`\n\n操作步骤：\n\n1. **允许n8n使用lodash库**（或自行重写代码）  \n设置环境变量：`NODE_FUNCTION_ALLOW_EXTERNAL=lodash`\n2. 导入工作流\n3. 配置邮件和Nextcloud节点的凭据\n4. 设置正确的邮件文件夹/自定义筛选条件\n5. 启用流程\n\n自定义筛选条件示例：\n\n* 仅处理未读邮件：  \n`Custom Email Config`填写 `[\"UNSEEN\"]`\n* 按收件地址筛选：  \n`Custom Email Config`填写 `[[\"TO\", \"example+invoices@posteo.de\"]]`",
  "title_zh": "将电子邮件附件保存至Nextcloud",
  "publish_date_zh": "最后更新于10个月前",
  "workflow_json_zh": "{\n  \"nodes\": [\n    {\n      \"name\": \"IMAP Email\",\n      \"type\": \"n8n-nodes-base.emailReadImap\",\n      \"position\": [\n        240,\n        420\n      ],\n      \"parameters\": {\n        \"format\": \"resolved\",\n        \"mailbox\": \"Invoices\",\n        \"options\": {\n          \"customEmailConfig\": \"[\\\"ALL\\\"]\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Nextcloud\",\n      \"type\": \"n8n-nodes-base.nextCloud\",\n      \"position\": [\n        940,\n        420\n      ],\n      \"parameters\": {\n        \"path\": \"=Documents/Invoices/{{$json[\\\"date\\\"]}}_{{$json[\\\"from\\\"]}}_{{$binary.file.fileName}}\",\n        \"binaryDataUpload\": true,\n        \"binaryPropertyName\": \"file\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"name\": \"Map each attachment\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        620,\n        420\n      ],\n      \"parameters\": {\n        \"functionCode\": \"const _ = require('lodash')\\n\\nconst sanitize = str => _.chain(str)\\n  .replace(/[^A-Za-z0-9&.-]/g, '-') // sanitise via whitelist of characters\\n  .replace(/-(?=-)/g, '') // remove repeated dashes - https://regexr.com/6ag8h\\n  .trim('-') // trim any leading/trailing dashes\\n  .truncate({\\n    length: 60,\\n    omission: '-' // when the string ends with '-', you'll know it was truncated\\n  })\\n  .value()\\n\\nconst result = _.flatMap(items.map(item => {\\n  //console.log({item})\\n\\n  // Maps each attachment to a separate item\\n  return _.values(item.binary).map(file => {\\n    console.log(\\\"Saving attachement:\\\", file.fileName, 'from:', ...item.json.from.value)\\n    \\n    // sanitize filename but exclude extension\\n    const filename_parts = file.fileName.split('.')\\n    const ext = _.slice(filename_parts, filename_parts.length-1)\\n    const filename_main = _.join(_.dropRight(filename_parts), '.')\\n    file.fileName = sanitize(filename_main) + '.' + ext\\n    \\n    return {\\n      json: {\\n        from: sanitize(item.json.from.value[0].name),\\n        date: sanitize(new Date(item.json.date).toISOString().split(\\\"T\\\")[0]) // get date part \\\"2020-01-01\\\"\\n      }, \\n      binary: { file }\\n    }\\n  })\\n}))\\n\\n//console.log(result)\\nreturn result\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"connections\": {\n    \"IMAP Email\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Map each attachment\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Map each attachment\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Nextcloud\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}