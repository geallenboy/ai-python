{
  "title": "Automated Discord Chatbot for chat Interaction in channel using Gemini 2.0 Flash",
  "url": "https://n8n.io/workflows/3456-automated-discord-chatbot-for-chat-interaction-in-channel-using-gemini-20-flash/",
  "category": "BuildingBlocks",
  "category_url": "https://n8n.io/workflows/categories/building-blocks/?sort=createdAt:desc",
  "author": "JPres",
  "publish_date": "Last update 10 days ago",
  "publish_date_absolute": "",
  "content": "",
  "workflow_json": "{\"id\":\"OqfQNcgTqUK7UvZG\",\"meta\":{\"instanceId\":\"5ce52989094be90be3b3bdd9ed9cee1d7ce1fcecaa598afaec4a50646d32e291\",\"templateCredsSetupCompleted\":true},\"name\":\"Youtube Discord Bot\",\"tags\":[{\"id\":\"5eZb3e5PJspoJjVN\",\"name\":\"Discord\",\"createdAt\":\"2025-02-22T09:31:58.972Z\",\"updatedAt\":\"2025-02-22T09:31:58.972Z\"}],\"nodes\":[{\"id\":\"39832819-a14b-445c-bf5c-0bd93613b1ca\",\"name\":\"Webhook\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[80,440],\"webhookId\":\"b0631bec-9ccc-4eb8-b143-d73609b213c7\",\"parameters\":{\"path\":\"b0631bec-9ccc-4eb8-b143-d73609b213c7\",\"options\":{},\"httpMethod\":\"POST\",\"responseMode\":\"responseNode\"},\"typeVersion\":2},{\"id\":\"5e70b649-5678-4718-98a7-302a4c784155\",\"name\":\"Simple Memory\",\"type\":\"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\"position\":[460,680],\"parameters\":{\"sessionKey\":\"={{ $json.body.userId }}\",\"sessionIdType\":\"customKey\",\"contextWindowLength\":50},\"typeVersion\":1.3},{\"id\":\"7cc849c3-3ed8-4fe2-a378-a213736a9aef\",\"name\":\"Google Gemini Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\"position\":[180,700],\"parameters\":{\"options\":{},\"modelName\":\"models/gemini-2.0-flash\"},\"credentials\":{\"googlePalmApi\":{\"id\":\"clmB8ZYJMHaHmnsu\",\"name\":\"Stardawn#1\"}},\"typeVersion\":1},{\"id\":\"4b664f21-6f1c-4894-9196-beecbd865d3e\",\"name\":\"Respond to Webhook\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"position\":[880,440],\"parameters\":{\"options\":{},\"respondWith\":\"allIncomingItems\"},\"typeVersion\":1.1},{\"id\":\"c7c779d3-e324-4a3f-a5a1-5218ec61d856\",\"name\":\"correctNaming\",\"type\":\"n8n-nodes-base.code\",\"position\":[680,440],\"parameters\":{\"jsCode\":\"// Hole alle Items\\nconst items = $input.all();\\n\\n// Nehme das erste Item (falls mehrere vorhanden sind)\\nconst item = items[0];\\n\\n// Extrahiere den output\\nconst antwort = item.json.output;\\n\\n// Formatiere die Antwort im richtigen Format für den Discord-Bot\\nreturn {\\n  json: {\\n    answer: antwort\\n  }\\n};\"},\"typeVersion\":2},{\"id\":\"9ff7ad77-88ce-467e-91b1-4fc2d13636fd\",\"name\":\"Discord AI Response Agent\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[300,440],\"parameters\":{\"text\":\"=Username: {{ $json.body.userName }}\\n\\nQuestion/Prompt: {{ $json.body.question }}\",\"options\":{\"systemMessage\":\"You are a helpful assistant. You answer in the language you receive the question in. Interactions might be all over the place. If there is any questions regarding the Youtube Videos of the channel: Presting Podcasts, you have the transcript of the podcast videos as additional knowledge.\\nAlways begin your answer with a @insertusername to mark the guy who asked the question.  \"},\"promptType\":\"define\"},\"typeVersion\":1.8}],\"active\":true,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"429e2ccd-5a58-4287-9ad8-314efbbecb8f\",\"connections\":{\"Webhook\":{\"main\":[[{\"node\":\"Discord AI Response Agent\",\"type\":\"main\",\"index\":0}]]},\"Simple Memory\":{\"ai_memory\":[[{\"node\":\"Discord AI Response Agent\",\"type\":\"ai_memory\",\"index\":0}]]},\"correctNaming\":{\"main\":[[{\"node\":\"Respond to Webhook\",\"type\":\"main\",\"index\":0}]]},\"Google Gemini Chat Model\":{\"ai_languageModel\":[[{\"node\":\"Discord AI Response Agent\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Discord AI Response Agent\":{\"main\":[[{\"node\":\"correctNaming\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "A Discord bot that responds to mentions by sending messages to n8n workflows and returning the responses. Connects Discord conversations with custom automations, APIs, and AI services through n8n.\n\nFull guide on: <https://github.com/JimPresting/AI-Discord-Bot/blob/main/README.md>\n\n# Discord Bot Summary\n\n## Overview\n\nThe Discord bot listens for mentions, forwards questions to an n8n workflow, processes responses, and replies in Discord.  \nThis workflow is intended for all Discord users who want to offer AI interactions with their respective channels.\n\n## What do you need?\n\n  * You need a Discord account as well as a Google Cloud Project\n\n\n\n## Key Features\n\n### 1\\. Listens for Mentions\n\n  * The bot monitors Discord channels for messages that mention it.\n  * **Optional Configuration** : Can be set to respond only in a specific channel.\n\n\n\n### 2\\. Forwards Questions to n8n\n\n  * When a user mentions the bot and asks a question: \n    * The bot extracts the question.\n    * Sends the question, along with channel and user information, to an n8n webhook URL.\n\n\n\n### 3\\. Processes Data in n8n\n\n  * The n8n workflow receives the question and can: \n    * Interact with AI services (e.g., generating responses).\n    * Access databases or external APIs.\n    * Perform custom logic.\n  * n8n formats the response and sends it back to the bot.\n\n\n\n### 4\\. Replies to Discord with n8n's Response\n\n  * The bot receives the response from n8n.\n  * It replies to the user's message in the Discord channel with the answer.\n  * **Long Responses** : Handles responses exceeding Discord's 2000-character limit by chunking them into multiple messages.\n\n\n\n### 5\\. Error Handling\n\n  * Includes error handling for: \n    * Issues with n8n communication.\n    * Response formatting problems.\n  * Manages cases where: \n    * No question is asked.\n    * An invalid response is received from n8n.\n\n\n\n### 6\\. Typing Indicator\n\n  * While waiting for n8n's response, the bot sends a \"typing...\" indicator to the Discord channel.\n\n\n\n### 7\\. Status Update\n\n  * For lengthy n8n processes, the bot sends a message to the Discord channel to inform the user that it is still processing their request.\n\n\n\n## Step-by-Step Setup Guide as per Github Instructions\n\n**Key Takeaways**\n\n  * You’ll configure an n8n webhook to receive Discord messages, process them with your workflow, and respond.\n  * You’ll set up a Discord application and bot, grant the right permissions/intents, and invite it to your server.\n  * You’ll prepare your server environment (Node.js), scaffold the project, and wire up environment variables.\n  * You’ll implement message‐chunking, “typing…” indicators, and robust error handling in your bot code.\n  * You’ll deploy with PM2 for persistence and know how to test and troubleshoot common issues.\n\n\n\n* * *\n\n## 1\\. n8n: Create & Expose Your Webhook\n\n  1. **New Workflow**\n\n     * Log into your n8n instance.\n     * Click **Create Workflow** (➕), name it e.g. `Discord Bot Handler`.\n  2. **Webhook Trigger**\n\n     * Add a node (➕) → search **Webhook**.\n     * Set: \n       * **Authentication** : None (or your choice)\n       * **HTTP Method** : `POST`\n       * **Path** : e.g. `/discord-bot`\n     * Click **Execute Node** to activate.\n  3. **Copy Webhook URL**\n\n     * After execution, copy the **Production Webhook URL**.\n     * You’ll paste this into your bot’s `.env`.\n  4. **Build Your Logic**\n\n     * Chain additional nodes (AI, database lookups, etc.) as required.\n  5. **Format the JSON Response**\n\n     * Insert a **Function** node before the end:\n           \n           return {\n             json: { answer: \"Your processed reply\" }\n           };\n           \n\n  6. **Respond to Webhook**\n\n     * Add **Respond to Webhook** as the final node.\n     * Point it at your Function node’s output (with the `answer` field).\n  7. **Activate**\n\n     * Toggle **Active** in the top‐right and **Save**.\n\n\n\n* * *\n\n## 2\\. Discord Developer Portal: App & Bot\n\n  1. **New Application**\n\n     * Visit the [Discord Developer Portal](https://discord.com/developers/applications).\n     * Click **New Application** , name it.\n     * Go to **Bot** → **Add Bot**.\n  2. **Enable Intents & Permissions**\n\n     * Under **Privileged Gateway Intents** , toggle **Message Content Intent**.\n     * Under **Bot Permissions** , check: \n       * Read Messages/View Channels\n       * Send Messages\n       * Read Message History\n  3. **Grab Your Token**\n\n     * In **Bot** → click **Copy** (or **Reset Token**).\n     * Store it securely.\n  4. **Invite Link (OAuth2 URL)**\n\n     * Go to **OAuth2** → **URL Generator**.\n     * Select scopes: `bot`, `applications.commands`.\n     * Under Bot Permissions, select the same permissions as above.\n     * Copy the generated URL, open it in your browser, and invite your bot.\n\n\n\n* * *\n\n## 3\\. Server Prep: Node.js & Project Setup\n\n  1. **Install Node.js v20.x**\n         \n         sudo apt purge nodejs npm\n         sudo apt autoremove\n         curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\n         sudo apt install -y nodejs\n         node -v    # Expect v20.x.x\n         npm -v     # Expect 10.x.x\n         \n\n  2. **Project Folder**\n         \n         mkdir discord-bot\n         cd discord-bot\n         \n\n  3. **Initialize & Dependencies**\n         \n         npm init -y\n         npm install discord.js axios dotenv\n         \n\n\n\n\n* * *\n\n## 4\\. Bot Code & Configuration\n\n  1. **Environment Variables**\n\n     * Create `.env`:\n           \n           nano .env\n           \n\n     * Populate:\n           \n           DISCORD_BOT_TOKEN=your_bot_token\n           N8N_WEBHOOK_URL=https://your-n8n-instance.com/webhook/discord-bot\n           # Optional: restrict to one channel\n           # TARGET_CHANNEL_ID=123456789012345678\n           \n\n  2. **Bot Script**\n\n     * Create `index.js`:\n           \n           nano index.js\n           \n\n     * Implement: \n       * Import `dotenv`, `discord.js`, `axios`.\n       * Set up client with `MessageContent` intent.\n       * On `messageCreate`: \n         1. Ignore bots or non‐mentions.\n         2. (Optional) Filter by channel ID.\n         3. Extract and validate the user’s question.\n         4. Send “typing…” every 5 s; after 20 s send a status update if still processing.\n         5. POST to your n8n webhook with `question`, `channelId`, `userId`, `userName`.\n         6. Parse various response shapes to find `answer`.\n         7. If `answer.length ≤ 2000`, `message.reply(answer)`.\n         8. Else, split into ~1900‑char chunks at sentence/paragraph breaks and send sequentially.\n         9. On errors, clear intervals, log details, and reply with an error message.\n  3. **Login**\n         \n         client.login(process.env.DISCORD_BOT_TOKEN);\n         \n\n\n\n\n* * *\n\n## 5\\. Deployment: Keep It Alive with PM2\n\n  1. **Install PM2**\n         \n         npm install -g pm2\n         \n\n  2. **Start & Monitor**\n         \n         pm2 start index.js --name discord-bot\n         pm2 status\n         pm2 logs discord-bot\n         \n\n  3. **Auto‐Start on Boot**\n         \n         pm2 startup\n         # Follow the printed command (e.g. sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u your_user --hp /home/your_user)\n         pm2 save\n         \n\n\n\n\n* * *\n\n## 6\\. Test & Troubleshoot\n\n  1. **Functional Test**\n\n     * In your Discord server:\n           \n           @YourBot What’s the weather like?\n           \n\n     * Expect a reply from your n8n workflow.\n  2. **Common Pitfalls**\n\n     * **No reply** → check `pm2 logs discord-bot`.\n     * **Intent Errors** → verify **Message Content Intent** in Portal.\n     * **Webhook failures** → ensure workflow is active and URL is correct.\n     * **Formatting issues** → confirm your Function node returns `json.answer`.\n  3. **Inspect Raw Data**\n\n     * Search your logs for **Complete response from n8n:** to debug payload shapes.\n\n\n\n* * *\n\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><p>A Discord bot that responds to mentions by sending messages to n8n workflows and returning the responses. Connects Discord conversations with custom automations, APIs, and AI services through n8n.</p>\n<p>Full guide on: <a href=\"https://github.com/JimPresting/AI-Discord-Bot/blob/main/README.md\" rel=\"ugc nofollow\" target=\"_blank\">https://github.com/JimPresting/AI-Discord-Bot/blob/main/README.md</a></p>\n<h1>Discord Bot Summary</h1>\n<h2>Overview</h2>\n<p>The Discord bot listens for mentions, forwards questions to an n8n workflow, processes responses, and replies in Discord.<br>\nThis workflow is intended for all Discord users who want to offer AI interactions with their respective channels.</p>\n<h2>What do you need?</h2>\n<ul>\n<li>You need a Discord account as well as a Google Cloud Project</li>\n</ul>\n<h2>Key Features</h2>\n<h3>1. Listens for Mentions</h3>\n<ul>\n<li>The bot monitors Discord channels for messages that mention it.</li>\n<li><strong>Optional Configuration</strong>: Can be set to respond only in a specific channel.</li>\n</ul>\n<h3>2. Forwards Questions to n8n</h3>\n<ul>\n<li>When a user mentions the bot and asks a question:\n<ul>\n<li>The bot extracts the question.</li>\n<li>Sends the question, along with channel and user information, to an n8n webhook URL.</li>\n</ul>\n</li>\n</ul>\n<h3>3. Processes Data in n8n</h3>\n<ul>\n<li>The n8n workflow receives the question and can:\n<ul>\n<li>Interact with AI services (e.g., generating responses).</li>\n<li>Access databases or external APIs.</li>\n<li>Perform custom logic.</li>\n</ul>\n</li>\n<li>n8n formats the response and sends it back to the bot.</li>\n</ul>\n<h3>4. Replies to Discord with n8n's Response</h3>\n<ul>\n<li>The bot receives the response from n8n.</li>\n<li>It replies to the user's message in the Discord channel with the answer.</li>\n<li><strong>Long Responses</strong>: Handles responses exceeding Discord's 2000-character limit by chunking them into multiple messages.</li>\n</ul>\n<h3>5. Error Handling</h3>\n<ul>\n<li>Includes error handling for:\n<ul>\n<li>Issues with n8n communication.</li>\n<li>Response formatting problems.</li>\n</ul>\n</li>\n<li>Manages cases where:\n<ul>\n<li>No question is asked.</li>\n<li>An invalid response is received from n8n.</li>\n</ul>\n</li>\n</ul>\n<h3>6. Typing Indicator</h3>\n<ul>\n<li>While waiting for n8n's response, the bot sends a \"typing...\" indicator to the Discord channel.</li>\n</ul>\n<h3>7. Status Update</h3>\n<ul>\n<li>For lengthy n8n processes, the bot sends a message to the Discord channel to inform the user that it is still processing their request.</li>\n</ul>\n<h2>Step-by-Step Setup Guide as per Github Instructions</h2>\n<p><strong>Key Takeaways</strong></p>\n<ul>\n<li>You’ll configure an n8n webhook to receive Discord messages, process them with your workflow, and respond.</li>\n<li>You’ll set up a Discord application and bot, grant the right permissions/intents, and invite it to your server.</li>\n<li>You’ll prepare your server environment (Node.js), scaffold the project, and wire up environment variables.</li>\n<li>You’ll implement message‐chunking, “typing…” indicators, and robust error handling in your bot code.</li>\n<li>You’ll deploy with PM2 for persistence and know how to test and troubleshoot common issues.</li>\n</ul>\n<hr>\n<h2>1. n8n: Create &amp; Expose Your Webhook</h2>\n<ol>\n<li>\n<p><strong>New Workflow</strong></p>\n<ul>\n<li>Log into your n8n instance.</li>\n<li>Click <strong>Create Workflow</strong> (➕), name it e.g. <code>Discord Bot Handler</code>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Webhook Trigger</strong></p>\n<ul>\n<li>Add a node (➕) → search <strong>Webhook</strong>.</li>\n<li>Set:\n<ul>\n<li><strong>Authentication</strong>: None (or your choice)</li>\n<li><strong>HTTP Method</strong>: <code>POST</code></li>\n<li><strong>Path</strong>: e.g. <code>/discord-bot</code></li>\n</ul>\n</li>\n<li>Click <strong>Execute Node</strong> to activate.</li>\n</ul>\n</li>\n<li>\n<p><strong>Copy Webhook URL</strong></p>\n<ul>\n<li>After execution, copy the <strong>Production Webhook URL</strong>.</li>\n<li>You’ll paste this into your bot’s <code>.env</code>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Build Your Logic</strong></p>\n<ul>\n<li>Chain additional nodes (AI, database lookups, etc.) as required.</li>\n</ul>\n</li>\n<li>\n<p><strong>Format the JSON Response</strong></p>\n<ul>\n<li>Insert a <strong>Function</strong> node before the end:<pre><code>return {\n  json: { answer: \"Your processed reply\" }\n};\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Respond to Webhook</strong></p>\n<ul>\n<li>Add <strong>Respond to Webhook</strong> as the final node.</li>\n<li>Point it at your Function node’s output (with the <code>answer</code> field).</li>\n</ul>\n</li>\n<li>\n<p><strong>Activate</strong></p>\n<ul>\n<li>Toggle <strong>Active</strong> in the top‐right and <strong>Save</strong>.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>2. Discord Developer Portal: App &amp; Bot</h2>\n<ol>\n<li>\n<p><strong>New Application</strong></p>\n<ul>\n<li>Visit the <a href=\"https://discord.com/developers/applications\" rel=\"ugc nofollow\" target=\"_blank\">Discord Developer Portal</a>.</li>\n<li>Click <strong>New Application</strong>, name it.</li>\n<li>Go to <strong>Bot</strong> → <strong>Add Bot</strong>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Enable Intents &amp; Permissions</strong></p>\n<ul>\n<li>Under <strong>Privileged Gateway Intents</strong>, toggle <strong>Message Content Intent</strong>.</li>\n<li>Under <strong>Bot Permissions</strong>, check:\n<ul>\n<li>Read Messages/View Channels</li>\n<li>Send Messages</li>\n<li>Read Message History</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Grab Your Token</strong></p>\n<ul>\n<li>In <strong>Bot</strong> → click <strong>Copy</strong> (or <strong>Reset Token</strong>).</li>\n<li>Store it securely.</li>\n</ul>\n</li>\n<li>\n<p><strong>Invite Link (OAuth2 URL)</strong></p>\n<ul>\n<li>Go to <strong>OAuth2</strong> → <strong>URL Generator</strong>.</li>\n<li>Select scopes: <code>bot</code>, <code>applications.commands</code>.</li>\n<li>Under Bot Permissions, select the same permissions as above.</li>\n<li>Copy the generated URL, open it in your browser, and invite your bot.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>3. Server Prep: Node.js &amp; Project Setup</h2>\n<ol>\n<li>\n<p><strong>Install Node.js v20.x</strong></p>\n<pre><code>sudo apt purge nodejs npm\nsudo apt autoremove\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt install -y nodejs\nnode -v    # Expect v20.x.x\nnpm -v     # Expect 10.x.x\n</code></pre>\n</li>\n<li>\n<p><strong>Project Folder</strong></p>\n<pre><code>mkdir discord-bot\ncd discord-bot\n</code></pre>\n</li>\n<li>\n<p><strong>Initialize &amp; Dependencies</strong></p>\n<pre><code>npm init -y\nnpm install discord.js axios dotenv\n</code></pre>\n</li>\n</ol>\n<hr>\n<h2>4. Bot Code &amp; Configuration</h2>\n<ol>\n<li>\n<p><strong>Environment Variables</strong></p>\n<ul>\n<li>Create <code>.env</code>:<pre><code>nano .env\n</code></pre>\n</li>\n<li>Populate:<pre><code>DISCORD_BOT_TOKEN=your_bot_token\nN8N_WEBHOOK_URL=https://your-n8n-instance.com/webhook/discord-bot\n# Optional: restrict to one channel\n# TARGET_CHANNEL_ID=123456789012345678\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Bot Script</strong></p>\n<ul>\n<li>Create <code>index.js</code>:<pre><code>nano index.js\n</code></pre>\n</li>\n<li>Implement:\n<ul>\n<li>Import <code>dotenv</code>, <code>discord.js</code>, <code>axios</code>.</li>\n<li>Set up client with <code>MessageContent</code> intent.</li>\n<li>On <code>messageCreate</code>:\n<ol>\n<li>Ignore bots or non‐mentions.</li>\n<li>(Optional) Filter by channel ID.</li>\n<li>Extract and validate the user’s question.</li>\n<li>Send “typing…” every 5&nbsp;s; after 20&nbsp;s send a status update if still processing.</li>\n<li>POST to your n8n webhook with <code>question</code>, <code>channelId</code>, <code>userId</code>, <code>userName</code>.</li>\n<li>Parse various response shapes to find <code>answer</code>.</li>\n<li>If <code>answer.length&nbsp;≤&nbsp;2000</code>, <code>message.reply(answer)</code>.</li>\n<li>Else, split into ~1900‑char chunks at sentence/paragraph breaks and send sequentially.</li>\n<li>On errors, clear intervals, log details, and reply with an error message.</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Login</strong></p>\n<pre><code>client.login(process.env.DISCORD_BOT_TOKEN);\n</code></pre>\n</li>\n</ol>\n<hr>\n<h2>5. Deployment: Keep It Alive with PM2</h2>\n<ol>\n<li>\n<p><strong>Install PM2</strong></p>\n<pre><code>npm install -g pm2\n</code></pre>\n</li>\n<li>\n<p><strong>Start &amp; Monitor</strong></p>\n<pre><code>pm2 start index.js --name discord-bot\npm2 status\npm2 logs discord-bot\n</code></pre>\n</li>\n<li>\n<p><strong>Auto‐Start on Boot</strong></p>\n<pre><code>pm2 startup\n# Follow the printed command (e.g. sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u your_user --hp /home/your_user)\npm2 save\n</code></pre>\n</li>\n</ol>\n<hr>\n<h2>6. Test &amp; Troubleshoot</h2>\n<ol>\n<li>\n<p><strong>Functional Test</strong></p>\n<ul>\n<li>In your Discord server:<pre><code>@YourBot What’s the weather like?\n</code></pre>\n</li>\n<li>Expect a reply from your n8n workflow.</li>\n</ul>\n</li>\n<li>\n<p><strong>Common Pitfalls</strong></p>\n<ul>\n<li><strong>No reply</strong> → check <code>pm2 logs discord-bot</code>.</li>\n<li><strong>Intent Errors</strong> → verify <strong>Message Content Intent</strong> in Portal.</li>\n<li><strong>Webhook failures</strong> → ensure workflow is active and URL is correct.</li>\n<li><strong>Formatting issues</strong> → confirm your Function node returns <code>json.answer</code>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Inspect Raw Data</strong></p>\n<ul>\n<li>Search your logs for <strong>Complete response from n8n:</strong> to debug payload shapes.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<pre><code></code></pre>\n</div><!--]-->"
}