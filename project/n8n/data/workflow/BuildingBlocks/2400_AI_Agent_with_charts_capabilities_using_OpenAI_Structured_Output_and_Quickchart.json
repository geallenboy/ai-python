{
  "title": "AI Agent with charts capabilities using OpenAI Structured Output and Quickchart",
  "url": "https://n8n.io/workflows/2400-ai-agent-with-charts-capabilities-using-openai-structured-output-and-quickchart/",
  "category": "BuildingBlocks",
  "category_url": "https://n8n.io/workflows/categories/building-blocks/?sort=createdAt:desc",
  "author": "Agent Studio",
  "publish_date": "Last update 7 months ago",
  "publish_date_absolute": "2024-10-07",
  "content": "",
  "workflow_json": "{\"id\":\"6yNJxDjV9rSiOkj9\",\"meta\":{\"instanceId\":\"f4f5d195bb2162a0972f737368404b18be694648d365d6c6771d7b4909d28167\",\"templateCredsSetupCompleted\":true},\"name\":\"AI Agent with charts capabilities using OpenAI Structured Output\",\"tags\":[{\"id\":\"9tRfTc35T5pruw03\",\"name\":\"experiment\",\"createdAt\":\"2024-03-18T15:32:10.504Z\",\"updatedAt\":\"2024-03-18T15:32:10.504Z\"}],\"nodes\":[{\"id\":\"4b7c314a-d7c5-46cb-af6f-b3ff02a182b7\",\"name\":\"OpenAI Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[980,600],\"parameters\":{\"model\":\"gpt-4o-mini-2024-07-18\",\"options\":{}},\"credentials\":{\"openAiApi\":{\"id\":\"WqzqjezKh8VtxdqA\",\"name\":\"OpenAi account - Baptiste\"}},\"typeVersion\":1},{\"id\":\"cf4ffa49-8830-4db2-9a7d-b8931e806947\",\"name\":\"Window Buffer Memory\",\"type\":\"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\"position\":[1120,600],\"parameters\":{},\"typeVersion\":1.2},{\"id\":\"22d36226-ca37-4ccc-a2d6-826b78c2f1f3\",\"name\":\"Generate a chart\",\"type\":\"@n8n/n8n-nodes-langchain.toolWorkflow\",\"position\":[1260,600],\"parameters\":{\"name\":\"generate_a_chart\",\"schemaType\":\"manual\",\"workflowId\":\"={{ $workflow.id }}\",\"description\":\"Call this tool whenever you need to generate a chart.\",\"inputSchema\":\"{\\n\\\"type\\\": \\\"object\\\",\\n\\\"properties\\\": {\\n\\t\\\"query\\\": {\\n\\t\\t\\\"type\\\": \\\"string\\\",\\n\\t\\t\\\"description\\\": \\\"a query describing the chart to generate\\\"\\n\\t\\t}\\n\\t}\\n}\",\"specifyInputSchema\":true},\"typeVersion\":1.1},{\"id\":\"d9ea85d7-3a56-4a95-88c8-60e5c95014e7\",\"name\":\"Execute \\\"Generate a chart\\\" tool\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[580,1100],\"parameters\":{},\"typeVersion\":1},{\"id\":\"68d538f7-acce-447f-9ab1-6975639e05f7\",\"name\":\"OpenAI - Generate Chart definition with Structured Output\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[880,1100],\"parameters\":{\"url\":\"https://api.openai.com/v1/chat/completions\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={\\n    \\\"model\\\": \\\"gpt-4o-2024-08-06\\\",\\n    \\\"messages\\\": [\\n        {\\n            \\\"role\\\": \\\"system\\\",\\n            \\\"content\\\": \\\"Based on the user request, generate a valid Chart.js definition. Important: - Be careful with the data scale and beginatzero that all data are visible. Example if ploted data 2 and 3 on a bar chart, the baseline should be 0. - Charts colors should be different only if there are multiple datasets. - Output valid JSON. In scales, min and max are numbers. Example: `{scales:{yAxes:[{ticks:{min:0,max:3}`\\\"\\n        },\\n        {\\n            \\\"role\\\": \\\"user\\\",\\n            \\\"content\\\": \\\"{{ $json.query.query }}\\\"\\n        }\\n    ],\\n    \\\"response_format\\\": {\\n  \\\"type\\\": \\\"json_schema\\\",\\n  \\\"json_schema\\\": {\\n    \\\"name\\\": \\\"chart_configuration\\\",\\n    \\\"description\\\": \\\"Configuration schema for Chart.js charts\\\",\\n    \\\"strict\\\": true,\\n    \\\"schema\\\": {\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"type\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"enum\\\": [\\\"bar\\\", \\\"line\\\", \\\"radar\\\", \\\"pie\\\", \\\"doughnut\\\", \\\"polarArea\\\", \\\"bubble\\\", \\\"scatter\\\", \\\"area\\\"]\\n    },\\n    \\\"data\\\": {\\n      \\\"type\\\": \\\"object\\\",\\n      \\\"properties\\\": {\\n        \\\"labels\\\": {\\n          \\\"type\\\": \\\"array\\\",\\n          \\\"items\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        },\\n        \\\"datasets\\\": {\\n          \\\"type\\\": \\\"array\\\",\\n          \\\"items\\\": {\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"properties\\\": {\\n              \\\"label\\\": {\\n                \\\"type\\\": [\\\"string\\\", \\\"null\\\"]\\n              },\\n              \\\"data\\\": {\\n                \\\"type\\\": \\\"array\\\",\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"number\\\"\\n                }\\n              },\\n              \\\"backgroundColor\\\": {\\n                \\\"type\\\": [\\\"array\\\", \\\"null\\\"],\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"string\\\"\\n                }\\n              },\\n              \\\"borderColor\\\": {\\n                \\\"type\\\": [\\\"array\\\", \\\"null\\\"],\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"string\\\"\\n                }\\n              },\\n              \\\"borderWidth\\\": {\\n                \\\"type\\\": [\\\"number\\\", \\\"null\\\"]\\n              }\\n            },\\n            \\\"required\\\": [\\\"data\\\", \\\"label\\\", \\\"backgroundColor\\\", \\\"borderColor\\\", \\\"borderWidth\\\"],\\n            \\\"additionalProperties\\\": false\\n          }\\n        }\\n      },\\n      \\\"required\\\": [\\\"labels\\\", \\\"datasets\\\"],\\n      \\\"additionalProperties\\\": false\\n    },\\n    \\\"options\\\": {\\n      \\\"type\\\": \\\"object\\\",\\n      \\\"properties\\\": {\\n        \\\"scales\\\": {\\n          \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n          \\\"properties\\\": {\\n            \\\"yAxes\\\": {\\n              \\\"type\\\": \\\"array\\\",\\n              \\\"items\\\": {\\n                \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n                \\\"properties\\\": {\\n                  \\\"ticks\\\": {\\n                    \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n                    \\\"properties\\\": {\\n                      \\\"max\\\": {\\n                        \\\"type\\\": [\\\"number\\\", \\\"null\\\"]\\n                      },\\n                      \\\"min\\\": {\\n                        \\\"type\\\": [\\\"number\\\", \\\"null\\\"]\\n                      },\\n                      \\\"stepSize\\\": {\\n                        \\\"type\\\": [\\\"number\\\", \\\"null\\\"]\\n                      },\\n                      \\\"beginAtZero\\\": {\\n                        \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                      }\\n                    },\\n                    \\\"required\\\": [\\\"max\\\", \\\"min\\\", \\\"stepSize\\\", \\\"beginAtZero\\\"],\\n                    \\\"additionalProperties\\\": false\\n                  },\\n                  \\\"stacked\\\": {\\n                    \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                  }\\n                },\\n                \\\"required\\\": [\\\"ticks\\\", \\\"stacked\\\"],\\n                \\\"additionalProperties\\\": false\\n              }},\\n              \\\"xAxes\\\": {\\n                \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n                \\\"properties\\\": {\\n                  \\\"stacked\\\": {\\n                    \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                  }\\n                },\\n                \\\"required\\\": [\\\"stacked\\\"],\\n                \\\"additionalProperties\\\": false\\n              }\\n          },\\n          \\\"required\\\": [\\\"yAxes\\\", \\\"xAxes\\\"],\\n          \\\"additionalProperties\\\": false\\n        },\\n        \\\"plugins\\\": {\\n          \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n          \\\"properties\\\": {\\n            \\\"title\\\": {\\n              \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n              \\\"properties\\\": {\\n                \\\"display\\\": {\\n                  \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                },\\n                \\\"text\\\": {\\n                  \\\"type\\\": [\\\"string\\\", \\\"null\\\"]\\n                }\\n              },\\n              \\\"required\\\": [\\\"display\\\", \\\"text\\\"],\\n              \\\"additionalProperties\\\": false\\n            },\\n            \\\"legend\\\": {\\n              \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n              \\\"properties\\\": {\\n                \\\"display\\\": {\\n                  \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                },\\n                \\\"position\\\": {\\n                  \\\"type\\\": [\\\"string\\\", \\\"null\\\"],\\n                  \\\"enum\\\": [\\\"top\\\", \\\"left\\\", \\\"bottom\\\", \\\"right\\\", null]\\n                }\\n              },\\n              \\\"required\\\": [\\\"display\\\", \\\"position\\\"],\\n              \\\"additionalProperties\\\": false\\n            }\\n          },\\n          \\\"required\\\": [\\\"title\\\", \\\"legend\\\"],\\n          \\\"additionalProperties\\\": false\\n        }\\n      },\\n      \\\"required\\\": [\\\"scales\\\", \\\"plugins\\\"],\\n      \\\"additionalProperties\\\": false\\n    }\\n  },\\n  \\\"required\\\": [\\\"type\\\", \\\"data\\\", \\\"options\\\"],\\n  \\\"additionalProperties\\\": false\\n}\\n}\\n}\\n}\",\"sendBody\":true,\"sendHeaders\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"headerParameters\":{\"parameters\":[{\"name\":\"=Content-Type\",\"value\":\"application/json\"}]},\"nodeCredentialType\":\"openAiApi\"},\"credentials\":{\"openAiApi\":{\"id\":\"WqzqjezKh8VtxdqA\",\"name\":\"OpenAi account - Baptiste\"}},\"typeVersion\":4.2},{\"id\":\"0fd4ad08-ad85-4d0b-b75f-0e59f789cbfd\",\"name\":\"Set response\",\"type\":\"n8n-nodes-base.set\",\"position\":[1120,1100],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"37512e1a-8376-4ba0-bdcd-34bb9329ae4b\",\"name\":\"response\",\"type\":\"string\",\"value\":\"={{ encodeURIComponent(\\\"https://quickchart.io/chart?width=200&c=\\\"+$json.choices[0].message.content) }}\\n\\n\"}]}},\"typeVersion\":3.4},{\"id\":\"6785cadb-4875-47ac-9b57-29b583c53937\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[20,260],\"parameters\":{\"color\":7,\"width\":680.7609104727082,\"height\":619.3187860363884,\"content\":\"## Workflow: AI Agent with charts capabilities using OpenAI Structured Output\\n\\n**Overview**\\n- This workflow is a experiment to integrate charts into an AI Agent\\n- The AI Agent has normal AI conversation and can invoke a tool to integrate a graph in the conversation.\\n- It uses OpenAI Structured Output to generate a chart definition according to Quickchart specifications.\\n\\n\\n**How it works**\\n- Activate the workflow\\n- Start chatting with the AI Agent.\\n- When the AI Agent detects that the user needs a chat, it calls the tool\\n- The tool calls the sub-workflow with a query.\\n- The sub-workflow calls the HTTP Request node (calling OpenAI) to retrieve a chart definition\\n- In the \\\"set response\\\" node, he chat definition is added at the end of a quickchart.io url - the URL to the chart image. It is sent back to the AI Agent.\\n- The AI Agent uses this image in its response.\\n- For example, you can ask the AI Agent to generate a chart about the top 5 movies at the box office\\n\\n\\n**Notes**\\n- The full Quickchart.io specifications have not been integrated, thus there are some possible glitches (e.g due to the size of the graph, radar graphs are not displayed properly)\\n- This could be provided to any automation, not only AI Agents.\"},\"typeVersion\":1},{\"id\":\"fd507ff6-2d16-4498-ba2b-d91b02079311\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[740,800],\"parameters\":{\"color\":7,\"width\":768.8586342909368,\"height\":503,\"content\":\"## Generate a Quickchart definition\\n\\n**HTTP Request node**\\n- Send the chart query to OpenAI, with a defined JSON response format - *using HTTP Request node as it has not yet been implemented in the OpenAI nodes*\\n- The JSON structure is based on ChartJS and Quickchart.io definitions, that let us create nice looking graphs.\\n- The output is a JSON containing the chart definition that is passed to the next node.\\n\\n**Set Response node**\\n- Adds the chart definition at the end of a Quickchart.io URL ([see documentation](https://quickchart.io/documentation/usage/parameters/))\\n- Note that in the parameters, we specify the width to 250 in order to be properly displayed in the chart interface.\"},\"typeVersion\":1},{\"id\":\"7f14532a-75ee-40f8-a45b-0f037af7cb05\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[740,260],\"parameters\":{\"color\":7,\"width\":768,\"height\":485.8165429718969,\"content\":\"### Chat Agent\\n- This is agent is mostly here to demonstrate how to use the sub workflow.\\n- This is a basic agent with a tool \\\"generate a chart\\\"\\n- The tool calls the sub-workflow\\n- The sub-workflow responds with the Quickchart URL that is displayed in the conversation\"},\"typeVersion\":1},{\"id\":\"7793a567-c4d4-4745-83c9-adf5397755e9\",\"name\":\"AI Agent\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[1020,400],\"parameters\":{\"options\":{\"systemMessage\":\"You're a general purpose ai. Using markdown, you can display images in the conversation. Don't change the width of the chart\"}},\"typeVersion\":1.6},{\"id\":\"71bd2cb5-7b20-4d83-adba-c1fd57511155\",\"name\":\"When chat message received\",\"type\":\"@n8n/n8n-nodes-langchain.chatTrigger\",\"position\":[840,400],\"webhookId\":\"1281cd48-08a0-431d-9bf5-9bb60e6b7a77\",\"parameters\":{\"options\":{}},\"typeVersion\":1.1}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"3af7cf64-60dc-4ba6-9ac6-f7ed2453812c\",\"connections\":{\"Generate a chart\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"OpenAI Chat Model\":{\"ai_languageModel\":[[{\"node\":\"AI Agent\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Window Buffer Memory\":{\"ai_memory\":[[{\"node\":\"AI Agent\",\"type\":\"ai_memory\",\"index\":0}]]},\"When chat message received\":{\"main\":[[{\"node\":\"AI Agent\",\"type\":\"main\",\"index\":0}]]},\"Execute \\\"Generate a chart\\\" tool\":{\"main\":[[{\"node\":\"OpenAI - Generate Chart definition with Structured Output\",\"type\":\"main\",\"index\":0}]]},\"OpenAI - Generate Chart definition with Structured Output\":{\"main\":[[{\"node\":\"Set response\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This workflow is an experiment to integrate charts in AI Agents, using the new [Structured Output from OpenAI](https://openai.com/index/introducing-structured-outputs-in-the-api/) and [Quickchart.io](https://quickchart.io/).\n\n## How it works\n\n  * Users chat with an AI Agent.\n  * Anytime the AI Agent considers a chart is needed, it calls a tool to generate a chart\n  * OpenAI generates a chart using the Quickchart definition\n  * This object is added at the end of a [Quickchart.io](http://Quickchart.io) URL ([see documentation](https://quickchart.io/documentation/usage/parameters/))\n  * The url is added in the conversation via the AI Agent as markdown.\n\n\n\n## Set up steps\n\n  * Create an [OpenAI API Key](https://platform.openai.com/api-keys)\n  * Create the OpenAI credentials\n  * Use the credentials for the HTTP Request node (as Predefined Credential type)\n  * Activate your workflow\n  * Start chatting\n  * For example, you can ask the AI Agent to generate a chart about the top 5 movies at the box office\n  * Start exploring the limits\n\n\n\n**Shout-out**  \n[Quickchart.io](https://quickchart.io) is an amazing open source project that provides a free API to test. Go check them out!\n\n**Example of chart**  \n![Screenshot 20240904 at 14.08.29.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2024_09_04_at_14_08_29_b011c698bf.png)\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><p>This workflow is an experiment to integrate charts in AI Agents, using the new <a href=\"https://openai.com/index/introducing-structured-outputs-in-the-api/\" rel=\"ugc nofollow\" target=\"_blank\">Structured Output from OpenAI</a> and <a href=\"https://quickchart.io/\" rel=\"ugc nofollow\" target=\"_blank\">Quickchart.io</a>.</p>\n<h2>How it works</h2>\n<ul>\n<li>Users chat with an AI Agent.</li>\n<li>Anytime the AI Agent considers a chart is needed, it calls a tool to generate a chart</li>\n<li>OpenAI generates a chart using the Quickchart definition</li>\n<li>This object is added at the end of a <a href=\"http://Quickchart.io\" rel=\"ugc nofollow\" target=\"_blank\">Quickchart.io</a> URL (<a href=\"https://quickchart.io/documentation/usage/parameters/\" rel=\"ugc nofollow\" target=\"_blank\">see documentation</a>)</li>\n<li>The url is added in the conversation via the AI Agent as markdown.</li>\n</ul>\n<h2>Set up steps</h2>\n<ul>\n<li>Create an <a href=\"https://platform.openai.com/api-keys\" rel=\"ugc nofollow\" target=\"_blank\">OpenAI API Key</a></li>\n<li>Create the OpenAI credentials</li>\n<li>Use the credentials for the HTTP Request node (as Predefined Credential type)</li>\n<li>Activate your workflow</li>\n<li>Start chatting</li>\n<li>For example, you can ask the AI Agent to generate a chart about the top 5 movies at the box office</li>\n<li>Start exploring the limits</li>\n</ul>\n<p><strong>Shout-out</strong><br>\n<a href=\"https://quickchart.io\" rel=\"ugc nofollow\" target=\"_blank\">Quickchart.io</a> is an amazing open source project that provides a free API to test. Go check them out!</p>\n<p><strong>Example of chart</strong><br>\n<img src=\"https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2024_09_04_at_14_08_29_b011c698bf.png\" alt=\"Screenshot 20240904 at 14.08.29.png\"></p>\n</div><!--]-->",
  "readme_zh": "该工作流程是一项实验，旨在将图表功能集成至AI智能体中，结合运用[OpenAI结构化输出](https://openai.com/index/introducing-structured-outputs-in-the-api/)与[Quickchart.io](https://quickchart.io/)技术。\n\n## 运作原理\n\n  * 用户与AI智能体对话\n  * 当AI智能体判定需要展示图表时，将调用图表生成工具\n  * OpenAI通过Quickchart定义生成图表数据\n  * 该数据结构将附加至[Quickchart.io](http://Quickchart.io)网址末端（[参见文档](https://quickchart.io/documentation/usage/parameters/)）\n  * AI智能体以Markdown格式将图表链接插入对话流\n\n## 配置步骤\n\n  * 创建[OpenAI API密钥](https://platform.openai.com/api-keys)\n  * 配置OpenAI凭证\n  * 在HTTP请求节点中使用凭证（选择预定义凭证类型）\n  * 激活工作流程\n  * 开始对话\n  * 例如：可要求AI智能体生成票房前五电影的图表\n  * 探索功能边界\n\n**特别致谢**  \n[Quickchart.io](https://quickchart.io)作为卓越的开源项目，提供免费API测试服务，强烈推荐体验！\n\n**图表示例**  \n![2024年9月4日14.08.29截图.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/Screenshot_2024_09_04_at_14_08_29_b011c698bf.png)",
  "title_zh": "具备图表功能的AI代理，采用OpenAI结构化输出与Quickchart技术",
  "publish_date_zh": "最后更新于7个月前",
  "workflow_json_zh": "{\n  \"id\": \"6yNJxDjV9rSiOkj9\",\n  \"meta\": {\n    \"instanceId\": \"f4f5d195bb2162a0972f737368404b18be694648d365d6c6771d7b4909d28167\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"AI Agent with charts capabilities using OpenAI Structured Output\",\n  \"tags\": [\n    {\n      \"id\": \"9tRfTc35T5pruw03\",\n      \"name\": \"experiment\",\n      \"createdAt\": \"2024-03-18T15:32:10.504Z\",\n      \"updatedAt\": \"2024-03-18T15:32:10.504Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"4b7c314a-d7c5-46cb-af6f-b3ff02a182b7\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        980,\n        600\n      ],\n      \"parameters\": {\n        \"model\": \"gpt-4o-mini-2024-07-18\",\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"WqzqjezKh8VtxdqA\",\n          \"name\": \"OpenAi account - Baptiste\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cf4ffa49-8830-4db2-9a7d-b8931e806947\",\n      \"name\": \"Window Buffer Memory\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\n      \"position\": [\n        1120,\n        600\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"22d36226-ca37-4ccc-a2d6-826b78c2f1f3\",\n      \"name\": \"Generate a chart\",\n      \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\",\n      \"position\": [\n        1260,\n        600\n      ],\n      \"parameters\": {\n        \"name\": \"generate_a_chart\",\n        \"schemaType\": \"manual\",\n        \"workflowId\": \"={{ $workflow.id }}\",\n        \"description\": \"Call this tool whenever you need to generate a chart.\",\n        \"inputSchema\": \"{\\n\\\"type\\\": \\\"object\\\",\\n\\\"properties\\\": {\\n\\t\\\"query\\\": {\\n\\t\\t\\\"type\\\": \\\"string\\\",\\n\\t\\t\\\"description\\\": \\\"a query describing the chart to generate\\\"\\n\\t\\t}\\n\\t}\\n}\",\n        \"specifyInputSchema\": true\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"d9ea85d7-3a56-4a95-88c8-60e5c95014e7\",\n      \"name\": \"Execute \\\"Generate a chart\\\" tool\",\n      \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n      \"position\": [\n        580,\n        1100\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"68d538f7-acce-447f-9ab1-6975639e05f7\",\n      \"name\": \"OpenAI - Generate Chart definition with Structured Output\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        880,\n        1100\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.openai.com/v1/chat/completions\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n    \\\"model\\\": \\\"gpt-4o-2024-08-06\\\",\\n    \\\"messages\\\": [\\n        {\\n            \\\"role\\\": \\\"system\\\",\\n            \\\"content\\\": \\\"Based on the user request, generate a valid Chart.js definition. Important: - Be careful with the data scale and beginatzero that all data are visible. Example if ploted data 2 and 3 on a bar chart, the baseline should be 0. - Charts colors should be different only if there are multiple datasets. - Output valid JSON. In scales, min and max are numbers. Example: `{scales:{yAxes:[{ticks:{min:0,max:3}`\\\"\\n        },\\n        {\\n            \\\"role\\\": \\\"user\\\",\\n            \\\"content\\\": \\\"{{ $json.query.query }}\\\"\\n        }\\n    ],\\n    \\\"response_format\\\": {\\n  \\\"type\\\": \\\"json_schema\\\",\\n  \\\"json_schema\\\": {\\n    \\\"name\\\": \\\"chart_configuration\\\",\\n    \\\"description\\\": \\\"Configuration schema for Chart.js charts\\\",\\n    \\\"strict\\\": true,\\n    \\\"schema\\\": {\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"type\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"enum\\\": [\\\"bar\\\", \\\"line\\\", \\\"radar\\\", \\\"pie\\\", \\\"doughnut\\\", \\\"polarArea\\\", \\\"bubble\\\", \\\"scatter\\\", \\\"area\\\"]\\n    },\\n    \\\"data\\\": {\\n      \\\"type\\\": \\\"object\\\",\\n      \\\"properties\\\": {\\n        \\\"labels\\\": {\\n          \\\"type\\\": \\\"array\\\",\\n          \\\"items\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        },\\n        \\\"datasets\\\": {\\n          \\\"type\\\": \\\"array\\\",\\n          \\\"items\\\": {\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"properties\\\": {\\n              \\\"label\\\": {\\n                \\\"type\\\": [\\\"string\\\", \\\"null\\\"]\\n              },\\n              \\\"data\\\": {\\n                \\\"type\\\": \\\"array\\\",\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"number\\\"\\n                }\\n              },\\n              \\\"backgroundColor\\\": {\\n                \\\"type\\\": [\\\"array\\\", \\\"null\\\"],\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"string\\\"\\n                }\\n              },\\n              \\\"borderColor\\\": {\\n                \\\"type\\\": [\\\"array\\\", \\\"null\\\"],\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"string\\\"\\n                }\\n              },\\n              \\\"borderWidth\\\": {\\n                \\\"type\\\": [\\\"number\\\", \\\"null\\\"]\\n              }\\n            },\\n            \\\"required\\\": [\\\"data\\\", \\\"label\\\", \\\"backgroundColor\\\", \\\"borderColor\\\", \\\"borderWidth\\\"],\\n            \\\"additionalProperties\\\": false\\n          }\\n        }\\n      },\\n      \\\"required\\\": [\\\"labels\\\", \\\"datasets\\\"],\\n      \\\"additionalProperties\\\": false\\n    },\\n    \\\"options\\\": {\\n      \\\"type\\\": \\\"object\\\",\\n      \\\"properties\\\": {\\n        \\\"scales\\\": {\\n          \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n          \\\"properties\\\": {\\n            \\\"yAxes\\\": {\\n              \\\"type\\\": \\\"array\\\",\\n              \\\"items\\\": {\\n                \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n                \\\"properties\\\": {\\n                  \\\"ticks\\\": {\\n                    \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n                    \\\"properties\\\": {\\n                      \\\"max\\\": {\\n                        \\\"type\\\": [\\\"number\\\", \\\"null\\\"]\\n                      },\\n                      \\\"min\\\": {\\n                        \\\"type\\\": [\\\"number\\\", \\\"null\\\"]\\n                      },\\n                      \\\"stepSize\\\": {\\n                        \\\"type\\\": [\\\"number\\\", \\\"null\\\"]\\n                      },\\n                      \\\"beginAtZero\\\": {\\n                        \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                      }\\n                    },\\n                    \\\"required\\\": [\\\"max\\\", \\\"min\\\", \\\"stepSize\\\", \\\"beginAtZero\\\"],\\n                    \\\"additionalProperties\\\": false\\n                  },\\n                  \\\"stacked\\\": {\\n                    \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                  }\\n                },\\n                \\\"required\\\": [\\\"ticks\\\", \\\"stacked\\\"],\\n                \\\"additionalProperties\\\": false\\n              }},\\n              \\\"xAxes\\\": {\\n                \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n                \\\"properties\\\": {\\n                  \\\"stacked\\\": {\\n                    \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                  }\\n                },\\n                \\\"required\\\": [\\\"stacked\\\"],\\n                \\\"additionalProperties\\\": false\\n              }\\n          },\\n          \\\"required\\\": [\\\"yAxes\\\", \\\"xAxes\\\"],\\n          \\\"additionalProperties\\\": false\\n        },\\n        \\\"plugins\\\": {\\n          \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n          \\\"properties\\\": {\\n            \\\"title\\\": {\\n              \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n              \\\"properties\\\": {\\n                \\\"display\\\": {\\n                  \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                },\\n                \\\"text\\\": {\\n                  \\\"type\\\": [\\\"string\\\", \\\"null\\\"]\\n                }\\n              },\\n              \\\"required\\\": [\\\"display\\\", \\\"text\\\"],\\n              \\\"additionalProperties\\\": false\\n            },\\n            \\\"legend\\\": {\\n              \\\"type\\\": [\\\"object\\\", \\\"null\\\"],\\n              \\\"properties\\\": {\\n                \\\"display\\\": {\\n                  \\\"type\\\": [\\\"boolean\\\", \\\"null\\\"]\\n                },\\n                \\\"position\\\": {\\n                  \\\"type\\\": [\\\"string\\\", \\\"null\\\"],\\n                  \\\"enum\\\": [\\\"top\\\", \\\"left\\\", \\\"bottom\\\", \\\"right\\\", null]\\n                }\\n              },\\n              \\\"required\\\": [\\\"display\\\", \\\"position\\\"],\\n              \\\"additionalProperties\\\": false\\n            }\\n          },\\n          \\\"required\\\": [\\\"title\\\", \\\"legend\\\"],\\n          \\\"additionalProperties\\\": false\\n        }\\n      },\\n      \\\"required\\\": [\\\"scales\\\", \\\"plugins\\\"],\\n      \\\"additionalProperties\\\": false\\n    }\\n  },\\n  \\\"required\\\": [\\\"type\\\", \\\"data\\\", \\\"options\\\"],\\n  \\\"additionalProperties\\\": false\\n}\\n}\\n}\\n}\",\n        \"sendBody\": true,\n        \"sendHeaders\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"=Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        },\n        \"nodeCredentialType\": \"openAiApi\"\n      },\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"WqzqjezKh8VtxdqA\",\n          \"name\": \"OpenAi account - Baptiste\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"0fd4ad08-ad85-4d0b-b75f-0e59f789cbfd\",\n      \"name\": \"Set response\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1120,\n        1100\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"37512e1a-8376-4ba0-bdcd-34bb9329ae4b\",\n              \"name\": \"response\",\n              \"type\": \"string\",\n              \"value\": \"={{ encodeURIComponent(\\\"https://quickchart.io/chart?width=200&c=\\\"+$json.choices[0].message.content) }}\\n\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"6785cadb-4875-47ac-9b57-29b583c53937\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        20,\n        260\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 680.7609104727082,\n        \"height\": 619.3187860363884,\n        \"content\": \"## 工作流程：具备图表生成能力的AI智能体（基于OpenAI结构化输出）\\n\\n**概述**\\n- 本流程是集成图表功能的AI智能体实验方案\\n- 该智能体支持常规对话，并能调用工具在对话中嵌入图表\\n- 通过OpenAI结构化输出功能，按照Quickchart规范生成图表定义\\n\\n**运作机制**\\n1. 激活工作流程\\n2. 开始与AI智能体对话\\n3. 当检测到用户需要图表时，智能体调用工具\\n4. 工具通过子流程提交查询请求\\n5. 子流程通过HTTP请求节点（调用OpenAI接口）获取图表定义\\n6. 在\\\"设置响应\\\"节点，将图表定义拼接至quickchart.io网址末端，生成图表图像链接并返回智能体\\n7. 智能体在回复中嵌入该图表图像\\n8. 示例：可要求智能体生成票房前5名电影的图表\\n\\n**注意事项**\\n- 未完全集成Quickchart.io所有规范，可能存在显示异常（如图表尺寸问题导致雷达图显示异常）\\n- 该方案可应用于任何自动化场景，不仅限于AI智能体\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"fd507ff6-2d16-4498-ba2b-d91b02079311\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        740,\n        800\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 768.8586342909368,\n        \"height\": 503,\n        \"content\": \"## 生成Quickchart图表定义\\n\\n**HTTP请求节点**\\n- 将图表查询发送至OpenAI，使用预定义的JSON响应格式（*由于OpenAI节点尚未实现此功能，故采用HTTP请求节点*）\\n- JSON结构基于ChartJS和Quickchart.io的图表定义规范，可生成美观的图表\\n- 输出结果为包含图表定义的JSON数据，将传递至下一节点\\n\\n**设置响应节点**\\n- 将图表定义附加到Quickchart.io网址末端（[参阅文档](https://quickchart.io/documentation/usage/parameters/)）\\n- 注意：在参数中需将宽度指定为250像素，以确保在图表界面正常显示\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7f14532a-75ee-40f8-a45b-0f037af7cb05\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        740,\n        260\n      ],\n      \"parameters\": {\n        \"color\": 7,\n        \"width\": 768,\n        \"height\": 485.8165429718969,\n        \"content\": \"### 聊天代理\\n- 该代理主要用于演示如何使用子工作流。\\n- 这是一个基础代理，拥有一个“生成图表”的工具\\n- 该工具会调用子工作流\\n- 子工作流返回的Quickchart链接将显示在对话中\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7793a567-c4d4-4745-83c9-adf5397755e9\",\n      \"name\": \"AI Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        1020,\n        400\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"systemMessage\": \"You're a general purpose ai. Using markdown, you can display images in the conversation. Don't change the width of the chart\"\n        }\n      },\n      \"typeVersion\": 1.6\n    },\n    {\n      \"id\": \"71bd2cb5-7b20-4d83-adba-c1fd57511155\",\n      \"name\": \"When chat message received\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",\n      \"position\": [\n        840,\n        400\n      ],\n      \"webhookId\": \"1281cd48-08a0-431d-9bf5-9bb60e6b7a77\",\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1.1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"3af7cf64-60dc-4ba6-9ac6-f7ed2453812c\",\n  \"connections\": {\n    \"Generate a chart\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Window Buffer Memory\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When chat message received\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Execute \\\"Generate a chart\\\" tool\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"OpenAI - Generate Chart definition with Structured Output\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI - Generate Chart definition with Structured Output\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}