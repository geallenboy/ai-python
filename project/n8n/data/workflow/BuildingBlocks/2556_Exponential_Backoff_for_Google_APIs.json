{
  "title": "Exponential Backoff for Google APIs",
  "url": "https://n8n.io/workflows/2556-exponential-backoff-for-google-apis/",
  "category": "BuildingBlocks",
  "category_url": "https://n8n.io/workflows/categories/building-blocks/?sort=createdAt:desc",
  "author": "Alex Kim",
  "publish_date": "Last update 6 months ago",
  "publish_date_absolute": "2024-11-06",
  "content": "",
  "workflow_json": "{\"id\":\"2NhqmUqW3KruEkaE\",\"meta\":{\"instanceId\":\"d868e3d040e7bda892c81b17cf446053ea25d2556fcef89cbe19dd61a3e876e9\"},\"name\":\"Exponential Backoff for Google APIs\",\"tags\":[{\"id\":\"nezaWFCGa7eZsVKu\",\"name\":\"Utility\",\"createdAt\":\"2024-11-13T18:08:08.207Z\",\"updatedAt\":\"2024-11-13T18:08:08.207Z\"}],\"nodes\":[{\"id\":\"5d6b1730-33c5-401c-b73f-2b7ea8eedfe3\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[-580,-80],\"parameters\":{},\"typeVersion\":1},{\"id\":\"6726b630-597c-46cf-8839-75cd80108f2f\",\"name\":\"Exponential Backoff\",\"type\":\"n8n-nodes-base.code\",\"position\":[160,120],\"parameters\":{\"mode\":\"runOnceForEachItem\",\"jsCode\":\"// Define the retry count (coming from a previous node or set manually)\\nconst retryCount = $json[\\\"retryCount\\\"] || 0;  // If not present, default to 0\\nconst maxRetries = 5;  // Define the maximum number of retries\\nconst initialDelay = 1;  // Initial delay in seconds (1 second)\\n\\n// If the retry count is less than the max retries, calculate the delay\\nif (retryCount < maxRetries) {\\n    const currentDelayInSeconds = initialDelay * Math.pow(2, retryCount);  // Exponential backoff delay in seconds\\n    \\n    // Log the delay time for debugging\\n    console.log(`Waiting for ${currentDelayInSeconds} seconds before retry...`);\\n    \\n    return {\\n        json: {\\n            retryCount: retryCount + 1,  // Increment retry count\\n            waitTimeInSeconds: currentDelayInSeconds, // Pass the delay time in seconds\\n            status: 'retrying',\\n        }\\n    };\\n} else {\\n    // If max retries are exceeded, return a failure response\\n    return {\\n        json: {\\n            error: 'Max retries exceeded',\\n            retryCount: retryCount,\\n            status: 'failed'\\n        }\\n    };\\n}\\n\"},\"typeVersion\":2},{\"id\":\"605b8ff0-aa19-42dd-8dbb-aa12380ac4bc\",\"name\":\"Stop and Error\",\"type\":\"n8n-nodes-base.stopAndError\",\"position\":[760,120],\"parameters\":{\"errorMessage\":\"Google Sheets API Limit has been triggered and the workflow has stopped\"},\"typeVersion\":1},{\"id\":\"97818e8b-e0cc-4a49-8797-43e02535740f\",\"name\":\"Loop Over Items\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[-360,-80],\"parameters\":{\"options\":{}},\"typeVersion\":3},{\"id\":\"0583eabd-bd97-4330-8a38-b2aed3a90c37\",\"name\":\"Google Sheets\",\"type\":\"n8n-nodes-base.googleSheets\",\"onError\":\"continueErrorOutput\",\"position\":[-120,20],\"parameters\":{\"options\":{},\"sheetName\":{\"__rl\":true,\"mode\":\"name\",\"value\":\"Sheet1\"},\"documentId\":{\"__rl\":true,\"mode\":\"url\",\"value\":\"https://docs.google.com/spreadsheets/d/1_gxZl6n_AYPHRFRTWfhy7TZnhEYuWzh8UvGdtWCD3sU/edit?gid=0#gid=0\"},\"authentication\":\"serviceAccount\"},\"credentials\":{\"googleApi\":{\"id\":\"lm7dPHYumCy6sP6k\",\"name\":\"AlexK1919 Google Service\"}},\"typeVersion\":4.5},{\"id\":\"0d8023f8-f7ac-4303-b18e-821690cc9f94\",\"name\":\"Wait\",\"type\":\"n8n-nodes-base.wait\",\"position\":[360,120],\"webhookId\":\"f1651aa1-6497-4496-9e07-240dcf1852f3\",\"parameters\":{\"amount\":\"={{ $json[\\\"waitTime\\\"] }}\"},\"typeVersion\":1.1},{\"id\":\"72e0001e-f99b-4d57-9006-4a4dd5d3d8d5\",\"name\":\"Check Max Retries\",\"type\":\"n8n-nodes-base.if\",\"position\":[560,120],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"51e191cb-af20-423b-9303-8523caa4ae0d\",\"operator\":{\"type\":\"number\",\"operation\":\"gt\"},\"leftValue\":\"={{ $('Exponential Backoff').item.json[\\\"retryCount\\\"] }}\",\"rightValue\":10}]}},\"typeVersion\":2.2},{\"id\":\"2ea14bb0-4313-4595-811d-729ca6d37420\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[100,-80],\"parameters\":{\"color\":3,\"width\":820,\"height\":460,\"content\":\"# Exponential Backoff for Google APIs \\n## Connect these nodes to any Google API node such as the Google Sheets node example in this workflow\"},\"typeVersion\":1}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"729e3a54-6238-4e4c-833e-8e37dba16dbb\",\"connections\":{\"Wait\":{\"main\":[[{\"node\":\"Check Max Retries\",\"type\":\"main\",\"index\":0}]]},\"Google Sheets\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Exponential Backoff\",\"type\":\"main\",\"index\":0}]]},\"Loop Over Items\":{\"main\":[[],[{\"node\":\"Google Sheets\",\"type\":\"main\",\"index\":0}]]},\"Check Max Retries\":{\"main\":[[{\"node\":\"Stop and Error\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Google Sheets\",\"type\":\"main\",\"index\":0}]]},\"Exponential Backoff\":{\"main\":[[{\"node\":\"Wait\",\"type\":\"main\",\"index\":0},{\"node\":\"Check Max Retries\",\"type\":\"main\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "# n8n Workflow: Exponential Backoff for Google APIs\n\n## Overview\n\nThis n8n workflow implements an **Exponential Backoff** mechanism to handle retries when interacting with Google APIs. It ensures that failed API requests are retried with increasing delays, up to a specified maximum retry count. This approach helps mitigate transient errors (e.g., rate limits or temporary network issues) while maintaining workflow efficiency.\n\n### Key Features:\n\n  * **Exponential Backoff Logic** : Dynamically increases wait time between retries based on the retry count.\n  * **Error Handling** : Stops the workflow and raises an error after a specified number of retries.\n  * **Dynamic Waiting** : Waits for a calculated duration before each retry.\n  * **Scalable Design** : Modular nodes for easy debugging and customization.\n\n\n\n* * *\n\n## Workflow Details\n\n### Nodes in the Workflow:\n\n  1. **Trigger** (`When clicking \"Test Workflow\"`):\n\n     * Manually starts the workflow for testing.\n  2. **Loop Over Items** :\n\n     * Iterates over multiple input items to process Google API requests row by row.\n  3. **Google API Node (Example: Update Sheet)** :\n\n     * Sends a request to a Google API endpoint (e.g., updating a row in Google Sheets).\n     * On success: Moves to the next item in the loop.\n     * On error: Passes the error to the **Exponential Backoff** node.\n  4. **Exponential Backoff** :\n\n     * Calculates the delay for the next retry based on the retry count.\n     * Logic:\n           \n           const retryCount = $json[\"retryCount\"] || 0;\n           const maxRetries = 5;\n           const initialDelay = 1; // in seconds\n           \n           if (retryCount &lt; maxRetries) {\n               const currentDelayInSeconds = initialDelay * Math.pow(2, retryCount);\n               return {\n                   json: {\n                       retryCount: retryCount + 1,\n                       waitTimeInSeconds: currentDelayInSeconds,\n                       status: 'retrying',\n                   }\n               };\n           } else {\n               return {\n                   json: {\n                       error: 'Max retries exceeded',\n                       retryCount: retryCount,\n                       status: 'failed'\n                   }\n               };\n           }\n           \n\n  5. **Wait** :\n\n     * Dynamically waits for the `waitTimeInSeconds` value calculated in the Exponential Backoff node.\n     * **Configuration:**\n       * Resume: `After Time Interval`\n       * Wait Amount: `{{ $json[\"waitTimeInSeconds\"] }}`\n       * Unit: `Seconds`\n  6. **Check Max Retries** :\n\n     * Evaluates whether the retry count has exceeded the maximum limit.\n     * Routes the workflow: \n       * **True** : Passes to the **Stop and Error** node.\n       * **False** : Loops back to the Google API node for retry.\n  7. **Stop and Error** :\n\n     * Stops the workflow and logs the error when the maximum retry count is reached.\n\n\n\n* * *\n\n## Parameters\n\n### Configurable Settings:\n\n  1. **Max Retries** :\n\n     * Defined in the Exponential Backoff node (`const maxRetries = 5`).\n     * Adjust this value based on your requirements.\n  2. **Initial Delay** :\n\n     * The starting wait time for retries, defined as `1` second.\n  3. **Google API Configuration** :\n\n     * Ensure your Google API node is properly authenticated and configured with the desired endpoint and parameters.\n\n\n\n* * *\n\n## How to Use\n\n  1. **Import the Workflow** :\n\n     * Copy the workflow JSON and import it into your n8n instance.\n  2. **Configure Google API Node** :\n\n     * Set up the Google API node with your credentials and target API endpoint (e.g., Google Sheets, Gmail, etc.).\n  3. **Test the Workflow** :\n\n     * Manually trigger the workflow and observe the retry behavior in case of errors.\n  4. **Monitor Logs** :\n\n     * Use the console logs in the Exponential Backoff node to debug retry timings and status.\n\n\n\n* * *\n\n## Example Scenarios\n\n### Scenario 1: Successful Execution\n\n  * The Google API processes all requests without errors.\n  * Workflow completes without triggering the retry logic.\n\n\n\n### Scenario 2: Transient API Errors\n\n  * The Google API returns an error (e.g., `429 Too Many Requests`).\n  * The workflow retries the request with increasing wait times.\n\n\n\n### Scenario 3: Maximum Retries Exceeded\n\n  * The workflow reaches the maximum retry count (e.g., 5 retries).\n  * An error is raised, and the workflow stops.\n\n\n\n* * *\n\n## Considerations\n\n  1. **Jitter** :\n\n     * This workflow does not implement jitter (randomized delay) since it's not required for low-volume use cases.\n     * If needed, jitter can be added to the exponential backoff calculation.\n  2. **Retry Storms** :\n\n     * If multiple workflows run simultaneously, ensure your API quotas can handle potential retries.\n  3. **Error Handling Beyond Max Retries** :\n\n     * Customize the **Stop and Error** node to notify stakeholders or log errors in a centralized system.\n\n\n\n* * *\n\n## Customization Options\n\n  * Adjust the maximum retry limit and delay calculation to suit your use case.\n  * Add additional logic to handle specific error codes differently.\n  * Extend the workflow to notify stakeholders when an error occurs (e.g., via Slack or email).\n\n\n\n* * *\n\n## Troubleshooting\n\n  * **Retry Not Triggering** :\n\n    * Ensure the `retryCount` variable is passed correctly between nodes.\n    * Confirm that the error output from the Google API node flows to the Exponential Backoff node.\n  * **Incorrect Wait Time** :\n\n    * Verify the `Wait` node is referencing the correct field for `waitTimeInSeconds`.\n\n\n\n* * *\n\n## Request for Feedback\n\nWe are always looking to improve this workflow. If you have suggestions, improvements, or ideas for additional features, please feel free to share them. Your feedback helps us refine and enhance this solution!\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><h1>n8n Workflow: Exponential Backoff for Google APIs</h1>\n<h2>Overview</h2>\n<p>This n8n workflow implements an <strong>Exponential Backoff</strong> mechanism to handle retries when interacting with Google APIs. It ensures that failed API requests are retried with increasing delays, up to a specified maximum retry count. This approach helps mitigate transient errors (e.g., rate limits or temporary network issues) while maintaining workflow efficiency.</p>\n<h3>Key Features:</h3>\n<ul>\n<li><strong>Exponential Backoff Logic</strong>: Dynamically increases wait time between retries based on the retry count.</li>\n<li><strong>Error Handling</strong>: Stops the workflow and raises an error after a specified number of retries.</li>\n<li><strong>Dynamic Waiting</strong>: Waits for a calculated duration before each retry.</li>\n<li><strong>Scalable Design</strong>: Modular nodes for easy debugging and customization.</li>\n</ul>\n<hr>\n<h2>Workflow Details</h2>\n<h3>Nodes in the Workflow:</h3>\n<ol>\n<li>\n<p><strong>Trigger</strong> (<code>When clicking \"Test Workflow\"</code>):</p>\n<ul>\n<li>Manually starts the workflow for testing.</li>\n</ul>\n</li>\n<li>\n<p><strong>Loop Over Items</strong>:</p>\n<ul>\n<li>Iterates over multiple input items to process Google API requests row by row.</li>\n</ul>\n</li>\n<li>\n<p><strong>Google API Node (Example: Update Sheet)</strong>:</p>\n<ul>\n<li>Sends a request to a Google API endpoint (e.g., updating a row in Google Sheets).</li>\n<li>On success: Moves to the next item in the loop.</li>\n<li>On error: Passes the error to the <strong>Exponential Backoff</strong> node.</li>\n</ul>\n</li>\n<li>\n<p><strong>Exponential Backoff</strong>:</p>\n<ul>\n<li>Calculates the delay for the next retry based on the retry count.</li>\n<li>Logic:<pre><code>const retryCount = $json[\"retryCount\"] || 0;\nconst maxRetries = 5;\nconst initialDelay = 1; // in seconds\n\nif (retryCount &amp;lt; maxRetries) {\n    const currentDelayInSeconds = initialDelay * Math.pow(2, retryCount);\n    return {\n        json: {\n            retryCount: retryCount + 1,\n            waitTimeInSeconds: currentDelayInSeconds,\n            status: 'retrying',\n        }\n    };\n} else {\n    return {\n        json: {\n            error: 'Max retries exceeded',\n            retryCount: retryCount,\n            status: 'failed'\n        }\n    };\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Wait</strong>:</p>\n<ul>\n<li>Dynamically waits for the <code>waitTimeInSeconds</code> value calculated in the Exponential Backoff node.</li>\n<li><strong>Configuration:</strong>\n<ul>\n<li>Resume: <code>After Time Interval</code></li>\n<li>Wait Amount: <code>{{ $json[\"waitTimeInSeconds\"] }}</code></li>\n<li>Unit: <code>Seconds</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Check Max Retries</strong>:</p>\n<ul>\n<li>Evaluates whether the retry count has exceeded the maximum limit.</li>\n<li>Routes the workflow:\n<ul>\n<li><strong>True</strong>: Passes to the <strong>Stop and Error</strong> node.</li>\n<li><strong>False</strong>: Loops back to the Google API node for retry.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Stop and Error</strong>:</p>\n<ul>\n<li>Stops the workflow and logs the error when the maximum retry count is reached.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>Parameters</h2>\n<h3>Configurable Settings:</h3>\n<ol>\n<li>\n<p><strong>Max Retries</strong>:</p>\n<ul>\n<li>Defined in the Exponential Backoff node (<code>const maxRetries = 5</code>).</li>\n<li>Adjust this value based on your requirements.</li>\n</ul>\n</li>\n<li>\n<p><strong>Initial Delay</strong>:</p>\n<ul>\n<li>The starting wait time for retries, defined as <code>1</code> second.</li>\n</ul>\n</li>\n<li>\n<p><strong>Google API Configuration</strong>:</p>\n<ul>\n<li>Ensure your Google API node is properly authenticated and configured with the desired endpoint and parameters.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>How to Use</h2>\n<ol>\n<li>\n<p><strong>Import the Workflow</strong>:</p>\n<ul>\n<li>Copy the workflow JSON and import it into your n8n instance.</li>\n</ul>\n</li>\n<li>\n<p><strong>Configure Google API Node</strong>:</p>\n<ul>\n<li>Set up the Google API node with your credentials and target API endpoint (e.g., Google Sheets, Gmail, etc.).</li>\n</ul>\n</li>\n<li>\n<p><strong>Test the Workflow</strong>:</p>\n<ul>\n<li>Manually trigger the workflow and observe the retry behavior in case of errors.</li>\n</ul>\n</li>\n<li>\n<p><strong>Monitor Logs</strong>:</p>\n<ul>\n<li>Use the console logs in the Exponential Backoff node to debug retry timings and status.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>Example Scenarios</h2>\n<h3>Scenario 1: Successful Execution</h3>\n<ul>\n<li>The Google API processes all requests without errors.</li>\n<li>Workflow completes without triggering the retry logic.</li>\n</ul>\n<h3>Scenario 2: Transient API Errors</h3>\n<ul>\n<li>The Google API returns an error (e.g., <code>429 Too Many Requests</code>).</li>\n<li>The workflow retries the request with increasing wait times.</li>\n</ul>\n<h3>Scenario 3: Maximum Retries Exceeded</h3>\n<ul>\n<li>The workflow reaches the maximum retry count (e.g., 5 retries).</li>\n<li>An error is raised, and the workflow stops.</li>\n</ul>\n<hr>\n<h2>Considerations</h2>\n<ol>\n<li>\n<p><strong>Jitter</strong>:</p>\n<ul>\n<li>This workflow does not implement jitter (randomized delay) since it's not required for low-volume use cases.</li>\n<li>If needed, jitter can be added to the exponential backoff calculation.</li>\n</ul>\n</li>\n<li>\n<p><strong>Retry Storms</strong>:</p>\n<ul>\n<li>If multiple workflows run simultaneously, ensure your API quotas can handle potential retries.</li>\n</ul>\n</li>\n<li>\n<p><strong>Error Handling Beyond Max Retries</strong>:</p>\n<ul>\n<li>Customize the <strong>Stop and Error</strong> node to notify stakeholders or log errors in a centralized system.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>Customization Options</h2>\n<ul>\n<li>Adjust the maximum retry limit and delay calculation to suit your use case.</li>\n<li>Add additional logic to handle specific error codes differently.</li>\n<li>Extend the workflow to notify stakeholders when an error occurs (e.g., via Slack or email).</li>\n</ul>\n<hr>\n<h2>Troubleshooting</h2>\n<ul>\n<li>\n<p><strong>Retry Not Triggering</strong>:</p>\n<ul>\n<li>Ensure the <code>retryCount</code> variable is passed correctly between nodes.</li>\n<li>Confirm that the error output from the Google API node flows to the Exponential Backoff node.</li>\n</ul>\n</li>\n<li>\n<p><strong>Incorrect Wait Time</strong>:</p>\n<ul>\n<li>Verify the <code>Wait</code> node is referencing the correct field for <code>waitTimeInSeconds</code>.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>Request for Feedback</h2>\n<p>We are always looking to improve this workflow. If you have suggestions, improvements, or ideas for additional features, please feel free to share them. Your feedback helps us refine and enhance this solution!</p>\n</div><!--]-->",
  "readme_zh": "# n8n工作流：Google API指数退避重试机制\n\n## 概述\n\n本n8n工作流实现了**指数退避**机制，用于处理与Google API交互时的重试操作。它能确保失败的API请求按照递增延迟时间进行重试，直至达到最大重试次数。该方法可有效缓解瞬时错误（如速率限制或临时网络问题），同时保持工作流效率。\n\n### 核心特性：\n\n* **指数退避逻辑**：根据重试次数动态计算等待间隔\n* **错误处理**：达到最大重试次数后停止工作流并抛出错误\n* **动态等待**：每次重试前执行精确时长等待\n* **可扩展设计**：模块化节点便于调试和定制\n\n---\n\n## 工作流详情\n\n### 节点构成：\n\n1. **触发器**（点击\"测试工作流\"时）：\n   * 手动触发工作流测试\n\n2. **循环处理项**：\n   * 逐行处理Google API请求的多项输入\n\n3. **Google API节点**（示例：更新表格）：\n   * 向Google API端点发送请求（如更新Google Sheets行数据）\n   * 成功时：继续处理循环中的下一项\n   * 失败时：将错误传递至**指数退避**节点\n\n4. **指数退避计算器**：\n   ```javascript\n   const retryCount = $json[\"retryCount\"] || 0;\n   const maxRetries = 5;\n   const initialDelay = 1; // 单位：秒\n   \n   if (retryCount < maxRetries) {\n       const currentDelayInSeconds = initialDelay * Math.pow(2, retryCount);\n       return {\n           json: {\n               retryCount: retryCount + 1,\n               waitTimeInSeconds: currentDelayInSeconds,\n               status: 'retrying',\n           }\n       };\n   } else {\n       return {\n           json: {\n               error: '超过最大重试次数',\n               retryCount: retryCount,\n               status: 'failed'\n           }\n       };\n   }\n   ```\n\n5. **等待节点**：\n   * 根据指数退避节点计算的`waitTimeInSeconds`值动态等待\n   * **配置项**：\n     * 恢复方式：`时间间隔后`\n     * 等待时长：`{{ $json[\"waitTimeInSeconds\"] }}`\n     * 时间单位：`秒`\n\n6. **最大重试检查**：\n   * 判断是否超过最大重试限制\n   * 路由逻辑：\n     * **是**：跳转至**停止并报错**节点\n     * **否**：循环回Google API节点重试\n\n7. **停止并报错**：\n   * 达到最大重试次数时终止工作流并记录错误\n\n---\n\n## 参数配置\n\n### 可调设置：\n\n1. **最大重试次数**：\n   * 在指数退避节点中定义（`const maxRetries = 5`）\n   * 根据实际需求调整\n\n2. **初始延迟**：\n   * 首次重试等待时间，默认为1秒\n\n3. **Google API配置**：\n   * 确保API节点已正确认证并配置目标端点参数\n\n---\n\n## 使用指南\n\n1. **导入工作流**：\n   * 复制JSON工作流文件导入n8n实例\n\n2. **配置Google API节点**：\n   * 设置认证凭据和目标API端点（如Google Sheets/Gmail等）\n\n3. **测试工作流**：\n   * 手动触发并观察错误时的重试行为\n\n4. **日志监控**：\n   * 通过指数退避节点的控制台日志调试重试时序\n\n---\n\n## 典型场景\n\n### 场景1：成功执行\n* API请求全部成功处理\n* 工作流直接完成不触发重试\n\n### 场景2：瞬时错误\n* API返回错误（如`429请求过多`）\n* 工作流按指数递增间隔自动重试\n\n### 场景3：超过最大重试\n* 达到预设重试上限（如5次）\n* 终止工作流并抛出错误\n\n---\n\n## 注意事项\n\n1. **随机延迟**：\n   * 当前未实现jitter（随机延迟）机制\n   * 如需可自行添加到退避计算公式中\n\n2. **重试风暴**：\n   * 多工作流并行时需确保API配额充足\n\n3. **错误后续处理**：\n   * 可定制**停止并报错**节点实现告警通知\n\n---\n\n## 定制选项\n\n* 调整最大重试次数和延迟算法\n* 针对特定错误码添加特殊处理逻辑\n* 扩展错误通知功能（如Slack/邮件通知）\n\n---\n\n## 故障排查\n\n* **重试未触发**：\n  * 检查`retryCount`变量在节点间的传递\n  * 确认错误输出正确流向指数退避节点\n\n* **等待时间异常**：\n  * 验证等待节点是否正确引用`waitTimeInSeconds`字段\n\n---\n\n## 反馈征集\n\n我们持续优化本工作流，如有改进建议或功能需求，欢迎随时提出。您的反馈将帮助我们完善解决方案！",
  "title_zh": "Google API 的指数退避策略",
  "publish_date_zh": "最后更新于6个月前",
  "workflow_json_zh": "{\n  \"id\": \"2NhqmUqW3KruEkaE\",\n  \"meta\": {\n    \"instanceId\": \"d868e3d040e7bda892c81b17cf446053ea25d2556fcef89cbe19dd61a3e876e9\"\n  },\n  \"name\": \"Exponential Backoff for Google APIs\",\n  \"tags\": [\n    {\n      \"id\": \"nezaWFCGa7eZsVKu\",\n      \"name\": \"Utility\",\n      \"createdAt\": \"2024-11-13T18:08:08.207Z\",\n      \"updatedAt\": \"2024-11-13T18:08:08.207Z\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"5d6b1730-33c5-401c-b73f-2b7ea8eedfe3\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -580,\n        -80\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"6726b630-597c-46cf-8839-75cd80108f2f\",\n      \"name\": \"Exponential Backoff\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        160,\n        120\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"// Define the retry count (coming from a previous node or set manually)\\nconst retryCount = $json[\\\"retryCount\\\"] || 0;  // If not present, default to 0\\nconst maxRetries = 5;  // Define the maximum number of retries\\nconst initialDelay = 1;  // Initial delay in seconds (1 second)\\n\\n// If the retry count is less than the max retries, calculate the delay\\nif (retryCount < maxRetries) {\\n    const currentDelayInSeconds = initialDelay * Math.pow(2, retryCount);  // Exponential backoff delay in seconds\\n    \\n    // Log the delay time for debugging\\n    console.log(`Waiting for ${currentDelayInSeconds} seconds before retry...`);\\n    \\n    return {\\n        json: {\\n            retryCount: retryCount + 1,  // Increment retry count\\n            waitTimeInSeconds: currentDelayInSeconds, // Pass the delay time in seconds\\n            status: 'retrying',\\n        }\\n    };\\n} else {\\n    // If max retries are exceeded, return a failure response\\n    return {\\n        json: {\\n            error: 'Max retries exceeded',\\n            retryCount: retryCount,\\n            status: 'failed'\\n        }\\n    };\\n}\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"605b8ff0-aa19-42dd-8dbb-aa12380ac4bc\",\n      \"name\": \"Stop and Error\",\n      \"type\": \"n8n-nodes-base.stopAndError\",\n      \"position\": [\n        760,\n        120\n      ],\n      \"parameters\": {\n        \"errorMessage\": \"Google Sheets API Limit has been triggered and the workflow has stopped\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"97818e8b-e0cc-4a49-8797-43e02535740f\",\n      \"name\": \"Loop Over Items\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        -360,\n        -80\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"0583eabd-bd97-4330-8a38-b2aed3a90c37\",\n      \"name\": \"Google Sheets\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        -120,\n        20\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"sheetName\": {\n          \"__rl\": true,\n          \"mode\": \"name\",\n          \"value\": \"Sheet1\"\n        },\n        \"documentId\": {\n          \"__rl\": true,\n          \"mode\": \"url\",\n          \"value\": \"https://docs.google.com/spreadsheets/d/1_gxZl6n_AYPHRFRTWfhy7TZnhEYuWzh8UvGdtWCD3sU/edit?gid=0#gid=0\"\n        },\n        \"authentication\": \"serviceAccount\"\n      },\n      \"credentials\": {\n        \"googleApi\": {\n          \"id\": \"lm7dPHYumCy6sP6k\",\n          \"name\": \"AlexK1919 Google Service\"\n        }\n      },\n      \"typeVersion\": 4.5\n    },\n    {\n      \"id\": \"0d8023f8-f7ac-4303-b18e-821690cc9f94\",\n      \"name\": \"Wait\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [\n        360,\n        120\n      ],\n      \"webhookId\": \"f1651aa1-6497-4496-9e07-240dcf1852f3\",\n      \"parameters\": {\n        \"amount\": \"={{ $json[\\\"waitTime\\\"] }}\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"72e0001e-f99b-4d57-9006-4a4dd5d3d8d5\",\n      \"name\": \"Check Max Retries\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        560,\n        120\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"51e191cb-af20-423b-9303-8523caa4ae0d\",\n              \"operator\": {\n                \"type\": \"number\",\n                \"operation\": \"gt\"\n              },\n              \"leftValue\": \"={{ $('Exponential Backoff').item.json[\\\"retryCount\\\"] }}\",\n              \"rightValue\": 10\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"2ea14bb0-4313-4595-811d-729ca6d37420\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        100,\n        -80\n      ],\n      \"parameters\": {\n        \"color\": 3,\n        \"width\": 820,\n        \"height\": 460,\n        \"content\": \"# 谷歌API的指数退避策略  \\n## 将这些节点连接至任意谷歌API节点，例如本工作流中的Google Sheets节点示例\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"729e3a54-6238-4e4c-833e-8e37dba16dbb\",\n  \"connections\": {\n    \"Wait\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Max Retries\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Sheets\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Exponential Backoff\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop Over Items\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"Google Sheets\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Max Retries\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Stop and Error\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Google Sheets\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Exponential Backoff\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Wait\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Check Max Retries\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}