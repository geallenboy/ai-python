{
  "title": "Track investments using Baserow and n8n",
  "url": "https://n8n.io/workflows/1785-track-investments-using-baserow-and-n8n/",
  "category": "BuildingBlocks",
  "category_url": "https://n8n.io/workflows/categories/building-blocks/?sort=createdAt:desc",
  "author": "Tom",
  "publish_date": "Last update 10 months ago",
  "publish_date_absolute": "2024-07-07",
  "content": "",
  "workflow_json": "{\"nodes\":[{\"id\":\"70a44436-4b51-458a-ae93-60edeed170de\",\"name\":\"On clicking 'execute'\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[240,300],\"parameters\":{},\"typeVersion\":1},{\"id\":\"d4c2dfa2-30bb-4f06-96c2-5811472302d2\",\"name\":\"Cron\",\"type\":\"n8n-nodes-base.cron\",\"position\":[240,100],\"parameters\":{\"triggerTimes\":{\"item\":[{\"mode\":\"custom\",\"cronExpression\":\"15 7 * * 1-6\"}]}},\"typeVersion\":1},{\"id\":\"86924546-e4f2-4795-8e80-9e49626d2c42\",\"name\":\"Baserow\",\"type\":\"n8n-nodes-base.baserow\",\"position\":[460,200],\"parameters\":{\"tableId\":680,\"databaseId\":146,\"additionalOptions\":{}},\"credentials\":{\"baserowApi\":{\"id\":\"37\",\"name\":\"Baserow account\"}},\"typeVersion\":1},{\"id\":\"36f2947b-67cf-47eb-891f-e7e3b5ba9eac\",\"name\":\"Fetch tradegate stock page\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[680,200],\"parameters\":{\"url\":\"https://www.tradegate.de/orderbuch.php\",\"options\":{},\"responseFormat\":\"string\",\"queryParametersUi\":{\"parameter\":[{\"name\":\"isin\",\"value\":\"={{$json[\\\"ISIN\\\"]}}\"}]}},\"typeVersion\":1},{\"id\":\"b516e751-d1d1-43a0-8f19-6787a5c56ddc\",\"name\":\"Parse tradegate stock page\",\"type\":\"n8n-nodes-base.htmlExtract\",\"position\":[900,200],\"parameters\":{\"options\":{},\"extractionValues\":{\"values\":[{\"key\":\"WKN\",\"cssSelector\":\"#col1_content > table > tbody > tr:nth-child(2) > td:nth-child(1)\"},{\"key\":\"ISIN\",\"cssSelector\":\"#col1_content > table > tbody > tr:nth-child(2) > td:nth-child(3)\"},{\"key\":\"Currency\",\"cssSelector\":\"#col1_content > table > tbody > tr:nth-child(2) > td:nth-child(4)\"},{\"key\":\"Name\",\"cssSelector\":\"#col1_content > h2\"},{\"key\":\"Bid\",\"cssSelector\":\"#bid\"},{\"key\":\"Ask\",\"cssSelector\":\"#ask\"}]}},\"typeVersion\":1},{\"id\":\"e51556c7-3f3a-4e4d-96e9-942f436422af\",\"name\":\"Build HTML\",\"type\":\"n8n-nodes-base.function\",\"position\":[1560,200],\"parameters\":{\"functionCode\":\"const columns = Object.keys(items[0].json);\\n\\n// Define the basic table structure\\nlet table_header = `<table style=\\\"border: 1px solid black; border-collapse: collapse;\\\"><tr>${columns.map(e => '<th style=\\\"border: 1px solid black; border-collapse: collapse;\\\">' + e + '</th>').join('')}</tr>`;\\nlet table_content = \\\"\\\";\\nlet table_footer = '</table>';\\n\\n// Add content to our table\\nfor (item of items) {\\n    table_content += '<tr>'\\n    for (column of columns) {\\n        table_content += `<td style=\\\\\\\"border: 1px solid black; border-collapse: collapse;\\\\\\\">${item.json[column]}</td>`\\n    }\\n    table_content += '</tr>'\\n}\\n\\n// Prepare HTML email body\\nconst email_html = `<body style=\\\"font-family: Sans-Serif;\\\">\\n<p>Investments as of ${$now.setZone(\\\"Europe/Dublin\\\").setLocale('ie').toFormat('fff')}:</p>\\n${table_header}\\n${table_content}\\n${table_footer}\\n<p>Total: ${items.map(e => parseFloat(e.json['Current Value'])).reduce((a, b) => a + b, 0).toFixed(2)}</p>\\n<p><small>Workflow #${$workflow.id}</small></p>\\n</body>`\\n\\n\\nreturn [{\\n    json: {\\n        html: email_html\\n    }\\n}];\"},\"typeVersion\":1},{\"id\":\"361bf8f2-298c-4b96-9f21-4f4620f1e9a9\",\"name\":\"Format result\",\"type\":\"n8n-nodes-base.set\",\"position\":[1120,200],\"parameters\":{\"values\":{\"string\":[{\"name\":\"Name\",\"value\":\"={{ $node[\\\"Baserow\\\"].json[\\\"Name\\\"] }}\"},{\"name\":\"ISIN\",\"value\":\"={{ $node[\\\"Baserow\\\"].json[\\\"ISIN\\\"] }}\"},{\"name\":\"Count\",\"value\":\"={{ $node[\\\"Baserow\\\"].json[\\\"Count\\\"] }}\"},{\"name\":\"Purchase Price\",\"value\":\"={{ $node[\\\"Baserow\\\"].json[\\\"Purchase Price\\\"] }}\"},{\"name\":\"Current Value\",\"value\":\"={{ (parseFloat($json[\\\"Bid\\\"].replace(',', '.')) * parseFloat($node[\\\"Baserow\\\"].json[\\\"Count\\\"])).toFixed(2) }}\"}]},\"options\":{},\"keepOnlySet\":true},\"typeVersion\":1},{\"id\":\"c2f329dc-3b97-402a-9d63-ed863c2aee84\",\"name\":\"Calculate change\",\"type\":\"n8n-nodes-base.set\",\"position\":[1340,200],\"parameters\":{\"values\":{\"string\":[{\"name\":\"Change\",\"value\":\"={{ ( parseFloat($json[\\\"Current Value\\\"]) - parseFloat($json[\\\"Purchase Price\\\"]) ).toFixed(2) }}\"},{\"name\":\"Change (%)\",\"value\":\"={{ ( ( ( parseFloat($json[\\\"Current Value\\\"]) - parseFloat($json[\\\"Purchase Price\\\"]) ) / parseFloat($json[\\\"Purchase Price\\\"]) ) * 100).toFixed(2) }}\"}]},\"options\":{}},\"typeVersion\":1},{\"id\":\"e0876374-c9f3-4253-8764-9aa78faa2193\",\"name\":\"SendGrid\",\"type\":\"n8n-nodes-base.sendGrid\",\"position\":[1780,200],\"parameters\":{\"subject\":\"Investment report\",\"toEmail\":\"mutedjam@n8n.io\",\"resource\":\"mail\",\"fromEmail\":\"mutedjam@n8n.io\",\"contentType\":\"text/html\",\"contentValue\":\"={{ $json[\\\"html\\\"] }}\",\"additionalFields\":{}},\"credentials\":{\"sendGridApi\":{\"id\":\"143\",\"name\":\"SendGrid account\"}},\"typeVersion\":1}],\"connections\":{\"Cron\":{\"main\":[[{\"node\":\"Baserow\",\"type\":\"main\",\"index\":0}]]},\"Baserow\":{\"main\":[[{\"node\":\"Fetch tradegate stock page\",\"type\":\"main\",\"index\":0}]]},\"Build HTML\":{\"main\":[[{\"node\":\"SendGrid\",\"type\":\"main\",\"index\":0}]]},\"Format result\":{\"main\":[[{\"node\":\"Calculate change\",\"type\":\"main\",\"index\":0}]]},\"Calculate change\":{\"main\":[[{\"node\":\"Build HTML\",\"type\":\"main\",\"index\":0}]]},\"On clicking 'execute'\":{\"main\":[[{\"node\":\"Baserow\",\"type\":\"main\",\"index\":0}]]},\"Fetch tradegate stock page\":{\"main\":[[{\"node\":\"Parse tradegate stock page\",\"type\":\"main\",\"index\":0}]]},\"Parse tradegate stock page\":{\"main\":[[{\"node\":\"Format result\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This workflow uses a number of technologies to track the value of ETFs, stocks and other exchange-traded products:\n\n  * [Baserow](https://baserow.io/): To keep track of our investments\n  * n8n’s Cron node: To trigger the workflow compiling our daily morning briefing\n  * Webscraping: The HTTP Request & HTML Extract nodes to fetch up-to-date prices from the relevant stock exchange and structure this infromation\n  * Javascript: We’ll use the Function node to build a custom HTML body with all the relevant information\n  * [Sendgrid](https://sendgrid.com/): The Email Service Provider in this workflow to send out our email\n\n\n\nThanks to n8n, the steps in this workflow can easily be changed. Not a Sendgrid user? Simply remove the Sendgrid node and add a Gmail node instead. The stock exchange has a REST API? Just throw away the HTML Extract node.\n\nHere’s how it works:\n\n# Data Source\n\nIn this scenario, our data source is Baserow. In our table, we’ll track all information needed to identify each investment product:\n\n![image.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_2fa74ff9be.png)\n\nWe have two text type columns (**Name** and **ISIN**) as well as two number type columns (**Count** and **Purchase Price**).\n\n# Workflow\n\n![image.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_db02fbb535.png)\n\n## Nodes\n\n### 1\\. Cron\n\nThe Cron node will trigger our workflow to run each work day in the morning hours.\n\n### 2\\. Baserow\n\nThe Baserow node will fetch our investments from the database table shown above.\n\n### 3\\. HTTP Request\n\nUsing the HTTP Request node we can fetch live data from the stock exchange of our choice based on the ISIN. This example uses Tradegate, which is used by many German fintechs. The basic approach should also work for other exchanges, as long as they provide the required data to the public.\n\n### 4\\. HTML Extract\n\nSince our HTTP Request node fetches full websites, we’re using the HTML Extract node to extract the information we’re looking for from each website. If an exchange other than Tradegate is used, the selectors used in this node will most likely need to be updated.\n\n### 5\\. + 6. Set\n\nThe Set nodes helps with setting the exact columns we’ll use in our table. In this case we’re first formatting the results from our exchange, then calculate the changes based on the purchase price.\n\n### 7\\. Function\n\nHere were using a bit of Javascript magic to build an HTML email. This is where any changes to the email content would have to be made.\n\n### 8\\. Sendgrid\n\nFinally we send out the email built in the previous step. This is where you can configure sender and recipients.\n\n# Result\n\nThe basic email generated by this workflow will look like so:\n\n![image.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_87fef2c8dd.png)\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><p>This workflow uses a number of technologies to track the value of ETFs, stocks and other exchange-traded products:</p>\n<ul>\n<li><a href=\"https://baserow.io/\" rel=\"ugc nofollow\" target=\"_blank\">Baserow</a>: To keep track of our investments</li>\n<li>n8n’s Cron node: To trigger the workflow compiling our daily morning briefing</li>\n<li>Webscraping: The HTTP Request &amp; HTML Extract nodes to fetch up-to-date prices from the relevant stock exchange and structure this infromation</li>\n<li>Javascript: We’ll use the Function node to build a custom HTML body with all the relevant information</li>\n<li><a href=\"https://sendgrid.com/\" rel=\"ugc nofollow\" target=\"_blank\">Sendgrid</a>: The Email Service Provider in this workflow to send out our email</li>\n</ul>\n<p>Thanks to n8n, the steps in this workflow can easily be changed. Not a Sendgrid user? Simply remove the Sendgrid node and add a Gmail node instead. The stock exchange has a REST API? Just throw away the HTML Extract node.</p>\n<p>Here’s how it works:</p>\n<h1>Data Source</h1>\n<p>In this scenario, our data source is Baserow. In our table, we’ll track all information needed to identify each investment product:</p>\n<p><img src=\"https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_2fa74ff9be.png\" alt=\"image.png\"></p>\n<p>We have two text type columns (<strong>Name</strong> and <strong>ISIN</strong>) as well as two number type columns (<strong>Count</strong> and <strong>Purchase Price</strong>).</p>\n<h1>Workflow</h1>\n<p><img src=\"https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_db02fbb535.png\" alt=\"image.png\"></p>\n<h2>Nodes</h2>\n<h3>1. Cron</h3>\n<p>The Cron node will trigger our workflow to run each work day in the morning hours.</p>\n<h3>2. Baserow</h3>\n<p>The Baserow node will fetch our investments from the database table shown above.</p>\n<h3>3. HTTP Request</h3>\n<p>Using the HTTP Request node we can fetch live data from the stock exchange of our choice based on the ISIN. This example uses Tradegate, which is used by many German fintechs. The basic approach should also work for other exchanges, as long as they provide the required data to the public.</p>\n<h3>4. HTML Extract</h3>\n<p>Since our HTTP Request node fetches full websites, we’re using the HTML Extract node to extract the information we’re looking for from each website. If an exchange other than Tradegate is used, the selectors used in this node will most likely need to be updated.</p>\n<h3>5. + 6. Set</h3>\n<p>The Set nodes helps with setting the exact columns we’ll use in our table. In this case we’re first formatting the results from our exchange, then calculate the changes based on the purchase price.</p>\n<h3>7. Function</h3>\n<p>Here were using a bit of Javascript magic to build an HTML email. This is where any changes to the email content would have to be made.</p>\n<h3>8. Sendgrid</h3>\n<p>Finally we send out the email built in the previous step. This is where you can configure sender and recipients.</p>\n<h1>Result</h1>\n<p>The basic email generated by this workflow will look like so:</p>\n<p><img src=\"https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_87fef2c8dd.png\" alt=\"image.png\"></p>\n</div><!--]-->",
  "readme_zh": "该工作流运用多项技术追踪ETF、股票等交易所交易产品的价值：\n\n* [Baserow](https://baserow.io/)：记录投资组合\n* n8n定时触发器：每日清晨启动简报生成流程\n* 网络爬虫：通过HTTP请求与HTML解析节点获取交易所实时报价并结构化数据\n* JavaScript：使用函数节点构建包含所有关键信息的自定义HTML邮件正文\n* [Sendgrid](https://sendgrid.com/)：作为邮件服务商发送最终简报\n\n借助n8n，流程步骤可灵活调整：若非Sendgrid用户，替换为Gmail节点即可；若交易所提供REST API，直接移除HTML解析节点。\n\n实现原理如下：\n\n# 数据源\n本案例以Baserow为数据源，表中记录着识别投资产品所需的所有字段：\n![数据表截图](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_2fa74ff9be.png)\n包含两个文本字段（**名称**与**ISIN编码**）和两个数字字段（**持有数量**与**买入价**）。\n\n# 工作流架构\n![流程图](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_db02fbb535.png)\n\n## 节点说明\n### 1. 定时触发器\n每日工作日早晨自动触发工作流。\n\n### 2. Baserow节点\n从上述数据库表中读取投资组合数据。\n\n### 3. HTTP请求节点\n根据ISIN编码向目标交易所（本例采用德国金融科技常用的Tradegate）获取实时数据。该方案同样适用于其他公开数据的交易所。\n\n### 4. HTML解析节点\n从交易所网页中提取目标数据。若使用非Tradegate交易所，需调整本节点的选择器配置。\n\n### 5. & 6. 字段设置节点\n规范数据表字段：先格式化交易所返回结果，再基于买入价计算涨跌幅。\n\n### 7. 函数节点\n通过JavaScript动态生成HTML格式邮件正文，此处可自定义邮件内容。\n\n### 8. Sendgrid节点\n发送前一步生成的邮件，可配置发件人与收件人列表。\n\n# 最终效果\n生成的简报邮件示例如下：\n![邮件截图](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_87fef2c8dd.png)",
  "title_zh": "使用Baserow和n8n追踪投资",
  "publish_date_zh": "最后更新于10个月前",
  "workflow_json_zh": "{\n  \"nodes\": [\n    {\n      \"id\": \"70a44436-4b51-458a-ae93-60edeed170de\",\n      \"name\": \"On clicking 'execute'\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        240,\n        300\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d4c2dfa2-30bb-4f06-96c2-5811472302d2\",\n      \"name\": \"Cron\",\n      \"type\": \"n8n-nodes-base.cron\",\n      \"position\": [\n        240,\n        100\n      ],\n      \"parameters\": {\n        \"triggerTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"custom\",\n              \"cronExpression\": \"15 7 * * 1-6\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"86924546-e4f2-4795-8e80-9e49626d2c42\",\n      \"name\": \"Baserow\",\n      \"type\": \"n8n-nodes-base.baserow\",\n      \"position\": [\n        460,\n        200\n      ],\n      \"parameters\": {\n        \"tableId\": 680,\n        \"databaseId\": 146,\n        \"additionalOptions\": {}\n      },\n      \"credentials\": {\n        \"baserowApi\": {\n          \"id\": \"37\",\n          \"name\": \"Baserow account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"36f2947b-67cf-47eb-891f-e7e3b5ba9eac\",\n      \"name\": \"Fetch tradegate stock page\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        680,\n        200\n      ],\n      \"parameters\": {\n        \"url\": \"https://www.tradegate.de/orderbuch.php\",\n        \"options\": {},\n        \"responseFormat\": \"string\",\n        \"queryParametersUi\": {\n          \"parameter\": [\n            {\n              \"name\": \"isin\",\n              \"value\": \"={{$json[\\\"ISIN\\\"]}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b516e751-d1d1-43a0-8f19-6787a5c56ddc\",\n      \"name\": \"Parse tradegate stock page\",\n      \"type\": \"n8n-nodes-base.htmlExtract\",\n      \"position\": [\n        900,\n        200\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"extractionValues\": {\n          \"values\": [\n            {\n              \"key\": \"WKN\",\n              \"cssSelector\": \"#col1_content > table > tbody > tr:nth-child(2) > td:nth-child(1)\"\n            },\n            {\n              \"key\": \"ISIN\",\n              \"cssSelector\": \"#col1_content > table > tbody > tr:nth-child(2) > td:nth-child(3)\"\n            },\n            {\n              \"key\": \"Currency\",\n              \"cssSelector\": \"#col1_content > table > tbody > tr:nth-child(2) > td:nth-child(4)\"\n            },\n            {\n              \"key\": \"Name\",\n              \"cssSelector\": \"#col1_content > h2\"\n            },\n            {\n              \"key\": \"Bid\",\n              \"cssSelector\": \"#bid\"\n            },\n            {\n              \"key\": \"Ask\",\n              \"cssSelector\": \"#ask\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e51556c7-3f3a-4e4d-96e9-942f436422af\",\n      \"name\": \"Build HTML\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [\n        1560,\n        200\n      ],\n      \"parameters\": {\n        \"functionCode\": \"const columns = Object.keys(items[0].json);\\n\\n// Define the basic table structure\\nlet table_header = `<table style=\\\"border: 1px solid black; border-collapse: collapse;\\\"><tr>${columns.map(e => '<th style=\\\"border: 1px solid black; border-collapse: collapse;\\\">' + e + '</th>').join('')}</tr>`;\\nlet table_content = \\\"\\\";\\nlet table_footer = '</table>';\\n\\n// Add content to our table\\nfor (item of items) {\\n    table_content += '<tr>'\\n    for (column of columns) {\\n        table_content += `<td style=\\\\\\\"border: 1px solid black; border-collapse: collapse;\\\\\\\">${item.json[column]}</td>`\\n    }\\n    table_content += '</tr>'\\n}\\n\\n// Prepare HTML email body\\nconst email_html = `<body style=\\\"font-family: Sans-Serif;\\\">\\n<p>Investments as of ${$now.setZone(\\\"Europe/Dublin\\\").setLocale('ie').toFormat('fff')}:</p>\\n${table_header}\\n${table_content}\\n${table_footer}\\n<p>Total: ${items.map(e => parseFloat(e.json['Current Value'])).reduce((a, b) => a + b, 0).toFixed(2)}</p>\\n<p><small>Workflow #${$workflow.id}</small></p>\\n</body>`\\n\\n\\nreturn [{\\n    json: {\\n        html: email_html\\n    }\\n}];\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"361bf8f2-298c-4b96-9f21-4f4620f1e9a9\",\n      \"name\": \"Format result\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1120,\n        200\n      ],\n      \"parameters\": {\n        \"values\": {\n          \"string\": [\n            {\n              \"name\": \"Name\",\n              \"value\": \"={{ $node[\\\"Baserow\\\"].json[\\\"Name\\\"] }}\"\n            },\n            {\n              \"name\": \"ISIN\",\n              \"value\": \"={{ $node[\\\"Baserow\\\"].json[\\\"ISIN\\\"] }}\"\n            },\n            {\n              \"name\": \"Count\",\n              \"value\": \"={{ $node[\\\"Baserow\\\"].json[\\\"Count\\\"] }}\"\n            },\n            {\n              \"name\": \"Purchase Price\",\n              \"value\": \"={{ $node[\\\"Baserow\\\"].json[\\\"Purchase Price\\\"] }}\"\n            },\n            {\n              \"name\": \"Current Value\",\n              \"value\": \"={{ (parseFloat($json[\\\"Bid\\\"].replace(',', '.')) * parseFloat($node[\\\"Baserow\\\"].json[\\\"Count\\\"])).toFixed(2) }}\"\n            }\n          ]\n        },\n        \"options\": {},\n        \"keepOnlySet\": true\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c2f329dc-3b97-402a-9d63-ed863c2aee84\",\n      \"name\": \"Calculate change\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        1340,\n        200\n      ],\n      \"parameters\": {\n        \"values\": {\n          \"string\": [\n            {\n              \"name\": \"Change\",\n              \"value\": \"={{ ( parseFloat($json[\\\"Current Value\\\"]) - parseFloat($json[\\\"Purchase Price\\\"]) ).toFixed(2) }}\"\n            },\n            {\n              \"name\": \"Change (%)\",\n              \"value\": \"={{ ( ( ( parseFloat($json[\\\"Current Value\\\"]) - parseFloat($json[\\\"Purchase Price\\\"]) ) / parseFloat($json[\\\"Purchase Price\\\"]) ) * 100).toFixed(2) }}\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e0876374-c9f3-4253-8764-9aa78faa2193\",\n      \"name\": \"SendGrid\",\n      \"type\": \"n8n-nodes-base.sendGrid\",\n      \"position\": [\n        1780,\n        200\n      ],\n      \"parameters\": {\n        \"subject\": \"Investment report\",\n        \"toEmail\": \"mutedjam@n8n.io\",\n        \"resource\": \"mail\",\n        \"fromEmail\": \"mutedjam@n8n.io\",\n        \"contentType\": \"text/html\",\n        \"contentValue\": \"={{ $json[\\\"html\\\"] }}\",\n        \"additionalFields\": {}\n      },\n      \"credentials\": {\n        \"sendGridApi\": {\n          \"id\": \"143\",\n          \"name\": \"SendGrid account\"\n        }\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"connections\": {\n    \"Cron\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Baserow\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Baserow\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Fetch tradegate stock page\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Build HTML\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SendGrid\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Format result\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Calculate change\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Calculate change\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Build HTML\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"On clicking 'execute'\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Baserow\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Fetch tradegate stock page\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parse tradegate stock page\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Parse tradegate stock page\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Format result\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}