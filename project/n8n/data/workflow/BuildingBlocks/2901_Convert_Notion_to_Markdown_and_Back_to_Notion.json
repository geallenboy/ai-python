{
  "title": "Convert Notion to Markdown and Back to Notion",
  "url": "https://n8n.io/workflows/2901-convert-notion-to-markdown-and-back-to-notion/",
  "category": "BuildingBlocks",
  "category_url": "https://n8n.io/workflows/categories/building-blocks/?sort=createdAt:desc",
  "author": "Anton Vanhoucke",
  "publish_date": "Last update 2 months ago",
  "publish_date_absolute": "2025-03-06",
  "content": "",
  "workflow_json": "{\"meta\":{\"instanceId\":\"ce110ceecbd52a55e2f86f58f176c40bfe61a2a2c6b384a681009bc6b9ef0dd4\",\"templateCredsSetupCompleted\":true},\"nodes\":[{\"id\":\"dd049dd7-3f85-4c36-a4ec-d5df856fed14\",\"name\":\"Notion Trigger\",\"type\":\"n8n-nodes-base.notionTrigger\",\"position\":[-100,360],\"parameters\":{\"event\":\"pagedUpdatedInDatabase\",\"pollTimes\":{\"item\":[{\"mode\":\"everyMinute\"}]},\"databaseId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"f50f830b-cadd-4d9c-9a38-bb22e284193e\",\"cachedResultUrl\":\"https://www.notion.so/f50f830bcadd4d9c9a38bb22e284193e\",\"cachedResultName\":\"Journal\"}},\"credentials\":{\"notionApi\":{\"id\":\"C26NOhx95lnHIdzV\",\"name\":\"Notion account\"}},\"typeVersion\":1},{\"id\":\"4bedb493-7a17-4d3f-8b00-93d7134e74ca\",\"name\":\"Notion\",\"type\":\"n8n-nodes-base.notion\",\"position\":[320,220],\"parameters\":{\"blockId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $json.id }}\"},\"resource\":\"block\",\"operation\":\"getAll\",\"returnAll\":true},\"credentials\":{\"notionApi\":{\"id\":\"C26NOhx95lnHIdzV\",\"name\":\"Notion account\"}},\"typeVersion\":2.2},{\"id\":\"8994422e-8b71-4638-be36-d105557a20d8\",\"name\":\"Notion Node Blocks to Md\",\"type\":\"n8n-nodes-base.code\",\"position\":[760,220],\"parameters\":{\"jsCode\":\"function notionToMarkdown(blocks) {\\n  return blocks\\n    .map(block => {\\n      if (!block.json.content) return \\\"\\\"; // Skip empty content\\n      \\n      switch (block.json.type) {\\n        case \\\"heading_1\\\":\\n          return `# ${block.json.content}`;\\n        case \\\"heading_2\\\":\\n          return `## ${block.json.content}`;\\n        case \\\"heading_3\\\":\\n          return `### ${block.json.content}`;\\n        case \\\"bulleted_list_item\\\":\\n          return `- ${block.json.content}`;\\n        case \\\"to_do\\\":\\n          return `- [ ] ${block.json.content}`;\\n        case \\\"paragraph\\\":\\n          return `${block.json.content}`;\\n        default:\\n          return \\\"\\\"; // Ignore unsupported types\\n      }\\n    })\\n    .filter(line => line.trim() !== \\\"\\\") // Remove empty lines\\n    .join(\\\"\\\\n\\\\n\\\"); // Ensure proper spacing\\n}\\nconsole.log($input.all())\\nreturn [ {\\\"md\\\": notionToMarkdown($input.all())} ]\"},\"typeVersion\":2},{\"id\":\"4321475e-3eac-4aea-bcd6-11d764af0f02\",\"name\":\"Split Out\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[560,540],\"parameters\":{\"options\":{},\"fieldToSplitOut\":\"results\"},\"typeVersion\":1},{\"id\":\"b0f9b62c-009e-4d00-9d5d-5e1ea3f1314b\",\"name\":\"Full Notion Blocks to Md\",\"type\":\"n8n-nodes-base.code\",\"position\":[760,540],\"parameters\":{\"jsCode\":\"function jsonToMarkdown(blocks) {\\n    let markdown = \\\"\\\";\\n\\n    function parseRichText(richTextArray) {\\n        return richTextArray.map(text => {\\n            let content = text.text.content;\\n            if (text.annotations.bold) content = `**${content}**`;\\n            if (text.annotations.italic) content = `*${content}*`;\\n            if (text.annotations.strikethrough) content = `~~${content}~~`;\\n            if (text.annotations.underline) content = `_${content}_`;\\n            if (text.annotations.code) content = `\\\\`${content}\\\\``;\\n            if (text.text.link) content = `[${content}](${text.text.link.url})`;\\n            return content;\\n        }).join(\\\"\\\");\\n    }\\n\\n    blocks.forEach(block => {\\n        switch (block.json.type) {\\n            case \\\"heading_1\\\":\\n                markdown += `\\\\n# ${parseRichText(block.json.heading_1.rich_text)}\\\\n`;\\n                break;\\n            case \\\"heading_2\\\":\\n                markdown += `\\\\n## ${parseRichText(block.json.heading_2.rich_text)}\\\\n`;\\n                break;\\n            case \\\"heading_3\\\":\\n                markdown += `\\\\n### ${parseRichText(block.json.heading_3.rich_text)}\\\\n`;\\n                break;\\n            case \\\"paragraph\\\":\\n                markdown += `\\\\n${parseRichText(block.json.paragraph.rich_text)}\\\\n`;\\n                break;\\n            case \\\"bulleted_list_item\\\":\\n                markdown += `- ${parseRichText(block.json.bulleted_list_item.rich_text)}\\\\n`;\\n                break;\\n            case \\\"numbered_list_item\\\":\\n                markdown += `1. ${parseRichText(block.json.numbered_list_item.rich_text)}\\\\n`;\\n                break;\\n            case \\\"to_do\\\":\\n                let checked = block.json.to_do.checked ? \\\"[x]\\\" : \\\"[ ]\\\";\\n                markdown += `- ${checked} ${parseRichText(block.json.to_do.rich_text)}\\\\n`;\\n                break;\\n            case \\\"quote\\\":\\n                markdown += `\\\\n> ${parseRichText(block.json.quote.rich_text)}\\\\n`;\\n                break;\\n            case \\\"code\\\":\\n                markdown += `\\\\n\\\\\\n\\\\`${block.code.language}\\\\`\\\\n\\\\\\n${parseRichText(block.json.code.rich_text)}\\\\n\\\\\\n\\\\n`;\\n                break;\\n            case \\\"unsupported\\\":\\n                break;\\n        }\\n    });\\n\\n    return markdown.trim();\\n}\\n\\nreturn [ { \\\"md\\\": jsonToMarkdown($input.all()) }];\\n\\n\"},\"typeVersion\":2},{\"id\":\"b3224aea-ca82-4e11-9e7f-df062f20512d\",\"name\":\"Md to Notion Blocks v3\",\"type\":\"n8n-nodes-base.code\",\"position\":[1100,340],\"parameters\":{\"mode\":\"runOnceForEachItem\",\"jsCode\":\"function markdownToNotionBlocks(markdown) {\\n    const lines = markdown.split('\\\\n');\\n    const blocks = [];\\n    let currentList = null;\\n    \\n    function parseRichText(text) {\\n        const richText = [];\\n        const regex = /(\\\\*\\\\*|__)(.*?)\\\\1|(_|\\\\*)(.*?)\\\\3|(`)(.*?)\\\\5|(\\\\[)(.*?)\\\\]\\\\((.*?)\\\\)/g;\\n        let lastIndex = 0;\\n        \\n        text.replace(regex, (match, bold1, boldText, italic1, italicText, code1, codeText, link1, linkText, linkUrl, index) => {\\n            if (index > lastIndex) {\\n                richText.push({ text: { content: text.slice(lastIndex, index) } });\\n            }\\n            \\n            if (boldText) {\\n                richText.push({ text: { content: boldText }, annotations: { bold: true } });\\n            } else if (italicText) {\\n                richText.push({ text: { content: italicText }, annotations: { italic: true } });\\n            } else if (codeText) {\\n                richText.push({ text: { content: codeText }, annotations: { code: true } });\\n            } else if (linkText) {\\n                richText.push({ text: { content: linkText, link: { url: linkUrl } } });\\n            }\\n            \\n            lastIndex = index + match.length;\\n        });\\n        \\n        if (lastIndex < text.length) {\\n            richText.push({ text: { content: text.slice(lastIndex) } });\\n        }\\n        \\n        return richText.length > 0 ? richText : [{ text: { content: text } }];\\n    }\\n    \\n    for (const line of lines) {\\n        if (line.startsWith('# ')) {\\n            blocks.push({ type: 'heading_1', heading_1: { rich_text: parseRichText(line.slice(2)) } });\\n        } else if (line.startsWith('## ')) {\\n            blocks.push({ type: 'heading_2', heading_2: { rich_text: parseRichText(line.slice(3)) } });\\n        } else if (line.startsWith('### ')) {\\n            blocks.push({ type: 'heading_3', heading_3: { rich_text: parseRichText(line.slice(4)) } });\\n        } else if (line.startsWith('- ')) {\\n            if (!currentList) {\\n                currentList = { type: 'bulleted_list_item', bulleted_list_item: { rich_text: parseRichText(line.slice(2)) } };\\n                blocks.push(currentList);\\n            } else {\\n                blocks.push({ type: 'bulleted_list_item', bulleted_list_item: { rich_text: parseRichText(line.slice(2)) } });\\n            }\\n        } else if (line.startsWith('> ')) {\\n            blocks.push({ type: 'quote', quote: { rich_text: parseRichText(line.slice(2)) } });\\n        } else if (line.startsWith('```')) {\\n            const codeLines = [];\\n            while (lines.length && !lines[0].startsWith('```')) {\\n                codeLines.push(lines.shift());\\n            }\\n            blocks.push({ type: 'code', code: { rich_text: [{ text: { content: codeLines.join('\\\\n') } }] } });\\n        } else if (line.trim()) {\\n            blocks.push({ type: 'paragraph', paragraph: { rich_text: parseRichText(line) } });\\n        }\\n    }\\n    \\n    return blocks;\\n}\\n\\n\\nreturn { \\\"blocks\\\" : markdownToNotionBlocks($json.md)};\"},\"typeVersion\":2},{\"id\":\"1af23a39-132a-45c5-8e71-090d0c4cf7df\",\"name\":\"Add blocks as Children\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1340,340],\"parameters\":{\"url\":\"=https://api.notion.com/v1/blocks/{{ $('Notion Trigger').first().json.id }}/children\",\"method\":\"PATCH\",\"options\":{},\"jsonBody\":\"={\\n  \\\"children\\\": {{ $json.blocks.toJsonString() }}\\n} \",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"notionApi\"},\"credentials\":{\"notionApi\":{\"id\":\"C26NOhx95lnHIdzV\",\"name\":\"Notion account\"}},\"typeVersion\":4.2},{\"id\":\"89883f62-11f6-49ff-bbcf-f9e45399e73e\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[280,100],\"parameters\":{\"width\":640,\"height\":300,\"content\":\"## Either use the official Notion getAll: Blocks node\\nThis removes formatting like bold and links. \"},\"typeVersion\":1},{\"id\":\"c3c10d91-1380-4525-a1d7-0fc9c8218f2b\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[280,440],\"parameters\":{\"width\":640,\"height\":260,\"content\":\"## ... or get block rich text data\\nwith custom HTTP request.\"},\"typeVersion\":1},{\"id\":\"7be73933-e515-4273-adeb-59832313bbf3\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-180,220],\"parameters\":{\"width\":340,\"height\":340,\"content\":\"## Configure a notion connection.\"},\"typeVersion\":1},{\"id\":\"55e20cdd-d567-4f67-96bf-15db71a92060\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1040,200],\"parameters\":{\"height\":320,\"content\":\"## This will triple the content by way of demo.\"},\"typeVersion\":1},{\"id\":\"bc62cd3b-cc4b-4e4d-b617-e4012494a03b\",\"name\":\"Get Child blocks\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[340,540],\"parameters\":{\"url\":\"=https://api.notion.com/v1/blocks/{{ $json.id }}/children\",\"options\":{},\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"notionApi\"},\"credentials\":{\"notionApi\":{\"id\":\"C26NOhx95lnHIdzV\",\"name\":\"Notion account\"}},\"typeVersion\":4.2}],\"pinData\":{},\"connections\":{\"Notion\":{\"main\":[[{\"node\":\"Notion Node Blocks to Md\",\"type\":\"main\",\"index\":0}]]},\"Split Out\":{\"main\":[[{\"node\":\"Full Notion Blocks to Md\",\"type\":\"main\",\"index\":0}]]},\"Notion Trigger\":{\"main\":[[{\"node\":\"Notion\",\"type\":\"main\",\"index\":0},{\"node\":\"Get Child blocks\",\"type\":\"main\",\"index\":0}]]},\"Get Child blocks\":{\"main\":[[{\"node\":\"Split Out\",\"type\":\"main\",\"index\":0}]]},\"Md to Notion Blocks v3\":{\"main\":[[{\"node\":\"Add blocks as Children\",\"type\":\"main\",\"index\":0}]]},\"Full Notion Blocks to Md\":{\"main\":[[{\"node\":\"Md to Notion Blocks v3\",\"type\":\"main\",\"index\":0}]]},\"Notion Node Blocks to Md\":{\"main\":[[{\"node\":\"Md to Notion Blocks v3\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This workflow converts Notion pages to markdown, and then converts that markdown back to Notion blocks. It will triple the content of the last updated page it finds. This is useless by itself, but you can copy-paste from this workflow to create your own.\n\n## Prerequisites\n\nA notion account with some pages or databases\n\n## Setup instructions\n\nCreate a notion credential and share some pages as described here: <https://docs.n8n.io/integrations/builtin/credentials/notion/>\n\n## How it works\n\n  * The HTTP Request gets notion child blocks from a page, because the default n8n block only gets plain text and no links.\n  * The first code block converts it to markdown.\n  * The second code block converts it back to Notion blocks\n  * The last HTTP block appends everything to the original Notion page, essentially duplicating it for the purpose of demoing the script.\n\n\n\nI hope in the future we get official n8n blocks that extract markdown, or use markdown to write to Notion. There is community block that also does this, but this template is easier: you can simply copy-paste the blocks from this workflow.\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><p>This workflow converts Notion pages to markdown, and then converts that markdown back to Notion blocks. It will triple the content of the last updated page it finds. This is useless by itself, but you can copy-paste from this workflow to create your own.</p>\n<h2>Prerequisites</h2>\n<p>A notion account with some pages or databases</p>\n<h2>Setup instructions</h2>\n<p>Create a notion credential and share some pages as described here: <a href=\"https://docs.n8n.io/integrations/builtin/credentials/notion/\" rel=\"ugc nofollow\" target=\"_blank\">https://docs.n8n.io/integrations/builtin/credentials/notion/</a></p>\n<h2>How it works</h2>\n<ul>\n<li>The HTTP Request gets notion child blocks from a page, because the default n8n block only gets plain text and no links.</li>\n<li>The first code block converts it to markdown.</li>\n<li>The second code block converts it back to Notion blocks</li>\n<li>The last HTTP block appends everything to the original Notion page, essentially duplicating it for the purpose of demoing the script.</li>\n</ul>\n<p>I hope in the future we get official n8n blocks that extract markdown, or use markdown to write to Notion. There is community block that also does this, but this template is easier: you can simply copy-paste the blocks from this workflow.</p>\n</div><!--]-->",
  "readme_zh": "此工作流程将Notion页面转换为Markdown格式，随后再将Markdown重新转换为Notion块结构。它会将查找到的最后更新页面的内容复制为三倍。虽然单独使用并无实际意义，但您可以通过复制粘贴此工作流中的模块来创建自定义流程。\n\n## 前提条件\n- 拥有含页面或数据库的Notion账户\n\n## 设置说明\n按照<https://docs.n8n.io/integrations/builtin/credentials/notion/>指南创建Notion凭证并共享页面\n\n## 运行原理\n* HTTP请求模块从页面获取Notion子块（因默认n8n模块仅能获取纯文本且不含链接）\n* 首个代码块将内容转换为Markdown格式\n* 第二个代码块将其转换回Notion块结构\n* 最后的HTTP模块将所有内容追加至原Notion页面，本质上实现内容复制以演示脚本功能\n\n期待未来n8n能推出官方模块实现Markdown提取或写入功能。现有社区模块虽可实现，但本模板更便捷：您只需直接复制此工作流中的模块即可使用。",
  "title_zh": "将Notion转换为Markdown并重新导入Notion",
  "publish_date_zh": "最后更新于2个月前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"ce110ceecbd52a55e2f86f58f176c40bfe61a2a2c6b384a681009bc6b9ef0dd4\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"nodes\": [\n    {\n      \"id\": \"dd049dd7-3f85-4c36-a4ec-d5df856fed14\",\n      \"name\": \"Notion Trigger\",\n      \"type\": \"n8n-nodes-base.notionTrigger\",\n      \"position\": [\n        -100,\n        360\n      ],\n      \"parameters\": {\n        \"event\": \"pagedUpdatedInDatabase\",\n        \"pollTimes\": {\n          \"item\": [\n            {\n              \"mode\": \"everyMinute\"\n            }\n          ]\n        },\n        \"databaseId\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"f50f830b-cadd-4d9c-9a38-bb22e284193e\",\n          \"cachedResultUrl\": \"https://www.notion.so/f50f830bcadd4d9c9a38bb22e284193e\",\n          \"cachedResultName\": \"Journal\"\n        }\n      },\n      \"credentials\": {\n        \"notionApi\": {\n          \"id\": \"C26NOhx95lnHIdzV\",\n          \"name\": \"Notion account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4bedb493-7a17-4d3f-8b00-93d7134e74ca\",\n      \"name\": \"Notion\",\n      \"type\": \"n8n-nodes-base.notion\",\n      \"position\": [\n        320,\n        220\n      ],\n      \"parameters\": {\n        \"blockId\": {\n          \"__rl\": true,\n          \"mode\": \"id\",\n          \"value\": \"={{ $json.id }}\"\n        },\n        \"resource\": \"block\",\n        \"operation\": \"getAll\",\n        \"returnAll\": true\n      },\n      \"credentials\": {\n        \"notionApi\": {\n          \"id\": \"C26NOhx95lnHIdzV\",\n          \"name\": \"Notion account\"\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"8994422e-8b71-4638-be36-d105557a20d8\",\n      \"name\": \"Notion Node Blocks to Md\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        760,\n        220\n      ],\n      \"parameters\": {\n        \"jsCode\": \"function notionToMarkdown(blocks) {\\n  return blocks\\n    .map(block => {\\n      if (!block.json.content) return \\\"\\\"; // Skip empty content\\n      \\n      switch (block.json.type) {\\n        case \\\"heading_1\\\":\\n          return `# ${block.json.content}`;\\n        case \\\"heading_2\\\":\\n          return `## ${block.json.content}`;\\n        case \\\"heading_3\\\":\\n          return `### ${block.json.content}`;\\n        case \\\"bulleted_list_item\\\":\\n          return `- ${block.json.content}`;\\n        case \\\"to_do\\\":\\n          return `- [ ] ${block.json.content}`;\\n        case \\\"paragraph\\\":\\n          return `${block.json.content}`;\\n        default:\\n          return \\\"\\\"; // Ignore unsupported types\\n      }\\n    })\\n    .filter(line => line.trim() !== \\\"\\\") // Remove empty lines\\n    .join(\\\"\\\\n\\\\n\\\"); // Ensure proper spacing\\n}\\nconsole.log($input.all())\\nreturn [ {\\\"md\\\": notionToMarkdown($input.all())} ]\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"4321475e-3eac-4aea-bcd6-11d764af0f02\",\n      \"name\": \"Split Out\",\n      \"type\": \"n8n-nodes-base.splitOut\",\n      \"position\": [\n        560,\n        540\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldToSplitOut\": \"results\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b0f9b62c-009e-4d00-9d5d-5e1ea3f1314b\",\n      \"name\": \"Full Notion Blocks to Md\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        760,\n        540\n      ],\n      \"parameters\": {\n        \"jsCode\": \"function jsonToMarkdown(blocks) {\\n    let markdown = \\\"\\\";\\n\\n    function parseRichText(richTextArray) {\\n        return richTextArray.map(text => {\\n            let content = text.text.content;\\n            if (text.annotations.bold) content = `**${content}**`;\\n            if (text.annotations.italic) content = `*${content}*`;\\n            if (text.annotations.strikethrough) content = `~~${content}~~`;\\n            if (text.annotations.underline) content = `_${content}_`;\\n            if (text.annotations.code) content = `\\\\`${content}\\\\``;\\n            if (text.text.link) content = `[${content}](${text.text.link.url})`;\\n            return content;\\n        }).join(\\\"\\\");\\n    }\\n\\n    blocks.forEach(block => {\\n        switch (block.json.type) {\\n            case \\\"heading_1\\\":\\n                markdown += `\\\\n# ${parseRichText(block.json.heading_1.rich_text)}\\\\n`;\\n                break;\\n            case \\\"heading_2\\\":\\n                markdown += `\\\\n## ${parseRichText(block.json.heading_2.rich_text)}\\\\n`;\\n                break;\\n            case \\\"heading_3\\\":\\n                markdown += `\\\\n### ${parseRichText(block.json.heading_3.rich_text)}\\\\n`;\\n                break;\\n            case \\\"paragraph\\\":\\n                markdown += `\\\\n${parseRichText(block.json.paragraph.rich_text)}\\\\n`;\\n                break;\\n            case \\\"bulleted_list_item\\\":\\n                markdown += `- ${parseRichText(block.json.bulleted_list_item.rich_text)}\\\\n`;\\n                break;\\n            case \\\"numbered_list_item\\\":\\n                markdown += `1. ${parseRichText(block.json.numbered_list_item.rich_text)}\\\\n`;\\n                break;\\n            case \\\"to_do\\\":\\n                let checked = block.json.to_do.checked ? \\\"[x]\\\" : \\\"[ ]\\\";\\n                markdown += `- ${checked} ${parseRichText(block.json.to_do.rich_text)}\\\\n`;\\n                break;\\n            case \\\"quote\\\":\\n                markdown += `\\\\n> ${parseRichText(block.json.quote.rich_text)}\\\\n`;\\n                break;\\n            case \\\"code\\\":\\n                markdown += `\\\\n\\\\\\n\\\\`${block.code.language}\\\\`\\\\n\\\\\\n${parseRichText(block.json.code.rich_text)}\\\\n\\\\\\n\\\\n`;\\n                break;\\n            case \\\"unsupported\\\":\\n                break;\\n        }\\n    });\\n\\n    return markdown.trim();\\n}\\n\\nreturn [ { \\\"md\\\": jsonToMarkdown($input.all()) }];\\n\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"b3224aea-ca82-4e11-9e7f-df062f20512d\",\n      \"name\": \"Md to Notion Blocks v3\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        1100,\n        340\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"function markdownToNotionBlocks(markdown) {\\n    const lines = markdown.split('\\\\n');\\n    const blocks = [];\\n    let currentList = null;\\n    \\n    function parseRichText(text) {\\n        const richText = [];\\n        const regex = /(\\\\*\\\\*|__)(.*?)\\\\1|(_|\\\\*)(.*?)\\\\3|(`)(.*?)\\\\5|(\\\\[)(.*?)\\\\]\\\\((.*?)\\\\)/g;\\n        let lastIndex = 0;\\n        \\n        text.replace(regex, (match, bold1, boldText, italic1, italicText, code1, codeText, link1, linkText, linkUrl, index) => {\\n            if (index > lastIndex) {\\n                richText.push({ text: { content: text.slice(lastIndex, index) } });\\n            }\\n            \\n            if (boldText) {\\n                richText.push({ text: { content: boldText }, annotations: { bold: true } });\\n            } else if (italicText) {\\n                richText.push({ text: { content: italicText }, annotations: { italic: true } });\\n            } else if (codeText) {\\n                richText.push({ text: { content: codeText }, annotations: { code: true } });\\n            } else if (linkText) {\\n                richText.push({ text: { content: linkText, link: { url: linkUrl } } });\\n            }\\n            \\n            lastIndex = index + match.length;\\n        });\\n        \\n        if (lastIndex < text.length) {\\n            richText.push({ text: { content: text.slice(lastIndex) } });\\n        }\\n        \\n        return richText.length > 0 ? richText : [{ text: { content: text } }];\\n    }\\n    \\n    for (const line of lines) {\\n        if (line.startsWith('# ')) {\\n            blocks.push({ type: 'heading_1', heading_1: { rich_text: parseRichText(line.slice(2)) } });\\n        } else if (line.startsWith('## ')) {\\n            blocks.push({ type: 'heading_2', heading_2: { rich_text: parseRichText(line.slice(3)) } });\\n        } else if (line.startsWith('### ')) {\\n            blocks.push({ type: 'heading_3', heading_3: { rich_text: parseRichText(line.slice(4)) } });\\n        } else if (line.startsWith('- ')) {\\n            if (!currentList) {\\n                currentList = { type: 'bulleted_list_item', bulleted_list_item: { rich_text: parseRichText(line.slice(2)) } };\\n                blocks.push(currentList);\\n            } else {\\n                blocks.push({ type: 'bulleted_list_item', bulleted_list_item: { rich_text: parseRichText(line.slice(2)) } });\\n            }\\n        } else if (line.startsWith('> ')) {\\n            blocks.push({ type: 'quote', quote: { rich_text: parseRichText(line.slice(2)) } });\\n        } else if (line.startsWith('```')) {\\n            const codeLines = [];\\n            while (lines.length && !lines[0].startsWith('```')) {\\n                codeLines.push(lines.shift());\\n            }\\n            blocks.push({ type: 'code', code: { rich_text: [{ text: { content: codeLines.join('\\\\n') } }] } });\\n        } else if (line.trim()) {\\n            blocks.push({ type: 'paragraph', paragraph: { rich_text: parseRichText(line) } });\\n        }\\n    }\\n    \\n    return blocks;\\n}\\n\\n\\nreturn { \\\"blocks\\\" : markdownToNotionBlocks($json.md)};\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"1af23a39-132a-45c5-8e71-090d0c4cf7df\",\n      \"name\": \"Add blocks as Children\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        1340,\n        340\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.notion.com/v1/blocks/{{ $('Notion Trigger').first().json.id }}/children\",\n        \"method\": \"PATCH\",\n        \"options\": {},\n        \"jsonBody\": \"={\\n  \\\"children\\\": {{ $json.blocks.toJsonString() }}\\n} \",\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"notionApi\"\n      },\n      \"credentials\": {\n        \"notionApi\": {\n          \"id\": \"C26NOhx95lnHIdzV\",\n          \"name\": \"Notion account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"89883f62-11f6-49ff-bbcf-f9e45399e73e\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        280,\n        100\n      ],\n      \"parameters\": {\n        \"width\": 640,\n        \"height\": 300,\n        \"content\": \"## 要么使用官方的Notion getAll: Blocks节点\\n这会移除加粗和链接等格式。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"c3c10d91-1380-4525-a1d7-0fc9c8218f2b\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        280,\n        440\n      ],\n      \"parameters\": {\n        \"width\": 640,\n        \"height\": 260,\n        \"content\": \"## ...或通过自定义HTTP请求获取富文本块数据\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"7be73933-e515-4273-adeb-59832313bbf3\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -180,\n        220\n      ],\n      \"parameters\": {\n        \"width\": 340,\n        \"height\": 340,\n        \"content\": \"## 配置Notion连接\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"55e20cdd-d567-4f67-96bf-15db71a92060\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1040,\n        200\n      ],\n      \"parameters\": {\n        \"height\": 320,\n        \"content\": \"## 这将通过演示使内容增加两倍。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"bc62cd3b-cc4b-4e4d-b617-e4012494a03b\",\n      \"name\": \"Get Child blocks\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        340,\n        540\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.notion.com/v1/blocks/{{ $json.id }}/children\",\n        \"options\": {},\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"notionApi\"\n      },\n      \"credentials\": {\n        \"notionApi\": {\n          \"id\": \"C26NOhx95lnHIdzV\",\n          \"name\": \"Notion account\"\n        }\n      },\n      \"typeVersion\": 4.2\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Notion\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Notion Node Blocks to Md\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split Out\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Full Notion Blocks to Md\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Notion Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Notion\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Get Child blocks\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Child blocks\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split Out\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Md to Notion Blocks v3\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Add blocks as Children\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Full Notion Blocks to Md\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Md to Notion Blocks v3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Notion Node Blocks to Md\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Md to Notion Blocks v3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}