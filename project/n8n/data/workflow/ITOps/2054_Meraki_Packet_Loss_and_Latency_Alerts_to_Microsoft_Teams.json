{
  "title": "Meraki Packet Loss and Latency Alerts to Microsoft Teams",
  "url": "https://n8n.io/workflows/2054-meraki-packet-loss-and-latency-alerts-to-microsoft-teams/",
  "category": "ITOps",
  "category_url": "https://n8n.io/workflows/categories/it-ops/?sort=createdAt:desc",
  "author": "Gavin",
  "publish_date": "Last update a year ago",
  "publish_date_absolute": "",
  "content": "",
  "workflow_json": "{\"meta\":{\"instanceId\":\"257476b1ef58bf3cb6a46e65fac7ee34a53a5e1a8492d5c6e4da5f87c9b82833\",\"templateId\":\"2054\"},\"nodes\":[{\"id\":\"3b18d784-eded-4b74-ac44-b25565049e13\",\"name\":\"When clicking \\\"Execute Workflow\\\"\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[380,400],\"parameters\":{},\"typeVersion\":1},{\"id\":\"96eadd32-17c2-44b0-a00b-8e2ddcecaafa\",\"name\":\"Get Meraki Organizations\",\"type\":\"n8n-nodes-base.httpRequest\",\"notes\":\"This node uses an API call to Meraki using the URL https://api.meraki.com/api/v1/organizations\\n\\nthe Authorization header is what is used to authenticate. You also have to set it to accept json\",\"position\":[620,320],\"parameters\":{\"url\":\"https://api.meraki.com/api/v1/organizations\",\"options\":{\"redirect\":{\"redirect\":{}}},\"sendHeaders\":true,\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\",\"headerParameters\":{\"parameters\":[{\"name\":\"Accept\",\"value\":\"application/json\"}]}},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"12\",\"name\":\"Header Auth account\"}},\"typeVersion\":4.1},{\"id\":\"444071ea-a364-45a6-9430-0338d2752b18\",\"name\":\"Get Network IDs\",\"type\":\"n8n-nodes-base.httpRequest\",\"notes\":\"This node uses a URL with an expression in the middle to do an API call for each ORG ID that was pulled to pull all the network's for each org\",\"position\":[1020,240],\"parameters\":{\"url\":\"=https://api.meraki.com/api/v1/organizations/{{ $json.OrgID }}/networks  \",\"options\":{\"redirect\":{\"redirect\":{}}},\"sendHeaders\":true,\"headerParameters\":{\"parameters\":[{\"name\":\"Authorization\"},{\"name\":\"Accept\",\"value\":\"application/json\"}]}},\"typeVersion\":4.1},{\"id\":\"42deea02-e2d2-4ba6-97f7-698c219715a5\",\"name\":\"Get Org Name & ID\",\"type\":\"n8n-nodes-base.set\",\"notes\":\"This takes the output data from the previous node and changes the variables to better suit what we'll be using. \",\"position\":[840,240],\"parameters\":{\"fields\":{\"values\":[{\"name\":\"CompanyName\",\"stringValue\":\"={{ $json.name }}\"},{\"name\":\"OrgID\",\"stringValue\":\"={{ $json.id }}\"}]},\"include\":\"selected\",\"options\":{}},\"typeVersion\":3.2},{\"id\":\"3d5ce6a8-bf05-4457-88e6-c5ad5a995b1d\",\"name\":\"Combine latency to its respective Network\",\"type\":\"n8n-nodes-base.merge\",\"notes\":\"This node matches on the NetworkID field, so that the networks we pulled earlier and the Loss / Latency can be combined into one dataset\",\"position\":[1500,400],\"parameters\":{\"mode\":\"combine\",\"options\":{},\"joinMode\":\"enrichInput1\",\"mergeByFields\":{\"values\":[{\"field1\":\"NetworkID\",\"field2\":\"networkId\"}]}},\"notesInFlow\":false,\"typeVersion\":2.1},{\"id\":\"caafd6dd-a2b2-405d-a078-cea3bb615788\",\"name\":\"Makes Latency and Loss Filterable\",\"type\":\"n8n-nodes-base.set\",\"notes\":\"Like before, This takes the output data from the previous node and changes the variables to better suit what we'll be using. \",\"position\":[1680,400],\"parameters\":{\"fields\":{\"values\":[{\"name\":\"networkId\",\"stringValue\":\"={{ $json.networkId }}\"},{\"name\":\"NetworkName\",\"stringValue\":\"={{ $json.NetworkName }}\"},{\"name\":\"networkURL\",\"stringValue\":\"={{ $json.networkURL }}\"},{\"name\":\"Serial\",\"stringValue\":\"={{ $json.serial }}\"},{\"name\":\"TS0-Loss\",\"stringValue\":\"={{ $json.timeSeries[0].lossPercent }}\"},{\"name\":\"TS1-Loss\",\"stringValue\":\"={{ $json.timeSeries[1].lossPercent }}\"},{\"name\":\"TS2-Loss\",\"stringValue\":\"={{ $json.timeSeries[2].lossPercent }}\"},{\"name\":\"TS3-Loss\",\"stringValue\":\"={{ $json.timeSeries[3].lossPercent }}\"},{\"name\":\"TS4-Loss\",\"stringValue\":\"={{ $json.timeSeries[4].lossPercent }}\"},{\"name\":\"TS0-Latency\",\"stringValue\":\"={{ $json.timeSeries[0].latencyMs }}\"},{\"name\":\"TS1-Latency\",\"stringValue\":\"={{ $json.timeSeries[1].latencyMs }}\"},{\"name\":\"TS2-Latency\",\"stringValue\":\"={{ $json.timeSeries[2].latencyMs }}\"},{\"name\":\"TS3-Latency\",\"stringValue\":\"={{ $json.timeSeries[3].latencyMs }}\"},{\"name\":\"TS4-Latency\",\"stringValue\":\"={{ $json.timeSeries[4].latencyMs }}\"}]},\"include\":\"selected\",\"options\":{}},\"typeVersion\":3.2},{\"id\":\"c695fd89-c884-4794-b0e5-51b91a71ac5c\",\"name\":\"Filters Problematic sites\",\"type\":\"n8n-nodes-base.code\",\"notes\":\"This node uses JavaScript to look at the calculated averages and if they pass the threshold for 300ms Latency or 2% Loss it will pass that site info forward\",\"position\":[2040,400],\"parameters\":{\"jsCode\":\"// Function to filter items based on averageLatency and averageLoss\\nfunction filterItems(items) {\\n  return items.filter(item =>\\n    item.AverageLatency >300 || item.AverageLoss > 2\\n  );\\n}\\n\\n// Get the input items from the previous node\\nconst inputItems = items.map(item => item.json); // Adjust based on your actual data structure\\n\\n// Filter the items based on the conditions\\nconst filteredItems = filterItems(inputItems);\\n\\n// Return the filtered items to the workflow\\nreturn filteredItems.map(item => {\\n  return { json: item }; // Format each filtered item as JSON\\n});\\n\"},\"typeVersion\":2},{\"id\":\"6db219fd-f54d-4bf8-b150-9c4f3069cf92\",\"name\":\"Average Latency & Loss over 5m\",\"type\":\"n8n-nodes-base.code\",\"notes\":\"This node uses JavaScript to calculate the average over the last 5 entries of packet loss and latency\",\"position\":[1860,400],\"parameters\":{\"jsCode\":\"// Assuming $input.all() is an array of items and each item has a json property\\nfunction calculateAverages(inputItems) {\\n  return inputItems.map(item => {\\n    // Calculate total and average loss\\n    const totalLoss = \\n      parseFloat(item.json['TS0-Loss']) +\\n      parseFloat(item.json['TS1-Loss']) +\\n      parseFloat(item.json['TS2-Loss']) +\\n      parseFloat(item.json['TS3-Loss']) +\\n      parseFloat(item.json['TS4-Loss']);\\n    const averageLoss = totalLoss / 5;\\n    item.json['AverageLoss'] = averageLoss;\\n\\n    // Calculate total and average latency\\n    const totalLatency = \\n      parseFloat(item.json['TS0-Latency']) +\\n      parseFloat(item.json['TS1-Latency']) +\\n      parseFloat(item.json['TS2-Latency']) +\\n      parseFloat(item.json['TS3-Latency']) +\\n      parseFloat(item.json['TS4-Latency']);\\n    const averageLatency = totalLatency / 5;\\n    item.json['AverageLatency'] = averageLatency;\\n\\n    // Return the modified item\\n    return item;\\n  });\\n}\\n\\nreturn calculateAverages($input.all());\\n\"},\"typeVersion\":2},{\"id\":\"f3831843-2596-492d-b800-7d349e443293\",\"name\":\"Get Uplink Loss and Latency\",\"type\":\"n8n-nodes-base.httpRequest\",\"notes\":\"This uses a URL with an expression in the middle so that for each org ID it will pull the Loss and Latency for their uplinks. \",\"position\":[840,400],\"parameters\":{\"url\":\"=https://api.meraki.com/api/v1/organizations/{{ $json.id }}/devices/uplinksLossAndLatency?timespan=300\",\"options\":{\"redirect\":{\"redirect\":{}}},\"sendHeaders\":true,\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\",\"headerParameters\":{\"parameters\":[{\"name\":\"Accept\",\"value\":\"application/json\"}]}},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"12\",\"name\":\"Header Auth account\"}},\"typeVersion\":4.1},{\"id\":\"87c3f32c-de4f-48fd-a711-3521a008c245\",\"name\":\"Schedule Trigger\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"notes\":\"schedules the workflow to run every 5 minutes mon-fri 8am-5pm\",\"position\":[380,240],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"cronExpression\",\"expression\":\"*/5 8-16 * * 1-5\"}]}},\"typeVersion\":1.1},{\"id\":\"572adb5c-6745-4b4e-89d8-a97835c3d486\",\"name\":\"Sets Network Variables\",\"type\":\"n8n-nodes-base.set\",\"notes\":\"Like before, This takes the output data from the previous node and changes the variables to better suit what we'll be using. \",\"position\":[1220,240],\"parameters\":{\"fields\":{\"values\":[{\"name\":\"NetworkID\",\"stringValue\":\"={{ $json.id }}\"},{\"name\":\"NetworkName\",\"stringValue\":\"={{ $json.name }}\"},{\"name\":\"networkURL\",\"stringValue\":\"={{ $json.url }}\"}]},\"include\":\"selected\",\"options\":{}},\"typeVersion\":3.2},{\"id\":\"01717ed3-1012-4eda-9da9-567038132e06\",\"name\":\"Merge\",\"type\":\"n8n-nodes-base.merge\",\"notes\":\"This looks at the problematic sites as well as the info from the database. It will pass on all non-matching as if the site name matches with the database then that means we have an open alert for that site already.\",\"position\":[2720,300],\"parameters\":{\"mode\":\"combine\",\"options\":{},\"joinMode\":\"keepNonMatches\",\"mergeByFields\":{\"values\":[{\"field1\":\"NetworkName\",\"field2\":\"NetworkName\"}]},\"outputDataFrom\":\"input2\"},\"typeVersion\":2.1},{\"id\":\"a20f6f7c-0c92-4db9-903b-e322d67b536d\",\"name\":\"Check if Alert Exists\",\"type\":\"n8n-nodes-base.redis\",\"notes\":\"This node Looks to see if the alert already exists in the Redis database. If it does exist it won't alert us in Teams\",\"position\":[2300,240],\"parameters\":{\"key\":\"={{ $json.NetworkName }}\",\"options\":{\"dotNotation\":\"={{ true }}\"},\"operation\":\"get\",\"propertyName\":\"NetworkName\"},\"typeVersion\":1,\"alwaysOutputData\":true},{\"id\":\"63590446-2938-443a-adbe-bfc0ba89008c\",\"name\":\"Create Response\",\"type\":\"n8n-nodes-base.code\",\"notes\":\"If the alert isn't in the database all the Redis will respond with is \\\"null\\\" \\n\\nother n8n nodes see null as (no data) and show blank which is fair. So I made this node to look at the null responses and make a response of \\\"false\\\" for a \\\"alertExists\\\" variable. that way we have something to filter on\",\"position\":[2500,240],\"parameters\":{\"jsCode\":\"return items.map(item => {\\n  // Check if the 'NetworkName' property is not null, indicating an alert exists.\\n  // If 'NetworkName' is null, no alert exists for this network.\\n  const alertExists = item.json.NetworkName !== null;\\n\\n  // Set the alertExists property correctly based on the condition.\\n  item.json.alertExists = alertExists;\\n\\n  return item;\\n});\\n\"},\"typeVersion\":2},{\"id\":\"c63e2a45-bf5e-455f-8012-9868d55aa3e2\",\"name\":\"Message Techs\",\"type\":\"n8n-nodes-base.microsoftTeams\",\"notes\":\"sends an alert to Dispatch with info related to the site.\",\"position\":[2920,300],\"parameters\":{\"chatId\":\"19:bfd41d9621e544c88ae9f2f275e373b5@thread.v2\",\"message\":\"=<strong>Loss & Latency Alert</strong> <br><br>\\n<strong>Network Name:</strong> <a href=\\\"{{ $json.networkURL }}\\\">{{ $json.NetworkName }}</a> <br>\\n<strong>Average Loss:</strong> {{ $json.AverageLoss }}% <br>\\n<strong>Average Latency:</strong> {{ $json.AverageLatency }} <br> \",\"options\":{},\"resource\":\"chatMessage\"},\"typeVersion\":1.1},{\"id\":\"b4ae54cd-8345-4611-9fbe-32e7537855a9\",\"name\":\"Log the Alert\",\"type\":\"n8n-nodes-base.redis\",\"notes\":\"Logs the alert and sets the TTL to 3h, after 3h Redis will delete the entry and if the site is still having issues, the next run of the workflow will notify us again\",\"position\":[3120,300],\"parameters\":{\"key\":\"={{ $('Merge').item.json.NetworkName }}\",\"ttl\":10800,\"value\":\"={{ $('Merge').item.json.NetworkName }}\",\"expire\":true,\"keyType\":\"string\",\"operation\":\"set\"},\"typeVersion\":1,\"alwaysOutputData\":true},{\"id\":\"05416de5-a0c0-4ff8-bfc5-3d26f0d88139\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[573.394087003982,143.69977924944794],\"parameters\":{\"width\":791.5865288559442,\"height\":462.84878343542437,\"content\":\"## Pulling in Info \\nThis section pulls in all the data we will need to see any possible errors and generate our alert\\n\"},\"typeVersion\":1},{\"id\":\"aeb1c8a6-3cec-4899-83e2-098d0b1a9703\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1464,211],\"parameters\":{\"width\":688.5000872281419,\"height\":411.1258278145692,\"content\":\"## Changing data\\nThis section pulls together the data we got from the first section and sets everything up to be notified \"},\"typeVersion\":1},{\"id\":\"9ca9e89b-61ce-4b3f-af8e-bf03daff6710\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2260,60],\"parameters\":{\"width\":1015.6997792494475,\"height\":614.8167770419421,\"content\":\"## Notify\\nThis last section is for the push of the alert as well as storing the alert as to not re-notify every time the workflow runs\"},\"typeVersion\":1},{\"id\":\"801879be-e83b-4c74-b8ac-b20157ca32d1\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[600,640],\"parameters\":{\"width\":673.6064168725538,\"height\":394.26386951839356,\"content\":\"## Explanation\\nusing an HTTP request you will can do a get request for all Organizations your Meraki account has access to. \\n\\nYou will have to Generate your own API key inside of the Meraki Dashboard explained here https://documentation.meraki.com/General_Administration/Other_Topics/Cisco_Meraki_Dashboard_API\\n\\nYou will have to add two headers to your HTTPS node Authorization and Accept. the 1st is how you'll authenticate with Meraki and the second is how it will know how to answer the request. \\n\\nUsing the same methods you'll do a get for Organizations, Network IDs and Uplink stats\\n\\nUsing the Set nodes to organize the data in a \\\"neat\\\" way\"},\"typeVersion\":1},{\"id\":\"2b028326-0776-4b9b-bdf2-d79949809092\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1480,660],\"parameters\":{\"width\":645.9603701592033,\"height\":389.89870424786454,\"content\":\"## Explanation\\nthe Merge node will combine the Networks with their respective stats by matching on NetworkID and networkid and enriching the input \\n\\nagain we add a set node to better organize the statistics of the uplinks. \\n\\nThe first JS node will average the 5 Time stamps of Latency and Packet loss \\n\\nThe last JS node will send the data forward only for sites that pass the threshold (in this example 300ms latency and 2% packet loss) \"},\"typeVersion\":1},{\"id\":\"f7c1448d-3a03-4196-bde6-a1aea92f28ad\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2300,700],\"parameters\":{\"width\":913.6905067516504,\"height\":523.763772544089,\"content\":\"## Explanation \\nwe will send the problematic sites to both the Redis node and the Merge node. \\n\\nThe Redis node does a get request to see if a key exists matching the Network name in Meraki. If so it will respond with the Network name, If not it will respond with \\\"null\\\" \\n\\nthe n8n nodes view \\\"null\\\" as no data (which isn't exactly wrong as it literally is no data) but the next node will just say the input is blank so I've added the JS node to look at the output and respond if an alert does or doesn't exist based on the response of the Redis node. \\n\\nThis time we Merge looking at the NetworkName and keep all non-matching. The reason for this is because if they match, that means the key in the database exists, meaning we've already sent a message that the site is having issues. \\n\\nWe send the tickets forth that don't match and we will send a teams message that will notify of a Network passing the threshold for issues. I've included the Network URL and re-written the message to include a hyperlink that way the alert can be used to take you straight to the problematic site. \\n\\nFinally we log the site in the database with a TTL of 3h, this way if the error has not been fixed in 3h we will get another message. \\n\"},\"typeVersion\":1},{\"id\":\"4f4d40ef-8e7d-420a-8273-4cfefd3af6e9\",\"name\":\"Sticky Note6\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1460,-320],\"parameters\":{\"width\":670.6963066922013,\"height\":366.61782280504275,\"content\":\"## other usecases \\n If you feel confident enough the Teams nodes can be replaced with a node that can generate a ticket for your PSA such as ConnectWise Mange. That way these are generating tickets rather than just messages. \"},\"typeVersion\":1}],\"pinData\":{},\"connections\":{\"Merge\":{\"main\":[[{\"node\":\"Message Techs\",\"type\":\"main\",\"index\":0}]]},\"Message Techs\":{\"main\":[[{\"node\":\"Log the Alert\",\"type\":\"main\",\"index\":0}]]},\"Create Response\":{\"main\":[[{\"node\":\"Merge\",\"type\":\"main\",\"index\":0}]]},\"Get Network IDs\":{\"main\":[[{\"node\":\"Sets Network Variables\",\"type\":\"main\",\"index\":0}]]},\"Schedule Trigger\":{\"main\":[[{\"node\":\"Get Meraki Organizations\",\"type\":\"main\",\"index\":0}]]},\"Get Org Name & ID\":{\"main\":[[{\"node\":\"Get Network IDs\",\"type\":\"main\",\"index\":0}]]},\"Check if Alert Exists\":{\"main\":[[{\"node\":\"Create Response\",\"type\":\"main\",\"index\":0}]]},\"Sets Network Variables\":{\"main\":[[{\"node\":\"Combine latency to its respective Network\",\"type\":\"main\",\"index\":0}]]},\"Get Meraki Organizations\":{\"main\":[[{\"node\":\"Get Org Name & ID\",\"type\":\"main\",\"index\":0},{\"node\":\"Get Uplink Loss and Latency\",\"type\":\"main\",\"index\":0}]]},\"Filters Problematic sites\":{\"main\":[[{\"node\":\"Check if Alert Exists\",\"type\":\"main\",\"index\":0},{\"node\":\"Merge\",\"type\":\"main\",\"index\":1}]]},\"Get Uplink Loss and Latency\":{\"main\":[[{\"node\":\"Combine latency to its respective Network\",\"type\":\"main\",\"index\":1}]]},\"Average Latency & Loss over 5m\":{\"main\":[[{\"node\":\"Filters Problematic sites\",\"type\":\"main\",\"index\":0}]]},\"When clicking \\\"Execute Workflow\\\"\":{\"main\":[[{\"node\":\"Get Meraki Organizations\",\"type\":\"main\",\"index\":0}]]},\"Makes Latency and Loss Filterable\":{\"main\":[[{\"node\":\"Average Latency & Loss over 5m\",\"type\":\"main\",\"index\":0}]]},\"Combine latency to its respective Network\":{\"main\":[[{\"node\":\"Makes Latency and Loss Filterable\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "This Template gives the ability to monitor all uplinks for your Meraki Dashboard and then alert your team in a method you prefer. This example is a Teams notification to our Dispatch Channel\n\n![image.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_85a70376a6.png)\n\nSetup will probably take around 30 minutes to 1h provided with the Template. Most time intensive steps are getting a Meraki API key which I go over and setting up the Teams node which n8n has good documentation for.\n\nTutorial & explanation <https://www.youtube.com/watch?v=JvaN0dNwRNU>\n",
  "readme_html": "<!--[--><div data-v-50766329=\"\"><p>This Template gives the ability to monitor all uplinks for your Meraki Dashboard and then alert your team in a method you prefer. This example is a Teams notification to our Dispatch Channel</p>\n<p><img src=\"https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_85a70376a6.png\" alt=\"image.png\"></p>\n<p>Setup will probably take around 30 minutes to 1h provided with the Template. Most time intensive steps are getting a Meraki API key which I go over and setting up the Teams node which n8n has good documentation for.</p>\n<p>Tutorial &amp; explanation <a href=\"https://www.youtube.com/watch?v=JvaN0dNwRNU\" rel=\"ugc nofollow\" target=\"_blank\">https://www.youtube.com/watch?v=JvaN0dNwRNU</a></p>\n</div><!--]-->",
  "readme_zh": "此模板能够监控您Meraki仪表板的所有上行链路，并通过您偏好的方式向团队发送警报。本示例展示的是向我们的调度频道发送Teams通知。\n\n![image.png](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/image_85a70376a6.png)\n\n根据模板进行设置大约需要30分钟至1小时。最耗时的步骤是获取Meraki API密钥（我将详细说明）以及配置Teams节点（n8n官方文档对此有详细指导）。\n\n教程与说明详见<https://www.youtube.com/watch?v=JvaN0dNwRNU>",
  "title_zh": "Meraki 丢包与延迟警报推送至 Microsoft Teams",
  "publish_date_zh": "最后一次更新于一年前",
  "workflow_json_zh": "{\n  \"meta\": {\n    \"instanceId\": \"257476b1ef58bf3cb6a46e65fac7ee34a53a5e1a8492d5c6e4da5f87c9b82833\",\n    \"templateId\": \"2054\"\n  },\n  \"nodes\": [\n    {\n      \"id\": \"3b18d784-eded-4b74-ac44-b25565049e13\",\n      \"name\": \"When clicking \\\"Execute Workflow\\\"\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        380,\n        400\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"96eadd32-17c2-44b0-a00b-8e2ddcecaafa\",\n      \"name\": \"Get Meraki Organizations\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"notes\": \"This node uses an API call to Meraki using the URL https://api.meraki.com/api/v1/organizations\\n\\nthe Authorization header is what is used to authenticate. You also have to set it to accept json\",\n      \"position\": [\n        620,\n        320\n      ],\n      \"parameters\": {\n        \"url\": \"https://api.meraki.com/api/v1/organizations\",\n        \"options\": {\n          \"redirect\": {\n            \"redirect\": {}\n          }\n        },\n        \"sendHeaders\": true,\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Accept\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"12\",\n          \"name\": \"Header Auth account\"\n        }\n      },\n      \"typeVersion\": 4.1\n    },\n    {\n      \"id\": \"444071ea-a364-45a6-9430-0338d2752b18\",\n      \"name\": \"Get Network IDs\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"notes\": \"This node uses a URL with an expression in the middle to do an API call for each ORG ID that was pulled to pull all the network's for each org\",\n      \"position\": [\n        1020,\n        240\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.meraki.com/api/v1/organizations/{{ $json.OrgID }}/networks  \",\n        \"options\": {\n          \"redirect\": {\n            \"redirect\": {}\n          }\n        },\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Authorization\"\n            },\n            {\n              \"name\": \"Accept\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 4.1\n    },\n    {\n      \"id\": \"42deea02-e2d2-4ba6-97f7-698c219715a5\",\n      \"name\": \"Get Org Name & ID\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"notes\": \"This takes the output data from the previous node and changes the variables to better suit what we'll be using. \",\n      \"position\": [\n        840,\n        240\n      ],\n      \"parameters\": {\n        \"fields\": {\n          \"values\": [\n            {\n              \"name\": \"CompanyName\",\n              \"stringValue\": \"={{ $json.name }}\"\n            },\n            {\n              \"name\": \"OrgID\",\n              \"stringValue\": \"={{ $json.id }}\"\n            }\n          ]\n        },\n        \"include\": \"selected\",\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"3d5ce6a8-bf05-4457-88e6-c5ad5a995b1d\",\n      \"name\": \"Combine latency to its respective Network\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"notes\": \"This node matches on the NetworkID field, so that the networks we pulled earlier and the Loss / Latency can be combined into one dataset\",\n      \"position\": [\n        1500,\n        400\n      ],\n      \"parameters\": {\n        \"mode\": \"combine\",\n        \"options\": {},\n        \"joinMode\": \"enrichInput1\",\n        \"mergeByFields\": {\n          \"values\": [\n            {\n              \"field1\": \"NetworkID\",\n              \"field2\": \"networkId\"\n            }\n          ]\n        }\n      },\n      \"notesInFlow\": false,\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"caafd6dd-a2b2-405d-a078-cea3bb615788\",\n      \"name\": \"Makes Latency and Loss Filterable\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"notes\": \"Like before, This takes the output data from the previous node and changes the variables to better suit what we'll be using. \",\n      \"position\": [\n        1680,\n        400\n      ],\n      \"parameters\": {\n        \"fields\": {\n          \"values\": [\n            {\n              \"name\": \"networkId\",\n              \"stringValue\": \"={{ $json.networkId }}\"\n            },\n            {\n              \"name\": \"NetworkName\",\n              \"stringValue\": \"={{ $json.NetworkName }}\"\n            },\n            {\n              \"name\": \"networkURL\",\n              \"stringValue\": \"={{ $json.networkURL }}\"\n            },\n            {\n              \"name\": \"Serial\",\n              \"stringValue\": \"={{ $json.serial }}\"\n            },\n            {\n              \"name\": \"TS0-Loss\",\n              \"stringValue\": \"={{ $json.timeSeries[0].lossPercent }}\"\n            },\n            {\n              \"name\": \"TS1-Loss\",\n              \"stringValue\": \"={{ $json.timeSeries[1].lossPercent }}\"\n            },\n            {\n              \"name\": \"TS2-Loss\",\n              \"stringValue\": \"={{ $json.timeSeries[2].lossPercent }}\"\n            },\n            {\n              \"name\": \"TS3-Loss\",\n              \"stringValue\": \"={{ $json.timeSeries[3].lossPercent }}\"\n            },\n            {\n              \"name\": \"TS4-Loss\",\n              \"stringValue\": \"={{ $json.timeSeries[4].lossPercent }}\"\n            },\n            {\n              \"name\": \"TS0-Latency\",\n              \"stringValue\": \"={{ $json.timeSeries[0].latencyMs }}\"\n            },\n            {\n              \"name\": \"TS1-Latency\",\n              \"stringValue\": \"={{ $json.timeSeries[1].latencyMs }}\"\n            },\n            {\n              \"name\": \"TS2-Latency\",\n              \"stringValue\": \"={{ $json.timeSeries[2].latencyMs }}\"\n            },\n            {\n              \"name\": \"TS3-Latency\",\n              \"stringValue\": \"={{ $json.timeSeries[3].latencyMs }}\"\n            },\n            {\n              \"name\": \"TS4-Latency\",\n              \"stringValue\": \"={{ $json.timeSeries[4].latencyMs }}\"\n            }\n          ]\n        },\n        \"include\": \"selected\",\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"c695fd89-c884-4794-b0e5-51b91a71ac5c\",\n      \"name\": \"Filters Problematic sites\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"notes\": \"This node uses JavaScript to look at the calculated averages and if they pass the threshold for 300ms Latency or 2% Loss it will pass that site info forward\",\n      \"position\": [\n        2040,\n        400\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Function to filter items based on averageLatency and averageLoss\\nfunction filterItems(items) {\\n  return items.filter(item =>\\n    item.AverageLatency >300 || item.AverageLoss > 2\\n  );\\n}\\n\\n// Get the input items from the previous node\\nconst inputItems = items.map(item => item.json); // Adjust based on your actual data structure\\n\\n// Filter the items based on the conditions\\nconst filteredItems = filterItems(inputItems);\\n\\n// Return the filtered items to the workflow\\nreturn filteredItems.map(item => {\\n  return { json: item }; // Format each filtered item as JSON\\n});\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"6db219fd-f54d-4bf8-b150-9c4f3069cf92\",\n      \"name\": \"Average Latency & Loss over 5m\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"notes\": \"This node uses JavaScript to calculate the average over the last 5 entries of packet loss and latency\",\n      \"position\": [\n        1860,\n        400\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Assuming $input.all() is an array of items and each item has a json property\\nfunction calculateAverages(inputItems) {\\n  return inputItems.map(item => {\\n    // Calculate total and average loss\\n    const totalLoss = \\n      parseFloat(item.json['TS0-Loss']) +\\n      parseFloat(item.json['TS1-Loss']) +\\n      parseFloat(item.json['TS2-Loss']) +\\n      parseFloat(item.json['TS3-Loss']) +\\n      parseFloat(item.json['TS4-Loss']);\\n    const averageLoss = totalLoss / 5;\\n    item.json['AverageLoss'] = averageLoss;\\n\\n    // Calculate total and average latency\\n    const totalLatency = \\n      parseFloat(item.json['TS0-Latency']) +\\n      parseFloat(item.json['TS1-Latency']) +\\n      parseFloat(item.json['TS2-Latency']) +\\n      parseFloat(item.json['TS3-Latency']) +\\n      parseFloat(item.json['TS4-Latency']);\\n    const averageLatency = totalLatency / 5;\\n    item.json['AverageLatency'] = averageLatency;\\n\\n    // Return the modified item\\n    return item;\\n  });\\n}\\n\\nreturn calculateAverages($input.all());\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"f3831843-2596-492d-b800-7d349e443293\",\n      \"name\": \"Get Uplink Loss and Latency\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"notes\": \"This uses a URL with an expression in the middle so that for each org ID it will pull the Loss and Latency for their uplinks. \",\n      \"position\": [\n        840,\n        400\n      ],\n      \"parameters\": {\n        \"url\": \"=https://api.meraki.com/api/v1/organizations/{{ $json.id }}/devices/uplinksLossAndLatency?timespan=300\",\n        \"options\": {\n          \"redirect\": {\n            \"redirect\": {}\n          }\n        },\n        \"sendHeaders\": true,\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\",\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Accept\",\n              \"value\": \"application/json\"\n            }\n          ]\n        }\n      },\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"12\",\n          \"name\": \"Header Auth account\"\n        }\n      },\n      \"typeVersion\": 4.1\n    },\n    {\n      \"id\": \"87c3f32c-de4f-48fd-a711-3521a008c245\",\n      \"name\": \"Schedule Trigger\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"notes\": \"schedules the workflow to run every 5 minutes mon-fri 8am-5pm\",\n      \"position\": [\n        380,\n        240\n      ],\n      \"parameters\": {\n        \"rule\": {\n          \"interval\": [\n            {\n              \"field\": \"cronExpression\",\n              \"expression\": \"*/5 8-16 * * 1-5\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"572adb5c-6745-4b4e-89d8-a97835c3d486\",\n      \"name\": \"Sets Network Variables\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"notes\": \"Like before, This takes the output data from the previous node and changes the variables to better suit what we'll be using. \",\n      \"position\": [\n        1220,\n        240\n      ],\n      \"parameters\": {\n        \"fields\": {\n          \"values\": [\n            {\n              \"name\": \"NetworkID\",\n              \"stringValue\": \"={{ $json.id }}\"\n            },\n            {\n              \"name\": \"NetworkName\",\n              \"stringValue\": \"={{ $json.name }}\"\n            },\n            {\n              \"name\": \"networkURL\",\n              \"stringValue\": \"={{ $json.url }}\"\n            }\n          ]\n        },\n        \"include\": \"selected\",\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"01717ed3-1012-4eda-9da9-567038132e06\",\n      \"name\": \"Merge\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"notes\": \"This looks at the problematic sites as well as the info from the database. It will pass on all non-matching as if the site name matches with the database then that means we have an open alert for that site already.\",\n      \"position\": [\n        2720,\n        300\n      ],\n      \"parameters\": {\n        \"mode\": \"combine\",\n        \"options\": {},\n        \"joinMode\": \"keepNonMatches\",\n        \"mergeByFields\": {\n          \"values\": [\n            {\n              \"field1\": \"NetworkName\",\n              \"field2\": \"NetworkName\"\n            }\n          ]\n        },\n        \"outputDataFrom\": \"input2\"\n      },\n      \"typeVersion\": 2.1\n    },\n    {\n      \"id\": \"a20f6f7c-0c92-4db9-903b-e322d67b536d\",\n      \"name\": \"Check if Alert Exists\",\n      \"type\": \"n8n-nodes-base.redis\",\n      \"notes\": \"This node Looks to see if the alert already exists in the Redis database. If it does exist it won't alert us in Teams\",\n      \"position\": [\n        2300,\n        240\n      ],\n      \"parameters\": {\n        \"key\": \"={{ $json.NetworkName }}\",\n        \"options\": {\n          \"dotNotation\": \"={{ true }}\"\n        },\n        \"operation\": \"get\",\n        \"propertyName\": \"NetworkName\"\n      },\n      \"typeVersion\": 1,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"63590446-2938-443a-adbe-bfc0ba89008c\",\n      \"name\": \"Create Response\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"notes\": \"If the alert isn't in the database all the Redis will respond with is \\\"null\\\" \\n\\nother n8n nodes see null as (no data) and show blank which is fair. So I made this node to look at the null responses and make a response of \\\"false\\\" for a \\\"alertExists\\\" variable. that way we have something to filter on\",\n      \"position\": [\n        2500,\n        240\n      ],\n      \"parameters\": {\n        \"jsCode\": \"return items.map(item => {\\n  // Check if the 'NetworkName' property is not null, indicating an alert exists.\\n  // If 'NetworkName' is null, no alert exists for this network.\\n  const alertExists = item.json.NetworkName !== null;\\n\\n  // Set the alertExists property correctly based on the condition.\\n  item.json.alertExists = alertExists;\\n\\n  return item;\\n});\\n\"\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"c63e2a45-bf5e-455f-8012-9868d55aa3e2\",\n      \"name\": \"Message Techs\",\n      \"type\": \"n8n-nodes-base.microsoftTeams\",\n      \"notes\": \"sends an alert to Dispatch with info related to the site.\",\n      \"position\": [\n        2920,\n        300\n      ],\n      \"parameters\": {\n        \"chatId\": \"19:bfd41d9621e544c88ae9f2f275e373b5@thread.v2\",\n        \"message\": \"=<strong>Loss & Latency Alert</strong> <br><br>\\n<strong>Network Name:</strong> <a href=\\\"{{ $json.networkURL }}\\\">{{ $json.NetworkName }}</a> <br>\\n<strong>Average Loss:</strong> {{ $json.AverageLoss }}% <br>\\n<strong>Average Latency:</strong> {{ $json.AverageLatency }} <br> \",\n        \"options\": {},\n        \"resource\": \"chatMessage\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"b4ae54cd-8345-4611-9fbe-32e7537855a9\",\n      \"name\": \"Log the Alert\",\n      \"type\": \"n8n-nodes-base.redis\",\n      \"notes\": \"Logs the alert and sets the TTL to 3h, after 3h Redis will delete the entry and if the site is still having issues, the next run of the workflow will notify us again\",\n      \"position\": [\n        3120,\n        300\n      ],\n      \"parameters\": {\n        \"key\": \"={{ $('Merge').item.json.NetworkName }}\",\n        \"ttl\": 10800,\n        \"value\": \"={{ $('Merge').item.json.NetworkName }}\",\n        \"expire\": true,\n        \"keyType\": \"string\",\n        \"operation\": \"set\"\n      },\n      \"typeVersion\": 1,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"05416de5-a0c0-4ff8-bfc5-3d26f0d88139\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        573.394087003982,\n        143.69977924944794\n      ],\n      \"parameters\": {\n        \"width\": 791.5865288559442,\n        \"height\": 462.84878343542437,\n        \"content\": \"## 信息拉取\\n本部分将汇集所有必要数据，以便检测潜在错误并生成警报\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"aeb1c8a6-3cec-4899-83e2-098d0b1a9703\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1464,\n        211\n      ],\n      \"parameters\": {\n        \"width\": 688.5000872281419,\n        \"height\": 411.1258278145692,\n        \"content\": \"## 变更数据\\n本节整合了从第一部分获取的数据，并设置好所有通知机制\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9ca9e89b-61ce-4b3f-af8e-bf03daff6710\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2260,\n        60\n      ],\n      \"parameters\": {\n        \"width\": 1015.6997792494475,\n        \"height\": 614.8167770419421,\n        \"content\": \"## 通知\\n最后这一部分用于推送警报，同时存储警报信息以避免每次工作流运行时重复通知。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"801879be-e83b-4c74-b8ac-b20157ca32d1\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        600,\n        640\n      ],\n      \"parameters\": {\n        \"width\": 673.6064168725538,\n        \"height\": 394.26386951839356,\n        \"content\": \"## 说明\\n通过HTTP请求，您可以对您的Meraki账户有权访问的所有组织执行GET请求。\\n\\n您需要在Meraki仪表板中生成自己的API密钥，具体操作参见此处：https://documentation.meraki.com/General_Administration/Other_Topics/Cisco_Meraki_Dashboard_API\\n\\n您需要在HTTPS节点中添加两个请求头：Authorization（授权）和Accept（接受）。第一个用于向Meraki进行身份验证，第二个则用于告知系统如何响应请求。\\n\\n采用相同的方法，您可以获取组织信息、网络ID以及上行链路状态数据。\\n\\n通过Set节点，您可以以“整洁”的方式组织这些数据。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2b028326-0776-4b9b-bdf2-d79949809092\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1480,\n        660\n      ],\n      \"parameters\": {\n        \"width\": 645.9603701592033,\n        \"height\": 389.89870424786454,\n        \"content\": \"## 说明\\nMerge节点将通过匹配NetworkID和networkid，将网络及其对应的统计数据合并，并对输入数据进行增强。\\n\\n我们再次添加一个Set节点，以更好地组织上行链路的统计信息。\\n\\n第一个JS节点将对延迟和数据包丢失的5个时间戳进行平均计算。\\n\\n最后一个JS节点仅对满足阈值条件的站点（本例中延迟超过300毫秒且数据包丢失率超过2%）转发数据。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f7c1448d-3a03-4196-bde6-a1aea92f28ad\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        2300,\n        700\n      ],\n      \"parameters\": {\n        \"width\": 913.6905067516504,\n        \"height\": 523.763772544089,\n        \"content\": \"## 说明\\n我们会将问题站点同时发送至Redis节点和Merge节点。\\n\\nRedis节点会执行get请求，检查是否存在与Meraki中网络名称匹配的键。若存在则返回网络名称，否则返回\\\"null\\\"。\\n\\nn8n节点将\\\"null\\\"视为无数据（这并不完全错误，因为字面上确实是无数据），但后续节点只会显示输入为空。因此我添加了JS节点来检查输出，根据Redis节点的响应判断警报是否存在。\\n\\n这次我们基于NetworkName进行Merge操作，并保留所有不匹配项。原因是：若名称匹配，说明数据库中已存在该键，意味着我们已发送过该站点故障的通知。\\n\\n我们将不匹配的工单继续传递，并发送Teams消息来通知有网络超过了问题阈值。消息中包含了网络URL，并重写为超链接形式，这样警报可直接跳转至问题站点。\\n\\n最后我们在数据库中记录该站点，并设置3小时TTL。这样若3小时内故障未修复，我们将再次收到通知。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4f4d40ef-8e7d-420a-8273-4cfefd3af6e9\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1460,\n        -320\n      ],\n      \"parameters\": {\n        \"width\": 670.6963066922013,\n        \"height\": 366.61782280504275,\n        \"content\": \"## 其他应用场景  \\n若您有足够把握，可将Teams节点替换为能为您PSA（如ConnectWise Manage）生成工单的节点。如此一来，这些操作将直接生成工单而非仅发送消息。\"\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Merge\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Message Techs\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Message Techs\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Log the Alert\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create Response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Network IDs\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Sets Network Variables\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Schedule Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Meraki Organizations\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Org Name & ID\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Network IDs\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check if Alert Exists\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Create Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Sets Network Variables\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Combine latency to its respective Network\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Meraki Organizations\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Org Name & ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Get Uplink Loss and Latency\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filters Problematic sites\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check if Alert Exists\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Get Uplink Loss and Latency\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Combine latency to its respective Network\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Average Latency & Loss over 5m\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filters Problematic sites\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking \\\"Execute Workflow\\\"\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Meraki Organizations\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Makes Latency and Loss Filterable\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Average Latency & Loss over 5m\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Combine latency to its respective Network\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Makes Latency and Loss Filterable\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}