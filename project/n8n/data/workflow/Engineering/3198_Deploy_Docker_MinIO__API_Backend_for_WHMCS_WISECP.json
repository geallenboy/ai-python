{
  "title": "Deploy Docker MinIO, API Backend for WHMCS/WISECP",
  "url": "https://n8n.io/workflows/3198-deploy-docker-minio-api-backend-for-whmcswisecp/",
  "category": "Engineering",
  "category_url": "https://n8n.io/workflows/categories/engineering/?sort=createdAt:desc",
  "author": "PUQcloud",
  "publish_date": "Last update 6 days ago",
  "publish_date_absolute": "2025-05-16",
  "content": "",
  "workflow_json": "{\"id\":\"IJYpB2CIAdLk8Umg\",\"meta\":{\"instanceId\":\"ffb0782f8b2cf4278577cb919e0cd26141bc9ff8774294348146d454633aa4e3\",\"templateCredsSetupCompleted\":true},\"name\":\"puq-docker-minio-deploy\",\"tags\":[],\"nodes\":[{\"id\":\"d79fe295-a0b0-4871-8382-67d9af5d0d2c\",\"name\":\"If\",\"type\":\"n8n-nodes-base.if\",\"position\":[-2060,-320],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"or\",\"conditions\":[{\"id\":\"b702e607-888a-42c9-b9a7-f9d2a64dfccd\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.server_domain }}\",\"rightValue\":\"={{ $('API').item.json.body.server_domain }}\"}]}},\"typeVersion\":2.2},{\"id\":\"52c088af-95ae-411f-b1fa-f50b8ea99b58\",\"name\":\"Parametrs\",\"type\":\"n8n-nodes-base.set\",\"position\":[-2280,-320],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"a6328600-7ee0-4031-9bdb-fcee99b79658\",\"name\":\"server_domain\",\"type\":\"string\",\"value\":\"d01-test.uuq.pl\"},{\"id\":\"370ddc4e-0fc0-48f6-9b30-ebdfba72c62f\",\"name\":\"clients_dir\",\"type\":\"string\",\"value\":\"/opt/docker/clients\"},{\"id\":\"92202bb8-6113-4bc5-9a29-79d238456df2\",\"name\":\"mount_dir\",\"type\":\"string\",\"value\":\"/mnt\"},{\"id\":\"baa52df2-9c10-42b2-939f-f05ea85ea2be\",\"name\":\"screen_left\",\"type\":\"string\",\"value\":\"{{\"},{\"id\":\"2b19ed99-2630-412a-98b6-4be44d35d2e7\",\"name\":\"screen_right\",\"type\":\"string\",\"value\":\"}}\"}]}},\"typeVersion\":3.4},{\"id\":\"9814333d-a9c1-4787-aed1-116db9395b88\",\"name\":\"API\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[-2600,-320],\"webhookId\":\"73068cf8-be17-4b10-b9a3-744f7e4843b0\",\"parameters\":{\"path\":\"docker-minio\",\"options\":{},\"httpMethod\":[\"POST\"],\"responseMode\":\"responseNode\",\"authentication\":\"basicAuth\",\"multipleMethods\":true},\"credentials\":{\"httpBasicAuth\":{\"id\":\"J4uXcnEb1SIQ2VN7\",\"name\":\"MinIO\"}},\"typeVersion\":2},{\"id\":\"a3e0156c-8033-4829-ab57-06e3708a7a09\",\"name\":\"422-Invalid server domain\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"position\":[-2100,0],\"parameters\":{\"options\":{\"responseCode\":422},\"respondWith\":\"json\",\"responseBody\":\"[{\\n  \\\"status\\\": \\\"error\\\",\\n  \\\"error\\\": \\\"Invalid server domain\\\"\\n}]\"},\"typeVersion\":1.1,\"alwaysOutputData\":false},{\"id\":\"a5f410f8-ca52-4e85-b76f-651756c80de5\",\"name\":\"Code1\",\"type\":\"n8n-nodes-base.code\",\"position\":[800,-240],\"parameters\":{\"mode\":\"runOnceForEachItem\",\"jsCode\":\"try {\\n  if ($json.stdout === 'success') {\\n    return {\\n      json: {\\n        status: 'success',\\n        message: '',\\n        data: '',\\n      }\\n    };\\n  }\\n\\n  const parsedData = JSON.parse($json.stdout);\\n\\n  return {\\n    json: {\\n      status: parsedData.status === 'error' ? 'error' : 'success',\\n      message: parsedData.message || (parsedData.status === 'error' ? 'An error occurred' : ''),\\n      data: parsedData || '',\\n    }\\n  };\\n\\n} catch (error) {\\n  return {\\n    json: {\\n      status: 'error',\\n      message: $json.stdout??$json.error,\\n      data: '',\\n    }\\n  };\\n}\"},\"executeOnce\":false,\"retryOnFail\":false,\"typeVersion\":2,\"alwaysOutputData\":false},{\"id\":\"e162574f-c3ce-4fd0-8b31-d251ea360389\",\"name\":\"SSH\",\"type\":\"n8n-nodes-base.ssh\",\"onError\":\"continueErrorOutput\",\"position\":[500,-240],\"parameters\":{\"cwd\":\"=/\",\"command\":\"={{ $json.sh }}\"},\"credentials\":{\"sshPassword\":{\"id\":\"Cyjy61UWHwD2Xcd8\",\"name\":\"d01-test.uuq.pl-puq\"}},\"executeOnce\":true,\"typeVersion\":1},{\"id\":\"70f53357-5cdc-428c-876c-77036d6736cc\",\"name\":\"Container Actions\",\"type\":\"n8n-nodes-base.switch\",\"position\":[-1680,160],\"parameters\":{\"rules\":{\"values\":[{\"outputKey\":\"start\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"66ad264d-5393-410c-bfa3-011ab8eb234a\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"container_start\"}]},\"renameOutput\":true},{\"outputKey\":\"stop\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"b48957a0-22c0-4ac0-82ef-abd9e7ab0207\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"container_stop\"}]},\"renameOutput\":true},{\"outputKey\":\"mount_disk\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"727971bf-4218-41c1-9b07-22df4b947852\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"container_mount_disk\"}]},\"renameOutput\":true},{\"outputKey\":\"unmount_disk\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"0c80b1d9-e7ca-4cf3-b3ac-b40fdf4dd8f8\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"container_unmount_disk\"}]},\"renameOutput\":true},{\"outputKey\":\"container_get_acl\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"755e1a9f-667a-4022-9cb5-3f8153f62e95\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"container_get_acl\"}]},\"renameOutput\":true},{\"outputKey\":\"container_set_acl\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"8d75626f-789e-42fc-be5e-3a4e93a9bbc6\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"container_set_acl\"}]},\"renameOutput\":true},{\"outputKey\":\"container_get_net\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"c49d811a-735c-42f4-8b77-d0cd47b3d2b8\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"container_get_net\"}]},\"renameOutput\":true}]},\"options\":{}},\"typeVersion\":3.2},{\"id\":\"901a657d-873c-4b92-9949-d03e73a5313c\",\"name\":\"Service Actions\",\"type\":\"n8n-nodes-base.switch\",\"position\":[-900,-1300],\"parameters\":{\"rules\":{\"values\":[{\"outputKey\":\"test_connection\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"3afdd2f1-fe93-47c2-95cd-bac9b1d94eeb\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"test_connection\"}]},\"renameOutput\":true},{\"outputKey\":\"create\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"102f10e9-ec6c-4e63-ba95-0fe6c7dc0bd1\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"create\"}]},\"renameOutput\":true},{\"outputKey\":\"suspend\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"f62dfa34-6751-4b34-adcc-3d6ba1b21a8c\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"suspend\"}]},\"renameOutput\":true},{\"outputKey\":\"unsuspend\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"384d2026-b753-4c27-94c2-8f4fc189eb5f\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"unsuspend\"}]},\"renameOutput\":true},{\"outputKey\":\"terminate\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"0e190a97-827a-4e87-8222-093ff7048b21\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"terminate\"}]},\"renameOutput\":true},{\"outputKey\":\"change_package\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"6f7832f3-b61d-4517-ab6b-6007998136dd\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"change_package\"}]},\"renameOutput\":true}]},\"options\":{}},\"typeVersion\":3.2},{\"id\":\"1c59a844-f4ef-422f-abbf-288a55e11934\",\"name\":\"API answer\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"position\":[820,0],\"parameters\":{\"options\":{\"responseCode\":200},\"respondWith\":\"allIncomingItems\"},\"typeVersion\":1.1,\"alwaysOutputData\":true},{\"id\":\"c2019d97-1012-4089-84c3-305308f8603f\",\"name\":\"Inspect\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-1160,-380],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\n\\nINSPECT_JSON=\\\"{}\\\"\\nif sudo docker ps -a --filter \\\"name=$CONTAINER_NAME\\\" | grep -q \\\"$CONTAINER_NAME\\\"; then\\n  INSPECT_JSON=$(sudo docker inspect \\\"$CONTAINER_NAME\\\")\\nfi\\n\\necho \\\"{\\\\\\\"inspect\\\\\\\": $INSPECT_JSON}\\\"\\n\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"a274a2d1-2382-48a0-a94d-6ef89cd22a57\",\"name\":\"Stat\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-1060,-240],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status.json\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\n\\n# Initialize empty container data\\nINSPECT_JSON=\\\"{}\\\"\\nSTATS_JSON=\\\"{}\\\"\\n\\n# Check if container is running\\nif sudo docker ps -a --filter \\\"name=$CONTAINER_NAME\\\" | grep -q \\\"$CONTAINER_NAME\\\"; then\\n  # Get Docker inspect info in JSON (as raw string)\\n  INSPECT_JSON=$(sudo docker inspect \\\"$CONTAINER_NAME\\\")\\n\\n  # Get Docker stats info in JSON (as raw string)\\n  STATS_JSON=$(sudo docker stats --no-stream --format \\\"{{ $('Parametrs').item.json.screen_left }}json .{{ $('Parametrs').item.json.screen_right }}\\\" \\\"$CONTAINER_NAME\\\")\\n  STATS_JSON=${STATS_JSON:-'{}'}\\nfi\\n\\n# Initialize disk info variables\\nMOUNT_USED=\\\"N/A\\\"\\nMOUNT_FREE=\\\"N/A\\\"\\nMOUNT_TOTAL=\\\"N/A\\\"\\nMOUNT_PERCENT=\\\"N/A\\\"\\nIMG_SIZE=\\\"N/A\\\"\\nIMG_PERCENT=\\\"N/A\\\"\\nDISK_STATS_IMG=\\\"N/A\\\"\\n\\n# Check if mount directory exists and is accessible\\nif [ -d \\\"$MOUNT_DIR\\\" ]; then\\n  if mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    # Get disk usage for mounted directory\\n    DISK_STATS_MOUNT=$(df -h \\\"$MOUNT_DIR\\\" | tail -n 1)\\n    MOUNT_USED=$(echo \\\"$DISK_STATS_MOUNT\\\" | awk '{print $3}')\\n    MOUNT_FREE=$(echo \\\"$DISK_STATS_MOUNT\\\" | awk '{print $4}')\\n    MOUNT_TOTAL=$(echo \\\"$DISK_STATS_MOUNT\\\" | awk '{print $2}')\\n    MOUNT_PERCENT=$(echo \\\"$DISK_STATS_MOUNT\\\" | awk '{print $5}')\\n  fi\\nfi\\n\\n# Check if image file exists\\nif [ -f \\\"$IMG_FILE\\\" ]; then\\n  # Get disk usage for image file\\n  IMG_SIZE=$(du -sh \\\"$IMG_FILE\\\" | awk '{print $1}')\\nfi\\n\\n# Manually create a combined JSON object\\nFINAL_JSON=\\\"{\\\\\\\"inspect\\\\\\\": $INSPECT_JSON, \\\\\\\"stats\\\\\\\": $STATS_JSON, \\\\\\\"disk\\\\\\\": {\\\\\\\"mounted\\\\\\\": {\\\\\\\"used\\\\\\\": \\\\\\\"$MOUNT_USED\\\\\\\", \\\\\\\"free\\\\\\\": \\\\\\\"$MOUNT_FREE\\\\\\\", \\\\\\\"total\\\\\\\": \\\\\\\"$MOUNT_TOTAL\\\\\\\", \\\\\\\"percent\\\\\\\": \\\\\\\"$MOUNT_PERCENT\\\\\\\"}, \\\\\\\"img_file\\\\\\\": {\\\\\\\"size\\\\\\\": \\\\\\\"$IMG_SIZE\\\\\\\"}}}\\\"\\n\\n# Output the result\\necho \\\"$FINAL_JSON\\\"\\n\\nexit 0\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"3e80ebbe-bb8e-4fec-ab20-ba69271a48f8\",\"name\":\"Start\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-1180,140],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\nif ! df -h | grep -q \\\"$MOUNT_DIR\\\"; then\\n    handle_error \\\"The file $IMG_FILE is not mounted to $MOUNT_DIR\\\"\\nfi\\n\\nif sudo docker ps --filter \\\"name={{ $('API').item.json.body.domain }}\\\" --filter \\\"status=running\\\" -q | grep -q .; then\\n    handle_error \\\"{{ $('API').item.json.body.domain }} container is running\\\"\\nfi\\n\\n# Change to the compose directory\\ncd \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to change directory to $COMPOSE_DIR\\\"\\n\\n# Start the Docker containers\\nif ! sudo docker-compose up -d > /dev/null 2>error.log; then\\n    ERROR_MSG=$(tail -n 10 error.log)\\n    handle_error \\\"Docker-compose failed: $ERROR_MSG\\\"\\nfi\\n\\n# Success\\necho \\\"success\\\"\\n\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"4e13ceea-a01f-438c-ba6f-27f55b88798b\",\"name\":\"Stop\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-1060,240],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Check if Docker container is running\\nif ! sudo docker ps --filter \\\"name={{ $('API').item.json.body.domain }}\\\" --filter \\\"status=running\\\" -q | grep -q .; then\\n    handle_error \\\"{{ $('API').item.json.body.domain }} container is not running\\\"\\nfi\\n\\n# Stop and remove the Docker containers (also remove associated volumes)\\nif ! sudo docker-compose -f \\\"$COMPOSE_DIR/docker-compose.yml\\\" down > /dev/null 2>&1; then\\n    handle_error \\\"Failed to stop and remove docker-compose containers\\\"\\nfi\\n\\necho \\\"success\\\"\\n\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"afa7a4e2-85a6-420b-9e33-30802e9cbb7b\",\"name\":\"Test Connection1\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-220,-1320],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\n# Function to log an error, print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Check if Docker is installed\\nif ! command -v docker &> /dev/null; then\\n    handle_error \\\"Docker is not installed\\\"\\nfi\\n\\n# Check if Docker service is running\\nif ! systemctl is-active --quiet docker; then\\n    handle_error \\\"Docker service is not running\\\"\\nfi\\n\\n# Check if nginx-proxy container is running\\nif ! sudo docker ps --filter \\\"name=nginx-proxy\\\" --filter \\\"status=running\\\" -q > /dev/null; then\\n    handle_error \\\"nginx-proxy container is not running\\\"\\nfi\\n\\n# Check if letsencrypt-nginx-proxy-companion container is running\\nif ! sudo docker ps --filter \\\"name=letsencrypt-nginx-proxy-companion\\\" --filter \\\"status=running\\\" -q > /dev/null; then\\n    handle_error \\\"letsencrypt-nginx-proxy-companion container is not running\\\"\\nfi\\n\\n# If everything is successful\\necho \\\"success\\\"\\n\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"6c8261b4-f024-4b8e-a11c-1f2305e03e1d\",\"name\":\"Deploy\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-220,-1120],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\nDOCKER_COMPOSE_TEXT='{{ $('Deploy-docker-compose').item.json[\\\"docker-compose\\\"] }}'\\n\\nNGINX_MAIN_ACL_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_acl\\n\\nNGINX_MAIN_TEXT='{{ $('nginx').item.json['main'] }}'\\nNGINX_MAIN_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\n\\nNGINX_MAIN_LOCATION_TEXT='{{ $('nginx').item.json['main_location'] }}'\\nNGINX_MAIN_LOCATION_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_location\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\n\\n\\nNGINX_CONSOLE_ACL_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_acl\\n\\nNGINX_CONSOLE_TEXT='{{ $('nginx').item.json['console'] }}'\\nNGINX_CONSOLE_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"\\nVHOST_CONSOLE_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"\\n\\nNGINX_CONSOLE_LOCATION_TEXT='{{ $('nginx').item.json['console_location'] }}'\\nNGINX_CONSOLE_LOCATION_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_location\\nVHOST_CONSOLE_LOCATION_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"_location\\n\\n\\nDISK_SIZE=\\\"{{ $('API').item.json.body.disk }}\\\"\\n\\n# Function to handle errors: write to the status file and print the message to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"$STATUS_JSON\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null  # Write error to the status file\\n    echo \\\"error: $1\\\"  # Print the error message to the console\\n    exit 1  # Exit the script with an error code\\n}\\n\\n# Check if the directory already exists. If yes, exit with an error.\\nif [ -d \\\"$COMPOSE_DIR\\\" ]; then\\n    echo \\\"error: Directory $COMPOSE_DIR already exists\\\"\\n    exit 1\\nfi\\n\\n# Create necessary directories with permissions\\nsudo mkdir -p \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $COMPOSE_DIR\\\"\\nsudo mkdir -p \\\"$NGINX_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_DIR\\\"\\nsudo mkdir -p \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $MOUNT_DIR\\\"\\n\\n# Set permissions on the created directories\\nsudo chmod -R 777 \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $COMPOSE_DIR\\\"\\nsudo chmod -R 777 \\\"$NGINX_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $NGINX_DIR\\\"\\nsudo chmod -R 777 \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $MOUNT_DIR\\\"\\n\\n# Create docker-compose.yml file\\necho \\\"$DOCKER_COMPOSE_TEXT\\\" | sudo tee \\\"$COMPOSE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $COMPOSE_FILE\\\"\\n\\n# Create NGINX configuration files\\necho \\\"\\\" | sudo tee \\\"$NGINX_MAIN_ACL_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_ACL_FILE\\\"\\necho \\\"\\\" | sudo tee \\\"$NGINX_CONSOLE_ACL_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_ACL_FILE\\\"\\n\\necho \\\"$NGINX_MAIN_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_FILE\\\"\\necho \\\"$NGINX_MAIN_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_LOCATION_FILE\\\"\\n\\necho \\\"$NGINX_CONSOLE_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_FILE\\\"\\necho \\\"$NGINX_CONSOLE_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_LOCATION_FILE\\\"\\n\\n# Change to the compose directory\\ncd \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to change directory to $COMPOSE_DIR\\\"\\n\\n# Create data.img file if it doesn't exist\\nif [ ! -f \\\"$IMG_FILE\\\" ]; then\\n    sudo fallocate -l \\\"$DISK_SIZE\\\"G \\\"$IMG_FILE\\\" > /dev/null 2>&1 || sudo truncate -s \\\"$DISK_SIZE\\\"G \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $IMG_FILE\\\"\\n    sudo mkfs.ext4 \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to format $IMG_FILE\\\"  # Format the image as ext4\\n    sync  # Synchronize the data to disk\\nfi\\n\\n# Add an entry to /etc/fstab for mounting if not already present\\nif ! grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    echo \\\"$IMG_FILE $MOUNT_DIR ext4 loop 0 0\\\" | sudo tee -a /etc/fstab > /dev/null || handle_error \\\"Failed to add entry to /etc/fstab\\\"\\nfi\\n\\n# Mount all entries in /etc/fstab\\nsudo mount -a || handle_error \\\"Failed to mount entries from /etc/fstab\\\"\\n\\n# Set permissions on the mount directory\\nsudo chmod -R 777 \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $MOUNT_DIR\\\"\\n\\n# Copy NGINX configuration files instead of creating symbolic links\\nsudo cp -f \\\"$NGINX_MAIN_FILE\\\" \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_FILE to $VHOST_MAIN_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_MAIN_LOCATION_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_LOCATION_FILE to $VHOST_MAIN_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_LOCATION_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_FILE\\\" \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_FILE to $VHOST_CONSOLE_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_LOCATION_FILE to $VHOST_CONSOLE_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_LOCATION_FILE\\\"\\n\\n# Start Docker containers using docker-compose\\nif ! sudo docker-compose up -d > /dev/null 2>error.log; then\\n    ERROR_MSG=$(tail -n 10 error.log)  # Read the last 10 lines from error.log\\n    handle_error \\\"Docker-compose failed: $ERROR_MSG\\\"\\nfi\\n\\n# If everything is successful, update the status file and print success message\\necho \\\"active\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\necho \\\"success\\\"\\n\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"d2f48f02-1a75-445e-832b-f9bf1a4d4b71\",\"name\":\"Suspend\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-220,-960],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\n\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\nVHOST_CONSOLE_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"\\nVHOST_CONSOLE_LOCATION_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"_location\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"$STATUS_JSON\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Stop and remove Docker containers (also remove associated volumes)\\nif [ -f \\\"$COMPOSE_FILE\\\" ]; then\\n    if ! sudo docker-compose -f \\\"$COMPOSE_FILE\\\" down > /dev/null 2>&1; then\\n        handle_error \\\"Failed to stop and remove docker-compose containers\\\"\\n    fi\\nelse\\n    echo \\\"Warning: docker-compose.yml not found, skipping container stop.\\\"\\nfi\\n\\n# Remove mount entry from /etc/fstab if it exists\\nif grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    sudo sed -i \\\"\\\\|$(printf '%s\\\\n' \\\"$IMG_FILE\\\" | sed 's/[.[\\\\*^$]/\\\\\\\\&/g')|d\\\" /etc/fstab\\nfi\\n\\n# Unmount the image if it is mounted\\nif mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo umount \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to unmount $MOUNT_DIR\\\"\\nfi\\n\\n# Remove the mount directory\\nif [ -d \\\"$MOUNT_DIR\\\" ]; then\\n    sudo rm -rf \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to remove $MOUNT_DIR\\\"\\nfi\\n\\n# Remove NGINX configuration files\\n[ -f \\\"$VHOST_MAIN_FILE\\\" ] && sudo rm -f \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Warning: $VHOST_MAIN_FILE not found.\\\"\\n[ -f \\\"$VHOST_MAIN_LOCATION_FILE\\\" ] && sudo rm -f \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Warning: $VHOST_MAIN_LOCATION_FILE not found.\\\"\\n[ -f \\\"$VHOST_CONSOLE_FILE\\\" ] && sudo rm -f \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Warning: $VHOST_CONSOLE_FILE not found.\\\"\\n[ -f \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" ] && sudo rm -f \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Warning: $VHOST_CONSOLE_LOCATION_FILE not found.\\\"\\n\\n# Update status\\necho \\\"suspended\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n\\n# Success\\necho \\\"success\\\"\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"87b7f7c2-7f7e-49e5-846c-3f92d436b5b6\",\"name\":\"Terminated\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-220,-620],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\n\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\nVHOST_CONSOLE_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"\\nVHOST_CONSOLE_LOCATION_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"_location\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Stop and remove the Docker containers\\nif [ -f \\\"$COMPOSE_FILE\\\" ]; then\\n    sudo docker-compose -f \\\"$COMPOSE_FILE\\\" down > /dev/null 2>&1\\nfi\\n\\n# Remove the mount entry from /etc/fstab if it exists\\nif grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    sudo sed -i \\\"\\\\|$(printf '%s\\\\n' \\\"$IMG_FILE\\\" | sed 's/[.[\\\\*^$]/\\\\\\\\&/g')|d\\\" /etc/fstab\\nfi\\n\\n# Unmount the image if it is still mounted\\nif mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo umount \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to unmount $MOUNT_DIR\\\"\\nfi\\n\\n# Remove all related directories and files\\nfor item in \\\"$COMPOSE_DIR\\\" \\\"$VHOST_MAIN_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" \\\"$VHOST_CONSOLE_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\"; do\\n    if [ -e \\\"$item\\\" ]; then\\n        sudo rm -rf \\\"$item\\\" || handle_error \\\"Failed to remove $item\\\"\\n    fi\\ndone\\n\\necho \\\"success\\\"\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"610dc730-9a2f-4fbf-bbbe-ce31d1494422\",\"name\":\"Unsuspend\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-220,-800],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\nDOCKER_COMPOSE_TEXT='{{ $('Deploy-docker-compose').item.json[\\\"docker-compose\\\"] }}'\\n\\nNGINX_MAIN_ACL_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_acl\\n\\nNGINX_MAIN_TEXT='{{ $('nginx').item.json['main'] }}'\\nNGINX_MAIN_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\n\\nNGINX_MAIN_LOCATION_TEXT='{{ $('nginx').item.json['main_location'] }}'\\nNGINX_MAIN_LOCATION_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_location\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\n\\nNGINX_CONSOLE_ACL_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_acl\\n\\nNGINX_CONSOLE_TEXT='{{ $('nginx').item.json['console'] }}'\\nNGINX_CONSOLE_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"\\nVHOST_CONSOLE_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"\\n\\nNGINX_CONSOLE_LOCATION_TEXT='{{ $('nginx').item.json['console_location'] }}'\\nNGINX_CONSOLE_LOCATION_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_location\\nVHOST_CONSOLE_LOCATION_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"_location\\n\\nDISK_SIZE=\\\"{{ $('API').item.json.body.disk }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"$STATUS_JSON\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\nupdate_nginx_acl() {\\n    ACL_FILE=$1\\n    LOCATION_FILE=$2\\n    \\n    if [ -s \\\"$ACL_FILE\\\" ]; then  # Проверяем, что файл существует и не пустой\\n        VALID_LINES=$(grep -vE '^\\\\s*$' \\\"$ACL_FILE\\\")  # Убираем пустые строки\\n        if [ -n \\\"$VALID_LINES\\\" ]; then  # Если есть непустые строки\\n            while IFS= read -r line; do\\n                echo \\\"allow $line;\\\" | sudo tee -a \\\"$LOCATION_FILE\\\" > /dev/null || handle_error \\\"Failed to update $LOCATION_FILE\\\"\\n            done <<< \\\"$VALID_LINES\\\"\\n            echo \\\"deny all;\\\" | sudo tee -a \\\"$LOCATION_FILE\\\" > /dev/null || handle_error \\\"Failed to update $LOCATION_FILE\\\"\\n        fi\\n    fi\\n}\\n\\n# Create necessary directories with permissions\\nfor dir in \\\"$COMPOSE_DIR\\\" \\\"$NGINX_DIR\\\" \\\"$MOUNT_DIR\\\"; do\\n    sudo mkdir -p \\\"$dir\\\" || handle_error \\\"Failed to create $dir\\\"\\n    sudo chmod -R 777 \\\"$dir\\\" || handle_error \\\"Failed to set permissions on $dir\\\"\\ndone\\n\\n# Check if the image is already mounted using fstab\\nif ! grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    echo \\\"$IMG_FILE $MOUNT_DIR ext4 loop 0 0\\\" | sudo tee -a /etc/fstab > /dev/null || handle_error \\\"Failed to add fstab entry for $IMG_FILE\\\"\\nfi\\n\\n# Apply the fstab changes and mount the image\\nif ! mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo mount -a || handle_error \\\"Failed to mount image using fstab\\\"\\nfi\\n\\n# Create docker-compose.yml file\\necho \\\"$DOCKER_COMPOSE_TEXT\\\" | sudo tee \\\"$COMPOSE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $COMPOSE_FILE\\\"\\n\\n# Create NGINX configuration files\\necho \\\"$NGINX_MAIN_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_FILE\\\"\\necho \\\"$NGINX_MAIN_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_FILE\\\"\\n\\necho \\\"$NGINX_CONSOLE_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_FILE\\\"\\necho \\\"$NGINX_CONSOLE_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_LOCATION_FILE\\\"\\n\\n# Copy NGINX configuration files instead of creating symbolic links\\nsudo cp -f \\\"$NGINX_MAIN_FILE\\\" \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_FILE to $VHOST_MAIN_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_MAIN_LOCATION_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_LOCATION_FILE to $VHOST_MAIN_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_LOCATION_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_FILE\\\" \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_FILE to $VHOST_CONSOLE_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_LOCATION_FILE to $VHOST_CONSOLE_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_LOCATION_FILE\\\"\\n\\nupdate_nginx_acl \\\"$NGINX_MAIN_ACL_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\"\\nupdate_nginx_acl \\\"$NGINX_CONSOLE_ACL_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\"\\n\\n# Change to the compose directory\\ncd \\\"$COMPOSE_DIR\\\" || handle_error \\\"Failed to change directory to $COMPOSE_DIR\\\"\\n\\n# Start Docker containers using docker-compose\\n> error.log\\nif ! sudo docker-compose up -d > error.log 2>&1; then\\n    ERROR_MSG=$(tail -n 10 error.log)  # Read the last 10 lines from error.log\\n    handle_error \\\"Docker-compose failed: $ERROR_MSG\\\"\\nfi\\n\\n# If everything is successful, update the status file and print success message\\necho \\\"active\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\necho \\\"success\\\"\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"8d6893c3-9597-43fe-bbec-ba3c55d2c220\",\"name\":\"Mount Disk\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-1180,360],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Create necessary directories with permissions\\nsudo mkdir -p \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $MOUNT_DIR\\\"\\nsudo chmod 777 \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $MOUNT_DIR\\\"\\n\\nif df -h | grep -q \\\"$MOUNT_DIR\\\"; then\\n    handle_error \\\"The file $IMG_FILE is mounted to $MOUNT_DIR\\\"\\nfi\\n\\nif ! grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    echo \\\"$IMG_FILE $MOUNT_DIR ext4 loop 0 0\\\" | sudo tee -a /etc/fstab > /dev/null || handle_error \\\"Failed to add entry to /etc/fstab\\\"\\nfi\\n\\nsudo mount -a || handle_error \\\"Failed to mount entries from /etc/fstab\\\"\\n\\necho \\\"success\\\"\\n\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"1b2182c6-7080-4b09-9699-2ba7c3292913\",\"name\":\"Unmount Disk\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-1060,460],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\nif ! df -h | grep -q \\\"$MOUNT_DIR\\\"; then\\n    handle_error \\\"The file $IMG_FILE is not mounted to $MOUNT_DIR\\\"\\nfi\\n\\n# Remove the mount entry from /etc/fstab if it exists\\nif grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    sudo sed -i \\\"\\\\|$(printf '%s\\\\n' \\\"$IMG_FILE\\\" | sed 's/[.[\\\\*^$]/\\\\\\\\&/g')|d\\\" /etc/fstab\\nfi\\n\\n# Unmount the image if it is mounted (using fstab)\\nif mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo umount \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to unmount $MOUNT_DIR\\\"\\nfi\\n\\n# Remove the mount directory (if needed)\\nif ! sudo rm -rf \\\"$MOUNT_DIR\\\" > /dev/null 2>&1; then\\n    handle_error \\\"Failed to remove $MOUNT_DIR\\\"\\nfi\\n\\necho \\\"success\\\"\\n\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"dd0cd3d9-876e-485c-94ed-f69e6f26c62b\",\"name\":\"Log\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-1180,-100],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\nLOGS_JSON=\\\"{}\\\"\\n\\n# Function to return error in JSON format\\nhandle_error() {\\n    echo \\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    exit 1\\n}\\n\\n# Check if the container exists\\nif ! sudo docker ps -a | grep -q \\\"$CONTAINER_NAME\\\" > /dev/null 2>&1; then\\n    handle_error \\\"Container $CONTAINER_NAME not found\\\"\\nfi\\n\\n# Get logs of the container\\nLOGS=$(sudo docker logs --tail 1000 \\\"$CONTAINER_NAME\\\" 2>&1)\\nif [ $? -ne 0 ]; then\\n    handle_error \\\"Failed to retrieve logs for $CONTAINER_NAME\\\"\\nfi\\n\\n# Escape double quotes in logs for valid JSON\\nLOGS_ESCAPED=$(echo \\\"$LOGS\\\" | sed 's/\\\"/\\\\\\\\\\\"/g' | sed ':a;N;$!ba;s/\\\\n/\\\\\\\\n/g')\\n\\n# Format logs as JSON\\nLOGS_JSON=\\\"{\\\\\\\"logs\\\\\\\": \\\\\\\"$LOGS_ESCAPED\\\\\\\"}\\\"\\n\\necho \\\"$LOGS_JSON\\\"\\nexit 0\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"64e41e91-62b3-4346-874b-e952201fecb5\",\"name\":\"ChangePackage\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-220,-440],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\nDOCKER_COMPOSE_TEXT='{{ $('Deploy-docker-compose').item.json[\\\"docker-compose\\\"] }}'\\n\\nNGINX_MAIN_TEXT='{{ $('nginx').item.json['main'] }}'\\nNGINX_MAIN_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\n\\nNGINX_MAIN_LOCATION_TEXT='{{ $('nginx').item.json['main_location'] }}'\\nNGINX_MAIN_LOCATION_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_location\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\n\\nNGINX_CONSOLE_TEXT='{{ $('nginx').item.json['console'] }}'\\nNGINX_CONSOLE_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"\\nVHOST_CONSOLE_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"\\n\\nNGINX_CONSOLE_LOCATION_TEXT='{{ $('nginx').item.json['console_location'] }}'\\nNGINX_CONSOLE_LOCATION_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_location\\nVHOST_CONSOLE_LOCATION_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"_location\\n\\nDISK_SIZE=\\\"{{ $('API').item.json.body.disk }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"$STATUS_JSON\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Check if the compose file exists before stopping the container\\nif [ -f \\\"$COMPOSE_FILE\\\" ]; then\\n    sudo docker-compose -f \\\"$COMPOSE_FILE\\\" down > /dev/null 2>&1 || handle_error \\\"Failed to stop containers\\\"\\nelse\\n    handle_error \\\"docker-compose.yml not found\\\"\\nfi\\n\\n# Unmount the image if it is currently mounted\\nif mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo umount \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to unmount $MOUNT_DIR\\\"\\nfi\\n\\n# Create docker-compose.yml file\\necho \\\"$DOCKER_COMPOSE_TEXT\\\" | sudo tee \\\"$COMPOSE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $COMPOSE_FILE\\\"\\n\\n# Create NGINX configuration files\\necho \\\"$NGINX_MAIN_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_FILE\\\"\\necho \\\"$NGINX_MAIN_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_LOCATION_FILE\\\"\\n\\necho \\\"$NGINX_CONSOLE_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_FILE\\\"\\necho \\\"$NGINX_CONSOLE_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_LOCATION_FILE\\\"\\n\\n# Resize the disk image if it exists\\nif [ -f \\\"$IMG_FILE\\\" ]; then\\n    sudo truncate -s \\\"$DISK_SIZE\\\"G \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to resize $IMG_FILE (truncate)\\\"\\n    sudo e2fsck -fy \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Filesystem check failed on $IMG_FILE\\\"\\n    sudo resize2fs \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to resize filesystem on $IMG_FILE\\\"\\nelse\\n    handle_error \\\"Disk image $IMG_FILE does not exist\\\"\\nfi\\n\\n# Mount the disk only if it is not already mounted\\nif ! mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo mount -a || handle_error \\\"Failed to mount entries from /etc/fstab\\\"\\nfi\\n\\n# Change to the compose directory\\ncd \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to change directory to $COMPOSE_DIR\\\"\\n\\n# Copy NGINX configuration files instead of creating symbolic links\\nsudo cp -f \\\"$NGINX_MAIN_FILE\\\" \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_FILE to $VHOST_MAIN_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_MAIN_LOCATION_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_LOCATION_FILE to $VHOST_MAIN_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_LOCATION_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_FILE\\\" \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_FILE to $VHOST_CONSOLE_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_LOCATION_FILE to $VHOST_CONSOLE_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_LOCATION_FILE\\\"\\n\\n# Start Docker containers using docker-compose\\nif ! sudo docker-compose up -d > /dev/null 2>error.log; then\\n    ERROR_MSG=$(tail -n 10 error.log)  # Read the last 10 lines from error.log\\n    handle_error \\\"Docker-compose failed: $ERROR_MSG\\\"\\nfi\\n\\n# Update status file\\necho \\\"active\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n\\necho \\\"success\\\"\\n\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"d7688118-55bb-4934-aac7-507bd3a3e956\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-2640,-1280],\"parameters\":{\"color\":6,\"width\":639,\"height\":909,\"content\":\"## 👋 Welcome to PUQ Docker MinIO deploy!\\n## Template for MinIO: API Backend for WHMCS/WISECP by PUQcloud\\n\\nv.1\\n\\nThis is an n8n template that creates an API backend for the WHMCS/WISECP module developed by PUQcloud.\\n\\n## Setup Instructions\\n\\n### 1. Configure API Webhook and SSH Access\\n- Create a Credential (Basic Auth) for the **Webhook API Block** in n8n.\\n- Create a Credential for **SSH access** to a server with Docker installed (**SSH Block**).\\n\\n### 2. Modify Template Parameters\\nIn the **Parameters** block of the template, update the following settings:\\n\\n- `server_domain` – must match the domain of the WHMCS/WISECP Docker server.\\n- `clients_dir` – directory where user data related to Docker and disks will be stored.\\n- `mount_dir` – default mount point for the container disk (recommended not to change).\\n\\n**Do not modify** the following technical parameters:\\n\\n- `screen_left`\\n- `screen_right`\\n\\n## Additional Resources\\n- Full documentation: [https://doc.puq.info/books/docker-minio-whmcs-module](https://doc.puq.info/books/docker-minio-whmcs-module)\\n- WHMCS module: [https://puqcloud.com/whmcs-module-docker-minio.php](https://puqcloud.com/whmcs-module-docker-minio.php)\\n\\n\"},\"typeVersion\":1},{\"id\":\"e8b68657-ae60-4558-8ea0-768dba92fcba\",\"name\":\"Deploy-docker-compose\",\"type\":\"n8n-nodes-base.set\",\"position\":[-1200,-1360],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"docker-compose\",\"type\":\"string\",\"value\":\"=version: \\\"3\\\"\\n\\nservices:\\n  {{ $('API').item.json.body.domain }}:\\n    image: minio/minio\\n    restart: unless-stopped\\n    container_name: {{ $('API').item.json.body.domain }}\\n    command: server /data --console-address \\\":9001\\\"\\n    environment:\\n      MINIO_ROOT_USER: {{ $('API').item.json.body.username }}\\n      MINIO_ROOT_PASSWORD: {{ $('API').item.json.body.password }}\\n      MINIO_BROWSER_REDIRECT_URL: https://console.{{ $('API').item.json.body.domain }}\\n      LETSENCRYPT_HOST: {{ $('API').item.json.body.domain }},console.{{ $('API').item.json.body.domain }}\\n      VIRTUAL_HOST_MULTIPORTS: |-\\n          {{ $('API').item.json.body.domain }}:\\n            \\\"/\\\":\\n              port: 9000\\n          console.{{ $('API').item.json.body.domain }}:\\n            \\\"/\\\":\\n              port: 9001\\n    volumes:\\n      - \\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}/data:/data\\\"\\n    networks:\\n      - nginx-proxy_web\\n    mem_limit: \\\"{{ $('API').item.json.body.ram }}G\\\"\\n    cpus: \\\"{{ $('API').item.json.body.cpu }}\\\"\\n\\nnetworks:\\n  nginx-proxy_web:\\n    external: true\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"938520b1-aae6-4fe7-ac8e-e888f0793c8a\",\"name\":\"Version\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-1080,1300],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\nVERSION_JSON=\\\"{}\\\"\\n\\n# Function to return error in JSON format\\nhandle_error() {\\n    echo \\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    exit 1\\n}\\n\\n# Check if the container exists\\nif ! sudo docker ps -a | grep -q \\\"$CONTAINER_NAME\\\" > /dev/null 2>&1; then\\n    handle_error \\\"Container $CONTAINER_NAME not found\\\"\\nfi\\n\\n# Get the MinIO version from the container (first line only)\\nVERSION=$(sudo docker exec \\\"$CONTAINER_NAME\\\" minio -v | head -n 1)\\n\\n# Extract just the version string\\nVERSION_CLEAN=$(echo \\\"$VERSION\\\" | awk '{print $3}')\\n\\n# Format version as JSON\\nVERSION_JSON=\\\"{\\\\\\\"version\\\\\\\": \\\\\\\"$VERSION_CLEAN\\\\\\\"}\\\"\\n\\necho \\\"$VERSION_JSON\\\"\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"d83a8249-9ad9-4772-bb1b-5484ebeb4b81\",\"name\":\"Users\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-1140,1460],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\nMINIO_USERNAME=\\\"{{ $('API').item.json.body.username }}\\\"\\nMINIO_PASSWORD=\\\"{{ $('API').item.json.body.password }}\\\"\\n\\n# Function to return error in JSON format\\nhandle_error() {\\n    echo \\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    exit 1\\n}\\n\\n# Check if the container exists\\nif ! sudo docker ps -a | grep -q \\\"$CONTAINER_NAME\\\" > /dev/null 2>&1; then\\n    handle_error \\\"Container $CONTAINER_NAME not found\\\"\\nfi\\n\\n# Set alias for MinIO client\\nsudo docker exec \\\"$CONTAINER_NAME\\\" mc alias set local http://localhost:9000 \\\"$MINIO_USERNAME\\\" \\\"$MINIO_PASSWORD\\\" > /dev/null 2>&1\\n\\n# Get user list and format it correctly as JSON array\\nUSERS_JSON=$(sudo docker exec \\\"$CONTAINER_NAME\\\" mc admin user list local --json | jq -s '.')\\n\\n# Check if USERS_JSON is empty\\nif [ -z \\\"$USERS_JSON\\\" ]; then\\n    handle_error \\\"Failed to retrieve user list for $CONTAINER_NAME\\\"\\nfi\\n\\n# Wrap in a JSON object\\nJSON=\\\"{\\\\\\\"users\\\\\\\": $USERS_JSON}\\\"\\n\\necho \\\"$JSON\\\"\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"ba9b26be-31b6-47c9-85c1-719f346abc1a\",\"name\":\"If1\",\"type\":\"n8n-nodes-base.if\",\"position\":[-1780,-1260],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"or\",\"conditions\":[{\"id\":\"8602bd4c-9693-4d5f-9e7d-5ee62210baca\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"create\"},{\"id\":\"1c630b59-0e5a-441d-8aa5-70b31338d897\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"change_package\"},{\"id\":\"b3eb7052-a70f-438e-befd-8c5240df32c7\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"unsuspend\"}]}},\"typeVersion\":2.2},{\"id\":\"c08cfbd4-ef9a-4430-8a03-41ae209a3c92\",\"name\":\"MinIO\",\"type\":\"n8n-nodes-base.switch\",\"position\":[-1680,1380],\"parameters\":{\"rules\":{\"values\":[{\"outputKey\":\"version\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"66ad264d-5393-410c-bfa3-011ab8eb234a\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"app_version\"}]},\"renameOutput\":true},{\"outputKey\":\"users\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"b48957a0-22c0-4ac0-82ef-abd9e7ab0207\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"app_users\"}]},\"renameOutput\":true}]},\"options\":{}},\"typeVersion\":3.2},{\"id\":\"d75c83ca-c106-4b96-9db7-9f3ef1e20453\",\"name\":\"nginx\",\"type\":\"n8n-nodes-base.set\",\"position\":[-1420,-1360],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"main\",\"type\":\"string\",\"value\":\"=ignore_invalid_headers off;\\nclient_max_body_size 0;\\nproxy_buffering off;\\nproxy_request_buffering off;\"},{\"id\":\"6507763a-21d4-4ff0-84d2-5dc9d21b7430\",\"name\":\"main_location\",\"type\":\"string\",\"value\":\"=# Custom header\\nproxy_set_header Host $http_host;\\nproxy_set_header X-Real-IP $remote_addr;\\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\nproxy_set_header X-Forwarded-Proto $scheme;\\n\\nproxy_connect_timeout 300;\\n# Default is HTTP/1, keepalive is only enabled in HTTP/1.1\\nproxy_http_version 1.1;\\nproxy_set_header Connection \\\"\\\";\\nchunked_transfer_encoding off;\\n\"},{\"id\":\"d00aa07a-0641-43ef-8fd2-5fb9ef62e313\",\"name\":\"console\",\"type\":\"string\",\"value\":\"=ignore_invalid_headers off;\\nclient_max_body_size 0;\\nproxy_buffering off;\\nproxy_request_buffering off;\"},{\"id\":\"c00fb803-8b9f-4aca-a1b1-2e3da42fc8d1\",\"name\":\"console_location\",\"type\":\"string\",\"value\":\"=# Custom header\\nproxy_set_header Host $http_host;\\nproxy_set_header X-Real-IP $remote_addr;\\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\nproxy_set_header X-Forwarded-Proto $scheme;\\nproxy_set_header X-NginX-Proxy true;\\n\\nreal_ip_header X-Real-IP;\\nproxy_connect_timeout 300;\\nproxy_http_version 1.1;\\nproxy_set_header Upgrade $http_upgrade;\\nproxy_set_header Connection \\\"upgrade\\\";\\n  \\nchunked_transfer_encoding off;\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"70c2cb4d-af9d-4003-8aaf-e5800580552b\",\"name\":\"Container Stat\",\"type\":\"n8n-nodes-base.switch\",\"position\":[-1680,-240],\"parameters\":{\"rules\":{\"values\":[{\"outputKey\":\"inspect\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"66ad264d-5393-410c-bfa3-011ab8eb234a\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"container_information_inspect\"}]},\"renameOutput\":true},{\"outputKey\":\"stats\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"b48957a0-22c0-4ac0-82ef-abd9e7ab0207\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"container_information_stats\"}]},\"renameOutput\":true},{\"outputKey\":\"log\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"50ede522-af22-4b7a-b1fd-34b27fd3fadd\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $('API').item.json.body.command }}\",\"rightValue\":\"container_log\"}]},\"renameOutput\":true}]},\"options\":{}},\"typeVersion\":3.2},{\"id\":\"0bb2aeeb-8279-4f13-827f-a6559ef805b1\",\"name\":\"GET ACL\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-1180,560],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\n\\nNGINX_MAIN_ACL_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_acl\\nNGINX_CONSOLE_ACL_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_acl\\n\\n# Function to log an error and exit\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Read files if they exist, else assign empty array\\nif [[ -f \\\"$NGINX_CONSOLE_ACL_FILE\\\" ]]; then\\n    WEB_CONSOLE_IPS=$(cat \\\"$NGINX_CONSOLE_ACL_FILE\\\" | jq -R -s 'split(\\\"\\\\n\\\") | map(select(length > 0))')\\nelse\\n    WEB_CONSOLE_IPS=\\\"[]\\\"\\nfi\\n\\nif [[ -f \\\"$NGINX_MAIN_ACL_FILE\\\" ]]; then\\n    REST_API_IPS=$(cat \\\"$NGINX_MAIN_ACL_FILE\\\" | jq -R -s 'split(\\\"\\\\n\\\") | map(select(length > 0))')\\nelse\\n    REST_API_IPS=\\\"[]\\\"\\nfi\\n\\n# Output JSON\\necho \\\"{ \\\\\\\"web_console_ips\\\\\\\": $WEB_CONSOLE_IPS, \\\\\\\"rest_api_ips\\\\\\\": $REST_API_IPS }\\\"\\n\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"9603bee0-de6f-46bf-97d4-f7a2a4d27514\",\"name\":\"SET ACL\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-1060,700],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\n\\nNGINX_MAIN_ACL_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_acl\\nNGINX_MAIN_ACL_TEXT=\\\"{{ $('API').item.json.body.rest_api_ips }}\\\"\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\nNGINX_MAIN_LOCATION_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_location\\n\\nNGINX_CONSOLE_ACL_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_acl\\nNGINX_CONSOLE_ACL_TEXT=\\\"{{ $('API').item.json.body.web_console_ips }}\\\"\\nVHOST_CONSOLE_LOCATION_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"_location\\nNGINX_CONSOLE_LOCATION_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_location\\n\\n# Function to log an error and exit\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\nupdate_nginx_acl() {\\n    ACL_FILE=$1\\n    LOCATION_FILE=$2\\n    \\n    if [ -s \\\"$ACL_FILE\\\" ]; then\\n        VALID_LINES=$(grep -vE '^\\\\s*$' \\\"$ACL_FILE\\\")\\n        if [ -n \\\"$VALID_LINES\\\" ]; then\\n            while IFS= read -r line; do\\n                echo \\\"allow $line;\\\" | sudo tee -a \\\"$LOCATION_FILE\\\" > /dev/null || handle_error \\\"Failed to update $LOCATION_FILE\\\"\\n            done <<< \\\"$VALID_LINES\\\"\\n            echo \\\"deny all;\\\" | sudo tee -a \\\"$LOCATION_FILE\\\" > /dev/null || handle_error \\\"Failed to update $LOCATION_FILE\\\"\\n        fi\\n    fi\\n}\\n\\n# Create or overwrite the file with the content from variables\\necho \\\"$NGINX_MAIN_ACL_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_ACL_FILE\\\" > /dev/null\\necho \\\"$NGINX_CONSOLE_ACL_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_ACL_FILE\\\" > /dev/null\\n\\nsudo cp -f \\\"$NGINX_MAIN_LOCATION_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_LOCATION_FILE to $VHOST_MAIN_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_LOCATION_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_LOCATION_FILE to $VHOST_CONSOLE_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_LOCATION_FILE\\\"\\n\\nupdate_nginx_acl \\\"$NGINX_MAIN_ACL_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\"\\nupdate_nginx_acl \\\"$NGINX_CONSOLE_ACL_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\"\\n\\n# Reload Nginx with sudo\\nif sudo docker exec nginx-proxy nginx -s reload; then\\n    echo \\\"success\\\"\\nelse\\n    handle_error \\\"Failed to reload Nginx.\\\"\\nfi\\n\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true},{\"id\":\"325e6cfc-f28e-490e-84a0-d8153e1c9fc9\",\"name\":\"GET NET\",\"type\":\"n8n-nodes-base.set\",\"onError\":\"continueRegularOutput\",\"position\":[-1180,840],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"21f4453e-c136-4388-be90-1411ae78e8a5\",\"name\":\"sh\",\"type\":\"string\",\"value\":\"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nNET_IN_FILE=\\\"$COMPOSE_DIR/net_in\\\"\\nNET_OUT_FILE=\\\"$COMPOSE_DIR/net_out\\\"\\n\\n# Function to log an error and exit\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Get current network statistics from container\\nSTATS=$(sudo docker exec \\\"$DOMAIN\\\" cat /proc/net/dev | grep eth0) || handle_error \\\"Failed to get network stats\\\"\\nNET_IN_NEW=$(echo \\\"$STATS\\\" | awk '{print $2}')  # RX bytes (received)\\nNET_OUT_NEW=$(echo \\\"$STATS\\\" | awk '{print $10}') # TX bytes (transmitted)\\n\\n# Ensure directory exists\\nmkdir -p \\\"$COMPOSE_DIR\\\"\\n\\n# Read old values, create files if they don't exist\\nif [[ -f \\\"$NET_IN_FILE\\\" ]]; then\\n    NET_IN_OLD=$(sudo cat \\\"$NET_IN_FILE\\\")\\nelse\\n    NET_IN_OLD=0\\nfi\\n\\nif [[ -f \\\"$NET_OUT_FILE\\\" ]]; then\\n    NET_OUT_OLD=$(sudo cat \\\"$NET_OUT_FILE\\\")\\nelse\\n    NET_OUT_OLD=0\\nfi\\n\\n# Save new values\\necho \\\"$NET_IN_NEW\\\" | sudo tee \\\"$NET_IN_FILE\\\" > /dev/null\\necho \\\"$NET_OUT_NEW\\\" | sudo tee \\\"$NET_OUT_FILE\\\" > /dev/null\\n\\n# Output JSON\\necho \\\"{ \\\\\\\"net_in_new\\\\\\\": $NET_IN_NEW, \\\\\\\"net_out_new\\\\\\\": $NET_OUT_NEW, \\\\\\\"net_in_old\\\\\\\": $NET_IN_OLD, \\\\\\\"net_out_old\\\\\\\": $NET_OUT_OLD }\\\"\\n\\nexit 0\\n\"}]}},\"typeVersion\":3.4,\"alwaysOutputData\":true}],\"active\":true,\"pinData\":{},\"settings\":{\"timezone\":\"America/Winnipeg\",\"callerPolicy\":\"workflowsFromSameOwner\",\"executionOrder\":\"v1\"},\"versionId\":\"930dd393-6eff-43d5-8446-30ba19fce16d\",\"connections\":{\"If\":{\"main\":[[{\"node\":\"Container Stat\",\"type\":\"main\",\"index\":0},{\"node\":\"Container Actions\",\"type\":\"main\",\"index\":0},{\"node\":\"MinIO\",\"type\":\"main\",\"index\":0},{\"node\":\"If1\",\"type\":\"main\",\"index\":0}],[{\"node\":\"422-Invalid server domain\",\"type\":\"main\",\"index\":0}]]},\"API\":{\"main\":[[{\"node\":\"Parametrs\",\"type\":\"main\",\"index\":0}],[]]},\"If1\":{\"main\":[[{\"node\":\"nginx\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Service Actions\",\"type\":\"main\",\"index\":0}]]},\"Log\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"SSH\":{\"main\":[[{\"node\":\"Code1\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Code1\",\"type\":\"main\",\"index\":0}]]},\"Stat\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"Stop\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"Code1\":{\"main\":[[{\"node\":\"API answer\",\"type\":\"main\",\"index\":0}]]},\"MinIO\":{\"main\":[[{\"node\":\"Version\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Users\",\"type\":\"main\",\"index\":0}]]},\"Start\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"Users\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"nginx\":{\"main\":[[{\"node\":\"Deploy-docker-compose\",\"type\":\"main\",\"index\":0}]]},\"Deploy\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"GET ACL\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"GET NET\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"Inspect\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"SET ACL\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"Suspend\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}],[]]},\"Version\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"Parametrs\":{\"main\":[[{\"node\":\"If\",\"type\":\"main\",\"index\":0}]]},\"Unsuspend\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"Mount Disk\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"Terminated\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"Unmount Disk\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"ChangePackage\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"Container Stat\":{\"main\":[[{\"node\":\"Inspect\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Stat\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Log\",\"type\":\"main\",\"index\":0}]]},\"Service Actions\":{\"main\":[[{\"node\":\"Test Connection1\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Deploy\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Suspend\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Unsuspend\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Terminated\",\"type\":\"main\",\"index\":0}],[{\"node\":\"ChangePackage\",\"type\":\"main\",\"index\":0}]]},\"Test Connection1\":{\"main\":[[{\"node\":\"SSH\",\"type\":\"main\",\"index\":0}]]},\"Container Actions\":{\"main\":[[{\"node\":\"Start\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Stop\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Mount Disk\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Unmount Disk\",\"type\":\"main\",\"index\":0}],[{\"node\":\"GET ACL\",\"type\":\"main\",\"index\":0}],[{\"node\":\"SET ACL\",\"type\":\"main\",\"index\":0}],[{\"node\":\"GET NET\",\"type\":\"main\",\"index\":0}]]},\"Deploy-docker-compose\":{\"main\":[[{\"node\":\"Service Actions\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "# Setting up n8n workflow\n\n## Overview\n\nThe **Docker MinIO WHMCS module** uses a specially designed workflow for **n8n** to automate deployment processes. The workflow provides an API interface for the module, receives specific commands, and connects via SSH to a server with Docker installed to perform predefined actions.\n\n## Prerequisites\n\n  * You must have your own **n8n** server.\n  * Alternatively, you can use the official **n8n** cloud installations available at: [n8n Official Site](https://n8n.partnerlinks.io/o692v7cg297k)\n\n\n\n## Installation Steps\n\n### Install the Required Workflow on n8n\n\nYou have two options:\n\n#### **Option 1: Use the Latest Version from the n8n Marketplace**\n\n  * The latest workflow templates for our modules are available on the official n8n marketplace.\n  * Visit our profile to access all available templates: [PUQcloud on n8n](https://n8n.io/creators/puqcloud/)\n\n\n\n#### **Option 2: Manual Installation**\n\n  * Each module version comes with a workflow template file.  \n[![image-1741974273723.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974273723.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974273723.png)\n  * You need to manually import this template into your n8n server.  \n[![image-1741284912356.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741284912356.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741284912356.png)\n\n\n\n## n8n Workflow API Backend Setup for WHMCS/WISECP\n\n### Configure API Webhook and SSH Access\n\n  * Create a **Basic Auth Credential** for the Webhook API Block in n8n.  \n[![image-1741974396480.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974396480.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974396480.png)\n\n[![image-1741974500641.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974500641.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974500641.png)\n\n[![image-1741285036996.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285036996.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285036996.png)\n\n  * Create an **SSH Credential** for accessing a server with Docker installed.  \n[![image-1741285118412.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285118412.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285118412.png)\n\n[![image-1741285147192.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285147192.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285147192.png)\n\n[![image-1741285198822.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285198822.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285198822.png)\n\n\n\n\n### Modify Template Parameters\n\nIn the **Parameters** block of the template, update the following settings:\n\n[![image-1741974559641.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974559641.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974559641.png)\n\n[![image-1741285412110.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285412110.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285412110.png)\n\n  * `server_domain` – Must match the domain of the WHMCS/WISECP Docker server.\n  * `clients_dir` – Directory where user data related to Docker and disks will be stored.\n  * `mount_dir` – Default mount point for the container disk (recommended not to change).\n\n\n\n**Do not modify** the following technical parameters:\n\n  * `screen_left`\n  * `screen_right`\n\n\n\n### **Deploy-docker-compose**\n\nIn the **Deploy-docker-compose** element, you have the ability to modify the Docker Compose configuration, which will be generated in the following scenarios:\n\n  * When the service is created\n  * When the service is unlocked\n  * When the service is updated\n\n\n\n[![image-1741875704524.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741875704524.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741875704524.png)\n\n[![image-1741974602887.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974602887.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974602887.png)\n\n### **nginx**\n\nIn the **nginx** element, you can modify the configuration parameters of the web interface proxy server.\n\n  * The **main** section allows you to add custom parameters to the **server** block in the proxy server configuration file.\n  * The **main_location** section contains settings that will be added to the **location /** block of the proxy server configuration. Here, you can define custom headers and other parameters specific to the root location.\n\n\n\n[![image-1741875960357.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741875960357.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741875960357.png)\n\n[![image-1741974633761.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974633761.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974633761.png)\n\n### **Bash Scripts**\n\nManagement of Docker containers and all related procedures on the server is carried out by executing Bash scripts generated in **n8n**. These scripts return either a JSON response or a string.\n\n  * All scripts are located in elements directly connected to the **SSH** element.\n  * You have full control over any script and can modify or execute it as needed.\n\n\n\n[![image-1741876353319.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741876353319.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741876353319.png)\n",
  "readme_html": "<!--[--><div data-v-859c7806=\"\"><h1>Setting up n8n workflow</h1>\n<h2>Overview</h2>\n<p>The <strong>Docker MinIO WHMCS module</strong> uses a specially designed workflow for <strong>n8n</strong> to automate deployment processes. The workflow provides an API interface for the module, receives specific commands, and connects via SSH to a server with Docker installed to perform predefined actions.</p>\n<h2>Prerequisites</h2>\n<ul>\n<li>You must have your own <strong>n8n</strong> server.</li>\n<li>Alternatively, you can use the official <strong>n8n</strong> cloud installations available at: <a href=\"https://n8n.partnerlinks.io/o692v7cg297k\" rel=\"ugc nofollow\" target=\"_blank\">n8n Official Site</a></li>\n</ul>\n<h2>Installation Steps</h2>\n<h3>Install the Required Workflow on n8n</h3>\n<p>You have two options:</p>\n<h4><strong>Option 1: Use the Latest Version from the n8n Marketplace</strong></h4>\n<ul>\n<li>The latest workflow templates for our modules are available on the official n8n marketplace.</li>\n<li>Visit our profile to access all available templates: <a href=\"https://n8n.io/creators/puqcloud/\" rel=\"ugc nofollow\" target=\"_blank\">PUQcloud on n8n</a></li>\n</ul>\n<h4><strong>Option 2: Manual Installation</strong></h4>\n<ul>\n<li>Each module version comes with a workflow template file.<br>\n<a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974273723.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974273723.png\" alt=\"image-1741974273723.png\"></a></li>\n<li>You need to manually import this template into your n8n server.<br>\n<a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741284912356.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741284912356.png\" alt=\"image-1741284912356.png\"></a></li>\n</ul>\n<h2>n8n Workflow API Backend Setup for WHMCS/WISECP</h2>\n<h3>Configure API Webhook and SSH Access</h3>\n<ul>\n<li>\n<p>Create a <strong>Basic Auth Credential</strong> for the Webhook API Block in n8n.<br>\n<a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974396480.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974396480.png\" alt=\"image-1741974396480.png\"></a></p>\n<p><a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974500641.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974500641.png\" alt=\"image-1741974500641.png\"></a></p>\n<p><a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285036996.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285036996.png\" alt=\"image-1741285036996.png\"></a></p>\n</li>\n<li>\n<p>Create an <strong>SSH Credential</strong> for accessing a server with Docker installed.<br>\n<a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285118412.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285118412.png\" alt=\"image-1741285118412.png\"></a></p>\n<p><a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285147192.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285147192.png\" alt=\"image-1741285147192.png\"></a></p>\n<p><a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285198822.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285198822.png\" alt=\"image-1741285198822.png\"></a></p>\n</li>\n</ul>\n<h3>Modify Template Parameters</h3>\n<p>In the <strong>Parameters</strong> block of the template, update the following settings:</p>\n<p><a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974559641.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974559641.png\" alt=\"image-1741974559641.png\"></a></p>\n<p><a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285412110.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285412110.png\" alt=\"image-1741285412110.png\"></a></p>\n<ul>\n<li><code>server_domain</code> – Must match the domain of the WHMCS/WISECP Docker server.</li>\n<li><code>clients_dir</code> – Directory where user data related to Docker and disks will be stored.</li>\n<li><code>mount_dir</code> – Default mount point for the container disk (recommended not to change).</li>\n</ul>\n<p><strong>Do not modify</strong> the following technical parameters:</p>\n<ul>\n<li><code>screen_left</code></li>\n<li><code>screen_right</code></li>\n</ul>\n<h3><strong>Deploy-docker-compose</strong></h3>\n<p>In the <strong>Deploy-docker-compose</strong> element, you have the ability to modify the Docker Compose configuration, which will be generated in the following scenarios:</p>\n<ul>\n<li>When the service is created</li>\n<li>When the service is unlocked</li>\n<li>When the service is updated</li>\n</ul>\n<p><a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741875704524.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741875704524.png\" alt=\"image-1741875704524.png\"></a></p>\n<p><a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974602887.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974602887.png\" alt=\"image-1741974602887.png\"></a></p>\n<h3><strong>nginx</strong></h3>\n<p>In the <strong>nginx</strong> element, you can modify the configuration parameters of the web interface proxy server.</p>\n<ul>\n<li>The <strong>main</strong> section allows you to add custom parameters to the <strong>server</strong> block in the proxy server configuration file.</li>\n<li>The <strong>main_location</strong> section contains settings that will be added to the <strong>location /</strong> block of the proxy server configuration. Here, you can define custom headers and other parameters specific to the root location.</li>\n</ul>\n<p><a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741875960357.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741875960357.png\" alt=\"image-1741875960357.png\"></a></p>\n<p><a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974633761.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974633761.png\" alt=\"image-1741974633761.png\"></a></p>\n<h3><strong>Bash Scripts</strong></h3>\n<p>Management of Docker containers and all related procedures on the server is carried out by executing Bash scripts generated in <strong>n8n</strong>. These scripts return either a JSON response or a string.</p>\n<ul>\n<li>All scripts are located in elements directly connected to the <strong>SSH</strong> element.</li>\n<li>You have full control over any script and can modify or execute it as needed.</li>\n</ul>\n<p><a href=\"https://doc.puq.info/uploads/images/gallery/2025-03/image-1741876353319.png\" rel=\"ugc nofollow\" target=\"_blank\"><img src=\"https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741876353319.png\" alt=\"image-1741876353319.png\"></a></p>\n</div><!--]-->",
  "readme_zh": "# 配置n8n工作流\n\n## 概述\n\n**Docker MinIO WHMCS模块**采用专为**n8n**设计的工作流来实现部署流程自动化。该工作流为模块提供API接口，接收特定指令并通过SSH连接已安装Docker的服务器执行预设操作。\n\n## 先决条件\n\n  * 需拥有自建**n8n**服务器\n  * 或使用官方**n8n**云服务：[n8n官网](https://n8n.partnerlinks.io/o692v7cg297k)\n\n## 安装步骤\n\n### 在n8n中安装工作流\n\n两种安装方式可选：\n\n#### **方案一：从n8n应用市场获取最新版**\n\n  * 最新工作流模板已发布至n8n官方市场\n  * 访问开发者主页获取所有模板：[PUQcloud on n8n](https://n8n.io/creators/puqcloud/)\n\n#### **方案二：手动安装**\n\n  * 每个模块版本均附带工作流模板文件  \n[![image-1741974273723.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974273723.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974273723.png)\n  * 需手动导入至n8n服务器  \n[![image-1741284912356.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741284912356.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741284912356.png)\n\n## WHMCS/WISECP的n8n工作流API后端配置\n\n### 配置API Webhook与SSH访问\n\n  * 为Webhook API模块创建**基础认证凭证**  \n[![image-1741974396480.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974396480.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974396480.png)\n\n[![image-1741974500641.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974500641.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974500641.png)\n\n[![image-1741285036996.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285036996.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285036996.png)\n\n  * 创建**SSH凭证**用于访问Docker服务器  \n[![image-1741285118412.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285118412.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285118412.png)\n\n[![image-1741285147192.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285147192.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285147192.png)\n\n[![image-1741285198822.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285198822.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285198822.png)\n\n### 修改模板参数\n\n在模板的**Parameters**模块中更新以下配置：\n\n[![image-1741974559641.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974559641.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974559641.png)\n\n[![image-1741285412110.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741285412110.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741285412110.png)\n\n  * `server_domain` – 必须与WHMCS/WISECP的Docker服务器域名一致\n  * `clients_dir` – 存储Docker相关用户数据及磁盘的目录\n  * `mount_dir` – 容器磁盘默认挂载点（建议保持默认）\n\n**禁止修改**以下技术参数：\n\n  * `screen_left`\n  * `screen_right`\n\n### **部署Docker编排文件**\n\n在**Deploy-docker-compose**元素中可修改Docker Compose配置，该配置将在以下场景生成：\n\n  * 服务创建时\n  * 服务解锁时\n  * 服务更新时\n\n[![image-1741875704524.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741875704524.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741875704524.png)\n\n[![image-1741974602887.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974602887.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974602887.png)\n\n### **Nginx配置**\n\n在**nginx**元素中可修改Web接口代理服务器的配置参数：\n\n  * **main**区块用于向代理配置的**server**块添加自定义参数\n  * **main_location**区块包含将插入**location /**的配置，可定义自定义请求头等根路径特有参数\n\n[![image-1741875960357.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741875960357.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741875960357.png)\n\n[![image-1741974633761.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741974633761.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741974633761.png)\n\n### **Bash脚本**\n\nDocker容器管理及所有服务器端操作均通过**n8n**生成的Bash脚本执行，脚本会返回JSON响应或字符串。\n\n  * 所有脚本位于与**SSH**元素直接连接的模块中\n  * 可完全控制任意脚本并按需修改\n\n[![image-1741876353319.png](https://doc.puq.info/uploads/images/gallery/2025-03/scaled-1680-/image-1741876353319.png)](https://doc.puq.info/uploads/images/gallery/2025-03/image-1741876353319.png)",
  "title_zh": "部署Docker版MinIO，为WHMCS/WISECP提供API后端支持",
  "publish_date_zh": "最后更新于6天前",
  "workflow_json_zh": "{\n  \"id\": \"IJYpB2CIAdLk8Umg\",\n  \"meta\": {\n    \"instanceId\": \"ffb0782f8b2cf4278577cb919e0cd26141bc9ff8774294348146d454633aa4e3\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"puq-docker-minio-deploy\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"d79fe295-a0b0-4871-8382-67d9af5d0d2c\",\n      \"name\": \"If\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        -2060,\n        -320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"or\",\n          \"conditions\": [\n            {\n              \"id\": \"b702e607-888a-42c9-b9a7-f9d2a64dfccd\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.server_domain }}\",\n              \"rightValue\": \"={{ $('API').item.json.body.server_domain }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"52c088af-95ae-411f-b1fa-f50b8ea99b58\",\n      \"name\": \"Parametrs\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -2280,\n        -320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"a6328600-7ee0-4031-9bdb-fcee99b79658\",\n              \"name\": \"server_domain\",\n              \"type\": \"string\",\n              \"value\": \"d01-test.uuq.pl\"\n            },\n            {\n              \"id\": \"370ddc4e-0fc0-48f6-9b30-ebdfba72c62f\",\n              \"name\": \"clients_dir\",\n              \"type\": \"string\",\n              \"value\": \"/opt/docker/clients\"\n            },\n            {\n              \"id\": \"92202bb8-6113-4bc5-9a29-79d238456df2\",\n              \"name\": \"mount_dir\",\n              \"type\": \"string\",\n              \"value\": \"/mnt\"\n            },\n            {\n              \"id\": \"baa52df2-9c10-42b2-939f-f05ea85ea2be\",\n              \"name\": \"screen_left\",\n              \"type\": \"string\",\n              \"value\": \"{{\"\n            },\n            {\n              \"id\": \"2b19ed99-2630-412a-98b6-4be44d35d2e7\",\n              \"name\": \"screen_right\",\n              \"type\": \"string\",\n              \"value\": \"}}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"9814333d-a9c1-4787-aed1-116db9395b88\",\n      \"name\": \"API\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [\n        -2600,\n        -320\n      ],\n      \"webhookId\": \"73068cf8-be17-4b10-b9a3-744f7e4843b0\",\n      \"parameters\": {\n        \"path\": \"docker-minio\",\n        \"options\": {},\n        \"httpMethod\": [\n          \"POST\"\n        ],\n        \"responseMode\": \"responseNode\",\n        \"authentication\": \"basicAuth\",\n        \"multipleMethods\": true\n      },\n      \"credentials\": {\n        \"httpBasicAuth\": {\n          \"id\": \"J4uXcnEb1SIQ2VN7\",\n          \"name\": \"MinIO\"\n        }\n      },\n      \"typeVersion\": 2\n    },\n    {\n      \"id\": \"a3e0156c-8033-4829-ab57-06e3708a7a09\",\n      \"name\": \"422-Invalid server domain\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        -2100,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 422\n        },\n        \"respondWith\": \"json\",\n        \"responseBody\": \"[{\\n  \\\"status\\\": \\\"error\\\",\\n  \\\"error\\\": \\\"Invalid server domain\\\"\\n}]\"\n      },\n      \"typeVersion\": 1.1,\n      \"alwaysOutputData\": false\n    },\n    {\n      \"id\": \"a5f410f8-ca52-4e85-b76f-651756c80de5\",\n      \"name\": \"Code1\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        800,\n        -240\n      ],\n      \"parameters\": {\n        \"mode\": \"runOnceForEachItem\",\n        \"jsCode\": \"try {\\n  if ($json.stdout === 'success') {\\n    return {\\n      json: {\\n        status: 'success',\\n        message: '',\\n        data: '',\\n      }\\n    };\\n  }\\n\\n  const parsedData = JSON.parse($json.stdout);\\n\\n  return {\\n    json: {\\n      status: parsedData.status === 'error' ? 'error' : 'success',\\n      message: parsedData.message || (parsedData.status === 'error' ? 'An error occurred' : ''),\\n      data: parsedData || '',\\n    }\\n  };\\n\\n} catch (error) {\\n  return {\\n    json: {\\n      status: 'error',\\n      message: $json.stdout??$json.error,\\n      data: '',\\n    }\\n  };\\n}\"\n      },\n      \"executeOnce\": false,\n      \"retryOnFail\": false,\n      \"typeVersion\": 2,\n      \"alwaysOutputData\": false\n    },\n    {\n      \"id\": \"e162574f-c3ce-4fd0-8b31-d251ea360389\",\n      \"name\": \"SSH\",\n      \"type\": \"n8n-nodes-base.ssh\",\n      \"onError\": \"continueErrorOutput\",\n      \"position\": [\n        500,\n        -240\n      ],\n      \"parameters\": {\n        \"cwd\": \"=/\",\n        \"command\": \"={{ $json.sh }}\"\n      },\n      \"credentials\": {\n        \"sshPassword\": {\n          \"id\": \"Cyjy61UWHwD2Xcd8\",\n          \"name\": \"d01-test.uuq.pl-puq\"\n        }\n      },\n      \"executeOnce\": true,\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"70f53357-5cdc-428c-876c-77036d6736cc\",\n      \"name\": \"Container Actions\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        -1680,\n        160\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"start\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"66ad264d-5393-410c-bfa3-011ab8eb234a\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_start\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"stop\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"b48957a0-22c0-4ac0-82ef-abd9e7ab0207\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_stop\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"mount_disk\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"727971bf-4218-41c1-9b07-22df4b947852\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_mount_disk\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"unmount_disk\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"0c80b1d9-e7ca-4cf3-b3ac-b40fdf4dd8f8\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_unmount_disk\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"container_get_acl\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"755e1a9f-667a-4022-9cb5-3f8153f62e95\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_get_acl\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"container_set_acl\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"8d75626f-789e-42fc-be5e-3a4e93a9bbc6\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_set_acl\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"container_get_net\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"c49d811a-735c-42f4-8b77-d0cd47b3d2b8\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_get_net\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"901a657d-873c-4b92-9949-d03e73a5313c\",\n      \"name\": \"Service Actions\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        -900,\n        -1300\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"test_connection\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"3afdd2f1-fe93-47c2-95cd-bac9b1d94eeb\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"test_connection\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"create\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"102f10e9-ec6c-4e63-ba95-0fe6c7dc0bd1\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"create\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"suspend\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"f62dfa34-6751-4b34-adcc-3d6ba1b21a8c\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"suspend\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"unsuspend\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"384d2026-b753-4c27-94c2-8f4fc189eb5f\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"unsuspend\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"terminate\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"0e190a97-827a-4e87-8222-093ff7048b21\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"terminate\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"change_package\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"6f7832f3-b61d-4517-ab6b-6007998136dd\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"change_package\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"1c59a844-f4ef-422f-abbf-288a55e11934\",\n      \"name\": \"API answer\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        820,\n        0\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"responseCode\": 200\n        },\n        \"respondWith\": \"allIncomingItems\"\n      },\n      \"typeVersion\": 1.1,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"c2019d97-1012-4089-84c3-305308f8603f\",\n      \"name\": \"Inspect\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1160,\n        -380\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\n\\nINSPECT_JSON=\\\"{}\\\"\\nif sudo docker ps -a --filter \\\"name=$CONTAINER_NAME\\\" | grep -q \\\"$CONTAINER_NAME\\\"; then\\n  INSPECT_JSON=$(sudo docker inspect \\\"$CONTAINER_NAME\\\")\\nfi\\n\\necho \\\"{\\\\\\\"inspect\\\\\\\": $INSPECT_JSON}\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"a274a2d1-2382-48a0-a94d-6ef89cd22a57\",\n      \"name\": \"Stat\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1060,\n        -240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status.json\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\n\\n# Initialize empty container data\\nINSPECT_JSON=\\\"{}\\\"\\nSTATS_JSON=\\\"{}\\\"\\n\\n# Check if container is running\\nif sudo docker ps -a --filter \\\"name=$CONTAINER_NAME\\\" | grep -q \\\"$CONTAINER_NAME\\\"; then\\n  # Get Docker inspect info in JSON (as raw string)\\n  INSPECT_JSON=$(sudo docker inspect \\\"$CONTAINER_NAME\\\")\\n\\n  # Get Docker stats info in JSON (as raw string)\\n  STATS_JSON=$(sudo docker stats --no-stream --format \\\"{{ $('Parametrs').item.json.screen_left }}json .{{ $('Parametrs').item.json.screen_right }}\\\" \\\"$CONTAINER_NAME\\\")\\n  STATS_JSON=${STATS_JSON:-'{}'}\\nfi\\n\\n# Initialize disk info variables\\nMOUNT_USED=\\\"N/A\\\"\\nMOUNT_FREE=\\\"N/A\\\"\\nMOUNT_TOTAL=\\\"N/A\\\"\\nMOUNT_PERCENT=\\\"N/A\\\"\\nIMG_SIZE=\\\"N/A\\\"\\nIMG_PERCENT=\\\"N/A\\\"\\nDISK_STATS_IMG=\\\"N/A\\\"\\n\\n# Check if mount directory exists and is accessible\\nif [ -d \\\"$MOUNT_DIR\\\" ]; then\\n  if mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    # Get disk usage for mounted directory\\n    DISK_STATS_MOUNT=$(df -h \\\"$MOUNT_DIR\\\" | tail -n 1)\\n    MOUNT_USED=$(echo \\\"$DISK_STATS_MOUNT\\\" | awk '{print $3}')\\n    MOUNT_FREE=$(echo \\\"$DISK_STATS_MOUNT\\\" | awk '{print $4}')\\n    MOUNT_TOTAL=$(echo \\\"$DISK_STATS_MOUNT\\\" | awk '{print $2}')\\n    MOUNT_PERCENT=$(echo \\\"$DISK_STATS_MOUNT\\\" | awk '{print $5}')\\n  fi\\nfi\\n\\n# Check if image file exists\\nif [ -f \\\"$IMG_FILE\\\" ]; then\\n  # Get disk usage for image file\\n  IMG_SIZE=$(du -sh \\\"$IMG_FILE\\\" | awk '{print $1}')\\nfi\\n\\n# Manually create a combined JSON object\\nFINAL_JSON=\\\"{\\\\\\\"inspect\\\\\\\": $INSPECT_JSON, \\\\\\\"stats\\\\\\\": $STATS_JSON, \\\\\\\"disk\\\\\\\": {\\\\\\\"mounted\\\\\\\": {\\\\\\\"used\\\\\\\": \\\\\\\"$MOUNT_USED\\\\\\\", \\\\\\\"free\\\\\\\": \\\\\\\"$MOUNT_FREE\\\\\\\", \\\\\\\"total\\\\\\\": \\\\\\\"$MOUNT_TOTAL\\\\\\\", \\\\\\\"percent\\\\\\\": \\\\\\\"$MOUNT_PERCENT\\\\\\\"}, \\\\\\\"img_file\\\\\\\": {\\\\\\\"size\\\\\\\": \\\\\\\"$IMG_SIZE\\\\\\\"}}}\\\"\\n\\n# Output the result\\necho \\\"$FINAL_JSON\\\"\\n\\nexit 0\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"3e80ebbe-bb8e-4fec-ab20-ba69271a48f8\",\n      \"name\": \"Start\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1180,\n        140\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\nif ! df -h | grep -q \\\"$MOUNT_DIR\\\"; then\\n    handle_error \\\"The file $IMG_FILE is not mounted to $MOUNT_DIR\\\"\\nfi\\n\\nif sudo docker ps --filter \\\"name={{ $('API').item.json.body.domain }}\\\" --filter \\\"status=running\\\" -q | grep -q .; then\\n    handle_error \\\"{{ $('API').item.json.body.domain }} container is running\\\"\\nfi\\n\\n# Change to the compose directory\\ncd \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to change directory to $COMPOSE_DIR\\\"\\n\\n# Start the Docker containers\\nif ! sudo docker-compose up -d > /dev/null 2>error.log; then\\n    ERROR_MSG=$(tail -n 10 error.log)\\n    handle_error \\\"Docker-compose failed: $ERROR_MSG\\\"\\nfi\\n\\n# Success\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"4e13ceea-a01f-438c-ba6f-27f55b88798b\",\n      \"name\": \"Stop\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1060,\n        240\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Check if Docker container is running\\nif ! sudo docker ps --filter \\\"name={{ $('API').item.json.body.domain }}\\\" --filter \\\"status=running\\\" -q | grep -q .; then\\n    handle_error \\\"{{ $('API').item.json.body.domain }} container is not running\\\"\\nfi\\n\\n# Stop and remove the Docker containers (also remove associated volumes)\\nif ! sudo docker-compose -f \\\"$COMPOSE_DIR/docker-compose.yml\\\" down > /dev/null 2>&1; then\\n    handle_error \\\"Failed to stop and remove docker-compose containers\\\"\\nfi\\n\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"afa7a4e2-85a6-420b-9e33-30802e9cbb7b\",\n      \"name\": \"Test Connection1\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -220,\n        -1320\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\n# Function to log an error, print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Check if Docker is installed\\nif ! command -v docker &> /dev/null; then\\n    handle_error \\\"Docker is not installed\\\"\\nfi\\n\\n# Check if Docker service is running\\nif ! systemctl is-active --quiet docker; then\\n    handle_error \\\"Docker service is not running\\\"\\nfi\\n\\n# Check if nginx-proxy container is running\\nif ! sudo docker ps --filter \\\"name=nginx-proxy\\\" --filter \\\"status=running\\\" -q > /dev/null; then\\n    handle_error \\\"nginx-proxy container is not running\\\"\\nfi\\n\\n# Check if letsencrypt-nginx-proxy-companion container is running\\nif ! sudo docker ps --filter \\\"name=letsencrypt-nginx-proxy-companion\\\" --filter \\\"status=running\\\" -q > /dev/null; then\\n    handle_error \\\"letsencrypt-nginx-proxy-companion container is not running\\\"\\nfi\\n\\n# If everything is successful\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"6c8261b4-f024-4b8e-a11c-1f2305e03e1d\",\n      \"name\": \"Deploy\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -220,\n        -1120\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\nDOCKER_COMPOSE_TEXT='{{ $('Deploy-docker-compose').item.json[\\\"docker-compose\\\"] }}'\\n\\nNGINX_MAIN_ACL_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_acl\\n\\nNGINX_MAIN_TEXT='{{ $('nginx').item.json['main'] }}'\\nNGINX_MAIN_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\n\\nNGINX_MAIN_LOCATION_TEXT='{{ $('nginx').item.json['main_location'] }}'\\nNGINX_MAIN_LOCATION_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_location\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\n\\n\\nNGINX_CONSOLE_ACL_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_acl\\n\\nNGINX_CONSOLE_TEXT='{{ $('nginx').item.json['console'] }}'\\nNGINX_CONSOLE_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"\\nVHOST_CONSOLE_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"\\n\\nNGINX_CONSOLE_LOCATION_TEXT='{{ $('nginx').item.json['console_location'] }}'\\nNGINX_CONSOLE_LOCATION_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_location\\nVHOST_CONSOLE_LOCATION_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"_location\\n\\n\\nDISK_SIZE=\\\"{{ $('API').item.json.body.disk }}\\\"\\n\\n# Function to handle errors: write to the status file and print the message to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"$STATUS_JSON\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null  # Write error to the status file\\n    echo \\\"error: $1\\\"  # Print the error message to the console\\n    exit 1  # Exit the script with an error code\\n}\\n\\n# Check if the directory already exists. If yes, exit with an error.\\nif [ -d \\\"$COMPOSE_DIR\\\" ]; then\\n    echo \\\"error: Directory $COMPOSE_DIR already exists\\\"\\n    exit 1\\nfi\\n\\n# Create necessary directories with permissions\\nsudo mkdir -p \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $COMPOSE_DIR\\\"\\nsudo mkdir -p \\\"$NGINX_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_DIR\\\"\\nsudo mkdir -p \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $MOUNT_DIR\\\"\\n\\n# Set permissions on the created directories\\nsudo chmod -R 777 \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $COMPOSE_DIR\\\"\\nsudo chmod -R 777 \\\"$NGINX_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $NGINX_DIR\\\"\\nsudo chmod -R 777 \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $MOUNT_DIR\\\"\\n\\n# Create docker-compose.yml file\\necho \\\"$DOCKER_COMPOSE_TEXT\\\" | sudo tee \\\"$COMPOSE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $COMPOSE_FILE\\\"\\n\\n# Create NGINX configuration files\\necho \\\"\\\" | sudo tee \\\"$NGINX_MAIN_ACL_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_ACL_FILE\\\"\\necho \\\"\\\" | sudo tee \\\"$NGINX_CONSOLE_ACL_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_ACL_FILE\\\"\\n\\necho \\\"$NGINX_MAIN_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_FILE\\\"\\necho \\\"$NGINX_MAIN_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_LOCATION_FILE\\\"\\n\\necho \\\"$NGINX_CONSOLE_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_FILE\\\"\\necho \\\"$NGINX_CONSOLE_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_LOCATION_FILE\\\"\\n\\n# Change to the compose directory\\ncd \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to change directory to $COMPOSE_DIR\\\"\\n\\n# Create data.img file if it doesn't exist\\nif [ ! -f \\\"$IMG_FILE\\\" ]; then\\n    sudo fallocate -l \\\"$DISK_SIZE\\\"G \\\"$IMG_FILE\\\" > /dev/null 2>&1 || sudo truncate -s \\\"$DISK_SIZE\\\"G \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $IMG_FILE\\\"\\n    sudo mkfs.ext4 \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to format $IMG_FILE\\\"  # Format the image as ext4\\n    sync  # Synchronize the data to disk\\nfi\\n\\n# Add an entry to /etc/fstab for mounting if not already present\\nif ! grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    echo \\\"$IMG_FILE $MOUNT_DIR ext4 loop 0 0\\\" | sudo tee -a /etc/fstab > /dev/null || handle_error \\\"Failed to add entry to /etc/fstab\\\"\\nfi\\n\\n# Mount all entries in /etc/fstab\\nsudo mount -a || handle_error \\\"Failed to mount entries from /etc/fstab\\\"\\n\\n# Set permissions on the mount directory\\nsudo chmod -R 777 \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $MOUNT_DIR\\\"\\n\\n# Copy NGINX configuration files instead of creating symbolic links\\nsudo cp -f \\\"$NGINX_MAIN_FILE\\\" \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_FILE to $VHOST_MAIN_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_MAIN_LOCATION_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_LOCATION_FILE to $VHOST_MAIN_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_LOCATION_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_FILE\\\" \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_FILE to $VHOST_CONSOLE_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_LOCATION_FILE to $VHOST_CONSOLE_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_LOCATION_FILE\\\"\\n\\n# Start Docker containers using docker-compose\\nif ! sudo docker-compose up -d > /dev/null 2>error.log; then\\n    ERROR_MSG=$(tail -n 10 error.log)  # Read the last 10 lines from error.log\\n    handle_error \\\"Docker-compose failed: $ERROR_MSG\\\"\\nfi\\n\\n# If everything is successful, update the status file and print success message\\necho \\\"active\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"d2f48f02-1a75-445e-832b-f9bf1a4d4b71\",\n      \"name\": \"Suspend\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -220,\n        -960\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\n\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\nVHOST_CONSOLE_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"\\nVHOST_CONSOLE_LOCATION_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"_location\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"$STATUS_JSON\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Stop and remove Docker containers (also remove associated volumes)\\nif [ -f \\\"$COMPOSE_FILE\\\" ]; then\\n    if ! sudo docker-compose -f \\\"$COMPOSE_FILE\\\" down > /dev/null 2>&1; then\\n        handle_error \\\"Failed to stop and remove docker-compose containers\\\"\\n    fi\\nelse\\n    echo \\\"Warning: docker-compose.yml not found, skipping container stop.\\\"\\nfi\\n\\n# Remove mount entry from /etc/fstab if it exists\\nif grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    sudo sed -i \\\"\\\\|$(printf '%s\\\\n' \\\"$IMG_FILE\\\" | sed 's/[.[\\\\*^$]/\\\\\\\\&/g')|d\\\" /etc/fstab\\nfi\\n\\n# Unmount the image if it is mounted\\nif mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo umount \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to unmount $MOUNT_DIR\\\"\\nfi\\n\\n# Remove the mount directory\\nif [ -d \\\"$MOUNT_DIR\\\" ]; then\\n    sudo rm -rf \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to remove $MOUNT_DIR\\\"\\nfi\\n\\n# Remove NGINX configuration files\\n[ -f \\\"$VHOST_MAIN_FILE\\\" ] && sudo rm -f \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Warning: $VHOST_MAIN_FILE not found.\\\"\\n[ -f \\\"$VHOST_MAIN_LOCATION_FILE\\\" ] && sudo rm -f \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Warning: $VHOST_MAIN_LOCATION_FILE not found.\\\"\\n[ -f \\\"$VHOST_CONSOLE_FILE\\\" ] && sudo rm -f \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Warning: $VHOST_CONSOLE_FILE not found.\\\"\\n[ -f \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" ] && sudo rm -f \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Warning: $VHOST_CONSOLE_LOCATION_FILE not found.\\\"\\n\\n# Update status\\necho \\\"suspended\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n\\n# Success\\necho \\\"success\\\"\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"87b7f7c2-7f7e-49e5-846c-3f92d436b5b6\",\n      \"name\": \"Terminated\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -220,\n        -620\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\n\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\nVHOST_CONSOLE_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"\\nVHOST_CONSOLE_LOCATION_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"_location\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Stop and remove the Docker containers\\nif [ -f \\\"$COMPOSE_FILE\\\" ]; then\\n    sudo docker-compose -f \\\"$COMPOSE_FILE\\\" down > /dev/null 2>&1\\nfi\\n\\n# Remove the mount entry from /etc/fstab if it exists\\nif grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    sudo sed -i \\\"\\\\|$(printf '%s\\\\n' \\\"$IMG_FILE\\\" | sed 's/[.[\\\\*^$]/\\\\\\\\&/g')|d\\\" /etc/fstab\\nfi\\n\\n# Unmount the image if it is still mounted\\nif mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo umount \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to unmount $MOUNT_DIR\\\"\\nfi\\n\\n# Remove all related directories and files\\nfor item in \\\"$COMPOSE_DIR\\\" \\\"$VHOST_MAIN_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" \\\"$VHOST_CONSOLE_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\"; do\\n    if [ -e \\\"$item\\\" ]; then\\n        sudo rm -rf \\\"$item\\\" || handle_error \\\"Failed to remove $item\\\"\\n    fi\\ndone\\n\\necho \\\"success\\\"\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"610dc730-9a2f-4fbf-bbbe-ce31d1494422\",\n      \"name\": \"Unsuspend\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -220,\n        -800\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\nDOCKER_COMPOSE_TEXT='{{ $('Deploy-docker-compose').item.json[\\\"docker-compose\\\"] }}'\\n\\nNGINX_MAIN_ACL_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_acl\\n\\nNGINX_MAIN_TEXT='{{ $('nginx').item.json['main'] }}'\\nNGINX_MAIN_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\n\\nNGINX_MAIN_LOCATION_TEXT='{{ $('nginx').item.json['main_location'] }}'\\nNGINX_MAIN_LOCATION_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_location\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\n\\nNGINX_CONSOLE_ACL_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_acl\\n\\nNGINX_CONSOLE_TEXT='{{ $('nginx').item.json['console'] }}'\\nNGINX_CONSOLE_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"\\nVHOST_CONSOLE_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"\\n\\nNGINX_CONSOLE_LOCATION_TEXT='{{ $('nginx').item.json['console_location'] }}'\\nNGINX_CONSOLE_LOCATION_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_location\\nVHOST_CONSOLE_LOCATION_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"_location\\n\\nDISK_SIZE=\\\"{{ $('API').item.json.body.disk }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"$STATUS_JSON\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\nupdate_nginx_acl() {\\n    ACL_FILE=$1\\n    LOCATION_FILE=$2\\n    \\n    if [ -s \\\"$ACL_FILE\\\" ]; then  # Проверяем, что файл существует и не пустой\\n        VALID_LINES=$(grep -vE '^\\\\s*$' \\\"$ACL_FILE\\\")  # Убираем пустые строки\\n        if [ -n \\\"$VALID_LINES\\\" ]; then  # Если есть непустые строки\\n            while IFS= read -r line; do\\n                echo \\\"allow $line;\\\" | sudo tee -a \\\"$LOCATION_FILE\\\" > /dev/null || handle_error \\\"Failed to update $LOCATION_FILE\\\"\\n            done <<< \\\"$VALID_LINES\\\"\\n            echo \\\"deny all;\\\" | sudo tee -a \\\"$LOCATION_FILE\\\" > /dev/null || handle_error \\\"Failed to update $LOCATION_FILE\\\"\\n        fi\\n    fi\\n}\\n\\n# Create necessary directories with permissions\\nfor dir in \\\"$COMPOSE_DIR\\\" \\\"$NGINX_DIR\\\" \\\"$MOUNT_DIR\\\"; do\\n    sudo mkdir -p \\\"$dir\\\" || handle_error \\\"Failed to create $dir\\\"\\n    sudo chmod -R 777 \\\"$dir\\\" || handle_error \\\"Failed to set permissions on $dir\\\"\\ndone\\n\\n# Check if the image is already mounted using fstab\\nif ! grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    echo \\\"$IMG_FILE $MOUNT_DIR ext4 loop 0 0\\\" | sudo tee -a /etc/fstab > /dev/null || handle_error \\\"Failed to add fstab entry for $IMG_FILE\\\"\\nfi\\n\\n# Apply the fstab changes and mount the image\\nif ! mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo mount -a || handle_error \\\"Failed to mount image using fstab\\\"\\nfi\\n\\n# Create docker-compose.yml file\\necho \\\"$DOCKER_COMPOSE_TEXT\\\" | sudo tee \\\"$COMPOSE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $COMPOSE_FILE\\\"\\n\\n# Create NGINX configuration files\\necho \\\"$NGINX_MAIN_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_FILE\\\"\\necho \\\"$NGINX_MAIN_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_FILE\\\"\\n\\necho \\\"$NGINX_CONSOLE_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_FILE\\\"\\necho \\\"$NGINX_CONSOLE_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_LOCATION_FILE\\\"\\n\\n# Copy NGINX configuration files instead of creating symbolic links\\nsudo cp -f \\\"$NGINX_MAIN_FILE\\\" \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_FILE to $VHOST_MAIN_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_MAIN_LOCATION_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_LOCATION_FILE to $VHOST_MAIN_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_LOCATION_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_FILE\\\" \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_FILE to $VHOST_CONSOLE_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_LOCATION_FILE to $VHOST_CONSOLE_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_LOCATION_FILE\\\"\\n\\nupdate_nginx_acl \\\"$NGINX_MAIN_ACL_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\"\\nupdate_nginx_acl \\\"$NGINX_CONSOLE_ACL_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\"\\n\\n# Change to the compose directory\\ncd \\\"$COMPOSE_DIR\\\" || handle_error \\\"Failed to change directory to $COMPOSE_DIR\\\"\\n\\n# Start Docker containers using docker-compose\\n> error.log\\nif ! sudo docker-compose up -d > error.log 2>&1; then\\n    ERROR_MSG=$(tail -n 10 error.log)  # Read the last 10 lines from error.log\\n    handle_error \\\"Docker-compose failed: $ERROR_MSG\\\"\\nfi\\n\\n# If everything is successful, update the status file and print success message\\necho \\\"active\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\necho \\\"success\\\"\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"8d6893c3-9597-43fe-bbec-ba3c55d2c220\",\n      \"name\": \"Mount Disk\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1180,\n        360\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Create necessary directories with permissions\\nsudo mkdir -p \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $MOUNT_DIR\\\"\\nsudo chmod 777 \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to set permissions on $MOUNT_DIR\\\"\\n\\nif df -h | grep -q \\\"$MOUNT_DIR\\\"; then\\n    handle_error \\\"The file $IMG_FILE is mounted to $MOUNT_DIR\\\"\\nfi\\n\\nif ! grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    echo \\\"$IMG_FILE $MOUNT_DIR ext4 loop 0 0\\\" | sudo tee -a /etc/fstab > /dev/null || handle_error \\\"Failed to add entry to /etc/fstab\\\"\\nfi\\n\\nsudo mount -a || handle_error \\\"Failed to mount entries from /etc/fstab\\\"\\n\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"1b2182c6-7080-4b09-9699-2ba7c3292913\",\n      \"name\": \"Unmount Disk\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1060,\n        460\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/{{ $('API').item.json.body.domain }}\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\nif ! df -h | grep -q \\\"$MOUNT_DIR\\\"; then\\n    handle_error \\\"The file $IMG_FILE is not mounted to $MOUNT_DIR\\\"\\nfi\\n\\n# Remove the mount entry from /etc/fstab if it exists\\nif grep -q \\\"$IMG_FILE\\\" /etc/fstab; then\\n    sudo sed -i \\\"\\\\|$(printf '%s\\\\n' \\\"$IMG_FILE\\\" | sed 's/[.[\\\\*^$]/\\\\\\\\&/g')|d\\\" /etc/fstab\\nfi\\n\\n# Unmount the image if it is mounted (using fstab)\\nif mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo umount \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to unmount $MOUNT_DIR\\\"\\nfi\\n\\n# Remove the mount directory (if needed)\\nif ! sudo rm -rf \\\"$MOUNT_DIR\\\" > /dev/null 2>&1; then\\n    handle_error \\\"Failed to remove $MOUNT_DIR\\\"\\nfi\\n\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"dd0cd3d9-876e-485c-94ed-f69e6f26c62b\",\n      \"name\": \"Log\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1180,\n        -100\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\nLOGS_JSON=\\\"{}\\\"\\n\\n# Function to return error in JSON format\\nhandle_error() {\\n    echo \\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    exit 1\\n}\\n\\n# Check if the container exists\\nif ! sudo docker ps -a | grep -q \\\"$CONTAINER_NAME\\\" > /dev/null 2>&1; then\\n    handle_error \\\"Container $CONTAINER_NAME not found\\\"\\nfi\\n\\n# Get logs of the container\\nLOGS=$(sudo docker logs --tail 1000 \\\"$CONTAINER_NAME\\\" 2>&1)\\nif [ $? -ne 0 ]; then\\n    handle_error \\\"Failed to retrieve logs for $CONTAINER_NAME\\\"\\nfi\\n\\n# Escape double quotes in logs for valid JSON\\nLOGS_ESCAPED=$(echo \\\"$LOGS\\\" | sed 's/\\\"/\\\\\\\\\\\"/g' | sed ':a;N;$!ba;s/\\\\n/\\\\\\\\n/g')\\n\\n# Format logs as JSON\\nLOGS_JSON=\\\"{\\\\\\\"logs\\\\\\\": \\\\\\\"$LOGS_ESCAPED\\\\\\\"}\\\"\\n\\necho \\\"$LOGS_JSON\\\"\\nexit 0\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"64e41e91-62b3-4346-874b-e952201fecb5\",\n      \"name\": \"ChangePackage\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -220,\n        -440\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nCOMPOSE_FILE=\\\"$COMPOSE_DIR/docker-compose.yml\\\"\\nSTATUS_FILE=\\\"$COMPOSE_DIR/status\\\"\\nIMG_FILE=\\\"$COMPOSE_DIR/data.img\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\nMOUNT_DIR=\\\"{{ $('Parametrs').item.json.mount_dir }}/$DOMAIN\\\"\\nDOCKER_COMPOSE_TEXT='{{ $('Deploy-docker-compose').item.json[\\\"docker-compose\\\"] }}'\\n\\nNGINX_MAIN_TEXT='{{ $('nginx').item.json['main'] }}'\\nNGINX_MAIN_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"\\nVHOST_MAIN_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"\\n\\nNGINX_MAIN_LOCATION_TEXT='{{ $('nginx').item.json['main_location'] }}'\\nNGINX_MAIN_LOCATION_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_location\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\n\\nNGINX_CONSOLE_TEXT='{{ $('nginx').item.json['console'] }}'\\nNGINX_CONSOLE_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"\\nVHOST_CONSOLE_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"\\n\\nNGINX_CONSOLE_LOCATION_TEXT='{{ $('nginx').item.json['console_location'] }}'\\nNGINX_CONSOLE_LOCATION_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_location\\nVHOST_CONSOLE_LOCATION_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"_location\\n\\nDISK_SIZE=\\\"{{ $('API').item.json.body.disk }}\\\"\\n\\n# Function to log an error, write to status file, and print to console\\nhandle_error() {\\n    STATUS_JSON=\\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    echo \\\"$STATUS_JSON\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Check if the compose file exists before stopping the container\\nif [ -f \\\"$COMPOSE_FILE\\\" ]; then\\n    sudo docker-compose -f \\\"$COMPOSE_FILE\\\" down > /dev/null 2>&1 || handle_error \\\"Failed to stop containers\\\"\\nelse\\n    handle_error \\\"docker-compose.yml not found\\\"\\nfi\\n\\n# Unmount the image if it is currently mounted\\nif mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo umount \\\"$MOUNT_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to unmount $MOUNT_DIR\\\"\\nfi\\n\\n# Create docker-compose.yml file\\necho \\\"$DOCKER_COMPOSE_TEXT\\\" | sudo tee \\\"$COMPOSE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $COMPOSE_FILE\\\"\\n\\n# Create NGINX configuration files\\necho \\\"$NGINX_MAIN_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_FILE\\\"\\necho \\\"$NGINX_MAIN_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_MAIN_LOCATION_FILE\\\"\\n\\necho \\\"$NGINX_CONSOLE_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_FILE\\\"\\necho \\\"$NGINX_CONSOLE_LOCATION_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to create $NGINX_CONSOLE_LOCATION_FILE\\\"\\n\\n# Resize the disk image if it exists\\nif [ -f \\\"$IMG_FILE\\\" ]; then\\n    sudo truncate -s \\\"$DISK_SIZE\\\"G \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to resize $IMG_FILE (truncate)\\\"\\n    sudo e2fsck -fy \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Filesystem check failed on $IMG_FILE\\\"\\n    sudo resize2fs \\\"$IMG_FILE\\\" > /dev/null 2>&1 || handle_error \\\"Failed to resize filesystem on $IMG_FILE\\\"\\nelse\\n    handle_error \\\"Disk image $IMG_FILE does not exist\\\"\\nfi\\n\\n# Mount the disk only if it is not already mounted\\nif ! mount | grep -q \\\"$MOUNT_DIR\\\"; then\\n    sudo mount -a || handle_error \\\"Failed to mount entries from /etc/fstab\\\"\\nfi\\n\\n# Change to the compose directory\\ncd \\\"$COMPOSE_DIR\\\" > /dev/null 2>&1 || handle_error \\\"Failed to change directory to $COMPOSE_DIR\\\"\\n\\n# Copy NGINX configuration files instead of creating symbolic links\\nsudo cp -f \\\"$NGINX_MAIN_FILE\\\" \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_FILE to $VHOST_MAIN_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_MAIN_LOCATION_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_LOCATION_FILE to $VHOST_MAIN_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_LOCATION_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_FILE\\\" \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_FILE to $VHOST_CONSOLE_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_LOCATION_FILE to $VHOST_CONSOLE_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_LOCATION_FILE\\\"\\n\\n# Start Docker containers using docker-compose\\nif ! sudo docker-compose up -d > /dev/null 2>error.log; then\\n    ERROR_MSG=$(tail -n 10 error.log)  # Read the last 10 lines from error.log\\n    handle_error \\\"Docker-compose failed: $ERROR_MSG\\\"\\nfi\\n\\n# Update status file\\necho \\\"active\\\" | sudo tee \\\"$STATUS_FILE\\\" > /dev/null\\n\\necho \\\"success\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"d7688118-55bb-4934-aac7-507bd3a3e956\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -2640,\n        -1280\n      ],\n      \"parameters\": {\n        \"color\": 6,\n        \"width\": 639,\n        \"height\": 909,\n        \"content\": \"## 👋 欢迎使用PUQ Docker MinIO部署方案！\\n## WHMCS/WISECP专用MinIO API后端模板 - PUQcloud出品\\n\\nv1.0\\n\\n本n8n模板用于为PUQcloud开发的WHMCS/WISECP模块创建API后端服务。\\n\\n## 配置指南\\n\\n### 1. 配置API网络钩子与SSH访问\\n- 在n8n中为**Webhook API模块**创建基础认证凭证(Basic Auth)\\n- 为已安装Docker的服务器的**SSH模块**创建访问凭证\\n\\n### 2. 修改模板参数\\n在模板的**参数模块**中更新以下配置项：\\n\\n- `server_domain` – 必须与WHMCS/WISECP的Docker服务器域名一致\\n- `clients_dir` – 存储用户Docker及磁盘数据的目录\\n- `mount_dir` – 容器磁盘的默认挂载点（建议保持默认）\\n\\n以下技术参数**请勿修改**：\\n- `screen_left`\\n- `screen_right`\\n\\n## 扩展资源\\n- 完整文档：[https://doc.puq.info/books/docker-minio-whmcs-module](https://doc.puq.info/books/docker-minio-whmcs-module)\\n- WHMCS模块下载：[https://puqcloud.com/whmcs-module-docker-minio.php](https://puqcloud.com/whmcs-module-docker-minio.php)\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e8b68657-ae60-4558-8ea0-768dba92fcba\",\n      \"name\": \"Deploy-docker-compose\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -1200,\n        -1360\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"docker-compose\",\n              \"type\": \"string\",\n              \"value\": \"=version: \\\"3\\\"\\n\\nservices:\\n  {{ $('API').item.json.body.domain }}:\\n    image: minio/minio\\n    restart: unless-stopped\\n    container_name: {{ $('API').item.json.body.domain }}\\n    command: server /data --console-address \\\":9001\\\"\\n    environment:\\n      MINIO_ROOT_USER: {{ $('API').item.json.body.username }}\\n      MINIO_ROOT_PASSWORD: {{ $('API').item.json.body.password }}\\n      MINIO_BROWSER_REDIRECT_URL: https://console.{{ $('API').item.json.body.domain }}\\n      LETSENCRYPT_HOST: {{ $('API').item.json.body.domain }},console.{{ $('API').item.json.body.domain }}\\n      VIRTUAL_HOST_MULTIPORTS: |-\\n          {{ $('API').item.json.body.domain }}:\\n            \\\"/\\\":\\n              port: 9000\\n          console.{{ $('API').item.json.body.domain }}:\\n            \\\"/\\\":\\n              port: 9001\\n    volumes:\\n      - \\\"{{ $('Parametrs').item.json.mount_dir }}/{{ $('API').item.json.body.domain }}/data:/data\\\"\\n    networks:\\n      - nginx-proxy_web\\n    mem_limit: \\\"{{ $('API').item.json.body.ram }}G\\\"\\n    cpus: \\\"{{ $('API').item.json.body.cpu }}\\\"\\n\\nnetworks:\\n  nginx-proxy_web:\\n    external: true\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"938520b1-aae6-4fe7-ac8e-e888f0793c8a\",\n      \"name\": \"Version\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1080,\n        1300\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\nVERSION_JSON=\\\"{}\\\"\\n\\n# Function to return error in JSON format\\nhandle_error() {\\n    echo \\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    exit 1\\n}\\n\\n# Check if the container exists\\nif ! sudo docker ps -a | grep -q \\\"$CONTAINER_NAME\\\" > /dev/null 2>&1; then\\n    handle_error \\\"Container $CONTAINER_NAME not found\\\"\\nfi\\n\\n# Get the MinIO version from the container (first line only)\\nVERSION=$(sudo docker exec \\\"$CONTAINER_NAME\\\" minio -v | head -n 1)\\n\\n# Extract just the version string\\nVERSION_CLEAN=$(echo \\\"$VERSION\\\" | awk '{print $3}')\\n\\n# Format version as JSON\\nVERSION_JSON=\\\"{\\\\\\\"version\\\\\\\": \\\\\\\"$VERSION_CLEAN\\\\\\\"}\\\"\\n\\necho \\\"$VERSION_JSON\\\"\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"d83a8249-9ad9-4772-bb1b-5484ebeb4b81\",\n      \"name\": \"Users\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1140,\n        1460\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\nCONTAINER_NAME=\\\"{{ $('API').item.json.body.domain }}\\\"\\nMINIO_USERNAME=\\\"{{ $('API').item.json.body.username }}\\\"\\nMINIO_PASSWORD=\\\"{{ $('API').item.json.body.password }}\\\"\\n\\n# Function to return error in JSON format\\nhandle_error() {\\n    echo \\\"{\\\\\\\"status\\\\\\\": \\\\\\\"error\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"$1\\\\\\\"}\\\"\\n    exit 1\\n}\\n\\n# Check if the container exists\\nif ! sudo docker ps -a | grep -q \\\"$CONTAINER_NAME\\\" > /dev/null 2>&1; then\\n    handle_error \\\"Container $CONTAINER_NAME not found\\\"\\nfi\\n\\n# Set alias for MinIO client\\nsudo docker exec \\\"$CONTAINER_NAME\\\" mc alias set local http://localhost:9000 \\\"$MINIO_USERNAME\\\" \\\"$MINIO_PASSWORD\\\" > /dev/null 2>&1\\n\\n# Get user list and format it correctly as JSON array\\nUSERS_JSON=$(sudo docker exec \\\"$CONTAINER_NAME\\\" mc admin user list local --json | jq -s '.')\\n\\n# Check if USERS_JSON is empty\\nif [ -z \\\"$USERS_JSON\\\" ]; then\\n    handle_error \\\"Failed to retrieve user list for $CONTAINER_NAME\\\"\\nfi\\n\\n# Wrap in a JSON object\\nJSON=\\\"{\\\\\\\"users\\\\\\\": $USERS_JSON}\\\"\\n\\necho \\\"$JSON\\\"\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"ba9b26be-31b6-47c9-85c1-719f346abc1a\",\n      \"name\": \"If1\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [\n        -1780,\n        -1260\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"or\",\n          \"conditions\": [\n            {\n              \"id\": \"8602bd4c-9693-4d5f-9e7d-5ee62210baca\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n              \"rightValue\": \"create\"\n            },\n            {\n              \"id\": \"1c630b59-0e5a-441d-8aa5-70b31338d897\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n              \"rightValue\": \"change_package\"\n            },\n            {\n              \"id\": \"b3eb7052-a70f-438e-befd-8c5240df32c7\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n              \"rightValue\": \"unsuspend\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"c08cfbd4-ef9a-4430-8a03-41ae209a3c92\",\n      \"name\": \"MinIO\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        -1680,\n        1380\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"version\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"66ad264d-5393-410c-bfa3-011ab8eb234a\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"app_version\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"users\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"b48957a0-22c0-4ac0-82ef-abd9e7ab0207\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"app_users\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"d75c83ca-c106-4b96-9db7-9f3ef1e20453\",\n      \"name\": \"nginx\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -1420,\n        -1360\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"main\",\n              \"type\": \"string\",\n              \"value\": \"=ignore_invalid_headers off;\\nclient_max_body_size 0;\\nproxy_buffering off;\\nproxy_request_buffering off;\"\n            },\n            {\n              \"id\": \"6507763a-21d4-4ff0-84d2-5dc9d21b7430\",\n              \"name\": \"main_location\",\n              \"type\": \"string\",\n              \"value\": \"=# Custom header\\nproxy_set_header Host $http_host;\\nproxy_set_header X-Real-IP $remote_addr;\\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\nproxy_set_header X-Forwarded-Proto $scheme;\\n\\nproxy_connect_timeout 300;\\n# Default is HTTP/1, keepalive is only enabled in HTTP/1.1\\nproxy_http_version 1.1;\\nproxy_set_header Connection \\\"\\\";\\nchunked_transfer_encoding off;\\n\"\n            },\n            {\n              \"id\": \"d00aa07a-0641-43ef-8fd2-5fb9ef62e313\",\n              \"name\": \"console\",\n              \"type\": \"string\",\n              \"value\": \"=ignore_invalid_headers off;\\nclient_max_body_size 0;\\nproxy_buffering off;\\nproxy_request_buffering off;\"\n            },\n            {\n              \"id\": \"c00fb803-8b9f-4aca-a1b1-2e3da42fc8d1\",\n              \"name\": \"console_location\",\n              \"type\": \"string\",\n              \"value\": \"=# Custom header\\nproxy_set_header Host $http_host;\\nproxy_set_header X-Real-IP $remote_addr;\\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\nproxy_set_header X-Forwarded-Proto $scheme;\\nproxy_set_header X-NginX-Proxy true;\\n\\nreal_ip_header X-Real-IP;\\nproxy_connect_timeout 300;\\nproxy_http_version 1.1;\\nproxy_set_header Upgrade $http_upgrade;\\nproxy_set_header Connection \\\"upgrade\\\";\\n  \\nchunked_transfer_encoding off;\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"70c2cb4d-af9d-4003-8aaf-e5800580552b\",\n      \"name\": \"Container Stat\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        -1680,\n        -240\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"inspect\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"66ad264d-5393-410c-bfa3-011ab8eb234a\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_information_inspect\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"stats\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"b48957a0-22c0-4ac0-82ef-abd9e7ab0207\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_information_stats\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"log\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"50ede522-af22-4b7a-b1fd-34b27fd3fadd\",\n                    \"operator\": {\n                      \"name\": \"filter.operator.equals\",\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"leftValue\": \"={{ $('API').item.json.body.command }}\",\n                    \"rightValue\": \"container_log\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"0bb2aeeb-8279-4f13-827f-a6559ef805b1\",\n      \"name\": \"GET ACL\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1180,\n        560\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\n\\nNGINX_MAIN_ACL_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_acl\\nNGINX_CONSOLE_ACL_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_acl\\n\\n# Function to log an error and exit\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Read files if they exist, else assign empty array\\nif [[ -f \\\"$NGINX_CONSOLE_ACL_FILE\\\" ]]; then\\n    WEB_CONSOLE_IPS=$(cat \\\"$NGINX_CONSOLE_ACL_FILE\\\" | jq -R -s 'split(\\\"\\\\n\\\") | map(select(length > 0))')\\nelse\\n    WEB_CONSOLE_IPS=\\\"[]\\\"\\nfi\\n\\nif [[ -f \\\"$NGINX_MAIN_ACL_FILE\\\" ]]; then\\n    REST_API_IPS=$(cat \\\"$NGINX_MAIN_ACL_FILE\\\" | jq -R -s 'split(\\\"\\\\n\\\") | map(select(length > 0))')\\nelse\\n    REST_API_IPS=\\\"[]\\\"\\nfi\\n\\n# Output JSON\\necho \\\"{ \\\\\\\"web_console_ips\\\\\\\": $WEB_CONSOLE_IPS, \\\\\\\"rest_api_ips\\\\\\\": $REST_API_IPS }\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"9603bee0-de6f-46bf-97d4-f7a2a4d27514\",\n      \"name\": \"SET ACL\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1060,\n        700\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nVHOST_DIR=\\\"/opt/docker/nginx-proxy/nginx/vhost.d\\\"\\n\\nNGINX_MAIN_ACL_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_acl\\nNGINX_MAIN_ACL_TEXT=\\\"{{ $('API').item.json.body.rest_api_ips }}\\\"\\nVHOST_MAIN_LOCATION_FILE=\\\"$VHOST_DIR/$DOMAIN\\\"_location\\nNGINX_MAIN_LOCATION_FILE=\\\"$NGINX_DIR/$DOMAIN\\\"_location\\n\\nNGINX_CONSOLE_ACL_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_acl\\nNGINX_CONSOLE_ACL_TEXT=\\\"{{ $('API').item.json.body.web_console_ips }}\\\"\\nVHOST_CONSOLE_LOCATION_FILE=\\\"$VHOST_DIR/console.$DOMAIN\\\"_location\\nNGINX_CONSOLE_LOCATION_FILE=\\\"$NGINX_DIR/console.$DOMAIN\\\"_location\\n\\n# Function to log an error and exit\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\nupdate_nginx_acl() {\\n    ACL_FILE=$1\\n    LOCATION_FILE=$2\\n    \\n    if [ -s \\\"$ACL_FILE\\\" ]; then\\n        VALID_LINES=$(grep -vE '^\\\\s*$' \\\"$ACL_FILE\\\")\\n        if [ -n \\\"$VALID_LINES\\\" ]; then\\n            while IFS= read -r line; do\\n                echo \\\"allow $line;\\\" | sudo tee -a \\\"$LOCATION_FILE\\\" > /dev/null || handle_error \\\"Failed to update $LOCATION_FILE\\\"\\n            done <<< \\\"$VALID_LINES\\\"\\n            echo \\\"deny all;\\\" | sudo tee -a \\\"$LOCATION_FILE\\\" > /dev/null || handle_error \\\"Failed to update $LOCATION_FILE\\\"\\n        fi\\n    fi\\n}\\n\\n# Create or overwrite the file with the content from variables\\necho \\\"$NGINX_MAIN_ACL_TEXT\\\" | sudo tee \\\"$NGINX_MAIN_ACL_FILE\\\" > /dev/null\\necho \\\"$NGINX_CONSOLE_ACL_TEXT\\\" | sudo tee \\\"$NGINX_CONSOLE_ACL_FILE\\\" > /dev/null\\n\\nsudo cp -f \\\"$NGINX_MAIN_LOCATION_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_MAIN_LOCATION_FILE to $VHOST_MAIN_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_MAIN_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_MAIN_LOCATION_FILE\\\"\\n\\nsudo cp -f \\\"$NGINX_CONSOLE_LOCATION_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to copy $NGINX_CONSOLE_LOCATION_FILE to $VHOST_CONSOLE_LOCATION_FILE\\\"\\nsudo chmod 777 \\\"$VHOST_CONSOLE_LOCATION_FILE\\\" || handle_error \\\"Failed to set permissions on $VHOST_CONSOLE_LOCATION_FILE\\\"\\n\\nupdate_nginx_acl \\\"$NGINX_MAIN_ACL_FILE\\\" \\\"$VHOST_MAIN_LOCATION_FILE\\\"\\nupdate_nginx_acl \\\"$NGINX_CONSOLE_ACL_FILE\\\" \\\"$VHOST_CONSOLE_LOCATION_FILE\\\"\\n\\n# Reload Nginx with sudo\\nif sudo docker exec nginx-proxy nginx -s reload; then\\n    echo \\\"success\\\"\\nelse\\n    handle_error \\\"Failed to reload Nginx.\\\"\\nfi\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"325e6cfc-f28e-490e-84a0-d8153e1c9fc9\",\n      \"name\": \"GET NET\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"onError\": \"continueRegularOutput\",\n      \"position\": [\n        -1180,\n        840\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"21f4453e-c136-4388-be90-1411ae78e8a5\",\n              \"name\": \"sh\",\n              \"type\": \"string\",\n              \"value\": \"=#!/bin/bash\\n\\n# Get values for variables from templates\\nDOMAIN=\\\"{{ $('API').item.json.body.domain }}\\\"\\nCOMPOSE_DIR=\\\"{{ $('Parametrs').item.json.clients_dir }}/$DOMAIN\\\"\\nNGINX_DIR=\\\"$COMPOSE_DIR/nginx\\\"\\nNET_IN_FILE=\\\"$COMPOSE_DIR/net_in\\\"\\nNET_OUT_FILE=\\\"$COMPOSE_DIR/net_out\\\"\\n\\n# Function to log an error and exit\\nhandle_error() {\\n    echo \\\"error: $1\\\"\\n    exit 1\\n}\\n\\n# Get current network statistics from container\\nSTATS=$(sudo docker exec \\\"$DOMAIN\\\" cat /proc/net/dev | grep eth0) || handle_error \\\"Failed to get network stats\\\"\\nNET_IN_NEW=$(echo \\\"$STATS\\\" | awk '{print $2}')  # RX bytes (received)\\nNET_OUT_NEW=$(echo \\\"$STATS\\\" | awk '{print $10}') # TX bytes (transmitted)\\n\\n# Ensure directory exists\\nmkdir -p \\\"$COMPOSE_DIR\\\"\\n\\n# Read old values, create files if they don't exist\\nif [[ -f \\\"$NET_IN_FILE\\\" ]]; then\\n    NET_IN_OLD=$(sudo cat \\\"$NET_IN_FILE\\\")\\nelse\\n    NET_IN_OLD=0\\nfi\\n\\nif [[ -f \\\"$NET_OUT_FILE\\\" ]]; then\\n    NET_OUT_OLD=$(sudo cat \\\"$NET_OUT_FILE\\\")\\nelse\\n    NET_OUT_OLD=0\\nfi\\n\\n# Save new values\\necho \\\"$NET_IN_NEW\\\" | sudo tee \\\"$NET_IN_FILE\\\" > /dev/null\\necho \\\"$NET_OUT_NEW\\\" | sudo tee \\\"$NET_OUT_FILE\\\" > /dev/null\\n\\n# Output JSON\\necho \\\"{ \\\\\\\"net_in_new\\\\\\\": $NET_IN_NEW, \\\\\\\"net_out_new\\\\\\\": $NET_OUT_NEW, \\\\\\\"net_in_old\\\\\\\": $NET_IN_OLD, \\\\\\\"net_out_old\\\\\\\": $NET_OUT_OLD }\\\"\\n\\nexit 0\\n\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4,\n      \"alwaysOutputData\": true\n    }\n  ],\n  \"active\": true,\n  \"pinData\": {},\n  \"settings\": {\n    \"timezone\": \"America/Winnipeg\",\n    \"callerPolicy\": \"workflowsFromSameOwner\",\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"930dd393-6eff-43d5-8446-30ba19fce16d\",\n  \"connections\": {\n    \"If\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Container Stat\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Container Actions\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"MinIO\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"If1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"422-Invalid server domain\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"API\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parametrs\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        []\n      ]\n    },\n    \"If1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"nginx\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Service Actions\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Log\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"SSH\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Code1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Stat\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Stop\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"API answer\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"MinIO\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Version\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Users\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Start\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Users\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"nginx\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Deploy-docker-compose\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Deploy\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"GET ACL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"GET NET\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Inspect\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"SET ACL\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Suspend\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        []\n      ]\n    },\n    \"Version\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Parametrs\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Unsuspend\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Mount Disk\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Terminated\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Unmount Disk\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"ChangePackage\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Container Stat\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Inspect\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Stat\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Log\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Service Actions\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Test Connection1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Deploy\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Suspend\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Unsuspend\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Terminated\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"ChangePackage\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Test Connection1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"SSH\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Container Actions\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Start\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Stop\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Mount Disk\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Unmount Disk\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"GET ACL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"SET ACL\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"GET NET\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Deploy-docker-compose\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Service Actions\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}