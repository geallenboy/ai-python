{
  "title": "Remote IOT Sensor monitoring via MQTT and InfluxDB",
  "url": "https://n8n.io/workflows/4004-remote-iot-sensor-monitoring-via-mqtt-and-influxdb/",
  "category": "Engineering",
  "category_url": "https://n8n.io/workflows/categories/engineering/?sort=createdAt:desc",
  "author": "Tony Duffy",
  "publish_date": "Last update a day ago",
  "publish_date_absolute": "",
  "content": "",
  "workflow_json": "{\"id\":\"6pOGYw5O3iOY1Gc6\",\"meta\":{\"instanceId\":\"7221598654c32899e94731aab144bdcd338735c2ac218dc0873131caa0be0ef8\",\"templateCredsSetupCompleted\":true},\"name\":\"Remote IOT Sensor monitoring via MQTT and InfluxDB\",\"tags\":[],\"nodes\":[{\"id\":\"4997f226-f236-4d27-bea4-904744d9ff07\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-700,-360],\"parameters\":{\"width\":340,\"height\":120,\"content\":\"MQTT trigger subscribed to a topic called wokwi-weather via a Mosquitto MQTT broker. The trigger receives the temperature and humidity payloads from a DHT22 sensor connected to a remote ESP32 microcontroller \"},\"typeVersion\":1},{\"id\":\"9d4f1da6-fda3-4312-a6b1-bd0ac499dde7\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-240,-360],\"parameters\":{\"height\":100,\"content\":\"Javascript code to extract the temperature and humidity values to ensure correct JSON format for the database\"},\"typeVersion\":1},{\"id\":\"d8f01dba-5019-457e-8c1a-99c802282fdf\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[140,-360],\"parameters\":{\"width\":260,\"height\":120,\"content\":\"HTTP request node posts temperature and humidity data from the DHT22 sensor to the InfluxDB data bucket running on a local host http://localhost:8086\"},\"typeVersion\":1},{\"id\":\"020858a6-7771-4322-8eb6-b83e99b3563d\",\"name\":\"Remote Sensor MQTT Trigger\",\"type\":\"n8n-nodes-base.mqttTrigger\",\"position\":[-580,-220],\"parameters\":{\"topics\":\"wokwi-weather\",\"options\":{}},\"credentials\":{\"mqtt\":{\"id\":\"xtd75tjk1hKlQOba\",\"name\":\"MQTT account\"}},\"typeVersion\":1},{\"id\":\"51e6f59f-9b93-4121-8db4-7f47b929fdf5\",\"name\":\"Data ingest to InfluxDB bucket\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[200,-220],\"parameters\":{\"url\":\"http://localhost:8086/api/v2/write?orgID=<Organization ID>&bucket=<InfluxDB bucket name>&precision=s\",\"body\":\"={{ $json.payload }}\",\"method\":\"POST\",\"options\":{},\"sendBody\":true,\"contentType\":\"raw\",\"sendHeaders\":true,\"headerParameters\":{\"parameters\":[{\"name\":\"Authorization\",\"value\":\"Token  <API Token value generated in InfluxDB>\"}]}},\"notesInFlow\":true,\"typeVersion\":4.2},{\"id\":\"6abe1212-b128-492f-b485-401a4315fcbc\",\"name\":\"Payload data preparation node\",\"type\":\"n8n-nodes-base.code\",\"position\":[-180,-220],\"parameters\":{\"jsCode\":\"// Try to parse the incoming message as JSON\\nlet data;\\ntry {\\n  data = JSON.parse($json.message); // $json.message is expected to be a JSON string\\n} catch (e) {\\n  // If parsing fails, throw an error\\n  throw new Error(\\\"Invalid JSON in MQTT message\\\");\\n}\\n\\n// Get the topic from the input, or use a default value\\nconst topic = $json.topic || \\\"unknown-topic\\\";\\n\\n// Make sure humidity and temp are numbers\\nif (typeof data.humidity !== \\\"number\\\" || typeof data.temp !== \\\"number\\\") {\\n  throw new Error(\\\"Missing or invalid humidity/temp in MQTT message\\\");\\n}\\n\\n// Create a formatted string like: \\\"topic_name humidity=45,temp=22\\\"\\nconst line = `${topic} humidity=${data.humidity},temp=${data.temp}`;\\n\\n// Return the result in the expected format\\nreturn [\\n  {\\n    json: {\\n      payload: line\\n    }\\n  }\\n];\"},\"typeVersion\":2}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"d1311dca-5edf-4f14-86b9-629937cd3416\",\"connections\":{\"Remote Sensor MQTT Trigger\":{\"main\":[[{\"node\":\"Payload data preparation node\",\"type\":\"main\",\"index\":0}]]},\"Payload data preparation node\":{\"main\":[[{\"node\":\"Data ingest to InfluxDB bucket\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": ".\n\n# Read and store IOT sensor data with the MQTT Trigger and InfluxDB\n\nThis workflow is for users wanting a practical example of how to obtain data from remote IOT systems using the MQTT protocol in an n8n environment.\n\nThe template provides typical n8n node implementation and configuration settings necessary to read and store IOT data.\n\nThe workflow reads the temperature and humidity data from a remote IOT system in this case a DHT22 sensor connected to a ESP32 micro controller. The data is parsed into the correct JSON format and then ingested in an InfluxDB data bucket. From there the stored temperature and humidity values can be displayed in real time.\n\nThe workflow can be easily modified to read any MQTT driven device data.\n\n## Remote IOT Sensor Setup\n\nThe ESP32 controller with the DHT22 sensor are running on a Wokwi simulator. The simulator uses micro python to publish a MQTT \"wokwi-weather\" topic with the temperature and humidity payloads to an online Mosquitto MQTT broker. The n8n MQTT trigger node subscribes to the topic on the broker and reads the payload values when any changes are published. The code node then prepares the payload for JSON format. The HTTP request node ingests the data in a InfluxDB bucket\n\n## How to customise this workflow to your needs\n\nWokwi IOT ESP32 simulator\n\n  * You will need to setup a free account at [Wokkwi.com](http://Wokkwi.com)\n  * Once created search for a project \"Micro-Python MQTT Weather Logger (ESP32)\"\n  * Then when the MQTT weather logger project is open change lines 28 and 29 to the following \n    * 28 MQTT_CLIENT_ID = \"\"\n    * 29 MQTT_BROKER = \"[test.mosquitto.org](http://test.mosquitto.org)\"\n  * You then can start the simulation by clicking on the green arrow and it will connect the mosquitto broker and the \"wokwi-weather\" topic will be published.\n  * By clicking on the DHT22 sensor the temperature and humidity bar will appear and you can change the values to send updated payload values to the broker.\n\n\n\nInfluxDB\n\nYou will require access to functioning InfluxDB database to utilise this workflow\n\nNote : You will have to provide the following for the HTTP request node to connect to InfluxDB.\n\n  * The URL and port of the desired InfluxDB (In this case the InfluxDB is running locally on port 8086 ie. <http://localhost:8086>.)\n  * InfluxDB bucket for the data. ( In this case the created bucket name is \"wokwi-data\")\n  * The Organization ID of the InfluxDB. This can be obtained for the InfluxDB admin page\n  * A generated API token to read and write to the InfluxDB bucket. Created from the InfluxDB admin\n\n\n\nn8n workflow.\n\n  * The MQTT trigger node is configured to subscribe to the \"wokwi-weather\" topic on the test Mosquitto MQTT broker. It reads the temperature and humidity data sent by ESP32.\n  * The code node uses Javascript to move the temperature and humidity payloads to JSON format. This is flexible and can easily modified.\n  * The HTTP request node posts the JSON payloads to the InfluxDB bucket.\n\n\n\nWhen the above is configured the workflow should function correctly.\n",
  "readme_html": "<!--[--><div data-v-859c7806=\"\"><p>.</p>\n<h1>Read and store IOT sensor data with the MQTT Trigger and InfluxDB</h1>\n<p>This workflow is for users wanting a practical example of how to obtain data from remote IOT systems using the MQTT protocol in an n8n environment.</p>\n<p>The template provides typical n8n node implementation and configuration settings necessary to read and store IOT data.</p>\n<p>The workflow reads the temperature and humidity data from a remote IOT system in this case a DHT22 sensor connected to a ESP32 micro controller. The data is parsed into the correct JSON format and then ingested in an InfluxDB data bucket. From there the stored temperature and humidity values can be displayed in real time.</p>\n<p>The workflow can be easily modified to read any MQTT driven device data.</p>\n<h2>Remote IOT Sensor Setup</h2>\n<p>The ESP32 controller with the DHT22 sensor are running on a Wokwi simulator.  The simulator uses micro python to publish a MQTT \"wokwi-weather\" topic with the temperature and humidity payloads to an online Mosquitto MQTT broker. The n8n MQTT trigger node subscribes to the topic on the broker and reads the payload values when any changes are published. The code node then prepares the payload for JSON format. The HTTP request node ingests the data in a InfluxDB bucket</p>\n<h2>How to customise this workflow to your needs</h2>\n<p>Wokwi IOT ESP32 simulator</p>\n<ul>\n<li>You will need to setup a free account at <a href=\"http://Wokkwi.com\" rel=\"ugc nofollow\" target=\"_blank\">Wokkwi.com</a></li>\n<li>Once created search for a project \"Micro-Python MQTT Weather Logger (ESP32)\"</li>\n<li>Then when the MQTT weather logger project is open change lines 28 and 29 to the following\n<ul>\n<li>28 MQTT_CLIENT_ID = \"\"</li>\n<li>29 MQTT_BROKER    = \"<a href=\"http://test.mosquitto.org\" rel=\"ugc nofollow\" target=\"_blank\">test.mosquitto.org</a>\"</li>\n</ul>\n</li>\n<li>You then can start the simulation by clicking on the green arrow and it will connect the mosquitto broker and the \"wokwi-weather\" topic will be published.</li>\n<li>By clicking on the DHT22 sensor the temperature and humidity bar will appear and you can change the values to send updated payload values to the broker.</li>\n</ul>\n<p>InfluxDB</p>\n<p>You will require access to functioning InfluxDB database to utilise this workflow</p>\n<p>Note : You will have to provide the following for the HTTP request node to connect to InfluxDB.</p>\n<ul>\n<li>The URL and port of the desired InfluxDB (In this case the InfluxDB is running locally on port 8086 ie. <a href=\"http://localhost:8086\" rel=\"ugc nofollow\" target=\"_blank\">http://localhost:8086</a>.)</li>\n<li>InfluxDB bucket for the data. ( In this case the created bucket name is \"wokwi-data\")</li>\n<li>The Organization ID of the InfluxDB. This can be obtained for the InfluxDB admin page</li>\n<li>A generated API token to read and write to the InfluxDB bucket. Created from the InfluxDB admin</li>\n</ul>\n<p>n8n workflow.</p>\n<ul>\n<li>The MQTT trigger node is configured to subscribe to the \"wokwi-weather\" topic on the test Mosquitto MQTT broker. It reads the temperature and humidity data sent by ESP32.</li>\n<li>The code node uses Javascript to move the temperature and humidity payloads to JSON format. This is flexible and can easily modified.</li>\n<li>The HTTP request node posts the JSON payloads to the InfluxDB bucket.</li>\n</ul>\n<p>When the above is configured the workflow should function correctly.</p>\n</div><!--]-->"
}