{
  "title": "Remote IOT Sensor monitoring via MQTT and InfluxDB",
  "url": "https://n8n.io/workflows/4004-remote-iot-sensor-monitoring-via-mqtt-and-influxdb/",
  "category": "Engineering",
  "category_url": "https://n8n.io/workflows/categories/engineering/?sort=createdAt:desc",
  "author": "Tony Duffy",
  "publish_date": "Last update a day ago",
  "publish_date_absolute": "",
  "content": "",
  "workflow_json": "{\"id\":\"6pOGYw5O3iOY1Gc6\",\"meta\":{\"instanceId\":\"7221598654c32899e94731aab144bdcd338735c2ac218dc0873131caa0be0ef8\",\"templateCredsSetupCompleted\":true},\"name\":\"Remote IOT Sensor monitoring via MQTT and InfluxDB\",\"tags\":[],\"nodes\":[{\"id\":\"4997f226-f236-4d27-bea4-904744d9ff07\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-700,-360],\"parameters\":{\"width\":340,\"height\":120,\"content\":\"MQTT trigger subscribed to a topic called wokwi-weather via a Mosquitto MQTT broker. The trigger receives the temperature and humidity payloads from a DHT22 sensor connected to a remote ESP32 microcontroller \"},\"typeVersion\":1},{\"id\":\"9d4f1da6-fda3-4312-a6b1-bd0ac499dde7\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-240,-360],\"parameters\":{\"height\":100,\"content\":\"Javascript code to extract the temperature and humidity values to ensure correct JSON format for the database\"},\"typeVersion\":1},{\"id\":\"d8f01dba-5019-457e-8c1a-99c802282fdf\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[140,-360],\"parameters\":{\"width\":260,\"height\":120,\"content\":\"HTTP request node posts temperature and humidity data from the DHT22 sensor to the InfluxDB data bucket running on a local host http://localhost:8086\"},\"typeVersion\":1},{\"id\":\"020858a6-7771-4322-8eb6-b83e99b3563d\",\"name\":\"Remote Sensor MQTT Trigger\",\"type\":\"n8n-nodes-base.mqttTrigger\",\"position\":[-580,-220],\"parameters\":{\"topics\":\"wokwi-weather\",\"options\":{}},\"credentials\":{\"mqtt\":{\"id\":\"xtd75tjk1hKlQOba\",\"name\":\"MQTT account\"}},\"typeVersion\":1},{\"id\":\"51e6f59f-9b93-4121-8db4-7f47b929fdf5\",\"name\":\"Data ingest to InfluxDB bucket\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[200,-220],\"parameters\":{\"url\":\"http://localhost:8086/api/v2/write?orgID=<Organization ID>&bucket=<InfluxDB bucket name>&precision=s\",\"body\":\"={{ $json.payload }}\",\"method\":\"POST\",\"options\":{},\"sendBody\":true,\"contentType\":\"raw\",\"sendHeaders\":true,\"headerParameters\":{\"parameters\":[{\"name\":\"Authorization\",\"value\":\"Token  <API Token value generated in InfluxDB>\"}]}},\"notesInFlow\":true,\"typeVersion\":4.2},{\"id\":\"6abe1212-b128-492f-b485-401a4315fcbc\",\"name\":\"Payload data preparation node\",\"type\":\"n8n-nodes-base.code\",\"position\":[-180,-220],\"parameters\":{\"jsCode\":\"// Try to parse the incoming message as JSON\\nlet data;\\ntry {\\n  data = JSON.parse($json.message); // $json.message is expected to be a JSON string\\n} catch (e) {\\n  // If parsing fails, throw an error\\n  throw new Error(\\\"Invalid JSON in MQTT message\\\");\\n}\\n\\n// Get the topic from the input, or use a default value\\nconst topic = $json.topic || \\\"unknown-topic\\\";\\n\\n// Make sure humidity and temp are numbers\\nif (typeof data.humidity !== \\\"number\\\" || typeof data.temp !== \\\"number\\\") {\\n  throw new Error(\\\"Missing or invalid humidity/temp in MQTT message\\\");\\n}\\n\\n// Create a formatted string like: \\\"topic_name humidity=45,temp=22\\\"\\nconst line = `${topic} humidity=${data.humidity},temp=${data.temp}`;\\n\\n// Return the result in the expected format\\nreturn [\\n  {\\n    json: {\\n      payload: line\\n    }\\n  }\\n];\"},\"typeVersion\":2}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"d1311dca-5edf-4f14-86b9-629937cd3416\",\"connections\":{\"Remote Sensor MQTT Trigger\":{\"main\":[[{\"node\":\"Payload data preparation node\",\"type\":\"main\",\"index\":0}]]},\"Payload data preparation node\":{\"main\":[[{\"node\":\"Data ingest to InfluxDB bucket\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": ".\n\n# Read and store IOT sensor data with the MQTT Trigger and InfluxDB\n\nThis workflow is for users wanting a practical example of how to obtain data from remote IOT systems using the MQTT protocol in an n8n environment.\n\nThe template provides typical n8n node implementation and configuration settings necessary to read and store IOT data.\n\nThe workflow reads the temperature and humidity data from a remote IOT system in this case a DHT22 sensor connected to a ESP32 micro controller. The data is parsed into the correct JSON format and then ingested in an InfluxDB data bucket. From there the stored temperature and humidity values can be displayed in real time.\n\nThe workflow can be easily modified to read any MQTT driven device data.\n\n## Remote IOT Sensor Setup\n\nThe ESP32 controller with the DHT22 sensor are running on a Wokwi simulator. The simulator uses micro python to publish a MQTT \"wokwi-weather\" topic with the temperature and humidity payloads to an online Mosquitto MQTT broker. The n8n MQTT trigger node subscribes to the topic on the broker and reads the payload values when any changes are published. The code node then prepares the payload for JSON format. The HTTP request node ingests the data in a InfluxDB bucket\n\n## How to customise this workflow to your needs\n\nWokwi IOT ESP32 simulator\n\n  * You will need to setup a free account at [Wokkwi.com](http://Wokkwi.com)\n  * Once created search for a project \"Micro-Python MQTT Weather Logger (ESP32)\"\n  * Then when the MQTT weather logger project is open change lines 28 and 29 to the following \n    * 28 MQTT_CLIENT_ID = \"\"\n    * 29 MQTT_BROKER = \"[test.mosquitto.org](http://test.mosquitto.org)\"\n  * You then can start the simulation by clicking on the green arrow and it will connect the mosquitto broker and the \"wokwi-weather\" topic will be published.\n  * By clicking on the DHT22 sensor the temperature and humidity bar will appear and you can change the values to send updated payload values to the broker.\n\n\n\nInfluxDB\n\nYou will require access to functioning InfluxDB database to utilise this workflow\n\nNote : You will have to provide the following for the HTTP request node to connect to InfluxDB.\n\n  * The URL and port of the desired InfluxDB (In this case the InfluxDB is running locally on port 8086 ie. <http://localhost:8086>.)\n  * InfluxDB bucket for the data. ( In this case the created bucket name is \"wokwi-data\")\n  * The Organization ID of the InfluxDB. This can be obtained for the InfluxDB admin page\n  * A generated API token to read and write to the InfluxDB bucket. Created from the InfluxDB admin\n\n\n\nn8n workflow.\n\n  * The MQTT trigger node is configured to subscribe to the \"wokwi-weather\" topic on the test Mosquitto MQTT broker. It reads the temperature and humidity data sent by ESP32.\n  * The code node uses Javascript to move the temperature and humidity payloads to JSON format. This is flexible and can easily modified.\n  * The HTTP request node posts the JSON payloads to the InfluxDB bucket.\n\n\n\nWhen the above is configured the workflow should function correctly.\n",
  "readme_html": "<!--[--><div data-v-859c7806=\"\"><p>.</p>\n<h1>Read and store IOT sensor data with the MQTT Trigger and InfluxDB</h1>\n<p>This workflow is for users wanting a practical example of how to obtain data from remote IOT systems using the MQTT protocol in an n8n environment.</p>\n<p>The template provides typical n8n node implementation and configuration settings necessary to read and store IOT data.</p>\n<p>The workflow reads the temperature and humidity data from a remote IOT system in this case a DHT22 sensor connected to a ESP32 micro controller. The data is parsed into the correct JSON format and then ingested in an InfluxDB data bucket. From there the stored temperature and humidity values can be displayed in real time.</p>\n<p>The workflow can be easily modified to read any MQTT driven device data.</p>\n<h2>Remote IOT Sensor Setup</h2>\n<p>The ESP32 controller with the DHT22 sensor are running on a Wokwi simulator.  The simulator uses micro python to publish a MQTT \"wokwi-weather\" topic with the temperature and humidity payloads to an online Mosquitto MQTT broker. The n8n MQTT trigger node subscribes to the topic on the broker and reads the payload values when any changes are published. The code node then prepares the payload for JSON format. The HTTP request node ingests the data in a InfluxDB bucket</p>\n<h2>How to customise this workflow to your needs</h2>\n<p>Wokwi IOT ESP32 simulator</p>\n<ul>\n<li>You will need to setup a free account at <a href=\"http://Wokkwi.com\" rel=\"ugc nofollow\" target=\"_blank\">Wokkwi.com</a></li>\n<li>Once created search for a project \"Micro-Python MQTT Weather Logger (ESP32)\"</li>\n<li>Then when the MQTT weather logger project is open change lines 28 and 29 to the following\n<ul>\n<li>28 MQTT_CLIENT_ID = \"\"</li>\n<li>29 MQTT_BROKER    = \"<a href=\"http://test.mosquitto.org\" rel=\"ugc nofollow\" target=\"_blank\">test.mosquitto.org</a>\"</li>\n</ul>\n</li>\n<li>You then can start the simulation by clicking on the green arrow and it will connect the mosquitto broker and the \"wokwi-weather\" topic will be published.</li>\n<li>By clicking on the DHT22 sensor the temperature and humidity bar will appear and you can change the values to send updated payload values to the broker.</li>\n</ul>\n<p>InfluxDB</p>\n<p>You will require access to functioning InfluxDB database to utilise this workflow</p>\n<p>Note : You will have to provide the following for the HTTP request node to connect to InfluxDB.</p>\n<ul>\n<li>The URL and port of the desired InfluxDB (In this case the InfluxDB is running locally on port 8086 ie. <a href=\"http://localhost:8086\" rel=\"ugc nofollow\" target=\"_blank\">http://localhost:8086</a>.)</li>\n<li>InfluxDB bucket for the data. ( In this case the created bucket name is \"wokwi-data\")</li>\n<li>The Organization ID of the InfluxDB. This can be obtained for the InfluxDB admin page</li>\n<li>A generated API token to read and write to the InfluxDB bucket. Created from the InfluxDB admin</li>\n</ul>\n<p>n8n workflow.</p>\n<ul>\n<li>The MQTT trigger node is configured to subscribe to the \"wokwi-weather\" topic on the test Mosquitto MQTT broker. It reads the temperature and humidity data sent by ESP32.</li>\n<li>The code node uses Javascript to move the temperature and humidity payloads to JSON format. This is flexible and can easily modified.</li>\n<li>The HTTP request node posts the JSON payloads to the InfluxDB bucket.</li>\n</ul>\n<p>When the above is configured the workflow should function correctly.</p>\n</div><!--]-->",
  "readme_zh": "# 使用MQTT触发器与InfluxDB读取并存储物联网传感器数据\n\n本工作流为需要实际案例的用户展示如何在n8n环境中通过MQTT协议获取远程物联网系统数据。\n\n该模板提供了典型的n8n节点实现方案及配置参数，用于读取和存储物联网数据。\n\n工作流从远程物联网系统（本案例中为连接ESP32微控制器的DHT22传感器）读取温湿度数据，将数据解析为正确JSON格式后存入InfluxDB数据桶，从而实现温湿度数值的实时展示。\n\n本方案可轻松适配任何MQTT驱动的设备数据读取需求。\n\n## 远程物联网传感器配置\n\n搭载DHT22传感器的ESP32控制器运行在Wokwi模拟器上。该模拟器使用MicroPython向在线Mosquitto MQTT代理发布包含温湿度数据的\"wokwi-weather\"主题。n8n的MQTT触发器节点订阅该主题，当代理发布数据变更时读取有效载荷。代码节点随后将数据转换为JSON格式，最终通过HTTP请求节点将数据写入InfluxDB存储桶。\n\n## 自定义工作流指南\n\nWokwi物联网ESP32模拟器\n* 需在[Wokkwi.com](http://Wokkwi.com)注册免费账户\n* 创建后搜索\"Micro-Python MQTT Weather Logger (ESP32)\"项目\n* 打开MQTT气象记录项目后修改第28-29行为：\n  * 28行 MQTT_CLIENT_ID = \"\"\n  * 29行 MQTT_BROKER = \"[test.mosquitto.org](http://test.mosquitto.org)\"\n* 点击绿色箭头启动模拟，连接Mosquitto代理后即开始发布\"wokwi-weather\"主题\n* 点击DHT22传感器将显示温湿度调节条，修改数值即可向代理发送更新数据\n\nInfluxDB配置\n* 需确保拥有可正常运行的InfluxDB数据库\n* HTTP请求节点需配置以下参数：\n  * InfluxDB地址及端口（本示例为本地8086端口：<http://localhost:8086>）\n  * 数据存储桶名称（本示例为\"wokwi-data\"）\n  * 从InfluxDB管理页面获取的组织ID\n  * 具备存储桶读写权限的API密钥（通过InfluxDB管理界面生成）\n\nn8n工作流配置\n* MQTT触发器节点订阅测试用Mosquitto代理的\"wokwi-weather\"主题，读取ESP32发送的温湿度数据\n* 代码节点使用JavaScript将温湿度数据转换为JSON格式（该部分可灵活调整）\n* HTTP请求节点将JSON数据提交至InfluxDB存储桶\n\n完成上述配置后，工作流即可正常运行。",
  "title_zh": "通过MQTT和InfluxDB实现远程物联网传感器监控",
  "publish_date_zh": "最近更新于一天前",
  "workflow_json_zh": "{\n  \"id\": \"6pOGYw5O3iOY1Gc6\",\n  \"meta\": {\n    \"instanceId\": \"7221598654c32899e94731aab144bdcd338735c2ac218dc0873131caa0be0ef8\",\n    \"templateCredsSetupCompleted\": true\n  },\n  \"name\": \"Remote IOT Sensor monitoring via MQTT and InfluxDB\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"4997f226-f236-4d27-bea4-904744d9ff07\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -700,\n        -360\n      ],\n      \"parameters\": {\n        \"width\": 340,\n        \"height\": 120,\n        \"content\": \"MQTT触发器通过Mosquitto MQTT代理订阅了名为wokwi-weather的主题。该触发器接收来自连接至远程ESP32微控制器的DHT22传感器所发送的温度和湿度数据负载。\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9d4f1da6-fda3-4312-a6b1-bd0ac499dde7\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -240,\n        -360\n      ],\n      \"parameters\": {\n        \"height\": 100,\n        \"content\": \"提取温度和湿度值的Javascript代码，以确保数据库的JSON格式正确\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d8f01dba-5019-457e-8c1a-99c802282fdf\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        140,\n        -360\n      ],\n      \"parameters\": {\n        \"width\": 260,\n        \"height\": 120,\n        \"content\": \"HTTP请求节点将来自DHT22传感器的温湿度数据发送至运行在本地主机http://localhost:8086上的InfluxDB数据存储桶\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"020858a6-7771-4322-8eb6-b83e99b3563d\",\n      \"name\": \"Remote Sensor MQTT Trigger\",\n      \"type\": \"n8n-nodes-base.mqttTrigger\",\n      \"position\": [\n        -580,\n        -220\n      ],\n      \"parameters\": {\n        \"topics\": \"wokwi-weather\",\n        \"options\": {}\n      },\n      \"credentials\": {\n        \"mqtt\": {\n          \"id\": \"xtd75tjk1hKlQOba\",\n          \"name\": \"MQTT account\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"51e6f59f-9b93-4121-8db4-7f47b929fdf5\",\n      \"name\": \"Data ingest to InfluxDB bucket\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        200,\n        -220\n      ],\n      \"parameters\": {\n        \"url\": \"http://localhost:8086/api/v2/write?orgID=<Organization ID>&bucket=<InfluxDB bucket name>&precision=s\",\n        \"body\": \"={{ $json.payload }}\",\n        \"method\": \"POST\",\n        \"options\": {},\n        \"sendBody\": true,\n        \"contentType\": \"raw\",\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Authorization\",\n              \"value\": \"Token  <API Token value generated in InfluxDB>\"\n            }\n          ]\n        }\n      },\n      \"notesInFlow\": true,\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"6abe1212-b128-492f-b485-401a4315fcbc\",\n      \"name\": \"Payload data preparation node\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [\n        -180,\n        -220\n      ],\n      \"parameters\": {\n        \"jsCode\": \"// Try to parse the incoming message as JSON\\nlet data;\\ntry {\\n  data = JSON.parse($json.message); // $json.message is expected to be a JSON string\\n} catch (e) {\\n  // If parsing fails, throw an error\\n  throw new Error(\\\"Invalid JSON in MQTT message\\\");\\n}\\n\\n// Get the topic from the input, or use a default value\\nconst topic = $json.topic || \\\"unknown-topic\\\";\\n\\n// Make sure humidity and temp are numbers\\nif (typeof data.humidity !== \\\"number\\\" || typeof data.temp !== \\\"number\\\") {\\n  throw new Error(\\\"Missing or invalid humidity/temp in MQTT message\\\");\\n}\\n\\n// Create a formatted string like: \\\"topic_name humidity=45,temp=22\\\"\\nconst line = `${topic} humidity=${data.humidity},temp=${data.temp}`;\\n\\n// Return the result in the expected format\\nreturn [\\n  {\\n    json: {\\n      payload: line\\n    }\\n  }\\n];\"\n      },\n      \"typeVersion\": 2\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"d1311dca-5edf-4f14-86b9-629937cd3416\",\n  \"connections\": {\n    \"Remote Sensor MQTT Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Payload data preparation node\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Payload data preparation node\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Data ingest to InfluxDB bucket\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}"
}