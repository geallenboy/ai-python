{
  "title": "WordPress -  AI Chatbot to enhance user experience - with Supabase and OpenAI",
  "url": "https://n8n.io/workflows/2504-wordpress-ai-chatbot-to-enhance-user-experience-with-supabase-and-openai/",
  "category": "Product",
  "category_url": "https://n8n.io/workflows/categories/product/?count=20",
  "author": "Dataki",
  "publish_date": "Last update 6 months ago",
  "publish_date_absolute": "2024-11-23",
  "content": "",
  "workflow_json": "{\"id\":\"o8iTqIh2sVvnuWz5\",\"meta\":{\"instanceId\":\"b9faf72fe0d7c3be94b3ebff0778790b50b135c336412d28fd4fca2cbbf8d1f5\"},\"name\":\"RAG & GenAI App With WordPress Content\",\"tags\":[],\"nodes\":[{\"id\":\"c3738490-ed39-4774-b337-bf5ee99d0c72\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[500,940],\"parameters\":{},\"typeVersion\":1},{\"id\":\"3ab719bd-3652-433f-a597-9cd28f8cfcea\",\"name\":\"Embeddings OpenAI\",\"type\":\"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\"position\":[2580,1320],\"parameters\":{\"model\":\"text-embedding-3-small\",\"options\":{}},\"typeVersion\":1},{\"id\":\"e8639569-2091-44de-a84d-c3fc3ce54de4\",\"name\":\"Default Data Loader\",\"type\":\"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\",\"position\":[2800,1260],\"parameters\":{\"options\":{\"metadata\":{\"metadataValues\":[{\"name\":\"title\",\"value\":\"={{ $json.title }}\"},{\"name\":\"url\",\"value\":\"={{ $json.url }}\"},{\"name\":\"content_type\",\"value\":\"={{ $json.content_type }}\"},{\"name\":\"publication_date\",\"value\":\"={{ $json.publication_date }}\"},{\"name\":\"modification_date\",\"value\":\"={{ $json.modification_date }}\"},{\"name\":\"id\",\"value\":\"={{ $json.id }}\"}]}},\"jsonData\":\"={{ $json.data }}\",\"jsonMode\":\"expressionData\"},\"typeVersion\":1},{\"id\":\"e7f858eb-4dca-40ea-9da9-af953687e63d\",\"name\":\"Token Splitter\",\"type\":\"@n8n/n8n-nodes-langchain.textSplitterTokenSplitter\",\"position\":[2900,1480],\"parameters\":{\"chunkSize\":300,\"chunkOverlap\":30},\"typeVersion\":1},{\"id\":\"27585104-5315-4c11-b333-4b5d27d9bae4\",\"name\":\"Embeddings OpenAI1\",\"type\":\"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\"position\":[1400,2340],\"parameters\":{\"model\":\"text-embedding-3-small\",\"options\":{}},\"typeVersion\":1},{\"id\":\"35269a98-d905-4e4f-ae5b-dadad678f260\",\"name\":\"OpenAI Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\"position\":[2800,2300],\"parameters\":{\"model\":\"gpt-4o-mini\",\"options\":{}},\"typeVersion\":1},{\"id\":\"cd26b6fa-a8bb-4139-9bec-8656d90d8203\",\"name\":\"Postgres Chat Memory\",\"type\":\"@n8n/n8n-nodes-langchain.memoryPostgresChat\",\"position\":[2920,2300],\"parameters\":{\"tableName\":\"website_chat_histories\"},\"typeVersion\":1.1},{\"id\":\"7c718e1b-1398-49f3-ba67-f970a82983e0\",\"name\":\"Respond to Webhook\",\"type\":\"n8n-nodes-base.respondToWebhook\",\"position\":[3380,2060],\"parameters\":{\"options\":{}},\"typeVersion\":1.1},{\"id\":\"f91f18e0-7a04-4218-8490-bff35dfbf7a8\",\"name\":\"Set fields\",\"type\":\"n8n-nodes-base.set\",\"position\":[2360,2060],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"6888175b-853b-457a-96f7-33dfe952a05d\",\"name\":\"documents\",\"type\":\"string\",\"value\":\"={{ \\n  JSON.stringify(\\n    $json.documents.map(doc => ({\\n      metadata: \\n        'URL: ' + doc.metadata.url.replaceAll('&rsquo;', \\\"'\\\").replaceAll(/[\\\"]/g, '') + '\\\\n' +\\n        'Publication Date: ' + doc.metadata.publication_date.replaceAll(/[\\\"]/g, '') + '\\\\n' +\\n        'Modification Date: ' + doc.metadata.modification_date.replaceAll(/[\\\"]/g, '') + '\\\\n' +\\n        'Content Type: ' + doc.metadata.content_type.replaceAll(/[\\\"]/g, '') + '\\\\n' +\\n        'Title: ' + doc.metadata.title.replaceAll('&rsquo;', \\\"'\\\").replaceAll(/[\\\"]/g, '') + '\\\\n',\\n      \\n      page_content: doc.pageContent\\n    }))\\n  ).replaceAll(/[\\\\[\\\\]{}]/g, '')\\n}}\"},{\"id\":\"ae310b77-4560-4f44-8c4e-8d13f680072e\",\"name\":\"sessionId\",\"type\":\"string\",\"value\":\"={{ $('When chat message received').item.json.sessionId }}\"},{\"id\":\"8738f4de-b3c3-45ad-af4b-8311c8105c35\",\"name\":\"chatInput\",\"type\":\"string\",\"value\":\"={{ $('When chat message received').item.json.chatInput }}\"}]}},\"typeVersion\":3.4},{\"id\":\"7f392a40-e353-4bb2-9ecf-3ee330110b95\",\"name\":\"Embeddings OpenAI2\",\"type\":\"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\"position\":[6400,860],\"parameters\":{\"model\":\"text-embedding-3-small\",\"options\":{}},\"typeVersion\":1},{\"id\":\"9e045857-5fcd-4c4b-83ee-ceda28195b76\",\"name\":\"Default Data Loader1\",\"type\":\"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\",\"position\":[6500,860],\"parameters\":{\"options\":{\"metadata\":{\"metadataValues\":[{\"name\":\"title\",\"value\":\"={{ $json.title }}\"},{\"name\":\"url\",\"value\":\"={{ $json.url }}\"},{\"name\":\"content_type\",\"value\":\"={{ $json.content_type }}\"},{\"name\":\"publication_date\",\"value\":\"={{ $json.publication_date }}\"},{\"name\":\"modification_date\",\"value\":\"={{ $json.modification_date }}\"},{\"name\":\"id\",\"value\":\"={{ $json.id }}\"}]}},\"jsonData\":\"={{ $json.data }}\",\"jsonMode\":\"expressionData\"},\"typeVersion\":1},{\"id\":\"d0c1144b-4542-470e-8cbe-f985e839d9d0\",\"name\":\"Token Splitter1\",\"type\":\"@n8n/n8n-nodes-langchain.textSplitterTokenSplitter\",\"position\":[6500,980],\"parameters\":{\"chunkSize\":300,\"chunkOverlap\":30},\"typeVersion\":1},{\"id\":\"ec7cf1b2-f56f-45da-bb34-1dc8a66a7de6\",\"name\":\"Markdown1\",\"type\":\"n8n-nodes-base.markdown\",\"position\":[6240,900],\"parameters\":{\"html\":\"={{ $json.content }}\",\"options\":{}},\"typeVersion\":1},{\"id\":\"8399976b-340a-49ce-a5b6-f7339957aa9d\",\"name\":\"Postgres\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[4260,900],\"parameters\":{\"query\":\"select max(created_at) as last_workflow_execution from n8n_website_embedding_histories\",\"options\":{},\"operation\":\"executeQuery\"},\"typeVersion\":2.5},{\"id\":\"88e79403-06df-4f18-9e4c-a4c4e727aa17\",\"name\":\"Aggregate\",\"type\":\"n8n-nodes-base.aggregate\",\"position\":[3300,900],\"parameters\":{\"options\":{},\"aggregate\":\"aggregateAllItemData\"},\"typeVersion\":1},{\"id\":\"db7241e8-1c3a-4f91-99b7-383000f41afe\",\"name\":\"Aggregate1\",\"type\":\"n8n-nodes-base.aggregate\",\"position\":[6800,680],\"parameters\":{\"options\":{},\"aggregate\":\"aggregateAllItemData\"},\"typeVersion\":1},{\"id\":\"94bbba31-d83b-427f-a7dc-336725238294\",\"name\":\"Aggregate2\",\"type\":\"n8n-nodes-base.aggregate\",\"position\":[7180,1160],\"parameters\":{\"options\":{},\"fieldsToAggregate\":{\"fieldToAggregate\":[{\"fieldToAggregate\":\"metadata.id\"}]}},\"typeVersion\":1},{\"id\":\"52a110fa-cdd6-4b1d-99fe-394b5dfa0a1f\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[440,600],\"parameters\":{\"color\":5,\"width\":3308.2687575224263,\"height\":1015.3571428571431,\"content\":\"# Workflow 1 : Initial Embedding \\n## Use this workflow to create the initial embedding for your WordPress website content\\n\\n\"},\"typeVersion\":1},{\"id\":\"4cbf8135-a52b-4a54-b7b0-15ea27ce7ae3\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[3812,605],\"parameters\":{\"color\":5,\"width\":3785.6673412474183,\"height\":1020.4528919414245,\"content\":\"# Workflow 2 : Upsert\\n## Use this workflow to upsert embeddings for documents stored in the Supabase vector table\\n\"},\"typeVersion\":1},{\"id\":\"f6e954e0-a37a-45ac-9882-20f4f1944b70\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[440,1820],\"parameters\":{\"color\":5,\"width\":3235.199999999999,\"height\":817.9199999999992,\"content\":\"# Workflow 3 : Use this workflow to enable chat functionality with your website content. The chat can be embedded into your website to enhance user experience\"},\"typeVersion\":1},{\"id\":\"acbdd54b-f02a-41aa-a0ce-8642db560151\",\"name\":\"Wordpress - Get all posts\",\"type\":\"n8n-nodes-base.wordpress\",\"position\":[1260,880],\"parameters\":{\"options\":{},\"operation\":\"getAll\",\"returnAll\":true},\"typeVersion\":1},{\"id\":\"94fce59d-9336-4d49-a378-17335ec02e52\",\"name\":\"Wordpress - Get all pages\",\"type\":\"n8n-nodes-base.wordpress\",\"position\":[1260,1060],\"parameters\":{\"options\":{},\"resource\":\"page\",\"operation\":\"getAll\",\"returnAll\":true},\"typeVersion\":1},{\"id\":\"b00c92e5-1765-4fd9-9981-e01053992a0a\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1157,727],\"parameters\":{\"width\":1108.3519999999999,\"height\":561.4080000000004,\"content\":\"## Use filters to create embeddings only for content that you want to include in your GenAI application\"},\"typeVersion\":1},{\"id\":\"f8a22739-898d-456b-93f8-79f74b60a00c\",\"name\":\"Set fields1\",\"type\":\"n8n-nodes-base.set\",\"position\":[2320,900],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"de6711dc-d03c-488c-bef4-0a853e2d0a14\",\"name\":\"publication_date\",\"type\":\"string\",\"value\":\"={{ $json.date }}\"},{\"id\":\"f8e35dcc-c96c-4554-b6bc-8e5d7eca90e3\",\"name\":\"modification_date\",\"type\":\"string\",\"value\":\"={{ $json.modified }}\"},{\"id\":\"f6a6e3de-fe39-4cfc-ab07-c4ccfaef78f5\",\"name\":\"content_type\",\"type\":\"string\",\"value\":\"={{ $json.type }}\"},{\"id\":\"b0428598-073f-4560-9a0c-01caf3708921\",\"name\":\"title\",\"type\":\"string\",\"value\":\"={{ $json.title.rendered }}\"},{\"id\":\"534f51b4-b43a-40d3-8120-58df8043d909\",\"name\":\"url\",\"type\":\"string\",\"value\":\"={{ $json.link }}\"},{\"id\":\"dbe0c559-90bd-49f8-960e-0d85d5ed4f5e\",\"name\":\"content\",\"type\":\"string\",\"value\":\"={{ $json.content.rendered }}\"},{\"id\":\"892be7c6-b032-4129-b285-1986ed4ee046\",\"name\":\"protected\",\"type\":\"boolean\",\"value\":\"={{ $json.excerpt.protected }}\"},{\"id\":\"06fac885-4431-41ff-a43b-6eb84ca57401\",\"name\":\"status\",\"type\":\"string\",\"value\":\"={{ $json.status }}\"},{\"id\":\"43b1aea7-895e-41da-a0a6-2f1cec1f1b97\",\"name\":\"id\",\"type\":\"number\",\"value\":\"={{ $json.id }}\"}]}},\"typeVersion\":3.4},{\"id\":\"404db031-f470-4e42-a3b3-66b849a86174\",\"name\":\"Filter - Only published &  unprotected content\",\"type\":\"n8n-nodes-base.filter\",\"position\":[2520,900],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"1f708587-f3d3-487a-843a-b6a2bfad2ca9\",\"operator\":{\"type\":\"boolean\",\"operation\":\"false\",\"singleValue\":true},\"leftValue\":\"={{ $json.protected }}\",\"rightValue\":\"\"},{\"id\":\"04f47269-e112-44c3-9014-749898aca8bd\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.status }}\",\"rightValue\":\"publish\"}]}},\"typeVersion\":2.2},{\"id\":\"05bb6091-515e-4f22-a3fd-d25b2046a03d\",\"name\":\"HTML To Markdown\",\"type\":\"n8n-nodes-base.markdown\",\"position\":[2740,900],\"parameters\":{\"html\":\"={{ $json.content}}\",\"options\":{}},\"typeVersion\":1},{\"id\":\"391e9ea7-71dd-42ae-bee7-badcae32427c\",\"name\":\"Supabase - Store workflow execution\",\"type\":\"n8n-nodes-base.supabase\",\"position\":[3520,900],\"parameters\":{\"tableId\":\"n8n_website_embedding_histories\",\"fieldsUi\":{\"fieldValues\":[{\"fieldId\":\"id\",\"fieldValue\":\"={{ $executionId }}\"}]}},\"typeVersion\":1},{\"id\":\"47dad096-efc8-4bdd-9c22-49562325d8a0\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[460,1320],\"parameters\":{\"width\":851.1898437499999,\"height\":275.2000000000001,\"content\":\"## Run these two nodes if the \\\"documents\\\" table on Supabase and the \\\"n8n_website_embedding_histories\\\" table do not exist\"},\"typeVersion\":1},{\"id\":\"d19f3a5f-fa42-46d0-a366-4c5a5d09f559\",\"name\":\"Every 30 seconds\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[3940,900],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"seconds\"}]}},\"typeVersion\":1.2},{\"id\":\"a22ab0dd-1da8-4fc2-8106-6130bf7938c8\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[3820,740],\"parameters\":{\"width\":336.25,\"height\":292.5,\"content\":\"## Set this node to match the frequency of publishing and updating on your website\"},\"typeVersion\":1},{\"id\":\"ba25135b-6e6e-406b-b18a-f532a6e37276\",\"name\":\"Wordpress - Get posts modified after last workflow execution\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[4600,840],\"parameters\":{\"url\":\"https://mydomain.com/wp-json/wp/v2/posts\",\"options\":{},\"sendQuery\":true,\"authentication\":\"predefinedCredentialType\",\"queryParameters\":{\"parameters\":[{\"name\":\"modified_after\",\"value\":\"={{ $json.last_workflow_execution }}\"}]},\"nodeCredentialType\":\"wordpressApi\"},\"typeVersion\":4.2},{\"id\":\"a1d8572e-2b0d-40a1-a898-bbd563a6b190\",\"name\":\"Wordpress - Get posts modified after last workflow execution1\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[4600,1060],\"parameters\":{\"url\":\"https://mydomain.com/wp-json/wp/v2/pages\",\"options\":{},\"sendQuery\":true,\"authentication\":\"predefinedCredentialType\",\"queryParameters\":{\"parameters\":[{\"name\":\"modified_after\",\"value\":\"={{ $json.last_workflow_execution }}\"}]},\"nodeCredentialType\":\"wordpressApi\"},\"typeVersion\":4.2},{\"id\":\"c0839aaa-8ba7-47ff-8fa9-dc75e1c4da84\",\"name\":\"Set fields2\",\"type\":\"n8n-nodes-base.set\",\"position\":[5420,920],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"de6711dc-d03c-488c-bef4-0a853e2d0a14\",\"name\":\"publication_date\",\"type\":\"string\",\"value\":\"={{ $json.date }}\"},{\"id\":\"f8e35dcc-c96c-4554-b6bc-8e5d7eca90e3\",\"name\":\"modification_date\",\"type\":\"string\",\"value\":\"={{ $json.modified }}\"},{\"id\":\"f6a6e3de-fe39-4cfc-ab07-c4ccfaef78f5\",\"name\":\"content_type\",\"type\":\"string\",\"value\":\"={{ $json.type }}\"},{\"id\":\"b0428598-073f-4560-9a0c-01caf3708921\",\"name\":\"title\",\"type\":\"string\",\"value\":\"={{ $json.title.rendered }}\"},{\"id\":\"534f51b4-b43a-40d3-8120-58df8043d909\",\"name\":\"url\",\"type\":\"string\",\"value\":\"={{ $json.link }}\"},{\"id\":\"dbe0c559-90bd-49f8-960e-0d85d5ed4f5e\",\"name\":\"content\",\"type\":\"string\",\"value\":\"={{ $json.content.rendered }}\"},{\"id\":\"892be7c6-b032-4129-b285-1986ed4ee046\",\"name\":\"protected\",\"type\":\"boolean\",\"value\":\"={{ $json.content.protected }}\"},{\"id\":\"06fac885-4431-41ff-a43b-6eb84ca57401\",\"name\":\"status\",\"type\":\"string\",\"value\":\"={{ $json.status }}\"},{\"id\":\"43b1aea7-895e-41da-a0a6-2f1cec1f1b97\",\"name\":\"id\",\"type\":\"number\",\"value\":\"={{ $json.id }}\"}]}},\"typeVersion\":3.4},{\"id\":\"15b1d30a-5861-4380-89d5-0eef65240503\",\"name\":\"Filter - Only published and unprotected content\",\"type\":\"n8n-nodes-base.filter\",\"position\":[5760,920],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"c2b25d74-91d7-44ea-8598-422100947b07\",\"operator\":{\"type\":\"boolean\",\"operation\":\"false\",\"singleValue\":true},\"leftValue\":\"={{ $json.protected }}\",\"rightValue\":\"\"},{\"id\":\"3e63bf79-25ca-4ccf-aa86-ff5f90e1ece1\",\"operator\":{\"name\":\"filter.operator.equals\",\"type\":\"string\",\"operation\":\"equals\"},\"leftValue\":\"={{ $json.status }}\",\"rightValue\":\"publish\"}]}},\"typeVersion\":2.2},{\"id\":\"0990f503-8d6f-44f6-8d04-7e2f7d74301a\",\"name\":\"Loop Over Items\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[6040,920],\"parameters\":{\"options\":{}},\"typeVersion\":3},{\"id\":\"6cc4e46e-3884-4259-b7ed-51c5552cc3e0\",\"name\":\"Set fields3\",\"type\":\"n8n-nodes-base.set\",\"position\":[7400,1160],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"de6711dc-d03c-488c-bef4-0a853e2d0a14\",\"name\":\"publication_date\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.publication_date }}\"},{\"id\":\"f8e35dcc-c96c-4554-b6bc-8e5d7eca90e3\",\"name\":\"modification_date\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.modification_date }}\"},{\"id\":\"f6a6e3de-fe39-4cfc-ab07-c4ccfaef78f5\",\"name\":\"content_type\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.content_type }}\"},{\"id\":\"b0428598-073f-4560-9a0c-01caf3708921\",\"name\":\"title\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.title }}\"},{\"id\":\"534f51b4-b43a-40d3-8120-58df8043d909\",\"name\":\"url\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.url }}\"},{\"id\":\"dbe0c559-90bd-49f8-960e-0d85d5ed4f5e\",\"name\":\"content\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.content }}\"},{\"id\":\"892be7c6-b032-4129-b285-1986ed4ee046\",\"name\":\"protected\",\"type\":\"boolean\",\"value\":\"={{ $('Loop Over Items').item.json.protected }}\"},{\"id\":\"06fac885-4431-41ff-a43b-6eb84ca57401\",\"name\":\"status\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.status }}\"},{\"id\":\"43b1aea7-895e-41da-a0a6-2f1cec1f1b97\",\"name\":\"id\",\"type\":\"number\",\"value\":\"={{ $('Loop Over Items').item.json.id }}\"}]}},\"typeVersion\":3.4},{\"id\":\"24f47982-a803-4848-8390-c400a8cebcee\",\"name\":\"Set fields4\",\"type\":\"n8n-nodes-base.set\",\"position\":[6680,1400],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"de6711dc-d03c-488c-bef4-0a853e2d0a14\",\"name\":\"publication_date\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.publication_date }}\"},{\"id\":\"f8e35dcc-c96c-4554-b6bc-8e5d7eca90e3\",\"name\":\"modification_date\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.modification_date }}\"},{\"id\":\"f6a6e3de-fe39-4cfc-ab07-c4ccfaef78f5\",\"name\":\"content_type\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.content_type }}\"},{\"id\":\"b0428598-073f-4560-9a0c-01caf3708921\",\"name\":\"title\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.title }}\"},{\"id\":\"534f51b4-b43a-40d3-8120-58df8043d909\",\"name\":\"url\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.url }}\"},{\"id\":\"dbe0c559-90bd-49f8-960e-0d85d5ed4f5e\",\"name\":\"content\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.content }}\"},{\"id\":\"892be7c6-b032-4129-b285-1986ed4ee046\",\"name\":\"protected\",\"type\":\"boolean\",\"value\":\"={{ $('Loop Over Items').item.json.protected }}\"},{\"id\":\"06fac885-4431-41ff-a43b-6eb84ca57401\",\"name\":\"status\",\"type\":\"string\",\"value\":\"={{ $('Loop Over Items').item.json.status }}\"},{\"id\":\"43b1aea7-895e-41da-a0a6-2f1cec1f1b97\",\"name\":\"id\",\"type\":\"number\",\"value\":\"={{ $('Loop Over Items').item.json.id }}\"}]}},\"typeVersion\":3.4},{\"id\":\"5f59ebbf-ca17-4311-809c-85b74ce624cc\",\"name\":\"Store documents on Supabase\",\"type\":\"@n8n/n8n-nodes-langchain.vectorStoreSupabase\",\"position\":[6380,680],\"parameters\":{\"mode\":\"insert\",\"options\":{\"queryName\":\"match_documents\"},\"tableName\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"documents\",\"cachedResultName\":\"documents\"}},\"typeVersion\":1},{\"id\":\"2422562e-9c95-4d77-ae8c-485b06f9234e\",\"name\":\"Store workflow execution id and timestamptz\",\"type\":\"n8n-nodes-base.supabase\",\"position\":[7060,680],\"parameters\":{\"tableId\":\"n8n_website_embedding_histories\"},\"typeVersion\":1},{\"id\":\"5013f3a1-f7fb-4fa7-9ef2-3599f77f5fc8\",\"name\":\"Aggregate documents\",\"type\":\"n8n-nodes-base.aggregate\",\"position\":[1960,2060],\"parameters\":{\"options\":{},\"fieldsToAggregate\":{\"fieldToAggregate\":[{\"renameField\":true,\"outputFieldName\":\"documents\",\"fieldToAggregate\":\"document\"}]}},\"typeVersion\":1},{\"id\":\"26532217-3206-4be3-b186-733bc364913b\",\"name\":\"Sticky Note6\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1220,1980],\"parameters\":{\"width\":665.78125,\"height\":507.65625,\"content\":\"## Retrieve documents from Supabase immediately after chat input to send metadata to OpenAI\"},\"typeVersion\":1},{\"id\":\"78d2806c-8d13-44b8-bd6d-866fa794edae\",\"name\":\"Sticky Note7\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[6375,1090],\"parameters\":{\"width\":1198.9843749999998,\"height\":515.4687499999998,\"content\":\"## Switch:\\n- **If the document exists and has been updated:** delete rows and insert new embedding\\n- **If it’s a new document:** insert embedding\"},\"typeVersion\":1},{\"id\":\"3b5ffada-ae2a-45a2-a76c-69732b05761c\",\"name\":\"Postgres - Create documents table\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[560,1440],\"parameters\":{\"query\":\"-- Enable the pgvector extension to work with embedding vectors\\nCREATE EXTENSION vector;\\n\\n-- Create a table to store your documents with default RLS\\nCREATE TABLE\\n  documents (\\n    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\\n    CONTENT TEXT, -- corresponds to Document.pageContent\\n    metadata jsonb, -- corresponds to Document.metadata\\n    embedding vector (1536) -- 1536 works for OpenAI embeddings, change if needed\\n  );\\n\\n-- Enable Row Level Security on the documents table\\nALTER TABLE documents ENABLE ROW LEVEL SECURITY;\\n\\n-- Create a function to search for documents\\nCREATE FUNCTION match_documents (\\n  query_embedding vector (1536),\\n  match_count INT DEFAULT NULL,\\n  FILTER jsonb DEFAULT '{}'\\n) RETURNS TABLE (\\n  id BIGINT,\\n  CONTENT TEXT,\\n  metadata jsonb,\\n  similarity FLOAT\\n) LANGUAGE plpgsql AS $$\\n#variable_conflict use_column\\nBEGIN\\n  RETURN QUERY\\n  SELECT\\n    id,\\n    content,\\n    metadata,\\n    1 - (documents.embedding <=> query_embedding) AS similarity\\n  FROM documents\\n  WHERE metadata @> filter\\n  ORDER BY documents.embedding <=> query_embedding\\n  LIMIT match_count;\\nEND;\\n$$;\",\"options\":{},\"operation\":\"executeQuery\"},\"typeVersion\":2.5},{\"id\":\"632a7b44-a062-472e-a777-805ee74a4bd6\",\"name\":\"Postgres - Create workflow execution history table\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[920,1440],\"parameters\":{\"query\":\"CREATE TABLE\\n  n8n_website_embedding_histories (\\n    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\\n  );\",\"options\":{},\"operation\":\"executeQuery\"},\"typeVersion\":2.5},{\"id\":\"7c55e08b-e116-4e22-bd1d-e4bec5107d89\",\"name\":\"Merge Wordpress Posts and Pages\",\"type\":\"n8n-nodes-base.merge\",\"position\":[1660,900],\"parameters\":{},\"typeVersion\":3},{\"id\":\"4520db6c-2e68-45ff-9439-6fd95f95dc85\",\"name\":\"Merge retrieved WordPress posts and pages\",\"type\":\"n8n-nodes-base.merge\",\"position\":[5120,920],\"parameters\":{},\"typeVersion\":3},{\"id\":\"d547a063-6b76-4bfd-ba0a-165181c4af19\",\"name\":\"Postgres - Filter on existing documents\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[6260,1180],\"parameters\":{\"query\":\"SELECT *\\nFROM documents\\nWHERE (metadata->>'id')::integer = {{ $json.id }};\\n\",\"options\":{},\"operation\":\"executeQuery\"},\"typeVersion\":2.5,\"alwaysOutputData\":true},{\"id\":\"03456a81-d512-4fd8-842a-27b6d8b3f94e\",\"name\":\"Supabase - Delete row if documents exists\",\"type\":\"n8n-nodes-base.supabase\",\"position\":[6900,1160],\"parameters\":{\"tableId\":\"documents\",\"operation\":\"delete\",\"filterType\":\"string\",\"filterString\":\"=metadata->>id=like.{{ $json.metadata.id }}\"},\"executeOnce\":false,\"typeVersion\":1,\"alwaysOutputData\":false},{\"id\":\"72e5bf4b-c413-4fb7-acb8-59e7abee60f7\",\"name\":\"Switch\",\"type\":\"n8n-nodes-base.switch\",\"position\":[6580,1180],\"parameters\":{\"rules\":{\"values\":[{\"outputKey\":\"existing_documents\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"operator\":{\"type\":\"number\",\"operation\":\"exists\",\"singleValue\":true},\"leftValue\":\"={{ $json.metadata.id }}\",\"rightValue\":\"\"}]},\"renameOutput\":true},{\"outputKey\":\"new_documents\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"696d1c1b-8674-4549-880e-e0d0ff681905\",\"operator\":{\"type\":\"number\",\"operation\":\"notExists\",\"singleValue\":true},\"leftValue\":\"={{ $json.metadata.id }}\",\"rightValue\":\"\"}]},\"renameOutput\":true}]},\"options\":{}},\"typeVersion\":3.2},{\"id\":\"6c5d8f6a-569e-4f1e-99a6-07ec492575ff\",\"name\":\"When chat message received\",\"type\":\"@n8n/n8n-nodes-langchain.chatTrigger\",\"position\":[660,2060],\"webhookId\":\"4e762668-c19f-40ec-83bf-302bb9fc6527\",\"parameters\":{\"mode\":\"webhook\",\"public\":true,\"options\":{}},\"typeVersion\":1.1},{\"id\":\"9a2f17ba-902f-4528-9eef-f8c0e4ddf516\",\"name\":\"Supabase - Retrieve documents from chatinput\",\"type\":\"@n8n/n8n-nodes-langchain.vectorStoreSupabase\",\"position\":[1380,2060],\"parameters\":{\"mode\":\"load\",\"prompt\":\"={{ $json.chatInput }}\",\"options\":{},\"tableName\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"documents\",\"cachedResultName\":\"documents\"}},\"typeVersion\":1},{\"id\":\"43607f23-d33f-4aca-b478-f20ba8c218cf\",\"name\":\"AI Agent\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[2780,2060],\"parameters\":{\"text\":\"=Visitor's question : {{ $json.chatInput }}\\nDocuments found: {{ $json.documents }}\",\"agent\":\"conversationalAgent\",\"options\":{\"systemMessage\":\"You are an assistant tasked with answering questions from visitors to the website {{your_website_url}}.\\n\\nInput:\\nVisitor's question: The question posed by the visitor.\\nDocuments found: A selection of documents from the vector database that match the visitor's question. These documents are accompanied by the following metadata:\\nurl: The URL of the page or blog post found.\\ncontent_type: The type of content (e.g., page or blog article).\\npublication_date: The publication date of the document.\\nmodification_date: The last modification date of the document.\\nObjective:\\nProvide a helpful answer using the relevant information from the documents found.\\nIMPORTANT : You must always include all metadata (url, content_type, publication_date, and modification_date) directly in the main answer to the visitor to indicate the source of the information. These should not be separated from the main answer, and must be naturally integrated into the response.\\nIf multiple documents are used in your response, mention each one with its respective metadata.\\nIf no relevant documents are found, or if the documents are insufficient, clearly indicate this in your response.\\nImportant: Respond in the language used by the visitor who asked the question.\\nExample of forced metadata integration:\\n\\\"The cost of a home charging station for an electric vehicle varies depending on several factors. According to [title of the page](https://example.com/charging-point-price), published on April 8, 2021, and updated on July 24, 2022, the price for a 7kW station is €777.57 including VAT. This page provides further details about the price range and installation considerations.\\\"\"},\"promptType\":\"define\"},\"typeVersion\":1.6},{\"id\":\"cd4107cb-e521-4c1e-88e2-3417a12fd585\",\"name\":\"Supabase Vector Store\",\"type\":\"@n8n/n8n-nodes-langchain.vectorStoreSupabase\",\"position\":[2940,900],\"parameters\":{\"mode\":\"insert\",\"options\":{\"queryName\":\"match_documents\"},\"tableName\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"documents\",\"cachedResultName\":\"documents\"}},\"typeVersion\":1}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"fe2a25f4-04b3-462c-97cd-a173b4a0631b\",\"connections\":{\"Switch\":{\"main\":[[{\"node\":\"Supabase - Delete row if documents exists\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Set fields4\",\"type\":\"main\",\"index\":0}]]},\"AI Agent\":{\"main\":[[{\"node\":\"Respond to Webhook\",\"type\":\"main\",\"index\":0}]]},\"Postgres\":{\"main\":[[{\"node\":\"Wordpress - Get posts modified after last workflow execution\",\"type\":\"main\",\"index\":0},{\"node\":\"Wordpress - Get posts modified after last workflow execution1\",\"type\":\"main\",\"index\":0}]]},\"Aggregate\":{\"main\":[[{\"node\":\"Supabase - Store workflow execution\",\"type\":\"main\",\"index\":0}]]},\"Markdown1\":{\"main\":[[{\"node\":\"Store documents on Supabase\",\"type\":\"main\",\"index\":0}]]},\"Aggregate1\":{\"main\":[[{\"node\":\"Store workflow execution id and timestamptz\",\"type\":\"main\",\"index\":0}]]},\"Aggregate2\":{\"main\":[[{\"node\":\"Set fields3\",\"type\":\"main\",\"index\":0}]]},\"Set fields\":{\"main\":[[{\"node\":\"AI Agent\",\"type\":\"main\",\"index\":0}]]},\"Set fields1\":{\"main\":[[{\"node\":\"Filter - Only published &  unprotected content\",\"type\":\"main\",\"index\":0}]]},\"Set fields2\":{\"main\":[[{\"node\":\"Filter - Only published and unprotected content\",\"type\":\"main\",\"index\":0}]]},\"Set fields3\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]},\"Set fields4\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]},\"Token Splitter\":{\"ai_textSplitter\":[[{\"node\":\"Default Data Loader\",\"type\":\"ai_textSplitter\",\"index\":0}]]},\"Loop Over Items\":{\"main\":[[{\"node\":\"Markdown1\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Postgres - Filter on existing documents\",\"type\":\"main\",\"index\":0}]]},\"Token Splitter1\":{\"ai_textSplitter\":[[{\"node\":\"Default Data Loader1\",\"type\":\"ai_textSplitter\",\"index\":0}]]},\"Every 30 seconds\":{\"main\":[[{\"node\":\"Postgres\",\"type\":\"main\",\"index\":0}]]},\"HTML To Markdown\":{\"main\":[[{\"node\":\"Supabase Vector Store\",\"type\":\"main\",\"index\":0}]]},\"Embeddings OpenAI\":{\"ai_embedding\":[[{\"node\":\"Supabase Vector Store\",\"type\":\"ai_embedding\",\"index\":0}]]},\"OpenAI Chat Model\":{\"ai_languageModel\":[[{\"node\":\"AI Agent\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Embeddings OpenAI1\":{\"ai_embedding\":[[{\"node\":\"Supabase - Retrieve documents from chatinput\",\"type\":\"ai_embedding\",\"index\":0}]]},\"Embeddings OpenAI2\":{\"ai_embedding\":[[{\"node\":\"Store documents on Supabase\",\"type\":\"ai_embedding\",\"index\":0}]]},\"Aggregate documents\":{\"main\":[[{\"node\":\"Set fields\",\"type\":\"main\",\"index\":0}]]},\"Default Data Loader\":{\"ai_document\":[[{\"node\":\"Supabase Vector Store\",\"type\":\"ai_document\",\"index\":0}]]},\"Default Data Loader1\":{\"ai_document\":[[{\"node\":\"Store documents on Supabase\",\"type\":\"ai_document\",\"index\":0}]]},\"Postgres Chat Memory\":{\"ai_memory\":[[{\"node\":\"AI Agent\",\"type\":\"ai_memory\",\"index\":0}]]},\"Supabase Vector Store\":{\"main\":[[{\"node\":\"Aggregate\",\"type\":\"main\",\"index\":0}]]},\"Wordpress - Get all pages\":{\"main\":[[{\"node\":\"Merge Wordpress Posts and Pages\",\"type\":\"main\",\"index\":1}]]},\"Wordpress - Get all posts\":{\"main\":[[{\"node\":\"Merge Wordpress Posts and Pages\",\"type\":\"main\",\"index\":0}]]},\"When chat message received\":{\"main\":[[{\"node\":\"Supabase - Retrieve documents from chatinput\",\"type\":\"main\",\"index\":0}]]},\"Store documents on Supabase\":{\"main\":[[{\"node\":\"Aggregate1\",\"type\":\"main\",\"index\":0}]]},\"Merge Wordpress Posts and Pages\":{\"main\":[[{\"node\":\"Set fields1\",\"type\":\"main\",\"index\":0}]]},\"Postgres - Create documents table\":{\"main\":[[{\"node\":\"Postgres - Create workflow execution history table\",\"type\":\"main\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"Wordpress - Get all posts\",\"type\":\"main\",\"index\":0},{\"node\":\"Wordpress - Get all pages\",\"type\":\"main\",\"index\":0}]]},\"Postgres - Filter on existing documents\":{\"main\":[[{\"node\":\"Switch\",\"type\":\"main\",\"index\":0}]]},\"Merge retrieved WordPress posts and pages\":{\"main\":[[{\"node\":\"Set fields2\",\"type\":\"main\",\"index\":0}]]},\"Supabase - Delete row if documents exists\":{\"main\":[[{\"node\":\"Aggregate2\",\"type\":\"main\",\"index\":0}]]},\"Supabase - Retrieve documents from chatinput\":{\"main\":[[{\"node\":\"Aggregate documents\",\"type\":\"main\",\"index\":0}]]},\"Filter - Only published &  unprotected content\":{\"main\":[[{\"node\":\"HTML To Markdown\",\"type\":\"main\",\"index\":0}]]},\"Filter - Only published and unprotected content\":{\"main\":[[{\"node\":\"Loop Over Items\",\"type\":\"main\",\"index\":0}]]},\"Wordpress - Get posts modified after last workflow execution\":{\"main\":[[{\"node\":\"Merge retrieved WordPress posts and pages\",\"type\":\"main\",\"index\":0}]]},\"Wordpress - Get posts modified after last workflow execution1\":{\"main\":[[{\"node\":\"Merge retrieved WordPress posts and pages\",\"type\":\"main\",\"index\":1}]]}}}",
  "readme": "This is the **first version of a template for a RAG/GenAI App** using **WordPress content**.\n\nAs **creating, sharing, and improving templates** brings me joy 😄, feel free to reach out on [LinkedIn](https://www.linkedin.com/in/nicolas-aknin/) if you have **any ideas to enhance this template**!\n\n# How It Works\n\nThis template includes three workflows:\n\n  * **Workflow 1** : Generate embeddings for your WordPress posts and pages, then store them in the Supabase vector store.\n  * **Workflow 2** : Handle upserts for WordPress content when edits are made.\n  * **Workflow 3** : Enable chat functionality by performing Retrieval-Augmented Generation (RAG) on the embedded documents.\n\n\n\n## Why use this template?\n\nThis template can be applied to various use cases:\n\n  * Build a **GenAI application** that requires embedded documents from your website's content.\n  * Embed or create a **chatbot** page on your website to **enhance user experience** as visitors search for information.\n  * Gain **insights** into the **types of questions** visitors are asking on your website.\n  * Simplify **content management** by asking the AI for related content ideas or checking if **similar content already exists**. Useful for internal linking.\n\n\n\n## Prerequisites\n\n  * Access to **Supabase** for storing embeddings.\n  * Basic knowledge of **Postgres** and **pgvector**.\n  * A **WordPress website** with content to be embedded.\n  * An **OpenAI API key**\n  * Ensure that your n8n workflow, Supabase instance, and WordPress website are set to the **same timezone** (or use GMT) for consistency.\n\n\n\n## Workflow 1 : Initial Embedding\n\nThis workflow retrieves your WordPress pages and posts, generates embeddings from the content, and stores them in Supabase using `pgvector`.\n\n### Step 0 : Create Supabase tables\n\n**Nodes :**\n\n  * `Postgres - Create Documents Table`: This table is structured to support **OpenAI embedding** models with **1536 dimensions**\n  * `Postgres - Create Workflow Execution History Table`\n\n\n\nThese two nodes create tables in Supabase:\n\n  * The **documents** table, which stores embeddings of your website content.\n  * The **n8n_website_embedding_histories** table, which logs workflow executions for efficient management of upserts. This table tracks the workflow execution ID and execution timestamp.\n\n\n\n### Step 1 : Retrieve and Merge WordPress Pages and Posts\n\n**Nodes :**\n\n  * `WordPress - Get All Posts`\n  * `WordPress - Get All Pages`\n  * `Merge WordPress Posts and Pages`\n\n\n\nThese three nodes retrieve **all content and metadata from your posts and pages** and merge them.  \n**Important: ** **Apply filters** to avoid generating embeddings for all site content.\n\n### Step 2 : Set Fields, Apply Filter, and Transform HTML to Markdown\n\n**Nodes :**\n\n  * `Set Fields`\n  * `Filter - Only Published & Unprotected Content`\n  * `HTML to Markdown`\n\n\n\nThese three nodes prepare the content for embedding by:\n\n  1. Setting up the necessary fields for content embeddings and document metadata.\n  2. Filtering to include only **published** and **unprotected** content (`protected=false`), ensuring private or unpublished content is **excluded from your GenAI application**.\n  3. Converting HTML to Markdown, which enhances **performance and relevance** in Retrieval-Augmented Generation (RAG) by optimizing document embeddings.\n\n\n\n### Step 3: Generate Embeddings, Store Documents in Supabase, and Log Workflow Execution\n\n**Nodes** :\n\n  * `Supabase Vector Store`\n    * **Sub-nodes** : \n      * `Embeddings OpenAI`\n      * `Default Data Loader`\n      * `Token Splitter`\n      * `Aggregate`\n  * `Supabase - Store Workflow Execution`\n\n\n\nThis step involves generating embeddings for the content and storing it in Supabase, followed by logging the workflow execution details.\n\n  1. **Generate Embeddings** : The `Embeddings OpenAI` node generates vector embeddings for the content.\n  2. **Load Data** : The `Default Data Loader` prepares the content for embedding storage. The metadata stored includes the content title, publication date, modification date, URL, and **ID** , which is **essential for managing upserts**.\n\n\n\n⚠️ **Important Note :** Be cautious **not to store any sensitive information in metadata** fields, as this information will be **accessible to the AI and may appear in user-facing answers**.\n\n  1. **Token Management** : The `Token Splitter` ensures that content is segmented into manageable sizes to comply with token limits.\n  2. **Aggregate** : Ensure the last node is run only for 1 item.\n  3. **Store Execution Details** : The `Supabase - Store Workflow Execution` node saves the workflow execution ID and timestamp, enabling tracking of when each content update was processed.\n\n\n\nThis setup **ensures that content embeddings are stored in Supabase for use in downstream applications** , while workflow execution details are logged for consistency and version tracking.\n\nThis workflow should be **executed only once for the initial embedding**.  \n**Workflow 2** , described below, will **handle all future upserts** , ensuring that new or updated content is embedded as needed.\n\n## Workflow 2: Handle document upserts\n\n**Content on a website follows a lifecycle** —it may be **updated** , **new content** might be added, or, at times, content may be **deleted**.\n\nIn this **first version of the template** , the upsert workflow manages:\n\n  * **Newly added content**\n  * **Updated content**\n\n\n\n### Step 1: Retrieve WordPress Content with Regular CRON\n\n**Nodes** :\n\n  * `CRON - Every 30 Seconds`\n  * `Postgres - Get Last Workflow Execution`\n  * `WordPress - Get Posts Modified After Last Workflow Execution`\n  * `WordPress - Get Pages Modified After Last Workflow Execution`\n  * `Merge Retrieved WordPress Posts and Pages`\n\n\n\nA **CRON job** (set to run **every 30 seconds** in this template, but you can **adjust it** as needed) initiates the workflow. A **Postgres SQL** query on the `n8n_website_embedding_histories` table retrieves the **timestamp** of the **latest workflow execution**.\n\nNext, the HTTP nodes use the **WordPress API** (**update the example URL** in the template with your own website’s URL and add your **WordPress credentials**) to request **all posts and pages modified after the last workflow execution date**. This process captures both **newly added** and **recently updated content**. The retrieved content is then merged for further processing.\n\n### Step 2 : Set fields, use filter\n\n**Nodes :**\n\n  * `Set fields2`\n  * `Filter - Only published and unprotected content`\n\n\n\nThe same that Step 2 in **Workflow 1** , except that HTML To Makrdown is used in further Step.\n\n### Step 3: Loop Over Items to Identify and Route Updated vs. Newly Added Content\n\n**Here, I initially aimed to use 'update documents' instead of the delete + insert approach, but encountered challenges, especially with updating both content and metadata columns together. Any help or suggestions are welcome! :)**\n\n**Nodes** :\n\n  * `Loop Over Items`\n\n  * `Postgres - Filter on Existing Documents`\n\n  * `Switch`\n\n    * **Route`existing_documents`** (if documents with matching IDs are found in metadata):\n\n      * `Supabase - Delete Row if Document Exists`: Removes any existing entry for the document, preparing for an update.\n      * `Aggregate2`: Used to aggregate documents on Supabase with ID to ensure that `Set Fields3` is executed only once for each WordPress content to **avoid duplicate execution**.\n      * `Set Fields3`: Sets fields required for embedding updates.\n    * **Route`new_documents`** (if no matching documents are found with IDs in metadata):\n\n      * `Set Fields4`: Configures fields for embedding newly added content.\n\n\n\nIn this step, a loop processes **each item** , directing it based on **whether the document already exists**. The **`Aggregate2`** node acts as a control to ensure `Set Fields3` runs only once per WordPress content, effectively **avoiding duplicate execution** and optimizing the update process.\n\n### Step 4 : HTML to Markdown, Supabase Vector Store, Update Workflow Execution Table\n\nThe **HTML to Markdown** node mirrors **Workflow 1 - Step 2**. Refer to that section for a detailed explanation on how HTML content is converted to Markdown for improved embedding performance and relevance.\n\nFollowing this, the content is **stored in the Supabase vector store** to manage embeddings efficiently. Lastly, the **workflow execution table is updated. These nodes mirros the **Workflow 1 - Step 3 nodes**.\n\n## Workflow 3 : An example of GenAI App with Wordpress Content : Chatbot to be embed on your website\n\n### Step 1: Retrieve Supabase Documents, Aggregate, and Set Fields After a Chat Input\n\n**Nodes** :\n\n  * `When Chat Message Received`\n  * `Supabase - Retrieve Documents from Chat Input`\n  * `Embeddings OpenAI1`\n  * `Aggregate Documents`\n  * `Set Fields`\n\n\n\nWhen a user sends a message to the chat, the prompt (user question) is sent to the Supabase vector store retriever. The RPC function `match_documents` (created in **Workflow 1 - Step 0**) retrieves documents relevant to the user’s question, enabling a more accurate and relevant response.\n\nIn this step:\n\n  1. The **Supabase vector store retriever** fetches documents that match the user’s question, including metadata.\n  2. The **Aggregate Documents** node consolidates the retrieved data.\n  3. Finally, **Set Fields** organizes the data to create a more readable input for the AI agent.\n\n\n\n**Directly using the AI agent** without these nodes would prevent metadata from being sent to the language model (LLM), but **metadata is essential for enhancing the context** and accuracy of the AI’s response. By including metadata, the **AI’s answers can reference relevant document details, making the interaction more informative**.\n\n### Step 2: Call AI Agent, Respond to User, and Store Chat Conversation History\n\n**Nodes** :\n\n  * **AI Agent**\n    * Sub-nodes: \n      * `OpenAI Chat Model`\n      * `Postgres Chat Memories`\n  * **Respond to Webhook**\n\n\n\nThis step involves calling the AI agent to generate an answer, responding to the user, and storing the conversation history. The model used is **gpt4-o-mini** , chosen for its cost-efficiency.\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><p>This is the <strong>first version of a template for a RAG/GenAI App</strong> using <strong>WordPress content</strong>.</p>\n<p>As <strong>creating, sharing, and improving templates</strong> brings me joy 😄, feel free to reach out on <a href=\"https://www.linkedin.com/in/nicolas-aknin/\" rel=\"ugc nofollow\" target=\"_blank\">LinkedIn</a> if you have <strong>any ideas to enhance this template</strong>!</p>\n<h1>How It Works</h1>\n<p>This template includes three workflows:</p>\n<ul>\n<li><strong>Workflow 1</strong>: Generate embeddings for your WordPress posts and pages, then store them in the Supabase vector store.</li>\n<li><strong>Workflow 2</strong>: Handle upserts for WordPress content when edits are made.</li>\n<li><strong>Workflow 3</strong>: Enable chat functionality by performing Retrieval-Augmented Generation (RAG) on the embedded documents.</li>\n</ul>\n<h2>Why use this template?</h2>\n<p>This template can be applied to various use cases:</p>\n<ul>\n<li>Build a <strong>GenAI application</strong> that requires embedded documents from your website's content.</li>\n<li>Embed or create a <strong>chatbot</strong> page on your website to <strong>enhance user experience</strong> as visitors search for information.</li>\n<li>Gain <strong>insights</strong> into the <strong>types of questions</strong> visitors are asking on your website.</li>\n<li>Simplify <strong>content management</strong> by asking the AI for related content ideas or checking if <strong>similar content already exists</strong>. Useful for internal linking.</li>\n</ul>\n<h2>Prerequisites</h2>\n<ul>\n<li>Access to <strong>Supabase</strong> for storing embeddings.</li>\n<li>Basic knowledge of <strong>Postgres</strong> and <strong>pgvector</strong>.</li>\n<li>A <strong>WordPress website</strong> with content to be embedded.</li>\n<li>An <strong>OpenAI API key</strong></li>\n<li>Ensure that your n8n workflow, Supabase instance, and WordPress website are set to the <strong>same timezone</strong> (or use GMT) for consistency.</li>\n</ul>\n<h2>Workflow 1 : Initial Embedding</h2>\n<p>This workflow retrieves your WordPress pages and posts, generates embeddings from the content, and stores them in Supabase using <code>pgvector</code>.</p>\n<h3>Step 0 : Create Supabase tables</h3>\n<p><strong>Nodes :</strong></p>\n<ul>\n<li><code>Postgres - Create Documents Table</code>: This table is structured to support <strong>OpenAI embedding</strong> models with <strong>1536 dimensions</strong></li>\n<li><code>Postgres - Create Workflow Execution History Table</code></li>\n</ul>\n<p>These two nodes create tables in Supabase:</p>\n<ul>\n<li>The <strong>documents</strong> table, which stores embeddings of your website content.</li>\n<li>The <strong>n8n_website_embedding_histories</strong> table, which logs workflow executions for efficient management of upserts. This table tracks the workflow execution ID and execution timestamp.</li>\n</ul>\n<h3>Step 1 : Retrieve and Merge WordPress Pages and Posts</h3>\n<p><strong>Nodes :</strong></p>\n<ul>\n<li><code>WordPress - Get All Posts</code></li>\n<li><code>WordPress - Get All Pages</code></li>\n<li><code>Merge WordPress Posts and Pages</code></li>\n</ul>\n<p>These three nodes retrieve <strong>all content and metadata from your posts and pages</strong> and merge them.<br>\n**Important: ** <strong>Apply filters</strong> to avoid generating embeddings for all site content.</p>\n<h3>Step 2 : Set Fields, Apply Filter, and Transform HTML to Markdown</h3>\n<p><strong>Nodes :</strong></p>\n<ul>\n<li><code>Set Fields</code></li>\n<li><code>Filter - Only Published &amp; Unprotected Content</code></li>\n<li><code>HTML to Markdown</code></li>\n</ul>\n<p>These three nodes prepare the content for embedding by:</p>\n<ol>\n<li>Setting up the necessary fields for content embeddings and document metadata.</li>\n<li>Filtering to include only <strong>published</strong> and <strong>unprotected</strong> content (<code>protected=false</code>), ensuring private or unpublished content is <strong>excluded from your GenAI application</strong>.</li>\n<li>Converting HTML to Markdown, which enhances <strong>performance and relevance</strong> in Retrieval-Augmented Generation (RAG) by optimizing document embeddings.</li>\n</ol>\n<h3>Step 3: Generate Embeddings, Store Documents in Supabase, and Log Workflow Execution</h3>\n<p><strong>Nodes</strong>:</p>\n<ul>\n<li><code>Supabase Vector Store</code>\n<ul>\n<li><strong>Sub-nodes</strong>:\n<ul>\n<li><code>Embeddings OpenAI</code></li>\n<li><code>Default Data Loader</code></li>\n<li><code>Token Splitter</code></li>\n<li><code>Aggregate</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>Supabase - Store Workflow Execution</code></li>\n</ul>\n<p>This step involves generating embeddings for the content and storing it in Supabase, followed by logging the workflow execution details.</p>\n<ol>\n<li><strong>Generate Embeddings</strong>: The <code>Embeddings OpenAI</code> node generates vector embeddings for the content.</li>\n<li><strong>Load Data</strong>: The <code>Default Data Loader</code> prepares the content for embedding storage. The metadata stored includes the content title, publication date, modification date, URL, and <strong>ID</strong>, which is <strong>essential for managing upserts</strong>.</li>\n</ol>\n<p>⚠️ <strong>Important Note :</strong> Be cautious <strong>not to store any sensitive information in metadata</strong> fields, as this information will be <strong>accessible to the AI and may appear in user-facing answers</strong>.</p>\n<ol>\n<li><strong>Token Management</strong>: The <code>Token Splitter</code> ensures that content is segmented into manageable sizes to comply with token limits.</li>\n<li><strong>Aggregate</strong>: Ensure the last node is run only for 1 item.</li>\n<li><strong>Store Execution Details</strong>: The <code>Supabase - Store Workflow Execution</code> node saves the workflow execution ID and timestamp, enabling tracking of when each content update was processed.</li>\n</ol>\n<p>This setup <strong>ensures that content embeddings are stored in Supabase for use in downstream applications</strong>, while workflow execution details are logged for consistency and version tracking.</p>\n<p>This workflow should be <strong>executed only once for the initial embedding</strong>.<br>\n<strong>Workflow 2</strong>, described below, will <strong>handle all future upserts</strong>, ensuring that new or updated content is embedded as needed.</p>\n<h2>Workflow 2: Handle document upserts</h2>\n<p><strong>Content on a website follows a lifecycle</strong>—it may be <strong>updated</strong>, <strong>new content</strong> might be added, or, at times, content may be <strong>deleted</strong>.</p>\n<p>In this <strong>first version of the template</strong>, the upsert workflow manages:</p>\n<ul>\n<li><strong>Newly added content</strong></li>\n<li><strong>Updated content</strong></li>\n</ul>\n<h3>Step 1: Retrieve WordPress Content with Regular CRON</h3>\n<p><strong>Nodes</strong>:</p>\n<ul>\n<li><code>CRON - Every 30 Seconds</code></li>\n<li><code>Postgres - Get Last Workflow Execution</code></li>\n<li><code>WordPress - Get Posts Modified After Last Workflow Execution</code></li>\n<li><code>WordPress - Get Pages Modified After Last Workflow Execution</code></li>\n<li><code>Merge Retrieved WordPress Posts and Pages</code></li>\n</ul>\n<p>A <strong>CRON job</strong> (set to run <strong>every 30 seconds</strong> in this template, but you can <strong>adjust it</strong> as needed) initiates the workflow. A <strong>Postgres SQL</strong> query on the <code>n8n_website_embedding_histories</code> table retrieves the <strong>timestamp</strong> of the <strong>latest workflow execution</strong>.</p>\n<p>Next, the HTTP nodes use the <strong>WordPress API</strong> (<strong>update the example URL</strong> in the template with your own website’s URL and add your <strong>WordPress credentials</strong>) to request <strong>all posts and pages modified after the last workflow execution date</strong>. This process captures both <strong>newly added</strong> and <strong>recently updated content</strong>. The retrieved content is then merged for further processing.</p>\n<h3>Step 2 : Set fields, use filter</h3>\n<p><strong>Nodes :</strong></p>\n<ul>\n<li><code>Set fields2</code></li>\n<li><code>Filter - Only published and unprotected content</code></li>\n</ul>\n<p>The same that Step 2 in <strong>Workflow 1</strong>, except that HTML To Makrdown is used in further Step.</p>\n<h3>Step 3: Loop Over Items to Identify and Route Updated vs. Newly Added Content</h3>\n<p><strong>Here, I initially aimed to use 'update documents' instead of the delete + insert approach, but encountered challenges, especially with updating both content and metadata columns together. Any help or suggestions are welcome! :)</strong></p>\n<p><strong>Nodes</strong>:</p>\n<ul>\n<li>\n<p><code>Loop Over Items</code></p>\n</li>\n<li>\n<p><code>Postgres - Filter on Existing Documents</code></p>\n</li>\n<li>\n<p><code>Switch</code></p>\n<ul>\n<li>\n<p><strong>Route <code>existing_documents</code></strong> (if documents with matching IDs are found in metadata):</p>\n<ul>\n<li><code>Supabase - Delete Row if Document Exists</code>: Removes any existing entry for the document, preparing for an update.</li>\n<li><code>Aggregate2</code>: Used to aggregate documents on Supabase with ID to ensure that <code>Set Fields3</code> is executed only once for each WordPress content to <strong>avoid duplicate execution</strong>.</li>\n<li><code>Set Fields3</code>: Sets fields required for embedding updates.</li>\n</ul>\n</li>\n<li>\n<p><strong>Route <code>new_documents</code></strong> (if no matching documents are found with IDs in metadata):</p>\n<ul>\n<li><code>Set Fields4</code>: Configures fields for embedding newly added content.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>In this step, a loop processes <strong>each item</strong>, directing it based on <strong>whether the document already exists</strong>. The <strong><code>Aggregate2</code></strong> node acts as a control to ensure <code>Set Fields3</code> runs only once per WordPress content, effectively <strong>avoiding duplicate execution</strong> and optimizing the update process.</p>\n<h3>Step 4 : HTML to Markdown, Supabase Vector Store, Update Workflow Execution Table</h3>\n<p>The <strong>HTML to Markdown</strong> node mirrors <strong>Workflow 1 - Step 2</strong>. Refer to that section for a detailed explanation on how HTML content is converted to Markdown for improved embedding performance and relevance.</p>\n<p>Following this, the content is <strong>stored in the Supabase vector store</strong> to manage embeddings efficiently. Lastly, the **workflow execution table is updated. These nodes mirros the <strong>Workflow 1 - Step 3 nodes</strong>.</p>\n<h2>Workflow 3 : An example of GenAI App with Wordpress Content : Chatbot to be embed on your website</h2>\n<h3>Step 1: Retrieve Supabase Documents, Aggregate, and Set Fields After a Chat Input</h3>\n<p><strong>Nodes</strong>:</p>\n<ul>\n<li><code>When Chat Message Received</code></li>\n<li><code>Supabase - Retrieve Documents from Chat Input</code></li>\n<li><code>Embeddings OpenAI1</code></li>\n<li><code>Aggregate Documents</code></li>\n<li><code>Set Fields</code></li>\n</ul>\n<p>When a user sends a message to the chat, the prompt (user question) is sent to the Supabase vector store retriever. The RPC function <code>match_documents</code> (created in <strong>Workflow 1 - Step 0</strong>) retrieves documents relevant to the user’s question, enabling a more accurate and relevant response.</p>\n<p>In this step:</p>\n<ol>\n<li>The <strong>Supabase vector store retriever</strong> fetches documents that match the user’s question, including metadata.</li>\n<li>The <strong>Aggregate Documents</strong> node consolidates the retrieved data.</li>\n<li>Finally, <strong>Set Fields</strong> organizes the data to create a more readable input for the AI agent.</li>\n</ol>\n<p><strong>Directly using the AI agent</strong> without these nodes would prevent metadata from being sent to the language model (LLM), but <strong>metadata is essential for enhancing the context</strong> and accuracy of the AI’s response. By including metadata, the <strong>AI’s answers can reference relevant document details, making the interaction more informative</strong>.</p>\n<h3>Step 2: Call AI Agent, Respond to User, and Store Chat Conversation History</h3>\n<p><strong>Nodes</strong>:</p>\n<ul>\n<li><strong>AI Agent</strong>\n<ul>\n<li>Sub-nodes:\n<ul>\n<li><code>OpenAI Chat Model</code></li>\n<li><code>Postgres Chat Memories</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Respond to Webhook</strong></li>\n</ul>\n<p>This step involves calling the AI agent to generate an answer, responding to the user, and storing the conversation history.  The model used is <strong>gpt4-o-mini</strong>, chosen for its cost-efficiency.</p>\n</div><!--]-->",
  "readme_zh": "这是**首个使用WordPress内容的RAG/GenAI应用模板**的初始版本。\n\n因为**创建、分享和改进模板**能带给我快乐😄，如果你有**任何优化建议**，欢迎通过[LinkedIn](https://www.linkedin.com/in/nicolas-aknin/)联系我！\n\n# 工作原理\n\n本模板包含三个工作流：\n\n* **工作流1**：为WordPress文章和页面生成嵌入向量，并存储到Supabase向量数据库。\n* **工作流2**：当内容编辑时处理WordPress内容的更新插入(upsert)。\n* **工作流3**：通过对嵌入文档进行检索增强生成(RAG)实现聊天功能。\n\n## 为什么使用这个模板？\n\n本模板适用于多种场景：\n\n* 构建需要网站内容嵌入的**GenAI应用**\n* 在网站中嵌入或创建**聊天机器人页面**，**提升用户体验**，方便访客查找信息\n* 获取访客在网站上**提问类型的洞察**\n* 通过向AI询问相关内容创意或检查**是否存在相似内容**来简化**内容管理**，便于内部链接建设\n\n## 先决条件\n\n* 能访问**Supabase**用于存储嵌入向量\n* 具备**Postgres**和**pgvector**基础知识\n* 拥有待嵌入内容的**WordPress网站**\n* 拥有**OpenAI API密钥**\n* 确保n8n工作流、Supabase实例和WordPress网站使用**相同时区**（或统一使用GMT）以保证一致性\n\n## 工作流1：初始嵌入\n\n此工作流获取WordPress页面和文章，从内容生成嵌入向量，并使用`pgvector`将其存储到Supabase。\n\n### 步骤0：创建Supabase表\n\n**节点：**\n\n* `Postgres - 创建文档表`：该表结构支持**1536维度的OpenAI嵌入**模型\n* `Postgres - 创建工作流执行历史表`\n\n这两个节点在Supabase中创建：\n\n* **documents表**：存储网站内容的嵌入向量\n* **n8n_website_embedding_histories表**：记录工作流执行情况以便高效管理更新插入，该表跟踪工作流执行ID和时间戳\n\n### 步骤1：获取并合并WordPress页面和文章\n\n**节点：**\n\n* `WordPress - 获取所有文章`\n* `WordPress - 获取所有页面`\n* `合并WordPress文章和页面`\n\n这三个节点获取**所有内容和元数据**并进行合并。  \n**重要提示**：**应用过滤器**避免为全站内容生成嵌入。\n\n### 步骤2：设置字段、应用过滤器及HTML转Markdown\n\n**节点：**\n\n* `设置字段`\n* `过滤器 - 仅发布且未保护的内容`\n* `HTML转Markdown`\n\n这三个节点通过以下方式准备嵌入内容：\n\n1. 设置内容嵌入和文档元数据所需字段\n2. 过滤仅包含**已发布**且**未保护**的内容(`protected=false`)，确保私有或未发布内容**不会进入GenAI应用**\n3. 将HTML转为Markdown，通过优化文档嵌入提升检索增强生成(RAG)的**性能和相关性**\n\n### 步骤3：生成嵌入、存储文档到Supabase并记录工作流执行\n\n**节点：**\n\n* `Supabase向量存储`\n  * **子节点**：\n    * `OpenAI嵌入`\n    * `默认数据加载器`\n    * `令牌分割器`\n    * `聚合`\n* `Supabase - 存储工作流执行`\n\n本步骤生成内容嵌入并存储到Supabase，随后记录工作流执行详情。\n\n1. **生成嵌入**：`OpenAI嵌入`节点为内容生成向量嵌入\n2. **加载数据**：`默认数据加载器`准备待存储的嵌入内容。存储的元数据包括内容标题、发布日期、修改日期、URL及**ID**（这对管理更新插入**至关重要**）\n\n⚠️ **重要提示**：注意**不要在元数据字段存储敏感信息**，这些信息将**被AI访问并可能出现在面向用户的回答中**。\n\n1. **令牌管理**：`令牌分割器`确保内容分段以符合令牌限制\n2. **聚合**：确保最后一个节点仅对1个项目运行\n3. **存储执行详情**：`Supabase - 存储工作流执行`节点保存工作流执行ID和时间戳，便于跟踪每次内容更新处理时间\n\n此设置**确保内容嵌入存储在Supabase中供下游应用使用**，同时工作流执行详情被记录以保证一致性和版本追踪。\n\n该工作流**仅需执行一次完成初始嵌入**。  \n下文介绍的**工作流2**将**处理所有后续更新插入**，确保新增或修改内容能及时嵌入。\n\n## 工作流2：处理文档更新插入\n\n**网站内容具有生命周期**——可能被**更新**、添加**新内容**，有时内容会被**删除**。\n\n在此**模板的首个版本**中，更新插入工作流处理：\n\n* **新增内容**\n* **更新内容**\n\n### 步骤1：通过定期CRON获取WordPress内容\n\n**节点：**\n\n* `CRON - 每30秒`\n* `Postgres - 获取最后工作流执行`\n* `WordPress - 获取最后工作流执行后修改的文章`\n* `WordPress - 获取最后工作流执行后修改的页面`\n* `合并获取的WordPress文章和页面`\n\n**CRON任务**（本模板设置为**每30秒运行**，但可**根据需要调整**）触发工作流。通过**PostgreSQL**查询`n8n_website_embedding_histories`表获取**最近工作流执行的时间戳**。\n\n接着HTTP节点使用**WordPress API**（**将模板中的示例URL替换为你自己的网站URL**并添加**WordPress凭证**）请求**所有在最后工作流执行日期后修改的文章和页面**。此过程捕获**新增**和**最近更新**的内容，随后合并获取的内容进行后续处理。\n\n### 步骤2：设置字段并使用过滤器\n\n**节点：**\n\n* `设置字段2`\n* `过滤器 - 仅发布且未保护的内容`\n\n与**工作流1-步骤2**相同，只是HTML转Markdown在后续步骤中使用。\n\n### 步骤3：遍历项目识别并路由更新内容与新内容\n\n**此处我最初想使用'更新文档'而非删除+插入方式，但遇到了挑战，特别是同时更新内容和元数据列时。欢迎提供任何帮助或建议！ :)**\n\n**节点：**\n\n* `遍历项目`\n* `Postgres - 过滤现有文档`\n* `分支`\n  * **路由`existing_documents`**（如果在元数据中找到匹配ID的文档）：\n    * `Supabase - 如果文档存在则删除行`：移除文档现有条目，准备更新\n    * `聚合2`：用于聚合Supabase上带ID的文档，确保`设置字段3`对每个WordPress内容**仅执行一次**以避免重复\n    * `设置字段3`：设置嵌入更新所需字段\n  * **路由`new_documents`**（如果在元数据中未找到匹配ID的文档）：\n    * `设置字段4`：配置新增内容的嵌入字段\n\n本步骤通过循环处理**每个项目**，根据**文档是否已存在**进行路由。**`聚合2`**节点作为控制确保`设置字段3`每个WordPress内容只运行一次，有效**避免重复执行**并优化更新流程。\n\n### 步骤4：HTML转Markdown、Supabase向量存储、更新工作流执行表\n\n**HTML转Markdown**节点与**工作流1-步骤2**相同。详见该部分关于HTML内容转为Markdown以提升嵌入性能和相关性的说明。\n\n随后内容被**存储到Supabase向量库**高效管理嵌入。最后**更新工作流执行表**。这些节点镜像**工作流1-步骤3的节点**。\n\n## 工作流3：GenAI应用示例：嵌入网站的聊天机器人\n\n### 步骤1：获取Supabase文档、聚合并在聊天输入后设置字段\n\n**节点：**\n\n* `当收到聊天消息时`\n* `Supabase - 从聊天输入获取文档`\n* `OpenAI嵌入1`\n* `聚合文档`\n* `设置字段`\n\n当用户向聊天发送消息时，提示（用户问题）被发送到Supabase向量存储检索器。RPC函数`match_documents`（在**工作流1-步骤0**创建）检索与用户问题相关的文档，实现更准确相关的回答。\n\n本步骤中：\n\n1. **Supabase向量存储检索器**获取匹配用户问题的文档，包括元数据\n2. **聚合文档**节点整合检索到的数据\n3. 最后**设置字段**组织数据为AI代理创建更易读的输入\n\n**直接使用AI代理**而不经过这些节点会导致元数据无法发送给大语言模型(LLM)，但**元数据对增强上下文**和AI回答准确性**至关重要**。包含元数据能让**AI回答引用相关文档细节**，使交互更具信息性。\n\n### 步骤2：调用AI代理、响应用户并存储聊天历史\n\n**节点：**\n\n* **AI代理**\n  * 子节点：\n    * `OpenAI聊天模型`\n    * `Postgres聊天记忆`\n* **响应Webhook**\n\n本步骤调用AI代理生成回答，响应用户并存储对话历史。使用的模型是**gpt4-o-mini**，选择它是出于成本效益考虑。",
  "title_zh": "WordPress - 集成Supabase与OpenAI的AI聊天机器人，提升用户体验",
  "publish_date_zh": "最后更新于6个月前",
  "workflow_json_zh": "{\n  \"id\": \"o8iTqIh2sVvnuWz5\",\n  \"meta\": {\n    \"instanceId\": \"b9faf72fe0d7c3be94b3ebff0778790b50b135c336412d28fd4fca2cbbf8d1f5\"\n  },\n  \"name\": \"RAG & GenAI App With WordPress Content\",\n  \"tags\": [],\n  \"nodes\": [\n    {\n      \"id\": \"c3738490-ed39-4774-b337-bf5ee99d0c72\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        500,\n        940\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3ab719bd-3652-433f-a597-9cd28f8cfcea\",\n      \"name\": \"Embeddings OpenAI\",\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\n      \"position\": [\n        2580,\n        1320\n      ],\n      \"parameters\": {\n        \"model\": \"text-embedding-3-small\",\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e8639569-2091-44de-a84d-c3fc3ce54de4\",\n      \"name\": \"Default Data Loader\",\n      \"type\": \"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\",\n      \"position\": [\n        2800,\n        1260\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"metadata\": {\n            \"metadataValues\": [\n              {\n                \"name\": \"title\",\n                \"value\": \"={{ $json.title }}\"\n              },\n              {\n                \"name\": \"url\",\n                \"value\": \"={{ $json.url }}\"\n              },\n              {\n                \"name\": \"content_type\",\n                \"value\": \"={{ $json.content_type }}\"\n              },\n              {\n                \"name\": \"publication_date\",\n                \"value\": \"={{ $json.publication_date }}\"\n              },\n              {\n                \"name\": \"modification_date\",\n                \"value\": \"={{ $json.modification_date }}\"\n              },\n              {\n                \"name\": \"id\",\n                \"value\": \"={{ $json.id }}\"\n              }\n            ]\n          }\n        },\n        \"jsonData\": \"={{ $json.data }}\",\n        \"jsonMode\": \"expressionData\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"e7f858eb-4dca-40ea-9da9-af953687e63d\",\n      \"name\": \"Token Splitter\",\n      \"type\": \"@n8n/n8n-nodes-langchain.textSplitterTokenSplitter\",\n      \"position\": [\n        2900,\n        1480\n      ],\n      \"parameters\": {\n        \"chunkSize\": 300,\n        \"chunkOverlap\": 30\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"27585104-5315-4c11-b333-4b5d27d9bae4\",\n      \"name\": \"Embeddings OpenAI1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\n      \"position\": [\n        1400,\n        2340\n      ],\n      \"parameters\": {\n        \"model\": \"text-embedding-3-small\",\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"35269a98-d905-4e4f-ae5b-dadad678f260\",\n      \"name\": \"OpenAI Chat Model\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"position\": [\n        2800,\n        2300\n      ],\n      \"parameters\": {\n        \"model\": \"gpt-4o-mini\",\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"cd26b6fa-a8bb-4139-9bec-8656d90d8203\",\n      \"name\": \"Postgres Chat Memory\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryPostgresChat\",\n      \"position\": [\n        2920,\n        2300\n      ],\n      \"parameters\": {\n        \"tableName\": \"website_chat_histories\"\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"7c718e1b-1398-49f3-ba67-f970a82983e0\",\n      \"name\": \"Respond to Webhook\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"position\": [\n        3380,\n        2060\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"f91f18e0-7a04-4218-8490-bff35dfbf7a8\",\n      \"name\": \"Set fields\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        2360,\n        2060\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"6888175b-853b-457a-96f7-33dfe952a05d\",\n              \"name\": \"documents\",\n              \"type\": \"string\",\n              \"value\": \"={{ \\n  JSON.stringify(\\n    $json.documents.map(doc => ({\\n      metadata: \\n        'URL: ' + doc.metadata.url.replaceAll('&rsquo;', \\\"'\\\").replaceAll(/[\\\"]/g, '') + '\\\\n' +\\n        'Publication Date: ' + doc.metadata.publication_date.replaceAll(/[\\\"]/g, '') + '\\\\n' +\\n        'Modification Date: ' + doc.metadata.modification_date.replaceAll(/[\\\"]/g, '') + '\\\\n' +\\n        'Content Type: ' + doc.metadata.content_type.replaceAll(/[\\\"]/g, '') + '\\\\n' +\\n        'Title: ' + doc.metadata.title.replaceAll('&rsquo;', \\\"'\\\").replaceAll(/[\\\"]/g, '') + '\\\\n',\\n      \\n      page_content: doc.pageContent\\n    }))\\n  ).replaceAll(/[\\\\[\\\\]{}]/g, '')\\n}}\"\n            },\n            {\n              \"id\": \"ae310b77-4560-4f44-8c4e-8d13f680072e\",\n              \"name\": \"sessionId\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('When chat message received').item.json.sessionId }}\"\n            },\n            {\n              \"id\": \"8738f4de-b3c3-45ad-af4b-8311c8105c35\",\n              \"name\": \"chatInput\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('When chat message received').item.json.chatInput }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"7f392a40-e353-4bb2-9ecf-3ee330110b95\",\n      \"name\": \"Embeddings OpenAI2\",\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\n      \"position\": [\n        6400,\n        860\n      ],\n      \"parameters\": {\n        \"model\": \"text-embedding-3-small\",\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"9e045857-5fcd-4c4b-83ee-ceda28195b76\",\n      \"name\": \"Default Data Loader1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\",\n      \"position\": [\n        6500,\n        860\n      ],\n      \"parameters\": {\n        \"options\": {\n          \"metadata\": {\n            \"metadataValues\": [\n              {\n                \"name\": \"title\",\n                \"value\": \"={{ $json.title }}\"\n              },\n              {\n                \"name\": \"url\",\n                \"value\": \"={{ $json.url }}\"\n              },\n              {\n                \"name\": \"content_type\",\n                \"value\": \"={{ $json.content_type }}\"\n              },\n              {\n                \"name\": \"publication_date\",\n                \"value\": \"={{ $json.publication_date }}\"\n              },\n              {\n                \"name\": \"modification_date\",\n                \"value\": \"={{ $json.modification_date }}\"\n              },\n              {\n                \"name\": \"id\",\n                \"value\": \"={{ $json.id }}\"\n              }\n            ]\n          }\n        },\n        \"jsonData\": \"={{ $json.data }}\",\n        \"jsonMode\": \"expressionData\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d0c1144b-4542-470e-8cbe-f985e839d9d0\",\n      \"name\": \"Token Splitter1\",\n      \"type\": \"@n8n/n8n-nodes-langchain.textSplitterTokenSplitter\",\n      \"position\": [\n        6500,\n        980\n      ],\n      \"parameters\": {\n        \"chunkSize\": 300,\n        \"chunkOverlap\": 30\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ec7cf1b2-f56f-45da-bb34-1dc8a66a7de6\",\n      \"name\": \"Markdown1\",\n      \"type\": \"n8n-nodes-base.markdown\",\n      \"position\": [\n        6240,\n        900\n      ],\n      \"parameters\": {\n        \"html\": \"={{ $json.content }}\",\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"8399976b-340a-49ce-a5b6-f7339957aa9d\",\n      \"name\": \"Postgres\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"position\": [\n        4260,\n        900\n      ],\n      \"parameters\": {\n        \"query\": \"select max(created_at) as last_workflow_execution from n8n_website_embedding_histories\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"typeVersion\": 2.5\n    },\n    {\n      \"id\": \"88e79403-06df-4f18-9e4c-a4c4e727aa17\",\n      \"name\": \"Aggregate\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        3300,\n        900\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"aggregate\": \"aggregateAllItemData\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"db7241e8-1c3a-4f91-99b7-383000f41afe\",\n      \"name\": \"Aggregate1\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        6800,\n        680\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"aggregate\": \"aggregateAllItemData\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"94bbba31-d83b-427f-a7dc-336725238294\",\n      \"name\": \"Aggregate2\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        7180,\n        1160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldsToAggregate\": {\n          \"fieldToAggregate\": [\n            {\n              \"fieldToAggregate\": \"metadata.id\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"52a110fa-cdd6-4b1d-99fe-394b5dfa0a1f\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        440,\n        600\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 3308.2687575224263,\n        \"height\": 1015.3571428571431,\n        \"content\": \"# 工作流1：初始嵌入\\n## 使用此工作流为您的WordPress网站内容创建初始嵌入\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"4cbf8135-a52b-4a54-b7b0-15ea27ce7ae3\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        3812,\n        605\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 3785.6673412474183,\n        \"height\": 1020.4528919414245,\n        \"content\": \"# 工作流程2：更新插入\\n## 使用此工作流程为存储在Supabase向量表中的文档更新插入嵌入向量\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f6e954e0-a37a-45ac-9882-20f4f1944b70\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        440,\n        1820\n      ],\n      \"parameters\": {\n        \"color\": 5,\n        \"width\": 3235.199999999999,\n        \"height\": 817.9199999999992,\n        \"content\": \"# 工作流程3：使用此流程为您的网站内容启用聊天功能。该聊天功能可嵌入您的网站，以提升用户体验\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"acbdd54b-f02a-41aa-a0ce-8642db560151\",\n      \"name\": \"Wordpress - Get all posts\",\n      \"type\": \"n8n-nodes-base.wordpress\",\n      \"position\": [\n        1260,\n        880\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"operation\": \"getAll\",\n        \"returnAll\": true\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"94fce59d-9336-4d49-a378-17335ec02e52\",\n      \"name\": \"Wordpress - Get all pages\",\n      \"type\": \"n8n-nodes-base.wordpress\",\n      \"position\": [\n        1260,\n        1060\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"resource\": \"page\",\n        \"operation\": \"getAll\",\n        \"returnAll\": true\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"b00c92e5-1765-4fd9-9981-e01053992a0a\",\n      \"name\": \"Sticky Note3\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1157,\n        727\n      ],\n      \"parameters\": {\n        \"width\": 1108.3519999999999,\n        \"height\": 561.4080000000004,\n        \"content\": \"## 使用过滤器仅为要包含在GenAI应用程序中的内容创建嵌入\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"f8a22739-898d-456b-93f8-79f74b60a00c\",\n      \"name\": \"Set fields1\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        2320,\n        900\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"de6711dc-d03c-488c-bef4-0a853e2d0a14\",\n              \"name\": \"publication_date\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.date }}\"\n            },\n            {\n              \"id\": \"f8e35dcc-c96c-4554-b6bc-8e5d7eca90e3\",\n              \"name\": \"modification_date\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.modified }}\"\n            },\n            {\n              \"id\": \"f6a6e3de-fe39-4cfc-ab07-c4ccfaef78f5\",\n              \"name\": \"content_type\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.type }}\"\n            },\n            {\n              \"id\": \"b0428598-073f-4560-9a0c-01caf3708921\",\n              \"name\": \"title\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.title.rendered }}\"\n            },\n            {\n              \"id\": \"534f51b4-b43a-40d3-8120-58df8043d909\",\n              \"name\": \"url\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.link }}\"\n            },\n            {\n              \"id\": \"dbe0c559-90bd-49f8-960e-0d85d5ed4f5e\",\n              \"name\": \"content\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.content.rendered }}\"\n            },\n            {\n              \"id\": \"892be7c6-b032-4129-b285-1986ed4ee046\",\n              \"name\": \"protected\",\n              \"type\": \"boolean\",\n              \"value\": \"={{ $json.excerpt.protected }}\"\n            },\n            {\n              \"id\": \"06fac885-4431-41ff-a43b-6eb84ca57401\",\n              \"name\": \"status\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.status }}\"\n            },\n            {\n              \"id\": \"43b1aea7-895e-41da-a0a6-2f1cec1f1b97\",\n              \"name\": \"id\",\n              \"type\": \"number\",\n              \"value\": \"={{ $json.id }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"404db031-f470-4e42-a3b3-66b849a86174\",\n      \"name\": \"Filter - Only published &  unprotected content\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        2520,\n        900\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"1f708587-f3d3-487a-843a-b6a2bfad2ca9\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"false\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.protected }}\",\n              \"rightValue\": \"\"\n            },\n            {\n              \"id\": \"04f47269-e112-44c3-9014-749898aca8bd\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.status }}\",\n              \"rightValue\": \"publish\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"05bb6091-515e-4f22-a3fd-d25b2046a03d\",\n      \"name\": \"HTML To Markdown\",\n      \"type\": \"n8n-nodes-base.markdown\",\n      \"position\": [\n        2740,\n        900\n      ],\n      \"parameters\": {\n        \"html\": \"={{ $json.content}}\",\n        \"options\": {}\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"391e9ea7-71dd-42ae-bee7-badcae32427c\",\n      \"name\": \"Supabase - Store workflow execution\",\n      \"type\": \"n8n-nodes-base.supabase\",\n      \"position\": [\n        3520,\n        900\n      ],\n      \"parameters\": {\n        \"tableId\": \"n8n_website_embedding_histories\",\n        \"fieldsUi\": {\n          \"fieldValues\": [\n            {\n              \"fieldId\": \"id\",\n              \"fieldValue\": \"={{ $executionId }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"47dad096-efc8-4bdd-9c22-49562325d8a0\",\n      \"name\": \"Sticky Note4\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        460,\n        1320\n      ],\n      \"parameters\": {\n        \"width\": 851.1898437499999,\n        \"height\": 275.2000000000001,\n        \"content\": \"## 如果Supabase上的\\\"documents\\\"表和\\\"n8n_website_embedding_histories\\\"表不存在，则运行这两个节点\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"d19f3a5f-fa42-46d0-a366-4c5a5d09f559\",\n      \"name\": \"Every 30 seconds\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [\n        3940,\n        900\n      ],\n      \"parameters\": {\n        \"rule\": {\n          \"interval\": [\n            {\n              \"field\": \"seconds\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1.2\n    },\n    {\n      \"id\": \"a22ab0dd-1da8-4fc2-8106-6130bf7938c8\",\n      \"name\": \"Sticky Note5\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        3820,\n        740\n      ],\n      \"parameters\": {\n        \"width\": 336.25,\n        \"height\": 292.5,\n        \"content\": \"## 将此节点设置为与您网站的发布和更新频率相匹配\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"ba25135b-6e6e-406b-b18a-f532a6e37276\",\n      \"name\": \"Wordpress - Get posts modified after last workflow execution\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        4600,\n        840\n      ],\n      \"parameters\": {\n        \"url\": \"https://mydomain.com/wp-json/wp/v2/posts\",\n        \"options\": {},\n        \"sendQuery\": true,\n        \"authentication\": \"predefinedCredentialType\",\n        \"queryParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"modified_after\",\n              \"value\": \"={{ $json.last_workflow_execution }}\"\n            }\n          ]\n        },\n        \"nodeCredentialType\": \"wordpressApi\"\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"a1d8572e-2b0d-40a1-a898-bbd563a6b190\",\n      \"name\": \"Wordpress - Get posts modified after last workflow execution1\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [\n        4600,\n        1060\n      ],\n      \"parameters\": {\n        \"url\": \"https://mydomain.com/wp-json/wp/v2/pages\",\n        \"options\": {},\n        \"sendQuery\": true,\n        \"authentication\": \"predefinedCredentialType\",\n        \"queryParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"modified_after\",\n              \"value\": \"={{ $json.last_workflow_execution }}\"\n            }\n          ]\n        },\n        \"nodeCredentialType\": \"wordpressApi\"\n      },\n      \"typeVersion\": 4.2\n    },\n    {\n      \"id\": \"c0839aaa-8ba7-47ff-8fa9-dc75e1c4da84\",\n      \"name\": \"Set fields2\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        5420,\n        920\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"de6711dc-d03c-488c-bef4-0a853e2d0a14\",\n              \"name\": \"publication_date\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.date }}\"\n            },\n            {\n              \"id\": \"f8e35dcc-c96c-4554-b6bc-8e5d7eca90e3\",\n              \"name\": \"modification_date\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.modified }}\"\n            },\n            {\n              \"id\": \"f6a6e3de-fe39-4cfc-ab07-c4ccfaef78f5\",\n              \"name\": \"content_type\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.type }}\"\n            },\n            {\n              \"id\": \"b0428598-073f-4560-9a0c-01caf3708921\",\n              \"name\": \"title\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.title.rendered }}\"\n            },\n            {\n              \"id\": \"534f51b4-b43a-40d3-8120-58df8043d909\",\n              \"name\": \"url\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.link }}\"\n            },\n            {\n              \"id\": \"dbe0c559-90bd-49f8-960e-0d85d5ed4f5e\",\n              \"name\": \"content\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.content.rendered }}\"\n            },\n            {\n              \"id\": \"892be7c6-b032-4129-b285-1986ed4ee046\",\n              \"name\": \"protected\",\n              \"type\": \"boolean\",\n              \"value\": \"={{ $json.content.protected }}\"\n            },\n            {\n              \"id\": \"06fac885-4431-41ff-a43b-6eb84ca57401\",\n              \"name\": \"status\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.status }}\"\n            },\n            {\n              \"id\": \"43b1aea7-895e-41da-a0a6-2f1cec1f1b97\",\n              \"name\": \"id\",\n              \"type\": \"number\",\n              \"value\": \"={{ $json.id }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"15b1d30a-5861-4380-89d5-0eef65240503\",\n      \"name\": \"Filter - Only published and unprotected content\",\n      \"type\": \"n8n-nodes-base.filter\",\n      \"position\": [\n        5760,\n        920\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"conditions\": {\n          \"options\": {\n            \"version\": 2,\n            \"leftValue\": \"\",\n            \"caseSensitive\": true,\n            \"typeValidation\": \"strict\"\n          },\n          \"combinator\": \"and\",\n          \"conditions\": [\n            {\n              \"id\": \"c2b25d74-91d7-44ea-8598-422100947b07\",\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"false\",\n                \"singleValue\": true\n              },\n              \"leftValue\": \"={{ $json.protected }}\",\n              \"rightValue\": \"\"\n            },\n            {\n              \"id\": \"3e63bf79-25ca-4ccf-aa86-ff5f90e1ece1\",\n              \"operator\": {\n                \"name\": \"filter.operator.equals\",\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              },\n              \"leftValue\": \"={{ $json.status }}\",\n              \"rightValue\": \"publish\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 2.2\n    },\n    {\n      \"id\": \"0990f503-8d6f-44f6-8d04-7e2f7d74301a\",\n      \"name\": \"Loop Over Items\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [\n        6040,\n        920\n      ],\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"6cc4e46e-3884-4259-b7ed-51c5552cc3e0\",\n      \"name\": \"Set fields3\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        7400,\n        1160\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"de6711dc-d03c-488c-bef4-0a853e2d0a14\",\n              \"name\": \"publication_date\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.publication_date }}\"\n            },\n            {\n              \"id\": \"f8e35dcc-c96c-4554-b6bc-8e5d7eca90e3\",\n              \"name\": \"modification_date\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.modification_date }}\"\n            },\n            {\n              \"id\": \"f6a6e3de-fe39-4cfc-ab07-c4ccfaef78f5\",\n              \"name\": \"content_type\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.content_type }}\"\n            },\n            {\n              \"id\": \"b0428598-073f-4560-9a0c-01caf3708921\",\n              \"name\": \"title\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.title }}\"\n            },\n            {\n              \"id\": \"534f51b4-b43a-40d3-8120-58df8043d909\",\n              \"name\": \"url\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.url }}\"\n            },\n            {\n              \"id\": \"dbe0c559-90bd-49f8-960e-0d85d5ed4f5e\",\n              \"name\": \"content\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.content }}\"\n            },\n            {\n              \"id\": \"892be7c6-b032-4129-b285-1986ed4ee046\",\n              \"name\": \"protected\",\n              \"type\": \"boolean\",\n              \"value\": \"={{ $('Loop Over Items').item.json.protected }}\"\n            },\n            {\n              \"id\": \"06fac885-4431-41ff-a43b-6eb84ca57401\",\n              \"name\": \"status\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.status }}\"\n            },\n            {\n              \"id\": \"43b1aea7-895e-41da-a0a6-2f1cec1f1b97\",\n              \"name\": \"id\",\n              \"type\": \"number\",\n              \"value\": \"={{ $('Loop Over Items').item.json.id }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"24f47982-a803-4848-8390-c400a8cebcee\",\n      \"name\": \"Set fields4\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        6680,\n        1400\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"de6711dc-d03c-488c-bef4-0a853e2d0a14\",\n              \"name\": \"publication_date\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.publication_date }}\"\n            },\n            {\n              \"id\": \"f8e35dcc-c96c-4554-b6bc-8e5d7eca90e3\",\n              \"name\": \"modification_date\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.modification_date }}\"\n            },\n            {\n              \"id\": \"f6a6e3de-fe39-4cfc-ab07-c4ccfaef78f5\",\n              \"name\": \"content_type\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.content_type }}\"\n            },\n            {\n              \"id\": \"b0428598-073f-4560-9a0c-01caf3708921\",\n              \"name\": \"title\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.title }}\"\n            },\n            {\n              \"id\": \"534f51b4-b43a-40d3-8120-58df8043d909\",\n              \"name\": \"url\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.url }}\"\n            },\n            {\n              \"id\": \"dbe0c559-90bd-49f8-960e-0d85d5ed4f5e\",\n              \"name\": \"content\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.content }}\"\n            },\n            {\n              \"id\": \"892be7c6-b032-4129-b285-1986ed4ee046\",\n              \"name\": \"protected\",\n              \"type\": \"boolean\",\n              \"value\": \"={{ $('Loop Over Items').item.json.protected }}\"\n            },\n            {\n              \"id\": \"06fac885-4431-41ff-a43b-6eb84ca57401\",\n              \"name\": \"status\",\n              \"type\": \"string\",\n              \"value\": \"={{ $('Loop Over Items').item.json.status }}\"\n            },\n            {\n              \"id\": \"43b1aea7-895e-41da-a0a6-2f1cec1f1b97\",\n              \"name\": \"id\",\n              \"type\": \"number\",\n              \"value\": \"={{ $('Loop Over Items').item.json.id }}\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 3.4\n    },\n    {\n      \"id\": \"5f59ebbf-ca17-4311-809c-85b74ce624cc\",\n      \"name\": \"Store documents on Supabase\",\n      \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreSupabase\",\n      \"position\": [\n        6380,\n        680\n      ],\n      \"parameters\": {\n        \"mode\": \"insert\",\n        \"options\": {\n          \"queryName\": \"match_documents\"\n        },\n        \"tableName\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"documents\",\n          \"cachedResultName\": \"documents\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"2422562e-9c95-4d77-ae8c-485b06f9234e\",\n      \"name\": \"Store workflow execution id and timestamptz\",\n      \"type\": \"n8n-nodes-base.supabase\",\n      \"position\": [\n        7060,\n        680\n      ],\n      \"parameters\": {\n        \"tableId\": \"n8n_website_embedding_histories\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"5013f3a1-f7fb-4fa7-9ef2-3599f77f5fc8\",\n      \"name\": \"Aggregate documents\",\n      \"type\": \"n8n-nodes-base.aggregate\",\n      \"position\": [\n        1960,\n        2060\n      ],\n      \"parameters\": {\n        \"options\": {},\n        \"fieldsToAggregate\": {\n          \"fieldToAggregate\": [\n            {\n              \"renameField\": true,\n              \"outputFieldName\": \"documents\",\n              \"fieldToAggregate\": \"document\"\n            }\n          ]\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"26532217-3206-4be3-b186-733bc364913b\",\n      \"name\": \"Sticky Note6\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1220,\n        1980\n      ],\n      \"parameters\": {\n        \"width\": 665.78125,\n        \"height\": 507.65625,\n        \"content\": \"## 在聊天输入后立即从Supabase检索文档，将元数据发送至OpenAI\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"78d2806c-8d13-44b8-bd6d-866fa794edae\",\n      \"name\": \"Sticky Note7\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        6375,\n        1090\n      ],\n      \"parameters\": {\n        \"width\": 1198.9843749999998,\n        \"height\": 515.4687499999998,\n        \"content\": \"## 切换操作：\\n- **若文档已存在且被更新过：** 先删除原有行再插入新嵌入向量\\n- **若为新文档：** 直接插入嵌入向量\"\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"3b5ffada-ae2a-45a2-a76c-69732b05761c\",\n      \"name\": \"Postgres - Create documents table\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"position\": [\n        560,\n        1440\n      ],\n      \"parameters\": {\n        \"query\": \"-- Enable the pgvector extension to work with embedding vectors\\nCREATE EXTENSION vector;\\n\\n-- Create a table to store your documents with default RLS\\nCREATE TABLE\\n  documents (\\n    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\\n    CONTENT TEXT, -- corresponds to Document.pageContent\\n    metadata jsonb, -- corresponds to Document.metadata\\n    embedding vector (1536) -- 1536 works for OpenAI embeddings, change if needed\\n  );\\n\\n-- Enable Row Level Security on the documents table\\nALTER TABLE documents ENABLE ROW LEVEL SECURITY;\\n\\n-- Create a function to search for documents\\nCREATE FUNCTION match_documents (\\n  query_embedding vector (1536),\\n  match_count INT DEFAULT NULL,\\n  FILTER jsonb DEFAULT '{}'\\n) RETURNS TABLE (\\n  id BIGINT,\\n  CONTENT TEXT,\\n  metadata jsonb,\\n  similarity FLOAT\\n) LANGUAGE plpgsql AS $$\\n#variable_conflict use_column\\nBEGIN\\n  RETURN QUERY\\n  SELECT\\n    id,\\n    content,\\n    metadata,\\n    1 - (documents.embedding <=> query_embedding) AS similarity\\n  FROM documents\\n  WHERE metadata @> filter\\n  ORDER BY documents.embedding <=> query_embedding\\n  LIMIT match_count;\\nEND;\\n$$;\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"typeVersion\": 2.5\n    },\n    {\n      \"id\": \"632a7b44-a062-472e-a777-805ee74a4bd6\",\n      \"name\": \"Postgres - Create workflow execution history table\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"position\": [\n        920,\n        1440\n      ],\n      \"parameters\": {\n        \"query\": \"CREATE TABLE\\n  n8n_website_embedding_histories (\\n    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\\n  );\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"typeVersion\": 2.5\n    },\n    {\n      \"id\": \"7c55e08b-e116-4e22-bd1d-e4bec5107d89\",\n      \"name\": \"Merge Wordpress Posts and Pages\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        1660,\n        900\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"4520db6c-2e68-45ff-9439-6fd95f95dc85\",\n      \"name\": \"Merge retrieved WordPress posts and pages\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"position\": [\n        5120,\n        920\n      ],\n      \"parameters\": {},\n      \"typeVersion\": 3\n    },\n    {\n      \"id\": \"d547a063-6b76-4bfd-ba0a-165181c4af19\",\n      \"name\": \"Postgres - Filter on existing documents\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"position\": [\n        6260,\n        1180\n      ],\n      \"parameters\": {\n        \"query\": \"SELECT *\\nFROM documents\\nWHERE (metadata->>'id')::integer = {{ $json.id }};\\n\",\n        \"options\": {},\n        \"operation\": \"executeQuery\"\n      },\n      \"typeVersion\": 2.5,\n      \"alwaysOutputData\": true\n    },\n    {\n      \"id\": \"03456a81-d512-4fd8-842a-27b6d8b3f94e\",\n      \"name\": \"Supabase - Delete row if documents exists\",\n      \"type\": \"n8n-nodes-base.supabase\",\n      \"position\": [\n        6900,\n        1160\n      ],\n      \"parameters\": {\n        \"tableId\": \"documents\",\n        \"operation\": \"delete\",\n        \"filterType\": \"string\",\n        \"filterString\": \"=metadata->>id=like.{{ $json.metadata.id }}\"\n      },\n      \"executeOnce\": false,\n      \"typeVersion\": 1,\n      \"alwaysOutputData\": false\n    },\n    {\n      \"id\": \"72e5bf4b-c413-4fb7-acb8-59e7abee60f7\",\n      \"name\": \"Switch\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [\n        6580,\n        1180\n      ],\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"outputKey\": \"existing_documents\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"operator\": {\n                      \"type\": \"number\",\n                      \"operation\": \"exists\",\n                      \"singleValue\": true\n                    },\n                    \"leftValue\": \"={{ $json.metadata.id }}\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            },\n            {\n              \"outputKey\": \"new_documents\",\n              \"conditions\": {\n                \"options\": {\n                  \"version\": 2,\n                  \"leftValue\": \"\",\n                  \"caseSensitive\": true,\n                  \"typeValidation\": \"strict\"\n                },\n                \"combinator\": \"and\",\n                \"conditions\": [\n                  {\n                    \"id\": \"696d1c1b-8674-4549-880e-e0d0ff681905\",\n                    \"operator\": {\n                      \"type\": \"number\",\n                      \"operation\": \"notExists\",\n                      \"singleValue\": true\n                    },\n                    \"leftValue\": \"={{ $json.metadata.id }}\",\n                    \"rightValue\": \"\"\n                  }\n                ]\n              },\n              \"renameOutput\": true\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"typeVersion\": 3.2\n    },\n    {\n      \"id\": \"6c5d8f6a-569e-4f1e-99a6-07ec492575ff\",\n      \"name\": \"When chat message received\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",\n      \"position\": [\n        660,\n        2060\n      ],\n      \"webhookId\": \"4e762668-c19f-40ec-83bf-302bb9fc6527\",\n      \"parameters\": {\n        \"mode\": \"webhook\",\n        \"public\": true,\n        \"options\": {}\n      },\n      \"typeVersion\": 1.1\n    },\n    {\n      \"id\": \"9a2f17ba-902f-4528-9eef-f8c0e4ddf516\",\n      \"name\": \"Supabase - Retrieve documents from chatinput\",\n      \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreSupabase\",\n      \"position\": [\n        1380,\n        2060\n      ],\n      \"parameters\": {\n        \"mode\": \"load\",\n        \"prompt\": \"={{ $json.chatInput }}\",\n        \"options\": {},\n        \"tableName\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"documents\",\n          \"cachedResultName\": \"documents\"\n        }\n      },\n      \"typeVersion\": 1\n    },\n    {\n      \"id\": \"43607f23-d33f-4aca-b478-f20ba8c218cf\",\n      \"name\": \"AI Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"position\": [\n        2780,\n        2060\n      ],\n      \"parameters\": {\n        \"text\": \"=Visitor's question : {{ $json.chatInput }}\\nDocuments found: {{ $json.documents }}\",\n        \"agent\": \"conversationalAgent\",\n        \"options\": {\n          \"systemMessage\": \"You are an assistant tasked with answering questions from visitors to the website {{your_website_url}}.\\n\\nInput:\\nVisitor's question: The question posed by the visitor.\\nDocuments found: A selection of documents from the vector database that match the visitor's question. These documents are accompanied by the following metadata:\\nurl: The URL of the page or blog post found.\\ncontent_type: The type of content (e.g., page or blog article).\\npublication_date: The publication date of the document.\\nmodification_date: The last modification date of the document.\\nObjective:\\nProvide a helpful answer using the relevant information from the documents found.\\nIMPORTANT : You must always include all metadata (url, content_type, publication_date, and modification_date) directly in the main answer to the visitor to indicate the source of the information. These should not be separated from the main answer, and must be naturally integrated into the response.\\nIf multiple documents are used in your response, mention each one with its respective metadata.\\nIf no relevant documents are found, or if the documents are insufficient, clearly indicate this in your response.\\nImportant: Respond in the language used by the visitor who asked the question.\\nExample of forced metadata integration:\\n\\\"The cost of a home charging station for an electric vehicle varies depending on several factors. According to [title of the page](https://example.com/charging-point-price), published on April 8, 2021, and updated on July 24, 2022, the price for a 7kW station is €777.57 including VAT. This page provides further details about the price range and installation considerations.\\\"\"\n        },\n        \"promptType\": \"define\"\n      },\n      \"typeVersion\": 1.6\n    },\n    {\n      \"id\": \"cd4107cb-e521-4c1e-88e2-3417a12fd585\",\n      \"name\": \"Supabase Vector Store\",\n      \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreSupabase\",\n      \"position\": [\n        2940,\n        900\n      ],\n      \"parameters\": {\n        \"mode\": \"insert\",\n        \"options\": {\n          \"queryName\": \"match_documents\"\n        },\n        \"tableName\": {\n          \"__rl\": true,\n          \"mode\": \"list\",\n          \"value\": \"documents\",\n          \"cachedResultName\": \"documents\"\n        }\n      },\n      \"typeVersion\": 1\n    }\n  ],\n  \"active\": false,\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"fe2a25f4-04b3-462c-97cd-a173b4a0631b\",\n  \"connections\": {\n    \"Switch\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Supabase - Delete row if documents exists\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Set fields4\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"AI Agent\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Postgres\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Wordpress - Get posts modified after last workflow execution\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Wordpress - Get posts modified after last workflow execution1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Aggregate\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Supabase - Store workflow execution\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Markdown1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Store documents on Supabase\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Aggregate1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Store workflow execution id and timestamptz\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Aggregate2\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set fields3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set fields\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set fields1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filter - Only published &  unprotected content\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set fields2\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Filter - Only published and unprotected content\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set fields3\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Set fields4\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Token Splitter\": {\n      \"ai_textSplitter\": [\n        [\n          {\n            \"node\": \"Default Data Loader\",\n            \"type\": \"ai_textSplitter\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop Over Items\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Markdown1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Postgres - Filter on existing documents\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Token Splitter1\": {\n      \"ai_textSplitter\": [\n        [\n          {\n            \"node\": \"Default Data Loader1\",\n            \"type\": \"ai_textSplitter\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Every 30 seconds\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Postgres\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"HTML To Markdown\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Supabase Vector Store\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Embeddings OpenAI\": {\n      \"ai_embedding\": [\n        [\n          {\n            \"node\": \"Supabase Vector Store\",\n            \"type\": \"ai_embedding\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"OpenAI Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Embeddings OpenAI1\": {\n      \"ai_embedding\": [\n        [\n          {\n            \"node\": \"Supabase - Retrieve documents from chatinput\",\n            \"type\": \"ai_embedding\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Embeddings OpenAI2\": {\n      \"ai_embedding\": [\n        [\n          {\n            \"node\": \"Store documents on Supabase\",\n            \"type\": \"ai_embedding\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Aggregate documents\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set fields\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Default Data Loader\": {\n      \"ai_document\": [\n        [\n          {\n            \"node\": \"Supabase Vector Store\",\n            \"type\": \"ai_document\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Default Data Loader1\": {\n      \"ai_document\": [\n        [\n          {\n            \"node\": \"Store documents on Supabase\",\n            \"type\": \"ai_document\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Postgres Chat Memory\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"AI Agent\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Supabase Vector Store\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Wordpress - Get all pages\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Wordpress Posts and Pages\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Wordpress - Get all posts\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Wordpress Posts and Pages\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When chat message received\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Supabase - Retrieve documents from chatinput\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Store documents on Supabase\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Merge Wordpress Posts and Pages\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set fields1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Postgres - Create documents table\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Postgres - Create workflow execution history table\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Wordpress - Get all posts\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Wordpress - Get all pages\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Postgres - Filter on existing documents\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Switch\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Merge retrieved WordPress posts and pages\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Set fields2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Supabase - Delete row if documents exists\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Supabase - Retrieve documents from chatinput\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Aggregate documents\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filter - Only published &  unprotected content\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"HTML To Markdown\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Filter - Only published and unprotected content\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Wordpress - Get posts modified after last workflow execution\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge retrieved WordPress posts and pages\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Wordpress - Get posts modified after last workflow execution1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge retrieved WordPress posts and pages\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    }\n  }\n}"
}