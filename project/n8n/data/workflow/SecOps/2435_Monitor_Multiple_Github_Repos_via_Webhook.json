{
  "title": "Monitor Multiple Github Repos via Webhook",
  "url": "https://n8n.io/workflows/2435-monitor-multiple-github-repos-via-webhook/",
  "category": "SecOps",
  "category_url": "https://n8n.io/workflows/categories/secops/?count=20",
  "author": "Jay Hartley",
  "publish_date": "Last update 7 months ago",
  "content": "",
  "workflow_json": "{\"meta\":{\"instanceId\":\"bb6a1286a4ce98dce786d6c2748b867c1252d53458c87d87fbf6824b862d4c9c\"},\"nodes\":[{\"id\":\"95252956-51fb-49ee-924e-df01ea27b98d\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[60,340],\"parameters\":{},\"typeVersion\":1},{\"id\":\"bfaaee00-7545-404b-9526-fb77726e833e\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-940,120],\"parameters\":{\"color\":5,\"width\":819.6790739248162,\"height\":212.7465225154412,\"content\":\"# Monitor Multiple Github Repos\\nThis workflow allows you to monitor multiple Github repos simultaneously without polling due to use of Webhooks. It programmatically allows for adding and deleting of repos to your watchlist to make management convenient.\\n\\n\"},\"typeVersion\":1},{\"id\":\"d1075f59-356e-47c4-9f85-c9067127d70f\",\"name\":\"Split Out\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[380,340],\"parameters\":{\"options\":{},\"fieldToSplitOut\":\"repos\"},\"typeVersion\":1},{\"id\":\"7d2a3226-e3b1-4cab-91e2-01f60c1184cb\",\"name\":\"Register Github Webhook\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[540,340],\"parameters\":{\"url\":\"={{$json.repos.replace('https://github.com','https://api.github.com/repos')}}/hooks\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"{\\\"name\\\":\\\"web\\\",\\\"active\\\":true,\\\"events\\\":[\\\"push\\\",\\\"pull_request\\\"],\\\"config\\\":{\\\"url\\\":\\\"https://webhook.site/d53d7bb9-72f5-4743-af4d-15c86f811492\\\",\\\"content_type\\\":\\\"json\\\",\\\"insecure_ssl\\\":\\\"0\\\"}}\",\"sendBody\":true,\"sendHeaders\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\",\"headerParameters\":{\"parameters\":[{\"name\":\"Accept\",\"value\":\"application/vnd.github+json\"},{\"name\":\"X-GitHub-Api-Version\",\"value\":\"2022-11-28\"}]}},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"A8NIXOiG7JTWqrUI\",\"name\":\"Header Auth account\"}},\"typeVersion\":4.2},{\"id\":\"c1b8a02b-38fd-43d1-b14b-18de6d84b729\",\"name\":\"Split Out1\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[400,760],\"parameters\":{\"options\":{},\"fieldToSplitOut\":\"repos\"},\"typeVersion\":1},{\"id\":\"35c3e7e0-50c8-4660-8e89-46849da751a9\",\"name\":\"Delete Github Webhook\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[900,760],\"parameters\":{\"url\":\"={{ $json.url }}\",\"method\":\"DELETE\",\"options\":{},\"sendHeaders\":true,\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\",\"headerParameters\":{\"parameters\":[{\"name\":\"Accept\",\"value\":\"application/vnd.github+json\"},{\"name\":\"X-GitHub-Api-Version\",\"value\":\"2022-11-28\"}]}},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"A8NIXOiG7JTWqrUI\",\"name\":\"Header Auth account\"}},\"typeVersion\":4.2},{\"id\":\"8eeb818d-9ac3-48bb-9a85-7099216bb243\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[160,680],\"parameters\":{\"width\":858.0344141951173,\"height\":279.85434264975174,\"content\":\"## Delete All Webhooks\"},\"typeVersion\":1},{\"id\":\"eb1a649a-8408-4e2f-a0a4-b9761ba8565b\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[167.0254479998971,260],\"parameters\":{\"width\":848.6550531504272,\"height\":283.2561904154995,\"content\":\"## Register Webhooks\"},\"typeVersion\":1},{\"id\":\"3053ad9f-2756-4518-b17e-56a4ba8a287f\",\"name\":\"Sticky Note6\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[160,1060],\"parameters\":{\"width\":858.0344141951173,\"height\":279.85434264975174,\"content\":\"## Handle Github Event\"},\"typeVersion\":1},{\"id\":\"6aca0ef9-a8d7-4e8a-a875-a0f46c624cc7\",\"name\":\"Fields\",\"type\":\"n8n-nodes-base.set\",\"position\":[280,1180],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"8dc55086-d1f5-4074-ba38-3ae6b477773c\",\"name\":\"repo\",\"type\":\"string\",\"value\":\"={{ $json.body.repository.full_name}}\"},{\"id\":\"384fc78d-0125-4cbc-83f0-a4d67194beee\",\"name\":\"repo_avatar\",\"type\":\"string\",\"value\":\"={{ $json.body.repository.owner.avatar_url }}\"},{\"id\":\"537313d4-074c-454e-b57f-0f952b1a590c\",\"name\":\"date\",\"type\":\"string\",\"value\":\"={{ $json.body.commits[0].timestamp }}\"},{\"id\":\"34bcccc2-cad4-4306-ad54-b3685d7bc896\",\"name\":\"author\",\"type\":\"string\",\"value\":\"={{ $json.body.commits[0].author.name }} ({{ $json.body.commits[0].author.username }})\"},{\"id\":\"c22e9ca3-9dbc-4f01-96e2-f914bd4230a1\",\"name\":\"modified_files\",\"type\":\"string\",\"value\":\"={{ $json.body.commits[0].modified.join(', ') }}\"},{\"id\":\"c17f33cf-0d27-4813-8f35-7cd276245a8b\",\"name\":\"url\",\"type\":\"string\",\"value\":\"={{ $json.body.commits[0].url }}\"},{\"id\":\"4b23a64e-2acc-476c-a36b-936c32360e67\",\"name\":\"description\",\"type\":\"string\",\"value\":\"={{ $json.body.commits[0].message }}\"}]}},\"typeVersion\":3.4},{\"id\":\"72f1ac3f-4277-481d-bbc7-c5137e7ef431\",\"name\":\"Notify Slack\",\"type\":\"n8n-nodes-base.slack\",\"disabled\":true,\"position\":[640,1060],\"parameters\":{\"text\":\"=[Github Event] {{ $json.date }}: {{ $json.author }} committed to {{ $json.repo }}!\\n\\nDescription:\\n```{{ $json.description }}```\\n\\nModified Files:\\n```{{ $json.modified_files }}```\\n{{ $json.url }}\",\"select\":\"channel\",\"channelId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"=\"},\"otherOptions\":{\"mrkdwn\":true,\"sendAsUser\":\"Github Bot\",\"includeLinkToWorkflow\":false}},\"typeVersion\":2.1},{\"id\":\"85ec09d2-fccb-4669-80d1-ba3bb7ce3544\",\"name\":\"Telegram\",\"type\":\"n8n-nodes-base.telegram\",\"position\":[640,1260],\"parameters\":{\"text\":\"=*[Github Event] @* `{{ $json.date }}`: \\n`{{ $json.author }}` committed to `{{ $json.repo }}`!\\n\\nDescription:\\n```{{ $json.description }}```\\n\\nModified Files:\\n```{{ $json.modified_files }}```\\n{{ $json.url }}\",\"replyMarkup\":\"inlineKeyboard\",\"additionalFields\":{}},\"credentials\":{\"telegramApi\":{\"id\":\"lulhyqZvExuxci8F\",\"name\":\"Telegram account\"}},\"typeVersion\":1.2},{\"id\":\"1f57a9cb-7061-4679-97ce-081746acfd55\",\"name\":\"Repos to Monitor\",\"type\":\"n8n-nodes-base.set\",\"position\":[220,340],\"parameters\":{\"mode\":\"raw\",\"options\":{},\"jsonOutput\":\"{\\n  \\\"repos\\\":[\\n    \\\"https://github.com/arose26/testrepo2\\\",\\n    \\\"https://github.com/arose26/testrepo3\\\"\\n    \\n  ]\\n}\\n\"},\"typeVersion\":3.4},{\"id\":\"6a83a757-673b-4ffc-9f91-54e5a24b8437\",\"name\":\"Sticky Note7\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-640,1180],\"parameters\":{\"color\":4,\"width\":520.7636244130189,\"height\":381.80326328628485,\"content\":\"## Test\\n## 1. Register Webhooks\\n- In `Repos to Monitor`, add any repo you want to monitor changes for. \\n- Disable `Webhook Trigger`, Click `Test Workflow` and if your Github credentials were set correctly, it will automatically register the webhooks. - You can test this by running the single node `Get Existing Webhook` and confirming it outputs the repo addresses.\\n## 2. Handle Github Events\\n- Now that you have registered the webhooks, reenable `Webhook Trigger` and activate the workflow.\\n- Make a commit to any of the registered repos.\\n- Confirm that the notification went through.\\n*That's it!*\\n\"},\"typeVersion\":1},{\"id\":\"cb204806-1f7d-494a-9e0f-340b56d2dcd5\",\"name\":\"Sticky Note8\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-940,440],\"parameters\":{\"color\":4,\"width\":821.1807025349485,\"height\":693.4508863847356,\"content\":\"## Setup\\n## 1. Creating Credentials on Github\\n#### Generate a personal access token on github by following these esteps;\\n- Right hand side of page -> Settings -> scroll to bottom -> Developer Settings > Personal Access Token > Tokens (classic) > Generate New Token\\n- Give scopes:\\n   *admin:repo_hook*\\n   *repo* (if you want to use it for your own private repo)\\n\\nif you need more help, see here:\\nhttps://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\\n\\n## 2. Setting Credentials in n8n\\nIn `Register Github Webhook`\\n*Authenticaion > Generic Credential Type*\\n*Generic Auth Type > Header Auth*\\n*Header Auth > Create New Credential* with Name set to *'Authorization'* and Value set to *'Bearer <YOUR GITHUB TOKEN HERE>'*.\\n(You can reuse this for `Delete Github Webhook` and `Get Existing Webhooks`).\\nNow in `Register Github Webhook`, scroll down to Send Body > JSON and inside the JSON, change the value of *\\\"url\\\"* to the webhook address given as Production URL in the node `Webhook Trigger`.\\n\\n\\n## 3. Notification settings\\nIn the third row, link up the Webhook Trigger to any API of your choice. Slack and Telegram are given as examples.\\nYou can also format the notification message as you wish.\\n\\n\"},\"typeVersion\":1},{\"id\":\"28bd218b-7dfb-460e-a2a8-012af08835cd\",\"name\":\"Webhook Trigger\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[40,1180],\"webhookId\":\"e90c3560-2c95-4e7e-9df3-2d084d7e8fde\",\"parameters\":{\"path\":\"e90c3560-2c95-4e7e-9df3-2d084d7e8fde\",\"options\":{},\"httpMethod\":\"POST\"},\"typeVersion\":2},{\"id\":\"b68dff7d-f7ee-47dc-b360-08d9ea2d7f42\",\"name\":\"Repos to Monitor1\",\"type\":\"n8n-nodes-base.set\",\"position\":[240,760],\"parameters\":{\"mode\":\"raw\",\"options\":{},\"jsonOutput\":\"{\\n  \\\"repos\\\":[\\n     \\\"https://github.com/arose26/testrepo\\\",\\n    \\\"https://github.com/arose26/testrepo2\\\",\\n    \\\"https://github.com/arose26/testrepo3\\\"\\n    \\n  ]\\n}\\n\"},\"typeVersion\":3.4},{\"id\":\"39dd7062-bb85-4f95-90f7-47fe27a257c8\",\"name\":\"Get Existing Hook\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[740,760],\"parameters\":{\"url\":\"={{ $json.url }}\",\"options\":{},\"sendHeaders\":true,\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\",\"headerParameters\":{\"parameters\":[{\"name\":\"Accept\",\"value\":\"application/vnd.github+json\"},{\"name\":\"X-GitHub-Api-Version\",\"value\":\"2022-11-28\"}]}},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"A8NIXOiG7JTWqrUI\",\"name\":\"Header Auth account\"}},\"typeVersion\":4.2,\"alwaysOutputData\":false},{\"id\":\"6d092a2f-ba48-4b0f-a772-4f55ba761d64\",\"name\":\"Hook URL\",\"type\":\"n8n-nodes-base.set\",\"position\":[560,760],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"b90c27f3-b81a-4098-9cd8-7934880d78a7\",\"name\":\"url\",\"type\":\"string\",\"value\":\"=https://api.github.com/repos/{{ $json.repos.replace('https://github.com/','')}}/hooks\"}]}},\"typeVersion\":3.4}],\"pinData\":{},\"connections\":{\"Fields\":{\"main\":[[{\"node\":\"Telegram\",\"type\":\"main\",\"index\":0}]]},\"Hook URL\":{\"main\":[[{\"node\":\"Get Existing Hook\",\"type\":\"main\",\"index\":0}]]},\"Split Out\":{\"main\":[[{\"node\":\"Register Github Webhook\",\"type\":\"main\",\"index\":0}]]},\"Split Out1\":{\"main\":[[{\"node\":\"Hook URL\",\"type\":\"main\",\"index\":0}]]},\"Webhook Trigger\":{\"main\":[[{\"node\":\"Fields\",\"type\":\"main\",\"index\":0}]]},\"Repos to Monitor\":{\"main\":[[{\"node\":\"Split Out\",\"type\":\"main\",\"index\":0}]]},\"Get Existing Hook\":{\"main\":[[{\"node\":\"Delete Github Webhook\",\"type\":\"main\",\"index\":0}]]},\"Repos to Monitor1\":{\"main\":[[{\"node\":\"Split Out1\",\"type\":\"main\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"Repos to Monitor\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "## What this workflow does\n\nThis workflow allows you to monitor multiple Github repos simultaneously without polling due to use of Webhooks. It programmatically allows for adding and deleting of repos to your watchlist to make management convenient.\n\n## Description\n\n  * Can monitor multiple repos simultaneously.\n  * Programmatically register or unregister repos from a list. No need for manual work.\n  * Webhook notification means no constant polling necessary.\n\n\n\n## Setup\n\n### 1\\. Creating Credentials on Github\n\nGenerate a personal access token on github by following these esteps;\n\n  * Right hand side of page -> Settings -> scroll to bottom -> Developer Settings > Personal Access Token > Tokens (classic) > Generate New Token\n  * Give scopes:  \n_admin:repo_hook_  \n_repo_ (if you want to use it for your own private repo)\n\n\n\nif you need more help, see here:  \n<https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens>\n\n### 2\\. Setting Credentials in n8n\n\nIn `Register Github Webhook`  \n_Authenticaion > Generic Credential Type_  \n_Generic Auth Type > Header Auth_  \n_Header Auth > Create New Credential_ with Name set to _'Authorization'_ and Value set to _'Bearer <YOUR GITHUB TOKEN HERE>'_.  \n(You can reuse this for `Delete Github Webhook` and `Get Existing Webhooks`).  \nNow in `Register Github Webhook`, scroll down to Send Body > JSON and inside the JSON, change the value of _\"url\"_ to the webhook address given as Production URL in the node `Webhook Trigger`.\n\n### 3\\. Notification settings\n\nIn the third row, link up the Webhook Trigger to any API of your choice. Slack and Telegram are given as examples.  \nYou can also format the notification message as you wish.\n\n_Setup time: roughly 10 minutes._\n\n## Instructions Video:\n\n<https://vimeo.com/1013473758>\n\n## Test\n\n## 1\\. Register Webhooks\n\n  * In `Repos to Monitor`, add any repo you want to monitor changes for.\n  * Disable `Webhook Trigger`, Click `Test Workflow` and if your Github credentials were set correctly, it will automatically register the webhooks. - You can test this by running the single node `Get Existing Webhook` and confirming it outputs the repo addresses.\n\n\n\n## 2\\. Handle Github Events\n\n  * Now that you have registered the webhooks, re-enable `Webhook Trigger` and activate the workflow.\n  * Make a commit to any of the registered repos.\n  * Confirm that the notification went through.  \n_That's it!_\n\n\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><h2>What this workflow does</h2>\n<p>This workflow allows you to monitor multiple Github repos simultaneously without polling due to use of Webhooks. It programmatically allows for adding and deleting of repos to your watchlist to make management convenient.</p>\n<h2>Description</h2>\n<ul>\n<li>Can monitor multiple repos simultaneously.</li>\n<li>Programmatically register or unregister repos from a list. No need for manual work.</li>\n<li>Webhook notification means no constant polling necessary.</li>\n</ul>\n<h2>Setup</h2>\n<h3>1. Creating Credentials on Github</h3>\n<p>Generate a personal access token on github by following these esteps;</p>\n<ul>\n<li>Right hand side of page -&gt; Settings -&gt; scroll to bottom -&gt; Developer Settings &gt; Personal Access Token &gt; Tokens (classic) &gt; Generate New Token</li>\n<li>Give scopes:<br>\n<em>admin:repo_hook</em><br>\n<em>repo</em> (if you want to use it for your own private repo)</li>\n</ul>\n<p>if you need more help, see here:<br>\n<a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\" rel=\"ugc nofollow\" target=\"_blank\">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens</a></p>\n<h3>2. Setting Credentials in n8n</h3>\n<p>In <code>Register Github Webhook</code><br>\n<em>Authenticaion &gt; Generic Credential Type</em><br>\n<em>Generic Auth Type &gt; Header Auth</em><br>\n<em>Header Auth &gt; Create New Credential</em> with Name set to <em>'Authorization'</em> and Value set to <em>'Bearer &lt;YOUR GITHUB TOKEN HERE&gt;'</em>.<br>\n(You can reuse this for <code>Delete Github Webhook</code> and <code>Get Existing Webhooks</code>).<br>\nNow in <code>Register Github Webhook</code>, scroll down to Send Body &gt; JSON and inside the JSON, change the value of <em>\"url\"</em> to the webhook address given as Production URL in the node <code>Webhook Trigger</code>.</p>\n<h3>3. Notification settings</h3>\n<p>In the third row, link up the Webhook Trigger to any API of your choice. Slack and Telegram are given as examples.<br>\nYou can also format the notification message as you wish.</p>\n<p><em>Setup time: roughly 10 minutes.</em></p>\n<h2>Instructions Video:</h2>\n<p><a href=\"https://vimeo.com/1013473758\" rel=\"ugc nofollow\" target=\"_blank\">https://vimeo.com/1013473758</a></p>\n<h2>Test</h2>\n<h2>1. Register Webhooks</h2>\n<ul>\n<li>In <code>Repos to Monitor</code>, add any repo you want to monitor changes for.</li>\n<li>Disable <code>Webhook Trigger</code>, Click <code>Test Workflow</code> and if your Github credentials were set correctly, it will automatically register the webhooks. - You can test this by running the single node <code>Get Existing Webhook</code> and confirming it outputs the repo addresses.</li>\n</ul>\n<h2>2. Handle Github Events</h2>\n<ul>\n<li>Now that you have registered the webhooks, re-enable <code>Webhook Trigger</code> and activate the workflow.</li>\n<li>Make a commit to any of the registered repos.</li>\n<li>Confirm that the notification went through.<br>\n<em>That's it!</em></li>\n</ul>\n</div><!--]-->",
  "readme_zh": "## 工作流功能说明\n\n本工作流通过Webhook技术实现多GitHub仓库同步监控，无需轮询查询。支持通过编程方式动态添加/删除监控仓库列表，便于集中管理。\n\n## 核心特性\n\n* 支持同时监控多个代码仓库\n* 可通过编程方式注册/注销监控列表，无需人工操作\n* 基于Webhook推送机制，避免持续轮询造成的资源浪费\n\n## 配置指南\n\n### 1. 创建GitHub凭证\n\n按以下步骤生成个人访问令牌：\n* 页面右上角 Settings → 底部 Developer Settings → Personal Access Token → Tokens (classic) → Generate New Token\n* 所需权限范围：  \n_admin:repo_hook_  \n_repo_（如需监控私有仓库）\n\n详细指引参见：  \n<https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens>\n\n### 2. 配置n8n凭证\n\n在`Register Github Webhook`节点中：  \n_认证方式 > 通用凭证类型_  \n_通用认证类型 > 头部认证_  \n创建新凭证：名称设为_'Authorization'_，值设为_'Bearer <你的GitHub令牌>'_  \n（该凭证可复用于`Delete Github Webhook`和`Get Existing Webhooks`节点）  \n最后在JSON请求体中，将_\"url\"_值替换为`Webhook Trigger`节点提供的生产环境URL\n\n### 3. 通知设置\n\n在第三行将`Webhook Trigger`连接至任意API接口（示例提供Slack/Telegram配置），可自定义通知消息格式。\n\n_预计配置时间：约10分钟_\n\n## 演示视频：\n<https://vimeo.com/1013473758>\n\n## 测试流程\n\n### 1. 注册Webhook\n* 在`Repos to Monitor`中添加需监控的仓库\n* 禁用`Webhook Trigger`后点击`Test Workflow`，若凭证正确将自动完成注册\n* 可通过`Get Existing Webhook`节点验证注册结果\n\n### 2. 处理GitHub事件\n* 重新启用`Webhook Trigger`并激活工作流\n* 向任意注册仓库提交代码变更\n* 确认成功接收通知  \n_配置完成！_",
  "title_zh": "通过Webhook监控多个Github仓库",
  "publish_date_zh": "最后更新于7个月前",
  "workflow_json_zh": "{\"meta\": {\"instanceId\": \"bb6a1286a4ce98dce786d6c2748b867c1252d53458c87d87fbf6824b862d4c9c\"}, \"nodes\": [{\"id\": \"95252956-51fb-49ee-924e-df01ea27b98d\", \"name\": \"点击“测试工作流程”时\", \"type\": \"n8n-nodes-base.manualTrigger\", \"position\": [60, 340], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"bfaaee00-7545-404b-9526-fb77726e833e\", \"name\": \"便利贴\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-940, 120], \"parameters\": {\"color\": 5, \"width\": 819.6790739248162, \"height\": 212.7465225154412, \"content\": \"# 监控多个Github代码库\\n该工作流通过采用Webhook技术，无需轮询即可同时监控多个Github代码库。系统支持以编程方式添加或删除监控列表中的代码库，便于集中管理。\"}, \"typeVersion\": 1}, {\"id\": \"d1075f59-356e-47c4-9f85-c9067127d70f\", \"name\": \"拆分出来\", \"type\": \"n8n-nodes-base.splitOut\", \"position\": [380, 340], \"parameters\": {\"options\": {}, \"fieldToSplitOut\": \"仓库\"}, \"typeVersion\": 1}, {\"id\": \"7d2a3226-e3b1-4cab-91e2-01f60c1184cb\", \"name\": \"注册Github Webhook\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [540, 340], \"parameters\": {\"url\": \"={{$json.repos.replace('https://github.com','https://api.github.com/repos')}}/hooks\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"```json\\n{\\n  \\\"name\\\": \\\"web\\\",\\n  \\\"active\\\": true,\\n  \\\"events\\\": [\\\"push\\\", \\\"pull_request\\\"],\\n  \\\"config\\\": {\\n    \\\"url\\\": \\\"https://webhook.site/d53d7bb9-72f5-4743-af4d-15c86f811492\\\",\\n    \\\"content_type\\\": \\\"json\\\",\\n    \\\"insecure_ssl\\\": \\\"0\\\"\\n  }\\n}\\n```\", \"sendBody\": true, \"sendHeaders\": true, \"specifyBody\": \"JSON\", \"authentication\": \"通用凭证类型\", \"genericAuthType\": \"HTTP头部认证\", \"headerParameters\": {\"parameters\": [{\"name\": \"Accept\", \"value\": \"application/vnd.github+json\"}, {\"name\": \"X-GitHub-Api-Version\", \"value\": \"2022-11-28\"}]}}, \"credentials\": {\"httpHeaderAuth\": {\"id\": \"A8NIXOiG7JTWqrUI\", \"name\": \"Header Auth account\"}}, \"typeVersion\": 4.2}, {\"id\": \"c1b8a02b-38fd-43d1-b14b-18de6d84b729\", \"name\": \"分离输出1\", \"type\": \"n8n-nodes-base.splitOut\", \"position\": [400, 760], \"parameters\": {\"options\": {}, \"fieldToSplitOut\": \"仓库\"}, \"typeVersion\": 1}, {\"id\": \"35c3e7e0-50c8-4660-8e89-46849da751a9\", \"name\": \"删除Github Webhook\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [900, 760], \"parameters\": {\"url\": \"={{ $json.url }}\", \"method\": \"删除\", \"options\": {}, \"sendHeaders\": true, \"authentication\": \"通用凭证类型\", \"genericAuthType\": \"HTTP头部认证\", \"headerParameters\": {\"parameters\": [{\"name\": \"Accept\", \"value\": \"application/vnd.github+json\"}, {\"name\": \"X-GitHub-Api-Version\", \"value\": \"2022-11-28\"}]}}, \"credentials\": {\"httpHeaderAuth\": {\"id\": \"A8NIXOiG7JTWqrUI\", \"name\": \"Header Auth account\"}}, \"typeVersion\": 4.2}, {\"id\": \"8eeb818d-9ac3-48bb-9a85-7099216bb243\", \"name\": \"便利贴4\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [160, 680], \"parameters\": {\"width\": 858.0344141951173, \"height\": 279.85434264975174, \"content\": \"## 删除所有Webhook\"}, \"typeVersion\": 1}, {\"id\": \"eb1a649a-8408-4e2f-a0a4-b9761ba8565b\", \"name\": \"便利贴5\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [167.0254479998971, 260], \"parameters\": {\"width\": 848.6550531504272, \"height\": 283.2561904154995, \"content\": \"## 注册Webhook\"}, \"typeVersion\": 1}, {\"id\": \"3053ad9f-2756-4518-b17e-56a4ba8a287f\", \"name\": \"便利贴6\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [160, 1060], \"parameters\": {\"width\": 858.0344141951173, \"height\": 279.85434264975174, \"content\": \"## 处理Github事件\"}, \"typeVersion\": 1}, {\"id\": \"6aca0ef9-a8d7-4e8a-a875-a0f46c624cc7\", \"name\": \"Fields\", \"type\": \"n8n-nodes-base.set\", \"position\": [280, 1180], \"parameters\": {\"options\": {}, \"assignments\": {\"assignments\": [{\"id\": \"8dc55086-d1f5-4074-ba38-3ae6b477773c\", \"name\": \"repo\", \"type\": \"string\", \"value\": \"={{ $json.body.repository.full_name}}\"}, {\"id\": \"384fc78d-0125-4cbc-83f0-a4d67194beee\", \"name\": \"repo_avatar\", \"type\": \"string\", \"value\": \"={{ $json.body.repository.owner.avatar_url }}\"}, {\"id\": \"537313d4-074c-454e-b57f-0f952b1a590c\", \"name\": \"date\", \"type\": \"string\", \"value\": \"={{ $json.body.commits[0].timestamp }}\"}, {\"id\": \"34bcccc2-cad4-4306-ad54-b3685d7bc896\", \"name\": \"author\", \"type\": \"string\", \"value\": \"={{ $json.body.commits[0].author.name }} ({{ $json.body.commits[0].author.username }})\"}, {\"id\": \"c22e9ca3-9dbc-4f01-96e2-f914bd4230a1\", \"name\": \"modified_files\", \"type\": \"string\", \"value\": \"={{ $json.body.commits[0].modified.join(', ') }}\"}, {\"id\": \"c17f33cf-0d27-4813-8f35-7cd276245a8b\", \"name\": \"url\", \"type\": \"string\", \"value\": \"={{ $json.body.commits[0].url }}\"}, {\"id\": \"4b23a64e-2acc-476c-a36b-936c32360e67\", \"name\": \"description\", \"type\": \"string\", \"value\": \"={{ $json.body.commits[0].message }}\"}]}}, \"typeVersion\": 3.4}, {\"id\": \"72f1ac3f-4277-481d-bbc7-c5137e7ef431\", \"name\": \"通知 Slack\", \"type\": \"n8n-nodes-base.slack\", \"disabled\": true, \"position\": [640, 1060], \"parameters\": {\"text\": \"=[Github 动态] {{ $json.date }}: {{ $json.author }} 向 {{ $json.repo }} 提交了代码！\\n\\n提交说明：\\n```{{ $json.description }}```\\n\\n修改文件：\\n```{{ $json.modified_files }}```\\n{{ $json.url }}\", \"select\": \"频道\", \"channelId\": {\"__rl\": true, \"mode\": \"id\", \"value\": \"=\"}, \"otherOptions\": {\"mrkdwn\": true, \"sendAsUser\": \"Github Bot\", \"includeLinkToWorkflow\": false}}, \"typeVersion\": 2.1}, {\"id\": \"85ec09d2-fccb-4669-80d1-ba3bb7ce3544\", \"name\": \"电报\", \"type\": \"n8n-nodes-base.telegram\", \"position\": [640, 1260], \"parameters\": {\"text\": \"=*[Github 动态] @* `{{ $json.date }}`:  \\n`{{ $json.author }}` 向 `{{ $json.repo }}` 提交了代码！\\n\\n提交说明：  \\n```{{ $json.description }}```  \\n\\n修改文件：  \\n```{{ $json.modified_files }}```  \\n{{ $json.url }}\", \"replyMarkup\": \"内联键盘\", \"additionalFields\": {}}, \"credentials\": {\"telegramApi\": {\"id\": \"lulhyqZvExuxci8F\", \"name\": \"Telegram account\"}}, \"typeVersion\": 1.2}, {\"id\": \"1f57a9cb-7061-4679-97ce-081746acfd55\", \"name\": \"监控仓库\", \"type\": \"n8n-nodes-base.set\", \"position\": [220, 340], \"parameters\": {\"mode\": \"raw\", \"options\": {}, \"jsonOutput\": \"{\\n  \\\"代码库\\\":[\\n    \\\"https://github.com/arose26/testrepo2\\\",\\n    \\\"https://github.com/arose26/testrepo3\\\"\\n    \\n  ]\\n}\"}, \"typeVersion\": 3.4}, {\"id\": \"6a83a757-673b-4ffc-9f91-54e5a24b8437\", \"name\": \"便利贴7\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-640, 1180], \"parameters\": {\"color\": 4, \"width\": 520.7636244130189, \"height\": 381.80326328628485, \"content\": \"## 测试流程\\n## 1. 注册Webhook\\n- 在`监控仓库列表`中添加需要监测变更的代码库\\n- 关闭`Webhook触发器`，点击`测试工作流`。若Github凭证设置正确，系统将自动完成Webhook注册\\n- 可通过运行单节点`获取现有Webhook`进行验证，确认输出中包含目标仓库地址\\n## 2. 处理Github事件\\n- 完成Webhook注册后，重新启用`Webhook触发器`并激活工作流\\n- 向任意已注册仓库提交代码变更\\n- 确认通知消息已成功接收\\n*操作完成！*\"}, \"typeVersion\": 1}, {\"id\": \"cb204806-1f7d-494a-9e0f-340b56d2dcd5\", \"name\": \"便利贴8\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-940, 440], \"parameters\": {\"color\": 4, \"width\": 821.1807025349485, \"height\": 693.4508863847356, \"content\": \"## 设置流程\\n## 1. 创建Github凭证\\n#### 按以下步骤生成个人访问令牌：\\n- 页面右侧 -> 设置(Settings) -> 滚动到底部 -> 开发者设置(Developer Settings) > 个人访问令牌(Personal Access Token) > 经典令牌(Tokens classic) > 生成新令牌\\n- 授予权限范围：\\n   *admin:repo_hook*\\n   *repo*（如需用于私有仓库）\\n\\n如需更多帮助，请参阅：\\nhttps://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\\n\\n## 2. 在n8n中配置凭证\\n在`注册Github Webhook`节点中：\\n*认证方式 > 通用凭证类型*\\n*通用认证类型 > 头部认证*\\n*头部认证 > 创建新凭证*，名称设为*'Authorization'*，值设为*'Bearer <你的GITHUB令牌>'*。\\n（该凭证可复用于`删除Github Webhook`和`获取现有Webhooks`节点）\\n然后在`注册Github Webhook`节点中，滚动至发送主体 > JSON部分，将*\\\"url\\\"*值修改为`Webhook触发器`节点中提供的生产环境URL。\\n\\n## 3. 通知设置\\n在第三行中，将Webhook触发器连接至任意API接口。示例中提供了Slack和Telegram的配置方案。\\n您可自由定制通知消息的格式。\"}, \"typeVersion\": 1}, {\"id\": \"28bd218b-7dfb-460e-a2a8-012af08835cd\", \"name\": \"Webhook 触发器\", \"type\": \"n8n-nodes-base.webhook\", \"position\": [40, 1180], \"webhookId\": \"e90c3560-2c95-4e7e-9df3-2d084d7e8fde\", \"parameters\": {\"path\": \"e90c3560-2c95-4e7e-9df3-2d084d7e8fde\", \"options\": {}, \"httpMethod\": \"邮政\"}, \"typeVersion\": 2}, {\"id\": \"b68dff7d-f7ee-47dc-b360-08d9ea2d7f42\", \"name\": \"需监控的仓库1\", \"type\": \"n8n-nodes-base.set\", \"position\": [240, 760], \"parameters\": {\"mode\": \"raw\", \"options\": {}, \"jsonOutput\": \"{\\n  \\\"代码仓库\\\":[\\n     \\\"https://github.com/arose26/testrepo\\\",\\n    \\\"https://github.com/arose26/testrepo2\\\",\\n    \\\"https://github.com/arose26/testrepo3\\\"\\n    \\n  ]\\n}\"}, \"typeVersion\": 3.4}, {\"id\": \"39dd7062-bb85-4f95-90f7-47fe27a257c8\", \"name\": \"获取现有钩子\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [740, 760], \"parameters\": {\"url\": \"={{ $json.url }}\", \"options\": {}, \"sendHeaders\": true, \"authentication\": \"通用凭证类型\", \"genericAuthType\": \"HTTP头部认证\", \"headerParameters\": {\"parameters\": [{\"name\": \"Accept\", \"value\": \"application/vnd.github+json\"}, {\"name\": \"X-GitHub-Api-Version\", \"value\": \"2022-11-28\"}]}}, \"credentials\": {\"httpHeaderAuth\": {\"id\": \"A8NIXOiG7JTWqrUI\", \"name\": \"Header Auth account\"}}, \"typeVersion\": 4.2, \"alwaysOutputData\": false}, {\"id\": \"6d092a2f-ba48-4b0f-a772-4f55ba761d64\", \"name\": \"钩子URL\", \"type\": \"n8n-nodes-base.set\", \"position\": [560, 760], \"parameters\": {\"options\": {}, \"assignments\": {\"assignments\": [{\"id\": \"b90c27f3-b81a-4098-9cd8-7934880d78a7\", \"name\": \"url\", \"type\": \"string\", \"value\": \"=https://api.github.com/repos/{{ $json.repos.replace('https://github.com/','')}}/hooks\"}]}}, \"typeVersion\": 3.4}], \"pinData\": {}, \"connections\": {\"Fields\": {\"main\": [[{\"node\": \"Telegram\", \"type\": \"main\", \"index\": 0}]]}, \"Hook URL\": {\"main\": [[{\"node\": \"Get Existing Hook\", \"type\": \"main\", \"index\": 0}]]}, \"Split Out\": {\"main\": [[{\"node\": \"Register Github Webhook\", \"type\": \"main\", \"index\": 0}]]}, \"Split Out1\": {\"main\": [[{\"node\": \"Hook URL\", \"type\": \"main\", \"index\": 0}]]}, \"Webhook Trigger\": {\"main\": [[{\"node\": \"Fields\", \"type\": \"main\", \"index\": 0}]]}, \"Repos to Monitor\": {\"main\": [[{\"node\": \"Split Out\", \"type\": \"main\", \"index\": 0}]]}, \"Get Existing Hook\": {\"main\": [[{\"node\": \"Delete Github Webhook\", \"type\": \"main\", \"index\": 0}]]}, \"Repos to Monitor1\": {\"main\": [[{\"node\": \"Split Out1\", \"type\": \"main\", \"index\": 0}]]}, \"When clicking ‘Test workflow’\": {\"main\": [[{\"node\": \"Repos to Monitor\", \"type\": \"main\", \"index\": 0}]]}}}"
}