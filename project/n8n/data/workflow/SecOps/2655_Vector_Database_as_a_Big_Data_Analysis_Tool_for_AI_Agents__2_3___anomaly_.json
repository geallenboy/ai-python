{
  "title": "Vector Database as a Big Data Analysis Tool for AI Agents [2/3 - anomaly]",
  "url": "https://n8n.io/workflows/2655-vector-database-as-a-big-data-analysis-tool-for-ai-agents-23-anomaly/",
  "category": "SecOps",
  "category_url": "https://n8n.io/workflows/categories/secops/?count=20",
  "author": "Jenny",
  "publish_date": "Last update 4 months ago",
  "content": "",
  "workflow_json": "{\"id\":\"m9aACcHqydEbH4nR\",\"meta\":{\"instanceId\":\"205b3bc06c96f2dc835b4f00e1cbf9a937a74eeb3b47c99d0c30b0586dbf85aa\"},\"name\":\"[2/3] Set up medoids (2 types) for anomaly detection (crops dataset)\",\"tags\":[{\"id\":\"spMntyrlE9ydvWFA\",\"name\":\"anomaly-detection\",\"createdAt\":\"2024-12-08T22:05:15.945Z\",\"updatedAt\":\"2024-12-09T12:50:19.287Z\"}],\"nodes\":[{\"id\":\"edaa871e-2b79-400e-8328-333d250bfdd2\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[-660,-220],\"parameters\":{},\"typeVersion\":1},{\"id\":\"ebd964de-faa4-4dc0-9245-cc9154b9ce02\",\"name\":\"Total Points in Collection\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[180,-220],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').item.json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').item.json.collectionName }}/points/count\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={\\n  \\\"exact\\\": true\\n}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"b51f6344-d090-4341-a908-581b78664b07\",\"name\":\"Cluster Distance Matrix\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1200,-360],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/search/matrix/offsets\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{\\n{\\n    \\\"sample\\\": $json.maxClusterSize,\\n    \\\"limit\\\": $json.maxClusterSize,\\n    \\\"using\\\": \\\"voyage\\\",\\n    \\\"filter\\\": {\\n        \\\"must\\\": {\\n            \\\"key\\\": \\\"crop_name\\\",\\n            \\\"match\\\": { \\\"value\\\": $json.cropName }\\n        }\\n    }\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"bebe5249-b138-4d7a-84b8-51eaed4331b8\",\"name\":\"Scipy Sparse Matrix\",\"type\":\"n8n-nodes-base.code\",\"position\":[1460,-360],\"parameters\":{\"mode\":\"runOnceForEachItem\",\"language\":\"python\",\"pythonCode\":\"from scipy.sparse import coo_array\\n\\ncluster = _input.item.json['result']\\n\\nscores = list(cluster['scores'])\\noffsets_row = list(cluster['offsets_row'])\\noffsets_col = list(cluster['offsets_col'])\\n\\ncluster_matrix = coo_array((scores, (offsets_row, offsets_col)))\\nthe_most_similar_to_others = cluster_matrix.sum(axis=1).argmax()\\n\\nreturn {\\n    \\\"json\\\": {\\n        \\\"medoid_id\\\": cluster[\\\"ids\\\"][the_most_similar_to_others]\\n    }\\n}\\n\"},\"typeVersion\":2},{\"id\":\"006c38bb-a271-40e1-9c5b-5a0a29ea96de\",\"name\":\"Set medoid id\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2000,-680],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/payload\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"payload\\\": {\\\"is_medoid\\\": true},\\n  \\\"points\\\": [$json.medoid_id]\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"aeeccfc5-67bf-4047-8a5a-8830e4fc87e8\",\"name\":\"Get Medoid Vector\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2000,-360],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"ids\\\": [$json.medoid_id],\\n  \\\"with_vector\\\": true,\\n  \\\"with_payload\\\": true\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"11fe54d5-9dc8-49ce-9e3f-1103ace0a3d5\",\"name\":\"Prepare for Searching Threshold\",\"type\":\"n8n-nodes-base.set\",\"position\":[2240,-360],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"6faa5949-968c-42bf-8ce8-cf2403566eba\",\"name\":\"oppositeOfCenterVector\",\"type\":\"array\",\"value\":\"={{ $json.result[0].vector.voyage.map(value => value * -1)}}\"},{\"id\":\"84eb42be-2ea5-4a76-9c76-f21a962360a3\",\"name\":\"cropName\",\"type\":\"string\",\"value\":\"={{ $json.result[0].payload.crop_name }}\"},{\"id\":\"b68d2e42-0dde-4875-bb59-056f29b6ac0a\",\"name\":\"centerId\",\"type\":\"string\",\"value\":\"={{ $json.result[0].id }}\"}]}},\"typeVersion\":3.4},{\"id\":\"4051b488-2e2e-4d33-9cc9-e1403c9173ed\",\"name\":\"Searching Score\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2500,-360],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/query\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"query\\\": $json.oppositeOfCenterVector,\\n  \\\"using\\\": \\\"voyage\\\",\\n  \\\"exact\\\": true,\\n  \\\"filter\\\": {\\n    \\\"must\\\": [\\n      {\\n        \\\"key\\\": \\\"crop_name\\\",\\n        \\\"match\\\": {\\\"value\\\": $json.cropName }\\n      }\\n    ]\\n  },\\n  \\\"limit\\\": $('Medoids Variables').first().json.furthestFromCenter,\\n  \\\"with_payload\\\": true\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"1c6cb6ee-ce3a-4d1a-b1b4-1e59e9a8f5b6\",\"name\":\"Threshold Score\",\"type\":\"n8n-nodes-base.set\",\"position\":[2760,-360],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"579a2ee4-0ab2-4fde-909a-01166624c9d8\",\"name\":\"thresholdScore\",\"type\":\"number\",\"value\":\"={{ $json.result.points.last().score * -1 }}\"},{\"id\":\"11eab775-f709-40a9-b0fe-d1059b67de05\",\"name\":\"centerId\",\"type\":\"string\",\"value\":\"={{ $('Prepare for Searching Threshold').item.json.centerId }}\"}]}},\"typeVersion\":3.4},{\"id\":\"1bab1b9e-7b80-4ef3-8e3d-be4874792e58\",\"name\":\"Set medoid threshold score\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2940,-360],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/payload\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"payload\\\": {\\\"is_medoid_cluster_threshold\\\": $json.thresholdScore },\\n  \\\"points\\\": [$json.centerId]\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"cd5af197-4d79-49c2-aba6-a20571bd5c2e\",\"name\":\"Split Out1\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[860,80],\"parameters\":{\"options\":{\"destinationFieldName\":\"\"},\"fieldToSplitOut\":\"['text anchors']\"},\"typeVersion\":1},{\"id\":\"956c126c-8bd6-4390-8704-3f0a5a2ce479\",\"name\":\"Merge\",\"type\":\"n8n-nodes-base.merge\",\"position\":[1200,-80],\"parameters\":{\"mode\":\"combine\",\"options\":{},\"fieldsToMatchString\":\"cropName\"},\"typeVersion\":3},{\"id\":\"54a5d467-4985-49b5-9f13-e6563acf08b3\",\"name\":\"Textual (visual) crop descriptions\",\"type\":\"n8n-nodes-base.set\",\"position\":[380,80],\"parameters\":{\"mode\":\"raw\",\"options\":{},\"jsonOutput\":\"{\\\"text anchors\\\": [{\\\"cropName\\\": \\\"pearl_millet(bajra)\\\", \\\"cropDescription\\\": \\\"pearl_millet(bajra) - Tall stalks with cylindrical, spiked green grain heads.\\\"},\\n{\\\"cropName\\\": \\\"tobacco-plant\\\", \\\"cropDescription\\\": \\\"tobacco-plant - Broad, oval leaves and small tubular flowers, typically pink or white.\\\"},\\n{\\\"cropName\\\": \\\"cherry\\\", \\\"cropDescription\\\": \\\"cherry - Small, glossy red fruits on a medium-sized tree with slender branches and serrated leaves.\\\"},\\n{\\\"cropName\\\": \\\"cotton\\\", \\\"cropDescription\\\": \\\"cotton - Bushy plant with fluffy white fiber-filled pods and lobed green leaves.\\\"},\\n{\\\"cropName\\\": \\\"banana\\\", \\\"cropDescription\\\": \\\"banana - Tall herbaceous plant with broad, elongated green leaves and hanging bunches of yellow fruits.\\\"},\\n{\\\"cropName\\\": \\\"cucumber\\\", \\\"cropDescription\\\": \\\"cucumber - Creeping vine with yellow flowers and elongated green cylindrical fruits.\\\"},\\n{\\\"cropName\\\": \\\"maize\\\", \\\"cropDescription\\\": \\\"maize - Tall stalks with broad leaves, tassels at the top, and ears of corn sheathed in husks.\\\"},\\n{\\\"cropName\\\": \\\"wheat\\\", \\\"cropDescription\\\": \\\"wheat - Slender, upright stalks with narrow green leaves and golden, spiky grain heads.\\\"},\\n{\\\"cropName\\\": \\\"clove\\\", \\\"cropDescription\\\": \\\"clove - Small tree with oval green leaves and clusters of unopened reddish flower buds.\\\"},\\n{\\\"cropName\\\": \\\"jowar\\\", \\\"cropDescription\\\": \\\"jowar - Tall grass-like plant with broad leaves and round, compact grain clusters at the top.\\\"},\\n{\\\"cropName\\\": \\\"olive-tree\\\", \\\"cropDescription\\\": \\\"olive-tree - Medium-sized tree with silvery-green leaves and small oval green or black fruits.\\\"},\\n{\\\"cropName\\\": \\\"soyabean\\\", \\\"cropDescription\\\": \\\"soyabean - Bushy plant with trifoliate green leaves and small pods containing rounded beans.\\\"},\\n{\\\"cropName\\\": \\\"coffee-plant\\\", \\\"cropDescription\\\": \\\"coffee-plant - Shrub with shiny dark green leaves and clusters of small white flowers, followed by red berries.\\\"},\\n{\\\"cropName\\\": \\\"rice\\\", \\\"cropDescription\\\": \\\"rice - Short, water-loving grass with narrow green leaves and drooping golden grain heads.\\\"},\\n{\\\"cropName\\\": \\\"lemon\\\", \\\"cropDescription\\\": \\\"lemon - Small tree with glossy green leaves and oval yellow fruits.\\\"},\\n{\\\"cropName\\\": \\\"mustard-oil\\\", \\\"cropDescription\\\": \\\"mustard-oil - Small herbaceous plant with yellow flowers and slender seed pods.\\\"},\\n{\\\"cropName\\\": \\\"vigna-radiati(mung)\\\", \\\"cropDescription\\\": \\\"vigna-radiati(mung) - Low-growing plant with trifoliate leaves and small green pods containing mung beans.\\\"},\\n{\\\"cropName\\\": \\\"coconut\\\", \\\"cropDescription\\\": \\\"coconut - Tall palm tree with feathery leaves and large round fibrous fruits.\\\"},\\n{\\\"cropName\\\": \\\"gram\\\", \\\"cropDescription\\\": \\\"gram - Low bushy plant with feathery leaves and small pods containing round seeds.\\\"},\\n{\\\"cropName\\\": \\\"pineapple\\\", \\\"cropDescription\\\": \\\"pineapple - Low plant with spiky, sword-shaped leaves and large, spiky golden fruits.\\\"},\\n{\\\"cropName\\\": \\\"sugarcane\\\", \\\"cropDescription\\\": \\\"sugarcane - Tall, jointed stalks with long narrow leaves and a sweet interior.\\\"},\\n{\\\"cropName\\\": \\\"sunflower\\\", \\\"cropDescription\\\": \\\"sunflower - Tall plant with rough green leaves and large bright yellow flower heads.\\\"},\\n{\\\"cropName\\\": \\\"chilli\\\", \\\"cropDescription\\\": \\\"chilli - Small bushy plant with slender green or red elongated fruits.\\\"},\\n{\\\"cropName\\\": \\\"fox_nut(makhana)\\\", \\\"cropDescription\\\": \\\"fox_nut(makhana) - Aquatic plant with floating round leaves and spiny white seeds.\\\"},\\n{\\\"cropName\\\": \\\"jute\\\", \\\"cropDescription\\\": \\\"jute - Tall plant with long, straight stalks and narrow green leaves.\\\"},\\n{\\\"cropName\\\": \\\"papaya\\\", \\\"cropDescription\\\": \\\"papaya - Medium-sized tree with hollow trunk, large lobed leaves, and yellow-orange pear-shaped fruits.\\\"},\\n{\\\"cropName\\\": \\\"tea\\\", \\\"cropDescription\\\": \\\"tea - Small shrub with glossy dark green leaves and small white flowers.\\\"},\\n{\\\"cropName\\\": \\\"cardamom\\\", \\\"cropDescription\\\": \\\"cardamom - Low tropical plant with broad leaves and clusters of small, light green pods.\\\"},\\n{\\\"cropName\\\": \\\"almond\\\", \\\"cropDescription\\\": \\\"almond - Medium-sized tree with serrated leaves and oval green pods containing edible nuts.\\\"}]}\\n\"},\"typeVersion\":3.4},{\"id\":\"14c25e76-8a2c-4df8-98ea-b2f31b15fd1f\",\"name\":\"Embed text\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1460,-80],\"parameters\":{\"url\":\"https://api.voyageai.com/v1/multimodalembeddings\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"inputs\\\": [\\n    {\\n      \\\"content\\\": [\\n        {\\n          \\\"type\\\": \\\"text\\\",\\n          \\\"text\\\": $json.cropDescription\\n        }\\n      ]\\n    }\\n  ],\\n  \\\"model\\\": \\\"voyage-multimodal-3\\\",\\n  \\\"input_type\\\": \\\"query\\\"\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"genericCredentialType\",\"genericAuthType\":\"httpHeaderAuth\"},\"credentials\":{\"httpHeaderAuth\":{\"id\":\"Vb0RNVDnIHmgnZOP\",\"name\":\"Voyage API\"}},\"typeVersion\":4.2},{\"id\":\"8763db0a-9a92-4ffd-8a40-c7db614b735f\",\"name\":\"Get Medoid by Text\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1640,-80],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/query\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"query\\\": $json.data[0].embedding,\\n  \\\"using\\\": \\\"voyage\\\",\\n  \\\"exact\\\": true,\\n  \\\"filter\\\": {\\n    \\\"must\\\": [\\n      {\\n        \\\"key\\\": \\\"crop_name\\\",\\n        \\\"match\\\": {\\\"value\\\": $('Merge').item.json.cropName }\\n      }\\n    ]\\n  },\\n  \\\"limit\\\": 1,\\n  \\\"with_payload\\\": true,\\n  \\\"with_vector\\\": true\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"5c770ca2-6e1a-4c4b-80e0-dcbeeda43a0f\",\"name\":\"Set text medoid id\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2000,160],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/payload\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"payload\\\": {\\\"is_text_anchor_medoid\\\": true},\\n  \\\"points\\\": [$json.result.points[0].id]\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"c08ff472-51ab-4c3d-b9c0-2170fda2ccef\",\"name\":\"Prepare for Searching Threshold1\",\"type\":\"n8n-nodes-base.set\",\"position\":[2300,80],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"6faa5949-968c-42bf-8ce8-cf2403566eba\",\"name\":\"oppositeOfCenterVector\",\"type\":\"array\",\"value\":\"={{ $json.result.points[0].vector.voyage.map(value => value * -1)}}\"},{\"id\":\"84eb42be-2ea5-4a76-9c76-f21a962360a3\",\"name\":\"cropName\",\"type\":\"string\",\"value\":\"={{ $json.result.points[0].payload.crop_name }}\"},{\"id\":\"b68d2e42-0dde-4875-bb59-056f29b6ac0a\",\"name\":\"centerId\",\"type\":\"string\",\"value\":\"={{ $json.result.points[0].id }}\"}]}},\"typeVersion\":3.4},{\"id\":\"84ba4de5-aa9b-43fb-89cb-70db0b3ca334\",\"name\":\"Threshold Score1\",\"type\":\"n8n-nodes-base.set\",\"position\":[2820,80],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"579a2ee4-0ab2-4fde-909a-01166624c9d8\",\"name\":\"thresholdScore\",\"type\":\"number\",\"value\":\"={{ $json.result.points.last().score * -1 }}\"},{\"id\":\"11eab775-f709-40a9-b0fe-d1059b67de05\",\"name\":\"centerId\",\"type\":\"string\",\"value\":\"={{ $('Prepare for Searching Threshold1').item.json.centerId }}\"}]}},\"typeVersion\":3.4},{\"id\":\"f490d224-38a8-4087-889d-1addb4472471\",\"name\":\"Searching Text Medoid Score\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2560,80],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/query\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"query\\\": $json.oppositeOfCenterVector,\\n  \\\"using\\\": \\\"voyage\\\",\\n  \\\"exact\\\": true,\\n  \\\"filter\\\": {\\n    \\\"must\\\": [\\n      {\\n        \\\"key\\\": \\\"crop_name\\\",\\n        \\\"match\\\": {\\\"value\\\": $json.cropName }\\n      }\\n    ]\\n  },\\n  \\\"limit\\\": $('Text Medoids Variables').first().json.furthestFromCenter,\\n  \\\"with_payload\\\": true\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"f5035aca-1706-4c8d-bd26-49b3451ae04b\",\"name\":\"Medoids Variables\",\"type\":\"n8n-nodes-base.set\",\"position\":[-140,-220],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"5eb23ad2-aacd-468f-9a27-ef2b63e6bd08\",\"name\":\"furthestFromCenter\",\"type\":\"number\",\"value\":5}]}},\"typeVersion\":3.4},{\"id\":\"c9cad66d-4a76-4092-bfd6-4860493f942a\",\"name\":\"Text Medoids Variables\",\"type\":\"n8n-nodes-base.set\",\"position\":[-140,80],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"5eb23ad2-aacd-468f-9a27-ef2b63e6bd08\",\"name\":\"furthestFromCenter\",\"type\":\"number\",\"value\":1}]}},\"typeVersion\":3.4},{\"id\":\"ecab63f7-7a72-425a-8f5a-0c707e7f77bc\",\"name\":\"Qdrant cluster variables\",\"type\":\"n8n-nodes-base.set\",\"position\":[-420,-220],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"58b7384d-fd0c-44aa-9f8e-0306a99be431\",\"name\":\"qdrantCloudURL\",\"type\":\"string\",\"value\":\"=https://152bc6e2-832a-415c-a1aa-fb529f8baf8d.eu-central-1-0.aws.cloud.qdrant.io\"},{\"id\":\"e34c4d88-b102-43cc-a09e-e0553f2da23a\",\"name\":\"collectionName\",\"type\":\"string\",\"value\":\"=agricultural-crops\"}]}},\"typeVersion\":3.4},{\"id\":\"6e81f0b0-3843-467e-9c93-40026e57fa91\",\"name\":\"Info About Crop Clusters\",\"type\":\"n8n-nodes-base.set\",\"position\":[600,-220],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"id\":\"5327b254-b703-4a34-a398-f82edb1d6d6b\",\"name\":\"=cropsNumber\",\"type\":\"number\",\"value\":\"={{ $json.result.hits.length }}\"},{\"id\":\"79168efa-11b8-4a7b-8851-da9c8cbd700b\",\"name\":\"maxClusterSize\",\"type\":\"number\",\"value\":\"={{ Math.max(...$json.result.hits.map(item => item.count)) }}\"},{\"id\":\"e1367cec-9629-4c69-a8d7-3eeae3ac94d3\",\"name\":\"cropNames\",\"type\":\"array\",\"value\":\"={{ $json.result.hits.map(item => item.value)}}\"}]}},\"typeVersion\":3.4},{\"id\":\"20191c0a-5310-48f2-8be4-1d160f237db2\",\"name\":\"Crop Counts\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[380,-220],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/facet\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"key\\\": \\\"crop_name\\\",\\n  \\\"limit\\\": $json.result.count,\\n  \\\"exact\\\": true\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"a81103bb-6522-49a2-8102-83c7e004b9b3\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1260,-340],\"parameters\":{\"width\":520,\"height\":240,\"content\":\"## Setting Up Medoids for Anomaly Detection\\n### Preparatory workflow to set cluster centres and cluster threshold scores, so anomalies can be detected based on these thresholds\\nHere, we're using two approaches to set up these centres: the upper branch is the *\\\"distance matrix approach\\\"*, and the lower is the *\\\"multimodal embedding model approach\\\"*.\"},\"typeVersion\":1},{\"id\":\"38fc8252-7e27-450d-b09e-59ceaebc5378\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-420,-340],\"parameters\":{\"height\":80,\"content\":\"Once again, variables for Qdrant: cluster URL and a collection we're working with\"},\"typeVersion\":1},{\"id\":\"2d0e3b52-d382-428c-9b37-870f4c53b8e7\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-140,-360],\"parameters\":{\"height\":100,\"content\":\"Which point in the cluster we're using to draw threshold on: the furthest one from center, or the 2nd, ... Xth furthest one;\"},\"typeVersion\":1},{\"id\":\"b0b300f3-e2c9-4c36-8a1d-6705932c296c\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[380,-500],\"parameters\":{\"width\":180,\"height\":240,\"content\":\"Here we are getting [facet counts](https://qdrant.tech/documentation/concepts/payload/?q=facet#facet-counts): information which unique values are there behind *\\\"crop_name\\\"* payload and how many points have these values (for example, we have 31 *\\\"cucumber\\\"* and 29 *\\\"cotton\\\"*)\"},\"typeVersion\":1},{\"id\":\"0d2584da-5fd0-4830-b329-c78b0debf584\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-140,260],\"parameters\":{\"height\":120,\"content\":\"Which point in the cluster we're using to draw threshold on: the furthest one from center, or the 2nd, ... Xth furthest one;\\n<this is the 2nd approach>\"},\"typeVersion\":1},{\"id\":\"f4c98469-d426-415c-916d-1bc442cf6a21\",\"name\":\"Sticky Note5\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[120,-400],\"parameters\":{\"height\":140,\"content\":\"We need to get the [total amount of points](https://qdrant.tech/documentation/concepts/points/?q=count#counting-points) in Qdrant collection to use it as a `limit` in the *\\\"Crop Counts\\\"* node, so we won't lose any information;\\n<not the best practice per se>\"},\"typeVersion\":1},{\"id\":\"037af9df-34c4-488d-8c89-561ac25247c4\",\"name\":\"Sticky Note6\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[600,-640],\"parameters\":{\"width\":220,\"height\":380,\"content\":\"Here we're extracting and gathering all the information about crop clusters, so we can call [Qdrant distance matrix API](https://qdrant.tech/documentation/concepts/explore/?q=distance+#distance-matrix) for each cluster.\\nWe're propagating **the biggest cluster size** (of labeled data, in our case all data is labeled; for real use cases don't call distance matrix API if your labeled data is more than a couple of hundreds), **the number of unique crop values** and **unique crop values** themselves. We will run the algorithm once per unique crop cluster (to find it's center and threshold).\"},\"typeVersion\":1},{\"id\":\"b4e635e3-233d-4358-ad11-250a2b14a2f7\",\"name\":\"Sticky Note8\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[380,260],\"parameters\":{\"height\":200,\"content\":\"Hardcoded descriptions on how each crop usually looks; They were generated with chatGPT, and that can be technically done directly in n8n based on the crop name or a crop picture (we need a good description of how the most normal specimen of a crop looks like)\"},\"typeVersion\":1},{\"id\":\"4fda1841-e7e3-4bd2-acf2-ee7338598184\",\"name\":\"Sticky Note9\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1200,-800],\"parameters\":{\"height\":400,\"content\":\"Calling [distance matrix API](https://qdrant.tech/documentation/concepts/explore/?q=distance+#distance-matrix) once per cluster. \\n\\n`sample` - how many points we are sampling (here filtered by `crop_name` field, so we are sampling within each cluster, and since we are passing the biggest cluster size to `sample`, we will get all points from each cluster.\\n\\n`limit` is the number of neighbours distance to which we will see calculated. Since we want all pairwise distances between the points within a cluster, here we're once again setting an upper limit equal to the biggest cluster size; \"},\"typeVersion\":1},{\"id\":\"19c4bb6d-abcb-423b-b883-48c779d0307d\",\"name\":\"Split Out\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[860,-220],\"parameters\":{\"include\":\"allOtherFields\",\"options\":{\"destinationFieldName\":\"cropName\"},\"fieldToSplitOut\":\"cropNames\"},\"typeVersion\":1},{\"id\":\"f6d74ced-1998-4dbd-ab04-ca1b6ea409a5\",\"name\":\"Sticky Note10\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[840,-60],\"parameters\":{\"width\":150,\"height\":80,\"content\":\"Splitting out into each unique crop cluster\"},\"typeVersion\":1},{\"id\":\"b3adb2bc-61f5-42ff-bb5d-11faa12189b7\",\"name\":\"Sticky Note11\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1460,-640],\"parameters\":{\"width\":180,\"height\":240,\"content\":\"Using distance matrix generated by Qdrant and `coo_array` from `scipy`, we're finding a **representative** for each cluster (point which is the most similar to all other points within a cluster, based on the **Cosine** distance)\"},\"typeVersion\":1},{\"id\":\"d9d3953e-8b69-4b6a-86f2-b2d2db28d4ad\",\"name\":\"Sticky Note12\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1200,100],\"parameters\":{\"height\":280,\"content\":\"To find a **representative** with this approach, we:\\n1) Embed descriptions of crops with the same Voyage model we used for images (we can do so, since model is multimodal)\\n2) For each (crop) cluster, find an image the closest by **Cosine** similarity metric to this embedded description. We will consider it a perfect representative of the cluster\"},\"typeVersion\":1},{\"id\":\"8751efd4-d85e-4dc8-86ef-90073d49b6df\",\"name\":\"Sticky Note13\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1460,100],\"parameters\":{\"width\":160,\"height\":140,\"content\":\"Embedding descriptions with Voyage model \\n[Note] mind `input_type`, it's *\\\"query\\\"*\"},\"typeVersion\":1},{\"id\":\"652bc70a-4e6f-416a-977b-5d29ae9cb4f0\",\"name\":\"Sticky Note14\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1640,100],\"parameters\":{\"height\":260,\"content\":\"Find the closest image to the description embeddings (done per cluster)\\n[Note] Mind `exact` parameter\\n[Note] `limit` is 1 because vector database always returns points sorted by distance from the most similar one to the least\\n[Note] `using` parameter is here  because our vectors uploaded in the previous pipeline are named *\\\"voyage\\\"*.\"},\"typeVersion\":1},{\"id\":\"a5836982-0de0-4692-883c-267602468ed2\",\"name\":\"Set text medoid threshold score\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[3000,80],\"parameters\":{\"url\":\"={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/payload\",\"method\":\"POST\",\"options\":{},\"jsonBody\":\"={{\\n{\\n  \\\"payload\\\": {\\\"is_text_anchor_medoid_cluster_threshold\\\": $json.thresholdScore },\\n  \\\"points\\\": [$json.centerId]\\n}\\n}}\",\"sendBody\":true,\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"qdrantApi\"},\"credentials\":{\"qdrantApi\":{\"id\":\"it3j3hP9FICqhgX6\",\"name\":\"QdrantApi account\"}},\"typeVersion\":4.2},{\"id\":\"5354d197-be5e-4add-b721-9e5e3943e53d\",\"name\":\"Sticky Note15\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1960,-460],\"parameters\":{\"width\":200,\"height\":80,\"content\":\"Fetching vectors of centres by their IDs\"},\"typeVersion\":1},{\"id\":\"93043602-92bc-40ac-b967-ddb7289e5d22\",\"name\":\"Sticky Note16\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2000,-820],\"parameters\":{\"height\":100,\"content\":\"Set in Qdrant *\\\"is_medoid\\\"* [payloads](https://qdrant.tech/documentation/concepts/payload/) for points which were defined as centres by *\\\"distance matrix approach\\\"*\"},\"typeVersion\":1},{\"id\":\"cb1364ad-e21c-4336-9a5b-15e80c2ed2f2\",\"name\":\"Sticky Note17\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2280,260],\"parameters\":{\"height\":180,\"content\":\"Here, we don't have to fetch a vector by point id as in the *\\\"distance matrix approach\\\"*, since [an API call in the previous node](https://api.qdrant.tech/api-reference/search/query-points) is able to return vectors stored in Qdrant as a response, while the distance matrix API returns only points IDs.\"},\"typeVersion\":1},{\"id\":\"6d735a28-a93e-41f1-9889-2557a1dd7aec\",\"name\":\"Sticky Note18\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[1980,320],\"parameters\":{\"height\":140,\"content\":\"Set in Qdrant *\\\"is_text_anchor_medoid\\\"* [payloads](https://qdrant.tech/documentation/concepts/payload/) for points which were defined as centres by *\\\"multimodal embedding model approach\\\"*.\"},\"typeVersion\":1},{\"id\":\"7c6796a9-260b-41c0-9ac7-feb5d4d95c19\",\"name\":\"Sticky Note19\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2240,-500],\"parameters\":{\"width\":440,\"height\":100,\"content\":\"Starting from here, this and the three following nodes are analogous for both methods, with a difference only in variable names. The goal is to find a **class (cluster) threshold score** so we can use it for anomaly detection (for each class).\\n\"},\"typeVersion\":1},{\"id\":\"5025936d-d49c-4cc1-a675-3bde71627c40\",\"name\":\"Sticky Note20\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2280,-180],\"parameters\":{\"height\":220,\"content\":\"Finding the most dissimilar point to a centre vector (within each class) is equivalent to finding the most similar point to the [opposite](https://mathinsight.org/image/vector_opposite) of a centre vector, aka the centre vector with all coordinates multiplied by -1. It is always true with **Cosine** vector similarity metric (that we're using).\"},\"typeVersion\":1},{\"id\":\"fa9026e4-0c92-4755-92a0-5e400b5f04c9\",\"name\":\"Sticky Note21\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[2580,-140],\"parameters\":{\"width\":520,\"height\":140,\"content\":\"So here, we found the most dissimilar point within the crop class to the class centre (or the Xth dissimilar point, depending on a variable set in the beginning of this pipeline). Our **threshold score** is the similarity score between this point and the class centre. Now we're saving it as meta information of each class centre point. All preparatory work for anomaly detection is done.\"},\"typeVersion\":1},{\"id\":\"8e172a7c-6865-4daf-9d9c-86e0dba2c0a2\",\"name\":\"Sticky Note22\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-900,-820],\"parameters\":{\"color\":4,\"width\":540,\"height\":300,\"content\":\"### For anomaly detection\\n1. The first pipeline is uploading (crops) dataset to Qdrant's collection.\\n2. **This is the second pipeline, to set up cluster (class) centres in this Qdrant collection & cluster (class) threshold scores.**\\n3. The third one is the anomaly detection tool, which takes any image as input and uses all preparatory work done with Qdrant (crops) collection.\\n\\n### To recreate it\\nYou'll have to upload [crops](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification) dataset from Kaggle to your own Google Storage bucket, and re-create APIs/connections to [Qdrant Cloud](https://qdrant.tech/documentation/quickstart-cloud/) (you can use **Free Tier** cluster), Voyage AI API & Google Cloud Storage\\n\\n**In general, pipelines are adaptable to any dataset of images**\\n\"},\"typeVersion\":1}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"a23fc305-7ecd-4754-b208-2d964d9b1eda\",\"connections\":{\"Merge\":{\"main\":[[{\"node\":\"Embed text\",\"type\":\"main\",\"index\":0}]]},\"Split Out\":{\"main\":[[{\"node\":\"Cluster Distance Matrix\",\"type\":\"main\",\"index\":0},{\"node\":\"Merge\",\"type\":\"main\",\"index\":0}]]},\"Embed text\":{\"main\":[[{\"node\":\"Get Medoid by Text\",\"type\":\"main\",\"index\":0}]]},\"Split Out1\":{\"main\":[[{\"node\":\"Merge\",\"type\":\"main\",\"index\":1}]]},\"Crop Counts\":{\"main\":[[{\"node\":\"Info About Crop Clusters\",\"type\":\"main\",\"index\":0}]]},\"Set medoid id\":{\"main\":[[]]},\"Searching Score\":{\"main\":[[{\"node\":\"Threshold Score\",\"type\":\"main\",\"index\":0}]]},\"Threshold Score\":{\"main\":[[{\"node\":\"Set medoid threshold score\",\"type\":\"main\",\"index\":0}]]},\"Threshold Score1\":{\"main\":[[{\"node\":\"Set text medoid threshold score\",\"type\":\"main\",\"index\":0}]]},\"Get Medoid Vector\":{\"main\":[[{\"node\":\"Prepare for Searching Threshold\",\"type\":\"main\",\"index\":0}]]},\"Medoids Variables\":{\"main\":[[{\"node\":\"Total Points in Collection\",\"type\":\"main\",\"index\":0}]]},\"Get Medoid by Text\":{\"main\":[[{\"node\":\"Set text medoid id\",\"type\":\"main\",\"index\":0},{\"node\":\"Prepare for Searching Threshold1\",\"type\":\"main\",\"index\":0}]]},\"Scipy Sparse Matrix\":{\"main\":[[{\"node\":\"Set medoid id\",\"type\":\"main\",\"index\":0},{\"node\":\"Get Medoid Vector\",\"type\":\"main\",\"index\":0}]]},\"Text Medoids Variables\":{\"main\":[[{\"node\":\"Textual (visual) crop descriptions\",\"type\":\"main\",\"index\":0}]]},\"Cluster Distance Matrix\":{\"main\":[[{\"node\":\"Scipy Sparse Matrix\",\"type\":\"main\",\"index\":0}]]},\"Info About Crop Clusters\":{\"main\":[[{\"node\":\"Split Out\",\"type\":\"main\",\"index\":0}]]},\"Qdrant cluster variables\":{\"main\":[[{\"node\":\"Medoids Variables\",\"type\":\"main\",\"index\":0},{\"node\":\"Text Medoids Variables\",\"type\":\"main\",\"index\":0}]]},\"Total Points in Collection\":{\"main\":[[{\"node\":\"Crop Counts\",\"type\":\"main\",\"index\":0}]]},\"Searching Text Medoid Score\":{\"main\":[[{\"node\":\"Threshold Score1\",\"type\":\"main\",\"index\":0}]]},\"Prepare for Searching Threshold\":{\"main\":[[{\"node\":\"Searching Score\",\"type\":\"main\",\"index\":0}]]},\"Prepare for Searching Threshold1\":{\"main\":[[{\"node\":\"Searching Text Medoid Score\",\"type\":\"main\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"Qdrant cluster variables\",\"type\":\"main\",\"index\":0}]]},\"Textual (visual) crop descriptions\":{\"main\":[[{\"node\":\"Split Out1\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "# Vector Database as a Big Data Analysis Tool for AI Agents\n\nWorkflows from the webinar [\"Build production-ready AI Agents with Qdrant and n8n\"](https://www.youtube.com/watch?v=_BQTnXpuH-E).\n\nThis series of workflows shows how to build big data analysis tools for production-ready AI agents with the help of vector databases. These pipelines are adaptable to any dataset of images, hence, many production use cases.\n\n  1. [Uploading (image) datasets to Qdrant](https://n8n.io/workflows/2654-uploading-image-datasets-to-qdrant-13-anomaly12-knn/)\n  2. **[Set up meta-variables for anomaly detection in Qdrant](https://n8n.io/workflows/2655-set-up-cluster-centresandthresholds-for-anomaly-detection-23-anomaly/)**\n  3. [Anomaly detection tool](https://n8n.io/workflows/2656-anomaly-images-detection-tool-33-anomaly/)\n  4. [KNN classifier tool](https://n8n.io/workflows/2657-knn-images-classifier-tool-22-knn/)\n\n\n\n### For anomaly detection\n\n  1. The first pipeline to upload an image dataset to Qdrant.  \n**2\\. This is the second pipeline to set up cluster (class) centres & cluster (class) threshold scores needed for anomaly detection.**\n  2. The third is the anomaly detection tool, which takes any image as input and uses all preparatory work done with Qdrant to detect if it's an anomaly to the uploaded dataset.\n\n\n\n### For KNN (k nearest neighbours) classification\n\n  1. The first pipeline to upload an image dataset to Qdrant.\n  2. The second is the KNN classifier tool, which takes any image as input and classifies it on the uploaded to Qdrant dataset.\n\n\n\n### To recreate both\n\nYou'll have to upload [crops](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification) and [lands](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification) datasets from Kaggle to your own Google Storage bucket, and re-create APIs/connections to [Qdrant Cloud](https://qdrant.tech/documentation/quickstart-cloud/) (you can use [Free Tier](https://cloud.qdrant.io/login) cluster), [Voyage AI API](https://www.voyageai.com/) & Google Cloud Storage.\n\n## [This workflow] Setting Up Cluster (Class) Centres & Cluster (Class) Threshold Scores for Anomaly Detection\n\nPreparatory workflow to set **cluster centres** and **cluster threshold scores** so anomalies can be detected based on these thresholds.  \nHere, we're using two approaches to set up these centres: the _\"distance matrix approach\"_ and the _\"multimodal embedding model approach\"_.\n",
  "readme_html": "<!--[--><div data-v-006f9244=\"\"><h1>Vector Database as a Big Data Analysis Tool for AI Agents</h1>\n<p>Workflows from the webinar <a href=\"https://www.youtube.com/watch?v=_BQTnXpuH-E\" rel=\"ugc nofollow\" target=\"_blank\">\"Build production-ready AI Agents with Qdrant and n8n\"</a>.</p>\n<p>This series of workflows shows how to build big data analysis tools for production-ready AI agents with the help of vector databases. These pipelines are adaptable to any dataset of images, hence, many production use cases.</p>\n<ol>\n<li><a href=\"https://n8n.io/workflows/2654-uploading-image-datasets-to-qdrant-13-anomaly12-knn/\" rel=\"ugc nofollow\" target=\"_blank\">Uploading (image) datasets to Qdrant</a></li>\n<li><strong><a href=\"https://n8n.io/workflows/2655-set-up-cluster-centresandthresholds-for-anomaly-detection-23-anomaly/\" rel=\"ugc nofollow\" target=\"_blank\">Set up meta-variables for anomaly detection in Qdrant</a></strong></li>\n<li><a href=\"https://n8n.io/workflows/2656-anomaly-images-detection-tool-33-anomaly/\" rel=\"ugc nofollow\" target=\"_blank\">Anomaly detection tool</a></li>\n<li><a href=\"https://n8n.io/workflows/2657-knn-images-classifier-tool-22-knn/\" rel=\"ugc nofollow\" target=\"_blank\">KNN classifier tool</a></li>\n</ol>\n<h3>For anomaly detection</h3>\n<ol>\n<li>The first pipeline to upload an image dataset to Qdrant.<br>\n<strong>2. This is the second pipeline to set up cluster (class) centres &amp; cluster (class) threshold scores needed for anomaly detection.</strong></li>\n<li>The third is the anomaly detection tool, which takes any image as input and uses all preparatory work done with Qdrant to detect if it's an anomaly to the uploaded dataset.</li>\n</ol>\n<h3>For KNN (k nearest neighbours) classification</h3>\n<ol>\n<li>The first pipeline to upload an image dataset to Qdrant.</li>\n<li>The second is the KNN classifier tool, which takes any image as input and classifies it on the uploaded to Qdrant dataset.</li>\n</ol>\n<h3>To recreate both</h3>\n<p>You'll have to upload <a href=\"https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification\" rel=\"ugc nofollow\" target=\"_blank\">crops</a> and <a href=\"https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification\" rel=\"ugc nofollow\" target=\"_blank\">lands</a> datasets from Kaggle to your own Google Storage bucket, and re-create APIs/connections to <a href=\"https://qdrant.tech/documentation/quickstart-cloud/\" rel=\"ugc nofollow\" target=\"_blank\">Qdrant Cloud</a> (you can use <a href=\"https://cloud.qdrant.io/login\" rel=\"ugc nofollow\" target=\"_blank\">Free Tier</a> cluster), <a href=\"https://www.voyageai.com/\" rel=\"ugc nofollow\" target=\"_blank\">Voyage AI API</a> &amp; Google Cloud Storage.</p>\n<h2>[This workflow] Setting Up Cluster (Class) Centres &amp; Cluster (Class) Threshold Scores for Anomaly Detection</h2>\n<p>Preparatory workflow to set <strong>cluster centres</strong> and <strong>cluster threshold scores</strong> so anomalies can be detected based on these thresholds.<br>\nHere, we're using two approaches to set up these centres: the <em>\"distance matrix approach\"</em> and the <em>\"multimodal embedding model approach\"</em>.</p>\n</div><!--]-->",
  "readme_zh": "# 向量数据库作为AI代理的大数据分析工具\n\n来自网络研讨会[\"使用Qdrant和n8n构建生产级AI代理\"](https://www.youtube.com/watch?v=_BQTnXpuH-E)的工作流程。\n\n本系列工作流程展示了如何借助向量数据库为生产级AI代理构建大数据分析工具。这些管道可适配任何图像数据集，适用于多种生产场景。\n\n  1. [将(图像)数据集上传至Qdrant](https://n8n.io/workflows/2654-uploading-image-datasets-to-qdrant-13-anomaly12-knn/)\n  2. **[为Qdrant异常检测设置元变量](https://n8n.io/workflows/2655-set-up-cluster-centresandthresholds-for-anomaly-detection-23-anomaly/)**\n  3. [异常检测工具](https://n8n.io/workflows/2656-anomaly-images-detection-tool-33-anomaly/)\n  4. [KNN分类器工具](https://n8n.io/workflows/2657-knn-images-classifier-tool-22-knn/)",
  "title_zh": "向量数据库作为AI代理的大数据分析工具 [2/3 - 异常检测]",
  "publish_date_zh": "最后更新于4个月前",
  "workflow_json_zh": "{\"id\": \"m9aACcHqydEbH4nR\", \"meta\": {\"instanceId\": \"205b3bc06c96f2dc835b4f00e1cbf9a937a74eeb3b47c99d0c30b0586dbf85aa\"}, \"name\": \"[2/3] 为异常检测设置中心点（2种类型）（农作物数据集）\", \"tags\": [{\"id\": \"spMntyrlE9ydvWFA\", \"name\": \"anomaly-detection\", \"createdAt\": \"2024-12-08T22:05:15.945Z\", \"updatedAt\": \"2024-12-09T12:50:19.287Z\"}], \"nodes\": [{\"id\": \"edaa871e-2b79-400e-8328-333d250bfdd2\", \"name\": \"点击“测试工作流程”时\", \"type\": \"n8n-nodes-base.manualTrigger\", \"position\": [-660, -220], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"ebd964de-faa4-4dc0-9245-cc9154b9ce02\", \"name\": \"藏品总积分\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [180, -220], \"parameters\": {\"url\": \"={{ $('Qdrant集群变量').item.json.qdrantCloudURL }}/collections/{{ $('Qdrant集群变量').item.json.collectionName }}/points/count\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"{\\n  \\\"精确\\\": true\\n}\", \"sendBody\": true, \"specifyBody\": \"JSON\", \"authentication\": \"预定义凭证类型\", \"nodeCredentialType\": \"Qdrant API\"}, \"credentials\": {\"qdrantApi\": {\"id\": \"it3j3hP9FICqhgX6\", \"name\": \"QdrantApi account\"}}, \"typeVersion\": 4.2}, {\"id\": \"b51f6344-d090-4341-a908-581b78664b07\", \"name\": \"聚类距离矩阵\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [1200, -360], \"parameters\": {\"url\": \"={{ $('Qdrant集群变量').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant集群变量').first().json.collectionName }}/points/search/matrix/offsets\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"={{\\n{\\n    \\\"样本数\\\": $json.maxClusterSize,\\n    \\\"上限\\\": $json.maxClusterSize,\\n    \\\"使用方式\\\": \\\"voyage\\\",\\n    \\\"筛选条件\\\": {\\n        \\\"必须\\\": {\\n            \\\"键名\\\": \\\"crop_name\\\",\\n            \\\"匹配\\\": { \\\"值\\\": $json.cropName }\\n        }\\n    }\\n}\\n}}\", \"sendBody\": true, \"specifyBody\": \"JSON\", \"authentication\": \"预定义凭证类型\", \"nodeCredentialType\": \"Qdrant API\"}, \"credentials\": {\"qdrantApi\": {\"id\": \"it3j3hP9FICqhgX6\", \"name\": \"QdrantApi account\"}}, \"typeVersion\": 4.2}, {\"id\": \"bebe5249-b138-4d7a-84b8-51eaed4331b8\", \"name\": \"Scipy 稀疏矩阵\", \"type\": \"n8n-nodes-base.code\", \"position\": [1460, -360], \"parameters\": {\"mode\": \"每个项目运行一次\", \"language\": \"Python\", \"pythonCode\": \"```python\\nfrom scipy.sparse import coo_array\\n\\ncluster = _input.item.json['result']\\n\\nscores = list(cluster['scores'])\\noffsets_row = list(cluster['offsets_row'])\\noffsets_col = list(cluster['offsets_col'])\\n\\ncluster_matrix = coo_array((scores, (offsets_row, offsets_col)))\\nthe_most_similar_to_others = cluster_matrix.sum(axis=1).argmax()\\n\\nreturn {\\n    \\\"json\\\": {\\n        \\\"medoid_id\\\": cluster[\\\"ids\\\"][the_most_similar_to_others]\\n    }\\n}\\n```\"}, \"typeVersion\": 2}, {\"id\": \"006c38bb-a271-40e1-9c5b-5a0a29ea96de\", \"name\": \"设定中心点ID\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [2000, -680], \"parameters\": {\"url\": \"={{ $('Qdrant集群变量').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant集群变量').first().json.collectionName }}/points/payload\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"={{\\n{\\n  \\\"payload\\\": {\\\"is_medoid\\\": true},\\n  \\\"points\\\": [$json.medoid_id]\\n}\\n}}\", \"sendBody\": true, \"specifyBody\": \"JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，易于人阅读和编写，同时也易于机器解析和生成。它基于JavaScript的一个子集，采用完全独立于语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得JSON成为理想的数据交换语言。\", \"authentication\": \"预定义凭证类型\", \"nodeCredentialType\": \"Qdrant API\"}, \"credentials\": {\"qdrantApi\": {\"id\": \"it3j3hP9FICqhgX6\", \"name\": \"QdrantApi account\"}}, \"typeVersion\": 4.2}, {\"id\": \"aeeccfc5-67bf-4047-8a5a-8830e4fc87e8\", \"name\": \"获取中心点向量\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [2000, -360], \"parameters\": {\"url\": \"={{ $('Qdrant集群变量').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant集群变量').first().json.collectionName }}/points\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"={{\\n{\\n  \\\"ids\\\": [$json.medoid_id],\\n  \\\"with_vector\\\": true,\\n  \\\"with_payload\\\": true\\n}\\n}}\", \"sendBody\": true, \"specifyBody\": \"JSON\", \"authentication\": \"预定义凭证类型\", \"nodeCredentialType\": \"qdrant接口\"}, \"credentials\": {\"qdrantApi\": {\"id\": \"it3j3hP9FICqhgX6\", \"name\": \"QdrantApi account\"}}, \"typeVersion\": 4.2}, {\"id\": \"11fe54d5-9dc8-49ce-9e3f-1103ace0a3d5\", \"name\": \"准备搜索阈值\", \"type\": \"n8n-nodes-base.set\", \"position\": [2240, -360], \"parameters\": {\"options\": {}, \"assignments\": {\"assignments\": [{\"id\": \"6faa5949-968c-42bf-8ce8-cf2403566eba\", \"name\": \"oppositeOfCenterVector\", \"type\": \"array\", \"value\": \"={{ $json.result[0].vector.voyage.map(value => value * -1)}}\"}, {\"id\": \"84eb42be-2ea5-4a76-9c76-f21a962360a3\", \"name\": \"cropName\", \"type\": \"string\", \"value\": \"={{ $json.result[0].payload.crop_name }}\"}, {\"id\": \"b68d2e42-0dde-4875-bb59-056f29b6ac0a\", \"name\": \"centerId\", \"type\": \"string\", \"value\": \"={{ $json.result[0].id }}\"}]}}, \"typeVersion\": 3.4}, {\"id\": \"4051b488-2e2e-4d33-9cc9-e1403c9173ed\", \"name\": \"搜索评分\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [2500, -360], \"parameters\": {\"url\": \"={{ $('Qdrant集群变量').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant集群变量').first().json.collectionName }}/points/query\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"={{\\n{\\n  \\\"查询\\\": $json.oppositeOfCenterVector,\\n  \\\"使用\\\": \\\"voyage\\\",\\n  \\\"精确匹配\\\": true,\\n  \\\"筛选条件\\\": {\\n    \\\"必须满足\\\": [\\n      {\\n        \\\"键\\\": \\\"crop_name\\\",\\n        \\\"匹配\\\": {\\\"值\\\": $json.cropName }\\n      }\\n    ]\\n  },\\n  \\\"返回数量限制\\\": $('Medoids Variables').first().json.furthestFromCenter,\\n  \\\"携带载荷\\\": true\\n}\\n}}\", \"sendBody\": true, \"specifyBody\": \"JSON\", \"authentication\": \"预定义凭证类型\", \"nodeCredentialType\": \"Qdrant API\"}, \"credentials\": {\"qdrantApi\": {\"id\": \"it3j3hP9FICqhgX6\", \"name\": \"QdrantApi account\"}}, \"typeVersion\": 4.2}, {\"id\": \"1c6cb6ee-ce3a-4d1a-b1b4-1e59e9a8f5b6\", \"name\": \"阈值分数\", \"type\": \"n8n-nodes-base.set\", \"position\": [2760, -360], \"parameters\": {\"options\": {}, \"assignments\": {\"assignments\": [{\"id\": \"579a2ee4-0ab2-4fde-909a-01166624c9d8\", \"name\": \"thresholdScore\", \"type\": \"number\", \"value\": \"={{ $json.result.points.last().score * -1 }}\"}, {\"id\": \"11eab775-f709-40a9-b0fe-d1059b67de05\", \"name\": \"centerId\", \"type\": \"string\", \"value\": \"={{ $('Prepare for Searching Threshold').item.json.centerId }}\"}]}}, \"typeVersion\": 3.4}, {\"id\": \"1bab1b9e-7b80-4ef3-8e3d-be4874792e58\", \"name\": \"设定中心点阈值分数\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [2940, -360], \"parameters\": {\"url\": \"={{ $('Qdrant集群变量').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant集群变量').first().json.collectionName }}/points/payload\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"={{\\n{\\n  \\\"payload\\\": {\\\"is_medoid_cluster_threshold\\\": $json.thresholdScore },\\n  \\\"points\\\": [$json.centerId]\\n}\\n}}\", \"sendBody\": true, \"specifyBody\": \"JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，易于人阅读和编写，同时也易于机器解析和生成。它基于JavaScript的一个子集，采用完全独立于语言的文本格式来存储和表示数据。JSON常用于Web应用程序中服务器与客户端之间的数据传输，因其简洁和高效的特性而被广泛采用。\", \"authentication\": \"预定义凭证类型\", \"nodeCredentialType\": \"Qdrant API\"}, \"credentials\": {\"qdrantApi\": {\"id\": \"it3j3hP9FICqhgX6\", \"name\": \"QdrantApi account\"}}, \"typeVersion\": 4.2}, {\"id\": \"cd5af197-4d79-49c2-aba6-a20571bd5c2e\", \"name\": \"分离输出1\", \"type\": \"n8n-nodes-base.splitOut\", \"position\": [860, 80], \"parameters\": {\"options\": {\"destinationFieldName\": \"\"}, \"fieldToSplitOut\": \"文本锚点\"}, \"typeVersion\": 1}, {\"id\": \"956c126c-8bd6-4390-8704-3f0a5a2ce479\", \"name\": \"合并\", \"type\": \"n8n-nodes-base.merge\", \"position\": [1200, -80], \"parameters\": {\"mode\": \"结合\", \"options\": {}, \"fieldsToMatchString\": \"作物名称\"}, \"typeVersion\": 3}, {\"id\": \"54a5d467-4985-49b5-9f13-e6563acf08b3\", \"name\": \"文本（视觉）作物描述\", \"type\": \"n8n-nodes-base.set\", \"position\": [380, 80], \"parameters\": {\"mode\": \"raw\", \"options\": {}, \"jsonOutput\": \"```json\\n{\\n  \\\"文本锚点\\\": [\\n    {\\\"作物名称\\\": \\\"珍珠粟（印度小米）\\\", \\\"作物描述\\\": \\\"珍珠粟（印度小米）——高秆作物，圆柱形穗状绿色谷穗。\\\"},\\n    {\\\"作物名称\\\": \\\"烟草\\\", \\\"作物描述\\\": \\\"烟草——宽大的椭圆形叶片，小型管状花朵，通常呈粉红或白色。\\\"},\\n    {\\\"作物名称\\\": \\\"樱桃\\\", \\\"作物描述\\\": \\\"樱桃——中等高度树木，枝条细长，锯齿状叶片，结有光泽的红色小果实。\\\"},\\n    {\\\"作物名称\\\": \\\"棉花\\\", \\\"作物描述\\\": \\\"棉花——灌木状植株，绿色裂叶，白色棉絮填充的蓬松蒴果。\\\"},\\n    {\\\"作物名称\\\": \\\"香蕉\\\", \\\"作物描述\\\": \\\"香蕉——高大草本植物，宽大的长条形绿叶，悬挂成串的黄色果实。\\\"},\\n    {\\\"作物名称\\\": \\\"黄瓜\\\", \\\"作物描述\\\": \\\"黄瓜——攀缘藤本，黄色花朵，长圆柱形绿色果实。\\\"},\\n    {\\\"作物名称\\\": \\\"玉米\\\", \\\"作物描述\\\": \\\"玉米——高大茎秆，宽大叶片，顶端有雄穗，苞叶包裹的玉米穗。\\\"},\\n    {\\\"作物名称\\\": \\\"小麦\\\", \\\"作物描述\\\": \\\"小麦——细直茎秆，窄长绿叶，金黄色穗状谷粒。\\\"},\\n    {\\\"作物名称\\\": \\\"丁香\\\", \\\"作物描述\\\": \\\"丁香——小型乔木，椭圆形绿叶，簇生未开放的红色花蕾。\\\"},\\n    {\\\"作物名称\\\": \\\"高粱\\\", \\\"作物描述\\\": \\\"高粱——高大禾本科植物，宽叶，顶端结圆形紧密谷穗。\\\"},\\n    {\\\"作物名称\\\": \\\"橄榄树\\\", \\\"作物描述\\\": \\\"橄榄树——中等高度乔木，银绿色叶片，小型椭圆形绿色或黑色果实。\\\"},\\n    {\\\"作物名称\\\": \\\"大豆\\\", \\\"作物描述\\\": \\\"大豆——丛生植物，三出复叶，豆荚内含圆形豆粒。\\\"},\\n    {\\\"作物名称\\\": \\\"咖啡树\\\", \\\"作物描述\\\": \\\"咖啡树——灌木，深绿色光亮叶片，簇生小白花后结红色浆果。\\\"},\\n    {\\\"作物名称\\\": \\\"水稻\\\", \\\"作物描述\\\": \\\"水稻——低矮喜水禾本科，窄长绿叶，下垂的金黄色谷穗。\\\"},\\n    {\\\"作物名称\\\": \\\"柠檬\\\", \\\"作物描述\\\": \\\"柠檬——小型乔木，光亮绿叶，椭圆形黄色果实。\\\"},\\n    {\\\"作物名称\\\": \\\"芥菜\\\", \\\"作物描述\\\": \\\"芥菜——小型草本植物，黄色花朵，细长种荚。\\\"},\\n    {\\\"作物名称\\\": \\\"绿豆\\\", \\\"作物描述\\\": \\\"绿豆——低矮植株，三出复叶，绿色小豆荚内含绿豆。\\\"},\\n    {\\\"作物名称\\\": \\\"椰子\\\", \\\"作物描述\\\": \\\"椰子——高大棕榈树，羽状叶片，大型纤维质圆形果实。\\\"},\\n    {\\\"作物名称\\\": \\\"鹰嘴豆\\\", \\\"作物描述\\\": \\\"鹰嘴豆——低矮灌木状植物，羽状叶，小型豆荚内含圆形种子。\\\"},\\n    {\\\"作物名称\\\": \\\"菠萝\\\", \\\"作物描述\\\": \\\"菠萝——低矮植株，剑状带刺叶片，大型带刺金黄色果实。\\\"},\\n    {\\\"作物名称\\\": \\\"甘蔗\\\", \\\"作物描述\\\": \\\"甘蔗——高大分节茎秆，狭长叶片，茎内富含糖分。\\\"},\\n    {\\\"作物名称\\\": \\\"向日葵\\\", \\\"作物描述\\\": \\\"向日葵——高大植株，粗糙绿叶，明亮的黄色大型花盘。\\\"},\\n    {\\\"作物名称\\\": \\\"辣椒\\\", \\\"作物描述\\\": \\\"辣椒——小型灌木状植物，细长的绿色或红色果实。\\\"},\\n    {\\\"作物名称\\\": \\\"芡实（玛卡纳）\\\", \\\"作物描述\\\": \\\"芡实（玛卡纳）——水生植物，圆形浮叶，多刺白色种子。\\\"},\\n    {\\\"作物名称\\\": \\\"黄麻\\\", \\\"作物描述\\\": \\\"黄麻——高大植物，笔直长茎，窄长绿叶。\\\"},\\n    {\\\"作物名称\\\": \\\"木瓜\\\", \\\"作物描述\\\": \\\"木瓜——中等高度乔木，中空树干，大型裂叶，黄橙色梨形果实。\\\"},\\n    {\\\"作物名称\\\": \\\"茶树\\\", \\\"作物描述\\\": \\\"茶树——小型灌木，深绿色光亮叶片，小白花。\\\"},\\n    {\\\"作物名称\\\": \\\"豆蔻\\\", \\\"作物描述\\\": \\\"豆蔻——低矮热带植物，宽叶，簇生浅绿色小豆荚。\\\"},\\n    {\\\"作物名称\\\": \\\"杏仁\\\", \\\"作物描述\\\": \\\"杏仁——中等高度乔木，锯齿状叶，椭圆形绿色果荚内含可食用坚果。\\\"}\\n  ]\\n}\\n```\"}, \"typeVersion\": 3.4}, {\"id\": \"14c25e76-8a2c-4df8-98ea-b2f31b15fd1f\", \"name\": \"嵌入文本\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [1460, -80], \"parameters\": {\"url\": \"https://api.voyageai.com/v1/多模态嵌入\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"={{\\n{\\n  \\\"输入\\\": [\\n    {\\n      \\\"内容\\\": [\\n        {\\n          \\\"类型\\\": \\\"文本\\\",\\n          \\\"文本\\\": $json.作物描述\\n        }\\n      ]\\n    }\\n  ],\\n  \\\"模型\\\": \\\"voyage-multimodal-3\\\",\\n  \\\"输入类型\\\": \\\"查询\\\"\\n}\\n}}\", \"sendBody\": true, \"specifyBody\": \"JSON\", \"authentication\": \"通用凭证类型\", \"genericAuthType\": \"HTTP头部认证\"}, \"credentials\": {\"httpHeaderAuth\": {\"id\": \"Vb0RNVDnIHmgnZOP\", \"name\": \"Voyage API\"}}, \"typeVersion\": 4.2}, {\"id\": \"8763db0a-9a92-4ffd-8a40-c7db614b735f\", \"name\": \"通过文本获取中心点\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [1640, -80], \"parameters\": {\"url\": \"={{ $('Qdrant集群变量').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant集群变量').first().json.collectionName }}/points/query\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"={{\\n{\\n  \\\"query\\\": $json.data[0].embedding,\\n  \\\"using\\\": \\\"voyage\\\",\\n  \\\"exact\\\": true,\\n  \\\"filter\\\": {\\n    \\\"must\\\": [\\n      {\\n        \\\"key\\\": \\\"crop_name\\\",\\n        \\\"match\\\": {\\\"value\\\": $('Merge').item.json.cropName }\\n      }\\n    ]\\n  },\\n  \\\"limit\\\": 1,\\n  \\\"with_payload\\\": true,\\n  \\\"with_vector\\\": true\\n}\\n}}\", \"sendBody\": true, \"specifyBody\": \"JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，易于人阅读和编写，同时也易于机器解析和生成。它基于JavaScript的一个子集，采用完全独立于语言的文本格式来存储和表示数据。JSON常用于Web应用程序中服务器与客户端之间的数据传输，因其简洁和高效的特性而被广泛采用。\", \"authentication\": \"预定义凭证类型\", \"nodeCredentialType\": \"Qdrant API\"}, \"credentials\": {\"qdrantApi\": {\"id\": \"it3j3hP9FICqhgX6\", \"name\": \"QdrantApi account\"}}, \"typeVersion\": 4.2}, {\"id\": \"5c770ca2-6e1a-4c4b-80e0-dcbeeda43a0f\", \"name\": \"设置文本中心点ID\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [2000, 160], \"parameters\": {\"url\": \"={{ $('Qdrant集群变量').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant集群变量').first().json.collectionName }}/points/payload\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"={{\\n{\\n  \\\"payload\\\": {\\\"is_text_anchor_medoid\\\": true},\\n  \\\"points\\\": [$json.result.points[0].id]\\n}\\n}}\", \"sendBody\": true, \"specifyBody\": \"JSON\", \"authentication\": \"预定义凭证类型\", \"nodeCredentialType\": \"Qdrant API\"}, \"credentials\": {\"qdrantApi\": {\"id\": \"it3j3hP9FICqhgX6\", \"name\": \"QdrantApi account\"}}, \"typeVersion\": 4.2}, {\"id\": \"c08ff472-51ab-4c3d-b9c0-2170fda2ccef\", \"name\": \"准备搜索阈值1\", \"type\": \"n8n-nodes-base.set\", \"position\": [2300, 80], \"parameters\": {\"options\": {}, \"assignments\": {\"assignments\": [{\"id\": \"6faa5949-968c-42bf-8ce8-cf2403566eba\", \"name\": \"oppositeOfCenterVector\", \"type\": \"array\", \"value\": \"={{ $json.result.points[0].vector.voyage.map(value => value * -1)}}\"}, {\"id\": \"84eb42be-2ea5-4a76-9c76-f21a962360a3\", \"name\": \"cropName\", \"type\": \"string\", \"value\": \"={{ $json.result.points[0].payload.crop_name }}\"}, {\"id\": \"b68d2e42-0dde-4875-bb59-056f29b6ac0a\", \"name\": \"centerId\", \"type\": \"string\", \"value\": \"={{ $json.result.points[0].id }}\"}]}}, \"typeVersion\": 3.4}, {\"id\": \"84ba4de5-aa9b-43fb-89cb-70db0b3ca334\", \"name\": \"阈值分数1\", \"type\": \"n8n-nodes-base.set\", \"position\": [2820, 80], \"parameters\": {\"options\": {}, \"assignments\": {\"assignments\": [{\"id\": \"579a2ee4-0ab2-4fde-909a-01166624c9d8\", \"name\": \"thresholdScore\", \"type\": \"number\", \"value\": \"={{ $json.result.points.last().score * -1 }}\"}, {\"id\": \"11eab775-f709-40a9-b0fe-d1059b67de05\", \"name\": \"centerId\", \"type\": \"string\", \"value\": \"={{ $('Prepare for Searching Threshold1').item.json.centerId }}\"}]}}, \"typeVersion\": 3.4}, {\"id\": \"f490d224-38a8-4087-889d-1addb4472471\", \"name\": \"文本中值搜索评分\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [2560, 80], \"parameters\": {\"url\": \"={{ $('Qdrant集群变量').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant集群变量').first().json.collectionName }}/points/query\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"={{\\n{\\n  \\\"查询\\\": $json.oppositeOfCenterVector,\\n  \\\"使用\\\": \\\"voyage\\\",\\n  \\\"精确\\\": true,\\n  \\\"筛选\\\": {\\n    \\\"必须\\\": [\\n      {\\n        \\\"键\\\": \\\"作物名称\\\",\\n        \\\"匹配\\\": {\\\"值\\\": $json.cropName }\\n      }\\n    ]\\n  },\\n  \\\"限制\\\": $('文本中心变量').first().json.furthestFromCenter,\\n  \\\"携带载荷\\\": true\\n}\\n}}\", \"sendBody\": true, \"specifyBody\": \"JSON\", \"authentication\": \"预定义凭证类型\", \"nodeCredentialType\": \"Qdrant API\"}, \"credentials\": {\"qdrantApi\": {\"id\": \"it3j3hP9FICqhgX6\", \"name\": \"QdrantApi account\"}}, \"typeVersion\": 4.2}, {\"id\": \"f5035aca-1706-4c8d-bd26-49b3451ae04b\", \"name\": \"中心点变量\", \"type\": \"n8n-nodes-base.set\", \"position\": [-140, -220], \"parameters\": {\"options\": {}, \"assignments\": {\"assignments\": [{\"id\": \"5eb23ad2-aacd-468f-9a27-ef2b63e6bd08\", \"name\": \"furthestFromCenter\", \"type\": \"number\", \"value\": 5}]}}, \"typeVersion\": 3.4}, {\"id\": \"c9cad66d-4a76-4092-bfd6-4860493f942a\", \"name\": \"文本 中心点变量\", \"type\": \"n8n-nodes-base.set\", \"position\": [-140, 80], \"parameters\": {\"options\": {}, \"assignments\": {\"assignments\": [{\"id\": \"5eb23ad2-aacd-468f-9a27-ef2b63e6bd08\", \"name\": \"furthestFromCenter\", \"type\": \"number\", \"value\": 1}]}}, \"typeVersion\": 3.4}, {\"id\": \"ecab63f7-7a72-425a-8f5a-0c707e7f77bc\", \"name\": \"Qdrant集群变量\", \"type\": \"n8n-nodes-base.set\", \"position\": [-420, -220], \"parameters\": {\"options\": {}, \"assignments\": {\"assignments\": [{\"id\": \"58b7384d-fd0c-44aa-9f8e-0306a99be431\", \"name\": \"qdrantCloudURL\", \"type\": \"string\", \"value\": \"=https://152bc6e2-832a-415c-a1aa-fb529f8baf8d.eu-central-1-0.aws.cloud.qdrant.io\"}, {\"id\": \"e34c4d88-b102-43cc-a09e-e0553f2da23a\", \"name\": \"collectionName\", \"type\": \"string\", \"value\": \"=agricultural-crops\"}]}}, \"typeVersion\": 3.4}, {\"id\": \"6e81f0b0-3843-467e-9c93-40026e57fa91\", \"name\": \"作物集群信息\", \"type\": \"n8n-nodes-base.set\", \"position\": [600, -220], \"parameters\": {\"options\": {}, \"assignments\": {\"assignments\": [{\"id\": \"5327b254-b703-4a34-a398-f82edb1d6d6b\", \"name\": \"=cropsNumber\", \"type\": \"number\", \"value\": \"={{ $json.result.hits.length }}\"}, {\"id\": \"79168efa-11b8-4a7b-8851-da9c8cbd700b\", \"name\": \"maxClusterSize\", \"type\": \"number\", \"value\": \"={{ Math.max(...$json.result.hits.map(item => item.count)) }}\"}, {\"id\": \"e1367cec-9629-4c69-a8d7-3eeae3ac94d3\", \"name\": \"cropNames\", \"type\": \"array\", \"value\": \"={{ $json.result.hits.map(item => item.value)}}\"}]}}, \"typeVersion\": 3.4}, {\"id\": \"20191c0a-5310-48f2-8be4-1d160f237db2\", \"name\": \"作物计数\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [380, -220], \"parameters\": {\"url\": \"={{ $('Qdrant集群变量').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant集群变量').first().json.collectionName }}/facet\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"={{\\n{\\n  \\\"key\\\": \\\"作物名称\\\",\\n  \\\"limit\\\": $json.result.count,\\n  \\\"exact\\\": true\\n}\\n}}\", \"sendBody\": true, \"specifyBody\": \"JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，易于人阅读和编写，同时也易于机器解析和生成。它基于JavaScript的一个子集，采用完全独立于语言的文本格式来存储和表示数据。JSON常用于Web应用程序中，作为服务器与客户端之间传输数据的标准格式。其简洁清晰的层次结构使得它成为理想的数据交换语言。\", \"authentication\": \"预定义凭证类型\", \"nodeCredentialType\": \"Qdrant API\"}, \"credentials\": {\"qdrantApi\": {\"id\": \"it3j3hP9FICqhgX6\", \"name\": \"QdrantApi account\"}}, \"typeVersion\": 4.2}, {\"id\": \"a81103bb-6522-49a2-8102-83c7e004b9b3\", \"name\": \"便利贴\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-1260, -340], \"parameters\": {\"width\": 520, \"height\": 240, \"content\": \"## 设置异常检测的聚类中心\\n### 通过预处理流程确定聚类中心与异常阈值分数，为基于阈值的异常检测奠定基础\\n本方案采用双路径构建中心点：上方分支为*\\\"距离矩阵法\\\"*，下方分支为*\\\"多模态嵌入模型法\\\"*。\"}, \"typeVersion\": 1}, {\"id\": \"38fc8252-7e27-450d-b09e-59ceaebc5378\", \"name\": \"便利贴1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-420, -340], \"parameters\": {\"height\": 80, \"content\": \"再次为Qdrant设置变量：集群URL和我们正在使用的集合。\"}, \"typeVersion\": 1}, {\"id\": \"2d0e3b52-d382-428c-9b37-870f4c53b8e7\", \"name\": \"便利贴2\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-140, -360], \"parameters\": {\"height\": 100, \"content\": \"我们在聚类中用于设定阈值的点是：距离中心最远的那个点，还是第二远的，……第X远的点；\"}, \"typeVersion\": 1}, {\"id\": \"b0b300f3-e2c9-4c36-8a1d-6705932c296c\", \"name\": \"便利贴3\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [380, -500], \"parameters\": {\"width\": 180, \"height\": 240, \"content\": \"这里我们获取的是[分面计数](https://qdrant.tech/documentation/concepts/payload/?q=facet#facet-counts)：关于*\\\"crop_name\\\"*载荷背后有哪些唯一值以及各值对应数据点数量的信息（例如，我们有31个*\\\"cucumber\\\"*和29个*\\\"cotton\\\"*）。\"}, \"typeVersion\": 1}, {\"id\": \"0d2584da-5fd0-4830-b329-c78b0debf584\", \"name\": \"便利贴4\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-140, 260], \"parameters\": {\"height\": 120, \"content\": \"我们在聚类中用于绘制阈值的点是：离中心最远的那个点，还是第二远的，……第X远的点；\\n<这是第二种方法>\"}, \"typeVersion\": 1}, {\"id\": \"f4c98469-d426-415c-916d-1bc442cf6a21\", \"name\": \"便利贴5\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [120, -400], \"parameters\": {\"height\": 140, \"content\": \"我们需要获取Qdrant集合中的[总点数](https://qdrant.tech/documentation/concepts/points/?q=count#counting-points)，将其作为*\\\"Crop Counts\\\"*节点中的`limit`参数，这样就不会丢失任何信息；\\n<虽然这本身并非最佳实践>\"}, \"typeVersion\": 1}, {\"id\": \"037af9df-34c4-488d-8c89-561ac25247c4\", \"name\": \"便利贴6\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [600, -640], \"parameters\": {\"width\": 220, \"height\": 380, \"content\": \"在此，我们正在提取并汇总所有关于作物集群的信息，以便为每个集群调用[Qdrant距离矩阵API](https://qdrant.tech/documentation/concepts/explore/?q=distance+#distance-matrix)。  \\n我们传递的参数包括：**最大集群规模**（针对已标注数据，本例中所有数据均已标注；实际应用中若标注数据超过数百条则不建议调用此API）、**唯一作物值的数量**以及**唯一作物值本身**。算法将针对每个唯一作物集群运行一次（以确定其中心点和阈值）。\"}, \"typeVersion\": 1}, {\"id\": \"b4e635e3-233d-4358-ad11-250a2b14a2f7\", \"name\": \"便利贴8\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [380, 260], \"parameters\": {\"height\": 200, \"content\": \"每种作物通常外观的硬编码描述；这些描述是通过chatGPT生成的，技术上也可以直接在n8n中基于作物名称或作物图片生成（我们需要对作物最典型样本的外观进行准确描述）。\"}, \"typeVersion\": 1}, {\"id\": \"4fda1841-e7e3-4bd2-acf2-ee7338598184\", \"name\": \"便利贴9\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1200, -800], \"parameters\": {\"height\": 400, \"content\": \"对每个集群调用一次[距离矩阵API](https://qdrant.tech/documentation/concepts/explore/?q=distance+#distance-matrix)。\\n\\n`sample` - 表示我们采样的点数（此处通过`crop_name`字段过滤，因此我们在每个集群内进行采样。由于我们将最大集群大小传递给`sample`参数，所以会获取每个集群的全部点）。\\n\\n`limit` - 表示需要计算距离的邻近点数量。由于我们需要计算集群内所有点之间的两两距离，这里再次将上限设置为最大集群的规模。\"}, \"typeVersion\": 1}, {\"id\": \"19c4bb6d-abcb-423b-b883-48c779d0307d\", \"name\": \"拆分出来\", \"type\": \"n8n-nodes-base.splitOut\", \"position\": [860, -220], \"parameters\": {\"include\": \"其他所有字段\", \"options\": {\"destinationFieldName\": \"cropName\"}, \"fieldToSplitOut\": \"作物名称\"}, \"typeVersion\": 1}, {\"id\": \"f6d74ced-1998-4dbd-ab04-ca1b6ea409a5\", \"name\": \"便利贴10\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [840, -60], \"parameters\": {\"width\": 150, \"height\": 80, \"content\": \"分解为每个独特的作物集群\"}, \"typeVersion\": 1}, {\"id\": \"b3adb2bc-61f5-42ff-bb5d-11faa12189b7\", \"name\": \"便利贴11\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1460, -640], \"parameters\": {\"width\": 180, \"height\": 240, \"content\": \"利用Qdrant生成的距离矩阵和`scipy`中的`coo_array`，我们正在为每个聚类寻找一个**代表性**点（基于**余弦**距离，该点与聚类内所有其他点的相似度最高）。\"}, \"typeVersion\": 1}, {\"id\": \"d9d3953e-8b69-4b6a-86f2-b2d2db28d4ad\", \"name\": \"便利贴12\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1200, 100], \"parameters\": {\"height\": 280, \"content\": \"采用此方法寻找**代表性**样本时，我们：\\n1) 使用与图像相同的Voyage多模态模型对作物描述进行向量化嵌入（该模型支持跨模态处理）\\n2) 在每个（作物）聚类中，通过**余弦相似度**指标找出与嵌入描述最接近的图像，将其视为该聚类的完美代表\"}, \"typeVersion\": 1}, {\"id\": \"8751efd4-d85e-4dc8-86ef-90073d49b6df\", \"name\": \"便利贴13\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1460, 100], \"parameters\": {\"width\": 160, \"height\": 140, \"content\": \"使用Voyage模型嵌入描述  \\n[注意] 注意`input_type`参数，此处应为*\\\"query\\\"*\"}, \"typeVersion\": 1}, {\"id\": \"652bc70a-4e6f-416a-977b-5d29ae9cb4f0\", \"name\": \"便利贴14\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1640, 100], \"parameters\": {\"height\": 260, \"content\": \"寻找与描述嵌入最接近的图像（按聚类执行）\\n[注意] 留意`exact`参数\\n[注意] `limit`设为1是因为向量数据库始终按从最相似到最不相似的距离排序返回结果\\n[注意] 此处使用`using`参数是因为我们在前一个流程中上传的向量被命名为*\\\"voyage\\\"*\"}, \"typeVersion\": 1}, {\"id\": \"a5836982-0de0-4692-883c-267602468ed2\", \"name\": \"设置文本中心点阈值分数\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [3000, 80], \"parameters\": {\"url\": \"={{ $('Qdrant集群变量').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant集群变量').first().json.collectionName }}/points/payload\", \"method\": \"邮政\", \"options\": {}, \"jsonBody\": \"={{\\n{\\n  \\\"payload\\\": {\\\"is_text_anchor_medoid_cluster_threshold\\\": $json.thresholdScore },\\n  \\\"points\\\": [$json.centerId]\\n}\\n}}\", \"sendBody\": true, \"specifyBody\": \"JSON\", \"authentication\": \"预定义凭证类型\", \"nodeCredentialType\": \"Qdrant API\"}, \"credentials\": {\"qdrantApi\": {\"id\": \"it3j3hP9FICqhgX6\", \"name\": \"QdrantApi account\"}}, \"typeVersion\": 4.2}, {\"id\": \"5354d197-be5e-4add-b721-9e5e3943e53d\", \"name\": \"便利贴15\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1960, -460], \"parameters\": {\"width\": 200, \"height\": 80, \"content\": \"通过ID获取中心点的向量\"}, \"typeVersion\": 1}, {\"id\": \"93043602-92bc-40ac-b967-ddb7289e5d22\", \"name\": \"便利贴16\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [2000, -820], \"parameters\": {\"height\": 100, \"content\": \"在Qdrant中，*\\\"is_medoid\\\"* [载荷](https://qdrant.tech/documentation/concepts/payload/)被设置为通过*\\\"距离矩阵方法\\\"*定义为聚类中心的点\"}, \"typeVersion\": 1}, {\"id\": \"cb1364ad-e21c-4336-9a5b-15e80c2ed2f2\", \"name\": \"便利贴17\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [2280, 260], \"parameters\": {\"height\": 180, \"content\": \"在这里，我们无需像*\\\"距离矩阵法\\\"*那样通过点ID获取向量，因为[前一节点的API调用](https://api.qdrant.tech/api-reference/search/query-points)能够返回Qdrant中存储的向量作为响应，而距离矩阵API仅返回点ID。\"}, \"typeVersion\": 1}, {\"id\": \"6d735a28-a93e-41f1-9889-2557a1dd7aec\", \"name\": \"便利贴18\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1980, 320], \"parameters\": {\"height\": 140, \"content\": \"在Qdrant中，为通过*\\\"多模态嵌入模型方法\\\"*定义为聚类中心的点设置了*\\\"is_text_anchor_medoid\\\"*[载荷](https://qdrant.tech/documentation/concepts/payload/)。\"}, \"typeVersion\": 1}, {\"id\": \"7c6796a9-260b-41c0-9ac7-feb5d4d95c19\", \"name\": \"便利贴19\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [2240, -500], \"parameters\": {\"width\": 440, \"height\": 100, \"content\": \"从这里开始，当前节点及后续三个节点在两种方法中具有相似结构，仅变量名称存在差异。我们的目标是找到一个**类别（集群）阈值分数**，以便将其用于异常检测（针对每个类别）。\"}, \"typeVersion\": 1}, {\"id\": \"5025936d-d49c-4cc1-a675-3bde71627c40\", \"name\": \"便利贴20\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [2280, -180], \"parameters\": {\"height\": 220, \"content\": \"在每一类别中，寻找与中心向量差异最大的点，等同于寻找与中心向量[相反方向](https://mathinsight.org/image/vector_opposite)最相似的点，即所有坐标乘以-1后的中心向量。这一性质在使用**余弦**向量相似度度量（即我们所采用的）时始终成立。\"}, \"typeVersion\": 1}, {\"id\": \"fa9026e4-0c92-4755-92a0-5e400b5f04c9\", \"name\": \"便利贴21\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [2580, -140], \"parameters\": {\"width\": 520, \"height\": 140, \"content\": \"因此，在这里，我们找到了作物类别中与类别中心差异最大的点（或第X个差异点，具体取决于流程开始时设置的变量）。我们的**阈值分数**即为该点与类别中心之间的相似度评分。现在，我们将此分数作为每个类别中心点的元信息保存。至此，异常检测的所有准备工作均已完成。\"}, \"typeVersion\": 1}, {\"id\": \"8e172a7c-6865-4daf-9d9c-86e0dba2c0a2\", \"name\": \"便利贴22\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-900, -820], \"parameters\": {\"color\": 4, \"width\": 540, \"height\": 300, \"content\": \"### 用于异常检测\\n1. 第一流程是将（作物）数据集上传至Qdrant集合。\\n2. **第二流程是在该Qdrant集合中建立聚类（类别）中心点并设定聚类（类别）阈值分数。**\\n3. 第三流程是异常检测工具，可接收任意图像作为输入，并利用Qdrant（作物）集合中完成的所有准备工作。\\n\\n### 重建步骤\\n您需要将Kaggle上的[作物数据集](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification)上传至自己的Google存储桶，并重新配置[Qdrant云服务](https://qdrant.tech/documentation/quickstart-cloud/)的API/连接（可使用**免费版**集群）、Voyage AI API及Google云存储的接口。\\n\\n**总体而言，这些流程可适配任何图像数据集**\"}, \"typeVersion\": 1}], \"active\": false, \"pinData\": {}, \"settings\": {\"executionOrder\": \"v1\"}, \"versionId\": \"a23fc305-7ecd-4754-b208-2d964d9b1eda\", \"connections\": {\"Merge\": {\"main\": [[{\"node\": \"Embed text\", \"type\": \"main\", \"index\": 0}]]}, \"Split Out\": {\"main\": [[{\"node\": \"Cluster Distance Matrix\", \"type\": \"main\", \"index\": 0}, {\"node\": \"Merge\", \"type\": \"main\", \"index\": 0}]]}, \"Embed text\": {\"main\": [[{\"node\": \"Get Medoid by Text\", \"type\": \"main\", \"index\": 0}]]}, \"Split Out1\": {\"main\": [[{\"node\": \"Merge\", \"type\": \"main\", \"index\": 1}]]}, \"Crop Counts\": {\"main\": [[{\"node\": \"Info About Crop Clusters\", \"type\": \"main\", \"index\": 0}]]}, \"Set medoid id\": {\"main\": [[]]}, \"Searching Score\": {\"main\": [[{\"node\": \"Threshold Score\", \"type\": \"main\", \"index\": 0}]]}, \"Threshold Score\": {\"main\": [[{\"node\": \"Set medoid threshold score\", \"type\": \"main\", \"index\": 0}]]}, \"Threshold Score1\": {\"main\": [[{\"node\": \"Set text medoid threshold score\", \"type\": \"main\", \"index\": 0}]]}, \"Get Medoid Vector\": {\"main\": [[{\"node\": \"Prepare for Searching Threshold\", \"type\": \"main\", \"index\": 0}]]}, \"Medoids Variables\": {\"main\": [[{\"node\": \"Total Points in Collection\", \"type\": \"main\", \"index\": 0}]]}, \"Get Medoid by Text\": {\"main\": [[{\"node\": \"Set text medoid id\", \"type\": \"main\", \"index\": 0}, {\"node\": \"Prepare for Searching Threshold1\", \"type\": \"main\", \"index\": 0}]]}, \"Scipy Sparse Matrix\": {\"main\": [[{\"node\": \"Set medoid id\", \"type\": \"main\", \"index\": 0}, {\"node\": \"Get Medoid Vector\", \"type\": \"main\", \"index\": 0}]]}, \"Text Medoids Variables\": {\"main\": [[{\"node\": \"Textual (visual) crop descriptions\", \"type\": \"main\", \"index\": 0}]]}, \"Cluster Distance Matrix\": {\"main\": [[{\"node\": \"Scipy Sparse Matrix\", \"type\": \"main\", \"index\": 0}]]}, \"Info About Crop Clusters\": {\"main\": [[{\"node\": \"Split Out\", \"type\": \"main\", \"index\": 0}]]}, \"Qdrant cluster variables\": {\"main\": [[{\"node\": \"Medoids Variables\", \"type\": \"main\", \"index\": 0}, {\"node\": \"Text Medoids Variables\", \"type\": \"main\", \"index\": 0}]]}, \"Total Points in Collection\": {\"main\": [[{\"node\": \"Crop Counts\", \"type\": \"main\", \"index\": 0}]]}, \"Searching Text Medoid Score\": {\"main\": [[{\"node\": \"Threshold Score1\", \"type\": \"main\", \"index\": 0}]]}, \"Prepare for Searching Threshold\": {\"main\": [[{\"node\": \"Searching Score\", \"type\": \"main\", \"index\": 0}]]}, \"Prepare for Searching Threshold1\": {\"main\": [[{\"node\": \"Searching Text Medoid Score\", \"type\": \"main\", \"index\": 0}]]}, \"When clicking ‘Test workflow’\": {\"main\": [[{\"node\": \"Qdrant cluster variables\", \"type\": \"main\", \"index\": 0}]]}, \"Textual (visual) crop descriptions\": {\"main\": [[{\"node\": \"Split Out1\", \"type\": \"main\", \"index\": 0}]]}}}"
}