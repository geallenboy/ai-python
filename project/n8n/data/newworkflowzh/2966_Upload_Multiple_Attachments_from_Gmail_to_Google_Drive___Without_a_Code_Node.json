{
  "url": "https://n8n.io/workflows/2966-upload-multiple-attachments-from-gmail-to-google-drive-without-a-code-node/",
  "title": "Upload Multiple Attachments from Gmail to Google Drive - Without a Code Node",
  "author": "Hubschrauber",
  "publish_date": "Last update 3 months ago",
  "publish_date_absolute": "2025-02-26",
  "categories": [
    {
      "name": "Building Blocks"
    }
  ],
  "workflow_json": "{\"meta\":{\"instanceId\":\"abc123\",\"templateCredsSetupCompleted\":true},\"nodes\":[{\"id\":\"c8481fc0-4cc2-4662-b008-e81eaeb4840b\",\"name\":\"Gmail Trigger\",\"type\":\"n8n-nodes-base.gmailTrigger\",\"position\":[-340,0],\"parameters\":{\"simple\":false,\"filters\":{\"sender\":\"ray.thomas@charter.com\",\"readStatus\":\"unread\"},\"options\":{\"downloadAttachments\":true,\"dataPropertyAttachmentsPrefixName\":\"attachment_\"},\"pollTimes\":{\"item\":[{\"mode\":\"everyMinute\"}]}},\"credentials\":{\"gmailOAuth2\":{\"id\":\"egorWvqjkdIG2ovh\",\"name\":\"Gmail account - rthomascharter\"}},\"typeVersion\":1.2},{\"id\":\"fd82d244-dfab-46db-af8e-e674501db75d\",\"name\":\"Google Drive\",\"type\":\"n8n-nodes-base.googleDrive\",\"position\":[540,0],\"parameters\":{\"name\":\"={{ $binary.values()[0].fileName }}\",\"driveId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"My Drive\"},\"options\":{},\"folderId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"0BwqhgrfUUaOuM2x1NXhxLUlGVEE\",\"cachedResultUrl\":\"https://drive.google.com/drive/folders/0BwqhgrfUUaOuM2x1NXhxLUlGVEE?resourcekey=0-fQoeO57wF_vlzIWPZAoNXg\",\"cachedResultName\":\"misc\"},\"inputDataFieldName\":\"={{ $binary.keys()[0] }}\"},\"credentials\":{\"googleDriveOAuth2Api\":{\"id\":\"fwkvLJni8GfLNqBZ\",\"name\":\"Google Drive account - rthomascharter\"}},\"typeVersion\":3},{\"id\":\"5686e523-e12c-41b1-818d-03545122ad6f\",\"name\":\"Split Out\",\"type\":\"n8n-nodes-base.splitOut\",\"position\":[-120,0],\"parameters\":{\"options\":{},\"fieldToSplitOut\":\"$binary\"},\"typeVersion\":1},{\"id\":\"1774a0d8-2909-49e4-b0f7-1c3e343602b1\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[420,-360],\"parameters\":{\"width\":380,\"height\":820,\"content\":\"## Reference \\\"Single\\\" Binary Using Expressions\\nThis contains examples of how to reference a single binary in each input item **regardless of its key name.**\"},\"typeVersion\":1},{\"id\":\"204fe711-c5f3-4243-be3b-829419a07c82\",\"name\":\"Switch\",\"type\":\"n8n-nodes-base.switch\",\"position\":[100,0],\"parameters\":{\"rules\":{\"values\":[{\"outputKey\":\"Large Files\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"operator\":{\"type\":\"number\",\"operation\":\"gt\"},\"leftValue\":\"={{ $binary.values()[0].fileSize.split(' ')[0].toNumber() }}\",\"rightValue\":300}]},\"renameOutput\":true},{\"outputKey\":\"Medium Files\",\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"27a59343-5f2a-43b0-a74d-ddb0a988c0cb\",\"operator\":{\"type\":\"number\",\"operation\":\"gt\"},\"leftValue\":\"={{ $binary.values()[0].fileSize.split(' ')[0].toNumber() }}\",\"rightValue\":10}]},\"renameOutput\":true}]},\"options\":{\"fallbackOutput\":\"extra\"}},\"typeVersion\":3.2},{\"id\":\"1e00cb68-fed2-4f88-be84-4860c26c8a3b\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-200,-240],\"parameters\":{\"width\":260,\"height\":460,\"content\":\"## Split Multiple Binary Files\\nThis uses the `$binary` name (not expression var) to make individual items for each attachment binary.\\n* Note: This still doesn't homogenize the name of each binary.\"},\"typeVersion\":1},{\"id\":\"1089eb84-51d3-4669-8a5a-fd1d0855ca41\",\"name\":\"Send \\\" Too Big\\\" Notification (for example)\",\"type\":\"n8n-nodes-base.noOp\",\"position\":[540,-200],\"parameters\":{},\"typeVersion\":1},{\"id\":\"29c83742-72b6-40ec-a5fc-aab5ef1d5149\",\"name\":\"Ignore Little Graphics / Icons (for example)\",\"type\":\"n8n-nodes-base.noOp\",\"position\":[540,220],\"parameters\":{},\"typeVersion\":1}],\"pinData\":{},\"connections\":{\"Switch\":{\"main\":[[{\"node\":\"Send \\\" Too Big\\\" Notification (for example)\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Google Drive\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Ignore Little Graphics / Icons (for example)\",\"type\":\"main\",\"index\":0}]]},\"Split Out\":{\"main\":[[{\"node\":\"Switch\",\"type\":\"main\",\"index\":0}]]},\"Gmail Trigger\":{\"main\":[[{\"node\":\"Split Out\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "## Summary\n\nThis template uses the item handling nodes, and expression-support in n8n, **without using a`Code` node**, to extract **multiple** attachments from a GMail (trigger input) message/event, and (conditionally) upload each of them to Google Drive.\n\nNote: There is another template titled [Get Multiple Attachments from Gmail and upload them to GDrive](%3Chttps://n8n.io/workflows/2348-get-multiple-attachments-from-gmail-and-upload-them-to-gdrive/%3E) that does basically the same thing, but it uses a `Code` node.\n\n## Details\n\n### Using `Split Out` instead of `Code`\n\nThe “secret” to how this works is that n8n supports a special input field name `$binary` that references the entire set of (multiple) binary data sub-elements in a single input item. It may look like an expression, but in this case it is a “fixed” (literal) value used as the `Fields to Split Out` parameter value.\n\n### Dealing with names that are prefixed/suffixed with an Index\n\nThe next challenge with multiple attachments from a GMail message is that **each one is still assigned different name** like \"attachment_0\", \"attachment_1\", etc. This makes it tricky to reference them in a generic way. However, **once n8n splits the items out** , the binary in **each item is always the first (i.e. index-zero /`[0]`) and ONLY key/value**. So, that makes it possible get the key-name and attributes of the corresponding value indirectly with some clever expression syntax.\n\n  * `Input Data Field Name` -> Expression: `{{ $binary.keys()[0] }}` \\- **This returns the name, regardless of whether it is \"attachment_0\", \"attachment_1\", or whatever else.**\n  * Attachment file name: -> Expression: `{{ $binary.values()[0].fileName }}`\n  * Attachment file name extension: -> Expression: `{{ $binary.values()[0].fileExtension }}`\n  * Attachment file type: -> Expression: `{{ $binary.values()[0].fileType }}`\n  * Attachment file size (e.g. string \"100 kB\"): -> Expression: `{{ $binary.values()[0].fileSize }}`\n  * Attachment file size (numeric): -> Expression: `{{ $binary.values()[0].fileSize.split(' ')[0].toNumber() }}`\n  * Attachment mime type: -> Expression: `{{ $binary.values()[0].mimeType }}`\n  * Attachment id (storage GUID): -> Expression: `{{ $binary.values()[0].id }}`\n\n\n\n## Flow Control\n\nSince each of the attachments becomes a single item, it is relatively straightforward to introduce other n8n nodes like `If`, `Switch`, or `Filter` and route each single attachment item into different workflow paths. The template demonstrates how each attachment binary could be routed based on its file size, as an example.\n",
  "crawled_at": "2025-05-26T02:31:22.410035"
}