{
  "url": "https://n8n.io/workflows/4241-generate-audio-from-text-scripts-using-self-hosted-bark-model-and-google-drive/",
  "title": "Generate Audio from Text Scripts using Self-Hosted Bark Model and Google Drive",
  "author": "Flavien",
  "publish_date": "Last update 4 days ago",
  "publish_date_absolute": "",
  "categories": [
    {
      "name": "AI"
    },
    {
      "name": "Marketing"
    }
  ],
  "workflow_json": "{\"id\":\"oGZBcAWL45us8pwq\",\"meta\":{\"instanceId\":\"b056f9b68a026cea4ea6d6cda333d4e0637787dd2b6ca0bc03505f1e16cc8372\",\"templateCredsSetupCompleted\":true},\"name\":\"Audio generator\",\"tags\":[],\"nodes\":[{\"id\":\"90a47429-775e-43d5-acfb-b7f72f382894\",\"name\":\"Start: External Trigger\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[300,80],\"parameters\":{\"workflowInputs\":{\"values\":[{\"name\":\"id_repo_audio\"},{\"name\":\"id_repo_script\"}]}},\"typeVersion\":1.1},{\"id\":\"415fa2d1-532f-4a46-8634-8099f820816e\",\"name\":\"Start: Manual Test\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[200,440],\"parameters\":{},\"typeVersion\":1},{\"id\":\"627fad9c-407d-496a-b0ff-5b58055c666c\",\"name\":\"Test Values\",\"type\":\"n8n-nodes-base.set\",\"position\":[420,440],\"parameters\":{\"options\":{},\"assignments\":{\"assignments\":[{\"name\":\"id_repo_audio\",\"type\":\"string\",\"value\":\"1wrnIskVWQJRAvKs04bhXavgDv2FokabG\"},{\"name\":\"id_repo_script\",\"type\":\"string\",\"value\":\"12tIJJuO_DfwJbtOuO72mpk2_3s9O4xZc\"}]}},\"typeVersion\":3.4},{\"id\":\"e0efd839-dc9e-4d0b-b602-a6ead9e8d679\",\"name\":\"Aggregate Inputs\",\"type\":\"n8n-nodes-base.aggregate\",\"position\":[560,80],\"parameters\":{\"options\":{},\"fieldsToAggregate\":{\"fieldToAggregate\":[{\"fieldToAggregate\":\"id_repo_audio\"},{\"fieldToAggregate\":\"id_repo_script\"}]}},\"typeVersion\":1},{\"id\":\"fea5d345-4d72-431d-bf9b-4165b9b6f605\",\"name\":\"Get Scripts\",\"type\":\"n8n-nodes-base.googleDrive\",\"position\":[820,80],\"parameters\":{\"filter\":{\"folderId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $('Aggregate Inputs').item.json.id_repo_script[0] }}\"}},\"options\":{},\"resource\":\"fileFolder\"},\"credentials\":{\"googleDriveOAuth2Api\":{\"id\":\"m7YYCMskvr7bsiei\",\"name\":\"Google Drive account\"}},\"typeVersion\":3},{\"id\":\"0fccfd48-ca42-45ea-9eb0-75f49f4572f6\",\"name\":\"Loop Scripts\",\"type\":\"n8n-nodes-base.splitInBatches\",\"position\":[1140,80],\"parameters\":{\"options\":{}},\"typeVersion\":3},{\"id\":\"ba6ea0f9-d1d7-4f22-a817-764335132a1c\",\"name\":\"Download Script\",\"type\":\"n8n-nodes-base.googleDrive\",\"position\":[1500,100],\"parameters\":{\"fileId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $json.id }}\"},\"options\":{},\"operation\":\"download\"},\"credentials\":{\"googleDriveOAuth2Api\":{\"id\":\"m7YYCMskvr7bsiei\",\"name\":\"Google Drive account\"}},\"typeVersion\":3},{\"id\":\"f0f95702-4636-4810-9e42-4b3af5c13d9a\",\"name\":\"Save Script\",\"type\":\"n8n-nodes-base.readWriteFile\",\"position\":[1780,100],\"parameters\":{\"options\":{},\"fileName\":\"/tmp/script.txt\",\"operation\":\"write\",\"dataPropertyName\":\"=data\"},\"typeVersion\":1},{\"id\":\"63cb6eb3-6693-4b34-84c9-4f6b39872752\",\"name\":\"Generate WAV\",\"type\":\"n8n-nodes-base.executeCommand\",\"position\":[2000,100],\"parameters\":{\"command\":\"=/opt/venv/bin/python /scripts/generate_voice.py /tmp/script.txt /tmp/output_{{ $json.name.replace(/\\\\.txt$/, '') }}.wav\"},\"typeVersion\":1},{\"id\":\"0d29f755-5ed2-4005-9eed-acbc9c8ff8d1\",\"name\":\"Read Audio\",\"type\":\"n8n-nodes-base.readWriteFile\",\"position\":[2220,100],\"parameters\":{\"options\":{},\"fileSelector\":\"=/tmp/output_{{ $('Loop Scripts').item.json.name.replace(/\\\\.txt$/, '.wav') }}\"},\"typeVersion\":1},{\"id\":\"394dead9-49af-4187-a589-1ff751e998f8\",\"name\":\"Upload Audio\",\"type\":\"n8n-nodes-base.googleDrive\",\"position\":[2440,100],\"parameters\":{\"name\":\"={{ $json.fileName }}\",\"driveId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"My Drive\"},\"options\":{},\"folderId\":{\"__rl\":true,\"mode\":\"id\",\"value\":\"={{ $('Aggregate Inputs').item.json.id_repo_audio[0] }}\"}},\"credentials\":{\"googleDriveOAuth2Api\":{\"id\":\"m7YYCMskvr7bsiei\",\"name\":\"Google Drive account\"}},\"typeVersion\":3},{\"id\":\"95f7b0e0-980f-4beb-adac-197b4b50a84f\",\"name\":\"üìù Workflow Instructions\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[640,260],\"parameters\":{\"width\":600,\"height\":400,\"content\":\"## Audio Generation Workflow\\n\\n1. This workflow automates the conversion of text scripts into audio files using a Python voice synthesis script.\\n2. It retrieves scripts from Google Drive, generates audio with Bark-style narration, and reuploads the result.\\n3. Script filenames must be .txt. Only clean plain text is supported.\\n\\n### Inputs:\\n- id_repo_script: Google Drive folder with scripts\\n- id_repo_audio: Google Drive folder to upload audio files\\n\\nMake sure the Python script is deployed at /scripts/generate_voice.py and has access to Bark or other required models.\"},\"typeVersion\":1}],\"active\":false,\"pinData\":{},\"settings\":{\"executionOrder\":\"v1\"},\"versionId\":\"30318ca0-c87d-43db-8b74-3ec1127e1061\",\"connections\":{\"Read Audio\":{\"main\":[[{\"node\":\"Upload Audio\",\"type\":\"main\",\"index\":0}]]},\"Get Scripts\":{\"main\":[[{\"node\":\"Loop Scripts\",\"type\":\"main\",\"index\":0}]]},\"Save Script\":{\"main\":[[{\"node\":\"Generate WAV\",\"type\":\"main\",\"index\":0}]]},\"Test Values\":{\"main\":[[{\"node\":\"Aggregate Inputs\",\"type\":\"main\",\"index\":0}]]},\"Generate WAV\":{\"main\":[[{\"node\":\"Read Audio\",\"type\":\"main\",\"index\":0}]]},\"Loop Scripts\":{\"main\":[[],[{\"node\":\"Download Script\",\"type\":\"main\",\"index\":0}]]},\"Upload Audio\":{\"main\":[[{\"node\":\"Loop Scripts\",\"type\":\"main\",\"index\":0}]]},\"Download Script\":{\"main\":[[{\"node\":\"Save Script\",\"type\":\"main\",\"index\":0}]]},\"Aggregate Inputs\":{\"main\":[[{\"node\":\"Get Scripts\",\"type\":\"main\",\"index\":0}]]},\"Start: Manual Test\":{\"main\":[[{\"node\":\"Test Values\",\"type\":\"main\",\"index\":0}]]},\"Start: External Trigger\":{\"main\":[[{\"node\":\"Aggregate Inputs\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "## Audio Generator ‚Äì Documentation\n\nüéØ Purpose:  \nGenerate audio files from text scripts stored in Google Drive.\n\nüîÅ Flow:\n\n  1. Receive repo IDs.\n  2. Fetch text scripts.\n  3. Generate .wav files using local Bark model.\n  4. Upload back to Drive.\n\n\n\nüì¶ Dependencies:\n\n  * Python script: `/scripts/generate_voice.py`\n  * Bark (voice generation system)\n  * n8n instance with access to local shell\n  * Google Drive OAuth2 credentials\n\n\n\n‚úèÔ∏è Notes:\n\n  * Script filenames must end with `.txt`\n  * Only works with plain text\n  * No external API used = 100% free\n\n\n\nüì¶ `/scripts/generate_voice.py`:\n    \n    \n    import sys\n    import torch\n    import numpy\n    import re\n    from bark import SAMPLE_RATE, generate_audio, preload_models\n    from scipy.io.wavfile import write as write_wav\n    \n    # Patch to allow numpy._core.multiarray.scalar during loading\n    torch.serialization.add_safe_globals([numpy._core.multiarray.scalar])\n    \n    # Monkey patch torch.load to force weights_only=False\n    _original_torch_load = torch.load\n    def patched_torch_load(f, *args, **kwargs):\n        if 'weights_only' not in kwargs:\n            kwargs['weights_only'] = False\n        return _original_torch_load(f, *args, **kwargs)\n    torch.load = patched_torch_load\n    \n    # Preload Bark models\n    preload_models()\n    \n    def split_text(text, max_len=300):\n        # Split on punctuation to avoid mid-sentence cuts\n        sentences = re.split(r'(?&lt;=[.?!])\\s+', text)\n        chunks = []\n        current = \"\"\n        for sentence in sentences:\n            if len(current) + len(sentence) &lt; max_len:\n                current += sentence + \" \"\n            else:\n                chunks.append(current.strip())\n                current = sentence + \" \"\n        if current:\n            chunks.append(current.strip())\n        return chunks\n    \n    # Input text file and output path\n    input_text_path = sys.argv[1]\n    output_wav_path = sys.argv[2]\n    \n    with open(input_text_path, 'r', encoding='utf-8') as f:\n        full_text = f.read()\n    \n    voice_preset = \"v2/en_speaker_7\"\n    \n    chunks = split_text(full_text)\n    \n    # Generate and concatenate audio chunks\n    audio_arrays = []\n    for chunk in chunks:\n        print(f\"Generating audio for chunk: {chunk[:50]}...\")\n        audio = generate_audio(chunk, history_prompt=voice_preset)\n        audio_arrays.append(audio)\n    \n    # Merge all audio chunks\n    final_audio = numpy.concatenate(audio_arrays)\n    \n    # Write final .wav file\n    write_wav(output_wav_path, SAMPLE_RATE, final_audio)\n    \n    print(f\"Full audio generated at: {output_wav_path}\")\n    \n",
  "crawled_at": "2025-05-26T07:24:36.139523"
}