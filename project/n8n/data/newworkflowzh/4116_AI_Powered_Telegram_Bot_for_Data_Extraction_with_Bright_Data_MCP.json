{
  "url": "https://n8n.io/workflows/4116-ai-powered-telegram-bot-for-data-extraction-with-bright-data-mcp/",
  "title": "AI-Powered Telegram Bot for Data Extraction with Bright Data MCP",
  "author": "Cyril Nicko Gaspar",
  "publish_date": "Last update 5 days ago",
  "publish_date_absolute": "",
  "categories": [
    {
      "name": "Engineering"
    },
    {
      "name": "Building Blocks"
    },
    {
      "name": "AI"
    }
  ],
  "workflow_json": "{\"meta\":{\"instanceId\":\"4e6be3a68285934388a854ac0ffdc5e5500688d5cdb88d0ec2d734e85f097355\",\"templateCredsSetupCompleted\":true},\"nodes\":[{\"id\":\"9be111d1-4ea3-4c43-8b75-66a1123002fd\",\"name\":\"AI Agent\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[-1580,840],\"parameters\":{\"text\":\"={{ $json.body.message.text }}\",\"options\":{\"systemMessage\":\"You are a helpful assistant. Run the MCP tool when dealing with the web search, scraping, and browser automation.\"},\"promptType\":\"define\"},\"typeVersion\":1.9},{\"id\":\"860579ca-110e-4b7d-848a-e4085e05a6a6\",\"name\":\"Simple Memory\",\"type\":\"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\"position\":[-1520,1060],\"parameters\":{\"sessionKey\":\"={{ $json.body.message.chat.id }}\",\"sessionIdType\":\"customKey\"},\"typeVersion\":1.3},{\"id\":\"b9b2b497-1018-40ad-b1bd-0e04cbfdb95b\",\"name\":\"Sticky Note\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-2480,400],\"parameters\":{\"color\":2,\"width\":560,\"height\":640,\"content\":\"## Receive Webhook from Telegram\\nSetup telegram hook using the HTTP node below. Replace the api key placeholder in the URL field of the node.\\nReplace the URL with the one generated from the Webhook trigger node.\\n\"},\"typeVersion\":1},{\"id\":\"6fd8fd1b-0ec2-402a-8d97-13bbc6ca6ca2\",\"name\":\"OpenRouter Chat Model\",\"type\":\"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",\"position\":[-1660,1060],\"parameters\":{\"model\":\"anthropic/claude-3.7-sonnet\",\"options\":{}},\"credentials\":{\"openRouterApi\":{\"id\":\"mShT6DheOqjTyDCh\",\"name\":\"OpenRouter account\"}},\"typeVersion\":1},{\"id\":\"273d9378-bbea-49ea-8a4c-cf473da4639e\",\"name\":\"When clicking ‘Test workflow’\",\"type\":\"n8n-nodes-base.manualTrigger\",\"position\":[-2400,580],\"parameters\":{},\"typeVersion\":1},{\"id\":\"4f77a573-e729-4ca2-9263-005c9c67b21a\",\"name\":\"Set Telegram Webhook\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[-2140,580],\"parameters\":{\"url\":\"https://api.telegram.org/bot<your-api-token>/setWebhook\",\"options\":{},\"sendBody\":true,\"bodyParameters\":{\"parameters\":[{\"name\":\"url\",\"value\":\"<the url generated from your workflow>\"}]}},\"typeVersion\":4.2},{\"id\":\"b29f6cbd-2ca1-455e-9372-4d7c1aee2811\",\"name\":\"Receive Message Trigger from Telegram\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[-2280,840],\"webhookId\":\"4f1caff9-e22f-426b-b5da-f5175be0a7bc\",\"parameters\":{\"path\":\"4f1caff9-e22f-426b-b5da-f5175be0a7bc\",\"options\":{},\"httpMethod\":\"POST\"},\"typeVersion\":2},{\"id\":\"f8b25f38-143b-4fc8-890c-03701bde0809\",\"name\":\"Typing action\",\"type\":\"n8n-nodes-base.telegram\",\"position\":[-1040,260],\"webhookId\":\"84423ab1-dbb7-4105-9bb3-98abdf1a42bf\",\"parameters\":{\"chatId\":\"={{ $('Trigger by the main workflow').item.json.chatId }}\",\"operation\":\"sendChatAction\"},\"credentials\":{\"telegramApi\":{\"id\":\"GY19yNGJWcslVpXr\",\"name\":\"Telegram account\"}},\"typeVersion\":1.2},{\"id\":\"22d5b740-0ad4-4e4d-b5b4-7961e131d3bd\",\"name\":\"Sub-workflow to trigger Typing Action\",\"type\":\"n8n-nodes-base.executeWorkflow\",\"position\":[-1580,260],\"parameters\":{\"mode\":\"each\",\"options\":{\"waitForSubWorkflow\":false},\"workflowId\":{\"__rl\":true,\"mode\":\"list\",\"value\":\"nnFhm4hEcyaMNkXV\",\"cachedResultName\":\"Basic Bright Data MCP\"},\"workflowInputs\":{\"value\":{\"chatId\":\"={{ $json.body.message.chat.id }}\",\"executionId\":\"={{ $execution.id }}\"},\"schema\":[{\"id\":\"executionId\",\"type\":\"string\",\"display\":true,\"required\":false,\"displayName\":\"executionId\",\"defaultMatch\":false,\"canBeUsedToMatch\":true},{\"id\":\"chatId\",\"type\":\"number\",\"display\":true,\"required\":false,\"displayName\":\"chatId\",\"defaultMatch\":false,\"canBeUsedToMatch\":true}],\"mappingMode\":\"defineBelow\",\"matchingColumns\":[],\"attemptToConvertTypes\":false,\"convertFieldsToString\":true}},\"typeVersion\":1.2},{\"id\":\"a2d0a7ba-df6b-43d3-9fb4-1026e3d4d154\",\"name\":\"Sticky Note1\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1760,680],\"parameters\":{\"color\":3,\"width\":620,\"height\":560,\"content\":\"## AI Agent with Bright Data MCP as a tool\\nHost your SSE server using Supergateway or similar tools. Please check the template’s description for more instruction to setup the SSE from STDIO  command. Then paste the SSE endpoint tinthe MCP tool below.\"},\"typeVersion\":1},{\"id\":\"a4dd5168-8a4f-4ec6-8d3c-992ceb7db7ff\",\"name\":\"Sticky Note2\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-820,700],\"parameters\":{\"color\":5,\"width\":560,\"height\":460,\"content\":\"## Send the agent's message via Telegram Bot\"},\"typeVersion\":1},{\"id\":\"84999800-2659-4e4d-8771-d9c5f7ff4e2a\",\"name\":\"Sticky Note3\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[-1720,120],\"parameters\":{\"color\":4,\"width\":1560,\"height\":500,\"content\":\"## Loop the typing action in Telegram\\nTyping action last fro 10 seconds only, so while the agent is still processing query, execute this tool in a loop until it succeed\"},\"typeVersion\":1},{\"id\":\"266b1d20-452b-47fc-9632-437bf7f3abac\",\"name\":\"Reply Error Message\",\"type\":\"n8n-nodes-base.telegram\",\"position\":[320,280],\"webhookId\":\"2f426e92-cd04-4f68-a7c0-276c7a025429\",\"parameters\":{\"text\":\"There's an error with the bot. Please try again later.\",\"chatId\":\"={{ $('Trigger by the main workflow').item.json.chatId }}\",\"additionalFields\":{\"appendAttribution\":false}},\"credentials\":{\"telegramApi\":{\"id\":\"GY19yNGJWcslVpXr\",\"name\":\"Telegram account\"}},\"typeVersion\":1.2},{\"id\":\"4be1ec2b-3ef2-45b8-b1d4-cf39791654f2\",\"name\":\"Sticky Note4\",\"type\":\"n8n-nodes-base.stickyNote\",\"position\":[0,80],\"parameters\":{\"width\":560,\"height\":500,\"content\":\"## Reply error message to the user on error\"},\"typeVersion\":1},{\"id\":\"a3d321c8-4e9d-4c0e-86b5-da002b0ac29d\",\"name\":\"MCP Client\",\"type\":\"@n8n/n8n-nodes-langchain.mcpClientTool\",\"position\":[-1340,1080],\"parameters\":{\"sseEndpoint\":\"http://localhost:8000\"},\"typeVersion\":1},{\"id\":\"c716a991-17e0-4de4-af0d-ba6e44b5c6d2\",\"name\":\"Check if the execution in N8N is finished\",\"type\":\"n8n-nodes-base.n8n\",\"position\":[-600,260],\"parameters\":{\"options\":{},\"resource\":\"execution\",\"operation\":\"get\",\"executionId\":\"={{ $('Trigger by the main workflow').item.json.executionId }}\",\"requestOptions\":{}},\"credentials\":{\"n8nApi\":{\"id\":\"oYyQ7JNyppFRzPaV\",\"name\":\"n8n account\"}},\"typeVersion\":1},{\"id\":\"b6f08d79-16a5-47a7-800d-7c8ba902ab52\",\"name\":\"If the N8N execution is finished\",\"type\":\"n8n-nodes-base.if\",\"position\":[-340,320],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"ad6687c9-24a0-4332-8b0f-ec1aa0751cfc\",\"operator\":{\"type\":\"boolean\",\"operation\":\"false\",\"singleValue\":true},\"leftValue\":\"={{ $json.finished }}\",\"rightValue\":\"\"}]}},\"typeVersion\":2.2},{\"id\":\"38342c4f-b020-4dc5-b633-ebaaf2582fef\",\"name\":\"Check if the N8N status is success\",\"type\":\"n8n-nodes-base.if\",\"position\":[100,280],\"parameters\":{\"options\":{},\"conditions\":{\"options\":{\"version\":2,\"leftValue\":\"\",\"caseSensitive\":true,\"typeValidation\":\"strict\"},\"combinator\":\"and\",\"conditions\":[{\"id\":\"ad6687c9-24a0-4332-8b0f-ec1aa0751cfc\",\"operator\":{\"type\":\"string\",\"operation\":\"notEquals\"},\"leftValue\":\"={{ $json.status }}\",\"rightValue\":\"success\"}]}},\"typeVersion\":2.2},{\"id\":\"dd3c7d3e-b011-4856-b41e-c17882a19aab\",\"name\":\"Send AI’s output to the user via Telegram\",\"type\":\"n8n-nodes-base.telegram\",\"position\":[-580,840],\"webhookId\":\"56e83f5d-ba64-458d-9a5b-6c3d8ae6f584\",\"parameters\":{\"text\":\"={{ $json.output }}\",\"chatId\":\"={{ $('Receive Message Trigger from Telegram').item.json.body.message.chat.id }}\",\"additionalFields\":{\"appendAttribution\":false}},\"credentials\":{\"telegramApi\":{\"id\":\"GY19yNGJWcslVpXr\",\"name\":\"Telegram account\"}},\"typeVersion\":1.2},{\"id\":\"d415ca44-e93b-4e10-8af6-f0f6cc059e26\",\"name\":\"Wait for the typing action to finish by 10 seconds\",\"type\":\"n8n-nodes-base.wait\",\"position\":[-820,260],\"webhookId\":\"812d8e5e-2b50-4cbd-a4b5-f18640aa0e61\",\"parameters\":{\"amount\":10},\"typeVersion\":1.1},{\"id\":\"6d7822c9-ac66-443f-909b-83596dd738c0\",\"name\":\"Trigger by the main workflow\",\"type\":\"n8n-nodes-base.executeWorkflowTrigger\",\"position\":[-1300,260],\"parameters\":{\"workflowInputs\":{\"values\":[{\"name\":\"executionId\"},{\"name\":\"chatId\",\"type\":\"number\"}]}},\"typeVersion\":1.1}],\"pinData\":{},\"connections\":{\"AI Agent\":{\"main\":[[{\"node\":\"Send AI’s output to the user via Telegram\",\"type\":\"main\",\"index\":0}]]},\"MCP Client\":{\"ai_tool\":[[{\"node\":\"AI Agent\",\"type\":\"ai_tool\",\"index\":0}]]},\"Simple Memory\":{\"ai_memory\":[[{\"node\":\"AI Agent\",\"type\":\"ai_memory\",\"index\":0}]]},\"Typing action\":{\"main\":[[{\"node\":\"Wait for the typing action to finish by 10 seconds\",\"type\":\"main\",\"index\":0}]]},\"OpenRouter Chat Model\":{\"ai_languageModel\":[[{\"node\":\"AI Agent\",\"type\":\"ai_languageModel\",\"index\":0}]]},\"Trigger by the main workflow\":{\"main\":[[{\"node\":\"Typing action\",\"type\":\"main\",\"index\":0}]]},\"If the N8N execution is finished\":{\"main\":[[{\"node\":\"Typing action\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Check if the N8N status is success\",\"type\":\"main\",\"index\":0}]]},\"When clicking ‘Test workflow’\":{\"main\":[[{\"node\":\"Set Telegram Webhook\",\"type\":\"main\",\"index\":0}]]},\"Check if the N8N status is success\":{\"main\":[[{\"node\":\"Reply Error Message\",\"type\":\"main\",\"index\":0}],[]]},\"Receive Message Trigger from Telegram\":{\"main\":[[{\"node\":\"AI Agent\",\"type\":\"main\",\"index\":0},{\"node\":\"Sub-workflow to trigger Typing Action\",\"type\":\"main\",\"index\":0}]]},\"Check if the execution in N8N is finished\":{\"main\":[[{\"node\":\"If the N8N execution is finished\",\"type\":\"main\",\"index\":0}]]},\"Wait for the typing action to finish by 10 seconds\":{\"main\":[[{\"node\":\"Check if the execution in N8N is finished\",\"type\":\"main\",\"index\":0}]]}}}",
  "readme": "![IMG_0889.jpeg](https://n8niostorageaccount.blob.core.windows.net/n8nio-strapi-blobs-prod/assets/IMG_0889_c5b61918ef.jpeg)\n\n## 📌 **AI Agent Template with Bright Data MCP Tool Integration**\n\nThis template enables natural-language-driven automation using Bright Data MCP tools. It extracts all available tools from MCP, processes the user’s query through an AI agent, then dynamically selects and executes the appropriate tool.\n\n* * *\n\n### ❓ Problem It Solves\n\nTraditional automation often requires users to understand APIs, interfaces, or scripts to perform backend tasks. The Bright Data MCP integration solves this by allowing natural language interaction, intelligently classifying user intent, and managing context-aware execution of complex operations—ideal for data extraction, customer support, and workflow orchestration.\n\n* * *\n\n### 🧰 Pre-requisites\n\nBefore deploying this template, make sure you have:\n\n  * An active **N8N** instance (self-hosted or cloud).\n  * A valid **OpenRouter API key** (or another compatible AI model).\n  * Telegram bot and its API token\n  * Access to the **Bright Data MCP API** with credentials.\n  * Basic familiarity with N8N workflows and nodes.\n\n\n\n* * *\n\n### ⚙️ Setup Instructions\n\n  1. #### Setup and obtain API token and other necessary information from Bright Data\n\nIn your Bright Data account, obtain the following information:\n\n     * API token\n     * Web Unlocker zone name (optional)\n     * Browser API username and password string separated by colon (optional)\n  2. #### Host SSE server from STDIO command\n\nThe methods below will allow you to receive SSE (Server-Sent Events) from Bright Data MCP via a local Supergateway or Smithery\n\n* * *\n\n_**Method 1: Run Supergateway in a separate web service (Recommended)**_\n\nThis method will work for both cloud version and self-hosted N8N.\n\nSignup to any cloud services of your choice (DigitalOcean, Heroku, Hetzner, Render, etc.).\n\n##### For NPM based installation:\n\n     * Create a new web service.\n     * Choose Node.js as runtime environment and setup a custom server without repository.\n     * In your server’s settings to define environment variables or .env file, add:  \n`API_TOKEN=your_brightdata_api_token WEB_UNLOCKER_ZONE=optional_zone_name BROWSER_AUTH=optional_browser_auth`\n     * Paste the following text as a start command: `npx -y supergateway --stdio \"npx -y @brightdata/mcp\" --port 8000 --baseUrl http://localhost:8000 --ssePath /sse --messagePath /message`\n     * Deploy it and copy the web server URL, then append `/sse` into it.\n     * Your SSE server should now be accessible at: `https://your_server_url/sse`\n\n##### For Docker based installation:\n\n     * Create a new web service.\n     * Choose Docker as the runtime environment.\n     * Set up your Docker environment by pulling the necessary images or creating a custom Dockerfile.\n     * In your server’s settings to define environment variables or .env file, add:  \n`API_TOKEN=your_brightdata_api_token WEB_UNLOCKER_ZONE=optional_zone_name BROWSER_AUTH=optional_browser_auth`\n     * Use the following Docker command to run Supergateway: `docker run -it --rm -p 8000:8000 supercorp/supergateway \\ --stdio \"npx -y @brightdata/mcp /\" \\ --port 8000`\n     * Deploy it and copy the web server URL, then append `/sse` into it.\n     * Your SSE server should now be accessible at: `https://your_server_url/sse`\n\nFor more installation guides, please refer to <https://github.com/supercorp-ai/supergateway.git>.\n\n* * *\n\n_**Method 2: Run Supergateway in the same web service as the N8N instance**_\n\nThis method will only work for self-hosted N8N.\n\n##### a. Set Required Environment Variables\n\nIn your server's settings to define environment variables or `.env` file, add:\n    \n    API_TOKEN=your_brightdata_api_token\n    WEB_UNLOCKER_ZONE=optional_zone_name\n    BROWSER_AUTH=optional_browser_auth\n    \n\n##### b. Run Supergateway in Background\n    \n    npx -y supergateway --stdio \"npx -y @brightdata/mcp\" --port 8000 --baseUrl http://localhost:8000 --ssePath /sse --messagePath /message\n    \n\nUse the command above to execute it through the cloud shell or set it as a pre-deploy command.\n\nYour SSE server should now be accessible at:  \n`http://localhost:8000/sse`\n\nFor more installation guides, please refer to <https://github.com/supercorp-ai/supergateway.git>.\n\n* * *\n\n**_Method 3: Configure via[Smithery.ai](http://Smithery.ai)_ (Easiest)**  \nIf you don't want additional setup and want to test it right away, follow these instructions:\n\nVisit <https://smithery.ai/server/@luminati-io/brightdata-mcp/tools> to:\n\n     * Signup (if you are new to Smithery)\n     * Create an API key\n     * Define environment variables via a profile\n     * Retrieve your SSE server HTTP URL\n  3. **Import the Workflow**\n\n     * Open N8N.\n     * Import the JSON workflow file included with this template.\n     * Update any nodes referencing external services (e.g., OpenRouter, Telegram).\n  4. **Setup Telegram Integration**\n\n     * If you haven't setup a bot in Telegram, below is the instruction how to create one using BotFather:\n\n       * Search for **@BotFather** in Telegram and start a conversation with it.\n       * Send the command `/newbot` to create a new bot. You'll be prompted to enter a name and a unique username for your bot.\n       * BotFather will provide you with an access token, which you'll need to use to interact with the bot's API.\n     * Edit the **HTTP Request** node in the workflow.\n\n     * Configure the URL as follows:\n           \n           https://api.telegram.org/bot+your_telegram_bot_token+/setWebhook?url=+your_webhook_url\n           \n\n     * Replace `+your_telegram_bot_token+` with your actual Telegram bot token.\n\n     * Replace `+your_webhook_url+` with the URL from the **Webhook Trigger** node in the workflow.\n\n     * This will set up Telegram to forward messages to your n8n agent.\n\n\n\n\n* * *\n\n### 🔄 Workflow Functionality (Summary)\n\n  * The user submits a message via chat.\n  * **Memory** nodes retain context for multi-turn conversations.\n  * The mapped tool is executed and results are returned contextually.\n\n\n\n🧠 _Optional memory buffers and memory manager nodes keep the interaction context-aware._\n\n* * *\n\n### 🧩 Use Cases\n\n  * **Data Scraping on Demand** : Launch scraping tasks via chat.\n  * **Lead Generation Bots** : Enrich or validate leads with MCP tools.\n  * **AI-Powered Customer Support** : Classify and answer queries with real-time data tools.\n  * **Workflow Assistants** : Let teams run backend processes like lookups or report generation using plain language.\n\n\n\n* * *\n\n### 🛠️ Customization\n\n  * **Classifier Prompt & Logic**: Tweak the AI’s prompt and tool-matching schema to better fit your use case.\n  * **Memory Configuration** : Adjust retention policies and context depth.\n  * **Tool Execution Sub-Workflow** : Extend for retries, logging, or chaining actions.\n  * **Omni-Channel Support** : Connect via webhooks to chat interfaces like Slack, WhatsApp, Telegram, or custom UIs.\n\n\n\n* * *\n\n### ✅ Summary\n\nThis template equips you with a powerful no-code/low-code AI agent that translates conversation into real-world action. Using Bright Data’s MCP tools through natural language, it enables teams to automate and scale data-driven tasks effortlessly.\n",
  "crawled_at": "2025-05-26T06:44:27.245965"
}